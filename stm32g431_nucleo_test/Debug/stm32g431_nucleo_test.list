
stm32g431_nucleo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08011000  08011000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c42c  080111e0  080111e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000f30  0801d60c  0801d60c  0000d60c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801e53c  0801e53c  0000f08c  2**0
                  CONTENTS
  4 .ARM          00000008  0801e53c  0801e53c  0000e53c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801e544  0801e544  0000f08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801e544  0801e544  0000e544  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801e548  0801e548  0000e548  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801e54c  0000f000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000628  2000008c  0801e5d8  0000f08c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  200006b4  0801e5d8  0000f6b4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000f08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000272c9  00000000  00000000  0000f0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00005b5b  00000000  00000000  00036385  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000022b0  00000000  00000000  0003bee0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001afd  00000000  00000000  0003e190  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000081c2  00000000  00000000  0003fc8d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000324be  00000000  00000000  00047e4f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ef7c5  00000000  00000000  0007a30d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00169ad2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009c94  00000000  00000000  00169b18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  001737ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080111e0 <__do_global_dtors_aux>:
 80111e0:	b510      	push	{r4, lr}
 80111e2:	4c05      	ldr	r4, [pc, #20]	@ (80111f8 <__do_global_dtors_aux+0x18>)
 80111e4:	7823      	ldrb	r3, [r4, #0]
 80111e6:	b933      	cbnz	r3, 80111f6 <__do_global_dtors_aux+0x16>
 80111e8:	4b04      	ldr	r3, [pc, #16]	@ (80111fc <__do_global_dtors_aux+0x1c>)
 80111ea:	b113      	cbz	r3, 80111f2 <__do_global_dtors_aux+0x12>
 80111ec:	4804      	ldr	r0, [pc, #16]	@ (8011200 <__do_global_dtors_aux+0x20>)
 80111ee:	f3af 8000 	nop.w
 80111f2:	2301      	movs	r3, #1
 80111f4:	7023      	strb	r3, [r4, #0]
 80111f6:	bd10      	pop	{r4, pc}
 80111f8:	2000008c 	.word	0x2000008c
 80111fc:	00000000 	.word	0x00000000
 8011200:	0801d5f4 	.word	0x0801d5f4

08011204 <frame_dummy>:
 8011204:	b508      	push	{r3, lr}
 8011206:	4b03      	ldr	r3, [pc, #12]	@ (8011214 <frame_dummy+0x10>)
 8011208:	b11b      	cbz	r3, 8011212 <frame_dummy+0xe>
 801120a:	4903      	ldr	r1, [pc, #12]	@ (8011218 <frame_dummy+0x14>)
 801120c:	4803      	ldr	r0, [pc, #12]	@ (801121c <frame_dummy+0x18>)
 801120e:	f3af 8000 	nop.w
 8011212:	bd08      	pop	{r3, pc}
 8011214:	00000000 	.word	0x00000000
 8011218:	20000090 	.word	0x20000090
 801121c:	0801d5f4 	.word	0x0801d5f4

08011220 <strcmp>:
 8011220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011228:	2a01      	cmp	r2, #1
 801122a:	bf28      	it	cs
 801122c:	429a      	cmpcs	r2, r3
 801122e:	d0f7      	beq.n	8011220 <strcmp>
 8011230:	1ad0      	subs	r0, r2, r3
 8011232:	4770      	bx	lr

08011234 <strlen>:
 8011234:	4603      	mov	r3, r0
 8011236:	f813 2b01 	ldrb.w	r2, [r3], #1
 801123a:	2a00      	cmp	r2, #0
 801123c:	d1fb      	bne.n	8011236 <strlen+0x2>
 801123e:	1a18      	subs	r0, r3, r0
 8011240:	3801      	subs	r0, #1
 8011242:	4770      	bx	lr
	...

08011250 <memchr>:
 8011250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8011254:	2a10      	cmp	r2, #16
 8011256:	db2b      	blt.n	80112b0 <memchr+0x60>
 8011258:	f010 0f07 	tst.w	r0, #7
 801125c:	d008      	beq.n	8011270 <memchr+0x20>
 801125e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011262:	3a01      	subs	r2, #1
 8011264:	428b      	cmp	r3, r1
 8011266:	d02d      	beq.n	80112c4 <memchr+0x74>
 8011268:	f010 0f07 	tst.w	r0, #7
 801126c:	b342      	cbz	r2, 80112c0 <memchr+0x70>
 801126e:	d1f6      	bne.n	801125e <memchr+0xe>
 8011270:	b4f0      	push	{r4, r5, r6, r7}
 8011272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8011276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801127a:	f022 0407 	bic.w	r4, r2, #7
 801127e:	f07f 0700 	mvns.w	r7, #0
 8011282:	2300      	movs	r3, #0
 8011284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8011288:	3c08      	subs	r4, #8
 801128a:	ea85 0501 	eor.w	r5, r5, r1
 801128e:	ea86 0601 	eor.w	r6, r6, r1
 8011292:	fa85 f547 	uadd8	r5, r5, r7
 8011296:	faa3 f587 	sel	r5, r3, r7
 801129a:	fa86 f647 	uadd8	r6, r6, r7
 801129e:	faa5 f687 	sel	r6, r5, r7
 80112a2:	b98e      	cbnz	r6, 80112c8 <memchr+0x78>
 80112a4:	d1ee      	bne.n	8011284 <memchr+0x34>
 80112a6:	bcf0      	pop	{r4, r5, r6, r7}
 80112a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80112ac:	f002 0207 	and.w	r2, r2, #7
 80112b0:	b132      	cbz	r2, 80112c0 <memchr+0x70>
 80112b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80112b6:	3a01      	subs	r2, #1
 80112b8:	ea83 0301 	eor.w	r3, r3, r1
 80112bc:	b113      	cbz	r3, 80112c4 <memchr+0x74>
 80112be:	d1f8      	bne.n	80112b2 <memchr+0x62>
 80112c0:	2000      	movs	r0, #0
 80112c2:	4770      	bx	lr
 80112c4:	3801      	subs	r0, #1
 80112c6:	4770      	bx	lr
 80112c8:	2d00      	cmp	r5, #0
 80112ca:	bf06      	itte	eq
 80112cc:	4635      	moveq	r5, r6
 80112ce:	3803      	subeq	r0, #3
 80112d0:	3807      	subne	r0, #7
 80112d2:	f015 0f01 	tst.w	r5, #1
 80112d6:	d107      	bne.n	80112e8 <memchr+0x98>
 80112d8:	3001      	adds	r0, #1
 80112da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80112de:	bf02      	ittt	eq
 80112e0:	3001      	addeq	r0, #1
 80112e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80112e6:	3001      	addeq	r0, #1
 80112e8:	bcf0      	pop	{r4, r5, r6, r7}
 80112ea:	3801      	subs	r0, #1
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop

080112f0 <__aeabi_uldivmod>:
 80112f0:	b953      	cbnz	r3, 8011308 <__aeabi_uldivmod+0x18>
 80112f2:	b94a      	cbnz	r2, 8011308 <__aeabi_uldivmod+0x18>
 80112f4:	2900      	cmp	r1, #0
 80112f6:	bf08      	it	eq
 80112f8:	2800      	cmpeq	r0, #0
 80112fa:	bf1c      	itt	ne
 80112fc:	f04f 31ff 	movne.w	r1, #4294967295
 8011300:	f04f 30ff 	movne.w	r0, #4294967295
 8011304:	f000 b96a 	b.w	80115dc <__aeabi_idiv0>
 8011308:	f1ad 0c08 	sub.w	ip, sp, #8
 801130c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8011310:	f000 f806 	bl	8011320 <__udivmoddi4>
 8011314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801131c:	b004      	add	sp, #16
 801131e:	4770      	bx	lr

08011320 <__udivmoddi4>:
 8011320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011324:	9d08      	ldr	r5, [sp, #32]
 8011326:	460c      	mov	r4, r1
 8011328:	2b00      	cmp	r3, #0
 801132a:	d14e      	bne.n	80113ca <__udivmoddi4+0xaa>
 801132c:	4694      	mov	ip, r2
 801132e:	458c      	cmp	ip, r1
 8011330:	4686      	mov	lr, r0
 8011332:	fab2 f282 	clz	r2, r2
 8011336:	d962      	bls.n	80113fe <__udivmoddi4+0xde>
 8011338:	b14a      	cbz	r2, 801134e <__udivmoddi4+0x2e>
 801133a:	f1c2 0320 	rsb	r3, r2, #32
 801133e:	4091      	lsls	r1, r2
 8011340:	fa20 f303 	lsr.w	r3, r0, r3
 8011344:	fa0c fc02 	lsl.w	ip, ip, r2
 8011348:	4319      	orrs	r1, r3
 801134a:	fa00 fe02 	lsl.w	lr, r0, r2
 801134e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8011352:	fa1f f68c 	uxth.w	r6, ip
 8011356:	fbb1 f4f7 	udiv	r4, r1, r7
 801135a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801135e:	fb07 1114 	mls	r1, r7, r4, r1
 8011362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011366:	fb04 f106 	mul.w	r1, r4, r6
 801136a:	4299      	cmp	r1, r3
 801136c:	d90a      	bls.n	8011384 <__udivmoddi4+0x64>
 801136e:	eb1c 0303 	adds.w	r3, ip, r3
 8011372:	f104 30ff 	add.w	r0, r4, #4294967295
 8011376:	f080 8112 	bcs.w	801159e <__udivmoddi4+0x27e>
 801137a:	4299      	cmp	r1, r3
 801137c:	f240 810f 	bls.w	801159e <__udivmoddi4+0x27e>
 8011380:	3c02      	subs	r4, #2
 8011382:	4463      	add	r3, ip
 8011384:	1a59      	subs	r1, r3, r1
 8011386:	fa1f f38e 	uxth.w	r3, lr
 801138a:	fbb1 f0f7 	udiv	r0, r1, r7
 801138e:	fb07 1110 	mls	r1, r7, r0, r1
 8011392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011396:	fb00 f606 	mul.w	r6, r0, r6
 801139a:	429e      	cmp	r6, r3
 801139c:	d90a      	bls.n	80113b4 <__udivmoddi4+0x94>
 801139e:	eb1c 0303 	adds.w	r3, ip, r3
 80113a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80113a6:	f080 80fc 	bcs.w	80115a2 <__udivmoddi4+0x282>
 80113aa:	429e      	cmp	r6, r3
 80113ac:	f240 80f9 	bls.w	80115a2 <__udivmoddi4+0x282>
 80113b0:	4463      	add	r3, ip
 80113b2:	3802      	subs	r0, #2
 80113b4:	1b9b      	subs	r3, r3, r6
 80113b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80113ba:	2100      	movs	r1, #0
 80113bc:	b11d      	cbz	r5, 80113c6 <__udivmoddi4+0xa6>
 80113be:	40d3      	lsrs	r3, r2
 80113c0:	2200      	movs	r2, #0
 80113c2:	e9c5 3200 	strd	r3, r2, [r5]
 80113c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ca:	428b      	cmp	r3, r1
 80113cc:	d905      	bls.n	80113da <__udivmoddi4+0xba>
 80113ce:	b10d      	cbz	r5, 80113d4 <__udivmoddi4+0xb4>
 80113d0:	e9c5 0100 	strd	r0, r1, [r5]
 80113d4:	2100      	movs	r1, #0
 80113d6:	4608      	mov	r0, r1
 80113d8:	e7f5      	b.n	80113c6 <__udivmoddi4+0xa6>
 80113da:	fab3 f183 	clz	r1, r3
 80113de:	2900      	cmp	r1, #0
 80113e0:	d146      	bne.n	8011470 <__udivmoddi4+0x150>
 80113e2:	42a3      	cmp	r3, r4
 80113e4:	d302      	bcc.n	80113ec <__udivmoddi4+0xcc>
 80113e6:	4290      	cmp	r0, r2
 80113e8:	f0c0 80f0 	bcc.w	80115cc <__udivmoddi4+0x2ac>
 80113ec:	1a86      	subs	r6, r0, r2
 80113ee:	eb64 0303 	sbc.w	r3, r4, r3
 80113f2:	2001      	movs	r0, #1
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	d0e6      	beq.n	80113c6 <__udivmoddi4+0xa6>
 80113f8:	e9c5 6300 	strd	r6, r3, [r5]
 80113fc:	e7e3      	b.n	80113c6 <__udivmoddi4+0xa6>
 80113fe:	2a00      	cmp	r2, #0
 8011400:	f040 8090 	bne.w	8011524 <__udivmoddi4+0x204>
 8011404:	eba1 040c 	sub.w	r4, r1, ip
 8011408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801140c:	fa1f f78c 	uxth.w	r7, ip
 8011410:	2101      	movs	r1, #1
 8011412:	fbb4 f6f8 	udiv	r6, r4, r8
 8011416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801141a:	fb08 4416 	mls	r4, r8, r6, r4
 801141e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011422:	fb07 f006 	mul.w	r0, r7, r6
 8011426:	4298      	cmp	r0, r3
 8011428:	d908      	bls.n	801143c <__udivmoddi4+0x11c>
 801142a:	eb1c 0303 	adds.w	r3, ip, r3
 801142e:	f106 34ff 	add.w	r4, r6, #4294967295
 8011432:	d202      	bcs.n	801143a <__udivmoddi4+0x11a>
 8011434:	4298      	cmp	r0, r3
 8011436:	f200 80cd 	bhi.w	80115d4 <__udivmoddi4+0x2b4>
 801143a:	4626      	mov	r6, r4
 801143c:	1a1c      	subs	r4, r3, r0
 801143e:	fa1f f38e 	uxth.w	r3, lr
 8011442:	fbb4 f0f8 	udiv	r0, r4, r8
 8011446:	fb08 4410 	mls	r4, r8, r0, r4
 801144a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801144e:	fb00 f707 	mul.w	r7, r0, r7
 8011452:	429f      	cmp	r7, r3
 8011454:	d908      	bls.n	8011468 <__udivmoddi4+0x148>
 8011456:	eb1c 0303 	adds.w	r3, ip, r3
 801145a:	f100 34ff 	add.w	r4, r0, #4294967295
 801145e:	d202      	bcs.n	8011466 <__udivmoddi4+0x146>
 8011460:	429f      	cmp	r7, r3
 8011462:	f200 80b0 	bhi.w	80115c6 <__udivmoddi4+0x2a6>
 8011466:	4620      	mov	r0, r4
 8011468:	1bdb      	subs	r3, r3, r7
 801146a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801146e:	e7a5      	b.n	80113bc <__udivmoddi4+0x9c>
 8011470:	f1c1 0620 	rsb	r6, r1, #32
 8011474:	408b      	lsls	r3, r1
 8011476:	fa22 f706 	lsr.w	r7, r2, r6
 801147a:	431f      	orrs	r7, r3
 801147c:	fa20 fc06 	lsr.w	ip, r0, r6
 8011480:	fa04 f301 	lsl.w	r3, r4, r1
 8011484:	ea43 030c 	orr.w	r3, r3, ip
 8011488:	40f4      	lsrs	r4, r6
 801148a:	fa00 f801 	lsl.w	r8, r0, r1
 801148e:	0c38      	lsrs	r0, r7, #16
 8011490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8011494:	fbb4 fef0 	udiv	lr, r4, r0
 8011498:	fa1f fc87 	uxth.w	ip, r7
 801149c:	fb00 441e 	mls	r4, r0, lr, r4
 80114a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80114a4:	fb0e f90c 	mul.w	r9, lr, ip
 80114a8:	45a1      	cmp	r9, r4
 80114aa:	fa02 f201 	lsl.w	r2, r2, r1
 80114ae:	d90a      	bls.n	80114c6 <__udivmoddi4+0x1a6>
 80114b0:	193c      	adds	r4, r7, r4
 80114b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80114b6:	f080 8084 	bcs.w	80115c2 <__udivmoddi4+0x2a2>
 80114ba:	45a1      	cmp	r9, r4
 80114bc:	f240 8081 	bls.w	80115c2 <__udivmoddi4+0x2a2>
 80114c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80114c4:	443c      	add	r4, r7
 80114c6:	eba4 0409 	sub.w	r4, r4, r9
 80114ca:	fa1f f983 	uxth.w	r9, r3
 80114ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80114d2:	fb00 4413 	mls	r4, r0, r3, r4
 80114d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80114da:	fb03 fc0c 	mul.w	ip, r3, ip
 80114de:	45a4      	cmp	ip, r4
 80114e0:	d907      	bls.n	80114f2 <__udivmoddi4+0x1d2>
 80114e2:	193c      	adds	r4, r7, r4
 80114e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80114e8:	d267      	bcs.n	80115ba <__udivmoddi4+0x29a>
 80114ea:	45a4      	cmp	ip, r4
 80114ec:	d965      	bls.n	80115ba <__udivmoddi4+0x29a>
 80114ee:	3b02      	subs	r3, #2
 80114f0:	443c      	add	r4, r7
 80114f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80114f6:	fba0 9302 	umull	r9, r3, r0, r2
 80114fa:	eba4 040c 	sub.w	r4, r4, ip
 80114fe:	429c      	cmp	r4, r3
 8011500:	46ce      	mov	lr, r9
 8011502:	469c      	mov	ip, r3
 8011504:	d351      	bcc.n	80115aa <__udivmoddi4+0x28a>
 8011506:	d04e      	beq.n	80115a6 <__udivmoddi4+0x286>
 8011508:	b155      	cbz	r5, 8011520 <__udivmoddi4+0x200>
 801150a:	ebb8 030e 	subs.w	r3, r8, lr
 801150e:	eb64 040c 	sbc.w	r4, r4, ip
 8011512:	fa04 f606 	lsl.w	r6, r4, r6
 8011516:	40cb      	lsrs	r3, r1
 8011518:	431e      	orrs	r6, r3
 801151a:	40cc      	lsrs	r4, r1
 801151c:	e9c5 6400 	strd	r6, r4, [r5]
 8011520:	2100      	movs	r1, #0
 8011522:	e750      	b.n	80113c6 <__udivmoddi4+0xa6>
 8011524:	f1c2 0320 	rsb	r3, r2, #32
 8011528:	fa20 f103 	lsr.w	r1, r0, r3
 801152c:	fa0c fc02 	lsl.w	ip, ip, r2
 8011530:	fa24 f303 	lsr.w	r3, r4, r3
 8011534:	4094      	lsls	r4, r2
 8011536:	430c      	orrs	r4, r1
 8011538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801153c:	fa00 fe02 	lsl.w	lr, r0, r2
 8011540:	fa1f f78c 	uxth.w	r7, ip
 8011544:	fbb3 f0f8 	udiv	r0, r3, r8
 8011548:	fb08 3110 	mls	r1, r8, r0, r3
 801154c:	0c23      	lsrs	r3, r4, #16
 801154e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011552:	fb00 f107 	mul.w	r1, r0, r7
 8011556:	4299      	cmp	r1, r3
 8011558:	d908      	bls.n	801156c <__udivmoddi4+0x24c>
 801155a:	eb1c 0303 	adds.w	r3, ip, r3
 801155e:	f100 36ff 	add.w	r6, r0, #4294967295
 8011562:	d22c      	bcs.n	80115be <__udivmoddi4+0x29e>
 8011564:	4299      	cmp	r1, r3
 8011566:	d92a      	bls.n	80115be <__udivmoddi4+0x29e>
 8011568:	3802      	subs	r0, #2
 801156a:	4463      	add	r3, ip
 801156c:	1a5b      	subs	r3, r3, r1
 801156e:	b2a4      	uxth	r4, r4
 8011570:	fbb3 f1f8 	udiv	r1, r3, r8
 8011574:	fb08 3311 	mls	r3, r8, r1, r3
 8011578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801157c:	fb01 f307 	mul.w	r3, r1, r7
 8011580:	42a3      	cmp	r3, r4
 8011582:	d908      	bls.n	8011596 <__udivmoddi4+0x276>
 8011584:	eb1c 0404 	adds.w	r4, ip, r4
 8011588:	f101 36ff 	add.w	r6, r1, #4294967295
 801158c:	d213      	bcs.n	80115b6 <__udivmoddi4+0x296>
 801158e:	42a3      	cmp	r3, r4
 8011590:	d911      	bls.n	80115b6 <__udivmoddi4+0x296>
 8011592:	3902      	subs	r1, #2
 8011594:	4464      	add	r4, ip
 8011596:	1ae4      	subs	r4, r4, r3
 8011598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801159c:	e739      	b.n	8011412 <__udivmoddi4+0xf2>
 801159e:	4604      	mov	r4, r0
 80115a0:	e6f0      	b.n	8011384 <__udivmoddi4+0x64>
 80115a2:	4608      	mov	r0, r1
 80115a4:	e706      	b.n	80113b4 <__udivmoddi4+0x94>
 80115a6:	45c8      	cmp	r8, r9
 80115a8:	d2ae      	bcs.n	8011508 <__udivmoddi4+0x1e8>
 80115aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80115ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80115b2:	3801      	subs	r0, #1
 80115b4:	e7a8      	b.n	8011508 <__udivmoddi4+0x1e8>
 80115b6:	4631      	mov	r1, r6
 80115b8:	e7ed      	b.n	8011596 <__udivmoddi4+0x276>
 80115ba:	4603      	mov	r3, r0
 80115bc:	e799      	b.n	80114f2 <__udivmoddi4+0x1d2>
 80115be:	4630      	mov	r0, r6
 80115c0:	e7d4      	b.n	801156c <__udivmoddi4+0x24c>
 80115c2:	46d6      	mov	lr, sl
 80115c4:	e77f      	b.n	80114c6 <__udivmoddi4+0x1a6>
 80115c6:	4463      	add	r3, ip
 80115c8:	3802      	subs	r0, #2
 80115ca:	e74d      	b.n	8011468 <__udivmoddi4+0x148>
 80115cc:	4606      	mov	r6, r0
 80115ce:	4623      	mov	r3, r4
 80115d0:	4608      	mov	r0, r1
 80115d2:	e70f      	b.n	80113f4 <__udivmoddi4+0xd4>
 80115d4:	3e02      	subs	r6, #2
 80115d6:	4463      	add	r3, ip
 80115d8:	e730      	b.n	801143c <__udivmoddi4+0x11c>
 80115da:	bf00      	nop

080115dc <__aeabi_idiv0>:
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop

080115e0 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80115e0:	b480      	push	{r7}
 80115e2:	af00      	add	r7, sp, #0
    /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP     | FLASH_FLAG_OPERR   |
 80115e4:	4b04      	ldr	r3, [pc, #16]	@ (80115f8 <FLASH_If_Init+0x18>)
 80115e6:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 80115ea:	611a      	str	r2, [r3, #16]
                          FLASH_FLAG_PGSERR  | FLASH_FLAG_PROGERR |
                          FLASH_FLAG_WRPERR  | FLASH_FLAG_PGAERR  |
                          FLASH_FLAG_SIZERR  | FLASH_FLAG_MISERR  |
                          FLASH_FLAG_FASTERR);// | FLASH_FLAG_OPTVERR );
}
 80115ec:	bf00      	nop
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	40022000 	.word	0x40022000

080115fc <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartPage)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b088      	sub	sp, #32
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  uint32_t UserStartPage;
  uint32_t PageErr;
  FLASH_EraseInitTypeDef pEraseInit;

  if (StartPage > APPLICATION_ADDRESS_M4_END) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	4a16      	ldr	r2, [pc, #88]	@ (8011660 <FLASH_If_Erase+0x64>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d301      	bcc.n	8011610 <FLASH_If_Erase+0x14>
    return FALSE;
 801160c:	2300      	movs	r3, #0
 801160e:	e023      	b.n	8011658 <FLASH_If_Erase+0x5c>
  }
  
  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock(); 
 8011610:	f004 fa32 	bl	8015a78 <HAL_FLASH_Unlock>
  FLASH_If_Init();
 8011614:	f7ff ffe4 	bl	80115e0 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartPage           = GetPage(StartPage);
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 f823 	bl	8011664 <GetPage>
 801161e:	61f8      	str	r0, [r7, #28]
  pEraseInit.TypeErase    = FLASH_TYPEERASE_PAGES;
 8011620:	2300      	movs	r3, #0
 8011622:	60bb      	str	r3, [r7, #8]
  pEraseInit.Page         = UserStartPage;
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages      = FLASH_PAGE_63 - UserStartPage;
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 801162e:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks        = FLASH_BANK_1;
 8011630:	2301      	movs	r3, #1
 8011632:	60fb      	str	r3, [r7, #12]
#if M4_LEGACY
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
#endif

  if (HAL_FLASHEx_Erase(&pEraseInit, &PageErr) != HAL_OK) {
 8011634:	f107 0218 	add.w	r2, r7, #24
 8011638:	f107 0308 	add.w	r3, r7, #8
 801163c:	4611      	mov	r1, r2
 801163e:	4618      	mov	r0, r3
 8011640:	f004 fb5c 	bl	8015cfc <HAL_FLASHEx_Erase>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d003      	beq.n	8011652 <FLASH_If_Erase+0x56>
    HAL_FLASH_Lock();
 801164a:	f004 fa37 	bl	8015abc <HAL_FLASH_Lock>
    /* Error occurred while sector erase */
    return FALSE;
 801164e:	2300      	movs	r3, #0
 8011650:	e002      	b.n	8011658 <FLASH_If_Erase+0x5c>
  }
  HAL_FLASH_Lock();
 8011652:	f004 fa33 	bl	8015abc <HAL_FLASH_Lock>

#if 0 // DBG
  printf("Page Number %d Target Address 0x%08lx\r\n", pEraseInit.Page, (uint32_t)StartPage);
#endif
  return TRUE;
 8011656:	2301      	movs	r3, #1
}
 8011658:	4618      	mov	r0, r3
 801165a:	3720      	adds	r7, #32
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}
 8011660:	0801ffff 	.word	0x0801ffff

08011664 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Address: Flash address
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t Address)
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  uint32_t page = FLASH_PAGE_0;
 801166c:	2300      	movs	r3, #0
 801166e:	60fb      	str	r3, [r7, #12]
  
  for (uint8_t cnt = FLASH_PAGE_0; cnt <= FLASH_PAGE_63; cnt++) {
 8011670:	2300      	movs	r3, #0
 8011672:	72fb      	strb	r3, [r7, #11]
 8011674:	e01c      	b.n	80116b0 <GetPage+0x4c>
    if (flash_map[cnt].start_addr >= Address && 
 8011676:	7afa      	ldrb	r2, [r7, #11]
 8011678:	4912      	ldr	r1, [pc, #72]	@ (80116c4 <GetPage+0x60>)
 801167a:	4613      	mov	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	4413      	add	r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	440b      	add	r3, r1
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	429a      	cmp	r2, r3
 801168a:	d80e      	bhi.n	80116aa <GetPage+0x46>
        flash_map[cnt].end_addr   <  Address) {
 801168c:	7afa      	ldrb	r2, [r7, #11]
 801168e:	490d      	ldr	r1, [pc, #52]	@ (80116c4 <GetPage+0x60>)
 8011690:	4613      	mov	r3, r2
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	4413      	add	r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	440b      	add	r3, r1
 801169a:	3304      	adds	r3, #4
 801169c:	681b      	ldr	r3, [r3, #0]
    if (flash_map[cnt].start_addr >= Address && 
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d902      	bls.n	80116aa <GetPage+0x46>
        page = cnt;
 80116a4:	7afb      	ldrb	r3, [r7, #11]
 80116a6:	60fb      	str	r3, [r7, #12]
        break;
 80116a8:	e005      	b.n	80116b6 <GetPage+0x52>
  for (uint8_t cnt = FLASH_PAGE_0; cnt <= FLASH_PAGE_63; cnt++) {
 80116aa:	7afb      	ldrb	r3, [r7, #11]
 80116ac:	3301      	adds	r3, #1
 80116ae:	72fb      	strb	r3, [r7, #11]
 80116b0:	7afb      	ldrb	r3, [r7, #11]
 80116b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80116b4:	d9df      	bls.n	8011676 <GetPage+0x12>
    }
  }
  return page;
 80116b6:	68fb      	ldr	r3, [r7, #12]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3714      	adds	r7, #20
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr
 80116c4:	0801df88 	.word	0x0801df88

080116c8 <_write>:
//----------------------------------------
// retarget
//----------------------------------------
extern UART_HandleTypeDef hlpuart1;
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
    if ( HAL_UART_Transmit(&hlpuart1, ptr, len, len) == HAL_OK ) return len;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	68b9      	ldr	r1, [r7, #8]
 80116dc:	4806      	ldr	r0, [pc, #24]	@ (80116f8 <_write+0x30>)
 80116de:	f007 faf9 	bl	8018cd4 <HAL_UART_Transmit>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d101      	bne.n	80116ec <_write+0x24>
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	e000      	b.n	80116ee <_write+0x26>
    else return 0;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	2000039c 	.word	0x2000039c

080116fc <Convert_Char>:
//----------------------------------------
// CLI UART CALLBACK for stm32f
//----------------------------------------
/* USER CODE BEGIN 1 */
void Convert_Char(uint8_t *byte)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
    #if 1 // LOW to UP
    if ((*byte >= LOWER_A) && (*byte <= LOWER_Z)) {
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	2b60      	cmp	r3, #96	@ 0x60
 801170a:	d909      	bls.n	8011720 <Convert_Char+0x24>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	2b7a      	cmp	r3, #122	@ 0x7a
 8011712:	d805      	bhi.n	8011720 <Convert_Char+0x24>
        *byte -= CONVERT_CHAR_OFFSET;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	3b20      	subs	r3, #32
 801171a:	b2da      	uxtb	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	701a      	strb	r2, [r3, #0]
    #else
    if ((*byte >= UPPER_A) && (*byte <= UPPER_Z)) {
        *byte += CONVERT_CHAR_OFFSET;
    }
    #endif
}
 8011720:	bf00      	nop
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a2c      	ldr	r2, [pc, #176]	@ (80117ec <HAL_UART_RxCpltCallback+0xc0>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d151      	bne.n	80117e2 <HAL_UART_RxCpltCallback+0xb6>
        if (uart_rx_byte == ASCII_LF || uart_rx_byte == ASCII_CR || uart_rx_byte == ASTERISK) {
 801173e:	4b2c      	ldr	r3, [pc, #176]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	2b0a      	cmp	r3, #10
 8011744:	d007      	beq.n	8011756 <HAL_UART_RxCpltCallback+0x2a>
 8011746:	4b2a      	ldr	r3, [pc, #168]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b0d      	cmp	r3, #13
 801174c:	d003      	beq.n	8011756 <HAL_UART_RxCpltCallback+0x2a>
 801174e:	4b28      	ldr	r3, [pc, #160]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b2a      	cmp	r3, #42	@ 0x2a
 8011754:	d104      	bne.n	8011760 <HAL_UART_RxCpltCallback+0x34>
            cli.rx_done  = CLI_READY;
 8011756:	4b27      	ldr	r3, [pc, #156]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011758:	2201      	movs	r2, #1
 801175a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801175e:	e03b      	b.n	80117d8 <HAL_UART_RxCpltCallback+0xac>
        } else if (uart_rx_byte == ASCII_BACKSPACE || uart_rx_byte == ASCII_DEL) {
 8011760:	4b23      	ldr	r3, [pc, #140]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	2b08      	cmp	r3, #8
 8011766:	d003      	beq.n	8011770 <HAL_UART_RxCpltCallback+0x44>
 8011768:	4b21      	ldr	r3, [pc, #132]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	2b7f      	cmp	r3, #127	@ 0x7f
 801176e:	d119      	bne.n	80117a4 <HAL_UART_RxCpltCallback+0x78>
            if (cli.rx_index > 0) {
 8011770:	4b20      	ldr	r3, [pc, #128]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011772:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011776:	2b00      	cmp	r3, #0
 8011778:	d02e      	beq.n	80117d8 <HAL_UART_RxCpltCallback+0xac>
                cli.buffer[--cli.rx_index] = 0;
 801177a:	4b1e      	ldr	r3, [pc, #120]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 801177c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011780:	3b01      	subs	r3, #1
 8011782:	b2da      	uxtb	r2, r3
 8011784:	4b1b      	ldr	r3, [pc, #108]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011786:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801178a:	4b1a      	ldr	r3, [pc, #104]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 801178c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011790:	461a      	mov	r2, r3
 8011792:	4b18      	ldr	r3, [pc, #96]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011794:	2100      	movs	r1, #0
 8011796:	5499      	strb	r1, [r3, r2]
                printf("%c %c", ASCII_BACKSPACE, ASCII_BACKSPACE);
 8011798:	2208      	movs	r2, #8
 801179a:	2108      	movs	r1, #8
 801179c:	4816      	ldr	r0, [pc, #88]	@ (80117f8 <HAL_UART_RxCpltCallback+0xcc>)
 801179e:	f00a ff6f 	bl	801c680 <iprintf>
            if (cli.rx_index > 0) {
 80117a2:	e019      	b.n	80117d8 <HAL_UART_RxCpltCallback+0xac>
            }
        } else {
            Convert_Char(&uart_rx_byte);
 80117a4:	4812      	ldr	r0, [pc, #72]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 80117a6:	f7ff ffa9 	bl	80116fc <Convert_Char>
            cli.buffer[cli.rx_index] = uart_rx_byte;
 80117aa:	4b12      	ldr	r3, [pc, #72]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80117b0:	461a      	mov	r2, r3
 80117b2:	4b0f      	ldr	r3, [pc, #60]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 80117b4:	7819      	ldrb	r1, [r3, #0]
 80117b6:	4b0f      	ldr	r3, [pc, #60]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117b8:	5499      	strb	r1, [r3, r2]
            cli.rx_index = (cli.rx_index + 1) % UART_BUF_MAX;
 80117ba:	4b0e      	ldr	r3, [pc, #56]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80117c0:	3301      	adds	r3, #1
 80117c2:	425a      	negs	r2, r3
 80117c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80117cc:	bf58      	it	pl
 80117ce:	4253      	negpl	r3, r2
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	4b08      	ldr	r3, [pc, #32]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        }
        // uart rxne pending clear
        HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 80117d8:	2201      	movs	r2, #1
 80117da:	4905      	ldr	r1, [pc, #20]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 80117dc:	4807      	ldr	r0, [pc, #28]	@ (80117fc <HAL_UART_RxCpltCallback+0xd0>)
 80117de:	f007 fb07 	bl	8018df0 <HAL_UART_Receive_IT>
    }
}
 80117e2:	bf00      	nop
 80117e4:	3708      	adds	r7, #8
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	40008000 	.word	0x40008000
 80117f0:	200000a8 	.word	0x200000a8
 80117f4:	200000ac 	.word	0x200000ac
 80117f8:	0801d720 	.word	0x0801d720
 80117fc:	2000039c 	.word	0x2000039c

08011800 <CLI_Init>:
//----------------------------------------


void CLI_Init(void)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	af00      	add	r7, sp, #0
    setbuf(stdin, NULL);
 8011804:	4b0e      	ldr	r3, [pc, #56]	@ (8011840 <CLI_Init+0x40>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	2100      	movs	r1, #0
 801180c:	4618      	mov	r0, r3
 801180e:	f00a ffa7 	bl	801c760 <setbuf>
    setbuf(stdout,NULL);
 8011812:	4b0b      	ldr	r3, [pc, #44]	@ (8011840 <CLI_Init+0x40>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	2100      	movs	r1, #0
 801181a:	4618      	mov	r0, r3
 801181c:	f00a ffa0 	bl	801c760 <setbuf>
    memset(&cli, 0x0, sizeof(CLI_t));
 8011820:	2283      	movs	r2, #131	@ 0x83
 8011822:	2100      	movs	r1, #0
 8011824:	4807      	ldr	r0, [pc, #28]	@ (8011844 <CLI_Init+0x44>)
 8011826:	f00b f92f 	bl	801ca88 <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 801182a:	2201      	movs	r2, #1
 801182c:	4906      	ldr	r1, [pc, #24]	@ (8011848 <CLI_Init+0x48>)
 801182e:	4807      	ldr	r0, [pc, #28]	@ (801184c <CLI_Init+0x4c>)
 8011830:	f007 fade 	bl	8018df0 <HAL_UART_Receive_IT>
    cbf_boot_logo(0, NULL);
 8011834:	2100      	movs	r1, #0
 8011836:	2000      	movs	r0, #0
 8011838:	f000 f8dc 	bl	80119f4 <cbf_boot_logo>
}
 801183c:	bf00      	nop
 801183e:	bd80      	pop	{r7, pc}
 8011840:	2000003c 	.word	0x2000003c
 8011844:	200000ac 	.word	0x200000ac
 8011848:	200000a8 	.word	0x200000a8
 801184c:	2000039c 	.word	0x2000039c

08011850 <parser>:


/* CLI PARSER */
#define DBG_CMD 0
int parser(char *cmd)
{
 8011850:	b590      	push	{r4, r7, lr}
 8011852:	b091      	sub	sp, #68	@ 0x44
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
    int     argc = 0;
 8011858:	2300      	movs	r3, #0
 801185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char   *argv[NUMBER_OF_DELIMITER_VALUE];
    char   **ppStr  = NULL;
 801185c:	2300      	movs	r3, #0
 801185e:	63bb      	str	r3, [r7, #56]	@ 0x38
    short   str_len = 0;
 8011860:	2300      	movs	r3, #0
 8011862:	867b      	strh	r3, [r7, #50]	@ 0x32
    
    if (cmd == NULL) {
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d102      	bne.n	8011870 <parser+0x20>
        printf("CMD Error\r\n");
 801186a:	485a      	ldr	r0, [pc, #360]	@ (80119d4 <parser+0x184>)
 801186c:	f00a ff70 	bl	801c750 <puts>
    }
    
    // is cmd repeat?
    if (uart_rx_byte == ASTERISK) {
 8011870:	4b59      	ldr	r3, [pc, #356]	@ (80119d8 <parser+0x188>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	2b2a      	cmp	r3, #42	@ 0x2a
 8011876:	d10b      	bne.n	8011890 <parser+0x40>
        strcpy(cmd, (char *)&gRx_cmd_repeat[0]);
 8011878:	4958      	ldr	r1, [pc, #352]	@ (80119dc <parser+0x18c>)
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f00b f9eb 	bl	801cc56 <strcpy>
        #if DBG_CMD
        printf("STR:%s", gRx_cmd_repeat);
        #endif
        printf("\r\n");
 8011880:	4857      	ldr	r0, [pc, #348]	@ (80119e0 <parser+0x190>)
 8011882:	f00a ff65 	bl	801c750 <puts>
        cli.is_cmd_repeat = TRUE;
 8011886:	4b57      	ldr	r3, [pc, #348]	@ (80119e4 <parser+0x194>)
 8011888:	2201      	movs	r2, #1
 801188a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 801188e:	e003      	b.n	8011898 <parser+0x48>
    } else {
        cli.is_cmd_repeat = FALSE;
 8011890:	4b54      	ldr	r3, [pc, #336]	@ (80119e4 <parser+0x194>)
 8011892:	2200      	movs	r2, #0
 8011894:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    }

	//----------------------------------------
    // SPLIT THE UART RX STRING
    //----------------------------------------
    argv[argc++] = strtok(cmd, D_DELIMITER);
 8011898:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 801189a:	1c63      	adds	r3, r4, #1
 801189c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801189e:	4952      	ldr	r1, [pc, #328]	@ (80119e8 <parser+0x198>)
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f00b f8f9 	bl	801ca98 <strtok>
 80118a6:	4602      	mov	r2, r0
 80118a8:	00a3      	lsls	r3, r4, #2
 80118aa:	3340      	adds	r3, #64	@ 0x40
 80118ac:	443b      	add	r3, r7
 80118ae:	f843 2c38 	str.w	r2, [r3, #-56]

    while (1) {
        argv[argc] = strtok(NULL, D_DELIMITER);
 80118b2:	494d      	ldr	r1, [pc, #308]	@ (80119e8 <parser+0x198>)
 80118b4:	2000      	movs	r0, #0
 80118b6:	f00b f8ef 	bl	801ca98 <strtok>
 80118ba:	4602      	mov	r2, r0
 80118bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	3340      	adds	r3, #64	@ 0x40
 80118c2:	443b      	add	r3, r7
 80118c4:	f843 2c38 	str.w	r2, [r3, #-56]
        
        if (argv[argc] == NULL) {
 80118c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	3340      	adds	r3, #64	@ 0x40
 80118ce:	443b      	add	r3, r7
 80118d0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d006      	beq.n	80118e6 <parser+0x96>
            break;
        }

        if (++argc >= NUMBER_OF_DELIMITER_VALUE) {
 80118d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118da:	3301      	adds	r3, #1
 80118dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118e0:	2b09      	cmp	r3, #9
 80118e2:	dc02      	bgt.n	80118ea <parser+0x9a>
        argv[argc] = strtok(NULL, D_DELIMITER);
 80118e4:	e7e5      	b.n	80118b2 <parser+0x62>
            break;
 80118e6:	bf00      	nop
 80118e8:	e000      	b.n	80118ec <parser+0x9c>
            break;
 80118ea:	bf00      	nop
    }

    //----------------------------------------
    // FIND THE MATCHED STRING
    //----------------------------------------
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 80118ec:	2300      	movs	r3, #0
 80118ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80118f0:	e025      	b.n	801193e <parser+0xee>
        if (strcmp(cmd_list[cnt].name, argv[0]) == CLI_MATCH) {
 80118f2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80118f6:	493d      	ldr	r1, [pc, #244]	@ (80119ec <parser+0x19c>)
 80118f8:	4613      	mov	r3, r2
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	4413      	add	r3, r2
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	440b      	add	r3, r1
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	4611      	mov	r1, r2
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff fc89 	bl	8011220 <strcmp>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10e      	bne.n	8011932 <parser+0xe2>
            cmd_list[cnt].func(argc, argv);
 8011914:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8011918:	4934      	ldr	r1, [pc, #208]	@ (80119ec <parser+0x19c>)
 801191a:	4613      	mov	r3, r2
 801191c:	005b      	lsls	r3, r3, #1
 801191e:	4413      	add	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	440b      	add	r3, r1
 8011924:	3304      	adds	r3, #4
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f107 0208 	add.w	r2, r7, #8
 801192c:	4611      	mov	r1, r2
 801192e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011930:	4798      	blx	r3
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 8011932:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8011936:	b29b      	uxth	r3, r3
 8011938:	3301      	adds	r3, #1
 801193a:	b29b      	uxth	r3, r3
 801193c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801193e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8011942:	492a      	ldr	r1, [pc, #168]	@ (80119ec <parser+0x19c>)
 8011944:	4613      	mov	r3, r2
 8011946:	005b      	lsls	r3, r3, #1
 8011948:	4413      	add	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	440b      	add	r3, r1
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d1ce      	bne.n	80118f2 <parser+0xa2>
        }
    }
    
    // Cpy Last Command...
    if (cli.is_cmd_repeat == FALSE) {
 8011954:	4b23      	ldr	r3, [pc, #140]	@ (80119e4 <parser+0x194>)
 8011956:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 801195a:	2b00      	cmp	r3, #0
 801195c:	d12c      	bne.n	80119b8 <parser+0x168>
        memset((char *)&gRx_cmd_repeat[0], (char)'\0', sizeof(gRx_cmd_repeat));
 801195e:	2280      	movs	r2, #128	@ 0x80
 8011960:	2100      	movs	r1, #0
 8011962:	481e      	ldr	r0, [pc, #120]	@ (80119dc <parser+0x18c>)
 8011964:	f00b f890 	bl	801ca88 <memset>
        ppStr = &argv[0];
 8011968:	f107 0308 	add.w	r3, r7, #8
 801196c:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (short cnt = 0; cnt < argc; cnt++) {
 801196e:	2300      	movs	r3, #0
 8011970:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011972:	e01c      	b.n	80119ae <parser+0x15e>
            strcpy(&gRx_cmd_repeat[0] + strlen(&gRx_cmd_repeat[0]), *ppStr++);
 8011974:	4819      	ldr	r0, [pc, #100]	@ (80119dc <parser+0x18c>)
 8011976:	f7ff fc5d 	bl	8011234 <strlen>
 801197a:	4603      	mov	r3, r0
 801197c:	4a17      	ldr	r2, [pc, #92]	@ (80119dc <parser+0x18c>)
 801197e:	1898      	adds	r0, r3, r2
 8011980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011982:	1d1a      	adds	r2, r3, #4
 8011984:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4619      	mov	r1, r3
 801198a:	f00b f964 	bl	801cc56 <strcpy>
            str_len = strlen(&gRx_cmd_repeat[0]);
 801198e:	4813      	ldr	r0, [pc, #76]	@ (80119dc <parser+0x18c>)
 8011990:	f7ff fc50 	bl	8011234 <strlen>
 8011994:	4603      	mov	r3, r0
 8011996:	867b      	strh	r3, [r7, #50]	@ 0x32
            gRx_cmd_repeat[str_len] = SPACE_BAR;
 8011998:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 801199c:	4a0f      	ldr	r2, [pc, #60]	@ (80119dc <parser+0x18c>)
 801199e:	2120      	movs	r1, #32
 80119a0:	54d1      	strb	r1, [r2, r3]
        for (short cnt = 0; cnt < argc; cnt++) {
 80119a2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	3301      	adds	r3, #1
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80119ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80119b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80119b4:	429a      	cmp	r2, r3
 80119b6:	dcdd      	bgt.n	8011974 <parser+0x124>
        #if DBG_CMD
        printf("cpy str:%s\r\n", gRx_cmd_repeat);
        #endif
    }

    memset(&cli, 0x0, sizeof(CLI_t));
 80119b8:	2283      	movs	r2, #131	@ 0x83
 80119ba:	2100      	movs	r1, #0
 80119bc:	4809      	ldr	r0, [pc, #36]	@ (80119e4 <parser+0x194>)
 80119be:	f00b f863 	bl	801ca88 <memset>
    printf(" $Fish >> ");
 80119c2:	480b      	ldr	r0, [pc, #44]	@ (80119f0 <parser+0x1a0>)
 80119c4:	f00a fe5c 	bl	801c680 <iprintf>
    
    return LIST_NOT_FOUND;
 80119c8:	2301      	movs	r3, #1
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3744      	adds	r7, #68	@ 0x44
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd90      	pop	{r4, r7, pc}
 80119d2:	bf00      	nop
 80119d4:	0801d728 	.word	0x0801d728
 80119d8:	200000a8 	.word	0x200000a8
 80119dc:	20000130 	.word	0x20000130
 80119e0:	0801d734 	.word	0x0801d734
 80119e4:	200000ac 	.word	0x200000ac
 80119e8:	0801d738 	.word	0x0801d738
 80119ec:	0801e288 	.word	0x0801e288
 80119f0:	0801d73c 	.word	0x0801d73c

080119f4 <cbf_boot_logo>:

//----------------------------------------
// CALL BACK FUNCTION
//----------------------------------------
int cbf_boot_logo(int argc, char *argv[])
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 80119fe:	4812      	ldr	r0, [pc, #72]	@ (8011a48 <cbf_boot_logo+0x54>)
 8011a00:	f00a fea6 	bl	801c750 <puts>
    printf("+==========================================================+\r\n");
 8011a04:	4811      	ldr	r0, [pc, #68]	@ (8011a4c <cbf_boot_logo+0x58>)
 8011a06:	f00a fea3 	bl	801c750 <puts>
    printf("|,------.   ,--.             ,--.                          |\r\n");
 8011a0a:	4811      	ldr	r0, [pc, #68]	@ (8011a50 <cbf_boot_logo+0x5c>)
 8011a0c:	f00a fea0 	bl	801c750 <puts>
    printf("||  .---'   `--'    ,---.    |  ,---.                      |\r\n");
 8011a10:	4810      	ldr	r0, [pc, #64]	@ (8011a54 <cbf_boot_logo+0x60>)
 8011a12:	f00a fe9d 	bl	801c750 <puts>
    printf("||  `--,    ,--.   (  .-'    |  .-.  |                     |\r\n");
 8011a16:	4810      	ldr	r0, [pc, #64]	@ (8011a58 <cbf_boot_logo+0x64>)
 8011a18:	f00a fe9a 	bl	801c750 <puts>
    printf("||  |`      |  |   .-'  `)   |  | |  |   App V1.0          |\r\n");
 8011a1c:	480f      	ldr	r0, [pc, #60]	@ (8011a5c <cbf_boot_logo+0x68>)
 8011a1e:	f00a fe97 	bl	801c750 <puts>
    printf("|`--'       `--'   `----'    `--' `--'   %s       |\r\n", __DATE__);
 8011a22:	490f      	ldr	r1, [pc, #60]	@ (8011a60 <cbf_boot_logo+0x6c>)
 8011a24:	480f      	ldr	r0, [pc, #60]	@ (8011a64 <cbf_boot_logo+0x70>)
 8011a26:	f00a fe2b 	bl	801c680 <iprintf>
    printf("+==========================================================+\r\n");
 8011a2a:	4808      	ldr	r0, [pc, #32]	@ (8011a4c <cbf_boot_logo+0x58>)
 8011a2c:	f00a fe90 	bl	801c750 <puts>
    CONSOLE_SPLIT;
 8011a30:	4805      	ldr	r0, [pc, #20]	@ (8011a48 <cbf_boot_logo+0x54>)
 8011a32:	f00a fe8d 	bl	801c750 <puts>
    printf(" $Fish >> ");
 8011a36:	480c      	ldr	r0, [pc, #48]	@ (8011a68 <cbf_boot_logo+0x74>)
 8011a38:	f00a fe22 	bl	801c680 <iprintf>
    return 0;
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3708      	adds	r7, #8
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	0801d748 	.word	0x0801d748
 8011a4c:	0801d77c 	.word	0x0801d77c
 8011a50:	0801d7bc 	.word	0x0801d7bc
 8011a54:	0801d7fc 	.word	0x0801d7fc
 8011a58:	0801d83c 	.word	0x0801d83c
 8011a5c:	0801d87c 	.word	0x0801d87c
 8011a60:	0801d8bc 	.word	0x0801d8bc
 8011a64:	0801d8c8 	.word	0x0801d8c8
 8011a68:	0801d73c 	.word	0x0801d73c

08011a6c <cbf_sn>:

int cbf_sn(int argc, char *argv[])
{
 8011a6c:	b580      	push	{r7, lr}
 8011a6e:	b082      	sub	sp, #8
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
#if LEGACY
    printf("SN : %s\r\n", (char *)tag->fw_sn);
#else
    printf("%s\r\n", __DATE__);
 8011a76:	4904      	ldr	r1, [pc, #16]	@ (8011a88 <cbf_sn+0x1c>)
 8011a78:	4804      	ldr	r0, [pc, #16]	@ (8011a8c <cbf_sn+0x20>)
 8011a7a:	f00a fe01 	bl	801c680 <iprintf>
#endif
    return 0;
 8011a7e:	2300      	movs	r3, #0
}
 8011a80:	4618      	mov	r0, r3
 8011a82:	3708      	adds	r7, #8
 8011a84:	46bd      	mov	sp, r7
 8011a86:	bd80      	pop	{r7, pc}
 8011a88:	0801d8bc 	.word	0x0801d8bc
 8011a8c:	0801d900 	.word	0x0801d900

08011a90 <cbf_help>:

int cbf_help(int argc, char *argv[])
{
 8011a90:	b580      	push	{r7, lr}
 8011a92:	b084      	sub	sp, #16
 8011a94:	af00      	add	r7, sp, #0
 8011a96:	6078      	str	r0, [r7, #4]
 8011a98:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8011a9a:	481c      	ldr	r0, [pc, #112]	@ (8011b0c <cbf_help+0x7c>)
 8011a9c:	f00a fe58 	bl	801c750 <puts>
    printf("Command List %-6s Description\r\n", "||");
 8011aa0:	491b      	ldr	r1, [pc, #108]	@ (8011b10 <cbf_help+0x80>)
 8011aa2:	481c      	ldr	r0, [pc, #112]	@ (8011b14 <cbf_help+0x84>)
 8011aa4:	f00a fdec 	bl	801c680 <iprintf>
    CONSOLE_SPLIT;
 8011aa8:	4818      	ldr	r0, [pc, #96]	@ (8011b0c <cbf_help+0x7c>)
 8011aaa:	f00a fe51 	bl	801c750 <puts>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 8011aae:	2301      	movs	r3, #1
 8011ab0:	60fb      	str	r3, [r7, #12]
 8011ab2:	e01b      	b.n	8011aec <cbf_help+0x5c>
        printf("%-20s", cmd_list[cnt].name);
 8011ab4:	4918      	ldr	r1, [pc, #96]	@ (8011b18 <cbf_help+0x88>)
 8011ab6:	68fa      	ldr	r2, [r7, #12]
 8011ab8:	4613      	mov	r3, r2
 8011aba:	005b      	lsls	r3, r3, #1
 8011abc:	4413      	add	r3, r2
 8011abe:	009b      	lsls	r3, r3, #2
 8011ac0:	440b      	add	r3, r1
 8011ac2:	681b      	ldr	r3, [r3, #0]
 8011ac4:	4619      	mov	r1, r3
 8011ac6:	4815      	ldr	r0, [pc, #84]	@ (8011b1c <cbf_help+0x8c>)
 8011ac8:	f00a fdda 	bl	801c680 <iprintf>
        printf("%-30s\r", cmd_list[cnt].description);
 8011acc:	4912      	ldr	r1, [pc, #72]	@ (8011b18 <cbf_help+0x88>)
 8011ace:	68fa      	ldr	r2, [r7, #12]
 8011ad0:	4613      	mov	r3, r2
 8011ad2:	005b      	lsls	r3, r3, #1
 8011ad4:	4413      	add	r3, r2
 8011ad6:	009b      	lsls	r3, r3, #2
 8011ad8:	440b      	add	r3, r1
 8011ada:	3308      	adds	r3, #8
 8011adc:	681b      	ldr	r3, [r3, #0]
 8011ade:	4619      	mov	r1, r3
 8011ae0:	480f      	ldr	r0, [pc, #60]	@ (8011b20 <cbf_help+0x90>)
 8011ae2:	f00a fdcd 	bl	801c680 <iprintf>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 8011ae6:	68fb      	ldr	r3, [r7, #12]
 8011ae8:	3301      	adds	r3, #1
 8011aea:	60fb      	str	r3, [r7, #12]
 8011aec:	490a      	ldr	r1, [pc, #40]	@ (8011b18 <cbf_help+0x88>)
 8011aee:	68fa      	ldr	r2, [r7, #12]
 8011af0:	4613      	mov	r3, r2
 8011af2:	005b      	lsls	r3, r3, #1
 8011af4:	4413      	add	r3, r2
 8011af6:	009b      	lsls	r3, r3, #2
 8011af8:	440b      	add	r3, r1
 8011afa:	681b      	ldr	r3, [r3, #0]
 8011afc:	2b00      	cmp	r3, #0
 8011afe:	d1d9      	bne.n	8011ab4 <cbf_help+0x24>
    }
    return 0;
 8011b00:	2300      	movs	r3, #0
}
 8011b02:	4618      	mov	r0, r3
 8011b04:	3710      	adds	r7, #16
 8011b06:	46bd      	mov	sp, r7
 8011b08:	bd80      	pop	{r7, pc}
 8011b0a:	bf00      	nop
 8011b0c:	0801d748 	.word	0x0801d748
 8011b10:	0801d908 	.word	0x0801d908
 8011b14:	0801d90c 	.word	0x0801d90c
 8011b18:	0801e288 	.word	0x0801e288
 8011b1c:	0801d92c 	.word	0x0801d92c
 8011b20:	0801d934 	.word	0x0801d934

08011b24 <cbf_reset>:

int cbf_reset(int argc, char *argv[])
{
 8011b24:	b580      	push	{r7, lr}
 8011b26:	b082      	sub	sp, #8
 8011b28:	af00      	add	r7, sp, #0
 8011b2a:	6078      	str	r0, [r7, #4]
 8011b2c:	6039      	str	r1, [r7, #0]
    // software reset
    HAL_NVIC_SystemReset();
 8011b2e:	f003 f8e9 	bl	8014d04 <HAL_NVIC_SystemReset>
    return 0;
 8011b32:	2300      	movs	r3, #0
}
 8011b34:	4618      	mov	r0, r3
 8011b36:	3708      	adds	r7, #8
 8011b38:	46bd      	mov	sp, r7
 8011b3a:	bd80      	pop	{r7, pc}

08011b3c <cbf_test>:

int cbf_test(int argc, char *argv[])
{
 8011b3c:	b580      	push	{r7, lr}
 8011b3e:	b082      	sub	sp, #8
 8011b40:	af00      	add	r7, sp, #0
 8011b42:	6078      	str	r0, [r7, #4]
 8011b44:	6039      	str	r1, [r7, #0]
	printf("argv : %s \r\n", argv[0]);
 8011b46:	683b      	ldr	r3, [r7, #0]
 8011b48:	681b      	ldr	r3, [r3, #0]
 8011b4a:	4619      	mov	r1, r3
 8011b4c:	4805      	ldr	r0, [pc, #20]	@ (8011b64 <cbf_test+0x28>)
 8011b4e:	f00a fd97 	bl	801c680 <iprintf>
	//printf("argc : %d , argv : %s \r\n", argc, argv[1]);
	printf("TEST \r\n");    
 8011b52:	4805      	ldr	r0, [pc, #20]	@ (8011b68 <cbf_test+0x2c>)
 8011b54:	f00a fdfc 	bl	801c750 <puts>
	return 0;
 8011b58:	2300      	movs	r3, #0
}
 8011b5a:	4618      	mov	r0, r3
 8011b5c:	3708      	adds	r7, #8
 8011b5e:	46bd      	mov	sp, r7
 8011b60:	bd80      	pop	{r7, pc}
 8011b62:	bf00      	nop
 8011b64:	0801d93c 	.word	0x0801d93c
 8011b68:	0801d94c 	.word	0x0801d94c

08011b6c <cbf_xmodem>:


int cbf_xmodem(int argc, char *argv[])
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]

    // resetting uart isr
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
#else
    CONSOLE_SPLIT;
 8011b76:	4808      	ldr	r0, [pc, #32]	@ (8011b98 <cbf_xmodem+0x2c>)
 8011b78:	f00a fdea 	bl	801c750 <puts>
    printf("You should update f/w in the boot mode.\r\nboot mode is being entered... \r\n");
 8011b7c:	4807      	ldr	r0, [pc, #28]	@ (8011b9c <cbf_xmodem+0x30>)
 8011b7e:	f00a fde7 	bl	801c750 <puts>
    CONSOLE_SPLIT;
 8011b82:	4805      	ldr	r0, [pc, #20]	@ (8011b98 <cbf_xmodem+0x2c>)
 8011b84:	f00a fde4 	bl	801c750 <puts>
#endif
    HAL_NVIC_SystemReset();
 8011b88:	f003 f8bc 	bl	8014d04 <HAL_NVIC_SystemReset>
    return 0;
 8011b8c:	2300      	movs	r3, #0
}
 8011b8e:	4618      	mov	r0, r3
 8011b90:	3708      	adds	r7, #8
 8011b92:	46bd      	mov	sp, r7
 8011b94:	bd80      	pop	{r7, pc}
 8011b96:	bf00      	nop
 8011b98:	0801d748 	.word	0x0801d748
 8011b9c:	0801d954 	.word	0x0801d954

08011ba0 <cbf_ymodem>:

int cbf_ymodem(int argc, char *argv[])
{
 8011ba0:	b580      	push	{r7, lr}
 8011ba2:	b082      	sub	sp, #8
 8011ba4:	af00      	add	r7, sp, #0
 8011ba6:	6078      	str	r0, [r7, #4]
 8011ba8:	6039      	str	r1, [r7, #0]

    // resetting uart isr
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
#else
    CONSOLE_SPLIT;
 8011baa:	4808      	ldr	r0, [pc, #32]	@ (8011bcc <cbf_ymodem+0x2c>)
 8011bac:	f00a fdd0 	bl	801c750 <puts>
    printf("You should update f/w in the boot mode.\r\nboot mode is being entered... \r\n");
 8011bb0:	4807      	ldr	r0, [pc, #28]	@ (8011bd0 <cbf_ymodem+0x30>)
 8011bb2:	f00a fdcd 	bl	801c750 <puts>
    CONSOLE_SPLIT;
 8011bb6:	4805      	ldr	r0, [pc, #20]	@ (8011bcc <cbf_ymodem+0x2c>)
 8011bb8:	f00a fdca 	bl	801c750 <puts>
#endif
    HAL_NVIC_SystemReset();
 8011bbc:	f003 f8a2 	bl	8014d04 <HAL_NVIC_SystemReset>
    return 0;
 8011bc0:	2300      	movs	r3, #0
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	3708      	adds	r7, #8
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	bd80      	pop	{r7, pc}
 8011bca:	bf00      	nop
 8011bcc:	0801d748 	.word	0x0801d748
 8011bd0:	0801d954 	.word	0x0801d954

08011bd4 <check_memory_range>:

static uint8_t check_memory_range(uint32_t address)
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
 8011bda:	6078      	str	r0, [r7, #4]
    if ( ((address >= (uint32_t )FLASH_RANGE_START)        && (address <= (uint32_t )FLASH_RANGE_END)) ||
 8011bdc:	687b      	ldr	r3, [r7, #4]
 8011bde:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011be2:	d303      	bcc.n	8011bec <check_memory_range+0x18>
 8011be4:	687b      	ldr	r3, [r7, #4]
 8011be6:	4a0a      	ldr	r2, [pc, #40]	@ (8011c10 <check_memory_range+0x3c>)
 8011be8:	4293      	cmp	r3, r2
 8011bea:	d307      	bcc.n	8011bfc <check_memory_range+0x28>
 8011bec:	687b      	ldr	r3, [r7, #4]
 8011bee:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011bf2:	d305      	bcc.n	8011c00 <check_memory_range+0x2c>
         ((address >= (uint32_t )ADDR_INTERNAL_SRAM_START) && (address <= (uint32_t )ADDR_INTERNAL_SRAM_END))) {
 8011bf4:	687b      	ldr	r3, [r7, #4]
 8011bf6:	4a07      	ldr	r2, [pc, #28]	@ (8011c14 <check_memory_range+0x40>)
 8011bf8:	4293      	cmp	r3, r2
 8011bfa:	d201      	bcs.n	8011c00 <check_memory_range+0x2c>
        return TRUE;
 8011bfc:	2301      	movs	r3, #1
 8011bfe:	e000      	b.n	8011c02 <check_memory_range+0x2e>
    } else {
        return FALSE;
 8011c00:	2300      	movs	r3, #0
    }
}
 8011c02:	4618      	mov	r0, r3
 8011c04:	370c      	adds	r7, #12
 8011c06:	46bd      	mov	sp, r7
 8011c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c0c:	4770      	bx	lr
 8011c0e:	bf00      	nop
 8011c10:	0801ffff 	.word	0x0801ffff
 8011c14:	20024000 	.word	0x20024000

08011c18 <cbf_dump>:
#define CHAR_SPACE          ' '
#define CHAR_z              'z'
#define CHAR_dot            '.'
#define ASCII_CHAR_DUMP     0
int cbf_dump(int argc, char *argv[])
{
 8011c18:	b580      	push	{r7, lr}
 8011c1a:	b086      	sub	sp, #24
 8011c1c:	af00      	add	r7, sp, #0
 8011c1e:	6078      	str	r0, [r7, #4]
 8011c20:	6039      	str	r1, [r7, #0]
    uint32_t size  = atoi(argv[2]);
 8011c22:	683b      	ldr	r3, [r7, #0]
 8011c24:	3308      	adds	r3, #8
 8011c26:	681b      	ldr	r3, [r3, #0]
 8011c28:	4618      	mov	r0, r3
 8011c2a:	f00a fb21 	bl	801c270 <atoi>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	60fb      	str	r3, [r7, #12]
    uint32_t *addr = (uint32_t *) strtol(argv[1], NULL, 16);
 8011c32:	683b      	ldr	r3, [r7, #0]
 8011c34:	3304      	adds	r3, #4
 8011c36:	681b      	ldr	r3, [r3, #0]
 8011c38:	2210      	movs	r2, #16
 8011c3a:	2100      	movs	r1, #0
 8011c3c:	4618      	mov	r0, r3
 8011c3e:	f00a fc53 	bl	801c4e8 <strtol>
 8011c42:	4603      	mov	r3, r0
 8011c44:	617b      	str	r3, [r7, #20]
    uint32_t is_range_ok = (uint32_t)addr;
 8011c46:	697b      	ldr	r3, [r7, #20]
 8011c48:	60bb      	str	r3, [r7, #8]
    #if ASCII_CHAR_DUMP
    uint8_t buffer[LINE] = { 0, };
    #endif

    if (check_memory_range(is_range_ok) == TRUE) {
 8011c4a:	68b8      	ldr	r0, [r7, #8]
 8011c4c:	f7ff ffc2 	bl	8011bd4 <check_memory_range>
 8011c50:	4603      	mov	r3, r0
 8011c52:	2b01      	cmp	r3, #1
 8011c54:	d110      	bne.n	8011c78 <cbf_dump+0x60>
        CONSOLE_SPLIT;
 8011c56:	4825      	ldr	r0, [pc, #148]	@ (8011cec <cbf_dump+0xd4>)
 8011c58:	f00a fd7a 	bl	801c750 <puts>
        printf("Base Addrr // dump data ... \n");
 8011c5c:	4824      	ldr	r0, [pc, #144]	@ (8011cf0 <cbf_dump+0xd8>)
 8011c5e:	f00a fd77 	bl	801c750 <puts>
        CONSOLE_SPLIT;
 8011c62:	4822      	ldr	r0, [pc, #136]	@ (8011cec <cbf_dump+0xd4>)
 8011c64:	f00a fd74 	bl	801c750 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", (long)FLASH_RANGE_START, (long)FLASH_RANGE_END);
        printf("SRAM  Range is 0x%08lx ~ 0x%08lx\r\n", (long)ADDR_INTERNAL_SRAM_START, (long)ADDR_INTERNAL_SRAM_END);
        return FALSE;
    }

    printf("0x%08lx : ", (uint32_t)addr);
 8011c68:	697b      	ldr	r3, [r7, #20]
 8011c6a:	4619      	mov	r1, r3
 8011c6c:	4821      	ldr	r0, [pc, #132]	@ (8011cf4 <cbf_dump+0xdc>)
 8011c6e:	f00a fd07 	bl	801c680 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8011c72:	2301      	movs	r3, #1
 8011c74:	827b      	strh	r3, [r7, #18]
 8011c76:	e02c      	b.n	8011cd2 <cbf_dump+0xba>
        printf("Command Ex is ""dump [Address] [ReadSize Byte] ->""");
 8011c78:	481f      	ldr	r0, [pc, #124]	@ (8011cf8 <cbf_dump+0xe0>)
 8011c7a:	f00a fd01 	bl	801c680 <iprintf>
        printf("dump 128 0x08010000\r\n");
 8011c7e:	481f      	ldr	r0, [pc, #124]	@ (8011cfc <cbf_dump+0xe4>)
 8011c80:	f00a fd66 	bl	801c750 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", (long)FLASH_RANGE_START, (long)FLASH_RANGE_END);
 8011c84:	4a1e      	ldr	r2, [pc, #120]	@ (8011d00 <cbf_dump+0xe8>)
 8011c86:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8011c8a:	481e      	ldr	r0, [pc, #120]	@ (8011d04 <cbf_dump+0xec>)
 8011c8c:	f00a fcf8 	bl	801c680 <iprintf>
        printf("SRAM  Range is 0x%08lx ~ 0x%08lx\r\n", (long)ADDR_INTERNAL_SRAM_START, (long)ADDR_INTERNAL_SRAM_END);
 8011c90:	4a1d      	ldr	r2, [pc, #116]	@ (8011d08 <cbf_dump+0xf0>)
 8011c92:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8011c96:	481d      	ldr	r0, [pc, #116]	@ (8011d0c <cbf_dump+0xf4>)
 8011c98:	f00a fcf2 	bl	801c680 <iprintf>
        return FALSE;
 8011c9c:	2300      	movs	r3, #0
 8011c9e:	e020      	b.n	8011ce2 <cbf_dump+0xca>
        } else { 
            buffer[range - 1] = CHAR_dot;
        }
        #endif

        printf("%04lx\t",  *(addr++));
 8011ca0:	697b      	ldr	r3, [r7, #20]
 8011ca2:	1d1a      	adds	r2, r3, #4
 8011ca4:	617a      	str	r2, [r7, #20]
 8011ca6:	681b      	ldr	r3, [r3, #0]
 8011ca8:	4619      	mov	r1, r3
 8011caa:	4819      	ldr	r0, [pc, #100]	@ (8011d10 <cbf_dump+0xf8>)
 8011cac:	f00a fce8 	bl	801c680 <iprintf>
        if (range % LINE == 0) {
 8011cb0:	8a7b      	ldrh	r3, [r7, #18]
 8011cb2:	f003 0303 	and.w	r3, r3, #3
 8011cb6:	b29b      	uxth	r3, r3
 8011cb8:	2b00      	cmp	r3, #0
 8011cba:	d107      	bne.n	8011ccc <cbf_dump+0xb4>
            #if ASCII_CHAR_DUMP
            printf("\t: %s", buffer);
            #endif
            printf("\r\n");
 8011cbc:	4815      	ldr	r0, [pc, #84]	@ (8011d14 <cbf_dump+0xfc>)
 8011cbe:	f00a fd47 	bl	801c750 <puts>
            printf("0x%08lx : ", (uint32_t)addr);
 8011cc2:	697b      	ldr	r3, [r7, #20]
 8011cc4:	4619      	mov	r1, r3
 8011cc6:	480b      	ldr	r0, [pc, #44]	@ (8011cf4 <cbf_dump+0xdc>)
 8011cc8:	f00a fcda 	bl	801c680 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8011ccc:	8a7b      	ldrh	r3, [r7, #18]
 8011cce:	3301      	adds	r3, #1
 8011cd0:	827b      	strh	r3, [r7, #18]
 8011cd2:	8a7b      	ldrh	r3, [r7, #18]
 8011cd4:	68fa      	ldr	r2, [r7, #12]
 8011cd6:	429a      	cmp	r2, r3
 8011cd8:	d2e2      	bcs.n	8011ca0 <cbf_dump+0x88>
        }
    }
    printf("\r\n");
 8011cda:	480e      	ldr	r0, [pc, #56]	@ (8011d14 <cbf_dump+0xfc>)
 8011cdc:	f00a fd38 	bl	801c750 <puts>
    return 0;
 8011ce0:	2300      	movs	r3, #0
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	3718      	adds	r7, #24
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	bd80      	pop	{r7, pc}
 8011cea:	bf00      	nop
 8011cec:	0801d748 	.word	0x0801d748
 8011cf0:	0801d9a0 	.word	0x0801d9a0
 8011cf4:	0801da50 	.word	0x0801da50
 8011cf8:	0801d9c0 	.word	0x0801d9c0
 8011cfc:	0801d9f0 	.word	0x0801d9f0
 8011d00:	0801fffe 	.word	0x0801fffe
 8011d04:	0801da08 	.word	0x0801da08
 8011d08:	20023fff 	.word	0x20023fff
 8011d0c:	0801da2c 	.word	0x0801da2c
 8011d10:	0801da5c 	.word	0x0801da5c
 8011d14:	0801d734 	.word	0x0801d734

08011d18 <cbf_flash_test>:

int cbf_flash_test(int argc, char *argv[])
{
 8011d18:	b5b0      	push	{r4, r5, r7, lr}
 8011d1a:	b088      	sub	sp, #32
 8011d1c:	af00      	add	r7, sp, #0
 8011d1e:	6078      	str	r0, [r7, #4]
 8011d20:	6039      	str	r1, [r7, #0]
    volatile uint32_t *flash_addr = (volatile uint32_t *) strtol(argv[1], NULL, 16);
 8011d22:	683b      	ldr	r3, [r7, #0]
 8011d24:	3304      	adds	r3, #4
 8011d26:	681b      	ldr	r3, [r3, #0]
 8011d28:	2210      	movs	r2, #16
 8011d2a:	2100      	movs	r1, #0
 8011d2c:	4618      	mov	r0, r3
 8011d2e:	f00a fbdb 	bl	801c4e8 <strtol>
 8011d32:	4603      	mov	r3, r0
 8011d34:	61fb      	str	r3, [r7, #28]
    uint32_t addr = (uint32_t)flash_addr;
 8011d36:	69fb      	ldr	r3, [r7, #28]
 8011d38:	61bb      	str	r3, [r7, #24]
    uint64_t data = atoi(argv[2]);
 8011d3a:	683b      	ldr	r3, [r7, #0]
 8011d3c:	3308      	adds	r3, #8
 8011d3e:	681b      	ldr	r3, [r3, #0]
 8011d40:	4618      	mov	r0, r3
 8011d42:	f00a fa95 	bl	801c270 <atoi>
 8011d46:	4603      	mov	r3, r0
 8011d48:	17da      	asrs	r2, r3, #31
 8011d4a:	461c      	mov	r4, r3
 8011d4c:	4615      	mov	r5, r2
 8011d4e:	e9c7 4504 	strd	r4, r5, [r7, #16]
    if (check_memory_range(addr) == FALSE) {
 8011d52:	69b8      	ldr	r0, [r7, #24]
 8011d54:	f7ff ff3e 	bl	8011bd4 <check_memory_range>
 8011d58:	4603      	mov	r3, r0
 8011d5a:	2b00      	cmp	r3, #0
 8011d5c:	d10a      	bne.n	8011d74 <cbf_flash_test+0x5c>
        printf("Command is ""flash_test [Address] [Data]\r\n");
 8011d5e:	4817      	ldr	r0, [pc, #92]	@ (8011dbc <cbf_flash_test+0xa4>)
 8011d60:	f00a fcf6 	bl	801c750 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", FLASH_RANGE_START, FLASH_RANGE_END);
 8011d64:	4a16      	ldr	r2, [pc, #88]	@ (8011dc0 <cbf_flash_test+0xa8>)
 8011d66:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8011d6a:	4816      	ldr	r0, [pc, #88]	@ (8011dc4 <cbf_flash_test+0xac>)
 8011d6c:	f00a fc88 	bl	801c680 <iprintf>
        return FALSE;
 8011d70:	2300      	movs	r3, #0
 8011d72:	e01e      	b.n	8011db2 <cbf_flash_test+0x9a>
    }

    printf("Before : Address 0x%08lx : WR Data : 0x%08lx\r\n", (long)addr, (long)data);
 8011d74:	69bb      	ldr	r3, [r7, #24]
 8011d76:	693a      	ldr	r2, [r7, #16]
 8011d78:	4619      	mov	r1, r3
 8011d7a:	4813      	ldr	r0, [pc, #76]	@ (8011dc8 <cbf_flash_test+0xb0>)
 8011d7c:	f00a fc80 	bl	801c680 <iprintf>

    BOOL_e ret = FLASH_If_Erase(addr);
 8011d80:	69b8      	ldr	r0, [r7, #24]
 8011d82:	f7ff fc3b 	bl	80115fc <FLASH_If_Erase>
 8011d86:	4603      	mov	r3, r0
 8011d88:	73fb      	strb	r3, [r7, #15]
    }
#else
    UNUSED(ret);
#endif

    HAL_FLASH_Unlock();
 8011d8a:	f003 fe75 	bl	8015a78 <HAL_FLASH_Unlock>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)flash_addr, (uint64_t)data);
 8011d8e:	69f9      	ldr	r1, [r7, #28]
 8011d90:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011d94:	2000      	movs	r0, #0
 8011d96:	f003 fdf5 	bl	8015984 <HAL_FLASH_Program>
 8011d9a:	4603      	mov	r3, r0
 8011d9c:	73fb      	strb	r3, [r7, #15]
    HAL_FLASH_Lock();
 8011d9e:	f003 fe8d 	bl	8015abc <HAL_FLASH_Lock>
    if (ret != TRUE) {
        printf("Flash Test Error\r\n");
    } 
#endif

    printf("Result : 0x%08lx - 0x%08lx\r\n", (uint32_t)flash_addr, (uint32_t)*flash_addr);
 8011da2:	69f9      	ldr	r1, [r7, #28]
 8011da4:	69fb      	ldr	r3, [r7, #28]
 8011da6:	681b      	ldr	r3, [r3, #0]
 8011da8:	461a      	mov	r2, r3
 8011daa:	4808      	ldr	r0, [pc, #32]	@ (8011dcc <cbf_flash_test+0xb4>)
 8011dac:	f00a fc68 	bl	801c680 <iprintf>
    return 0;
 8011db0:	2300      	movs	r3, #0
}
 8011db2:	4618      	mov	r0, r3
 8011db4:	3720      	adds	r7, #32
 8011db6:	46bd      	mov	sp, r7
 8011db8:	bdb0      	pop	{r4, r5, r7, pc}
 8011dba:	bf00      	nop
 8011dbc:	0801da64 	.word	0x0801da64
 8011dc0:	0801fffe 	.word	0x0801fffe
 8011dc4:	0801da08 	.word	0x0801da08
 8011dc8:	0801da8c 	.word	0x0801da8c
 8011dcc:	0801dabc 	.word	0x0801dabc

08011dd0 <cbf_tag>:
    Jump_To_Application(); 
    return 0;
}

int cbf_tag(int argc, char *argv[])
{
 8011dd0:	b580      	push	{r7, lr}
 8011dd2:	b082      	sub	sp, #8
 8011dd4:	af00      	add	r7, sp, #0
 8011dd6:	6078      	str	r0, [r7, #4]
 8011dd8:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8011dda:	4807      	ldr	r0, [pc, #28]	@ (8011df8 <cbf_tag+0x28>)
 8011ddc:	f00a fcb8 	bl	801c750 <puts>
    printf("FW SN\t\t\t%s\r\n", tag->fw_sn );
    printf("FW Version\t\t%s\r\n", tag->fw_version );
    printf("FW Compiled date\t%s\r\n", tag->fw_compile_data);
    printf("FW Compiled time\t%s\r\n", tag->fw_compile_time);
#else
    printf(" S M I L E  ~  :) \r\n");
 8011de0:	4806      	ldr	r0, [pc, #24]	@ (8011dfc <cbf_tag+0x2c>)
 8011de2:	f00a fcb5 	bl	801c750 <puts>
#endif
    CONSOLE_SPLIT;
 8011de6:	4804      	ldr	r0, [pc, #16]	@ (8011df8 <cbf_tag+0x28>)
 8011de8:	f00a fcb2 	bl	801c750 <puts>
    return 0;
 8011dec:	2300      	movs	r3, #0
}
 8011dee:	4618      	mov	r0, r3
 8011df0:	3708      	adds	r7, #8
 8011df2:	46bd      	mov	sp, r7
 8011df4:	bd80      	pop	{r7, pc}
 8011df6:	bf00      	nop
 8011df8:	0801d748 	.word	0x0801d748
 8011dfc:	0801daf0 	.word	0x0801daf0

08011e00 <cbf_test_assert>:

int cbf_test_assert(int argc, char *argv[])
{
 8011e00:	b480      	push	{r7}
 8011e02:	b083      	sub	sp, #12
 8011e04:	af00      	add	r7, sp, #0
 8011e06:	6078      	str	r0, [r7, #4]
 8011e08:	6039      	str	r1, [r7, #0]
	int ret = atoi(argv[1]);
    assert_param(ret);
	#endif

    //printf("sizeof(uint32_t) %d, sizeof(uint64_t) %d \r\n", sizeof(uint32_t), sizeof(uint64_t));
    return 0;
 8011e0a:	2300      	movs	r3, #0
}
 8011e0c:	4618      	mov	r0, r3
 8011e0e:	370c      	adds	r7, #12
 8011e10:	46bd      	mov	sp, r7
 8011e12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011e16:	4770      	bx	lr

08011e18 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8011e18:	b580      	push	{r7, lr}
 8011e1a:	b08c      	sub	sp, #48	@ 0x30
 8011e1c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8011e1e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011e22:	2200      	movs	r2, #0
 8011e24:	601a      	str	r2, [r3, #0]
 8011e26:	605a      	str	r2, [r3, #4]
 8011e28:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8011e2a:	1d3b      	adds	r3, r7, #4
 8011e2c:	2220      	movs	r2, #32
 8011e2e:	2100      	movs	r1, #0
 8011e30:	4618      	mov	r0, r3
 8011e32:	f00a fe29 	bl	801ca88 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8011e36:	4b32      	ldr	r3, [pc, #200]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e38:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8011e3c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8011e3e:	4b30      	ldr	r3, [pc, #192]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e40:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8011e44:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8011e46:	4b2e      	ldr	r3, [pc, #184]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e48:	2200      	movs	r2, #0
 8011e4a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8011e4c:	4b2c      	ldr	r3, [pc, #176]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e4e:	2200      	movs	r2, #0
 8011e50:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8011e52:	4b2b      	ldr	r3, [pc, #172]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e54:	2200      	movs	r2, #0
 8011e56:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8011e58:	4b29      	ldr	r3, [pc, #164]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e5a:	2200      	movs	r2, #0
 8011e5c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8011e5e:	4b28      	ldr	r3, [pc, #160]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e60:	2204      	movs	r2, #4
 8011e62:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8011e64:	4b26      	ldr	r3, [pc, #152]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e66:	2200      	movs	r2, #0
 8011e68:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8011e6a:	4b25      	ldr	r3, [pc, #148]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e6c:	2200      	movs	r2, #0
 8011e6e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8011e70:	4b23      	ldr	r3, [pc, #140]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e72:	2201      	movs	r2, #1
 8011e74:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8011e76:	4b22      	ldr	r3, [pc, #136]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e78:	2200      	movs	r2, #0
 8011e7a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8011e7e:	4b20      	ldr	r3, [pc, #128]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e80:	2200      	movs	r2, #0
 8011e82:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8011e84:	4b1e      	ldr	r3, [pc, #120]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e86:	2200      	movs	r2, #0
 8011e88:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8011e8a:	4b1d      	ldr	r3, [pc, #116]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e8c:	2200      	movs	r2, #0
 8011e8e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8011e92:	4b1b      	ldr	r3, [pc, #108]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e94:	2200      	movs	r2, #0
 8011e96:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8011e98:	4b19      	ldr	r3, [pc, #100]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011e9a:	2200      	movs	r2, #0
 8011e9c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8011ea0:	4817      	ldr	r0, [pc, #92]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011ea2:	f001 f85d 	bl	8012f60 <HAL_ADC_Init>
 8011ea6:	4603      	mov	r3, r0
 8011ea8:	2b00      	cmp	r3, #0
 8011eaa:	d001      	beq.n	8011eb0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8011eac:	f000 fafc 	bl	80124a8 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8011eb0:	2300      	movs	r3, #0
 8011eb2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8011eb4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8011eb8:	4619      	mov	r1, r3
 8011eba:	4811      	ldr	r0, [pc, #68]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011ebc:	f002 fcd0 	bl	8014860 <HAL_ADCEx_MultiModeConfigChannel>
 8011ec0:	4603      	mov	r3, r0
 8011ec2:	2b00      	cmp	r3, #0
 8011ec4:	d001      	beq.n	8011eca <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8011ec6:	f000 faef 	bl	80124a8 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8011eca:	4b0e      	ldr	r3, [pc, #56]	@ (8011f04 <MX_ADC1_Init+0xec>)
 8011ecc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8011ece:	2306      	movs	r3, #6
 8011ed0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8011ed2:	2300      	movs	r3, #0
 8011ed4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8011ed6:	237f      	movs	r3, #127	@ 0x7f
 8011ed8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8011eda:	2304      	movs	r3, #4
 8011edc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8011ede:	2300      	movs	r3, #0
 8011ee0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8011ee2:	1d3b      	adds	r3, r7, #4
 8011ee4:	4619      	mov	r1, r3
 8011ee6:	4806      	ldr	r0, [pc, #24]	@ (8011f00 <MX_ADC1_Init+0xe8>)
 8011ee8:	f001 fe44 	bl	8013b74 <HAL_ADC_ConfigChannel>
 8011eec:	4603      	mov	r3, r0
 8011eee:	2b00      	cmp	r3, #0
 8011ef0:	d001      	beq.n	8011ef6 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8011ef2:	f000 fad9 	bl	80124a8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8011ef6:	bf00      	nop
 8011ef8:	3730      	adds	r7, #48	@ 0x30
 8011efa:	46bd      	mov	sp, r7
 8011efc:	bd80      	pop	{r7, pc}
 8011efe:	bf00      	nop
 8011f00:	200001b0 	.word	0x200001b0
 8011f04:	04300002 	.word	0x04300002

08011f08 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8011f08:	b580      	push	{r7, lr}
 8011f0a:	b09a      	sub	sp, #104	@ 0x68
 8011f0c:	af00      	add	r7, sp, #0
 8011f0e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f10:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011f14:	2200      	movs	r2, #0
 8011f16:	601a      	str	r2, [r3, #0]
 8011f18:	605a      	str	r2, [r3, #4]
 8011f1a:	609a      	str	r2, [r3, #8]
 8011f1c:	60da      	str	r2, [r3, #12]
 8011f1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8011f20:	f107 0310 	add.w	r3, r7, #16
 8011f24:	2244      	movs	r2, #68	@ 0x44
 8011f26:	2100      	movs	r1, #0
 8011f28:	4618      	mov	r0, r3
 8011f2a:	f00a fdad 	bl	801ca88 <memset>
  if(adcHandle->Instance==ADC1)
 8011f2e:	687b      	ldr	r3, [r7, #4]
 8011f30:	681b      	ldr	r3, [r3, #0]
 8011f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8011f36:	d167      	bne.n	8012008 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8011f38:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8011f3c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8011f3e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8011f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8011f44:	f107 0310 	add.w	r3, r7, #16
 8011f48:	4618      	mov	r0, r3
 8011f4a:	f005 fc85 	bl	8017858 <HAL_RCCEx_PeriphCLKConfig>
 8011f4e:	4603      	mov	r3, r0
 8011f50:	2b00      	cmp	r3, #0
 8011f52:	d001      	beq.n	8011f58 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8011f54:	f000 faa8 	bl	80124a8 <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8011f58:	4b2d      	ldr	r3, [pc, #180]	@ (8012010 <HAL_ADC_MspInit+0x108>)
 8011f5a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f5c:	4a2c      	ldr	r2, [pc, #176]	@ (8012010 <HAL_ADC_MspInit+0x108>)
 8011f5e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8011f62:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011f64:	4b2a      	ldr	r3, [pc, #168]	@ (8012010 <HAL_ADC_MspInit+0x108>)
 8011f66:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f68:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8011f6c:	60fb      	str	r3, [r7, #12]
 8011f6e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f70:	4b27      	ldr	r3, [pc, #156]	@ (8012010 <HAL_ADC_MspInit+0x108>)
 8011f72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f74:	4a26      	ldr	r2, [pc, #152]	@ (8012010 <HAL_ADC_MspInit+0x108>)
 8011f76:	f043 0301 	orr.w	r3, r3, #1
 8011f7a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011f7c:	4b24      	ldr	r3, [pc, #144]	@ (8012010 <HAL_ADC_MspInit+0x108>)
 8011f7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f80:	f003 0301 	and.w	r3, r3, #1
 8011f84:	60bb      	str	r3, [r7, #8]
 8011f86:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8011f88:	2301      	movs	r3, #1
 8011f8a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8011f8c:	2303      	movs	r3, #3
 8011f8e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011f90:	2300      	movs	r3, #0
 8011f92:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8011f94:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8011f98:	4619      	mov	r1, r3
 8011f9a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011f9e:	f004 f815 	bl	8015fcc <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8011fa2:	4b1c      	ldr	r3, [pc, #112]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fa4:	4a1c      	ldr	r2, [pc, #112]	@ (8012018 <HAL_ADC_MspInit+0x110>)
 8011fa6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8011fa8:	4b1a      	ldr	r3, [pc, #104]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011faa:	2205      	movs	r2, #5
 8011fac:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8011fae:	4b19      	ldr	r3, [pc, #100]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fb0:	2200      	movs	r2, #0
 8011fb2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8011fb4:	4b17      	ldr	r3, [pc, #92]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fb6:	2200      	movs	r2, #0
 8011fb8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8011fba:	4b16      	ldr	r3, [pc, #88]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fbc:	2280      	movs	r2, #128	@ 0x80
 8011fbe:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8011fc0:	4b14      	ldr	r3, [pc, #80]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fc2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8011fc6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8011fc8:	4b12      	ldr	r3, [pc, #72]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8011fce:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8011fd0:	4b10      	ldr	r3, [pc, #64]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fd2:	2220      	movs	r2, #32
 8011fd4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8011fd6:	4b0f      	ldr	r3, [pc, #60]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fd8:	2200      	movs	r2, #0
 8011fda:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8011fdc:	480d      	ldr	r0, [pc, #52]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011fde:	f003 f983 	bl	80152e8 <HAL_DMA_Init>
 8011fe2:	4603      	mov	r3, r0
 8011fe4:	2b00      	cmp	r3, #0
 8011fe6:	d001      	beq.n	8011fec <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8011fe8:	f000 fa5e 	bl	80124a8 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8011fec:	687b      	ldr	r3, [r7, #4]
 8011fee:	4a09      	ldr	r2, [pc, #36]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011ff0:	655a      	str	r2, [r3, #84]	@ 0x54
 8011ff2:	4a08      	ldr	r2, [pc, #32]	@ (8012014 <HAL_ADC_MspInit+0x10c>)
 8011ff4:	687b      	ldr	r3, [r7, #4]
 8011ff6:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8011ff8:	2200      	movs	r2, #0
 8011ffa:	2105      	movs	r1, #5
 8011ffc:	2012      	movs	r0, #18
 8011ffe:	f002 fe3f 	bl	8014c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8012002:	2012      	movs	r0, #18
 8012004:	f002 fe66 	bl	8014cd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8012008:	bf00      	nop
 801200a:	3768      	adds	r7, #104	@ 0x68
 801200c:	46bd      	mov	sp, r7
 801200e:	bd80      	pop	{r7, pc}
 8012010:	40021000 	.word	0x40021000
 8012014:	2000021c 	.word	0x2000021c
 8012018:	40020008 	.word	0x40020008

0801201c <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 801201c:	b5b0      	push	{r4, r5, r7, lr}
 801201e:	b086      	sub	sp, #24
 8012020:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, CLI_Task, osPriorityNormal, 0, 128);
 8012022:	4b09      	ldr	r3, [pc, #36]	@ (8012048 <MX_FREERTOS_Init+0x2c>)
 8012024:	1d3c      	adds	r4, r7, #4
 8012026:	461d      	mov	r5, r3
 8012028:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 801202a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 801202c:	682b      	ldr	r3, [r5, #0]
 801202e:	6023      	str	r3, [r4, #0]
  CLI_TaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8012030:	1d3b      	adds	r3, r7, #4
 8012032:	2100      	movs	r1, #0
 8012034:	4618      	mov	r0, r3
 8012036:	f009 f964 	bl	801b302 <osThreadCreate>
 801203a:	4603      	mov	r3, r0
 801203c:	4a03      	ldr	r2, [pc, #12]	@ (801204c <MX_FREERTOS_Init+0x30>)
 801203e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8012040:	bf00      	nop
 8012042:	3718      	adds	r7, #24
 8012044:	46bd      	mov	sp, r7
 8012046:	bdb0      	pop	{r4, r5, r7, pc}
 8012048:	0801db88 	.word	0x0801db88
 801204c:	2000027c 	.word	0x2000027c

08012050 <CLI_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void CLI_Task(void const * argument)
{
 8012050:	b580      	push	{r7, lr}
 8012052:	b082      	sub	sp, #8
 8012054:	af00      	add	r7, sp, #0
 8012056:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    if (cli.rx_done == CLI_READY) {
 8012058:	4b07      	ldr	r3, [pc, #28]	@ (8012078 <CLI_Task+0x28>)
 801205a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 801205e:	2b01      	cmp	r3, #1
 8012060:	d106      	bne.n	8012070 <CLI_Task+0x20>
        cli.rx_done = CLI_CLEAR;
 8012062:	4b05      	ldr	r3, [pc, #20]	@ (8012078 <CLI_Task+0x28>)
 8012064:	2200      	movs	r2, #0
 8012066:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        parser((char *)&cli.buffer[0]);
 801206a:	4803      	ldr	r0, [pc, #12]	@ (8012078 <CLI_Task+0x28>)
 801206c:	f7ff fbf0 	bl	8011850 <parser>
    }
    osDelay(1);
 8012070:	2001      	movs	r0, #1
 8012072:	f009 f96d 	bl	801b350 <osDelay>
    if (cli.rx_done == CLI_READY) {
 8012076:	e7ef      	b.n	8012058 <CLI_Task+0x8>
 8012078:	200000ac 	.word	0x200000ac

0801207c <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 801207c:	b580      	push	{r7, lr}
 801207e:	b08c      	sub	sp, #48	@ 0x30
 8012080:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8012082:	463b      	mov	r3, r7
 8012084:	2230      	movs	r2, #48	@ 0x30
 8012086:	2100      	movs	r1, #0
 8012088:	4618      	mov	r0, r3
 801208a:	f00a fcfd 	bl	801ca88 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 801208e:	4b16      	ldr	r3, [pc, #88]	@ (80120e8 <MX_DAC1_Init+0x6c>)
 8012090:	4a16      	ldr	r2, [pc, #88]	@ (80120ec <MX_DAC1_Init+0x70>)
 8012092:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8012094:	4814      	ldr	r0, [pc, #80]	@ (80120e8 <MX_DAC1_Init+0x6c>)
 8012096:	f002 fe39 	bl	8014d0c <HAL_DAC_Init>
 801209a:	4603      	mov	r3, r0
 801209c:	2b00      	cmp	r3, #0
 801209e:	d001      	beq.n	80120a4 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 80120a0:	f000 fa02 	bl	80124a8 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 80120a4:	2302      	movs	r3, #2
 80120a6:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 80120a8:	2300      	movs	r3, #0
 80120aa:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 80120ac:	2300      	movs	r3, #0
 80120ae:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 80120b0:	2300      	movs	r3, #0
 80120b2:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80120b4:	2300      	movs	r3, #0
 80120b6:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 80120b8:	2300      	movs	r3, #0
 80120ba:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80120bc:	2300      	movs	r3, #0
 80120be:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 80120c0:	2301      	movs	r3, #1
 80120c2:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 80120c4:	2300      	movs	r3, #0
 80120c6:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80120c8:	463b      	mov	r3, r7
 80120ca:	2200      	movs	r2, #0
 80120cc:	4619      	mov	r1, r3
 80120ce:	4806      	ldr	r0, [pc, #24]	@ (80120e8 <MX_DAC1_Init+0x6c>)
 80120d0:	f002 fe54 	bl	8014d7c <HAL_DAC_ConfigChannel>
 80120d4:	4603      	mov	r3, r0
 80120d6:	2b00      	cmp	r3, #0
 80120d8:	d001      	beq.n	80120de <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 80120da:	f000 f9e5 	bl	80124a8 <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 80120de:	bf00      	nop
 80120e0:	3730      	adds	r7, #48	@ 0x30
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	20000280 	.word	0x20000280
 80120ec:	50000800 	.word	0x50000800

080120f0 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 80120f0:	b580      	push	{r7, lr}
 80120f2:	b08a      	sub	sp, #40	@ 0x28
 80120f4:	af00      	add	r7, sp, #0
 80120f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80120f8:	f107 0314 	add.w	r3, r7, #20
 80120fc:	2200      	movs	r2, #0
 80120fe:	601a      	str	r2, [r3, #0]
 8012100:	605a      	str	r2, [r3, #4]
 8012102:	609a      	str	r2, [r3, #8]
 8012104:	60da      	str	r2, [r3, #12]
 8012106:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8012108:	687b      	ldr	r3, [r7, #4]
 801210a:	681b      	ldr	r3, [r3, #0]
 801210c:	4a15      	ldr	r2, [pc, #84]	@ (8012164 <HAL_DAC_MspInit+0x74>)
 801210e:	4293      	cmp	r3, r2
 8012110:	d124      	bne.n	801215c <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8012112:	4b15      	ldr	r3, [pc, #84]	@ (8012168 <HAL_DAC_MspInit+0x78>)
 8012114:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012116:	4a14      	ldr	r2, [pc, #80]	@ (8012168 <HAL_DAC_MspInit+0x78>)
 8012118:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 801211c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801211e:	4b12      	ldr	r3, [pc, #72]	@ (8012168 <HAL_DAC_MspInit+0x78>)
 8012120:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012122:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8012126:	613b      	str	r3, [r7, #16]
 8012128:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801212a:	4b0f      	ldr	r3, [pc, #60]	@ (8012168 <HAL_DAC_MspInit+0x78>)
 801212c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801212e:	4a0e      	ldr	r2, [pc, #56]	@ (8012168 <HAL_DAC_MspInit+0x78>)
 8012130:	f043 0301 	orr.w	r3, r3, #1
 8012134:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012136:	4b0c      	ldr	r3, [pc, #48]	@ (8012168 <HAL_DAC_MspInit+0x78>)
 8012138:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801213a:	f003 0301 	and.w	r3, r3, #1
 801213e:	60fb      	str	r3, [r7, #12]
 8012140:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8012142:	2310      	movs	r3, #16
 8012144:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8012146:	2303      	movs	r3, #3
 8012148:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801214a:	2300      	movs	r3, #0
 801214c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 801214e:	f107 0314 	add.w	r3, r7, #20
 8012152:	4619      	mov	r1, r3
 8012154:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012158:	f003 ff38 	bl	8015fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 801215c:	bf00      	nop
 801215e:	3728      	adds	r7, #40	@ 0x28
 8012160:	46bd      	mov	sp, r7
 8012162:	bd80      	pop	{r7, pc}
 8012164:	50000800 	.word	0x50000800
 8012168:	40021000 	.word	0x40021000

0801216c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 801216c:	b580      	push	{r7, lr}
 801216e:	b082      	sub	sp, #8
 8012170:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8012172:	4b12      	ldr	r3, [pc, #72]	@ (80121bc <MX_DMA_Init+0x50>)
 8012174:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012176:	4a11      	ldr	r2, [pc, #68]	@ (80121bc <MX_DMA_Init+0x50>)
 8012178:	f043 0304 	orr.w	r3, r3, #4
 801217c:	6493      	str	r3, [r2, #72]	@ 0x48
 801217e:	4b0f      	ldr	r3, [pc, #60]	@ (80121bc <MX_DMA_Init+0x50>)
 8012180:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012182:	f003 0304 	and.w	r3, r3, #4
 8012186:	607b      	str	r3, [r7, #4]
 8012188:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 801218a:	4b0c      	ldr	r3, [pc, #48]	@ (80121bc <MX_DMA_Init+0x50>)
 801218c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801218e:	4a0b      	ldr	r2, [pc, #44]	@ (80121bc <MX_DMA_Init+0x50>)
 8012190:	f043 0301 	orr.w	r3, r3, #1
 8012194:	6493      	str	r3, [r2, #72]	@ 0x48
 8012196:	4b09      	ldr	r3, [pc, #36]	@ (80121bc <MX_DMA_Init+0x50>)
 8012198:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801219a:	f003 0301 	and.w	r3, r3, #1
 801219e:	603b      	str	r3, [r7, #0]
 80121a0:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 80121a2:	2200      	movs	r2, #0
 80121a4:	2105      	movs	r1, #5
 80121a6:	200b      	movs	r0, #11
 80121a8:	f002 fd6a 	bl	8014c80 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80121ac:	200b      	movs	r0, #11
 80121ae:	f002 fd91 	bl	8014cd4 <HAL_NVIC_EnableIRQ>

}
 80121b2:	bf00      	nop
 80121b4:	3708      	adds	r7, #8
 80121b6:	46bd      	mov	sp, r7
 80121b8:	bd80      	pop	{r7, pc}
 80121ba:	bf00      	nop
 80121bc:	40021000 	.word	0x40021000

080121c0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80121c0:	b580      	push	{r7, lr}
 80121c2:	b08a      	sub	sp, #40	@ 0x28
 80121c4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80121c6:	f107 0314 	add.w	r3, r7, #20
 80121ca:	2200      	movs	r2, #0
 80121cc:	601a      	str	r2, [r3, #0]
 80121ce:	605a      	str	r2, [r3, #4]
 80121d0:	609a      	str	r2, [r3, #8]
 80121d2:	60da      	str	r2, [r3, #12]
 80121d4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80121d6:	4b28      	ldr	r3, [pc, #160]	@ (8012278 <MX_GPIO_Init+0xb8>)
 80121d8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121da:	4a27      	ldr	r2, [pc, #156]	@ (8012278 <MX_GPIO_Init+0xb8>)
 80121dc:	f043 0304 	orr.w	r3, r3, #4
 80121e0:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80121e2:	4b25      	ldr	r3, [pc, #148]	@ (8012278 <MX_GPIO_Init+0xb8>)
 80121e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121e6:	f003 0304 	and.w	r3, r3, #4
 80121ea:	613b      	str	r3, [r7, #16]
 80121ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80121ee:	4b22      	ldr	r3, [pc, #136]	@ (8012278 <MX_GPIO_Init+0xb8>)
 80121f0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121f2:	4a21      	ldr	r2, [pc, #132]	@ (8012278 <MX_GPIO_Init+0xb8>)
 80121f4:	f043 0320 	orr.w	r3, r3, #32
 80121f8:	64d3      	str	r3, [r2, #76]	@ 0x4c
 80121fa:	4b1f      	ldr	r3, [pc, #124]	@ (8012278 <MX_GPIO_Init+0xb8>)
 80121fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80121fe:	f003 0320 	and.w	r3, r3, #32
 8012202:	60fb      	str	r3, [r7, #12]
 8012204:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8012206:	4b1c      	ldr	r3, [pc, #112]	@ (8012278 <MX_GPIO_Init+0xb8>)
 8012208:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801220a:	4a1b      	ldr	r2, [pc, #108]	@ (8012278 <MX_GPIO_Init+0xb8>)
 801220c:	f043 0301 	orr.w	r3, r3, #1
 8012210:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012212:	4b19      	ldr	r3, [pc, #100]	@ (8012278 <MX_GPIO_Init+0xb8>)
 8012214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012216:	f003 0301 	and.w	r3, r3, #1
 801221a:	60bb      	str	r3, [r7, #8]
 801221c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 801221e:	4b16      	ldr	r3, [pc, #88]	@ (8012278 <MX_GPIO_Init+0xb8>)
 8012220:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012222:	4a15      	ldr	r2, [pc, #84]	@ (8012278 <MX_GPIO_Init+0xb8>)
 8012224:	f043 0302 	orr.w	r3, r3, #2
 8012228:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801222a:	4b13      	ldr	r3, [pc, #76]	@ (8012278 <MX_GPIO_Init+0xb8>)
 801222c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801222e:	f003 0302 	and.w	r3, r3, #2
 8012232:	607b      	str	r3, [r7, #4]
 8012234:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin  = B1_Pin;
 8012236:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 801223a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 801223c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8012240:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012242:	2300      	movs	r3, #0
 8012244:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8012246:	f107 0314 	add.w	r3, r7, #20
 801224a:	4619      	mov	r1, r3
 801224c:	480b      	ldr	r0, [pc, #44]	@ (801227c <MX_GPIO_Init+0xbc>)
 801224e:	f003 febd 	bl	8015fcc <HAL_GPIO_Init>


  GPIO_InitStruct.Pin   = NUCLEO431RB_LED;
 8012252:	2320      	movs	r3, #32
 8012254:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8012256:	2301      	movs	r3, #1
 8012258:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 801225a:	2300      	movs	r3, #0
 801225c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 801225e:	2300      	movs	r3, #0
 8012260:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NUCLEO431RB_LED_PORT, &GPIO_InitStruct);
 8012262:	f107 0314 	add.w	r3, r7, #20
 8012266:	4619      	mov	r1, r3
 8012268:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 801226c:	f003 feae 	bl	8015fcc <HAL_GPIO_Init>

}
 8012270:	bf00      	nop
 8012272:	3728      	adds	r7, #40	@ 0x28
 8012274:	46bd      	mov	sp, r7
 8012276:	bd80      	pop	{r7, pc}
 8012278:	40021000 	.word	0x40021000
 801227c:	48000800 	.word	0x48000800

08012280 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8012280:	b580      	push	{r7, lr}
 8012282:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8012284:	4b1b      	ldr	r3, [pc, #108]	@ (80122f4 <MX_I2C1_Init+0x74>)
 8012286:	4a1c      	ldr	r2, [pc, #112]	@ (80122f8 <MX_I2C1_Init+0x78>)
 8012288:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 801228a:	4b1a      	ldr	r3, [pc, #104]	@ (80122f4 <MX_I2C1_Init+0x74>)
 801228c:	4a1b      	ldr	r2, [pc, #108]	@ (80122fc <MX_I2C1_Init+0x7c>)
 801228e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8012290:	4b18      	ldr	r3, [pc, #96]	@ (80122f4 <MX_I2C1_Init+0x74>)
 8012292:	2200      	movs	r2, #0
 8012294:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8012296:	4b17      	ldr	r3, [pc, #92]	@ (80122f4 <MX_I2C1_Init+0x74>)
 8012298:	2201      	movs	r2, #1
 801229a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 801229c:	4b15      	ldr	r3, [pc, #84]	@ (80122f4 <MX_I2C1_Init+0x74>)
 801229e:	2200      	movs	r2, #0
 80122a0:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80122a2:	4b14      	ldr	r3, [pc, #80]	@ (80122f4 <MX_I2C1_Init+0x74>)
 80122a4:	2200      	movs	r2, #0
 80122a6:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80122a8:	4b12      	ldr	r3, [pc, #72]	@ (80122f4 <MX_I2C1_Init+0x74>)
 80122aa:	2200      	movs	r2, #0
 80122ac:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80122ae:	4b11      	ldr	r3, [pc, #68]	@ (80122f4 <MX_I2C1_Init+0x74>)
 80122b0:	2200      	movs	r2, #0
 80122b2:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80122b4:	4b0f      	ldr	r3, [pc, #60]	@ (80122f4 <MX_I2C1_Init+0x74>)
 80122b6:	2200      	movs	r2, #0
 80122b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80122ba:	480e      	ldr	r0, [pc, #56]	@ (80122f4 <MX_I2C1_Init+0x74>)
 80122bc:	f004 f8da 	bl	8016474 <HAL_I2C_Init>
 80122c0:	4603      	mov	r3, r0
 80122c2:	2b00      	cmp	r3, #0
 80122c4:	d001      	beq.n	80122ca <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80122c6:	f000 f8ef 	bl	80124a8 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80122ca:	2100      	movs	r1, #0
 80122cc:	4809      	ldr	r0, [pc, #36]	@ (80122f4 <MX_I2C1_Init+0x74>)
 80122ce:	f004 f9f7 	bl	80166c0 <HAL_I2CEx_ConfigAnalogFilter>
 80122d2:	4603      	mov	r3, r0
 80122d4:	2b00      	cmp	r3, #0
 80122d6:	d001      	beq.n	80122dc <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80122d8:	f000 f8e6 	bl	80124a8 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80122dc:	2100      	movs	r1, #0
 80122de:	4805      	ldr	r0, [pc, #20]	@ (80122f4 <MX_I2C1_Init+0x74>)
 80122e0:	f004 fa5e 	bl	80167a0 <HAL_I2CEx_ConfigDigitalFilter>
 80122e4:	4603      	mov	r3, r0
 80122e6:	2b00      	cmp	r3, #0
 80122e8:	d001      	beq.n	80122ee <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80122ea:	f000 f8dd 	bl	80124a8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80122ee:	bf00      	nop
 80122f0:	bd80      	pop	{r7, pc}
 80122f2:	bf00      	nop
 80122f4:	20000294 	.word	0x20000294
 80122f8:	40005400 	.word	0x40005400
 80122fc:	30a0a7fb 	.word	0x30a0a7fb

08012300 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8012300:	b580      	push	{r7, lr}
 8012302:	b09a      	sub	sp, #104	@ 0x68
 8012304:	af00      	add	r7, sp, #0
 8012306:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012308:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801230c:	2200      	movs	r2, #0
 801230e:	601a      	str	r2, [r3, #0]
 8012310:	605a      	str	r2, [r3, #4]
 8012312:	609a      	str	r2, [r3, #8]
 8012314:	60da      	str	r2, [r3, #12]
 8012316:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8012318:	f107 0310 	add.w	r3, r7, #16
 801231c:	2244      	movs	r2, #68	@ 0x44
 801231e:	2100      	movs	r1, #0
 8012320:	4618      	mov	r0, r3
 8012322:	f00a fbb1 	bl	801ca88 <memset>
  if(i2cHandle->Instance==I2C1)
 8012326:	687b      	ldr	r3, [r7, #4]
 8012328:	681b      	ldr	r3, [r3, #0]
 801232a:	4a1f      	ldr	r2, [pc, #124]	@ (80123a8 <HAL_I2C_MspInit+0xa8>)
 801232c:	4293      	cmp	r3, r2
 801232e:	d136      	bne.n	801239e <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8012330:	2340      	movs	r3, #64	@ 0x40
 8012332:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8012334:	2300      	movs	r3, #0
 8012336:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012338:	f107 0310 	add.w	r3, r7, #16
 801233c:	4618      	mov	r0, r3
 801233e:	f005 fa8b 	bl	8017858 <HAL_RCCEx_PeriphCLKConfig>
 8012342:	4603      	mov	r3, r0
 8012344:	2b00      	cmp	r3, #0
 8012346:	d001      	beq.n	801234c <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8012348:	f000 f8ae 	bl	80124a8 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 801234c:	4b17      	ldr	r3, [pc, #92]	@ (80123ac <HAL_I2C_MspInit+0xac>)
 801234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012350:	4a16      	ldr	r2, [pc, #88]	@ (80123ac <HAL_I2C_MspInit+0xac>)
 8012352:	f043 0302 	orr.w	r3, r3, #2
 8012356:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012358:	4b14      	ldr	r3, [pc, #80]	@ (80123ac <HAL_I2C_MspInit+0xac>)
 801235a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801235c:	f003 0302 	and.w	r3, r3, #2
 8012360:	60fb      	str	r3, [r7, #12]
 8012362:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8012364:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8012368:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 801236a:	2312      	movs	r3, #18
 801236c:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801236e:	2300      	movs	r3, #0
 8012370:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012372:	2300      	movs	r3, #0
 8012374:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8012376:	2304      	movs	r3, #4
 8012378:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 801237a:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801237e:	4619      	mov	r1, r3
 8012380:	480b      	ldr	r0, [pc, #44]	@ (80123b0 <HAL_I2C_MspInit+0xb0>)
 8012382:	f003 fe23 	bl	8015fcc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8012386:	4b09      	ldr	r3, [pc, #36]	@ (80123ac <HAL_I2C_MspInit+0xac>)
 8012388:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801238a:	4a08      	ldr	r2, [pc, #32]	@ (80123ac <HAL_I2C_MspInit+0xac>)
 801238c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8012390:	6593      	str	r3, [r2, #88]	@ 0x58
 8012392:	4b06      	ldr	r3, [pc, #24]	@ (80123ac <HAL_I2C_MspInit+0xac>)
 8012394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012396:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801239a:	60bb      	str	r3, [r7, #8]
 801239c:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 801239e:	bf00      	nop
 80123a0:	3768      	adds	r7, #104	@ 0x68
 80123a2:	46bd      	mov	sp, r7
 80123a4:	bd80      	pop	{r7, pc}
 80123a6:	bf00      	nop
 80123a8:	40005400 	.word	0x40005400
 80123ac:	40021000 	.word	0x40021000
 80123b0:	48000400 	.word	0x48000400

080123b4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80123b4:	b580      	push	{r7, lr}
 80123b6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80123b8:	f000 fb75 	bl	8012aa6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80123bc:	f000 f816 	bl	80123ec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80123c0:	f7ff fefe 	bl	80121c0 <MX_GPIO_Init>
#ifdef _USE_APP_
  MX_DMA_Init();
 80123c4:	f7ff fed2 	bl	801216c <MX_DMA_Init>
  MX_ADC1_Init();
 80123c8:	f7ff fd26 	bl	8011e18 <MX_ADC1_Init>
  MX_I2C1_Init();
 80123cc:	f7ff ff58 	bl	8012280 <MX_I2C1_Init>
  MX_SPI1_Init();
 80123d0:	f000 f87c 	bl	80124cc <MX_SPI1_Init>
  MX_DAC1_Init();
 80123d4:	f7ff fe52 	bl	801207c <MX_DAC1_Init>
#endif
  MX_LPUART1_UART_Init();
 80123d8:	f000 fa92 	bl	8012900 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLI_Init();
 80123dc:	f7ff fa10 	bl	8011800 <CLI_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80123e0:	f7ff fe1c 	bl	801201c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80123e4:	f008 ff86 	bl	801b2f4 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80123e8:	bf00      	nop
 80123ea:	e7fd      	b.n	80123e8 <main+0x34>

080123ec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80123ec:	b580      	push	{r7, lr}
 80123ee:	b094      	sub	sp, #80	@ 0x50
 80123f0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80123f2:	f107 0318 	add.w	r3, r7, #24
 80123f6:	2238      	movs	r2, #56	@ 0x38
 80123f8:	2100      	movs	r1, #0
 80123fa:	4618      	mov	r0, r3
 80123fc:	f00a fb44 	bl	801ca88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012400:	1d3b      	adds	r3, r7, #4
 8012402:	2200      	movs	r2, #0
 8012404:	601a      	str	r2, [r3, #0]
 8012406:	605a      	str	r2, [r3, #4]
 8012408:	609a      	str	r2, [r3, #8]
 801240a:	60da      	str	r2, [r3, #12]
 801240c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 801240e:	2000      	movs	r0, #0
 8012410:	f004 fa32 	bl	8016878 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8012414:	2302      	movs	r3, #2
 8012416:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8012418:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801241c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 801241e:	2340      	movs	r3, #64	@ 0x40
 8012420:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012422:	2302      	movs	r3, #2
 8012424:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8012426:	2302      	movs	r3, #2
 8012428:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 801242a:	2304      	movs	r3, #4
 801242c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 801242e:	2355      	movs	r3, #85	@ 0x55
 8012430:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012432:	2302      	movs	r3, #2
 8012434:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8012436:	2302      	movs	r3, #2
 8012438:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801243a:	2302      	movs	r3, #2
 801243c:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 801243e:	f107 0318 	add.w	r3, r7, #24
 8012442:	4618      	mov	r0, r3
 8012444:	f004 fadc 	bl	8016a00 <HAL_RCC_OscConfig>
 8012448:	4603      	mov	r3, r0
 801244a:	2b00      	cmp	r3, #0
 801244c:	d001      	beq.n	8012452 <SystemClock_Config+0x66>
  {
    Error_Handler();
 801244e:	f000 f82b 	bl	80124a8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012452:	230f      	movs	r3, #15
 8012454:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8012456:	2303      	movs	r3, #3
 8012458:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801245a:	2300      	movs	r3, #0
 801245c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 801245e:	2300      	movs	r3, #0
 8012460:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8012462:	2300      	movs	r3, #0
 8012464:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8012466:	1d3b      	adds	r3, r7, #4
 8012468:	2104      	movs	r1, #4
 801246a:	4618      	mov	r0, r3
 801246c:	f004 fed4 	bl	8017218 <HAL_RCC_ClockConfig>
 8012470:	4603      	mov	r3, r0
 8012472:	2b00      	cmp	r3, #0
 8012474:	d001      	beq.n	801247a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8012476:	f000 f817 	bl	80124a8 <Error_Handler>
  }
}
 801247a:	bf00      	nop
 801247c:	3750      	adds	r7, #80	@ 0x50
 801247e:	46bd      	mov	sp, r7
 8012480:	bd80      	pop	{r7, pc}
	...

08012484 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8012484:	b580      	push	{r7, lr}
 8012486:	b082      	sub	sp, #8
 8012488:	af00      	add	r7, sp, #0
 801248a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 801248c:	687b      	ldr	r3, [r7, #4]
 801248e:	681b      	ldr	r3, [r3, #0]
 8012490:	4a04      	ldr	r2, [pc, #16]	@ (80124a4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8012492:	4293      	cmp	r3, r2
 8012494:	d101      	bne.n	801249a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8012496:	f000 fb1f 	bl	8012ad8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 801249a:	bf00      	nop
 801249c:	3708      	adds	r7, #8
 801249e:	46bd      	mov	sp, r7
 80124a0:	bd80      	pop	{r7, pc}
 80124a2:	bf00      	nop
 80124a4:	40012c00 	.word	0x40012c00

080124a8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80124a8:	b480      	push	{r7}
 80124aa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80124ac:	b672      	cpsid	i
}
 80124ae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80124b0:	bf00      	nop
 80124b2:	e7fd      	b.n	80124b0 <Error_Handler+0x8>

080124b4 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80124b4:	b480      	push	{r7}
 80124b6:	b083      	sub	sp, #12
 80124b8:	af00      	add	r7, sp, #0
 80124ba:	6078      	str	r0, [r7, #4]
 80124bc:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80124be:	bf00      	nop
 80124c0:	370c      	adds	r7, #12
 80124c2:	46bd      	mov	sp, r7
 80124c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124c8:	4770      	bx	lr
	...

080124cc <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80124cc:	b580      	push	{r7, lr}
 80124ce:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80124d0:	4b1b      	ldr	r3, [pc, #108]	@ (8012540 <MX_SPI1_Init+0x74>)
 80124d2:	4a1c      	ldr	r2, [pc, #112]	@ (8012544 <MX_SPI1_Init+0x78>)
 80124d4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80124d6:	4b1a      	ldr	r3, [pc, #104]	@ (8012540 <MX_SPI1_Init+0x74>)
 80124d8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80124dc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80124de:	4b18      	ldr	r3, [pc, #96]	@ (8012540 <MX_SPI1_Init+0x74>)
 80124e0:	2200      	movs	r2, #0
 80124e2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80124e4:	4b16      	ldr	r3, [pc, #88]	@ (8012540 <MX_SPI1_Init+0x74>)
 80124e6:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80124ea:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80124ec:	4b14      	ldr	r3, [pc, #80]	@ (8012540 <MX_SPI1_Init+0x74>)
 80124ee:	2200      	movs	r2, #0
 80124f0:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80124f2:	4b13      	ldr	r3, [pc, #76]	@ (8012540 <MX_SPI1_Init+0x74>)
 80124f4:	2200      	movs	r2, #0
 80124f6:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80124f8:	4b11      	ldr	r3, [pc, #68]	@ (8012540 <MX_SPI1_Init+0x74>)
 80124fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80124fe:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8012500:	4b0f      	ldr	r3, [pc, #60]	@ (8012540 <MX_SPI1_Init+0x74>)
 8012502:	2208      	movs	r2, #8
 8012504:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8012506:	4b0e      	ldr	r3, [pc, #56]	@ (8012540 <MX_SPI1_Init+0x74>)
 8012508:	2200      	movs	r2, #0
 801250a:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 801250c:	4b0c      	ldr	r3, [pc, #48]	@ (8012540 <MX_SPI1_Init+0x74>)
 801250e:	2200      	movs	r2, #0
 8012510:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8012512:	4b0b      	ldr	r3, [pc, #44]	@ (8012540 <MX_SPI1_Init+0x74>)
 8012514:	2200      	movs	r2, #0
 8012516:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 8012518:	4b09      	ldr	r3, [pc, #36]	@ (8012540 <MX_SPI1_Init+0x74>)
 801251a:	2207      	movs	r2, #7
 801251c:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 801251e:	4b08      	ldr	r3, [pc, #32]	@ (8012540 <MX_SPI1_Init+0x74>)
 8012520:	2200      	movs	r2, #0
 8012522:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8012524:	4b06      	ldr	r3, [pc, #24]	@ (8012540 <MX_SPI1_Init+0x74>)
 8012526:	2208      	movs	r2, #8
 8012528:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 801252a:	4805      	ldr	r0, [pc, #20]	@ (8012540 <MX_SPI1_Init+0x74>)
 801252c:	f005 fd34 	bl	8017f98 <HAL_SPI_Init>
 8012530:	4603      	mov	r3, r0
 8012532:	2b00      	cmp	r3, #0
 8012534:	d001      	beq.n	801253a <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 8012536:	f7ff ffb7 	bl	80124a8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 801253a:	bf00      	nop
 801253c:	bd80      	pop	{r7, pc}
 801253e:	bf00      	nop
 8012540:	200002e8 	.word	0x200002e8
 8012544:	40013000 	.word	0x40013000

08012548 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8012548:	b580      	push	{r7, lr}
 801254a:	b08a      	sub	sp, #40	@ 0x28
 801254c:	af00      	add	r7, sp, #0
 801254e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8012550:	f107 0314 	add.w	r3, r7, #20
 8012554:	2200      	movs	r2, #0
 8012556:	601a      	str	r2, [r3, #0]
 8012558:	605a      	str	r2, [r3, #4]
 801255a:	609a      	str	r2, [r3, #8]
 801255c:	60da      	str	r2, [r3, #12]
 801255e:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	681b      	ldr	r3, [r3, #0]
 8012564:	4a17      	ldr	r2, [pc, #92]	@ (80125c4 <HAL_SPI_MspInit+0x7c>)
 8012566:	4293      	cmp	r3, r2
 8012568:	d128      	bne.n	80125bc <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 801256a:	4b17      	ldr	r3, [pc, #92]	@ (80125c8 <HAL_SPI_MspInit+0x80>)
 801256c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801256e:	4a16      	ldr	r2, [pc, #88]	@ (80125c8 <HAL_SPI_MspInit+0x80>)
 8012570:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8012574:	6613      	str	r3, [r2, #96]	@ 0x60
 8012576:	4b14      	ldr	r3, [pc, #80]	@ (80125c8 <HAL_SPI_MspInit+0x80>)
 8012578:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801257a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801257e:	613b      	str	r3, [r7, #16]
 8012580:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8012582:	4b11      	ldr	r3, [pc, #68]	@ (80125c8 <HAL_SPI_MspInit+0x80>)
 8012584:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012586:	4a10      	ldr	r2, [pc, #64]	@ (80125c8 <HAL_SPI_MspInit+0x80>)
 8012588:	f043 0301 	orr.w	r3, r3, #1
 801258c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 801258e:	4b0e      	ldr	r3, [pc, #56]	@ (80125c8 <HAL_SPI_MspInit+0x80>)
 8012590:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012592:	f003 0301 	and.w	r3, r3, #1
 8012596:	60fb      	str	r3, [r7, #12]
 8012598:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 801259a:	23e0      	movs	r3, #224	@ 0xe0
 801259c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 801259e:	2302      	movs	r3, #2
 80125a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80125a2:	2300      	movs	r3, #0
 80125a4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80125a6:	2300      	movs	r3, #0
 80125a8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80125aa:	2305      	movs	r3, #5
 80125ac:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80125ae:	f107 0314 	add.w	r3, r7, #20
 80125b2:	4619      	mov	r1, r3
 80125b4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80125b8:	f003 fd08 	bl	8015fcc <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80125bc:	bf00      	nop
 80125be:	3728      	adds	r7, #40	@ 0x28
 80125c0:	46bd      	mov	sp, r7
 80125c2:	bd80      	pop	{r7, pc}
 80125c4:	40013000 	.word	0x40013000
 80125c8:	40021000 	.word	0x40021000

080125cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80125cc:	b580      	push	{r7, lr}
 80125ce:	b082      	sub	sp, #8
 80125d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80125d2:	4b12      	ldr	r3, [pc, #72]	@ (801261c <HAL_MspInit+0x50>)
 80125d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125d6:	4a11      	ldr	r2, [pc, #68]	@ (801261c <HAL_MspInit+0x50>)
 80125d8:	f043 0301 	orr.w	r3, r3, #1
 80125dc:	6613      	str	r3, [r2, #96]	@ 0x60
 80125de:	4b0f      	ldr	r3, [pc, #60]	@ (801261c <HAL_MspInit+0x50>)
 80125e0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80125e2:	f003 0301 	and.w	r3, r3, #1
 80125e6:	607b      	str	r3, [r7, #4]
 80125e8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80125ea:	4b0c      	ldr	r3, [pc, #48]	@ (801261c <HAL_MspInit+0x50>)
 80125ec:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125ee:	4a0b      	ldr	r2, [pc, #44]	@ (801261c <HAL_MspInit+0x50>)
 80125f0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80125f4:	6593      	str	r3, [r2, #88]	@ 0x58
 80125f6:	4b09      	ldr	r3, [pc, #36]	@ (801261c <HAL_MspInit+0x50>)
 80125f8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80125fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80125fe:	603b      	str	r3, [r7, #0]
 8012600:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012602:	2200      	movs	r2, #0
 8012604:	210f      	movs	r1, #15
 8012606:	f06f 0001 	mvn.w	r0, #1
 801260a:	f002 fb39 	bl	8014c80 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 801260e:	f004 f9e7 	bl	80169e0 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012612:	bf00      	nop
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
 801261a:	bf00      	nop
 801261c:	40021000 	.word	0x40021000

08012620 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012620:	b580      	push	{r7, lr}
 8012622:	b08c      	sub	sp, #48	@ 0x30
 8012624:	af00      	add	r7, sp, #0
 8012626:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8012628:	2300      	movs	r3, #0
 801262a:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 801262c:	2300      	movs	r3, #0
 801262e:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012630:	4b2c      	ldr	r3, [pc, #176]	@ (80126e4 <HAL_InitTick+0xc4>)
 8012632:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012634:	4a2b      	ldr	r2, [pc, #172]	@ (80126e4 <HAL_InitTick+0xc4>)
 8012636:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801263a:	6613      	str	r3, [r2, #96]	@ 0x60
 801263c:	4b29      	ldr	r3, [pc, #164]	@ (80126e4 <HAL_InitTick+0xc4>)
 801263e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012640:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012644:	60bb      	str	r3, [r7, #8]
 8012646:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8012648:	f107 020c 	add.w	r2, r7, #12
 801264c:	f107 0310 	add.w	r3, r7, #16
 8012650:	4611      	mov	r1, r2
 8012652:	4618      	mov	r0, r3
 8012654:	f005 f878 	bl	8017748 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8012658:	f005 f860 	bl	801771c <HAL_RCC_GetPCLK2Freq>
 801265c:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 801265e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012660:	4a21      	ldr	r2, [pc, #132]	@ (80126e8 <HAL_InitTick+0xc8>)
 8012662:	fba2 2303 	umull	r2, r3, r2, r3
 8012666:	0c9b      	lsrs	r3, r3, #18
 8012668:	3b01      	subs	r3, #1
 801266a:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 801266c:	4b1f      	ldr	r3, [pc, #124]	@ (80126ec <HAL_InitTick+0xcc>)
 801266e:	4a20      	ldr	r2, [pc, #128]	@ (80126f0 <HAL_InitTick+0xd0>)
 8012670:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8012672:	4b1e      	ldr	r3, [pc, #120]	@ (80126ec <HAL_InitTick+0xcc>)
 8012674:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8012678:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 801267a:	4a1c      	ldr	r2, [pc, #112]	@ (80126ec <HAL_InitTick+0xcc>)
 801267c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801267e:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8012680:	4b1a      	ldr	r3, [pc, #104]	@ (80126ec <HAL_InitTick+0xcc>)
 8012682:	2200      	movs	r2, #0
 8012684:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8012686:	4b19      	ldr	r3, [pc, #100]	@ (80126ec <HAL_InitTick+0xcc>)
 8012688:	2200      	movs	r2, #0
 801268a:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 801268c:	4817      	ldr	r0, [pc, #92]	@ (80126ec <HAL_InitTick+0xcc>)
 801268e:	f005 fe79 	bl	8018384 <HAL_TIM_Base_Init>
 8012692:	4603      	mov	r3, r0
 8012694:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8012698:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 801269c:	2b00      	cmp	r3, #0
 801269e:	d11b      	bne.n	80126d8 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80126a0:	4812      	ldr	r0, [pc, #72]	@ (80126ec <HAL_InitTick+0xcc>)
 80126a2:	f005 ff77 	bl	8018594 <HAL_TIM_Base_Start_IT>
 80126a6:	4603      	mov	r3, r0
 80126a8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80126ac:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80126b0:	2b00      	cmp	r3, #0
 80126b2:	d111      	bne.n	80126d8 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80126b4:	2019      	movs	r0, #25
 80126b6:	f002 fb0d 	bl	8014cd4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80126ba:	687b      	ldr	r3, [r7, #4]
 80126bc:	2b0f      	cmp	r3, #15
 80126be:	d808      	bhi.n	80126d2 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80126c0:	2200      	movs	r2, #0
 80126c2:	6879      	ldr	r1, [r7, #4]
 80126c4:	2019      	movs	r0, #25
 80126c6:	f002 fadb 	bl	8014c80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80126ca:	4a0a      	ldr	r2, [pc, #40]	@ (80126f4 <HAL_InitTick+0xd4>)
 80126cc:	687b      	ldr	r3, [r7, #4]
 80126ce:	6013      	str	r3, [r2, #0]
 80126d0:	e002      	b.n	80126d8 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80126d2:	2301      	movs	r3, #1
 80126d4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80126d8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80126dc:	4618      	mov	r0, r3
 80126de:	3730      	adds	r7, #48	@ 0x30
 80126e0:	46bd      	mov	sp, r7
 80126e2:	bd80      	pop	{r7, pc}
 80126e4:	40021000 	.word	0x40021000
 80126e8:	431bde83 	.word	0x431bde83
 80126ec:	2000034c 	.word	0x2000034c
 80126f0:	40012c00 	.word	0x40012c00
 80126f4:	20000004 	.word	0x20000004

080126f8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80126f8:	b480      	push	{r7}
 80126fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80126fc:	bf00      	nop
 80126fe:	e7fd      	b.n	80126fc <NMI_Handler+0x4>

08012700 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012700:	b480      	push	{r7}
 8012702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012704:	bf00      	nop
 8012706:	e7fd      	b.n	8012704 <HardFault_Handler+0x4>

08012708 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8012708:	b480      	push	{r7}
 801270a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 801270c:	bf00      	nop
 801270e:	e7fd      	b.n	801270c <MemManage_Handler+0x4>

08012710 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012710:	b480      	push	{r7}
 8012712:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012714:	bf00      	nop
 8012716:	e7fd      	b.n	8012714 <BusFault_Handler+0x4>

08012718 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8012718:	b480      	push	{r7}
 801271a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 801271c:	bf00      	nop
 801271e:	e7fd      	b.n	801271c <UsageFault_Handler+0x4>

08012720 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012720:	b480      	push	{r7}
 8012722:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012724:	bf00      	nop
 8012726:	46bd      	mov	sp, r7
 8012728:	f85d 7b04 	ldr.w	r7, [sp], #4
 801272c:	4770      	bx	lr
	...

08012730 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8012730:	b580      	push	{r7, lr}
 8012732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012734:	4802      	ldr	r0, [pc, #8]	@ (8012740 <DMA1_Channel1_IRQHandler+0x10>)
 8012736:	f003 f813 	bl	8015760 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801273a:	bf00      	nop
 801273c:	bd80      	pop	{r7, pc}
 801273e:	bf00      	nop
 8012740:	2000021c 	.word	0x2000021c

08012744 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8012744:	b580      	push	{r7, lr}
 8012746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8012748:	4802      	ldr	r0, [pc, #8]	@ (8012754 <ADC1_2_IRQHandler+0x10>)
 801274a:	f000 ffbd 	bl	80136c8 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 801274e:	bf00      	nop
 8012750:	bd80      	pop	{r7, pc}
 8012752:	bf00      	nop
 8012754:	200001b0 	.word	0x200001b0

08012758 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8012758:	b580      	push	{r7, lr}
 801275a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 801275c:	4802      	ldr	r0, [pc, #8]	@ (8012768 <TIM1_UP_TIM16_IRQHandler+0x10>)
 801275e:	f005 ffc1 	bl	80186e4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8012762:	bf00      	nop
 8012764:	bd80      	pop	{r7, pc}
 8012766:	bf00      	nop
 8012768:	2000034c 	.word	0x2000034c

0801276c <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 801276c:	b580      	push	{r7, lr}
 801276e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8012770:	4802      	ldr	r0, [pc, #8]	@ (801277c <LPUART1_IRQHandler+0x10>)
 8012772:	f006 fb89 	bl	8018e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 8012776:	bf00      	nop
 8012778:	bd80      	pop	{r7, pc}
 801277a:	bf00      	nop
 801277c:	2000039c 	.word	0x2000039c

08012780 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8012780:	b480      	push	{r7}
 8012782:	af00      	add	r7, sp, #0
  return 1;
 8012784:	2301      	movs	r3, #1
}
 8012786:	4618      	mov	r0, r3
 8012788:	46bd      	mov	sp, r7
 801278a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801278e:	4770      	bx	lr

08012790 <_kill>:

int _kill(int pid, int sig)
{
 8012790:	b580      	push	{r7, lr}
 8012792:	b082      	sub	sp, #8
 8012794:	af00      	add	r7, sp, #0
 8012796:	6078      	str	r0, [r7, #4]
 8012798:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 801279a:	f00a fa2f 	bl	801cbfc <__errno>
 801279e:	4603      	mov	r3, r0
 80127a0:	2216      	movs	r2, #22
 80127a2:	601a      	str	r2, [r3, #0]
  return -1;
 80127a4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127a8:	4618      	mov	r0, r3
 80127aa:	3708      	adds	r7, #8
 80127ac:	46bd      	mov	sp, r7
 80127ae:	bd80      	pop	{r7, pc}

080127b0 <_exit>:

void _exit (int status)
{
 80127b0:	b580      	push	{r7, lr}
 80127b2:	b082      	sub	sp, #8
 80127b4:	af00      	add	r7, sp, #0
 80127b6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80127b8:	f04f 31ff 	mov.w	r1, #4294967295
 80127bc:	6878      	ldr	r0, [r7, #4]
 80127be:	f7ff ffe7 	bl	8012790 <_kill>
  while (1) {}    /* Make sure we hang here */
 80127c2:	bf00      	nop
 80127c4:	e7fd      	b.n	80127c2 <_exit+0x12>

080127c6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80127c6:	b580      	push	{r7, lr}
 80127c8:	b086      	sub	sp, #24
 80127ca:	af00      	add	r7, sp, #0
 80127cc:	60f8      	str	r0, [r7, #12]
 80127ce:	60b9      	str	r1, [r7, #8]
 80127d0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127d2:	2300      	movs	r3, #0
 80127d4:	617b      	str	r3, [r7, #20]
 80127d6:	e00a      	b.n	80127ee <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80127d8:	f3af 8000 	nop.w
 80127dc:	4601      	mov	r1, r0
 80127de:	68bb      	ldr	r3, [r7, #8]
 80127e0:	1c5a      	adds	r2, r3, #1
 80127e2:	60ba      	str	r2, [r7, #8]
 80127e4:	b2ca      	uxtb	r2, r1
 80127e6:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80127e8:	697b      	ldr	r3, [r7, #20]
 80127ea:	3301      	adds	r3, #1
 80127ec:	617b      	str	r3, [r7, #20]
 80127ee:	697a      	ldr	r2, [r7, #20]
 80127f0:	687b      	ldr	r3, [r7, #4]
 80127f2:	429a      	cmp	r2, r3
 80127f4:	dbf0      	blt.n	80127d8 <_read+0x12>
  }

  return len;
 80127f6:	687b      	ldr	r3, [r7, #4]
}
 80127f8:	4618      	mov	r0, r3
 80127fa:	3718      	adds	r7, #24
 80127fc:	46bd      	mov	sp, r7
 80127fe:	bd80      	pop	{r7, pc}

08012800 <_close>:
  }
  return len;
}

int _close(int file)
{
 8012800:	b480      	push	{r7}
 8012802:	b083      	sub	sp, #12
 8012804:	af00      	add	r7, sp, #0
 8012806:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8012808:	f04f 33ff 	mov.w	r3, #4294967295
}
 801280c:	4618      	mov	r0, r3
 801280e:	370c      	adds	r7, #12
 8012810:	46bd      	mov	sp, r7
 8012812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012816:	4770      	bx	lr

08012818 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8012818:	b480      	push	{r7}
 801281a:	b083      	sub	sp, #12
 801281c:	af00      	add	r7, sp, #0
 801281e:	6078      	str	r0, [r7, #4]
 8012820:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012822:	683b      	ldr	r3, [r7, #0]
 8012824:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8012828:	605a      	str	r2, [r3, #4]
  return 0;
 801282a:	2300      	movs	r3, #0
}
 801282c:	4618      	mov	r0, r3
 801282e:	370c      	adds	r7, #12
 8012830:	46bd      	mov	sp, r7
 8012832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012836:	4770      	bx	lr

08012838 <_isatty>:

int _isatty(int file)
{
 8012838:	b480      	push	{r7}
 801283a:	b083      	sub	sp, #12
 801283c:	af00      	add	r7, sp, #0
 801283e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012840:	2301      	movs	r3, #1
}
 8012842:	4618      	mov	r0, r3
 8012844:	370c      	adds	r7, #12
 8012846:	46bd      	mov	sp, r7
 8012848:	f85d 7b04 	ldr.w	r7, [sp], #4
 801284c:	4770      	bx	lr

0801284e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 801284e:	b480      	push	{r7}
 8012850:	b085      	sub	sp, #20
 8012852:	af00      	add	r7, sp, #0
 8012854:	60f8      	str	r0, [r7, #12]
 8012856:	60b9      	str	r1, [r7, #8]
 8012858:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801285a:	2300      	movs	r3, #0
}
 801285c:	4618      	mov	r0, r3
 801285e:	3714      	adds	r7, #20
 8012860:	46bd      	mov	sp, r7
 8012862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012866:	4770      	bx	lr

08012868 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8012868:	b580      	push	{r7, lr}
 801286a:	b086      	sub	sp, #24
 801286c:	af00      	add	r7, sp, #0
 801286e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8012870:	4a14      	ldr	r2, [pc, #80]	@ (80128c4 <_sbrk+0x5c>)
 8012872:	4b15      	ldr	r3, [pc, #84]	@ (80128c8 <_sbrk+0x60>)
 8012874:	1ad3      	subs	r3, r2, r3
 8012876:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8012878:	697b      	ldr	r3, [r7, #20]
 801287a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 801287c:	4b13      	ldr	r3, [pc, #76]	@ (80128cc <_sbrk+0x64>)
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	2b00      	cmp	r3, #0
 8012882:	d102      	bne.n	801288a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8012884:	4b11      	ldr	r3, [pc, #68]	@ (80128cc <_sbrk+0x64>)
 8012886:	4a12      	ldr	r2, [pc, #72]	@ (80128d0 <_sbrk+0x68>)
 8012888:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 801288a:	4b10      	ldr	r3, [pc, #64]	@ (80128cc <_sbrk+0x64>)
 801288c:	681a      	ldr	r2, [r3, #0]
 801288e:	687b      	ldr	r3, [r7, #4]
 8012890:	4413      	add	r3, r2
 8012892:	693a      	ldr	r2, [r7, #16]
 8012894:	429a      	cmp	r2, r3
 8012896:	d207      	bcs.n	80128a8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8012898:	f00a f9b0 	bl	801cbfc <__errno>
 801289c:	4603      	mov	r3, r0
 801289e:	220c      	movs	r2, #12
 80128a0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80128a2:	f04f 33ff 	mov.w	r3, #4294967295
 80128a6:	e009      	b.n	80128bc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80128a8:	4b08      	ldr	r3, [pc, #32]	@ (80128cc <_sbrk+0x64>)
 80128aa:	681b      	ldr	r3, [r3, #0]
 80128ac:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80128ae:	4b07      	ldr	r3, [pc, #28]	@ (80128cc <_sbrk+0x64>)
 80128b0:	681a      	ldr	r2, [r3, #0]
 80128b2:	687b      	ldr	r3, [r7, #4]
 80128b4:	4413      	add	r3, r2
 80128b6:	4a05      	ldr	r2, [pc, #20]	@ (80128cc <_sbrk+0x64>)
 80128b8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80128ba:	68fb      	ldr	r3, [r7, #12]
}
 80128bc:	4618      	mov	r0, r3
 80128be:	3718      	adds	r7, #24
 80128c0:	46bd      	mov	sp, r7
 80128c2:	bd80      	pop	{r7, pc}
 80128c4:	20008000 	.word	0x20008000
 80128c8:	00001000 	.word	0x00001000
 80128cc:	20000398 	.word	0x20000398
 80128d0:	200006b8 	.word	0x200006b8

080128d4 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80128d4:	b480      	push	{r7}
 80128d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80128d8:	4b07      	ldr	r3, [pc, #28]	@ (80128f8 <SystemInit+0x24>)
 80128da:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80128de:	4a06      	ldr	r2, [pc, #24]	@ (80128f8 <SystemInit+0x24>)
 80128e0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80128e4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 80128e8:	4b03      	ldr	r3, [pc, #12]	@ (80128f8 <SystemInit+0x24>)
 80128ea:	4a04      	ldr	r2, [pc, #16]	@ (80128fc <SystemInit+0x28>)
 80128ec:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 80128ee:	bf00      	nop
 80128f0:	46bd      	mov	sp, r7
 80128f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80128f6:	4770      	bx	lr
 80128f8:	e000ed00 	.word	0xe000ed00
 80128fc:	08011000 	.word	0x08011000

08012900 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012900:	b580      	push	{r7, lr}
 8012902:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012904:	4b21      	ldr	r3, [pc, #132]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012906:	4a22      	ldr	r2, [pc, #136]	@ (8012990 <MX_LPUART1_UART_Init+0x90>)
 8012908:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 801290a:	4b20      	ldr	r3, [pc, #128]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 801290c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8012910:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012912:	4b1e      	ldr	r3, [pc, #120]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012914:	2200      	movs	r2, #0
 8012916:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8012918:	4b1c      	ldr	r3, [pc, #112]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 801291a:	2200      	movs	r2, #0
 801291c:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 801291e:	4b1b      	ldr	r3, [pc, #108]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012920:	2200      	movs	r2, #0
 8012922:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8012924:	4b19      	ldr	r3, [pc, #100]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012926:	220c      	movs	r2, #12
 8012928:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801292a:	4b18      	ldr	r3, [pc, #96]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 801292c:	2200      	movs	r2, #0
 801292e:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012930:	4b16      	ldr	r3, [pc, #88]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012932:	2200      	movs	r2, #0
 8012934:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8012936:	4b15      	ldr	r3, [pc, #84]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012938:	2200      	movs	r2, #0
 801293a:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 801293c:	4b13      	ldr	r3, [pc, #76]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 801293e:	2200      	movs	r2, #0
 8012940:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8012942:	4812      	ldr	r0, [pc, #72]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012944:	f006 f928 	bl	8018b98 <HAL_UART_Init>
 8012948:	4603      	mov	r3, r0
 801294a:	2b00      	cmp	r3, #0
 801294c:	d001      	beq.n	8012952 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 801294e:	f7ff fdab 	bl	80124a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012952:	2100      	movs	r1, #0
 8012954:	480d      	ldr	r0, [pc, #52]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012956:	f008 fb5f 	bl	801b018 <HAL_UARTEx_SetTxFifoThreshold>
 801295a:	4603      	mov	r3, r0
 801295c:	2b00      	cmp	r3, #0
 801295e:	d001      	beq.n	8012964 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 8012960:	f7ff fda2 	bl	80124a8 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012964:	2100      	movs	r1, #0
 8012966:	4809      	ldr	r0, [pc, #36]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012968:	f008 fbda 	bl	801b120 <HAL_UARTEx_SetRxFifoThreshold>
 801296c:	4603      	mov	r3, r0
 801296e:	2b00      	cmp	r3, #0
 8012970:	d001      	beq.n	8012976 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 8012972:	f7ff fd99 	bl	80124a8 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8012976:	4805      	ldr	r0, [pc, #20]	@ (801298c <MX_LPUART1_UART_Init+0x8c>)
 8012978:	f008 faec 	bl	801af54 <HAL_UARTEx_DisableFifoMode>
 801297c:	4603      	mov	r3, r0
 801297e:	2b00      	cmp	r3, #0
 8012980:	d001      	beq.n	8012986 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 8012982:	f7ff fd91 	bl	80124a8 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8012986:	bf00      	nop
 8012988:	bd80      	pop	{r7, pc}
 801298a:	bf00      	nop
 801298c:	2000039c 	.word	0x2000039c
 8012990:	40008000 	.word	0x40008000

08012994 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8012994:	b580      	push	{r7, lr}
 8012996:	b09a      	sub	sp, #104	@ 0x68
 8012998:	af00      	add	r7, sp, #0
 801299a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 801299c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80129a0:	2200      	movs	r2, #0
 80129a2:	601a      	str	r2, [r3, #0]
 80129a4:	605a      	str	r2, [r3, #4]
 80129a6:	609a      	str	r2, [r3, #8]
 80129a8:	60da      	str	r2, [r3, #12]
 80129aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80129ac:	f107 0310 	add.w	r3, r7, #16
 80129b0:	2244      	movs	r2, #68	@ 0x44
 80129b2:	2100      	movs	r1, #0
 80129b4:	4618      	mov	r0, r3
 80129b6:	f00a f867 	bl	801ca88 <memset>
  if(uartHandle->Instance==LPUART1)
 80129ba:	687b      	ldr	r3, [r7, #4]
 80129bc:	681b      	ldr	r3, [r3, #0]
 80129be:	4a23      	ldr	r2, [pc, #140]	@ (8012a4c <HAL_UART_MspInit+0xb8>)
 80129c0:	4293      	cmp	r3, r2
 80129c2:	d13e      	bne.n	8012a42 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80129c4:	2320      	movs	r3, #32
 80129c6:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80129c8:	2300      	movs	r3, #0
 80129ca:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80129cc:	f107 0310 	add.w	r3, r7, #16
 80129d0:	4618      	mov	r0, r3
 80129d2:	f004 ff41 	bl	8017858 <HAL_RCCEx_PeriphCLKConfig>
 80129d6:	4603      	mov	r3, r0
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d001      	beq.n	80129e0 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80129dc:	f7ff fd64 	bl	80124a8 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80129e0:	4b1b      	ldr	r3, [pc, #108]	@ (8012a50 <HAL_UART_MspInit+0xbc>)
 80129e2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80129e4:	4a1a      	ldr	r2, [pc, #104]	@ (8012a50 <HAL_UART_MspInit+0xbc>)
 80129e6:	f043 0301 	orr.w	r3, r3, #1
 80129ea:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80129ec:	4b18      	ldr	r3, [pc, #96]	@ (8012a50 <HAL_UART_MspInit+0xbc>)
 80129ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80129f0:	f003 0301 	and.w	r3, r3, #1
 80129f4:	60fb      	str	r3, [r7, #12]
 80129f6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80129f8:	4b15      	ldr	r3, [pc, #84]	@ (8012a50 <HAL_UART_MspInit+0xbc>)
 80129fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80129fc:	4a14      	ldr	r2, [pc, #80]	@ (8012a50 <HAL_UART_MspInit+0xbc>)
 80129fe:	f043 0301 	orr.w	r3, r3, #1
 8012a02:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012a04:	4b12      	ldr	r3, [pc, #72]	@ (8012a50 <HAL_UART_MspInit+0xbc>)
 8012a06:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012a08:	f003 0301 	and.w	r3, r3, #1
 8012a0c:	60bb      	str	r3, [r7, #8]
 8012a0e:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8012a10:	230c      	movs	r3, #12
 8012a12:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012a14:	2302      	movs	r3, #2
 8012a16:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8012a18:	2300      	movs	r3, #0
 8012a1a:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012a1c:	2300      	movs	r3, #0
 8012a1e:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8012a20:	230c      	movs	r3, #12
 8012a22:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012a24:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8012a28:	4619      	mov	r1, r3
 8012a2a:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012a2e:	f003 facd 	bl	8015fcc <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8012a32:	2200      	movs	r2, #0
 8012a34:	2105      	movs	r1, #5
 8012a36:	205b      	movs	r0, #91	@ 0x5b
 8012a38:	f002 f922 	bl	8014c80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8012a3c:	205b      	movs	r0, #91	@ 0x5b
 8012a3e:	f002 f949 	bl	8014cd4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8012a42:	bf00      	nop
 8012a44:	3768      	adds	r7, #104	@ 0x68
 8012a46:	46bd      	mov	sp, r7
 8012a48:	bd80      	pop	{r7, pc}
 8012a4a:	bf00      	nop
 8012a4c:	40008000 	.word	0x40008000
 8012a50:	40021000 	.word	0x40021000

08012a54 <Reset_Handler>:
 8012a54:	480d      	ldr	r0, [pc, #52]	@ (8012a8c <LoopForever+0x2>)
 8012a56:	4685      	mov	sp, r0
 8012a58:	f7ff ff3c 	bl	80128d4 <SystemInit>
 8012a5c:	480c      	ldr	r0, [pc, #48]	@ (8012a90 <LoopForever+0x6>)
 8012a5e:	490d      	ldr	r1, [pc, #52]	@ (8012a94 <LoopForever+0xa>)
 8012a60:	4a0d      	ldr	r2, [pc, #52]	@ (8012a98 <LoopForever+0xe>)
 8012a62:	2300      	movs	r3, #0
 8012a64:	e002      	b.n	8012a6c <LoopCopyDataInit>

08012a66 <CopyDataInit>:
 8012a66:	58d4      	ldr	r4, [r2, r3]
 8012a68:	50c4      	str	r4, [r0, r3]
 8012a6a:	3304      	adds	r3, #4

08012a6c <LoopCopyDataInit>:
 8012a6c:	18c4      	adds	r4, r0, r3
 8012a6e:	428c      	cmp	r4, r1
 8012a70:	d3f9      	bcc.n	8012a66 <CopyDataInit>
 8012a72:	4a0a      	ldr	r2, [pc, #40]	@ (8012a9c <LoopForever+0x12>)
 8012a74:	4c0a      	ldr	r4, [pc, #40]	@ (8012aa0 <LoopForever+0x16>)
 8012a76:	2300      	movs	r3, #0
 8012a78:	e001      	b.n	8012a7e <LoopFillZerobss>

08012a7a <FillZerobss>:
 8012a7a:	6013      	str	r3, [r2, #0]
 8012a7c:	3204      	adds	r2, #4

08012a7e <LoopFillZerobss>:
 8012a7e:	42a2      	cmp	r2, r4
 8012a80:	d3fb      	bcc.n	8012a7a <FillZerobss>
 8012a82:	f00a f8c1 	bl	801cc08 <__libc_init_array>
 8012a86:	f7ff fc95 	bl	80123b4 <main>

08012a8a <LoopForever>:
 8012a8a:	e7fe      	b.n	8012a8a <LoopForever>
 8012a8c:	20008000 	.word	0x20008000
 8012a90:	20000000 	.word	0x20000000
 8012a94:	2000008c 	.word	0x2000008c
 8012a98:	0801e54c 	.word	0x0801e54c
 8012a9c:	2000008c 	.word	0x2000008c
 8012aa0:	200006b4 	.word	0x200006b4

08012aa4 <COMP1_2_3_IRQHandler>:
 8012aa4:	e7fe      	b.n	8012aa4 <COMP1_2_3_IRQHandler>

08012aa6 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8012aa6:	b580      	push	{r7, lr}
 8012aa8:	b082      	sub	sp, #8
 8012aaa:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8012aac:	2300      	movs	r3, #0
 8012aae:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8012ab0:	2003      	movs	r0, #3
 8012ab2:	f002 f8c5 	bl	8014c40 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8012ab6:	200f      	movs	r0, #15
 8012ab8:	f7ff fdb2 	bl	8012620 <HAL_InitTick>
 8012abc:	4603      	mov	r3, r0
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d002      	beq.n	8012ac8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8012ac2:	2301      	movs	r3, #1
 8012ac4:	71fb      	strb	r3, [r7, #7]
 8012ac6:	e001      	b.n	8012acc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8012ac8:	f7ff fd80 	bl	80125cc <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012acc:	79fb      	ldrb	r3, [r7, #7]

}
 8012ace:	4618      	mov	r0, r3
 8012ad0:	3708      	adds	r7, #8
 8012ad2:	46bd      	mov	sp, r7
 8012ad4:	bd80      	pop	{r7, pc}
	...

08012ad8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8012ad8:	b480      	push	{r7}
 8012ada:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012adc:	4b05      	ldr	r3, [pc, #20]	@ (8012af4 <HAL_IncTick+0x1c>)
 8012ade:	681a      	ldr	r2, [r3, #0]
 8012ae0:	4b05      	ldr	r3, [pc, #20]	@ (8012af8 <HAL_IncTick+0x20>)
 8012ae2:	681b      	ldr	r3, [r3, #0]
 8012ae4:	4413      	add	r3, r2
 8012ae6:	4a03      	ldr	r2, [pc, #12]	@ (8012af4 <HAL_IncTick+0x1c>)
 8012ae8:	6013      	str	r3, [r2, #0]
}
 8012aea:	bf00      	nop
 8012aec:	46bd      	mov	sp, r7
 8012aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012af2:	4770      	bx	lr
 8012af4:	20000430 	.word	0x20000430
 8012af8:	20000008 	.word	0x20000008

08012afc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012afc:	b480      	push	{r7}
 8012afe:	af00      	add	r7, sp, #0
  return uwTick;
 8012b00:	4b03      	ldr	r3, [pc, #12]	@ (8012b10 <HAL_GetTick+0x14>)
 8012b02:	681b      	ldr	r3, [r3, #0]
}
 8012b04:	4618      	mov	r0, r3
 8012b06:	46bd      	mov	sp, r7
 8012b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b0c:	4770      	bx	lr
 8012b0e:	bf00      	nop
 8012b10:	20000430 	.word	0x20000430

08012b14 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8012b14:	b480      	push	{r7}
 8012b16:	b083      	sub	sp, #12
 8012b18:	af00      	add	r7, sp, #0
 8012b1a:	6078      	str	r0, [r7, #4]
 8012b1c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8012b1e:	687b      	ldr	r3, [r7, #4]
 8012b20:	689b      	ldr	r3, [r3, #8]
 8012b22:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8012b26:	683b      	ldr	r3, [r7, #0]
 8012b28:	431a      	orrs	r2, r3
 8012b2a:	687b      	ldr	r3, [r7, #4]
 8012b2c:	609a      	str	r2, [r3, #8]
}
 8012b2e:	bf00      	nop
 8012b30:	370c      	adds	r7, #12
 8012b32:	46bd      	mov	sp, r7
 8012b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b38:	4770      	bx	lr

08012b3a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8012b3a:	b480      	push	{r7}
 8012b3c:	b083      	sub	sp, #12
 8012b3e:	af00      	add	r7, sp, #0
 8012b40:	6078      	str	r0, [r7, #4]
 8012b42:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8012b44:	687b      	ldr	r3, [r7, #4]
 8012b46:	689b      	ldr	r3, [r3, #8]
 8012b48:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8012b4c:	683b      	ldr	r3, [r7, #0]
 8012b4e:	431a      	orrs	r2, r3
 8012b50:	687b      	ldr	r3, [r7, #4]
 8012b52:	609a      	str	r2, [r3, #8]
}
 8012b54:	bf00      	nop
 8012b56:	370c      	adds	r7, #12
 8012b58:	46bd      	mov	sp, r7
 8012b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b5e:	4770      	bx	lr

08012b60 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012b60:	b480      	push	{r7}
 8012b62:	b083      	sub	sp, #12
 8012b64:	af00      	add	r7, sp, #0
 8012b66:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	689b      	ldr	r3, [r3, #8]
 8012b6c:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 8012b70:	4618      	mov	r0, r3
 8012b72:	370c      	adds	r7, #12
 8012b74:	46bd      	mov	sp, r7
 8012b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b7a:	4770      	bx	lr

08012b7c <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
 8012b7c:	b480      	push	{r7}
 8012b7e:	b083      	sub	sp, #12
 8012b80:	af00      	add	r7, sp, #0
 8012b82:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8012b84:	687b      	ldr	r3, [r7, #4]
 8012b86:	68db      	ldr	r3, [r3, #12]
 8012b88:	f003 0318 	and.w	r3, r3, #24
}
 8012b8c:	4618      	mov	r0, r3
 8012b8e:	370c      	adds	r7, #12
 8012b90:	46bd      	mov	sp, r7
 8012b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b96:	4770      	bx	lr

08012b98 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b087      	sub	sp, #28
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	60f8      	str	r0, [r7, #12]
 8012ba0:	60b9      	str	r1, [r7, #8]
 8012ba2:	607a      	str	r2, [r7, #4]
 8012ba4:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012ba6:	68fb      	ldr	r3, [r7, #12]
 8012ba8:	3360      	adds	r3, #96	@ 0x60
 8012baa:	461a      	mov	r2, r3
 8012bac:	68bb      	ldr	r3, [r7, #8]
 8012bae:	009b      	lsls	r3, r3, #2
 8012bb0:	4413      	add	r3, r2
 8012bb2:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	681a      	ldr	r2, [r3, #0]
 8012bb8:	4b08      	ldr	r3, [pc, #32]	@ (8012bdc <LL_ADC_SetOffset+0x44>)
 8012bba:	4013      	ands	r3, r2
 8012bbc:	687a      	ldr	r2, [r7, #4]
 8012bbe:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 8012bc2:	683a      	ldr	r2, [r7, #0]
 8012bc4:	430a      	orrs	r2, r1
 8012bc6:	4313      	orrs	r3, r2
 8012bc8:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 8012bcc:	697b      	ldr	r3, [r7, #20]
 8012bce:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 8012bd0:	bf00      	nop
 8012bd2:	371c      	adds	r7, #28
 8012bd4:	46bd      	mov	sp, r7
 8012bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bda:	4770      	bx	lr
 8012bdc:	03fff000 	.word	0x03fff000

08012be0 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 8012be0:	b480      	push	{r7}
 8012be2:	b085      	sub	sp, #20
 8012be4:	af00      	add	r7, sp, #0
 8012be6:	6078      	str	r0, [r7, #4]
 8012be8:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012bea:	687b      	ldr	r3, [r7, #4]
 8012bec:	3360      	adds	r3, #96	@ 0x60
 8012bee:	461a      	mov	r2, r3
 8012bf0:	683b      	ldr	r3, [r7, #0]
 8012bf2:	009b      	lsls	r3, r3, #2
 8012bf4:	4413      	add	r3, r2
 8012bf6:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8012bf8:	68fb      	ldr	r3, [r7, #12]
 8012bfa:	681b      	ldr	r3, [r3, #0]
 8012bfc:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 8012c00:	4618      	mov	r0, r3
 8012c02:	3714      	adds	r7, #20
 8012c04:	46bd      	mov	sp, r7
 8012c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0a:	4770      	bx	lr

08012c0c <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8012c0c:	b480      	push	{r7}
 8012c0e:	b087      	sub	sp, #28
 8012c10:	af00      	add	r7, sp, #0
 8012c12:	60f8      	str	r0, [r7, #12]
 8012c14:	60b9      	str	r1, [r7, #8]
 8012c16:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	3360      	adds	r3, #96	@ 0x60
 8012c1c:	461a      	mov	r2, r3
 8012c1e:	68bb      	ldr	r3, [r7, #8]
 8012c20:	009b      	lsls	r3, r3, #2
 8012c22:	4413      	add	r3, r2
 8012c24:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012c26:	697b      	ldr	r3, [r7, #20]
 8012c28:	681b      	ldr	r3, [r3, #0]
 8012c2a:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012c2e:	687b      	ldr	r3, [r7, #4]
 8012c30:	431a      	orrs	r2, r3
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8012c36:	bf00      	nop
 8012c38:	371c      	adds	r7, #28
 8012c3a:	46bd      	mov	sp, r7
 8012c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c40:	4770      	bx	lr

08012c42 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8012c42:	b480      	push	{r7}
 8012c44:	b087      	sub	sp, #28
 8012c46:	af00      	add	r7, sp, #0
 8012c48:	60f8      	str	r0, [r7, #12]
 8012c4a:	60b9      	str	r1, [r7, #8]
 8012c4c:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012c4e:	68fb      	ldr	r3, [r7, #12]
 8012c50:	3360      	adds	r3, #96	@ 0x60
 8012c52:	461a      	mov	r2, r3
 8012c54:	68bb      	ldr	r3, [r7, #8]
 8012c56:	009b      	lsls	r3, r3, #2
 8012c58:	4413      	add	r3, r2
 8012c5a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012c5c:	697b      	ldr	r3, [r7, #20]
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8012c64:	687b      	ldr	r3, [r7, #4]
 8012c66:	431a      	orrs	r2, r3
 8012c68:	697b      	ldr	r3, [r7, #20]
 8012c6a:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8012c6c:	bf00      	nop
 8012c6e:	371c      	adds	r7, #28
 8012c70:	46bd      	mov	sp, r7
 8012c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c76:	4770      	bx	lr

08012c78 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8012c78:	b480      	push	{r7}
 8012c7a:	b087      	sub	sp, #28
 8012c7c:	af00      	add	r7, sp, #0
 8012c7e:	60f8      	str	r0, [r7, #12]
 8012c80:	60b9      	str	r1, [r7, #8]
 8012c82:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	3360      	adds	r3, #96	@ 0x60
 8012c88:	461a      	mov	r2, r3
 8012c8a:	68bb      	ldr	r3, [r7, #8]
 8012c8c:	009b      	lsls	r3, r3, #2
 8012c8e:	4413      	add	r3, r2
 8012c90:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8012c92:	697b      	ldr	r3, [r7, #20]
 8012c94:	681b      	ldr	r3, [r3, #0]
 8012c96:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8012c9a:	687b      	ldr	r3, [r7, #4]
 8012c9c:	431a      	orrs	r2, r3
 8012c9e:	697b      	ldr	r3, [r7, #20]
 8012ca0:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8012ca2:	bf00      	nop
 8012ca4:	371c      	adds	r7, #28
 8012ca6:	46bd      	mov	sp, r7
 8012ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cac:	4770      	bx	lr

08012cae <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8012cae:	b480      	push	{r7}
 8012cb0:	b083      	sub	sp, #12
 8012cb2:	af00      	add	r7, sp, #0
 8012cb4:	6078      	str	r0, [r7, #4]
 8012cb6:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	695b      	ldr	r3, [r3, #20]
 8012cbc:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8012cc0:	683b      	ldr	r3, [r7, #0]
 8012cc2:	431a      	orrs	r2, r3
 8012cc4:	687b      	ldr	r3, [r7, #4]
 8012cc6:	615a      	str	r2, [r3, #20]
}
 8012cc8:	bf00      	nop
 8012cca:	370c      	adds	r7, #12
 8012ccc:	46bd      	mov	sp, r7
 8012cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd2:	4770      	bx	lr

08012cd4 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8012cd4:	b480      	push	{r7}
 8012cd6:	b083      	sub	sp, #12
 8012cd8:	af00      	add	r7, sp, #0
 8012cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	68db      	ldr	r3, [r3, #12]
 8012ce0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012ce4:	2b00      	cmp	r3, #0
 8012ce6:	d101      	bne.n	8012cec <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8012ce8:	2301      	movs	r3, #1
 8012cea:	e000      	b.n	8012cee <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8012cec:	2300      	movs	r3, #0
}
 8012cee:	4618      	mov	r0, r3
 8012cf0:	370c      	adds	r7, #12
 8012cf2:	46bd      	mov	sp, r7
 8012cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cf8:	4770      	bx	lr

08012cfa <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8012cfa:	b480      	push	{r7}
 8012cfc:	b087      	sub	sp, #28
 8012cfe:	af00      	add	r7, sp, #0
 8012d00:	60f8      	str	r0, [r7, #12]
 8012d02:	60b9      	str	r1, [r7, #8]
 8012d04:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8012d06:	68fb      	ldr	r3, [r7, #12]
 8012d08:	3330      	adds	r3, #48	@ 0x30
 8012d0a:	461a      	mov	r2, r3
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	0a1b      	lsrs	r3, r3, #8
 8012d10:	009b      	lsls	r3, r3, #2
 8012d12:	f003 030c 	and.w	r3, r3, #12
 8012d16:	4413      	add	r3, r2
 8012d18:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8012d1a:	697b      	ldr	r3, [r7, #20]
 8012d1c:	681a      	ldr	r2, [r3, #0]
 8012d1e:	68bb      	ldr	r3, [r7, #8]
 8012d20:	f003 031f 	and.w	r3, r3, #31
 8012d24:	211f      	movs	r1, #31
 8012d26:	fa01 f303 	lsl.w	r3, r1, r3
 8012d2a:	43db      	mvns	r3, r3
 8012d2c:	401a      	ands	r2, r3
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	0e9b      	lsrs	r3, r3, #26
 8012d32:	f003 011f 	and.w	r1, r3, #31
 8012d36:	68bb      	ldr	r3, [r7, #8]
 8012d38:	f003 031f 	and.w	r3, r3, #31
 8012d3c:	fa01 f303 	lsl.w	r3, r1, r3
 8012d40:	431a      	orrs	r2, r3
 8012d42:	697b      	ldr	r3, [r7, #20]
 8012d44:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8012d46:	bf00      	nop
 8012d48:	371c      	adds	r7, #28
 8012d4a:	46bd      	mov	sp, r7
 8012d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d50:	4770      	bx	lr

08012d52 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8012d52:	b480      	push	{r7}
 8012d54:	b083      	sub	sp, #12
 8012d56:	af00      	add	r7, sp, #0
 8012d58:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8012d5a:	687b      	ldr	r3, [r7, #4]
 8012d5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012d5e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8012d62:	2b00      	cmp	r3, #0
 8012d64:	d101      	bne.n	8012d6a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8012d66:	2301      	movs	r3, #1
 8012d68:	e000      	b.n	8012d6c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8012d6a:	2300      	movs	r3, #0
}
 8012d6c:	4618      	mov	r0, r3
 8012d6e:	370c      	adds	r7, #12
 8012d70:	46bd      	mov	sp, r7
 8012d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d76:	4770      	bx	lr

08012d78 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8012d78:	b480      	push	{r7}
 8012d7a:	b087      	sub	sp, #28
 8012d7c:	af00      	add	r7, sp, #0
 8012d7e:	60f8      	str	r0, [r7, #12]
 8012d80:	60b9      	str	r1, [r7, #8]
 8012d82:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8012d84:	68fb      	ldr	r3, [r7, #12]
 8012d86:	3314      	adds	r3, #20
 8012d88:	461a      	mov	r2, r3
 8012d8a:	68bb      	ldr	r3, [r7, #8]
 8012d8c:	0e5b      	lsrs	r3, r3, #25
 8012d8e:	009b      	lsls	r3, r3, #2
 8012d90:	f003 0304 	and.w	r3, r3, #4
 8012d94:	4413      	add	r3, r2
 8012d96:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8012d98:	697b      	ldr	r3, [r7, #20]
 8012d9a:	681a      	ldr	r2, [r3, #0]
 8012d9c:	68bb      	ldr	r3, [r7, #8]
 8012d9e:	0d1b      	lsrs	r3, r3, #20
 8012da0:	f003 031f 	and.w	r3, r3, #31
 8012da4:	2107      	movs	r1, #7
 8012da6:	fa01 f303 	lsl.w	r3, r1, r3
 8012daa:	43db      	mvns	r3, r3
 8012dac:	401a      	ands	r2, r3
 8012dae:	68bb      	ldr	r3, [r7, #8]
 8012db0:	0d1b      	lsrs	r3, r3, #20
 8012db2:	f003 031f 	and.w	r3, r3, #31
 8012db6:	6879      	ldr	r1, [r7, #4]
 8012db8:	fa01 f303 	lsl.w	r3, r1, r3
 8012dbc:	431a      	orrs	r2, r3
 8012dbe:	697b      	ldr	r3, [r7, #20]
 8012dc0:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8012dc2:	bf00      	nop
 8012dc4:	371c      	adds	r7, #28
 8012dc6:	46bd      	mov	sp, r7
 8012dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dcc:	4770      	bx	lr
	...

08012dd0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8012dd0:	b480      	push	{r7}
 8012dd2:	b085      	sub	sp, #20
 8012dd4:	af00      	add	r7, sp, #0
 8012dd6:	60f8      	str	r0, [r7, #12]
 8012dd8:	60b9      	str	r1, [r7, #8]
 8012dda:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8012ddc:	68fb      	ldr	r3, [r7, #12]
 8012dde:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8012de2:	68bb      	ldr	r3, [r7, #8]
 8012de4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012de8:	43db      	mvns	r3, r3
 8012dea:	401a      	ands	r2, r3
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	f003 0318 	and.w	r3, r3, #24
 8012df2:	4908      	ldr	r1, [pc, #32]	@ (8012e14 <LL_ADC_SetChannelSingleDiff+0x44>)
 8012df4:	40d9      	lsrs	r1, r3
 8012df6:	68bb      	ldr	r3, [r7, #8]
 8012df8:	400b      	ands	r3, r1
 8012dfa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8012dfe:	431a      	orrs	r2, r3
 8012e00:	68fb      	ldr	r3, [r7, #12]
 8012e02:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8012e06:	bf00      	nop
 8012e08:	3714      	adds	r7, #20
 8012e0a:	46bd      	mov	sp, r7
 8012e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e10:	4770      	bx	lr
 8012e12:	bf00      	nop
 8012e14:	0007ffff 	.word	0x0007ffff

08012e18 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012e18:	b480      	push	{r7}
 8012e1a:	b083      	sub	sp, #12
 8012e1c:	af00      	add	r7, sp, #0
 8012e1e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8012e20:	687b      	ldr	r3, [r7, #4]
 8012e22:	689b      	ldr	r3, [r3, #8]
 8012e24:	f003 031f 	and.w	r3, r3, #31
}
 8012e28:	4618      	mov	r0, r3
 8012e2a:	370c      	adds	r7, #12
 8012e2c:	46bd      	mov	sp, r7
 8012e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e32:	4770      	bx	lr

08012e34 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8012e34:	b480      	push	{r7}
 8012e36:	b083      	sub	sp, #12
 8012e38:	af00      	add	r7, sp, #0
 8012e3a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8012e3c:	687b      	ldr	r3, [r7, #4]
 8012e3e:	689b      	ldr	r3, [r3, #8]
 8012e40:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8012e44:	4618      	mov	r0, r3
 8012e46:	370c      	adds	r7, #12
 8012e48:	46bd      	mov	sp, r7
 8012e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e4e:	4770      	bx	lr

08012e50 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8012e50:	b480      	push	{r7}
 8012e52:	b083      	sub	sp, #12
 8012e54:	af00      	add	r7, sp, #0
 8012e56:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8012e58:	687b      	ldr	r3, [r7, #4]
 8012e5a:	689b      	ldr	r3, [r3, #8]
 8012e5c:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8012e60:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8012e64:	687a      	ldr	r2, [r7, #4]
 8012e66:	6093      	str	r3, [r2, #8]
}
 8012e68:	bf00      	nop
 8012e6a:	370c      	adds	r7, #12
 8012e6c:	46bd      	mov	sp, r7
 8012e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e72:	4770      	bx	lr

08012e74 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8012e74:	b480      	push	{r7}
 8012e76:	b083      	sub	sp, #12
 8012e78:	af00      	add	r7, sp, #0
 8012e7a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	689b      	ldr	r3, [r3, #8]
 8012e80:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8012e84:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8012e88:	d101      	bne.n	8012e8e <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8012e8a:	2301      	movs	r3, #1
 8012e8c:	e000      	b.n	8012e90 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8012e8e:	2300      	movs	r3, #0
}
 8012e90:	4618      	mov	r0, r3
 8012e92:	370c      	adds	r7, #12
 8012e94:	46bd      	mov	sp, r7
 8012e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012e9a:	4770      	bx	lr

08012e9c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8012e9c:	b480      	push	{r7}
 8012e9e:	b083      	sub	sp, #12
 8012ea0:	af00      	add	r7, sp, #0
 8012ea2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	689b      	ldr	r3, [r3, #8]
 8012ea8:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8012eac:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8012eb0:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8012eb4:	687b      	ldr	r3, [r7, #4]
 8012eb6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8012eb8:	bf00      	nop
 8012eba:	370c      	adds	r7, #12
 8012ebc:	46bd      	mov	sp, r7
 8012ebe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ec2:	4770      	bx	lr

08012ec4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8012ec4:	b480      	push	{r7}
 8012ec6:	b083      	sub	sp, #12
 8012ec8:	af00      	add	r7, sp, #0
 8012eca:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8012ecc:	687b      	ldr	r3, [r7, #4]
 8012ece:	689b      	ldr	r3, [r3, #8]
 8012ed0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012ed4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8012ed8:	d101      	bne.n	8012ede <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8012eda:	2301      	movs	r3, #1
 8012edc:	e000      	b.n	8012ee0 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8012ede:	2300      	movs	r3, #0
}
 8012ee0:	4618      	mov	r0, r3
 8012ee2:	370c      	adds	r7, #12
 8012ee4:	46bd      	mov	sp, r7
 8012ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012eea:	4770      	bx	lr

08012eec <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8012eec:	b480      	push	{r7}
 8012eee:	b083      	sub	sp, #12
 8012ef0:	af00      	add	r7, sp, #0
 8012ef2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	689b      	ldr	r3, [r3, #8]
 8012ef8:	f003 0301 	and.w	r3, r3, #1
 8012efc:	2b01      	cmp	r3, #1
 8012efe:	d101      	bne.n	8012f04 <LL_ADC_IsEnabled+0x18>
 8012f00:	2301      	movs	r3, #1
 8012f02:	e000      	b.n	8012f06 <LL_ADC_IsEnabled+0x1a>
 8012f04:	2300      	movs	r3, #0
}
 8012f06:	4618      	mov	r0, r3
 8012f08:	370c      	adds	r7, #12
 8012f0a:	46bd      	mov	sp, r7
 8012f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f10:	4770      	bx	lr

08012f12 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8012f12:	b480      	push	{r7}
 8012f14:	b083      	sub	sp, #12
 8012f16:	af00      	add	r7, sp, #0
 8012f18:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8012f1a:	687b      	ldr	r3, [r7, #4]
 8012f1c:	689b      	ldr	r3, [r3, #8]
 8012f1e:	f003 0304 	and.w	r3, r3, #4
 8012f22:	2b04      	cmp	r3, #4
 8012f24:	d101      	bne.n	8012f2a <LL_ADC_REG_IsConversionOngoing+0x18>
 8012f26:	2301      	movs	r3, #1
 8012f28:	e000      	b.n	8012f2c <LL_ADC_REG_IsConversionOngoing+0x1a>
 8012f2a:	2300      	movs	r3, #0
}
 8012f2c:	4618      	mov	r0, r3
 8012f2e:	370c      	adds	r7, #12
 8012f30:	46bd      	mov	sp, r7
 8012f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f36:	4770      	bx	lr

08012f38 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8012f38:	b480      	push	{r7}
 8012f3a:	b083      	sub	sp, #12
 8012f3c:	af00      	add	r7, sp, #0
 8012f3e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8012f40:	687b      	ldr	r3, [r7, #4]
 8012f42:	689b      	ldr	r3, [r3, #8]
 8012f44:	f003 0308 	and.w	r3, r3, #8
 8012f48:	2b08      	cmp	r3, #8
 8012f4a:	d101      	bne.n	8012f50 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8012f4c:	2301      	movs	r3, #1
 8012f4e:	e000      	b.n	8012f52 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8012f50:	2300      	movs	r3, #0
}
 8012f52:	4618      	mov	r0, r3
 8012f54:	370c      	adds	r7, #12
 8012f56:	46bd      	mov	sp, r7
 8012f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f5c:	4770      	bx	lr
	...

08012f60 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8012f60:	b590      	push	{r4, r7, lr}
 8012f62:	b089      	sub	sp, #36	@ 0x24
 8012f64:	af00      	add	r7, sp, #0
 8012f66:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8012f68:	2300      	movs	r3, #0
 8012f6a:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8012f6c:	2300      	movs	r3, #0
 8012f6e:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	2b00      	cmp	r3, #0
 8012f74:	d101      	bne.n	8012f7a <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8012f76:	2301      	movs	r3, #1
 8012f78:	e3a1      	b.n	80136be <HAL_ADC_Init+0x75e>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	681b      	ldr	r3, [r3, #0]
 8012f7e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012f82:	d009      	beq.n	8012f98 <HAL_ADC_Init+0x38>
 8012f84:	687b      	ldr	r3, [r7, #4]
 8012f86:	681b      	ldr	r3, [r3, #0]
 8012f88:	4a8d      	ldr	r2, [pc, #564]	@ (80131c0 <HAL_ADC_Init+0x260>)
 8012f8a:	4293      	cmp	r3, r2
 8012f8c:	d004      	beq.n	8012f98 <HAL_ADC_Init+0x38>
 8012f8e:	f240 119b 	movw	r1, #411	@ 0x19b
 8012f92:	488c      	ldr	r0, [pc, #560]	@ (80131c4 <HAL_ADC_Init+0x264>)
 8012f94:	f7ff fa8e 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8012fa0:	d049      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	685b      	ldr	r3, [r3, #4]
 8012fa6:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8012faa:	d044      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fac:	687b      	ldr	r3, [r7, #4]
 8012fae:	685b      	ldr	r3, [r3, #4]
 8012fb0:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8012fb4:	d03f      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	2b00      	cmp	r3, #0
 8012fbc:	d03b      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fbe:	687b      	ldr	r3, [r7, #4]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8012fc6:	d036      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	685b      	ldr	r3, [r3, #4]
 8012fcc:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8012fd0:	d031      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	685b      	ldr	r3, [r3, #4]
 8012fd6:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8012fda:	d02c      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fdc:	687b      	ldr	r3, [r7, #4]
 8012fde:	685b      	ldr	r3, [r3, #4]
 8012fe0:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8012fe4:	d027      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012fe6:	687b      	ldr	r3, [r7, #4]
 8012fe8:	685b      	ldr	r3, [r3, #4]
 8012fea:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8012fee:	d022      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012ff0:	687b      	ldr	r3, [r7, #4]
 8012ff2:	685b      	ldr	r3, [r3, #4]
 8012ff4:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8012ff8:	d01d      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	685b      	ldr	r3, [r3, #4]
 8012ffe:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8013002:	d018      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8013004:	687b      	ldr	r3, [r7, #4]
 8013006:	685b      	ldr	r3, [r3, #4]
 8013008:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801300c:	d013      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 801300e:	687b      	ldr	r3, [r7, #4]
 8013010:	685b      	ldr	r3, [r3, #4]
 8013012:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8013016:	d00e      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8013018:	687b      	ldr	r3, [r7, #4]
 801301a:	685b      	ldr	r3, [r3, #4]
 801301c:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8013020:	d009      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 8013022:	687b      	ldr	r3, [r7, #4]
 8013024:	685b      	ldr	r3, [r3, #4]
 8013026:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 801302a:	d004      	beq.n	8013036 <HAL_ADC_Init+0xd6>
 801302c:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8013030:	4864      	ldr	r0, [pc, #400]	@ (80131c4 <HAL_ADC_Init+0x264>)
 8013032:	f7ff fa3f 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	689b      	ldr	r3, [r3, #8]
 801303a:	2b00      	cmp	r3, #0
 801303c:	d010      	beq.n	8013060 <HAL_ADC_Init+0x100>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	689b      	ldr	r3, [r3, #8]
 8013042:	2b08      	cmp	r3, #8
 8013044:	d00c      	beq.n	8013060 <HAL_ADC_Init+0x100>
 8013046:	687b      	ldr	r3, [r7, #4]
 8013048:	689b      	ldr	r3, [r3, #8]
 801304a:	2b10      	cmp	r3, #16
 801304c:	d008      	beq.n	8013060 <HAL_ADC_Init+0x100>
 801304e:	687b      	ldr	r3, [r7, #4]
 8013050:	689b      	ldr	r3, [r3, #8]
 8013052:	2b18      	cmp	r3, #24
 8013054:	d004      	beq.n	8013060 <HAL_ADC_Init+0x100>
 8013056:	f240 119d 	movw	r1, #413	@ 0x19d
 801305a:	485a      	ldr	r0, [pc, #360]	@ (80131c4 <HAL_ADC_Init+0x264>)
 801305c:	f7ff fa2a 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	68db      	ldr	r3, [r3, #12]
 8013064:	2b00      	cmp	r3, #0
 8013066:	d009      	beq.n	801307c <HAL_ADC_Init+0x11c>
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	68db      	ldr	r3, [r3, #12]
 801306c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8013070:	d004      	beq.n	801307c <HAL_ADC_Init+0x11c>
 8013072:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8013076:	4853      	ldr	r0, [pc, #332]	@ (80131c4 <HAL_ADC_Init+0x264>)
 8013078:	f7ff fa1c 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	691b      	ldr	r3, [r3, #16]
 8013080:	f244 0209 	movw	r2, #16393	@ 0x4009
 8013084:	4293      	cmp	r3, r2
 8013086:	d904      	bls.n	8013092 <HAL_ADC_Init+0x132>
 8013088:	f240 119f 	movw	r1, #415	@ 0x19f
 801308c:	484d      	ldr	r0, [pc, #308]	@ (80131c4 <HAL_ADC_Init+0x264>)
 801308e:	f7ff fa11 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8013092:	687b      	ldr	r3, [r7, #4]
 8013094:	695b      	ldr	r3, [r3, #20]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d008      	beq.n	80130ac <HAL_ADC_Init+0x14c>
 801309a:	687b      	ldr	r3, [r7, #4]
 801309c:	695b      	ldr	r3, [r3, #20]
 801309e:	2b01      	cmp	r3, #1
 80130a0:	d004      	beq.n	80130ac <HAL_ADC_Init+0x14c>
 80130a2:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 80130a6:	4847      	ldr	r0, [pc, #284]	@ (80131c4 <HAL_ADC_Init+0x264>)
 80130a8:	f7ff fa04 	bl	80124b4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	7f5b      	ldrb	r3, [r3, #29]
 80130b0:	2b00      	cmp	r3, #0
 80130b2:	d008      	beq.n	80130c6 <HAL_ADC_Init+0x166>
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	7f5b      	ldrb	r3, [r3, #29]
 80130b8:	2b01      	cmp	r3, #1
 80130ba:	d004      	beq.n	80130c6 <HAL_ADC_Init+0x166>
 80130bc:	f240 11a1 	movw	r1, #417	@ 0x1a1
 80130c0:	4840      	ldr	r0, [pc, #256]	@ (80131c4 <HAL_ADC_Init+0x264>)
 80130c2:	f7ff f9f7 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 80130c6:	687b      	ldr	r3, [r7, #4]
 80130c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130ca:	2b00      	cmp	r3, #0
 80130cc:	d013      	beq.n	80130f6 <HAL_ADC_Init+0x196>
 80130ce:	687b      	ldr	r3, [r7, #4]
 80130d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130d2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80130d6:	d00e      	beq.n	80130f6 <HAL_ADC_Init+0x196>
 80130d8:	687b      	ldr	r3, [r7, #4]
 80130da:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130dc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80130e0:	d009      	beq.n	80130f6 <HAL_ADC_Init+0x196>
 80130e2:	687b      	ldr	r3, [r7, #4]
 80130e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80130e6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80130ea:	d004      	beq.n	80130f6 <HAL_ADC_Init+0x196>
 80130ec:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 80130f0:	4834      	ldr	r0, [pc, #208]	@ (80131c4 <HAL_ADC_Init+0x264>)
 80130f2:	f7ff f9df 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 80130f6:	687b      	ldr	r3, [r7, #4]
 80130f8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130fa:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 80130fe:	d063      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013100:	687b      	ldr	r3, [r7, #4]
 8013102:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013104:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8013108:	d05e      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 801310a:	687b      	ldr	r3, [r7, #4]
 801310c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801310e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013112:	d059      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013114:	687b      	ldr	r3, [r7, #4]
 8013116:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013118:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 801311c:	d054      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 801311e:	687b      	ldr	r3, [r7, #4]
 8013120:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013122:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8013126:	d04f      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013128:	687b      	ldr	r3, [r7, #4]
 801312a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801312c:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8013130:	d04a      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013132:	687b      	ldr	r3, [r7, #4]
 8013134:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013136:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 801313a:	d045      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 801313c:	687b      	ldr	r3, [r7, #4]
 801313e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013140:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8013144:	d040      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013146:	687b      	ldr	r3, [r7, #4]
 8013148:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801314a:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 801314e:	d03b      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013154:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8013158:	d036      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 801315a:	687b      	ldr	r3, [r7, #4]
 801315c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801315e:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8013162:	d031      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013164:	687b      	ldr	r3, [r7, #4]
 8013166:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013168:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 801316c:	d02c      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 801316e:	687b      	ldr	r3, [r7, #4]
 8013170:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013172:	f5b3 6ff8 	cmp.w	r3, #1984	@ 0x7c0
 8013176:	d027      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013178:	687b      	ldr	r3, [r7, #4]
 801317a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801317c:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 8013180:	d022      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013182:	687b      	ldr	r3, [r7, #4]
 8013184:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013186:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801318a:	d01d      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 801318c:	687b      	ldr	r3, [r7, #4]
 801318e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013190:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8013194:	d018      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 8013196:	687b      	ldr	r3, [r7, #4]
 8013198:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801319a:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 801319e:	d013      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 80131a0:	687b      	ldr	r3, [r7, #4]
 80131a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131a4:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 80131a8:	d00e      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80131ae:	2b00      	cmp	r3, #0
 80131b0:	d00a      	beq.n	80131c8 <HAL_ADC_Init+0x268>
 80131b2:	f240 11a3 	movw	r1, #419	@ 0x1a3
 80131b6:	4803      	ldr	r0, [pc, #12]	@ (80131c4 <HAL_ADC_Init+0x264>)
 80131b8:	f7ff f97c 	bl	80124b4 <assert_failed>
 80131bc:	e004      	b.n	80131c8 <HAL_ADC_Init+0x268>
 80131be:	bf00      	nop
 80131c0:	50000100 	.word	0x50000100
 80131c4:	0801db9c 	.word	0x0801db9c
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131cc:	2b00      	cmp	r3, #0
 80131ce:	d00e      	beq.n	80131ee <HAL_ADC_Init+0x28e>
 80131d0:	687b      	ldr	r3, [r7, #4]
 80131d2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131d4:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 80131d8:	d009      	beq.n	80131ee <HAL_ADC_Init+0x28e>
 80131da:	687b      	ldr	r3, [r7, #4]
 80131dc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80131de:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80131e2:	d004      	beq.n	80131ee <HAL_ADC_Init+0x28e>
 80131e4:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 80131e8:	485d      	ldr	r0, [pc, #372]	@ (8013360 <HAL_ADC_Init+0x400>)
 80131ea:	f7ff f963 	bl	80124b4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d009      	beq.n	801320c <HAL_ADC_Init+0x2ac>
 80131f8:	687b      	ldr	r3, [r7, #4]
 80131fa:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80131fe:	2b01      	cmp	r3, #1
 8013200:	d004      	beq.n	801320c <HAL_ADC_Init+0x2ac>
 8013202:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8013206:	4856      	ldr	r0, [pc, #344]	@ (8013360 <HAL_ADC_Init+0x400>)
 8013208:	f7ff f954 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 801320c:	687b      	ldr	r3, [r7, #4]
 801320e:	699b      	ldr	r3, [r3, #24]
 8013210:	2b04      	cmp	r3, #4
 8013212:	d008      	beq.n	8013226 <HAL_ADC_Init+0x2c6>
 8013214:	687b      	ldr	r3, [r7, #4]
 8013216:	699b      	ldr	r3, [r3, #24]
 8013218:	2b08      	cmp	r3, #8
 801321a:	d004      	beq.n	8013226 <HAL_ADC_Init+0x2c6>
 801321c:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 8013220:	484f      	ldr	r0, [pc, #316]	@ (8013360 <HAL_ADC_Init+0x400>)
 8013222:	f7ff f947 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8013226:	687b      	ldr	r3, [r7, #4]
 8013228:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801322a:	2b00      	cmp	r3, #0
 801322c:	d009      	beq.n	8013242 <HAL_ADC_Init+0x2e2>
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013232:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8013236:	d004      	beq.n	8013242 <HAL_ADC_Init+0x2e2>
 8013238:	f240 11a7 	movw	r1, #423	@ 0x1a7
 801323c:	4848      	ldr	r0, [pc, #288]	@ (8013360 <HAL_ADC_Init+0x400>)
 801323e:	f7ff f939 	bl	80124b4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 8013242:	687b      	ldr	r3, [r7, #4]
 8013244:	7f1b      	ldrb	r3, [r3, #28]
 8013246:	2b00      	cmp	r3, #0
 8013248:	d008      	beq.n	801325c <HAL_ADC_Init+0x2fc>
 801324a:	687b      	ldr	r3, [r7, #4]
 801324c:	7f1b      	ldrb	r3, [r3, #28]
 801324e:	2b01      	cmp	r3, #1
 8013250:	d004      	beq.n	801325c <HAL_ADC_Init+0x2fc>
 8013252:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8013256:	4842      	ldr	r0, [pc, #264]	@ (8013360 <HAL_ADC_Init+0x400>)
 8013258:	f7ff f92c 	bl	80124b4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 801325c:	687b      	ldr	r3, [r7, #4]
 801325e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013262:	2b00      	cmp	r3, #0
 8013264:	d009      	beq.n	801327a <HAL_ADC_Init+0x31a>
 8013266:	687b      	ldr	r3, [r7, #4]
 8013268:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 801326c:	2b01      	cmp	r3, #1
 801326e:	d004      	beq.n	801327a <HAL_ADC_Init+0x31a>
 8013270:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8013274:	483a      	ldr	r0, [pc, #232]	@ (8013360 <HAL_ADC_Init+0x400>)
 8013276:	f7ff f91d 	bl	80124b4 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 801327a:	687b      	ldr	r3, [r7, #4]
 801327c:	695b      	ldr	r3, [r3, #20]
 801327e:	2b00      	cmp	r3, #0
 8013280:	d02d      	beq.n	80132de <HAL_ADC_Init+0x37e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 8013282:	687b      	ldr	r3, [r7, #4]
 8013284:	6a1b      	ldr	r3, [r3, #32]
 8013286:	2b00      	cmp	r3, #0
 8013288:	d003      	beq.n	8013292 <HAL_ADC_Init+0x332>
 801328a:	687b      	ldr	r3, [r7, #4]
 801328c:	6a1b      	ldr	r3, [r3, #32]
 801328e:	2b10      	cmp	r3, #16
 8013290:	d904      	bls.n	801329c <HAL_ADC_Init+0x33c>
 8013292:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8013296:	4832      	ldr	r0, [pc, #200]	@ (8013360 <HAL_ADC_Init+0x400>)
 8013298:	f7ff f90c 	bl	80124b4 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d009      	beq.n	80132ba <HAL_ADC_Init+0x35a>
 80132a6:	687b      	ldr	r3, [r7, #4]
 80132a8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80132ac:	2b01      	cmp	r3, #1
 80132ae:	d004      	beq.n	80132ba <HAL_ADC_Init+0x35a>
 80132b0:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80132b4:	482a      	ldr	r0, [pc, #168]	@ (8013360 <HAL_ADC_Init+0x400>)
 80132b6:	f7ff f8fd 	bl	80124b4 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80132ba:	687b      	ldr	r3, [r7, #4]
 80132bc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80132c0:	2b01      	cmp	r3, #1
 80132c2:	d10c      	bne.n	80132de <HAL_ADC_Init+0x37e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80132c4:	687b      	ldr	r3, [r7, #4]
 80132c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132c8:	2b00      	cmp	r3, #0
 80132ca:	d003      	beq.n	80132d4 <HAL_ADC_Init+0x374>
 80132cc:	687b      	ldr	r3, [r7, #4]
 80132ce:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80132d0:	2b08      	cmp	r3, #8
 80132d2:	d904      	bls.n	80132de <HAL_ADC_Init+0x37e>
 80132d4:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80132d8:	4821      	ldr	r0, [pc, #132]	@ (8013360 <HAL_ADC_Init+0x400>)
 80132da:	f7ff f8eb 	bl	80124b4 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 80132de:	687b      	ldr	r3, [r7, #4]
 80132e0:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80132e4:	2b01      	cmp	r3, #1
 80132e6:	d108      	bne.n	80132fa <HAL_ADC_Init+0x39a>
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	7f5b      	ldrb	r3, [r3, #29]
 80132ec:	2b01      	cmp	r3, #1
 80132ee:	d104      	bne.n	80132fa <HAL_ADC_Init+0x39a>
 80132f0:	f240 11b7 	movw	r1, #439	@ 0x1b7
 80132f4:	481a      	ldr	r0, [pc, #104]	@ (8013360 <HAL_ADC_Init+0x400>)
 80132f6:	f7ff f8dd 	bl	80124b4 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80132fe:	2b00      	cmp	r3, #0
 8013300:	d109      	bne.n	8013316 <HAL_ADC_Init+0x3b6>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8013302:	6878      	ldr	r0, [r7, #4]
 8013304:	f7fe fe00 	bl	8011f08 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8013308:	687b      	ldr	r3, [r7, #4]
 801330a:	2200      	movs	r2, #0
 801330c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 801330e:	687b      	ldr	r3, [r7, #4]
 8013310:	2200      	movs	r2, #0
 8013312:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8013316:	687b      	ldr	r3, [r7, #4]
 8013318:	681b      	ldr	r3, [r3, #0]
 801331a:	4618      	mov	r0, r3
 801331c:	f7ff fdaa 	bl	8012e74 <LL_ADC_IsDeepPowerDownEnabled>
 8013320:	4603      	mov	r3, r0
 8013322:	2b00      	cmp	r3, #0
 8013324:	d004      	beq.n	8013330 <HAL_ADC_Init+0x3d0>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8013326:	687b      	ldr	r3, [r7, #4]
 8013328:	681b      	ldr	r3, [r3, #0]
 801332a:	4618      	mov	r0, r3
 801332c:	f7ff fd90 	bl	8012e50 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013330:	687b      	ldr	r3, [r7, #4]
 8013332:	681b      	ldr	r3, [r3, #0]
 8013334:	4618      	mov	r0, r3
 8013336:	f7ff fdc5 	bl	8012ec4 <LL_ADC_IsInternalRegulatorEnabled>
 801333a:	4603      	mov	r3, r0
 801333c:	2b00      	cmp	r3, #0
 801333e:	d11b      	bne.n	8013378 <HAL_ADC_Init+0x418>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8013340:	687b      	ldr	r3, [r7, #4]
 8013342:	681b      	ldr	r3, [r3, #0]
 8013344:	4618      	mov	r0, r3
 8013346:	f7ff fda9 	bl	8012e9c <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 801334a:	4b06      	ldr	r3, [pc, #24]	@ (8013364 <HAL_ADC_Init+0x404>)
 801334c:	681b      	ldr	r3, [r3, #0]
 801334e:	099b      	lsrs	r3, r3, #6
 8013350:	4a05      	ldr	r2, [pc, #20]	@ (8013368 <HAL_ADC_Init+0x408>)
 8013352:	fba2 2303 	umull	r2, r3, r2, r3
 8013356:	099b      	lsrs	r3, r3, #6
 8013358:	3301      	adds	r3, #1
 801335a:	005b      	lsls	r3, r3, #1
 801335c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 801335e:	e008      	b.n	8013372 <HAL_ADC_Init+0x412>
 8013360:	0801db9c 	.word	0x0801db9c
 8013364:	20000000 	.word	0x20000000
 8013368:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 801336c:	68fb      	ldr	r3, [r7, #12]
 801336e:	3b01      	subs	r3, #1
 8013370:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8013372:	68fb      	ldr	r3, [r7, #12]
 8013374:	2b00      	cmp	r3, #0
 8013376:	d1f9      	bne.n	801336c <HAL_ADC_Init+0x40c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8013378:	687b      	ldr	r3, [r7, #4]
 801337a:	681b      	ldr	r3, [r3, #0]
 801337c:	4618      	mov	r0, r3
 801337e:	f7ff fda1 	bl	8012ec4 <LL_ADC_IsInternalRegulatorEnabled>
 8013382:	4603      	mov	r3, r0
 8013384:	2b00      	cmp	r3, #0
 8013386:	d10d      	bne.n	80133a4 <HAL_ADC_Init+0x444>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013388:	687b      	ldr	r3, [r7, #4]
 801338a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801338c:	f043 0210 	orr.w	r2, r3, #16
 8013390:	687b      	ldr	r3, [r7, #4]
 8013392:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8013394:	687b      	ldr	r3, [r7, #4]
 8013396:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013398:	f043 0201 	orr.w	r2, r3, #1
 801339c:	687b      	ldr	r3, [r7, #4]
 801339e:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 80133a0:	2301      	movs	r3, #1
 80133a2:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	681b      	ldr	r3, [r3, #0]
 80133a8:	4618      	mov	r0, r3
 80133aa:	f7ff fdb2 	bl	8012f12 <LL_ADC_REG_IsConversionOngoing>
 80133ae:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80133b4:	f003 0310 	and.w	r3, r3, #16
 80133b8:	2b00      	cmp	r3, #0
 80133ba:	f040 8177 	bne.w	80136ac <HAL_ADC_Init+0x74c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80133be:	697b      	ldr	r3, [r7, #20]
 80133c0:	2b00      	cmp	r3, #0
 80133c2:	f040 8173 	bne.w	80136ac <HAL_ADC_Init+0x74c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80133ca:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80133ce:	f043 0202 	orr.w	r2, r3, #2
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80133d6:	687b      	ldr	r3, [r7, #4]
 80133d8:	681b      	ldr	r3, [r3, #0]
 80133da:	4618      	mov	r0, r3
 80133dc:	f7ff fd86 	bl	8012eec <LL_ADC_IsEnabled>
 80133e0:	4603      	mov	r3, r0
 80133e2:	2b00      	cmp	r3, #0
 80133e4:	d111      	bne.n	801340a <HAL_ADC_Init+0x4aa>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80133e6:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80133ea:	f7ff fd7f 	bl	8012eec <LL_ADC_IsEnabled>
 80133ee:	4604      	mov	r4, r0
 80133f0:	4895      	ldr	r0, [pc, #596]	@ (8013648 <HAL_ADC_Init+0x6e8>)
 80133f2:	f7ff fd7b 	bl	8012eec <LL_ADC_IsEnabled>
 80133f6:	4603      	mov	r3, r0
 80133f8:	4323      	orrs	r3, r4
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d105      	bne.n	801340a <HAL_ADC_Init+0x4aa>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	685b      	ldr	r3, [r3, #4]
 8013402:	4619      	mov	r1, r3
 8013404:	4891      	ldr	r0, [pc, #580]	@ (801364c <HAL_ADC_Init+0x6ec>)
 8013406:	f7ff fb85 	bl	8012b14 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801340a:	687b      	ldr	r3, [r7, #4]
 801340c:	7f5b      	ldrb	r3, [r3, #29]
 801340e:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 8013410:	687b      	ldr	r3, [r7, #4]
 8013412:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8013414:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 801341a:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 8013420:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8013422:	687b      	ldr	r3, [r7, #4]
 8013424:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013428:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 801342a:	4313      	orrs	r3, r2
 801342c:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8013434:	2b01      	cmp	r3, #1
 8013436:	d106      	bne.n	8013446 <HAL_ADC_Init+0x4e6>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8013438:	687b      	ldr	r3, [r7, #4]
 801343a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801343c:	3b01      	subs	r3, #1
 801343e:	045b      	lsls	r3, r3, #17
 8013440:	69ba      	ldr	r2, [r7, #24]
 8013442:	4313      	orrs	r3, r2
 8013444:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8013446:	687b      	ldr	r3, [r7, #4]
 8013448:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801344a:	2b00      	cmp	r3, #0
 801344c:	d009      	beq.n	8013462 <HAL_ADC_Init+0x502>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801344e:	687b      	ldr	r3, [r7, #4]
 8013450:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8013452:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8013456:	687b      	ldr	r3, [r7, #4]
 8013458:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801345a:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 801345c:	69ba      	ldr	r2, [r7, #24]
 801345e:	4313      	orrs	r3, r2
 8013460:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 8013462:	687b      	ldr	r3, [r7, #4]
 8013464:	681b      	ldr	r3, [r3, #0]
 8013466:	68da      	ldr	r2, [r3, #12]
 8013468:	4b79      	ldr	r3, [pc, #484]	@ (8013650 <HAL_ADC_Init+0x6f0>)
 801346a:	4013      	ands	r3, r2
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	6812      	ldr	r2, [r2, #0]
 8013470:	69b9      	ldr	r1, [r7, #24]
 8013472:	430b      	orrs	r3, r1
 8013474:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8013476:	687b      	ldr	r3, [r7, #4]
 8013478:	681b      	ldr	r3, [r3, #0]
 801347a:	691b      	ldr	r3, [r3, #16]
 801347c:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8013484:	687b      	ldr	r3, [r7, #4]
 8013486:	681b      	ldr	r3, [r3, #0]
 8013488:	430a      	orrs	r2, r1
 801348a:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 801348c:	687b      	ldr	r3, [r7, #4]
 801348e:	681b      	ldr	r3, [r3, #0]
 8013490:	4618      	mov	r0, r3
 8013492:	f7ff fd51 	bl	8012f38 <LL_ADC_INJ_IsConversionOngoing>
 8013496:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8013498:	697b      	ldr	r3, [r7, #20]
 801349a:	2b00      	cmp	r3, #0
 801349c:	f040 80e4 	bne.w	8013668 <HAL_ADC_Init+0x708>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80134a0:	693b      	ldr	r3, [r7, #16]
 80134a2:	2b00      	cmp	r3, #0
 80134a4:	f040 80e0 	bne.w	8013668 <HAL_ADC_Init+0x708>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80134a8:	687b      	ldr	r3, [r7, #4]
 80134aa:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80134ac:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80134ae:	687b      	ldr	r3, [r7, #4]
 80134b0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80134b4:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80134b6:	4313      	orrs	r3, r2
 80134b8:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80134ba:	687b      	ldr	r3, [r7, #4]
 80134bc:	681b      	ldr	r3, [r3, #0]
 80134be:	68db      	ldr	r3, [r3, #12]
 80134c0:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80134c4:	f023 0302 	bic.w	r3, r3, #2
 80134c8:	687a      	ldr	r2, [r7, #4]
 80134ca:	6812      	ldr	r2, [r2, #0]
 80134cc:	69b9      	ldr	r1, [r7, #24]
 80134ce:	430b      	orrs	r3, r1
 80134d0:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	691b      	ldr	r3, [r3, #16]
 80134d6:	2b00      	cmp	r3, #0
 80134d8:	d017      	beq.n	801350a <HAL_ADC_Init+0x5aa>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80134da:	687b      	ldr	r3, [r7, #4]
 80134dc:	681b      	ldr	r3, [r3, #0]
 80134de:	691a      	ldr	r2, [r3, #16]
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	681b      	ldr	r3, [r3, #0]
 80134e4:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80134e8:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80134ea:	687b      	ldr	r3, [r7, #4]
 80134ec:	681b      	ldr	r3, [r3, #0]
 80134ee:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80134f2:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80134f6:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80134fa:	687a      	ldr	r2, [r7, #4]
 80134fc:	6911      	ldr	r1, [r2, #16]
 80134fe:	687a      	ldr	r2, [r7, #4]
 8013500:	6812      	ldr	r2, [r2, #0]
 8013502:	430b      	orrs	r3, r1
 8013504:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8013508:	e013      	b.n	8013532 <HAL_ADC_Init+0x5d2>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 801350a:	687b      	ldr	r3, [r7, #4]
 801350c:	681b      	ldr	r3, [r3, #0]
 801350e:	691a      	ldr	r2, [r3, #16]
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	681b      	ldr	r3, [r3, #0]
 8013514:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8013518:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 801351a:	687b      	ldr	r3, [r7, #4]
 801351c:	681b      	ldr	r3, [r3, #0]
 801351e:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 8013522:	687a      	ldr	r2, [r7, #4]
 8013524:	6812      	ldr	r2, [r2, #0]
 8013526:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 801352a:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 801352e:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013538:	2b01      	cmp	r3, #1
 801353a:	f040 808d 	bne.w	8013658 <HAL_ADC_Init+0x6f8>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013542:	2b00      	cmp	r3, #0
 8013544:	d020      	beq.n	8013588 <HAL_ADC_Init+0x628>
 8013546:	687b      	ldr	r3, [r7, #4]
 8013548:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801354a:	2b04      	cmp	r3, #4
 801354c:	d01c      	beq.n	8013588 <HAL_ADC_Init+0x628>
 801354e:	687b      	ldr	r3, [r7, #4]
 8013550:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013552:	2b08      	cmp	r3, #8
 8013554:	d018      	beq.n	8013588 <HAL_ADC_Init+0x628>
 8013556:	687b      	ldr	r3, [r7, #4]
 8013558:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801355a:	2b0c      	cmp	r3, #12
 801355c:	d014      	beq.n	8013588 <HAL_ADC_Init+0x628>
 801355e:	687b      	ldr	r3, [r7, #4]
 8013560:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013562:	2b10      	cmp	r3, #16
 8013564:	d010      	beq.n	8013588 <HAL_ADC_Init+0x628>
 8013566:	687b      	ldr	r3, [r7, #4]
 8013568:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801356a:	2b14      	cmp	r3, #20
 801356c:	d00c      	beq.n	8013588 <HAL_ADC_Init+0x628>
 801356e:	687b      	ldr	r3, [r7, #4]
 8013570:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013572:	2b18      	cmp	r3, #24
 8013574:	d008      	beq.n	8013588 <HAL_ADC_Init+0x628>
 8013576:	687b      	ldr	r3, [r7, #4]
 8013578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801357a:	2b1c      	cmp	r3, #28
 801357c:	d004      	beq.n	8013588 <HAL_ADC_Init+0x628>
 801357e:	f240 2176 	movw	r1, #630	@ 0x276
 8013582:	4834      	ldr	r0, [pc, #208]	@ (8013654 <HAL_ADC_Init+0x6f4>)
 8013584:	f7fe ff96 	bl	80124b4 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8013588:	687b      	ldr	r3, [r7, #4]
 801358a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801358c:	2b00      	cmp	r3, #0
 801358e:	d025      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 8013590:	687b      	ldr	r3, [r7, #4]
 8013592:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8013594:	2b20      	cmp	r3, #32
 8013596:	d021      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 8013598:	687b      	ldr	r3, [r7, #4]
 801359a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801359c:	2b40      	cmp	r3, #64	@ 0x40
 801359e:	d01d      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 80135a0:	687b      	ldr	r3, [r7, #4]
 80135a2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135a4:	2b60      	cmp	r3, #96	@ 0x60
 80135a6:	d019      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 80135a8:	687b      	ldr	r3, [r7, #4]
 80135aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135ac:	2b80      	cmp	r3, #128	@ 0x80
 80135ae:	d015      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 80135b0:	687b      	ldr	r3, [r7, #4]
 80135b2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135b4:	2ba0      	cmp	r3, #160	@ 0xa0
 80135b6:	d011      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 80135b8:	687b      	ldr	r3, [r7, #4]
 80135ba:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135bc:	2bc0      	cmp	r3, #192	@ 0xc0
 80135be:	d00d      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 80135c0:	687b      	ldr	r3, [r7, #4]
 80135c2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135c4:	2be0      	cmp	r3, #224	@ 0xe0
 80135c6:	d009      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80135cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80135d0:	d004      	beq.n	80135dc <HAL_ADC_Init+0x67c>
 80135d2:	f240 2177 	movw	r1, #631	@ 0x277
 80135d6:	481f      	ldr	r0, [pc, #124]	@ (8013654 <HAL_ADC_Init+0x6f4>)
 80135d8:	f7fe ff6c 	bl	80124b4 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80135e0:	2b00      	cmp	r3, #0
 80135e2:	d009      	beq.n	80135f8 <HAL_ADC_Init+0x698>
 80135e4:	687b      	ldr	r3, [r7, #4]
 80135e6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80135e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80135ec:	d004      	beq.n	80135f8 <HAL_ADC_Init+0x698>
 80135ee:	f44f 711e 	mov.w	r1, #632	@ 0x278
 80135f2:	4818      	ldr	r0, [pc, #96]	@ (8013654 <HAL_ADC_Init+0x6f4>)
 80135f4:	f7fe ff5e 	bl	80124b4 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d00a      	beq.n	8013616 <HAL_ADC_Init+0x6b6>
 8013600:	687b      	ldr	r3, [r7, #4]
 8013602:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8013604:	f240 4201 	movw	r2, #1025	@ 0x401
 8013608:	4293      	cmp	r3, r2
 801360a:	d004      	beq.n	8013616 <HAL_ADC_Init+0x6b6>
 801360c:	f240 2179 	movw	r1, #633	@ 0x279
 8013610:	4810      	ldr	r0, [pc, #64]	@ (8013654 <HAL_ADC_Init+0x6f4>)
 8013612:	f7fe ff4f 	bl	80124b4 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8013616:	687b      	ldr	r3, [r7, #4]
 8013618:	681b      	ldr	r3, [r3, #0]
 801361a:	691b      	ldr	r3, [r3, #16]
 801361c:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 8013620:	f023 0304 	bic.w	r3, r3, #4
 8013624:	687a      	ldr	r2, [r7, #4]
 8013626:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8013628:	687a      	ldr	r2, [r7, #4]
 801362a:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 801362c:	4311      	orrs	r1, r2
 801362e:	687a      	ldr	r2, [r7, #4]
 8013630:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 8013632:	4311      	orrs	r1, r2
 8013634:	687a      	ldr	r2, [r7, #4]
 8013636:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8013638:	430a      	orrs	r2, r1
 801363a:	431a      	orrs	r2, r3
 801363c:	687b      	ldr	r3, [r7, #4]
 801363e:	681b      	ldr	r3, [r3, #0]
 8013640:	f042 0201 	orr.w	r2, r2, #1
 8013644:	611a      	str	r2, [r3, #16]
 8013646:	e00f      	b.n	8013668 <HAL_ADC_Init+0x708>
 8013648:	50000100 	.word	0x50000100
 801364c:	50000300 	.word	0x50000300
 8013650:	fff04007 	.word	0xfff04007
 8013654:	0801db9c 	.word	0x0801db9c
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8013658:	687b      	ldr	r3, [r7, #4]
 801365a:	681b      	ldr	r3, [r3, #0]
 801365c:	691a      	ldr	r2, [r3, #16]
 801365e:	687b      	ldr	r3, [r7, #4]
 8013660:	681b      	ldr	r3, [r3, #0]
 8013662:	f022 0201 	bic.w	r2, r2, #1
 8013666:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8013668:	687b      	ldr	r3, [r7, #4]
 801366a:	695b      	ldr	r3, [r3, #20]
 801366c:	2b01      	cmp	r3, #1
 801366e:	d10c      	bne.n	801368a <HAL_ADC_Init+0x72a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8013670:	687b      	ldr	r3, [r7, #4]
 8013672:	681b      	ldr	r3, [r3, #0]
 8013674:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013676:	f023 010f 	bic.w	r1, r3, #15
 801367a:	687b      	ldr	r3, [r7, #4]
 801367c:	6a1b      	ldr	r3, [r3, #32]
 801367e:	1e5a      	subs	r2, r3, #1
 8013680:	687b      	ldr	r3, [r7, #4]
 8013682:	681b      	ldr	r3, [r3, #0]
 8013684:	430a      	orrs	r2, r1
 8013686:	631a      	str	r2, [r3, #48]	@ 0x30
 8013688:	e007      	b.n	801369a <HAL_ADC_Init+0x73a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	681b      	ldr	r3, [r3, #0]
 801368e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8013690:	687b      	ldr	r3, [r7, #4]
 8013692:	681b      	ldr	r3, [r3, #0]
 8013694:	f022 020f 	bic.w	r2, r2, #15
 8013698:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 801369a:	687b      	ldr	r3, [r7, #4]
 801369c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801369e:	f023 0303 	bic.w	r3, r3, #3
 80136a2:	f043 0201 	orr.w	r2, r3, #1
 80136a6:	687b      	ldr	r3, [r7, #4]
 80136a8:	65da      	str	r2, [r3, #92]	@ 0x5c
 80136aa:	e007      	b.n	80136bc <HAL_ADC_Init+0x75c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80136ac:	687b      	ldr	r3, [r7, #4]
 80136ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80136b0:	f043 0210 	orr.w	r2, r3, #16
 80136b4:	687b      	ldr	r3, [r7, #4]
 80136b6:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80136b8:	2301      	movs	r3, #1
 80136ba:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80136bc:	7ffb      	ldrb	r3, [r7, #31]
}
 80136be:	4618      	mov	r0, r3
 80136c0:	3724      	adds	r7, #36	@ 0x24
 80136c2:	46bd      	mov	sp, r7
 80136c4:	bd90      	pop	{r4, r7, pc}
 80136c6:	bf00      	nop

080136c8 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80136c8:	b580      	push	{r7, lr}
 80136ca:	b08a      	sub	sp, #40	@ 0x28
 80136cc:	af00      	add	r7, sp, #0
 80136ce:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80136d0:	2300      	movs	r3, #0
 80136d2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80136d4:	687b      	ldr	r3, [r7, #4]
 80136d6:	681b      	ldr	r3, [r3, #0]
 80136d8:	681b      	ldr	r3, [r3, #0]
 80136da:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80136dc:	687b      	ldr	r3, [r7, #4]
 80136de:	681b      	ldr	r3, [r3, #0]
 80136e0:	685b      	ldr	r3, [r3, #4]
 80136e2:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80136e4:	4891      	ldr	r0, [pc, #580]	@ (801392c <HAL_ADC_IRQHandler+0x264>)
 80136e6:	f7ff fb97 	bl	8012e18 <LL_ADC_GetMultimode>
 80136ea:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80136ec:	687b      	ldr	r3, [r7, #4]
 80136ee:	681b      	ldr	r3, [r3, #0]
 80136f0:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80136f4:	d009      	beq.n	801370a <HAL_ADC_IRQHandler+0x42>
 80136f6:	687b      	ldr	r3, [r7, #4]
 80136f8:	681b      	ldr	r3, [r3, #0]
 80136fa:	4a8d      	ldr	r2, [pc, #564]	@ (8013930 <HAL_ADC_IRQHandler+0x268>)
 80136fc:	4293      	cmp	r3, r2
 80136fe:	d004      	beq.n	801370a <HAL_ADC_IRQHandler+0x42>
 8013700:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8013704:	488b      	ldr	r0, [pc, #556]	@ (8013934 <HAL_ADC_IRQHandler+0x26c>)
 8013706:	f7fe fed5 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 801370a:	687b      	ldr	r3, [r7, #4]
 801370c:	699b      	ldr	r3, [r3, #24]
 801370e:	2b04      	cmp	r3, #4
 8013710:	d008      	beq.n	8013724 <HAL_ADC_IRQHandler+0x5c>
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	699b      	ldr	r3, [r3, #24]
 8013716:	2b08      	cmp	r3, #8
 8013718:	d004      	beq.n	8013724 <HAL_ADC_IRQHandler+0x5c>
 801371a:	f640 1101 	movw	r1, #2305	@ 0x901
 801371e:	4885      	ldr	r0, [pc, #532]	@ (8013934 <HAL_ADC_IRQHandler+0x26c>)
 8013720:	f7fe fec8 	bl	80124b4 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8013724:	69fb      	ldr	r3, [r7, #28]
 8013726:	f003 0302 	and.w	r3, r3, #2
 801372a:	2b00      	cmp	r3, #0
 801372c:	d017      	beq.n	801375e <HAL_ADC_IRQHandler+0x96>
 801372e:	69bb      	ldr	r3, [r7, #24]
 8013730:	f003 0302 	and.w	r3, r3, #2
 8013734:	2b00      	cmp	r3, #0
 8013736:	d012      	beq.n	801375e <HAL_ADC_IRQHandler+0x96>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013738:	687b      	ldr	r3, [r7, #4]
 801373a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801373c:	f003 0310 	and.w	r3, r3, #16
 8013740:	2b00      	cmp	r3, #0
 8013742:	d105      	bne.n	8013750 <HAL_ADC_IRQHandler+0x88>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8013744:	687b      	ldr	r3, [r7, #4]
 8013746:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013748:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 801374c:	687b      	ldr	r3, [r7, #4]
 801374e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8013750:	6878      	ldr	r0, [r7, #4]
 8013752:	f001 f87b 	bl	801484c <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8013756:	687b      	ldr	r3, [r7, #4]
 8013758:	681b      	ldr	r3, [r3, #0]
 801375a:	2202      	movs	r2, #2
 801375c:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 801375e:	69fb      	ldr	r3, [r7, #28]
 8013760:	f003 0304 	and.w	r3, r3, #4
 8013764:	2b00      	cmp	r3, #0
 8013766:	d004      	beq.n	8013772 <HAL_ADC_IRQHandler+0xaa>
 8013768:	69bb      	ldr	r3, [r7, #24]
 801376a:	f003 0304 	and.w	r3, r3, #4
 801376e:	2b00      	cmp	r3, #0
 8013770:	d10a      	bne.n	8013788 <HAL_ADC_IRQHandler+0xc0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8013772:	69fb      	ldr	r3, [r7, #28]
 8013774:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8013778:	2b00      	cmp	r3, #0
 801377a:	f000 8085 	beq.w	8013888 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 801377e:	69bb      	ldr	r3, [r7, #24]
 8013780:	f003 0308 	and.w	r3, r3, #8
 8013784:	2b00      	cmp	r3, #0
 8013786:	d07f      	beq.n	8013888 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801378c:	f003 0310 	and.w	r3, r3, #16
 8013790:	2b00      	cmp	r3, #0
 8013792:	d105      	bne.n	80137a0 <HAL_ADC_IRQHandler+0xd8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013798:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 801379c:	687b      	ldr	r3, [r7, #4]
 801379e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	681b      	ldr	r3, [r3, #0]
 80137a4:	4618      	mov	r0, r3
 80137a6:	f7ff fa95 	bl	8012cd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80137aa:	4603      	mov	r3, r0
 80137ac:	2b00      	cmp	r3, #0
 80137ae:	d064      	beq.n	801387a <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80137b0:	687b      	ldr	r3, [r7, #4]
 80137b2:	681b      	ldr	r3, [r3, #0]
 80137b4:	4a5e      	ldr	r2, [pc, #376]	@ (8013930 <HAL_ADC_IRQHandler+0x268>)
 80137b6:	4293      	cmp	r3, r2
 80137b8:	d002      	beq.n	80137c0 <HAL_ADC_IRQHandler+0xf8>
 80137ba:	687b      	ldr	r3, [r7, #4]
 80137bc:	681b      	ldr	r3, [r3, #0]
 80137be:	e001      	b.n	80137c4 <HAL_ADC_IRQHandler+0xfc>
 80137c0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80137c4:	687a      	ldr	r2, [r7, #4]
 80137c6:	6812      	ldr	r2, [r2, #0]
 80137c8:	4293      	cmp	r3, r2
 80137ca:	d008      	beq.n	80137de <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80137cc:	697b      	ldr	r3, [r7, #20]
 80137ce:	2b00      	cmp	r3, #0
 80137d0:	d005      	beq.n	80137de <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80137d2:	697b      	ldr	r3, [r7, #20]
 80137d4:	2b05      	cmp	r3, #5
 80137d6:	d002      	beq.n	80137de <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80137d8:	697b      	ldr	r3, [r7, #20]
 80137da:	2b09      	cmp	r3, #9
 80137dc:	d104      	bne.n	80137e8 <HAL_ADC_IRQHandler+0x120>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80137de:	687b      	ldr	r3, [r7, #4]
 80137e0:	681b      	ldr	r3, [r3, #0]
 80137e2:	68db      	ldr	r3, [r3, #12]
 80137e4:	623b      	str	r3, [r7, #32]
 80137e6:	e00d      	b.n	8013804 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80137e8:	687b      	ldr	r3, [r7, #4]
 80137ea:	681b      	ldr	r3, [r3, #0]
 80137ec:	4a50      	ldr	r2, [pc, #320]	@ (8013930 <HAL_ADC_IRQHandler+0x268>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d002      	beq.n	80137f8 <HAL_ADC_IRQHandler+0x130>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	681b      	ldr	r3, [r3, #0]
 80137f6:	e001      	b.n	80137fc <HAL_ADC_IRQHandler+0x134>
 80137f8:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80137fc:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80137fe:	693b      	ldr	r3, [r7, #16]
 8013800:	68db      	ldr	r3, [r3, #12]
 8013802:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8013804:	6a3b      	ldr	r3, [r7, #32]
 8013806:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801380a:	2b00      	cmp	r3, #0
 801380c:	d135      	bne.n	801387a <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801380e:	687b      	ldr	r3, [r7, #4]
 8013810:	681b      	ldr	r3, [r3, #0]
 8013812:	681b      	ldr	r3, [r3, #0]
 8013814:	f003 0308 	and.w	r3, r3, #8
 8013818:	2b08      	cmp	r3, #8
 801381a:	d12e      	bne.n	801387a <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801381c:	687b      	ldr	r3, [r7, #4]
 801381e:	681b      	ldr	r3, [r3, #0]
 8013820:	4618      	mov	r0, r3
 8013822:	f7ff fb76 	bl	8012f12 <LL_ADC_REG_IsConversionOngoing>
 8013826:	4603      	mov	r3, r0
 8013828:	2b00      	cmp	r3, #0
 801382a:	d11a      	bne.n	8013862 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801382c:	687b      	ldr	r3, [r7, #4]
 801382e:	681b      	ldr	r3, [r3, #0]
 8013830:	685a      	ldr	r2, [r3, #4]
 8013832:	687b      	ldr	r3, [r7, #4]
 8013834:	681b      	ldr	r3, [r3, #0]
 8013836:	f022 020c 	bic.w	r2, r2, #12
 801383a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801383c:	687b      	ldr	r3, [r7, #4]
 801383e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013840:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8013844:	687b      	ldr	r3, [r7, #4]
 8013846:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8013848:	687b      	ldr	r3, [r7, #4]
 801384a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801384c:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8013850:	2b00      	cmp	r3, #0
 8013852:	d112      	bne.n	801387a <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8013854:	687b      	ldr	r3, [r7, #4]
 8013856:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013858:	f043 0201 	orr.w	r2, r3, #1
 801385c:	687b      	ldr	r3, [r7, #4]
 801385e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8013860:	e00b      	b.n	801387a <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8013862:	687b      	ldr	r3, [r7, #4]
 8013864:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013866:	f043 0210 	orr.w	r2, r3, #16
 801386a:	687b      	ldr	r3, [r7, #4]
 801386c:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 801386e:	687b      	ldr	r3, [r7, #4]
 8013870:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013872:	f043 0201 	orr.w	r2, r3, #1
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 801387a:	6878      	ldr	r0, [r7, #4]
 801387c:	f000 f95c 	bl	8013b38 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	681b      	ldr	r3, [r3, #0]
 8013884:	220c      	movs	r2, #12
 8013886:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8013888:	69fb      	ldr	r3, [r7, #28]
 801388a:	f003 0320 	and.w	r3, r3, #32
 801388e:	2b00      	cmp	r3, #0
 8013890:	d004      	beq.n	801389c <HAL_ADC_IRQHandler+0x1d4>
 8013892:	69bb      	ldr	r3, [r7, #24]
 8013894:	f003 0320 	and.w	r3, r3, #32
 8013898:	2b00      	cmp	r3, #0
 801389a:	d10b      	bne.n	80138b4 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 801389c:	69fb      	ldr	r3, [r7, #28]
 801389e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80138a2:	2b00      	cmp	r3, #0
 80138a4:	f000 80a0 	beq.w	80139e8 <HAL_ADC_IRQHandler+0x320>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80138a8:	69bb      	ldr	r3, [r7, #24]
 80138aa:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80138ae:	2b00      	cmp	r3, #0
 80138b0:	f000 809a 	beq.w	80139e8 <HAL_ADC_IRQHandler+0x320>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80138b4:	687b      	ldr	r3, [r7, #4]
 80138b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80138b8:	f003 0310 	and.w	r3, r3, #16
 80138bc:	2b00      	cmp	r3, #0
 80138be:	d105      	bne.n	80138cc <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80138c0:	687b      	ldr	r3, [r7, #4]
 80138c2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80138c4:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80138c8:	687b      	ldr	r3, [r7, #4]
 80138ca:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80138cc:	687b      	ldr	r3, [r7, #4]
 80138ce:	681b      	ldr	r3, [r3, #0]
 80138d0:	4618      	mov	r0, r3
 80138d2:	f7ff fa3e 	bl	8012d52 <LL_ADC_INJ_IsTriggerSourceSWStart>
 80138d6:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80138d8:	687b      	ldr	r3, [r7, #4]
 80138da:	681b      	ldr	r3, [r3, #0]
 80138dc:	4618      	mov	r0, r3
 80138de:	f7ff f9f9 	bl	8012cd4 <LL_ADC_REG_IsTriggerSourceSWStart>
 80138e2:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80138e4:	687b      	ldr	r3, [r7, #4]
 80138e6:	681b      	ldr	r3, [r3, #0]
 80138e8:	4a11      	ldr	r2, [pc, #68]	@ (8013930 <HAL_ADC_IRQHandler+0x268>)
 80138ea:	4293      	cmp	r3, r2
 80138ec:	d002      	beq.n	80138f4 <HAL_ADC_IRQHandler+0x22c>
 80138ee:	687b      	ldr	r3, [r7, #4]
 80138f0:	681b      	ldr	r3, [r3, #0]
 80138f2:	e001      	b.n	80138f8 <HAL_ADC_IRQHandler+0x230>
 80138f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80138f8:	687a      	ldr	r2, [r7, #4]
 80138fa:	6812      	ldr	r2, [r2, #0]
 80138fc:	4293      	cmp	r3, r2
 80138fe:	d008      	beq.n	8013912 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8013900:	697b      	ldr	r3, [r7, #20]
 8013902:	2b00      	cmp	r3, #0
 8013904:	d005      	beq.n	8013912 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8013906:	697b      	ldr	r3, [r7, #20]
 8013908:	2b06      	cmp	r3, #6
 801390a:	d002      	beq.n	8013912 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 801390c:	697b      	ldr	r3, [r7, #20]
 801390e:	2b07      	cmp	r3, #7
 8013910:	d104      	bne.n	801391c <HAL_ADC_IRQHandler+0x254>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8013912:	687b      	ldr	r3, [r7, #4]
 8013914:	681b      	ldr	r3, [r3, #0]
 8013916:	68db      	ldr	r3, [r3, #12]
 8013918:	623b      	str	r3, [r7, #32]
 801391a:	e013      	b.n	8013944 <HAL_ADC_IRQHandler+0x27c>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801391c:	687b      	ldr	r3, [r7, #4]
 801391e:	681b      	ldr	r3, [r3, #0]
 8013920:	4a03      	ldr	r2, [pc, #12]	@ (8013930 <HAL_ADC_IRQHandler+0x268>)
 8013922:	4293      	cmp	r3, r2
 8013924:	d008      	beq.n	8013938 <HAL_ADC_IRQHandler+0x270>
 8013926:	687b      	ldr	r3, [r7, #4]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	e007      	b.n	801393c <HAL_ADC_IRQHandler+0x274>
 801392c:	50000300 	.word	0x50000300
 8013930:	50000100 	.word	0x50000100
 8013934:	0801db9c 	.word	0x0801db9c
 8013938:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 801393c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801393e:	693b      	ldr	r3, [r7, #16]
 8013940:	68db      	ldr	r3, [r3, #12]
 8013942:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	2b00      	cmp	r3, #0
 8013948:	d047      	beq.n	80139da <HAL_ADC_IRQHandler+0x312>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 801394a:	6a3b      	ldr	r3, [r7, #32]
 801394c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8013950:	2b00      	cmp	r3, #0
 8013952:	d007      	beq.n	8013964 <HAL_ADC_IRQHandler+0x29c>
 8013954:	68bb      	ldr	r3, [r7, #8]
 8013956:	2b00      	cmp	r3, #0
 8013958:	d03f      	beq.n	80139da <HAL_ADC_IRQHandler+0x312>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 801395a:	6a3b      	ldr	r3, [r7, #32]
 801395c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8013960:	2b00      	cmp	r3, #0
 8013962:	d13a      	bne.n	80139da <HAL_ADC_IRQHandler+0x312>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8013964:	687b      	ldr	r3, [r7, #4]
 8013966:	681b      	ldr	r3, [r3, #0]
 8013968:	681b      	ldr	r3, [r3, #0]
 801396a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801396e:	2b40      	cmp	r3, #64	@ 0x40
 8013970:	d133      	bne.n	80139da <HAL_ADC_IRQHandler+0x312>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8013972:	6a3b      	ldr	r3, [r7, #32]
 8013974:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013978:	2b00      	cmp	r3, #0
 801397a:	d12e      	bne.n	80139da <HAL_ADC_IRQHandler+0x312>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	681b      	ldr	r3, [r3, #0]
 8013980:	4618      	mov	r0, r3
 8013982:	f7ff fad9 	bl	8012f38 <LL_ADC_INJ_IsConversionOngoing>
 8013986:	4603      	mov	r3, r0
 8013988:	2b00      	cmp	r3, #0
 801398a:	d11a      	bne.n	80139c2 <HAL_ADC_IRQHandler+0x2fa>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 801398c:	687b      	ldr	r3, [r7, #4]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	685a      	ldr	r2, [r3, #4]
 8013992:	687b      	ldr	r3, [r7, #4]
 8013994:	681b      	ldr	r3, [r3, #0]
 8013996:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 801399a:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 801399c:	687b      	ldr	r3, [r7, #4]
 801399e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80139a0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80139a4:	687b      	ldr	r3, [r7, #4]
 80139a6:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80139a8:	687b      	ldr	r3, [r7, #4]
 80139aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80139ac:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80139b0:	2b00      	cmp	r3, #0
 80139b2:	d112      	bne.n	80139da <HAL_ADC_IRQHandler+0x312>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80139b4:	687b      	ldr	r3, [r7, #4]
 80139b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80139b8:	f043 0201 	orr.w	r2, r3, #1
 80139bc:	687b      	ldr	r3, [r7, #4]
 80139be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80139c0:	e00b      	b.n	80139da <HAL_ADC_IRQHandler+0x312>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80139c2:	687b      	ldr	r3, [r7, #4]
 80139c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80139c6:	f043 0210 	orr.w	r2, r3, #16
 80139ca:	687b      	ldr	r3, [r7, #4]
 80139cc:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80139ce:	687b      	ldr	r3, [r7, #4]
 80139d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80139d2:	f043 0201 	orr.w	r2, r3, #1
 80139d6:	687b      	ldr	r3, [r7, #4]
 80139d8:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80139da:	6878      	ldr	r0, [r7, #4]
 80139dc:	f000 ff0e 	bl	80147fc <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80139e0:	687b      	ldr	r3, [r7, #4]
 80139e2:	681b      	ldr	r3, [r3, #0]
 80139e4:	2260      	movs	r2, #96	@ 0x60
 80139e6:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80139e8:	69fb      	ldr	r3, [r7, #28]
 80139ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80139ee:	2b00      	cmp	r3, #0
 80139f0:	d011      	beq.n	8013a16 <HAL_ADC_IRQHandler+0x34e>
 80139f2:	69bb      	ldr	r3, [r7, #24]
 80139f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80139f8:	2b00      	cmp	r3, #0
 80139fa:	d00c      	beq.n	8013a16 <HAL_ADC_IRQHandler+0x34e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80139fc:	687b      	ldr	r3, [r7, #4]
 80139fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a00:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8013a08:	6878      	ldr	r0, [r7, #4]
 8013a0a:	f000 f89f 	bl	8013b4c <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8013a0e:	687b      	ldr	r3, [r7, #4]
 8013a10:	681b      	ldr	r3, [r3, #0]
 8013a12:	2280      	movs	r2, #128	@ 0x80
 8013a14:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8013a16:	69fb      	ldr	r3, [r7, #28]
 8013a18:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a1c:	2b00      	cmp	r3, #0
 8013a1e:	d012      	beq.n	8013a46 <HAL_ADC_IRQHandler+0x37e>
 8013a20:	69bb      	ldr	r3, [r7, #24]
 8013a22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8013a26:	2b00      	cmp	r3, #0
 8013a28:	d00d      	beq.n	8013a46 <HAL_ADC_IRQHandler+0x37e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8013a2a:	687b      	ldr	r3, [r7, #4]
 8013a2c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a2e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8013a32:	687b      	ldr	r3, [r7, #4]
 8013a34:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8013a36:	6878      	ldr	r0, [r7, #4]
 8013a38:	f000 fef4 	bl	8014824 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8013a3c:	687b      	ldr	r3, [r7, #4]
 8013a3e:	681b      	ldr	r3, [r3, #0]
 8013a40:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8013a44:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8013a46:	69fb      	ldr	r3, [r7, #28]
 8013a48:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013a4c:	2b00      	cmp	r3, #0
 8013a4e:	d012      	beq.n	8013a76 <HAL_ADC_IRQHandler+0x3ae>
 8013a50:	69bb      	ldr	r3, [r7, #24]
 8013a52:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013a56:	2b00      	cmp	r3, #0
 8013a58:	d00d      	beq.n	8013a76 <HAL_ADC_IRQHandler+0x3ae>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8013a5a:	687b      	ldr	r3, [r7, #4]
 8013a5c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013a5e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8013a62:	687b      	ldr	r3, [r7, #4]
 8013a64:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8013a66:	6878      	ldr	r0, [r7, #4]
 8013a68:	f000 fee6 	bl	8014838 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8013a6c:	687b      	ldr	r3, [r7, #4]
 8013a6e:	681b      	ldr	r3, [r3, #0]
 8013a70:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8013a74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8013a76:	69fb      	ldr	r3, [r7, #28]
 8013a78:	f003 0310 	and.w	r3, r3, #16
 8013a7c:	2b00      	cmp	r3, #0
 8013a7e:	d036      	beq.n	8013aee <HAL_ADC_IRQHandler+0x426>
 8013a80:	69bb      	ldr	r3, [r7, #24]
 8013a82:	f003 0310 	and.w	r3, r3, #16
 8013a86:	2b00      	cmp	r3, #0
 8013a88:	d031      	beq.n	8013aee <HAL_ADC_IRQHandler+0x426>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8013a8a:	687b      	ldr	r3, [r7, #4]
 8013a8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8013a8e:	2b00      	cmp	r3, #0
 8013a90:	d102      	bne.n	8013a98 <HAL_ADC_IRQHandler+0x3d0>
    {
      overrun_error = 1UL;
 8013a92:	2301      	movs	r3, #1
 8013a94:	627b      	str	r3, [r7, #36]	@ 0x24
 8013a96:	e014      	b.n	8013ac2 <HAL_ADC_IRQHandler+0x3fa>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8013a98:	697b      	ldr	r3, [r7, #20]
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d008      	beq.n	8013ab0 <HAL_ADC_IRQHandler+0x3e8>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8013a9e:	4825      	ldr	r0, [pc, #148]	@ (8013b34 <HAL_ADC_IRQHandler+0x46c>)
 8013aa0:	f7ff f9c8 	bl	8012e34 <LL_ADC_GetMultiDMATransfer>
 8013aa4:	4603      	mov	r3, r0
 8013aa6:	2b00      	cmp	r3, #0
 8013aa8:	d00b      	beq.n	8013ac2 <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 8013aaa:	2301      	movs	r3, #1
 8013aac:	627b      	str	r3, [r7, #36]	@ 0x24
 8013aae:	e008      	b.n	8013ac2 <HAL_ADC_IRQHandler+0x3fa>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	681b      	ldr	r3, [r3, #0]
 8013ab4:	68db      	ldr	r3, [r3, #12]
 8013ab6:	f003 0301 	and.w	r3, r3, #1
 8013aba:	2b00      	cmp	r3, #0
 8013abc:	d001      	beq.n	8013ac2 <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 8013abe:	2301      	movs	r3, #1
 8013ac0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8013ac2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8013ac4:	2b01      	cmp	r3, #1
 8013ac6:	d10e      	bne.n	8013ae6 <HAL_ADC_IRQHandler+0x41e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8013ac8:	687b      	ldr	r3, [r7, #4]
 8013aca:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013acc:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8013ad0:	687b      	ldr	r3, [r7, #4]
 8013ad2:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8013ad4:	687b      	ldr	r3, [r7, #4]
 8013ad6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013ad8:	f043 0202 	orr.w	r2, r3, #2
 8013adc:	687b      	ldr	r3, [r7, #4]
 8013ade:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8013ae0:	6878      	ldr	r0, [r7, #4]
 8013ae2:	f000 f83d 	bl	8013b60 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2210      	movs	r2, #16
 8013aec:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8013aee:	69fb      	ldr	r3, [r7, #28]
 8013af0:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013af4:	2b00      	cmp	r3, #0
 8013af6:	d018      	beq.n	8013b2a <HAL_ADC_IRQHandler+0x462>
 8013af8:	69bb      	ldr	r3, [r7, #24]
 8013afa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013afe:	2b00      	cmp	r3, #0
 8013b00:	d013      	beq.n	8013b2a <HAL_ADC_IRQHandler+0x462>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8013b02:	687b      	ldr	r3, [r7, #4]
 8013b04:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8013b06:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8013b0a:	687b      	ldr	r3, [r7, #4]
 8013b0c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8013b0e:	687b      	ldr	r3, [r7, #4]
 8013b10:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013b12:	f043 0208 	orr.w	r2, r3, #8
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8013b1a:	687b      	ldr	r3, [r7, #4]
 8013b1c:	681b      	ldr	r3, [r3, #0]
 8013b1e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8013b22:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8013b24:	6878      	ldr	r0, [r7, #4]
 8013b26:	f000 fe73 	bl	8014810 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8013b2a:	bf00      	nop
 8013b2c:	3728      	adds	r7, #40	@ 0x28
 8013b2e:	46bd      	mov	sp, r7
 8013b30:	bd80      	pop	{r7, pc}
 8013b32:	bf00      	nop
 8013b34:	50000300 	.word	0x50000300

08013b38 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8013b38:	b480      	push	{r7}
 8013b3a:	b083      	sub	sp, #12
 8013b3c:	af00      	add	r7, sp, #0
 8013b3e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8013b40:	bf00      	nop
 8013b42:	370c      	adds	r7, #12
 8013b44:	46bd      	mov	sp, r7
 8013b46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b4a:	4770      	bx	lr

08013b4c <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8013b4c:	b480      	push	{r7}
 8013b4e:	b083      	sub	sp, #12
 8013b50:	af00      	add	r7, sp, #0
 8013b52:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8013b54:	bf00      	nop
 8013b56:	370c      	adds	r7, #12
 8013b58:	46bd      	mov	sp, r7
 8013b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b5e:	4770      	bx	lr

08013b60 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8013b60:	b480      	push	{r7}
 8013b62:	b083      	sub	sp, #12
 8013b64:	af00      	add	r7, sp, #0
 8013b66:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8013b68:	bf00      	nop
 8013b6a:	370c      	adds	r7, #12
 8013b6c:	46bd      	mov	sp, r7
 8013b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013b72:	4770      	bx	lr

08013b74 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8013b74:	b590      	push	{r4, r7, lr}
 8013b76:	b0b7      	sub	sp, #220	@ 0xdc
 8013b78:	af00      	add	r7, sp, #0
 8013b7a:	6078      	str	r0, [r7, #4]
 8013b7c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8013b7e:	2300      	movs	r3, #0
 8013b80:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8013b84:	2300      	movs	r3, #0
 8013b86:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8013b88:	687b      	ldr	r3, [r7, #4]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013b90:	d009      	beq.n	8013ba6 <HAL_ADC_ConfigChannel+0x32>
 8013b92:	687b      	ldr	r3, [r7, #4]
 8013b94:	681b      	ldr	r3, [r3, #0]
 8013b96:	4a94      	ldr	r2, [pc, #592]	@ (8013de8 <HAL_ADC_ConfigChannel+0x274>)
 8013b98:	4293      	cmp	r3, r2
 8013b9a:	d004      	beq.n	8013ba6 <HAL_ADC_ConfigChannel+0x32>
 8013b9c:	f640 21d2 	movw	r1, #2770	@ 0xad2
 8013ba0:	4892      	ldr	r0, [pc, #584]	@ (8013dec <HAL_ADC_ConfigChannel+0x278>)
 8013ba2:	f7fe fc87 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 8013ba6:	683b      	ldr	r3, [r7, #0]
 8013ba8:	685b      	ldr	r3, [r3, #4]
 8013baa:	2b06      	cmp	r3, #6
 8013bac:	d04f      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bae:	683b      	ldr	r3, [r7, #0]
 8013bb0:	685b      	ldr	r3, [r3, #4]
 8013bb2:	2b0c      	cmp	r3, #12
 8013bb4:	d04b      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bb6:	683b      	ldr	r3, [r7, #0]
 8013bb8:	685b      	ldr	r3, [r3, #4]
 8013bba:	2b12      	cmp	r3, #18
 8013bbc:	d047      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bbe:	683b      	ldr	r3, [r7, #0]
 8013bc0:	685b      	ldr	r3, [r3, #4]
 8013bc2:	2b18      	cmp	r3, #24
 8013bc4:	d043      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013bce:	d03e      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bd0:	683b      	ldr	r3, [r7, #0]
 8013bd2:	685b      	ldr	r3, [r3, #4]
 8013bd4:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 8013bd8:	d039      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bda:	683b      	ldr	r3, [r7, #0]
 8013bdc:	685b      	ldr	r3, [r3, #4]
 8013bde:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 8013be2:	d034      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013be4:	683b      	ldr	r3, [r7, #0]
 8013be6:	685b      	ldr	r3, [r3, #4]
 8013be8:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 8013bec:	d02f      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bee:	683b      	ldr	r3, [r7, #0]
 8013bf0:	685b      	ldr	r3, [r3, #4]
 8013bf2:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 8013bf6:	d02a      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013bf8:	683b      	ldr	r3, [r7, #0]
 8013bfa:	685b      	ldr	r3, [r3, #4]
 8013bfc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c00:	d025      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013c02:	683b      	ldr	r3, [r7, #0]
 8013c04:	685b      	ldr	r3, [r3, #4]
 8013c06:	f240 2206 	movw	r2, #518	@ 0x206
 8013c0a:	4293      	cmp	r3, r2
 8013c0c:	d01f      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013c0e:	683b      	ldr	r3, [r7, #0]
 8013c10:	685b      	ldr	r3, [r3, #4]
 8013c12:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8013c16:	d01a      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013c18:	683b      	ldr	r3, [r7, #0]
 8013c1a:	685b      	ldr	r3, [r3, #4]
 8013c1c:	f240 2212 	movw	r2, #530	@ 0x212
 8013c20:	4293      	cmp	r3, r2
 8013c22:	d014      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013c24:	683b      	ldr	r3, [r7, #0]
 8013c26:	685b      	ldr	r3, [r3, #4]
 8013c28:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8013c2c:	d00f      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013c2e:	683b      	ldr	r3, [r7, #0]
 8013c30:	685b      	ldr	r3, [r3, #4]
 8013c32:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8013c36:	d00a      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013c38:	683b      	ldr	r3, [r7, #0]
 8013c3a:	685b      	ldr	r3, [r3, #4]
 8013c3c:	f240 3206 	movw	r2, #774	@ 0x306
 8013c40:	4293      	cmp	r3, r2
 8013c42:	d004      	beq.n	8013c4e <HAL_ADC_ConfigChannel+0xda>
 8013c44:	f640 21d3 	movw	r1, #2771	@ 0xad3
 8013c48:	4868      	ldr	r0, [pc, #416]	@ (8013dec <HAL_ADC_ConfigChannel+0x278>)
 8013c4a:	f7fe fc33 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 8013c4e:	683b      	ldr	r3, [r7, #0]
 8013c50:	689b      	ldr	r3, [r3, #8]
 8013c52:	2b00      	cmp	r3, #0
 8013c54:	d025      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c56:	683b      	ldr	r3, [r7, #0]
 8013c58:	689b      	ldr	r3, [r3, #8]
 8013c5a:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013c5e:	d020      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c60:	683b      	ldr	r3, [r7, #0]
 8013c62:	689b      	ldr	r3, [r3, #8]
 8013c64:	2b01      	cmp	r3, #1
 8013c66:	d01c      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c68:	683b      	ldr	r3, [r7, #0]
 8013c6a:	689b      	ldr	r3, [r3, #8]
 8013c6c:	2b02      	cmp	r3, #2
 8013c6e:	d018      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c70:	683b      	ldr	r3, [r7, #0]
 8013c72:	689b      	ldr	r3, [r3, #8]
 8013c74:	2b03      	cmp	r3, #3
 8013c76:	d014      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c78:	683b      	ldr	r3, [r7, #0]
 8013c7a:	689b      	ldr	r3, [r3, #8]
 8013c7c:	2b04      	cmp	r3, #4
 8013c7e:	d010      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c80:	683b      	ldr	r3, [r7, #0]
 8013c82:	689b      	ldr	r3, [r3, #8]
 8013c84:	2b05      	cmp	r3, #5
 8013c86:	d00c      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c88:	683b      	ldr	r3, [r7, #0]
 8013c8a:	689b      	ldr	r3, [r3, #8]
 8013c8c:	2b06      	cmp	r3, #6
 8013c8e:	d008      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c90:	683b      	ldr	r3, [r7, #0]
 8013c92:	689b      	ldr	r3, [r3, #8]
 8013c94:	2b07      	cmp	r3, #7
 8013c96:	d004      	beq.n	8013ca2 <HAL_ADC_ConfigChannel+0x12e>
 8013c98:	f640 21d4 	movw	r1, #2772	@ 0xad4
 8013c9c:	4853      	ldr	r0, [pc, #332]	@ (8013dec <HAL_ADC_ConfigChannel+0x278>)
 8013c9e:	f7fe fc09 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 8013ca2:	683b      	ldr	r3, [r7, #0]
 8013ca4:	68db      	ldr	r3, [r3, #12]
 8013ca6:	2b7f      	cmp	r3, #127	@ 0x7f
 8013ca8:	d009      	beq.n	8013cbe <HAL_ADC_ConfigChannel+0x14a>
 8013caa:	683b      	ldr	r3, [r7, #0]
 8013cac:	68db      	ldr	r3, [r3, #12]
 8013cae:	4a50      	ldr	r2, [pc, #320]	@ (8013df0 <HAL_ADC_ConfigChannel+0x27c>)
 8013cb0:	4293      	cmp	r3, r2
 8013cb2:	d004      	beq.n	8013cbe <HAL_ADC_ConfigChannel+0x14a>
 8013cb4:	f640 21d5 	movw	r1, #2773	@ 0xad5
 8013cb8:	484c      	ldr	r0, [pc, #304]	@ (8013dec <HAL_ADC_ConfigChannel+0x278>)
 8013cba:	f7fe fbfb 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 8013cbe:	683b      	ldr	r3, [r7, #0]
 8013cc0:	691b      	ldr	r3, [r3, #16]
 8013cc2:	2b04      	cmp	r3, #4
 8013cc4:	d014      	beq.n	8013cf0 <HAL_ADC_ConfigChannel+0x17c>
 8013cc6:	683b      	ldr	r3, [r7, #0]
 8013cc8:	691b      	ldr	r3, [r3, #16]
 8013cca:	2b00      	cmp	r3, #0
 8013ccc:	d010      	beq.n	8013cf0 <HAL_ADC_ConfigChannel+0x17c>
 8013cce:	683b      	ldr	r3, [r7, #0]
 8013cd0:	691b      	ldr	r3, [r3, #16]
 8013cd2:	2b01      	cmp	r3, #1
 8013cd4:	d00c      	beq.n	8013cf0 <HAL_ADC_ConfigChannel+0x17c>
 8013cd6:	683b      	ldr	r3, [r7, #0]
 8013cd8:	691b      	ldr	r3, [r3, #16]
 8013cda:	2b02      	cmp	r3, #2
 8013cdc:	d008      	beq.n	8013cf0 <HAL_ADC_ConfigChannel+0x17c>
 8013cde:	683b      	ldr	r3, [r7, #0]
 8013ce0:	691b      	ldr	r3, [r3, #16]
 8013ce2:	2b03      	cmp	r3, #3
 8013ce4:	d004      	beq.n	8013cf0 <HAL_ADC_ConfigChannel+0x17c>
 8013ce6:	f640 21d6 	movw	r1, #2774	@ 0xad6
 8013cea:	4840      	ldr	r0, [pc, #256]	@ (8013dec <HAL_ADC_ConfigChannel+0x278>)
 8013cec:	f7fe fbe2 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 8013cf0:	683b      	ldr	r3, [r7, #0]
 8013cf2:	695c      	ldr	r4, [r3, #20]
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	4618      	mov	r0, r3
 8013cfa:	f7fe ff3f 	bl	8012b7c <LL_ADC_GetResolution>
 8013cfe:	4603      	mov	r3, r0
 8013d00:	089b      	lsrs	r3, r3, #2
 8013d02:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8013d06:	fa22 f303 	lsr.w	r3, r2, r3
 8013d0a:	429c      	cmp	r4, r3
 8013d0c:	d904      	bls.n	8013d18 <HAL_ADC_ConfigChannel+0x1a4>
 8013d0e:	f640 21d7 	movw	r1, #2775	@ 0xad7
 8013d12:	4836      	ldr	r0, [pc, #216]	@ (8013dec <HAL_ADC_ConfigChannel+0x278>)
 8013d14:	f7fe fbce 	bl	80124b4 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8013d18:	683b      	ldr	r3, [r7, #0]
 8013d1a:	691b      	ldr	r3, [r3, #16]
 8013d1c:	2b04      	cmp	r3, #4
 8013d1e:	d009      	beq.n	8013d34 <HAL_ADC_ConfigChannel+0x1c0>
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8013d26:	2b01      	cmp	r3, #1
 8013d28:	d104      	bne.n	8013d34 <HAL_ADC_ConfigChannel+0x1c0>
 8013d2a:	f640 21db 	movw	r1, #2779	@ 0xadb
 8013d2e:	482f      	ldr	r0, [pc, #188]	@ (8013dec <HAL_ADC_ConfigChannel+0x278>)
 8013d30:	f7fe fbc0 	bl	80124b4 <assert_failed>

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8013d34:	683b      	ldr	r3, [r7, #0]
 8013d36:	68db      	ldr	r3, [r3, #12]
 8013d38:	4a2d      	ldr	r2, [pc, #180]	@ (8013df0 <HAL_ADC_ConfigChannel+0x27c>)
 8013d3a:	4293      	cmp	r3, r2
 8013d3c:	f000 80b2 	beq.w	8013ea4 <HAL_ADC_ConfigChannel+0x330>
  {
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 8013d40:	683b      	ldr	r3, [r7, #0]
 8013d42:	681b      	ldr	r3, [r3, #0]
 8013d44:	2b01      	cmp	r3, #1
 8013d46:	f000 80fd 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d4a:	683b      	ldr	r3, [r7, #0]
 8013d4c:	681b      	ldr	r3, [r3, #0]
 8013d4e:	4a29      	ldr	r2, [pc, #164]	@ (8013df4 <HAL_ADC_ConfigChannel+0x280>)
 8013d50:	4293      	cmp	r3, r2
 8013d52:	f000 80f7 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d56:	683b      	ldr	r3, [r7, #0]
 8013d58:	681b      	ldr	r3, [r3, #0]
 8013d5a:	4a27      	ldr	r2, [pc, #156]	@ (8013df8 <HAL_ADC_ConfigChannel+0x284>)
 8013d5c:	4293      	cmp	r3, r2
 8013d5e:	f000 80f1 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d62:	683b      	ldr	r3, [r7, #0]
 8013d64:	681b      	ldr	r3, [r3, #0]
 8013d66:	4a25      	ldr	r2, [pc, #148]	@ (8013dfc <HAL_ADC_ConfigChannel+0x288>)
 8013d68:	4293      	cmp	r3, r2
 8013d6a:	f000 80eb 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d6e:	683b      	ldr	r3, [r7, #0]
 8013d70:	681b      	ldr	r3, [r3, #0]
 8013d72:	4a23      	ldr	r2, [pc, #140]	@ (8013e00 <HAL_ADC_ConfigChannel+0x28c>)
 8013d74:	4293      	cmp	r3, r2
 8013d76:	f000 80e5 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d7a:	683b      	ldr	r3, [r7, #0]
 8013d7c:	681b      	ldr	r3, [r3, #0]
 8013d7e:	4a21      	ldr	r2, [pc, #132]	@ (8013e04 <HAL_ADC_ConfigChannel+0x290>)
 8013d80:	4293      	cmp	r3, r2
 8013d82:	f000 80df 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d86:	683b      	ldr	r3, [r7, #0]
 8013d88:	681b      	ldr	r3, [r3, #0]
 8013d8a:	4a1f      	ldr	r2, [pc, #124]	@ (8013e08 <HAL_ADC_ConfigChannel+0x294>)
 8013d8c:	4293      	cmp	r3, r2
 8013d8e:	f000 80d9 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d92:	683b      	ldr	r3, [r7, #0]
 8013d94:	681b      	ldr	r3, [r3, #0]
 8013d96:	4a1d      	ldr	r2, [pc, #116]	@ (8013e0c <HAL_ADC_ConfigChannel+0x298>)
 8013d98:	4293      	cmp	r3, r2
 8013d9a:	f000 80d3 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013d9e:	683b      	ldr	r3, [r7, #0]
 8013da0:	681b      	ldr	r3, [r3, #0]
 8013da2:	4a1b      	ldr	r2, [pc, #108]	@ (8013e10 <HAL_ADC_ConfigChannel+0x29c>)
 8013da4:	4293      	cmp	r3, r2
 8013da6:	f000 80cd 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013daa:	683b      	ldr	r3, [r7, #0]
 8013dac:	681b      	ldr	r3, [r3, #0]
 8013dae:	4a19      	ldr	r2, [pc, #100]	@ (8013e14 <HAL_ADC_ConfigChannel+0x2a0>)
 8013db0:	4293      	cmp	r3, r2
 8013db2:	f000 80c7 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013db6:	683b      	ldr	r3, [r7, #0]
 8013db8:	681b      	ldr	r3, [r3, #0]
 8013dba:	4a17      	ldr	r2, [pc, #92]	@ (8013e18 <HAL_ADC_ConfigChannel+0x2a4>)
 8013dbc:	4293      	cmp	r3, r2
 8013dbe:	f000 80c1 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013dc2:	683b      	ldr	r3, [r7, #0]
 8013dc4:	681b      	ldr	r3, [r3, #0]
 8013dc6:	4a15      	ldr	r2, [pc, #84]	@ (8013e1c <HAL_ADC_ConfigChannel+0x2a8>)
 8013dc8:	4293      	cmp	r3, r2
 8013dca:	f000 80bb 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013dce:	683b      	ldr	r3, [r7, #0]
 8013dd0:	681b      	ldr	r3, [r3, #0]
 8013dd2:	4a13      	ldr	r2, [pc, #76]	@ (8013e20 <HAL_ADC_ConfigChannel+0x2ac>)
 8013dd4:	4293      	cmp	r3, r2
 8013dd6:	f000 80b5 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013dda:	683b      	ldr	r3, [r7, #0]
 8013ddc:	681b      	ldr	r3, [r3, #0]
 8013dde:	4a11      	ldr	r2, [pc, #68]	@ (8013e24 <HAL_ADC_ConfigChannel+0x2b0>)
 8013de0:	4293      	cmp	r3, r2
 8013de2:	f000 80af 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013de6:	e01f      	b.n	8013e28 <HAL_ADC_ConfigChannel+0x2b4>
 8013de8:	50000100 	.word	0x50000100
 8013dec:	0801db9c 	.word	0x0801db9c
 8013df0:	407f0000 	.word	0x407f0000
 8013df4:	04300002 	.word	0x04300002
 8013df8:	08600004 	.word	0x08600004
 8013dfc:	0c900008 	.word	0x0c900008
 8013e00:	10c00010 	.word	0x10c00010
 8013e04:	14f00020 	.word	0x14f00020
 8013e08:	19200040 	.word	0x19200040
 8013e0c:	1d500080 	.word	0x1d500080
 8013e10:	21800100 	.word	0x21800100
 8013e14:	25b00200 	.word	0x25b00200
 8013e18:	2a000400 	.word	0x2a000400
 8013e1c:	2e300800 	.word	0x2e300800
 8013e20:	32601000 	.word	0x32601000
 8013e24:	3ac04000 	.word	0x3ac04000
 8013e28:	683b      	ldr	r3, [r7, #0]
 8013e2a:	681b      	ldr	r3, [r3, #0]
 8013e2c:	4a6b      	ldr	r2, [pc, #428]	@ (8013fdc <HAL_ADC_ConfigChannel+0x468>)
 8013e2e:	4293      	cmp	r3, r2
 8013e30:	f000 8088 	beq.w	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e34:	687b      	ldr	r3, [r7, #4]
 8013e36:	681b      	ldr	r3, [r3, #0]
 8013e38:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8013e3c:	d113      	bne.n	8013e66 <HAL_ADC_ConfigChannel+0x2f2>
 8013e3e:	683b      	ldr	r3, [r7, #0]
 8013e40:	681b      	ldr	r3, [r3, #0]
 8013e42:	4a67      	ldr	r2, [pc, #412]	@ (8013fe0 <HAL_ADC_ConfigChannel+0x46c>)
 8013e44:	4293      	cmp	r3, r2
 8013e46:	d07d      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e48:	683b      	ldr	r3, [r7, #0]
 8013e4a:	681b      	ldr	r3, [r3, #0]
 8013e4c:	4a65      	ldr	r2, [pc, #404]	@ (8013fe4 <HAL_ADC_ConfigChannel+0x470>)
 8013e4e:	4293      	cmp	r3, r2
 8013e50:	d078      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e52:	683b      	ldr	r3, [r7, #0]
 8013e54:	681b      	ldr	r3, [r3, #0]
 8013e56:	4a64      	ldr	r2, [pc, #400]	@ (8013fe8 <HAL_ADC_ConfigChannel+0x474>)
 8013e58:	4293      	cmp	r3, r2
 8013e5a:	d073      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e5c:	683b      	ldr	r3, [r7, #0]
 8013e5e:	681b      	ldr	r3, [r3, #0]
 8013e60:	4a62      	ldr	r2, [pc, #392]	@ (8013fec <HAL_ADC_ConfigChannel+0x478>)
 8013e62:	4293      	cmp	r3, r2
 8013e64:	d06e      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	681b      	ldr	r3, [r3, #0]
 8013e6a:	4a61      	ldr	r2, [pc, #388]	@ (8013ff0 <HAL_ADC_ConfigChannel+0x47c>)
 8013e6c:	4293      	cmp	r3, r2
 8013e6e:	d113      	bne.n	8013e98 <HAL_ADC_ConfigChannel+0x324>
 8013e70:	683b      	ldr	r3, [r7, #0]
 8013e72:	681b      	ldr	r3, [r3, #0]
 8013e74:	4a5f      	ldr	r2, [pc, #380]	@ (8013ff4 <HAL_ADC_ConfigChannel+0x480>)
 8013e76:	4293      	cmp	r3, r2
 8013e78:	d064      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e7a:	683b      	ldr	r3, [r7, #0]
 8013e7c:	681b      	ldr	r3, [r3, #0]
 8013e7e:	4a5e      	ldr	r2, [pc, #376]	@ (8013ff8 <HAL_ADC_ConfigChannel+0x484>)
 8013e80:	4293      	cmp	r3, r2
 8013e82:	d05f      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	4a5c      	ldr	r2, [pc, #368]	@ (8013ffc <HAL_ADC_ConfigChannel+0x488>)
 8013e8a:	4293      	cmp	r3, r2
 8013e8c:	d05a      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e8e:	683b      	ldr	r3, [r7, #0]
 8013e90:	681b      	ldr	r3, [r3, #0]
 8013e92:	4a5b      	ldr	r2, [pc, #364]	@ (8014000 <HAL_ADC_ConfigChannel+0x48c>)
 8013e94:	4293      	cmp	r3, r2
 8013e96:	d055      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013e98:	f44f 612e 	mov.w	r1, #2784	@ 0xae0
 8013e9c:	4859      	ldr	r0, [pc, #356]	@ (8014004 <HAL_ADC_ConfigChannel+0x490>)
 8013e9e:	f7fe fb09 	bl	80124b4 <assert_failed>
 8013ea2:	e04f      	b.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	681b      	ldr	r3, [r3, #0]
 8013ea8:	4a57      	ldr	r2, [pc, #348]	@ (8014008 <HAL_ADC_ConfigChannel+0x494>)
 8013eaa:	4293      	cmp	r3, r2
 8013eac:	d04a      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013eae:	683b      	ldr	r3, [r7, #0]
 8013eb0:	681b      	ldr	r3, [r3, #0]
 8013eb2:	4a56      	ldr	r2, [pc, #344]	@ (801400c <HAL_ADC_ConfigChannel+0x498>)
 8013eb4:	4293      	cmp	r3, r2
 8013eb6:	d045      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013eb8:	683b      	ldr	r3, [r7, #0]
 8013eba:	681b      	ldr	r3, [r3, #0]
 8013ebc:	4a54      	ldr	r2, [pc, #336]	@ (8014010 <HAL_ADC_ConfigChannel+0x49c>)
 8013ebe:	4293      	cmp	r3, r2
 8013ec0:	d040      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013ec2:	683b      	ldr	r3, [r7, #0]
 8013ec4:	681b      	ldr	r3, [r3, #0]
 8013ec6:	4a53      	ldr	r2, [pc, #332]	@ (8014014 <HAL_ADC_ConfigChannel+0x4a0>)
 8013ec8:	4293      	cmp	r3, r2
 8013eca:	d03b      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013ecc:	683b      	ldr	r3, [r7, #0]
 8013ece:	681b      	ldr	r3, [r3, #0]
 8013ed0:	4a51      	ldr	r2, [pc, #324]	@ (8014018 <HAL_ADC_ConfigChannel+0x4a4>)
 8013ed2:	4293      	cmp	r3, r2
 8013ed4:	d036      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013ed6:	683b      	ldr	r3, [r7, #0]
 8013ed8:	681b      	ldr	r3, [r3, #0]
 8013eda:	4a50      	ldr	r2, [pc, #320]	@ (801401c <HAL_ADC_ConfigChannel+0x4a8>)
 8013edc:	4293      	cmp	r3, r2
 8013ede:	d031      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013ee0:	683b      	ldr	r3, [r7, #0]
 8013ee2:	681b      	ldr	r3, [r3, #0]
 8013ee4:	4a4e      	ldr	r2, [pc, #312]	@ (8014020 <HAL_ADC_ConfigChannel+0x4ac>)
 8013ee6:	4293      	cmp	r3, r2
 8013ee8:	d02c      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013eea:	683b      	ldr	r3, [r7, #0]
 8013eec:	681b      	ldr	r3, [r3, #0]
 8013eee:	4a4d      	ldr	r2, [pc, #308]	@ (8014024 <HAL_ADC_ConfigChannel+0x4b0>)
 8013ef0:	4293      	cmp	r3, r2
 8013ef2:	d027      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013ef4:	683b      	ldr	r3, [r7, #0]
 8013ef6:	681b      	ldr	r3, [r3, #0]
 8013ef8:	4a4b      	ldr	r2, [pc, #300]	@ (8014028 <HAL_ADC_ConfigChannel+0x4b4>)
 8013efa:	4293      	cmp	r3, r2
 8013efc:	d022      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013efe:	683b      	ldr	r3, [r7, #0]
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4a4a      	ldr	r2, [pc, #296]	@ (801402c <HAL_ADC_ConfigChannel+0x4b8>)
 8013f04:	4293      	cmp	r3, r2
 8013f06:	d01d      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013f08:	683b      	ldr	r3, [r7, #0]
 8013f0a:	681b      	ldr	r3, [r3, #0]
 8013f0c:	4a48      	ldr	r2, [pc, #288]	@ (8014030 <HAL_ADC_ConfigChannel+0x4bc>)
 8013f0e:	4293      	cmp	r3, r2
 8013f10:	d018      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013f12:	683b      	ldr	r3, [r7, #0]
 8013f14:	681b      	ldr	r3, [r3, #0]
 8013f16:	4a47      	ldr	r2, [pc, #284]	@ (8014034 <HAL_ADC_ConfigChannel+0x4c0>)
 8013f18:	4293      	cmp	r3, r2
 8013f1a:	d013      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013f1c:	687b      	ldr	r3, [r7, #4]
 8013f1e:	681b      	ldr	r3, [r3, #0]
 8013f20:	4a33      	ldr	r2, [pc, #204]	@ (8013ff0 <HAL_ADC_ConfigChannel+0x47c>)
 8013f22:	4293      	cmp	r3, r2
 8013f24:	d109      	bne.n	8013f3a <HAL_ADC_ConfigChannel+0x3c6>
 8013f26:	683b      	ldr	r3, [r7, #0]
 8013f28:	681b      	ldr	r3, [r3, #0]
 8013f2a:	4a43      	ldr	r2, [pc, #268]	@ (8014038 <HAL_ADC_ConfigChannel+0x4c4>)
 8013f2c:	4293      	cmp	r3, r2
 8013f2e:	d009      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013f30:	683b      	ldr	r3, [r7, #0]
 8013f32:	681b      	ldr	r3, [r3, #0]
 8013f34:	4a2f      	ldr	r2, [pc, #188]	@ (8013ff4 <HAL_ADC_ConfigChannel+0x480>)
 8013f36:	4293      	cmp	r3, r2
 8013f38:	d004      	beq.n	8013f44 <HAL_ADC_ConfigChannel+0x3d0>
 8013f3a:	f640 21e4 	movw	r1, #2788	@ 0xae4
 8013f3e:	4831      	ldr	r0, [pc, #196]	@ (8014004 <HAL_ADC_ConfigChannel+0x490>)
 8013f40:	f7fe fab8 	bl	80124b4 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8013f44:	687b      	ldr	r3, [r7, #4]
 8013f46:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8013f4a:	2b01      	cmp	r3, #1
 8013f4c:	d102      	bne.n	8013f54 <HAL_ADC_ConfigChannel+0x3e0>
 8013f4e:	2302      	movs	r3, #2
 8013f50:	f000 bc18 	b.w	8014784 <HAL_ADC_ConfigChannel+0xc10>
 8013f54:	687b      	ldr	r3, [r7, #4]
 8013f56:	2201      	movs	r2, #1
 8013f58:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	681b      	ldr	r3, [r3, #0]
 8013f60:	4618      	mov	r0, r3
 8013f62:	f7fe ffd6 	bl	8012f12 <LL_ADC_REG_IsConversionOngoing>
 8013f66:	4603      	mov	r3, r0
 8013f68:	2b00      	cmp	r3, #0
 8013f6a:	f040 83fc 	bne.w	8014766 <HAL_ADC_ConfigChannel+0xbf2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8013f6e:	687b      	ldr	r3, [r7, #4]
 8013f70:	6818      	ldr	r0, [r3, #0]
 8013f72:	683b      	ldr	r3, [r7, #0]
 8013f74:	6859      	ldr	r1, [r3, #4]
 8013f76:	683b      	ldr	r3, [r7, #0]
 8013f78:	681b      	ldr	r3, [r3, #0]
 8013f7a:	461a      	mov	r2, r3
 8013f7c:	f7fe febd 	bl	8012cfa <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8013f80:	687b      	ldr	r3, [r7, #4]
 8013f82:	681b      	ldr	r3, [r3, #0]
 8013f84:	4618      	mov	r0, r3
 8013f86:	f7fe ffc4 	bl	8012f12 <LL_ADC_REG_IsConversionOngoing>
 8013f8a:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	681b      	ldr	r3, [r3, #0]
 8013f92:	4618      	mov	r0, r3
 8013f94:	f7fe ffd0 	bl	8012f38 <LL_ADC_INJ_IsConversionOngoing>
 8013f98:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8013f9c:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8013fa0:	2b00      	cmp	r3, #0
 8013fa2:	f040 8228 	bne.w	80143f6 <HAL_ADC_ConfigChannel+0x882>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8013fa6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	f040 8223 	bne.w	80143f6 <HAL_ADC_ConfigChannel+0x882>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8013fb0:	683b      	ldr	r3, [r7, #0]
 8013fb2:	689b      	ldr	r3, [r3, #8]
 8013fb4:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8013fb8:	d140      	bne.n	801403c <HAL_ADC_ConfigChannel+0x4c8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6818      	ldr	r0, [r3, #0]
 8013fbe:	683b      	ldr	r3, [r7, #0]
 8013fc0:	681b      	ldr	r3, [r3, #0]
 8013fc2:	2200      	movs	r2, #0
 8013fc4:	4619      	mov	r1, r3
 8013fc6:	f7fe fed7 	bl	8012d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8013fca:	687b      	ldr	r3, [r7, #4]
 8013fcc:	681b      	ldr	r3, [r3, #0]
 8013fce:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8013fd2:	4618      	mov	r0, r3
 8013fd4:	f7fe fe6b 	bl	8012cae <LL_ADC_SetSamplingTimeCommonConfig>
 8013fd8:	e03f      	b.n	801405a <HAL_ADC_ConfigChannel+0x4e6>
 8013fda:	bf00      	nop
 8013fdc:	3ef08000 	.word	0x3ef08000
 8013fe0:	b6902000 	.word	0xb6902000
 8013fe4:	c3210000 	.word	0xc3210000
 8013fe8:	c7520000 	.word	0xc7520000
 8013fec:	cb840000 	.word	0xcb840000
 8013ff0:	50000100 	.word	0x50000100
 8013ff4:	36902000 	.word	0x36902000
 8013ff8:	c3290000 	.word	0xc3290000
 8013ffc:	47520000 	.word	0x47520000
 8014000:	cb8c0000 	.word	0xcb8c0000
 8014004:	0801db9c 	.word	0x0801db9c
 8014008:	04300002 	.word	0x04300002
 801400c:	08600004 	.word	0x08600004
 8014010:	0c900008 	.word	0x0c900008
 8014014:	10c00010 	.word	0x10c00010
 8014018:	14f00020 	.word	0x14f00020
 801401c:	19200040 	.word	0x19200040
 8014020:	1d500080 	.word	0x1d500080
 8014024:	21800100 	.word	0x21800100
 8014028:	25b00200 	.word	0x25b00200
 801402c:	2a000400 	.word	0x2a000400
 8014030:	2e300800 	.word	0x2e300800
 8014034:	3ac04000 	.word	0x3ac04000
 8014038:	32601000 	.word	0x32601000
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 801403c:	687b      	ldr	r3, [r7, #4]
 801403e:	6818      	ldr	r0, [r3, #0]
 8014040:	683b      	ldr	r3, [r7, #0]
 8014042:	6819      	ldr	r1, [r3, #0]
 8014044:	683b      	ldr	r3, [r7, #0]
 8014046:	689b      	ldr	r3, [r3, #8]
 8014048:	461a      	mov	r2, r3
 801404a:	f7fe fe95 	bl	8012d78 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 801404e:	687b      	ldr	r3, [r7, #4]
 8014050:	681b      	ldr	r3, [r3, #0]
 8014052:	2100      	movs	r1, #0
 8014054:	4618      	mov	r0, r3
 8014056:	f7fe fe2a 	bl	8012cae <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 801405a:	683b      	ldr	r3, [r7, #0]
 801405c:	695a      	ldr	r2, [r3, #20]
 801405e:	687b      	ldr	r3, [r7, #4]
 8014060:	681b      	ldr	r3, [r3, #0]
 8014062:	68db      	ldr	r3, [r3, #12]
 8014064:	08db      	lsrs	r3, r3, #3
 8014066:	f003 0303 	and.w	r3, r3, #3
 801406a:	005b      	lsls	r3, r3, #1
 801406c:	fa02 f303 	lsl.w	r3, r2, r3
 8014070:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8014074:	683b      	ldr	r3, [r7, #0]
 8014076:	691b      	ldr	r3, [r3, #16]
 8014078:	2b04      	cmp	r3, #4
 801407a:	d03d      	beq.n	80140f8 <HAL_ADC_ConfigChannel+0x584>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 801407c:	687b      	ldr	r3, [r7, #4]
 801407e:	6818      	ldr	r0, [r3, #0]
 8014080:	683b      	ldr	r3, [r7, #0]
 8014082:	6919      	ldr	r1, [r3, #16]
 8014084:	683b      	ldr	r3, [r7, #0]
 8014086:	681a      	ldr	r2, [r3, #0]
 8014088:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801408c:	f7fe fd84 	bl	8012b98 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
 8014090:	683b      	ldr	r3, [r7, #0]
 8014092:	699b      	ldr	r3, [r3, #24]
 8014094:	2b00      	cmp	r3, #0
 8014096:	d009      	beq.n	80140ac <HAL_ADC_ConfigChannel+0x538>
 8014098:	683b      	ldr	r3, [r7, #0]
 801409a:	699b      	ldr	r3, [r3, #24]
 801409c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80140a0:	d004      	beq.n	80140ac <HAL_ADC_ConfigChannel+0x538>
 80140a2:	f640 311c 	movw	r1, #2844	@ 0xb1c
 80140a6:	48b3      	ldr	r0, [pc, #716]	@ (8014374 <HAL_ADC_ConfigChannel+0x800>)
 80140a8:	f7fe fa04 	bl	80124b4 <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
 80140ac:	683b      	ldr	r3, [r7, #0]
 80140ae:	7f1b      	ldrb	r3, [r3, #28]
 80140b0:	2b00      	cmp	r3, #0
 80140b2:	d008      	beq.n	80140c6 <HAL_ADC_ConfigChannel+0x552>
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	7f1b      	ldrb	r3, [r3, #28]
 80140b8:	2b01      	cmp	r3, #1
 80140ba:	d004      	beq.n	80140c6 <HAL_ADC_ConfigChannel+0x552>
 80140bc:	f640 311d 	movw	r1, #2845	@ 0xb1d
 80140c0:	48ac      	ldr	r0, [pc, #688]	@ (8014374 <HAL_ADC_ConfigChannel+0x800>)
 80140c2:	f7fe f9f7 	bl	80124b4 <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 80140c6:	687b      	ldr	r3, [r7, #4]
 80140c8:	6818      	ldr	r0, [r3, #0]
 80140ca:	683b      	ldr	r3, [r7, #0]
 80140cc:	6919      	ldr	r1, [r3, #16]
 80140ce:	683b      	ldr	r3, [r7, #0]
 80140d0:	699b      	ldr	r3, [r3, #24]
 80140d2:	461a      	mov	r2, r3
 80140d4:	f7fe fdb5 	bl	8012c42 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	6818      	ldr	r0, [r3, #0]
 80140dc:	683b      	ldr	r3, [r7, #0]
 80140de:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 80140e0:	683b      	ldr	r3, [r7, #0]
 80140e2:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 80140e4:	2b01      	cmp	r3, #1
 80140e6:	d102      	bne.n	80140ee <HAL_ADC_ConfigChannel+0x57a>
 80140e8:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 80140ec:	e000      	b.n	80140f0 <HAL_ADC_ConfigChannel+0x57c>
 80140ee:	2300      	movs	r3, #0
 80140f0:	461a      	mov	r2, r3
 80140f2:	f7fe fdc1 	bl	8012c78 <LL_ADC_SetOffsetSaturation>
 80140f6:	e17e      	b.n	80143f6 <HAL_ADC_ConfigChannel+0x882>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80140f8:	687b      	ldr	r3, [r7, #4]
 80140fa:	681b      	ldr	r3, [r3, #0]
 80140fc:	2100      	movs	r1, #0
 80140fe:	4618      	mov	r0, r3
 8014100:	f7fe fd6e 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 8014104:	4603      	mov	r3, r0
 8014106:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801410a:	2b00      	cmp	r3, #0
 801410c:	d10a      	bne.n	8014124 <HAL_ADC_ConfigChannel+0x5b0>
 801410e:	687b      	ldr	r3, [r7, #4]
 8014110:	681b      	ldr	r3, [r3, #0]
 8014112:	2100      	movs	r1, #0
 8014114:	4618      	mov	r0, r3
 8014116:	f7fe fd63 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 801411a:	4603      	mov	r3, r0
 801411c:	0e9b      	lsrs	r3, r3, #26
 801411e:	f003 021f 	and.w	r2, r3, #31
 8014122:	e01e      	b.n	8014162 <HAL_ADC_ConfigChannel+0x5ee>
 8014124:	687b      	ldr	r3, [r7, #4]
 8014126:	681b      	ldr	r3, [r3, #0]
 8014128:	2100      	movs	r1, #0
 801412a:	4618      	mov	r0, r3
 801412c:	f7fe fd58 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 8014130:	4603      	mov	r3, r0
 8014132:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014136:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 801413a:	fa93 f3a3 	rbit	r3, r3
 801413e:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8014142:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8014146:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 801414a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801414e:	2b00      	cmp	r3, #0
 8014150:	d101      	bne.n	8014156 <HAL_ADC_ConfigChannel+0x5e2>
  {
    return 32U;
 8014152:	2320      	movs	r3, #32
 8014154:	e004      	b.n	8014160 <HAL_ADC_ConfigChannel+0x5ec>
  }
  return __builtin_clz(value);
 8014156:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 801415a:	fab3 f383 	clz	r3, r3
 801415e:	b2db      	uxtb	r3, r3
 8014160:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8014162:	683b      	ldr	r3, [r7, #0]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801416a:	2b00      	cmp	r3, #0
 801416c:	d105      	bne.n	801417a <HAL_ADC_ConfigChannel+0x606>
 801416e:	683b      	ldr	r3, [r7, #0]
 8014170:	681b      	ldr	r3, [r3, #0]
 8014172:	0e9b      	lsrs	r3, r3, #26
 8014174:	f003 031f 	and.w	r3, r3, #31
 8014178:	e018      	b.n	80141ac <HAL_ADC_ConfigChannel+0x638>
 801417a:	683b      	ldr	r3, [r7, #0]
 801417c:	681b      	ldr	r3, [r3, #0]
 801417e:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014182:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8014186:	fa93 f3a3 	rbit	r3, r3
 801418a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 801418e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8014192:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8014196:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801419a:	2b00      	cmp	r3, #0
 801419c:	d101      	bne.n	80141a2 <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 801419e:	2320      	movs	r3, #32
 80141a0:	e004      	b.n	80141ac <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80141a2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80141a6:	fab3 f383 	clz	r3, r3
 80141aa:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80141ac:	429a      	cmp	r2, r3
 80141ae:	d106      	bne.n	80141be <HAL_ADC_ConfigChannel+0x64a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80141b0:	687b      	ldr	r3, [r7, #4]
 80141b2:	681b      	ldr	r3, [r3, #0]
 80141b4:	2200      	movs	r2, #0
 80141b6:	2100      	movs	r1, #0
 80141b8:	4618      	mov	r0, r3
 80141ba:	f7fe fd27 	bl	8012c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80141be:	687b      	ldr	r3, [r7, #4]
 80141c0:	681b      	ldr	r3, [r3, #0]
 80141c2:	2101      	movs	r1, #1
 80141c4:	4618      	mov	r0, r3
 80141c6:	f7fe fd0b 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 80141ca:	4603      	mov	r3, r0
 80141cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80141d0:	2b00      	cmp	r3, #0
 80141d2:	d10a      	bne.n	80141ea <HAL_ADC_ConfigChannel+0x676>
 80141d4:	687b      	ldr	r3, [r7, #4]
 80141d6:	681b      	ldr	r3, [r3, #0]
 80141d8:	2101      	movs	r1, #1
 80141da:	4618      	mov	r0, r3
 80141dc:	f7fe fd00 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 80141e0:	4603      	mov	r3, r0
 80141e2:	0e9b      	lsrs	r3, r3, #26
 80141e4:	f003 021f 	and.w	r2, r3, #31
 80141e8:	e01e      	b.n	8014228 <HAL_ADC_ConfigChannel+0x6b4>
 80141ea:	687b      	ldr	r3, [r7, #4]
 80141ec:	681b      	ldr	r3, [r3, #0]
 80141ee:	2101      	movs	r1, #1
 80141f0:	4618      	mov	r0, r3
 80141f2:	f7fe fcf5 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 80141f6:	4603      	mov	r3, r0
 80141f8:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80141fc:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8014200:	fa93 f3a3 	rbit	r3, r3
 8014204:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8014208:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801420c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 8014210:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014214:	2b00      	cmp	r3, #0
 8014216:	d101      	bne.n	801421c <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8014218:	2320      	movs	r3, #32
 801421a:	e004      	b.n	8014226 <HAL_ADC_ConfigChannel+0x6b2>
  return __builtin_clz(value);
 801421c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8014220:	fab3 f383 	clz	r3, r3
 8014224:	b2db      	uxtb	r3, r3
 8014226:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8014228:	683b      	ldr	r3, [r7, #0]
 801422a:	681b      	ldr	r3, [r3, #0]
 801422c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014230:	2b00      	cmp	r3, #0
 8014232:	d105      	bne.n	8014240 <HAL_ADC_ConfigChannel+0x6cc>
 8014234:	683b      	ldr	r3, [r7, #0]
 8014236:	681b      	ldr	r3, [r3, #0]
 8014238:	0e9b      	lsrs	r3, r3, #26
 801423a:	f003 031f 	and.w	r3, r3, #31
 801423e:	e018      	b.n	8014272 <HAL_ADC_ConfigChannel+0x6fe>
 8014240:	683b      	ldr	r3, [r7, #0]
 8014242:	681b      	ldr	r3, [r3, #0]
 8014244:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014248:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801424c:	fa93 f3a3 	rbit	r3, r3
 8014250:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8014254:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8014258:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 801425c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8014260:	2b00      	cmp	r3, #0
 8014262:	d101      	bne.n	8014268 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8014264:	2320      	movs	r3, #32
 8014266:	e004      	b.n	8014272 <HAL_ADC_ConfigChannel+0x6fe>
  return __builtin_clz(value);
 8014268:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801426c:	fab3 f383 	clz	r3, r3
 8014270:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8014272:	429a      	cmp	r2, r3
 8014274:	d106      	bne.n	8014284 <HAL_ADC_ConfigChannel+0x710>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8014276:	687b      	ldr	r3, [r7, #4]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	2200      	movs	r2, #0
 801427c:	2101      	movs	r1, #1
 801427e:	4618      	mov	r0, r3
 8014280:	f7fe fcc4 	bl	8012c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8014284:	687b      	ldr	r3, [r7, #4]
 8014286:	681b      	ldr	r3, [r3, #0]
 8014288:	2102      	movs	r1, #2
 801428a:	4618      	mov	r0, r3
 801428c:	f7fe fca8 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 8014290:	4603      	mov	r3, r0
 8014292:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014296:	2b00      	cmp	r3, #0
 8014298:	d10a      	bne.n	80142b0 <HAL_ADC_ConfigChannel+0x73c>
 801429a:	687b      	ldr	r3, [r7, #4]
 801429c:	681b      	ldr	r3, [r3, #0]
 801429e:	2102      	movs	r1, #2
 80142a0:	4618      	mov	r0, r3
 80142a2:	f7fe fc9d 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 80142a6:	4603      	mov	r3, r0
 80142a8:	0e9b      	lsrs	r3, r3, #26
 80142aa:	f003 021f 	and.w	r2, r3, #31
 80142ae:	e01e      	b.n	80142ee <HAL_ADC_ConfigChannel+0x77a>
 80142b0:	687b      	ldr	r3, [r7, #4]
 80142b2:	681b      	ldr	r3, [r3, #0]
 80142b4:	2102      	movs	r1, #2
 80142b6:	4618      	mov	r0, r3
 80142b8:	f7fe fc92 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 80142bc:	4603      	mov	r3, r0
 80142be:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80142c2:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80142c6:	fa93 f3a3 	rbit	r3, r3
 80142ca:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80142ce:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80142d2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80142d6:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d101      	bne.n	80142e2 <HAL_ADC_ConfigChannel+0x76e>
    return 32U;
 80142de:	2320      	movs	r3, #32
 80142e0:	e004      	b.n	80142ec <HAL_ADC_ConfigChannel+0x778>
  return __builtin_clz(value);
 80142e2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80142e6:	fab3 f383 	clz	r3, r3
 80142ea:	b2db      	uxtb	r3, r3
 80142ec:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80142ee:	683b      	ldr	r3, [r7, #0]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80142f6:	2b00      	cmp	r3, #0
 80142f8:	d105      	bne.n	8014306 <HAL_ADC_ConfigChannel+0x792>
 80142fa:	683b      	ldr	r3, [r7, #0]
 80142fc:	681b      	ldr	r3, [r3, #0]
 80142fe:	0e9b      	lsrs	r3, r3, #26
 8014300:	f003 031f 	and.w	r3, r3, #31
 8014304:	e016      	b.n	8014334 <HAL_ADC_ConfigChannel+0x7c0>
 8014306:	683b      	ldr	r3, [r7, #0]
 8014308:	681b      	ldr	r3, [r3, #0]
 801430a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801430e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8014312:	fa93 f3a3 	rbit	r3, r3
 8014316:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8014318:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801431a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 801431e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8014322:	2b00      	cmp	r3, #0
 8014324:	d101      	bne.n	801432a <HAL_ADC_ConfigChannel+0x7b6>
    return 32U;
 8014326:	2320      	movs	r3, #32
 8014328:	e004      	b.n	8014334 <HAL_ADC_ConfigChannel+0x7c0>
  return __builtin_clz(value);
 801432a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801432e:	fab3 f383 	clz	r3, r3
 8014332:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8014334:	429a      	cmp	r2, r3
 8014336:	d106      	bne.n	8014346 <HAL_ADC_ConfigChannel+0x7d2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8014338:	687b      	ldr	r3, [r7, #4]
 801433a:	681b      	ldr	r3, [r3, #0]
 801433c:	2200      	movs	r2, #0
 801433e:	2102      	movs	r1, #2
 8014340:	4618      	mov	r0, r3
 8014342:	f7fe fc63 	bl	8012c0c <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8014346:	687b      	ldr	r3, [r7, #4]
 8014348:	681b      	ldr	r3, [r3, #0]
 801434a:	2103      	movs	r1, #3
 801434c:	4618      	mov	r0, r3
 801434e:	f7fe fc47 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 8014352:	4603      	mov	r3, r0
 8014354:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014358:	2b00      	cmp	r3, #0
 801435a:	d10d      	bne.n	8014378 <HAL_ADC_ConfigChannel+0x804>
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	681b      	ldr	r3, [r3, #0]
 8014360:	2103      	movs	r1, #3
 8014362:	4618      	mov	r0, r3
 8014364:	f7fe fc3c 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 8014368:	4603      	mov	r3, r0
 801436a:	0e9b      	lsrs	r3, r3, #26
 801436c:	f003 021f 	and.w	r2, r3, #31
 8014370:	e01a      	b.n	80143a8 <HAL_ADC_ConfigChannel+0x834>
 8014372:	bf00      	nop
 8014374:	0801db9c 	.word	0x0801db9c
 8014378:	687b      	ldr	r3, [r7, #4]
 801437a:	681b      	ldr	r3, [r3, #0]
 801437c:	2103      	movs	r1, #3
 801437e:	4618      	mov	r0, r3
 8014380:	f7fe fc2e 	bl	8012be0 <LL_ADC_GetOffsetChannel>
 8014384:	4603      	mov	r3, r0
 8014386:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014388:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801438a:	fa93 f3a3 	rbit	r3, r3
 801438e:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 8014390:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8014392:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8014394:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8014396:	2b00      	cmp	r3, #0
 8014398:	d101      	bne.n	801439e <HAL_ADC_ConfigChannel+0x82a>
    return 32U;
 801439a:	2320      	movs	r3, #32
 801439c:	e003      	b.n	80143a6 <HAL_ADC_ConfigChannel+0x832>
  return __builtin_clz(value);
 801439e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80143a0:	fab3 f383 	clz	r3, r3
 80143a4:	b2db      	uxtb	r3, r3
 80143a6:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80143a8:	683b      	ldr	r3, [r7, #0]
 80143aa:	681b      	ldr	r3, [r3, #0]
 80143ac:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80143b0:	2b00      	cmp	r3, #0
 80143b2:	d105      	bne.n	80143c0 <HAL_ADC_ConfigChannel+0x84c>
 80143b4:	683b      	ldr	r3, [r7, #0]
 80143b6:	681b      	ldr	r3, [r3, #0]
 80143b8:	0e9b      	lsrs	r3, r3, #26
 80143ba:	f003 031f 	and.w	r3, r3, #31
 80143be:	e011      	b.n	80143e4 <HAL_ADC_ConfigChannel+0x870>
 80143c0:	683b      	ldr	r3, [r7, #0]
 80143c2:	681b      	ldr	r3, [r3, #0]
 80143c4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80143c6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80143c8:	fa93 f3a3 	rbit	r3, r3
 80143cc:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80143ce:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80143d0:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80143d2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80143d4:	2b00      	cmp	r3, #0
 80143d6:	d101      	bne.n	80143dc <HAL_ADC_ConfigChannel+0x868>
    return 32U;
 80143d8:	2320      	movs	r3, #32
 80143da:	e003      	b.n	80143e4 <HAL_ADC_ConfigChannel+0x870>
  return __builtin_clz(value);
 80143dc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80143de:	fab3 f383 	clz	r3, r3
 80143e2:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80143e4:	429a      	cmp	r2, r3
 80143e6:	d106      	bne.n	80143f6 <HAL_ADC_ConfigChannel+0x882>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80143e8:	687b      	ldr	r3, [r7, #4]
 80143ea:	681b      	ldr	r3, [r3, #0]
 80143ec:	2200      	movs	r2, #0
 80143ee:	2103      	movs	r1, #3
 80143f0:	4618      	mov	r0, r3
 80143f2:	f7fe fc0b 	bl	8012c0c <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80143f6:	687b      	ldr	r3, [r7, #4]
 80143f8:	681b      	ldr	r3, [r3, #0]
 80143fa:	4618      	mov	r0, r3
 80143fc:	f7fe fd76 	bl	8012eec <LL_ADC_IsEnabled>
 8014400:	4603      	mov	r3, r0
 8014402:	2b00      	cmp	r3, #0
 8014404:	f040 8140 	bne.w	8014688 <HAL_ADC_ConfigChannel+0xb14>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8014408:	687b      	ldr	r3, [r7, #4]
 801440a:	6818      	ldr	r0, [r3, #0]
 801440c:	683b      	ldr	r3, [r7, #0]
 801440e:	6819      	ldr	r1, [r3, #0]
 8014410:	683b      	ldr	r3, [r7, #0]
 8014412:	68db      	ldr	r3, [r3, #12]
 8014414:	461a      	mov	r2, r3
 8014416:	f7fe fcdb 	bl	8012dd0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 801441a:	683b      	ldr	r3, [r7, #0]
 801441c:	68db      	ldr	r3, [r3, #12]
 801441e:	4a8f      	ldr	r2, [pc, #572]	@ (801465c <HAL_ADC_ConfigChannel+0xae8>)
 8014420:	4293      	cmp	r3, r2
 8014422:	f040 8131 	bne.w	8014688 <HAL_ADC_ConfigChannel+0xb14>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801442a:	683b      	ldr	r3, [r7, #0]
 801442c:	681b      	ldr	r3, [r3, #0]
 801442e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014432:	2b00      	cmp	r3, #0
 8014434:	d10b      	bne.n	801444e <HAL_ADC_ConfigChannel+0x8da>
 8014436:	683b      	ldr	r3, [r7, #0]
 8014438:	681b      	ldr	r3, [r3, #0]
 801443a:	0e9b      	lsrs	r3, r3, #26
 801443c:	3301      	adds	r3, #1
 801443e:	f003 031f 	and.w	r3, r3, #31
 8014442:	2b09      	cmp	r3, #9
 8014444:	bf94      	ite	ls
 8014446:	2301      	movls	r3, #1
 8014448:	2300      	movhi	r3, #0
 801444a:	b2db      	uxtb	r3, r3
 801444c:	e019      	b.n	8014482 <HAL_ADC_ConfigChannel+0x90e>
 801444e:	683b      	ldr	r3, [r7, #0]
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014454:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8014456:	fa93 f3a3 	rbit	r3, r3
 801445a:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 801445c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801445e:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 8014460:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8014462:	2b00      	cmp	r3, #0
 8014464:	d101      	bne.n	801446a <HAL_ADC_ConfigChannel+0x8f6>
    return 32U;
 8014466:	2320      	movs	r3, #32
 8014468:	e003      	b.n	8014472 <HAL_ADC_ConfigChannel+0x8fe>
  return __builtin_clz(value);
 801446a:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801446c:	fab3 f383 	clz	r3, r3
 8014470:	b2db      	uxtb	r3, r3
 8014472:	3301      	adds	r3, #1
 8014474:	f003 031f 	and.w	r3, r3, #31
 8014478:	2b09      	cmp	r3, #9
 801447a:	bf94      	ite	ls
 801447c:	2301      	movls	r3, #1
 801447e:	2300      	movhi	r3, #0
 8014480:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014482:	2b00      	cmp	r3, #0
 8014484:	d079      	beq.n	801457a <HAL_ADC_ConfigChannel+0xa06>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8014486:	683b      	ldr	r3, [r7, #0]
 8014488:	681b      	ldr	r3, [r3, #0]
 801448a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801448e:	2b00      	cmp	r3, #0
 8014490:	d107      	bne.n	80144a2 <HAL_ADC_ConfigChannel+0x92e>
 8014492:	683b      	ldr	r3, [r7, #0]
 8014494:	681b      	ldr	r3, [r3, #0]
 8014496:	0e9b      	lsrs	r3, r3, #26
 8014498:	3301      	adds	r3, #1
 801449a:	069b      	lsls	r3, r3, #26
 801449c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80144a0:	e015      	b.n	80144ce <HAL_ADC_ConfigChannel+0x95a>
 80144a2:	683b      	ldr	r3, [r7, #0]
 80144a4:	681b      	ldr	r3, [r3, #0]
 80144a6:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80144a8:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80144aa:	fa93 f3a3 	rbit	r3, r3
 80144ae:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80144b0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80144b2:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80144b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144b6:	2b00      	cmp	r3, #0
 80144b8:	d101      	bne.n	80144be <HAL_ADC_ConfigChannel+0x94a>
    return 32U;
 80144ba:	2320      	movs	r3, #32
 80144bc:	e003      	b.n	80144c6 <HAL_ADC_ConfigChannel+0x952>
  return __builtin_clz(value);
 80144be:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80144c0:	fab3 f383 	clz	r3, r3
 80144c4:	b2db      	uxtb	r3, r3
 80144c6:	3301      	adds	r3, #1
 80144c8:	069b      	lsls	r3, r3, #26
 80144ca:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80144ce:	683b      	ldr	r3, [r7, #0]
 80144d0:	681b      	ldr	r3, [r3, #0]
 80144d2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80144d6:	2b00      	cmp	r3, #0
 80144d8:	d109      	bne.n	80144ee <HAL_ADC_ConfigChannel+0x97a>
 80144da:	683b      	ldr	r3, [r7, #0]
 80144dc:	681b      	ldr	r3, [r3, #0]
 80144de:	0e9b      	lsrs	r3, r3, #26
 80144e0:	3301      	adds	r3, #1
 80144e2:	f003 031f 	and.w	r3, r3, #31
 80144e6:	2101      	movs	r1, #1
 80144e8:	fa01 f303 	lsl.w	r3, r1, r3
 80144ec:	e017      	b.n	801451e <HAL_ADC_ConfigChannel+0x9aa>
 80144ee:	683b      	ldr	r3, [r7, #0]
 80144f0:	681b      	ldr	r3, [r3, #0]
 80144f2:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80144f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80144f6:	fa93 f3a3 	rbit	r3, r3
 80144fa:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80144fc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80144fe:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 8014500:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014502:	2b00      	cmp	r3, #0
 8014504:	d101      	bne.n	801450a <HAL_ADC_ConfigChannel+0x996>
    return 32U;
 8014506:	2320      	movs	r3, #32
 8014508:	e003      	b.n	8014512 <HAL_ADC_ConfigChannel+0x99e>
  return __builtin_clz(value);
 801450a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801450c:	fab3 f383 	clz	r3, r3
 8014510:	b2db      	uxtb	r3, r3
 8014512:	3301      	adds	r3, #1
 8014514:	f003 031f 	and.w	r3, r3, #31
 8014518:	2101      	movs	r1, #1
 801451a:	fa01 f303 	lsl.w	r3, r1, r3
 801451e:	ea42 0103 	orr.w	r1, r2, r3
 8014522:	683b      	ldr	r3, [r7, #0]
 8014524:	681b      	ldr	r3, [r3, #0]
 8014526:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801452a:	2b00      	cmp	r3, #0
 801452c:	d10a      	bne.n	8014544 <HAL_ADC_ConfigChannel+0x9d0>
 801452e:	683b      	ldr	r3, [r7, #0]
 8014530:	681b      	ldr	r3, [r3, #0]
 8014532:	0e9b      	lsrs	r3, r3, #26
 8014534:	3301      	adds	r3, #1
 8014536:	f003 021f 	and.w	r2, r3, #31
 801453a:	4613      	mov	r3, r2
 801453c:	005b      	lsls	r3, r3, #1
 801453e:	4413      	add	r3, r2
 8014540:	051b      	lsls	r3, r3, #20
 8014542:	e018      	b.n	8014576 <HAL_ADC_ConfigChannel+0xa02>
 8014544:	683b      	ldr	r3, [r7, #0]
 8014546:	681b      	ldr	r3, [r3, #0]
 8014548:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801454a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801454c:	fa93 f3a3 	rbit	r3, r3
 8014550:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 8014552:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014554:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8014556:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014558:	2b00      	cmp	r3, #0
 801455a:	d101      	bne.n	8014560 <HAL_ADC_ConfigChannel+0x9ec>
    return 32U;
 801455c:	2320      	movs	r3, #32
 801455e:	e003      	b.n	8014568 <HAL_ADC_ConfigChannel+0x9f4>
  return __builtin_clz(value);
 8014560:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014562:	fab3 f383 	clz	r3, r3
 8014566:	b2db      	uxtb	r3, r3
 8014568:	3301      	adds	r3, #1
 801456a:	f003 021f 	and.w	r2, r3, #31
 801456e:	4613      	mov	r3, r2
 8014570:	005b      	lsls	r3, r3, #1
 8014572:	4413      	add	r3, r2
 8014574:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014576:	430b      	orrs	r3, r1
 8014578:	e081      	b.n	801467e <HAL_ADC_ConfigChannel+0xb0a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 801457a:	683b      	ldr	r3, [r7, #0]
 801457c:	681b      	ldr	r3, [r3, #0]
 801457e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8014582:	2b00      	cmp	r3, #0
 8014584:	d107      	bne.n	8014596 <HAL_ADC_ConfigChannel+0xa22>
 8014586:	683b      	ldr	r3, [r7, #0]
 8014588:	681b      	ldr	r3, [r3, #0]
 801458a:	0e9b      	lsrs	r3, r3, #26
 801458c:	3301      	adds	r3, #1
 801458e:	069b      	lsls	r3, r3, #26
 8014590:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8014594:	e015      	b.n	80145c2 <HAL_ADC_ConfigChannel+0xa4e>
 8014596:	683b      	ldr	r3, [r7, #0]
 8014598:	681b      	ldr	r3, [r3, #0]
 801459a:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 801459c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801459e:	fa93 f3a3 	rbit	r3, r3
 80145a2:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80145a4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145a6:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80145a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145aa:	2b00      	cmp	r3, #0
 80145ac:	d101      	bne.n	80145b2 <HAL_ADC_ConfigChannel+0xa3e>
    return 32U;
 80145ae:	2320      	movs	r3, #32
 80145b0:	e003      	b.n	80145ba <HAL_ADC_ConfigChannel+0xa46>
  return __builtin_clz(value);
 80145b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80145b4:	fab3 f383 	clz	r3, r3
 80145b8:	b2db      	uxtb	r3, r3
 80145ba:	3301      	adds	r3, #1
 80145bc:	069b      	lsls	r3, r3, #26
 80145be:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80145c2:	683b      	ldr	r3, [r7, #0]
 80145c4:	681b      	ldr	r3, [r3, #0]
 80145c6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80145ca:	2b00      	cmp	r3, #0
 80145cc:	d109      	bne.n	80145e2 <HAL_ADC_ConfigChannel+0xa6e>
 80145ce:	683b      	ldr	r3, [r7, #0]
 80145d0:	681b      	ldr	r3, [r3, #0]
 80145d2:	0e9b      	lsrs	r3, r3, #26
 80145d4:	3301      	adds	r3, #1
 80145d6:	f003 031f 	and.w	r3, r3, #31
 80145da:	2101      	movs	r1, #1
 80145dc:	fa01 f303 	lsl.w	r3, r1, r3
 80145e0:	e017      	b.n	8014612 <HAL_ADC_ConfigChannel+0xa9e>
 80145e2:	683b      	ldr	r3, [r7, #0]
 80145e4:	681b      	ldr	r3, [r3, #0]
 80145e6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80145e8:	6a3b      	ldr	r3, [r7, #32]
 80145ea:	fa93 f3a3 	rbit	r3, r3
 80145ee:	61fb      	str	r3, [r7, #28]
  return result;
 80145f0:	69fb      	ldr	r3, [r7, #28]
 80145f2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80145f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80145f6:	2b00      	cmp	r3, #0
 80145f8:	d101      	bne.n	80145fe <HAL_ADC_ConfigChannel+0xa8a>
    return 32U;
 80145fa:	2320      	movs	r3, #32
 80145fc:	e003      	b.n	8014606 <HAL_ADC_ConfigChannel+0xa92>
  return __builtin_clz(value);
 80145fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014600:	fab3 f383 	clz	r3, r3
 8014604:	b2db      	uxtb	r3, r3
 8014606:	3301      	adds	r3, #1
 8014608:	f003 031f 	and.w	r3, r3, #31
 801460c:	2101      	movs	r1, #1
 801460e:	fa01 f303 	lsl.w	r3, r1, r3
 8014612:	ea42 0103 	orr.w	r1, r2, r3
 8014616:	683b      	ldr	r3, [r7, #0]
 8014618:	681b      	ldr	r3, [r3, #0]
 801461a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 801461e:	2b00      	cmp	r3, #0
 8014620:	d10d      	bne.n	801463e <HAL_ADC_ConfigChannel+0xaca>
 8014622:	683b      	ldr	r3, [r7, #0]
 8014624:	681b      	ldr	r3, [r3, #0]
 8014626:	0e9b      	lsrs	r3, r3, #26
 8014628:	3301      	adds	r3, #1
 801462a:	f003 021f 	and.w	r2, r3, #31
 801462e:	4613      	mov	r3, r2
 8014630:	005b      	lsls	r3, r3, #1
 8014632:	4413      	add	r3, r2
 8014634:	3b1e      	subs	r3, #30
 8014636:	051b      	lsls	r3, r3, #20
 8014638:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801463c:	e01e      	b.n	801467c <HAL_ADC_ConfigChannel+0xb08>
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	681b      	ldr	r3, [r3, #0]
 8014642:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8014644:	697b      	ldr	r3, [r7, #20]
 8014646:	fa93 f3a3 	rbit	r3, r3
 801464a:	613b      	str	r3, [r7, #16]
  return result;
 801464c:	693b      	ldr	r3, [r7, #16]
 801464e:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8014650:	69bb      	ldr	r3, [r7, #24]
 8014652:	2b00      	cmp	r3, #0
 8014654:	d104      	bne.n	8014660 <HAL_ADC_ConfigChannel+0xaec>
    return 32U;
 8014656:	2320      	movs	r3, #32
 8014658:	e006      	b.n	8014668 <HAL_ADC_ConfigChannel+0xaf4>
 801465a:	bf00      	nop
 801465c:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 8014660:	69bb      	ldr	r3, [r7, #24]
 8014662:	fab3 f383 	clz	r3, r3
 8014666:	b2db      	uxtb	r3, r3
 8014668:	3301      	adds	r3, #1
 801466a:	f003 021f 	and.w	r2, r3, #31
 801466e:	4613      	mov	r3, r2
 8014670:	005b      	lsls	r3, r3, #1
 8014672:	4413      	add	r3, r2
 8014674:	3b1e      	subs	r3, #30
 8014676:	051b      	lsls	r3, r3, #20
 8014678:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 801467c:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 801467e:	683a      	ldr	r2, [r7, #0]
 8014680:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8014682:	4619      	mov	r1, r3
 8014684:	f7fe fb78 	bl	8012d78 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8014688:	683b      	ldr	r3, [r7, #0]
 801468a:	681a      	ldr	r2, [r3, #0]
 801468c:	4b3f      	ldr	r3, [pc, #252]	@ (801478c <HAL_ADC_ConfigChannel+0xc18>)
 801468e:	4013      	ands	r3, r2
 8014690:	2b00      	cmp	r3, #0
 8014692:	d071      	beq.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8014694:	483e      	ldr	r0, [pc, #248]	@ (8014790 <HAL_ADC_ConfigChannel+0xc1c>)
 8014696:	f7fe fa63 	bl	8012b60 <LL_ADC_GetCommonPathInternalCh>
 801469a:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 801469e:	683b      	ldr	r3, [r7, #0]
 80146a0:	681b      	ldr	r3, [r3, #0]
 80146a2:	4a3c      	ldr	r2, [pc, #240]	@ (8014794 <HAL_ADC_ConfigChannel+0xc20>)
 80146a4:	4293      	cmp	r3, r2
 80146a6:	d004      	beq.n	80146b2 <HAL_ADC_ConfigChannel+0xb3e>
 80146a8:	683b      	ldr	r3, [r7, #0]
 80146aa:	681b      	ldr	r3, [r3, #0]
 80146ac:	4a3a      	ldr	r2, [pc, #232]	@ (8014798 <HAL_ADC_ConfigChannel+0xc24>)
 80146ae:	4293      	cmp	r3, r2
 80146b0:	d127      	bne.n	8014702 <HAL_ADC_ConfigChannel+0xb8e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80146b2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80146b6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d121      	bne.n	8014702 <HAL_ADC_ConfigChannel+0xb8e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80146be:	687b      	ldr	r3, [r7, #4]
 80146c0:	681b      	ldr	r3, [r3, #0]
 80146c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80146c6:	d157      	bne.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80146c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80146cc:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80146d0:	4619      	mov	r1, r3
 80146d2:	482f      	ldr	r0, [pc, #188]	@ (8014790 <HAL_ADC_ConfigChannel+0xc1c>)
 80146d4:	f7fe fa31 	bl	8012b3a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80146d8:	4b30      	ldr	r3, [pc, #192]	@ (801479c <HAL_ADC_ConfigChannel+0xc28>)
 80146da:	681b      	ldr	r3, [r3, #0]
 80146dc:	099b      	lsrs	r3, r3, #6
 80146de:	4a30      	ldr	r2, [pc, #192]	@ (80147a0 <HAL_ADC_ConfigChannel+0xc2c>)
 80146e0:	fba2 2303 	umull	r2, r3, r2, r3
 80146e4:	099b      	lsrs	r3, r3, #6
 80146e6:	1c5a      	adds	r2, r3, #1
 80146e8:	4613      	mov	r3, r2
 80146ea:	005b      	lsls	r3, r3, #1
 80146ec:	4413      	add	r3, r2
 80146ee:	009b      	lsls	r3, r3, #2
 80146f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80146f2:	e002      	b.n	80146fa <HAL_ADC_ConfigChannel+0xb86>
          {
            wait_loop_index--;
 80146f4:	68fb      	ldr	r3, [r7, #12]
 80146f6:	3b01      	subs	r3, #1
 80146f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80146fa:	68fb      	ldr	r3, [r7, #12]
 80146fc:	2b00      	cmp	r3, #0
 80146fe:	d1f9      	bne.n	80146f4 <HAL_ADC_ConfigChannel+0xb80>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8014700:	e03a      	b.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8014702:	683b      	ldr	r3, [r7, #0]
 8014704:	681b      	ldr	r3, [r3, #0]
 8014706:	4a27      	ldr	r2, [pc, #156]	@ (80147a4 <HAL_ADC_ConfigChannel+0xc30>)
 8014708:	4293      	cmp	r3, r2
 801470a:	d113      	bne.n	8014734 <HAL_ADC_ConfigChannel+0xbc0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 801470c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014710:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8014714:	2b00      	cmp	r3, #0
 8014716:	d10d      	bne.n	8014734 <HAL_ADC_ConfigChannel+0xbc0>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	4a22      	ldr	r2, [pc, #136]	@ (80147a8 <HAL_ADC_ConfigChannel+0xc34>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d02a      	beq.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014722:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014726:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 801472a:	4619      	mov	r1, r3
 801472c:	4818      	ldr	r0, [pc, #96]	@ (8014790 <HAL_ADC_ConfigChannel+0xc1c>)
 801472e:	f7fe fa04 	bl	8012b3a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8014732:	e021      	b.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8014734:	683b      	ldr	r3, [r7, #0]
 8014736:	681b      	ldr	r3, [r3, #0]
 8014738:	4a1c      	ldr	r2, [pc, #112]	@ (80147ac <HAL_ADC_ConfigChannel+0xc38>)
 801473a:	4293      	cmp	r3, r2
 801473c:	d11c      	bne.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 801473e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014742:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8014746:	2b00      	cmp	r3, #0
 8014748:	d116      	bne.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 801474a:	687b      	ldr	r3, [r7, #4]
 801474c:	681b      	ldr	r3, [r3, #0]
 801474e:	4a16      	ldr	r2, [pc, #88]	@ (80147a8 <HAL_ADC_ConfigChannel+0xc34>)
 8014750:	4293      	cmp	r3, r2
 8014752:	d011      	beq.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8014754:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8014758:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 801475c:	4619      	mov	r1, r3
 801475e:	480c      	ldr	r0, [pc, #48]	@ (8014790 <HAL_ADC_ConfigChannel+0xc1c>)
 8014760:	f7fe f9eb 	bl	8012b3a <LL_ADC_SetCommonPathInternalCh>
 8014764:	e008      	b.n	8014778 <HAL_ADC_ConfigChannel+0xc04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801476a:	f043 0220 	orr.w	r2, r3, #32
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8014772:	2301      	movs	r3, #1
 8014774:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014778:	687b      	ldr	r3, [r7, #4]
 801477a:	2200      	movs	r2, #0
 801477c:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8014780:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8014784:	4618      	mov	r0, r3
 8014786:	37dc      	adds	r7, #220	@ 0xdc
 8014788:	46bd      	mov	sp, r7
 801478a:	bd90      	pop	{r4, r7, pc}
 801478c:	80080000 	.word	0x80080000
 8014790:	50000300 	.word	0x50000300
 8014794:	c3210000 	.word	0xc3210000
 8014798:	90c00010 	.word	0x90c00010
 801479c:	20000000 	.word	0x20000000
 80147a0:	053e2d63 	.word	0x053e2d63
 80147a4:	c7520000 	.word	0xc7520000
 80147a8:	50000100 	.word	0x50000100
 80147ac:	cb840000 	.word	0xcb840000

080147b0 <LL_ADC_IsEnabled>:
{
 80147b0:	b480      	push	{r7}
 80147b2:	b083      	sub	sp, #12
 80147b4:	af00      	add	r7, sp, #0
 80147b6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80147b8:	687b      	ldr	r3, [r7, #4]
 80147ba:	689b      	ldr	r3, [r3, #8]
 80147bc:	f003 0301 	and.w	r3, r3, #1
 80147c0:	2b01      	cmp	r3, #1
 80147c2:	d101      	bne.n	80147c8 <LL_ADC_IsEnabled+0x18>
 80147c4:	2301      	movs	r3, #1
 80147c6:	e000      	b.n	80147ca <LL_ADC_IsEnabled+0x1a>
 80147c8:	2300      	movs	r3, #0
}
 80147ca:	4618      	mov	r0, r3
 80147cc:	370c      	adds	r7, #12
 80147ce:	46bd      	mov	sp, r7
 80147d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147d4:	4770      	bx	lr

080147d6 <LL_ADC_REG_IsConversionOngoing>:
{
 80147d6:	b480      	push	{r7}
 80147d8:	b083      	sub	sp, #12
 80147da:	af00      	add	r7, sp, #0
 80147dc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80147de:	687b      	ldr	r3, [r7, #4]
 80147e0:	689b      	ldr	r3, [r3, #8]
 80147e2:	f003 0304 	and.w	r3, r3, #4
 80147e6:	2b04      	cmp	r3, #4
 80147e8:	d101      	bne.n	80147ee <LL_ADC_REG_IsConversionOngoing+0x18>
 80147ea:	2301      	movs	r3, #1
 80147ec:	e000      	b.n	80147f0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80147ee:	2300      	movs	r3, #0
}
 80147f0:	4618      	mov	r0, r3
 80147f2:	370c      	adds	r7, #12
 80147f4:	46bd      	mov	sp, r7
 80147f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80147fa:	4770      	bx	lr

080147fc <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80147fc:	b480      	push	{r7}
 80147fe:	b083      	sub	sp, #12
 8014800:	af00      	add	r7, sp, #0
 8014802:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8014804:	bf00      	nop
 8014806:	370c      	adds	r7, #12
 8014808:	46bd      	mov	sp, r7
 801480a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801480e:	4770      	bx	lr

08014810 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8014810:	b480      	push	{r7}
 8014812:	b083      	sub	sp, #12
 8014814:	af00      	add	r7, sp, #0
 8014816:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8014818:	bf00      	nop
 801481a:	370c      	adds	r7, #12
 801481c:	46bd      	mov	sp, r7
 801481e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014822:	4770      	bx	lr

08014824 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8014824:	b480      	push	{r7}
 8014826:	b083      	sub	sp, #12
 8014828:	af00      	add	r7, sp, #0
 801482a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 801482c:	bf00      	nop
 801482e:	370c      	adds	r7, #12
 8014830:	46bd      	mov	sp, r7
 8014832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014836:	4770      	bx	lr

08014838 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8014838:	b480      	push	{r7}
 801483a:	b083      	sub	sp, #12
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8014840:	bf00      	nop
 8014842:	370c      	adds	r7, #12
 8014844:	46bd      	mov	sp, r7
 8014846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801484a:	4770      	bx	lr

0801484c <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 801484c:	b480      	push	{r7}
 801484e:	b083      	sub	sp, #12
 8014850:	af00      	add	r7, sp, #0
 8014852:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8014854:	bf00      	nop
 8014856:	370c      	adds	r7, #12
 8014858:	46bd      	mov	sp, r7
 801485a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801485e:	4770      	bx	lr

08014860 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 8014860:	b590      	push	{r4, r7, lr}
 8014862:	b0a1      	sub	sp, #132	@ 0x84
 8014864:	af00      	add	r7, sp, #0
 8014866:	6078      	str	r0, [r7, #4]
 8014868:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 801486a:	2300      	movs	r3, #0
 801486c:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmp_hadc_slave;
  uint32_t tmp_hadc_slave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 8014870:	687b      	ldr	r3, [r7, #4]
 8014872:	681b      	ldr	r3, [r3, #0]
 8014874:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8014878:	d004      	beq.n	8014884 <HAL_ADCEx_MultiModeConfigChannel+0x24>
 801487a:	f640 014c 	movw	r1, #2124	@ 0x84c
 801487e:	488b      	ldr	r0, [pc, #556]	@ (8014aac <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 8014880:	f7fd fe18 	bl	80124b4 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(pMultimode->Mode));
 8014884:	683b      	ldr	r3, [r7, #0]
 8014886:	681b      	ldr	r3, [r3, #0]
 8014888:	2b00      	cmp	r3, #0
 801488a:	d020      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 801488c:	683b      	ldr	r3, [r7, #0]
 801488e:	681b      	ldr	r3, [r3, #0]
 8014890:	2b01      	cmp	r3, #1
 8014892:	d01c      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8014894:	683b      	ldr	r3, [r7, #0]
 8014896:	681b      	ldr	r3, [r3, #0]
 8014898:	2b02      	cmp	r3, #2
 801489a:	d018      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	681b      	ldr	r3, [r3, #0]
 80148a0:	2b03      	cmp	r3, #3
 80148a2:	d014      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80148a4:	683b      	ldr	r3, [r7, #0]
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2b05      	cmp	r3, #5
 80148aa:	d010      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80148ac:	683b      	ldr	r3, [r7, #0]
 80148ae:	681b      	ldr	r3, [r3, #0]
 80148b0:	2b06      	cmp	r3, #6
 80148b2:	d00c      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80148b4:	683b      	ldr	r3, [r7, #0]
 80148b6:	681b      	ldr	r3, [r3, #0]
 80148b8:	2b07      	cmp	r3, #7
 80148ba:	d008      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80148bc:	683b      	ldr	r3, [r7, #0]
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	2b09      	cmp	r3, #9
 80148c2:	d004      	beq.n	80148ce <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80148c4:	f640 014d 	movw	r1, #2125	@ 0x84d
 80148c8:	4878      	ldr	r0, [pc, #480]	@ (8014aac <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 80148ca:	f7fd fdf3 	bl	80124b4 <assert_failed>
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80148ce:	683b      	ldr	r3, [r7, #0]
 80148d0:	681b      	ldr	r3, [r3, #0]
 80148d2:	2b00      	cmp	r3, #0
 80148d4:	d052      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
 80148d6:	683b      	ldr	r3, [r7, #0]
 80148d8:	685b      	ldr	r3, [r3, #4]
 80148da:	2b00      	cmp	r3, #0
 80148dc:	d00e      	beq.n	80148fc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80148de:	683b      	ldr	r3, [r7, #0]
 80148e0:	685b      	ldr	r3, [r3, #4]
 80148e2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80148e6:	d009      	beq.n	80148fc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80148e8:	683b      	ldr	r3, [r7, #0]
 80148ea:	685b      	ldr	r3, [r3, #4]
 80148ec:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80148f0:	d004      	beq.n	80148fc <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80148f2:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 80148f6:	486d      	ldr	r0, [pc, #436]	@ (8014aac <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 80148f8:	f7fd fddc 	bl	80124b4 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
 80148fc:	683b      	ldr	r3, [r7, #0]
 80148fe:	689b      	ldr	r3, [r3, #8]
 8014900:	2b00      	cmp	r3, #0
 8014902:	d03b      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014904:	683b      	ldr	r3, [r7, #0]
 8014906:	689b      	ldr	r3, [r3, #8]
 8014908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801490c:	d036      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 801490e:	683b      	ldr	r3, [r7, #0]
 8014910:	689b      	ldr	r3, [r3, #8]
 8014912:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014916:	d031      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014918:	683b      	ldr	r3, [r7, #0]
 801491a:	689b      	ldr	r3, [r3, #8]
 801491c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014920:	d02c      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	689b      	ldr	r3, [r3, #8]
 8014926:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801492a:	d027      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 801492c:	683b      	ldr	r3, [r7, #0]
 801492e:	689b      	ldr	r3, [r3, #8]
 8014930:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8014934:	d022      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014936:	683b      	ldr	r3, [r7, #0]
 8014938:	689b      	ldr	r3, [r3, #8]
 801493a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801493e:	d01d      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014940:	683b      	ldr	r3, [r7, #0]
 8014942:	689b      	ldr	r3, [r3, #8]
 8014944:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8014948:	d018      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 801494a:	683b      	ldr	r3, [r7, #0]
 801494c:	689b      	ldr	r3, [r3, #8]
 801494e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014952:	d013      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014954:	683b      	ldr	r3, [r7, #0]
 8014956:	689b      	ldr	r3, [r3, #8]
 8014958:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 801495c:	d00e      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 801495e:	683b      	ldr	r3, [r7, #0]
 8014960:	689b      	ldr	r3, [r3, #8]
 8014962:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8014966:	d009      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014968:	683b      	ldr	r3, [r7, #0]
 801496a:	689b      	ldr	r3, [r3, #8]
 801496c:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8014970:	d004      	beq.n	801497c <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8014972:	f640 0151 	movw	r1, #2129	@ 0x851
 8014976:	484d      	ldr	r0, [pc, #308]	@ (8014aac <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 8014978:	f7fd fd9c 	bl	80124b4 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 801497c:	687b      	ldr	r3, [r7, #4]
 801497e:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8014982:	2b01      	cmp	r3, #1
 8014984:	d101      	bne.n	801498a <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 8014986:	2302      	movs	r3, #2
 8014988:	e08b      	b.n	8014aa2 <HAL_ADCEx_MultiModeConfigChannel+0x242>
 801498a:	687b      	ldr	r3, [r7, #4]
 801498c:	2201      	movs	r2, #1
 801498e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 8014992:	2300      	movs	r3, #0
 8014994:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8014996:	2300      	movs	r3, #0
 8014998:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	681b      	ldr	r3, [r3, #0]
 801499e:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80149a2:	d102      	bne.n	80149aa <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 80149a4:	4b42      	ldr	r3, [pc, #264]	@ (8014ab0 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 80149a6:	60bb      	str	r3, [r7, #8]
 80149a8:	e001      	b.n	80149ae <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80149aa:	2300      	movs	r3, #0
 80149ac:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80149ae:	68bb      	ldr	r3, [r7, #8]
 80149b0:	2b00      	cmp	r3, #0
 80149b2:	d10b      	bne.n	80149cc <HAL_ADCEx_MultiModeConfigChannel+0x16c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80149b4:	687b      	ldr	r3, [r7, #4]
 80149b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80149b8:	f043 0220 	orr.w	r2, r3, #32
 80149bc:	687b      	ldr	r3, [r7, #4]
 80149be:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80149c0:	687b      	ldr	r3, [r7, #4]
 80149c2:	2200      	movs	r2, #0
 80149c4:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80149c8:	2301      	movs	r3, #1
 80149ca:	e06a      	b.n	8014aa2 <HAL_ADCEx_MultiModeConfigChannel+0x242>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80149cc:	68bb      	ldr	r3, [r7, #8]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7ff ff01 	bl	80147d6 <LL_ADC_REG_IsConversionOngoing>
 80149d4:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	681b      	ldr	r3, [r3, #0]
 80149da:	4618      	mov	r0, r3
 80149dc:	f7ff fefb 	bl	80147d6 <LL_ADC_REG_IsConversionOngoing>
 80149e0:	4603      	mov	r3, r0
 80149e2:	2b00      	cmp	r3, #0
 80149e4:	d14c      	bne.n	8014a80 <HAL_ADCEx_MultiModeConfigChannel+0x220>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80149e6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80149e8:	2b00      	cmp	r3, #0
 80149ea:	d149      	bne.n	8014a80 <HAL_ADCEx_MultiModeConfigChannel+0x220>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80149ec:	4b31      	ldr	r3, [pc, #196]	@ (8014ab4 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80149ee:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80149f0:	683b      	ldr	r3, [r7, #0]
 80149f2:	681b      	ldr	r3, [r3, #0]
 80149f4:	2b00      	cmp	r3, #0
 80149f6:	d028      	beq.n	8014a4a <HAL_ADCEx_MultiModeConfigChannel+0x1ea>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80149f8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80149fa:	689b      	ldr	r3, [r3, #8]
 80149fc:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8014a00:	683b      	ldr	r3, [r7, #0]
 8014a02:	6859      	ldr	r1, [r3, #4]
 8014a04:	687b      	ldr	r3, [r7, #4]
 8014a06:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8014a0a:	035b      	lsls	r3, r3, #13
 8014a0c:	430b      	orrs	r3, r1
 8014a0e:	431a      	orrs	r2, r3
 8014a10:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a12:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014a14:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8014a18:	f7ff feca 	bl	80147b0 <LL_ADC_IsEnabled>
 8014a1c:	4604      	mov	r4, r0
 8014a1e:	4824      	ldr	r0, [pc, #144]	@ (8014ab0 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8014a20:	f7ff fec6 	bl	80147b0 <LL_ADC_IsEnabled>
 8014a24:	4603      	mov	r3, r0
 8014a26:	4323      	orrs	r3, r4
 8014a28:	2b00      	cmp	r3, #0
 8014a2a:	d133      	bne.n	8014a94 <HAL_ADCEx_MultiModeConfigChannel+0x234>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8014a2c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a2e:	689b      	ldr	r3, [r3, #8]
 8014a30:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8014a34:	f023 030f 	bic.w	r3, r3, #15
 8014a38:	683a      	ldr	r2, [r7, #0]
 8014a3a:	6811      	ldr	r1, [r2, #0]
 8014a3c:	683a      	ldr	r2, [r7, #0]
 8014a3e:	6892      	ldr	r2, [r2, #8]
 8014a40:	430a      	orrs	r2, r1
 8014a42:	431a      	orrs	r2, r3
 8014a44:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a46:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014a48:	e024      	b.n	8014a94 <HAL_ADCEx_MultiModeConfigChannel+0x234>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8014a4a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a4c:	689b      	ldr	r3, [r3, #8]
 8014a4e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8014a52:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a54:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8014a56:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8014a5a:	f7ff fea9 	bl	80147b0 <LL_ADC_IsEnabled>
 8014a5e:	4604      	mov	r4, r0
 8014a60:	4813      	ldr	r0, [pc, #76]	@ (8014ab0 <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 8014a62:	f7ff fea5 	bl	80147b0 <LL_ADC_IsEnabled>
 8014a66:	4603      	mov	r3, r0
 8014a68:	4323      	orrs	r3, r4
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d112      	bne.n	8014a94 <HAL_ADCEx_MultiModeConfigChannel+0x234>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8014a6e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8014a70:	689b      	ldr	r3, [r3, #8]
 8014a72:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8014a76:	f023 030f 	bic.w	r3, r3, #15
 8014a7a:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8014a7c:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014a7e:	e009      	b.n	8014a94 <HAL_ADCEx_MultiModeConfigChannel+0x234>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8014a80:	687b      	ldr	r3, [r7, #4]
 8014a82:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8014a84:	f043 0220 	orr.w	r2, r3, #32
 8014a88:	687b      	ldr	r3, [r7, #4]
 8014a8a:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8014a8c:	2301      	movs	r3, #1
 8014a8e:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 8014a92:	e000      	b.n	8014a96 <HAL_ADCEx_MultiModeConfigChannel+0x236>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8014a94:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8014a96:	687b      	ldr	r3, [r7, #4]
 8014a98:	2200      	movs	r2, #0
 8014a9a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 8014a9e:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	3784      	adds	r7, #132	@ 0x84
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	bd90      	pop	{r4, r7, pc}
 8014aaa:	bf00      	nop
 8014aac:	0801dbd4 	.word	0x0801dbd4
 8014ab0:	50000100 	.word	0x50000100
 8014ab4:	50000300 	.word	0x50000300

08014ab8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014ab8:	b480      	push	{r7}
 8014aba:	b085      	sub	sp, #20
 8014abc:	af00      	add	r7, sp, #0
 8014abe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8014ac0:	687b      	ldr	r3, [r7, #4]
 8014ac2:	f003 0307 	and.w	r3, r3, #7
 8014ac6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8014ac8:	4b0c      	ldr	r3, [pc, #48]	@ (8014afc <__NVIC_SetPriorityGrouping+0x44>)
 8014aca:	68db      	ldr	r3, [r3, #12]
 8014acc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8014ace:	68ba      	ldr	r2, [r7, #8]
 8014ad0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8014ad4:	4013      	ands	r3, r2
 8014ad6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8014adc:	68bb      	ldr	r3, [r7, #8]
 8014ade:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8014ae0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8014ae4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8014ae8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8014aea:	4a04      	ldr	r2, [pc, #16]	@ (8014afc <__NVIC_SetPriorityGrouping+0x44>)
 8014aec:	68bb      	ldr	r3, [r7, #8]
 8014aee:	60d3      	str	r3, [r2, #12]
}
 8014af0:	bf00      	nop
 8014af2:	3714      	adds	r7, #20
 8014af4:	46bd      	mov	sp, r7
 8014af6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014afa:	4770      	bx	lr
 8014afc:	e000ed00 	.word	0xe000ed00

08014b00 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8014b00:	b480      	push	{r7}
 8014b02:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8014b04:	4b04      	ldr	r3, [pc, #16]	@ (8014b18 <__NVIC_GetPriorityGrouping+0x18>)
 8014b06:	68db      	ldr	r3, [r3, #12]
 8014b08:	0a1b      	lsrs	r3, r3, #8
 8014b0a:	f003 0307 	and.w	r3, r3, #7
}
 8014b0e:	4618      	mov	r0, r3
 8014b10:	46bd      	mov	sp, r7
 8014b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b16:	4770      	bx	lr
 8014b18:	e000ed00 	.word	0xe000ed00

08014b1c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014b1c:	b480      	push	{r7}
 8014b1e:	b083      	sub	sp, #12
 8014b20:	af00      	add	r7, sp, #0
 8014b22:	4603      	mov	r3, r0
 8014b24:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014b26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b2a:	2b00      	cmp	r3, #0
 8014b2c:	db0b      	blt.n	8014b46 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8014b2e:	79fb      	ldrb	r3, [r7, #7]
 8014b30:	f003 021f 	and.w	r2, r3, #31
 8014b34:	4907      	ldr	r1, [pc, #28]	@ (8014b54 <__NVIC_EnableIRQ+0x38>)
 8014b36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b3a:	095b      	lsrs	r3, r3, #5
 8014b3c:	2001      	movs	r0, #1
 8014b3e:	fa00 f202 	lsl.w	r2, r0, r2
 8014b42:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8014b46:	bf00      	nop
 8014b48:	370c      	adds	r7, #12
 8014b4a:	46bd      	mov	sp, r7
 8014b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014b50:	4770      	bx	lr
 8014b52:	bf00      	nop
 8014b54:	e000e100 	.word	0xe000e100

08014b58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8014b58:	b480      	push	{r7}
 8014b5a:	b083      	sub	sp, #12
 8014b5c:	af00      	add	r7, sp, #0
 8014b5e:	4603      	mov	r3, r0
 8014b60:	6039      	str	r1, [r7, #0]
 8014b62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8014b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b68:	2b00      	cmp	r3, #0
 8014b6a:	db0a      	blt.n	8014b82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b6c:	683b      	ldr	r3, [r7, #0]
 8014b6e:	b2da      	uxtb	r2, r3
 8014b70:	490c      	ldr	r1, [pc, #48]	@ (8014ba4 <__NVIC_SetPriority+0x4c>)
 8014b72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014b76:	0112      	lsls	r2, r2, #4
 8014b78:	b2d2      	uxtb	r2, r2
 8014b7a:	440b      	add	r3, r1
 8014b7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8014b80:	e00a      	b.n	8014b98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8014b82:	683b      	ldr	r3, [r7, #0]
 8014b84:	b2da      	uxtb	r2, r3
 8014b86:	4908      	ldr	r1, [pc, #32]	@ (8014ba8 <__NVIC_SetPriority+0x50>)
 8014b88:	79fb      	ldrb	r3, [r7, #7]
 8014b8a:	f003 030f 	and.w	r3, r3, #15
 8014b8e:	3b04      	subs	r3, #4
 8014b90:	0112      	lsls	r2, r2, #4
 8014b92:	b2d2      	uxtb	r2, r2
 8014b94:	440b      	add	r3, r1
 8014b96:	761a      	strb	r2, [r3, #24]
}
 8014b98:	bf00      	nop
 8014b9a:	370c      	adds	r7, #12
 8014b9c:	46bd      	mov	sp, r7
 8014b9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014ba2:	4770      	bx	lr
 8014ba4:	e000e100 	.word	0xe000e100
 8014ba8:	e000ed00 	.word	0xe000ed00

08014bac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014bac:	b480      	push	{r7}
 8014bae:	b089      	sub	sp, #36	@ 0x24
 8014bb0:	af00      	add	r7, sp, #0
 8014bb2:	60f8      	str	r0, [r7, #12]
 8014bb4:	60b9      	str	r1, [r7, #8]
 8014bb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8014bb8:	68fb      	ldr	r3, [r7, #12]
 8014bba:	f003 0307 	and.w	r3, r3, #7
 8014bbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8014bc0:	69fb      	ldr	r3, [r7, #28]
 8014bc2:	f1c3 0307 	rsb	r3, r3, #7
 8014bc6:	2b04      	cmp	r3, #4
 8014bc8:	bf28      	it	cs
 8014bca:	2304      	movcs	r3, #4
 8014bcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8014bce:	69fb      	ldr	r3, [r7, #28]
 8014bd0:	3304      	adds	r3, #4
 8014bd2:	2b06      	cmp	r3, #6
 8014bd4:	d902      	bls.n	8014bdc <NVIC_EncodePriority+0x30>
 8014bd6:	69fb      	ldr	r3, [r7, #28]
 8014bd8:	3b03      	subs	r3, #3
 8014bda:	e000      	b.n	8014bde <NVIC_EncodePriority+0x32>
 8014bdc:	2300      	movs	r3, #0
 8014bde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014be0:	f04f 32ff 	mov.w	r2, #4294967295
 8014be4:	69bb      	ldr	r3, [r7, #24]
 8014be6:	fa02 f303 	lsl.w	r3, r2, r3
 8014bea:	43da      	mvns	r2, r3
 8014bec:	68bb      	ldr	r3, [r7, #8]
 8014bee:	401a      	ands	r2, r3
 8014bf0:	697b      	ldr	r3, [r7, #20]
 8014bf2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8014bf4:	f04f 31ff 	mov.w	r1, #4294967295
 8014bf8:	697b      	ldr	r3, [r7, #20]
 8014bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8014bfe:	43d9      	mvns	r1, r3
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8014c04:	4313      	orrs	r3, r2
         );
}
 8014c06:	4618      	mov	r0, r3
 8014c08:	3724      	adds	r7, #36	@ 0x24
 8014c0a:	46bd      	mov	sp, r7
 8014c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c10:	4770      	bx	lr
	...

08014c14 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8014c14:	b480      	push	{r7}
 8014c16:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8014c18:	f3bf 8f4f 	dsb	sy
}
 8014c1c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8014c1e:	4b06      	ldr	r3, [pc, #24]	@ (8014c38 <__NVIC_SystemReset+0x24>)
 8014c20:	68db      	ldr	r3, [r3, #12]
 8014c22:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8014c26:	4904      	ldr	r1, [pc, #16]	@ (8014c38 <__NVIC_SystemReset+0x24>)
 8014c28:	4b04      	ldr	r3, [pc, #16]	@ (8014c3c <__NVIC_SystemReset+0x28>)
 8014c2a:	4313      	orrs	r3, r2
 8014c2c:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8014c2e:	f3bf 8f4f 	dsb	sy
}
 8014c32:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8014c34:	bf00      	nop
 8014c36:	e7fd      	b.n	8014c34 <__NVIC_SystemReset+0x20>
 8014c38:	e000ed00 	.word	0xe000ed00
 8014c3c:	05fa0004 	.word	0x05fa0004

08014c40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8014c40:	b580      	push	{r7, lr}
 8014c42:	b082      	sub	sp, #8
 8014c44:	af00      	add	r7, sp, #0
 8014c46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8014c48:	687b      	ldr	r3, [r7, #4]
 8014c4a:	2b07      	cmp	r3, #7
 8014c4c:	d00f      	beq.n	8014c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8014c4e:	687b      	ldr	r3, [r7, #4]
 8014c50:	2b06      	cmp	r3, #6
 8014c52:	d00c      	beq.n	8014c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8014c54:	687b      	ldr	r3, [r7, #4]
 8014c56:	2b05      	cmp	r3, #5
 8014c58:	d009      	beq.n	8014c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8014c5a:	687b      	ldr	r3, [r7, #4]
 8014c5c:	2b04      	cmp	r3, #4
 8014c5e:	d006      	beq.n	8014c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8014c60:	687b      	ldr	r3, [r7, #4]
 8014c62:	2b03      	cmp	r3, #3
 8014c64:	d003      	beq.n	8014c6e <HAL_NVIC_SetPriorityGrouping+0x2e>
 8014c66:	21a6      	movs	r1, #166	@ 0xa6
 8014c68:	4804      	ldr	r0, [pc, #16]	@ (8014c7c <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8014c6a:	f7fd fc23 	bl	80124b4 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8014c6e:	6878      	ldr	r0, [r7, #4]
 8014c70:	f7ff ff22 	bl	8014ab8 <__NVIC_SetPriorityGrouping>
}
 8014c74:	bf00      	nop
 8014c76:	3708      	adds	r7, #8
 8014c78:	46bd      	mov	sp, r7
 8014c7a:	bd80      	pop	{r7, pc}
 8014c7c:	0801dc10 	.word	0x0801dc10

08014c80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8014c80:	b580      	push	{r7, lr}
 8014c82:	b086      	sub	sp, #24
 8014c84:	af00      	add	r7, sp, #0
 8014c86:	4603      	mov	r3, r0
 8014c88:	60b9      	str	r1, [r7, #8]
 8014c8a:	607a      	str	r2, [r7, #4]
 8014c8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8014c8e:	687b      	ldr	r3, [r7, #4]
 8014c90:	2b0f      	cmp	r3, #15
 8014c92:	d903      	bls.n	8014c9c <HAL_NVIC_SetPriority+0x1c>
 8014c94:	21be      	movs	r1, #190	@ 0xbe
 8014c96:	480e      	ldr	r0, [pc, #56]	@ (8014cd0 <HAL_NVIC_SetPriority+0x50>)
 8014c98:	f7fd fc0c 	bl	80124b4 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8014c9c:	68bb      	ldr	r3, [r7, #8]
 8014c9e:	2b0f      	cmp	r3, #15
 8014ca0:	d903      	bls.n	8014caa <HAL_NVIC_SetPriority+0x2a>
 8014ca2:	21bf      	movs	r1, #191	@ 0xbf
 8014ca4:	480a      	ldr	r0, [pc, #40]	@ (8014cd0 <HAL_NVIC_SetPriority+0x50>)
 8014ca6:	f7fd fc05 	bl	80124b4 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8014caa:	f7ff ff29 	bl	8014b00 <__NVIC_GetPriorityGrouping>
 8014cae:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8014cb0:	687a      	ldr	r2, [r7, #4]
 8014cb2:	68b9      	ldr	r1, [r7, #8]
 8014cb4:	6978      	ldr	r0, [r7, #20]
 8014cb6:	f7ff ff79 	bl	8014bac <NVIC_EncodePriority>
 8014cba:	4602      	mov	r2, r0
 8014cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014cc0:	4611      	mov	r1, r2
 8014cc2:	4618      	mov	r0, r3
 8014cc4:	f7ff ff48 	bl	8014b58 <__NVIC_SetPriority>
}
 8014cc8:	bf00      	nop
 8014cca:	3718      	adds	r7, #24
 8014ccc:	46bd      	mov	sp, r7
 8014cce:	bd80      	pop	{r7, pc}
 8014cd0:	0801dc10 	.word	0x0801dc10

08014cd4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8014cd4:	b580      	push	{r7, lr}
 8014cd6:	b082      	sub	sp, #8
 8014cd8:	af00      	add	r7, sp, #0
 8014cda:	4603      	mov	r3, r0
 8014cdc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8014cde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	da03      	bge.n	8014cee <HAL_NVIC_EnableIRQ+0x1a>
 8014ce6:	21d2      	movs	r1, #210	@ 0xd2
 8014ce8:	4805      	ldr	r0, [pc, #20]	@ (8014d00 <HAL_NVIC_EnableIRQ+0x2c>)
 8014cea:	f7fd fbe3 	bl	80124b4 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8014cee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014cf2:	4618      	mov	r0, r3
 8014cf4:	f7ff ff12 	bl	8014b1c <__NVIC_EnableIRQ>
}
 8014cf8:	bf00      	nop
 8014cfa:	3708      	adds	r7, #8
 8014cfc:	46bd      	mov	sp, r7
 8014cfe:	bd80      	pop	{r7, pc}
 8014d00:	0801dc10 	.word	0x0801dc10

08014d04 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8014d04:	b580      	push	{r7, lr}
 8014d06:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8014d08:	f7ff ff84 	bl	8014c14 <__NVIC_SystemReset>

08014d0c <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8014d0c:	b580      	push	{r7, lr}
 8014d0e:	b082      	sub	sp, #8
 8014d10:	af00      	add	r7, sp, #0
 8014d12:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	2b00      	cmp	r3, #0
 8014d18:	d101      	bne.n	8014d1e <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8014d1a:	2301      	movs	r3, #1
 8014d1c:	e023      	b.n	8014d66 <HAL_DAC_Init+0x5a>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8014d1e:	687b      	ldr	r3, [r7, #4]
 8014d20:	681b      	ldr	r3, [r3, #0]
 8014d22:	4a13      	ldr	r2, [pc, #76]	@ (8014d70 <HAL_DAC_Init+0x64>)
 8014d24:	4293      	cmp	r3, r2
 8014d26:	d009      	beq.n	8014d3c <HAL_DAC_Init+0x30>
 8014d28:	687b      	ldr	r3, [r7, #4]
 8014d2a:	681b      	ldr	r3, [r3, #0]
 8014d2c:	4a11      	ldr	r2, [pc, #68]	@ (8014d74 <HAL_DAC_Init+0x68>)
 8014d2e:	4293      	cmp	r3, r2
 8014d30:	d004      	beq.n	8014d3c <HAL_DAC_Init+0x30>
 8014d32:	f240 119d 	movw	r1, #413	@ 0x19d
 8014d36:	4810      	ldr	r0, [pc, #64]	@ (8014d78 <HAL_DAC_Init+0x6c>)
 8014d38:	f7fd fbbc 	bl	80124b4 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8014d3c:	687b      	ldr	r3, [r7, #4]
 8014d3e:	791b      	ldrb	r3, [r3, #4]
 8014d40:	b2db      	uxtb	r3, r3
 8014d42:	2b00      	cmp	r3, #0
 8014d44:	d105      	bne.n	8014d52 <HAL_DAC_Init+0x46>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8014d46:	687b      	ldr	r3, [r7, #4]
 8014d48:	2200      	movs	r2, #0
 8014d4a:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8014d4c:	6878      	ldr	r0, [r7, #4]
 8014d4e:	f7fd f9cf 	bl	80120f0 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8014d52:	687b      	ldr	r3, [r7, #4]
 8014d54:	2202      	movs	r2, #2
 8014d56:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8014d58:	687b      	ldr	r3, [r7, #4]
 8014d5a:	2200      	movs	r2, #0
 8014d5c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8014d5e:	687b      	ldr	r3, [r7, #4]
 8014d60:	2201      	movs	r2, #1
 8014d62:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8014d64:	2300      	movs	r3, #0
}
 8014d66:	4618      	mov	r0, r3
 8014d68:	3708      	adds	r7, #8
 8014d6a:	46bd      	mov	sp, r7
 8014d6c:	bd80      	pop	{r7, pc}
 8014d6e:	bf00      	nop
 8014d70:	50000800 	.word	0x50000800
 8014d74:	50001000 	.word	0x50001000
 8014d78:	0801dc4c 	.word	0x0801dc4c

08014d7c <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8014d7c:	b580      	push	{r7, lr}
 8014d7e:	b08a      	sub	sp, #40	@ 0x28
 8014d80:	af00      	add	r7, sp, #0
 8014d82:	60f8      	str	r0, [r7, #12]
 8014d84:	60b9      	str	r1, [r7, #8]
 8014d86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8014d88:	2300      	movs	r3, #0
 8014d8a:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8014d8c:	68fb      	ldr	r3, [r7, #12]
 8014d8e:	2b00      	cmp	r3, #0
 8014d90:	d002      	beq.n	8014d98 <HAL_DAC_ConfigChannel+0x1c>
 8014d92:	68bb      	ldr	r3, [r7, #8]
 8014d94:	2b00      	cmp	r3, #0
 8014d96:	d101      	bne.n	8014d9c <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8014d98:	2301      	movs	r3, #1
 8014d9a:	e29c      	b.n	80152d6 <HAL_DAC_ConfigChannel+0x55a>
  }

  /* Check the DAC parameters */
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
 8014d9c:	68bb      	ldr	r3, [r7, #8]
 8014d9e:	681b      	ldr	r3, [r3, #0]
 8014da0:	2b00      	cmp	r3, #0
 8014da2:	d012      	beq.n	8014dca <HAL_DAC_ConfigChannel+0x4e>
 8014da4:	68bb      	ldr	r3, [r7, #8]
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8014dac:	d00d      	beq.n	8014dca <HAL_DAC_ConfigChannel+0x4e>
 8014dae:	68bb      	ldr	r3, [r7, #8]
 8014db0:	681b      	ldr	r3, [r3, #0]
 8014db2:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8014db6:	d008      	beq.n	8014dca <HAL_DAC_ConfigChannel+0x4e>
 8014db8:	68bb      	ldr	r3, [r7, #8]
 8014dba:	681b      	ldr	r3, [r3, #0]
 8014dbc:	2b02      	cmp	r3, #2
 8014dbe:	d004      	beq.n	8014dca <HAL_DAC_ConfigChannel+0x4e>
 8014dc0:	f240 4189 	movw	r1, #1161	@ 0x489
 8014dc4:	488b      	ldr	r0, [pc, #556]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014dc6:	f7fd fb75 	bl	80124b4 <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger));
 8014dca:	68bb      	ldr	r3, [r7, #8]
 8014dcc:	68db      	ldr	r3, [r3, #12]
 8014dce:	2b00      	cmp	r3, #0
 8014dd0:	d028      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014dd2:	68bb      	ldr	r3, [r7, #8]
 8014dd4:	68db      	ldr	r3, [r3, #12]
 8014dd6:	2b02      	cmp	r3, #2
 8014dd8:	d024      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014dda:	68bb      	ldr	r3, [r7, #8]
 8014ddc:	68db      	ldr	r3, [r3, #12]
 8014dde:	2b0a      	cmp	r3, #10
 8014de0:	d020      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014de2:	68bb      	ldr	r3, [r7, #8]
 8014de4:	68db      	ldr	r3, [r3, #12]
 8014de6:	2b0e      	cmp	r3, #14
 8014de8:	d01c      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014dea:	68bb      	ldr	r3, [r7, #8]
 8014dec:	68db      	ldr	r3, [r3, #12]
 8014dee:	2b12      	cmp	r3, #18
 8014df0:	d018      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	68db      	ldr	r3, [r3, #12]
 8014df6:	2b16      	cmp	r3, #22
 8014df8:	d014      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014dfa:	68bb      	ldr	r3, [r7, #8]
 8014dfc:	68db      	ldr	r3, [r3, #12]
 8014dfe:	2b1a      	cmp	r3, #26
 8014e00:	d010      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014e02:	68bb      	ldr	r3, [r7, #8]
 8014e04:	68db      	ldr	r3, [r3, #12]
 8014e06:	2b1e      	cmp	r3, #30
 8014e08:	d00c      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014e0a:	68bb      	ldr	r3, [r7, #8]
 8014e0c:	68db      	ldr	r3, [r3, #12]
 8014e0e:	2b22      	cmp	r3, #34	@ 0x22
 8014e10:	d008      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014e12:	68bb      	ldr	r3, [r7, #8]
 8014e14:	68db      	ldr	r3, [r3, #12]
 8014e16:	2b06      	cmp	r3, #6
 8014e18:	d004      	beq.n	8014e24 <HAL_DAC_ConfigChannel+0xa8>
 8014e1a:	f240 418a 	movw	r1, #1162	@ 0x48a
 8014e1e:	4875      	ldr	r0, [pc, #468]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014e20:	f7fd fb48 	bl	80124b4 <assert_failed>
  assert_param(IS_DAC_TRIGGER2(hdac->Instance, sConfig->DAC_Trigger2));
 8014e24:	68bb      	ldr	r3, [r7, #8]
 8014e26:	691b      	ldr	r3, [r3, #16]
 8014e28:	2b00      	cmp	r3, #0
 8014e2a:	d028      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e2c:	68bb      	ldr	r3, [r7, #8]
 8014e2e:	691b      	ldr	r3, [r3, #16]
 8014e30:	2b02      	cmp	r3, #2
 8014e32:	d024      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e34:	68bb      	ldr	r3, [r7, #8]
 8014e36:	691b      	ldr	r3, [r3, #16]
 8014e38:	2b0a      	cmp	r3, #10
 8014e3a:	d020      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e3c:	68bb      	ldr	r3, [r7, #8]
 8014e3e:	691b      	ldr	r3, [r3, #16]
 8014e40:	2b0e      	cmp	r3, #14
 8014e42:	d01c      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e44:	68bb      	ldr	r3, [r7, #8]
 8014e46:	691b      	ldr	r3, [r3, #16]
 8014e48:	2b12      	cmp	r3, #18
 8014e4a:	d018      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e4c:	68bb      	ldr	r3, [r7, #8]
 8014e4e:	691b      	ldr	r3, [r3, #16]
 8014e50:	2b16      	cmp	r3, #22
 8014e52:	d014      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e54:	68bb      	ldr	r3, [r7, #8]
 8014e56:	691b      	ldr	r3, [r3, #16]
 8014e58:	2b1a      	cmp	r3, #26
 8014e5a:	d010      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e5c:	68bb      	ldr	r3, [r7, #8]
 8014e5e:	691b      	ldr	r3, [r3, #16]
 8014e60:	2b1e      	cmp	r3, #30
 8014e62:	d00c      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e64:	68bb      	ldr	r3, [r7, #8]
 8014e66:	691b      	ldr	r3, [r3, #16]
 8014e68:	2b22      	cmp	r3, #34	@ 0x22
 8014e6a:	d008      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e6c:	68bb      	ldr	r3, [r7, #8]
 8014e6e:	691b      	ldr	r3, [r3, #16]
 8014e70:	2b06      	cmp	r3, #6
 8014e72:	d004      	beq.n	8014e7e <HAL_DAC_ConfigChannel+0x102>
 8014e74:	f240 418b 	movw	r1, #1163	@ 0x48b
 8014e78:	485e      	ldr	r0, [pc, #376]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014e7a:	f7fd fb1b 	bl	80124b4 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8014e7e:	68bb      	ldr	r3, [r7, #8]
 8014e80:	695b      	ldr	r3, [r3, #20]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d008      	beq.n	8014e98 <HAL_DAC_ConfigChannel+0x11c>
 8014e86:	68bb      	ldr	r3, [r7, #8]
 8014e88:	695b      	ldr	r3, [r3, #20]
 8014e8a:	2b02      	cmp	r3, #2
 8014e8c:	d004      	beq.n	8014e98 <HAL_DAC_ConfigChannel+0x11c>
 8014e8e:	f240 418c 	movw	r1, #1164	@ 0x48c
 8014e92:	4858      	ldr	r0, [pc, #352]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014e94:	f7fd fb0e 	bl	80124b4 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 8014e98:	68bb      	ldr	r3, [r7, #8]
 8014e9a:	699b      	ldr	r3, [r3, #24]
 8014e9c:	2b01      	cmp	r3, #1
 8014e9e:	d00c      	beq.n	8014eba <HAL_DAC_ConfigChannel+0x13e>
 8014ea0:	68bb      	ldr	r3, [r7, #8]
 8014ea2:	699b      	ldr	r3, [r3, #24]
 8014ea4:	2b02      	cmp	r3, #2
 8014ea6:	d008      	beq.n	8014eba <HAL_DAC_ConfigChannel+0x13e>
 8014ea8:	68bb      	ldr	r3, [r7, #8]
 8014eaa:	699b      	ldr	r3, [r3, #24]
 8014eac:	2b04      	cmp	r3, #4
 8014eae:	d004      	beq.n	8014eba <HAL_DAC_ConfigChannel+0x13e>
 8014eb0:	f240 418d 	movw	r1, #1165	@ 0x48d
 8014eb4:	484f      	ldr	r0, [pc, #316]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014eb6:	f7fd fafd 	bl	80124b4 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 8014eba:	68bb      	ldr	r3, [r7, #8]
 8014ebc:	69db      	ldr	r3, [r3, #28]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d008      	beq.n	8014ed4 <HAL_DAC_ConfigChannel+0x158>
 8014ec2:	68bb      	ldr	r3, [r7, #8]
 8014ec4:	69db      	ldr	r3, [r3, #28]
 8014ec6:	2b01      	cmp	r3, #1
 8014ec8:	d004      	beq.n	8014ed4 <HAL_DAC_ConfigChannel+0x158>
 8014eca:	f240 418e 	movw	r1, #1166	@ 0x48e
 8014ece:	4849      	ldr	r0, [pc, #292]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014ed0:	f7fd faf0 	bl	80124b4 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8014ed4:	68bb      	ldr	r3, [r7, #8]
 8014ed6:	69db      	ldr	r3, [r3, #28]
 8014ed8:	2b01      	cmp	r3, #1
 8014eda:	d108      	bne.n	8014eee <HAL_DAC_ConfigChannel+0x172>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 8014edc:	68bb      	ldr	r3, [r7, #8]
 8014ede:	6a1b      	ldr	r3, [r3, #32]
 8014ee0:	2b1f      	cmp	r3, #31
 8014ee2:	d904      	bls.n	8014eee <HAL_DAC_ConfigChannel+0x172>
 8014ee4:	f240 4191 	movw	r1, #1169	@ 0x491
 8014ee8:	4842      	ldr	r0, [pc, #264]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014eea:	f7fd fae3 	bl	80124b4 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 8014eee:	68bb      	ldr	r3, [r7, #8]
 8014ef0:	689b      	ldr	r3, [r3, #8]
 8014ef2:	2b00      	cmp	r3, #0
 8014ef4:	d008      	beq.n	8014f08 <HAL_DAC_ConfigChannel+0x18c>
 8014ef6:	68bb      	ldr	r3, [r7, #8]
 8014ef8:	689b      	ldr	r3, [r3, #8]
 8014efa:	2b04      	cmp	r3, #4
 8014efc:	d004      	beq.n	8014f08 <HAL_DAC_ConfigChannel+0x18c>
 8014efe:	f240 4193 	movw	r1, #1171	@ 0x493
 8014f02:	483c      	ldr	r0, [pc, #240]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014f04:	f7fd fad6 	bl	80124b4 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8014f08:	68bb      	ldr	r3, [r7, #8]
 8014f0a:	689b      	ldr	r3, [r3, #8]
 8014f0c:	2b04      	cmp	r3, #4
 8014f0e:	d11c      	bne.n	8014f4a <HAL_DAC_ConfigChannel+0x1ce>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8014f10:	68bb      	ldr	r3, [r7, #8]
 8014f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014f14:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014f18:	d304      	bcc.n	8014f24 <HAL_DAC_ConfigChannel+0x1a8>
 8014f1a:	f240 4196 	movw	r1, #1174	@ 0x496
 8014f1e:	4835      	ldr	r0, [pc, #212]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014f20:	f7fd fac8 	bl	80124b4 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8014f24:	68bb      	ldr	r3, [r7, #8]
 8014f26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014f28:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014f2c:	d304      	bcc.n	8014f38 <HAL_DAC_ConfigChannel+0x1bc>
 8014f2e:	f240 4197 	movw	r1, #1175	@ 0x497
 8014f32:	4830      	ldr	r0, [pc, #192]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014f34:	f7fd fabe 	bl	80124b4 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 8014f38:	68bb      	ldr	r3, [r7, #8]
 8014f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014f3c:	2bff      	cmp	r3, #255	@ 0xff
 8014f3e:	d904      	bls.n	8014f4a <HAL_DAC_ConfigChannel+0x1ce>
 8014f40:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 8014f44:	482b      	ldr	r0, [pc, #172]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014f46:	f7fd fab5 	bl	80124b4 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8014f4a:	687b      	ldr	r3, [r7, #4]
 8014f4c:	2b00      	cmp	r3, #0
 8014f4e:	d007      	beq.n	8014f60 <HAL_DAC_ConfigChannel+0x1e4>
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	2b10      	cmp	r3, #16
 8014f54:	d004      	beq.n	8014f60 <HAL_DAC_ConfigChannel+0x1e4>
 8014f56:	f240 419a 	movw	r1, #1178	@ 0x49a
 8014f5a:	4826      	ldr	r0, [pc, #152]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014f5c:	f7fd faaa 	bl	80124b4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
 8014f60:	68bb      	ldr	r3, [r7, #8]
 8014f62:	791b      	ldrb	r3, [r3, #4]
 8014f64:	2b00      	cmp	r3, #0
 8014f66:	d008      	beq.n	8014f7a <HAL_DAC_ConfigChannel+0x1fe>
 8014f68:	68bb      	ldr	r3, [r7, #8]
 8014f6a:	791b      	ldrb	r3, [r3, #4]
 8014f6c:	2b01      	cmp	r3, #1
 8014f6e:	d004      	beq.n	8014f7a <HAL_DAC_ConfigChannel+0x1fe>
 8014f70:	f240 419b 	movw	r1, #1179	@ 0x49b
 8014f74:	481f      	ldr	r0, [pc, #124]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014f76:	f7fd fa9d 	bl	80124b4 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));
 8014f7a:	68bb      	ldr	r3, [r7, #8]
 8014f7c:	795b      	ldrb	r3, [r3, #5]
 8014f7e:	2b00      	cmp	r3, #0
 8014f80:	d008      	beq.n	8014f94 <HAL_DAC_ConfigChannel+0x218>
 8014f82:	68bb      	ldr	r3, [r7, #8]
 8014f84:	795b      	ldrb	r3, [r3, #5]
 8014f86:	2b01      	cmp	r3, #1
 8014f88:	d004      	beq.n	8014f94 <HAL_DAC_ConfigChannel+0x218>
 8014f8a:	f240 419c 	movw	r1, #1180	@ 0x49c
 8014f8e:	4819      	ldr	r0, [pc, #100]	@ (8014ff4 <HAL_DAC_ConfigChannel+0x278>)
 8014f90:	f7fd fa90 	bl	80124b4 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8014f94:	68fb      	ldr	r3, [r7, #12]
 8014f96:	795b      	ldrb	r3, [r3, #5]
 8014f98:	2b01      	cmp	r3, #1
 8014f9a:	d101      	bne.n	8014fa0 <HAL_DAC_ConfigChannel+0x224>
 8014f9c:	2302      	movs	r3, #2
 8014f9e:	e19a      	b.n	80152d6 <HAL_DAC_ConfigChannel+0x55a>
 8014fa0:	68fb      	ldr	r3, [r7, #12]
 8014fa2:	2201      	movs	r2, #1
 8014fa4:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8014fa6:	68fb      	ldr	r3, [r7, #12]
 8014fa8:	2202      	movs	r2, #2
 8014faa:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8014fac:	68bb      	ldr	r3, [r7, #8]
 8014fae:	689b      	ldr	r3, [r3, #8]
 8014fb0:	2b04      	cmp	r3, #4
 8014fb2:	d17c      	bne.n	80150ae <HAL_DAC_ConfigChannel+0x332>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8014fb4:	f7fd fda2 	bl	8012afc <HAL_GetTick>
 8014fb8:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	2b00      	cmp	r3, #0
 8014fbe:	d13f      	bne.n	8015040 <HAL_DAC_ConfigChannel+0x2c4>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8014fc0:	e01a      	b.n	8014ff8 <HAL_DAC_ConfigChannel+0x27c>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8014fc2:	f7fd fd9b 	bl	8012afc <HAL_GetTick>
 8014fc6:	4602      	mov	r2, r0
 8014fc8:	69bb      	ldr	r3, [r7, #24]
 8014fca:	1ad3      	subs	r3, r2, r3
 8014fcc:	2b01      	cmp	r3, #1
 8014fce:	d913      	bls.n	8014ff8 <HAL_DAC_ConfigChannel+0x27c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8014fd0:	68fb      	ldr	r3, [r7, #12]
 8014fd2:	681b      	ldr	r3, [r3, #0]
 8014fd4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014fd6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014fda:	2b00      	cmp	r3, #0
 8014fdc:	d00c      	beq.n	8014ff8 <HAL_DAC_ConfigChannel+0x27c>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8014fde:	68fb      	ldr	r3, [r7, #12]
 8014fe0:	691b      	ldr	r3, [r3, #16]
 8014fe2:	f043 0208 	orr.w	r2, r3, #8
 8014fe6:	68fb      	ldr	r3, [r7, #12]
 8014fe8:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8014fea:	68fb      	ldr	r3, [r7, #12]
 8014fec:	2203      	movs	r2, #3
 8014fee:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8014ff0:	2303      	movs	r3, #3
 8014ff2:	e170      	b.n	80152d6 <HAL_DAC_ConfigChannel+0x55a>
 8014ff4:	0801dc4c 	.word	0x0801dc4c
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8014ff8:	68fb      	ldr	r3, [r7, #12]
 8014ffa:	681b      	ldr	r3, [r3, #0]
 8014ffc:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014ffe:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015002:	2b00      	cmp	r3, #0
 8015004:	d1dd      	bne.n	8014fc2 <HAL_DAC_ConfigChannel+0x246>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8015006:	68fb      	ldr	r3, [r7, #12]
 8015008:	681b      	ldr	r3, [r3, #0]
 801500a:	68ba      	ldr	r2, [r7, #8]
 801500c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 801500e:	641a      	str	r2, [r3, #64]	@ 0x40
 8015010:	e020      	b.n	8015054 <HAL_DAC_ConfigChannel+0x2d8>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8015012:	f7fd fd73 	bl	8012afc <HAL_GetTick>
 8015016:	4602      	mov	r2, r0
 8015018:	69bb      	ldr	r3, [r7, #24]
 801501a:	1ad3      	subs	r3, r2, r3
 801501c:	2b01      	cmp	r3, #1
 801501e:	d90f      	bls.n	8015040 <HAL_DAC_ConfigChannel+0x2c4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8015020:	68fb      	ldr	r3, [r7, #12]
 8015022:	681b      	ldr	r3, [r3, #0]
 8015024:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015026:	2b00      	cmp	r3, #0
 8015028:	da0a      	bge.n	8015040 <HAL_DAC_ConfigChannel+0x2c4>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 801502a:	68fb      	ldr	r3, [r7, #12]
 801502c:	691b      	ldr	r3, [r3, #16]
 801502e:	f043 0208 	orr.w	r2, r3, #8
 8015032:	68fb      	ldr	r3, [r7, #12]
 8015034:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8015036:	68fb      	ldr	r3, [r7, #12]
 8015038:	2203      	movs	r2, #3
 801503a:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 801503c:	2303      	movs	r3, #3
 801503e:	e14a      	b.n	80152d6 <HAL_DAC_ConfigChannel+0x55a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8015040:	68fb      	ldr	r3, [r7, #12]
 8015042:	681b      	ldr	r3, [r3, #0]
 8015044:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015046:	2b00      	cmp	r3, #0
 8015048:	dbe3      	blt.n	8015012 <HAL_DAC_ConfigChannel+0x296>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 801504a:	68fb      	ldr	r3, [r7, #12]
 801504c:	681b      	ldr	r3, [r3, #0]
 801504e:	68ba      	ldr	r2, [r7, #8]
 8015050:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8015052:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8015054:	68fb      	ldr	r3, [r7, #12]
 8015056:	681b      	ldr	r3, [r3, #0]
 8015058:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	f003 0310 	and.w	r3, r3, #16
 8015060:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8015064:	fa01 f303 	lsl.w	r3, r1, r3
 8015068:	43db      	mvns	r3, r3
 801506a:	ea02 0103 	and.w	r1, r2, r3
 801506e:	68bb      	ldr	r3, [r7, #8]
 8015070:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8015072:	687b      	ldr	r3, [r7, #4]
 8015074:	f003 0310 	and.w	r3, r3, #16
 8015078:	409a      	lsls	r2, r3
 801507a:	68fb      	ldr	r3, [r7, #12]
 801507c:	681b      	ldr	r3, [r3, #0]
 801507e:	430a      	orrs	r2, r1
 8015080:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8015082:	68fb      	ldr	r3, [r7, #12]
 8015084:	681b      	ldr	r3, [r3, #0]
 8015086:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	f003 0310 	and.w	r3, r3, #16
 801508e:	21ff      	movs	r1, #255	@ 0xff
 8015090:	fa01 f303 	lsl.w	r3, r1, r3
 8015094:	43db      	mvns	r3, r3
 8015096:	ea02 0103 	and.w	r1, r2, r3
 801509a:	68bb      	ldr	r3, [r7, #8]
 801509c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801509e:	687b      	ldr	r3, [r7, #4]
 80150a0:	f003 0310 	and.w	r3, r3, #16
 80150a4:	409a      	lsls	r2, r3
 80150a6:	68fb      	ldr	r3, [r7, #12]
 80150a8:	681b      	ldr	r3, [r3, #0]
 80150aa:	430a      	orrs	r2, r1
 80150ac:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 80150ae:	68bb      	ldr	r3, [r7, #8]
 80150b0:	69db      	ldr	r3, [r3, #28]
 80150b2:	2b01      	cmp	r3, #1
 80150b4:	d11d      	bne.n	80150f2 <HAL_DAC_ConfigChannel+0x376>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 80150b6:	68fb      	ldr	r3, [r7, #12]
 80150b8:	681b      	ldr	r3, [r3, #0]
 80150ba:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80150bc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 80150be:	687b      	ldr	r3, [r7, #4]
 80150c0:	f003 0310 	and.w	r3, r3, #16
 80150c4:	221f      	movs	r2, #31
 80150c6:	fa02 f303 	lsl.w	r3, r2, r3
 80150ca:	43db      	mvns	r3, r3
 80150cc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150ce:	4013      	ands	r3, r2
 80150d0:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 80150d2:	68bb      	ldr	r3, [r7, #8]
 80150d4:	6a1b      	ldr	r3, [r3, #32]
 80150d6:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80150d8:	687b      	ldr	r3, [r7, #4]
 80150da:	f003 0310 	and.w	r3, r3, #16
 80150de:	697a      	ldr	r2, [r7, #20]
 80150e0:	fa02 f303 	lsl.w	r3, r2, r3
 80150e4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150e6:	4313      	orrs	r3, r2
 80150e8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 80150ea:	68fb      	ldr	r3, [r7, #12]
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80150f0:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	681b      	ldr	r3, [r3, #0]
 80150f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80150f8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 80150fa:	687b      	ldr	r3, [r7, #4]
 80150fc:	f003 0310 	and.w	r3, r3, #16
 8015100:	2207      	movs	r2, #7
 8015102:	fa02 f303 	lsl.w	r3, r2, r3
 8015106:	43db      	mvns	r3, r3
 8015108:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801510a:	4013      	ands	r3, r2
 801510c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 801510e:	68bb      	ldr	r3, [r7, #8]
 8015110:	699b      	ldr	r3, [r3, #24]
 8015112:	2b01      	cmp	r3, #1
 8015114:	d102      	bne.n	801511c <HAL_DAC_ConfigChannel+0x3a0>
  {
    connectOnChip = 0x00000000UL;
 8015116:	2300      	movs	r3, #0
 8015118:	623b      	str	r3, [r7, #32]
 801511a:	e00f      	b.n	801513c <HAL_DAC_ConfigChannel+0x3c0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 801511c:	68bb      	ldr	r3, [r7, #8]
 801511e:	699b      	ldr	r3, [r3, #24]
 8015120:	2b02      	cmp	r3, #2
 8015122:	d102      	bne.n	801512a <HAL_DAC_ConfigChannel+0x3ae>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8015124:	2301      	movs	r3, #1
 8015126:	623b      	str	r3, [r7, #32]
 8015128:	e008      	b.n	801513c <HAL_DAC_ConfigChannel+0x3c0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 801512a:	68bb      	ldr	r3, [r7, #8]
 801512c:	695b      	ldr	r3, [r3, #20]
 801512e:	2b00      	cmp	r3, #0
 8015130:	d102      	bne.n	8015138 <HAL_DAC_ConfigChannel+0x3bc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8015132:	2301      	movs	r3, #1
 8015134:	623b      	str	r3, [r7, #32]
 8015136:	e001      	b.n	801513c <HAL_DAC_ConfigChannel+0x3c0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8015138:	2300      	movs	r3, #0
 801513a:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 801513c:	68bb      	ldr	r3, [r7, #8]
 801513e:	689a      	ldr	r2, [r3, #8]
 8015140:	68bb      	ldr	r3, [r7, #8]
 8015142:	695b      	ldr	r3, [r3, #20]
 8015144:	4313      	orrs	r3, r2
 8015146:	6a3a      	ldr	r2, [r7, #32]
 8015148:	4313      	orrs	r3, r2
 801514a:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 801514c:	687b      	ldr	r3, [r7, #4]
 801514e:	f003 0310 	and.w	r3, r3, #16
 8015152:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8015156:	fa02 f303 	lsl.w	r3, r2, r3
 801515a:	43db      	mvns	r3, r3
 801515c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801515e:	4013      	ands	r3, r2
 8015160:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8015162:	68bb      	ldr	r3, [r7, #8]
 8015164:	791b      	ldrb	r3, [r3, #4]
 8015166:	2b01      	cmp	r3, #1
 8015168:	d102      	bne.n	8015170 <HAL_DAC_ConfigChannel+0x3f4>
 801516a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 801516e:	e000      	b.n	8015172 <HAL_DAC_ConfigChannel+0x3f6>
 8015170:	2300      	movs	r3, #0
 8015172:	697a      	ldr	r2, [r7, #20]
 8015174:	4313      	orrs	r3, r2
 8015176:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8015178:	687b      	ldr	r3, [r7, #4]
 801517a:	f003 0310 	and.w	r3, r3, #16
 801517e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8015182:	fa02 f303 	lsl.w	r3, r2, r3
 8015186:	43db      	mvns	r3, r3
 8015188:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801518a:	4013      	ands	r3, r2
 801518c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 801518e:	68bb      	ldr	r3, [r7, #8]
 8015190:	795b      	ldrb	r3, [r3, #5]
 8015192:	2b01      	cmp	r3, #1
 8015194:	d102      	bne.n	801519c <HAL_DAC_ConfigChannel+0x420>
 8015196:	f44f 7300 	mov.w	r3, #512	@ 0x200
 801519a:	e000      	b.n	801519e <HAL_DAC_ConfigChannel+0x422>
 801519c:	2300      	movs	r3, #0
 801519e:	697a      	ldr	r2, [r7, #20]
 80151a0:	4313      	orrs	r3, r2
 80151a2:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 80151a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151a6:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 80151aa:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 80151ac:	68bb      	ldr	r3, [r7, #8]
 80151ae:	681b      	ldr	r3, [r3, #0]
 80151b0:	2b02      	cmp	r3, #2
 80151b2:	d114      	bne.n	80151de <HAL_DAC_ConfigChannel+0x462>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 80151b4:	f002 fa90 	bl	80176d8 <HAL_RCC_GetHCLKFreq>
 80151b8:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 80151ba:	693b      	ldr	r3, [r7, #16]
 80151bc:	4a48      	ldr	r2, [pc, #288]	@ (80152e0 <HAL_DAC_ConfigChannel+0x564>)
 80151be:	4293      	cmp	r3, r2
 80151c0:	d904      	bls.n	80151cc <HAL_DAC_ConfigChannel+0x450>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 80151c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151c4:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80151c8:	627b      	str	r3, [r7, #36]	@ 0x24
 80151ca:	e00f      	b.n	80151ec <HAL_DAC_ConfigChannel+0x470>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 80151cc:	693b      	ldr	r3, [r7, #16]
 80151ce:	4a45      	ldr	r2, [pc, #276]	@ (80152e4 <HAL_DAC_ConfigChannel+0x568>)
 80151d0:	4293      	cmp	r3, r2
 80151d2:	d90a      	bls.n	80151ea <HAL_DAC_ConfigChannel+0x46e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 80151d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80151d6:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80151da:	627b      	str	r3, [r7, #36]	@ 0x24
 80151dc:	e006      	b.n	80151ec <HAL_DAC_ConfigChannel+0x470>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 80151de:	68bb      	ldr	r3, [r7, #8]
 80151e0:	681b      	ldr	r3, [r3, #0]
 80151e2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151e4:	4313      	orrs	r3, r2
 80151e6:	627b      	str	r3, [r7, #36]	@ 0x24
 80151e8:	e000      	b.n	80151ec <HAL_DAC_ConfigChannel+0x470>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 80151ea:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80151ec:	687b      	ldr	r3, [r7, #4]
 80151ee:	f003 0310 	and.w	r3, r3, #16
 80151f2:	697a      	ldr	r2, [r7, #20]
 80151f4:	fa02 f303 	lsl.w	r3, r2, r3
 80151f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80151fa:	4313      	orrs	r3, r2
 80151fc:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 80151fe:	68fb      	ldr	r3, [r7, #12]
 8015200:	681b      	ldr	r3, [r3, #0]
 8015202:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015204:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8015206:	68fb      	ldr	r3, [r7, #12]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	6819      	ldr	r1, [r3, #0]
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	f003 0310 	and.w	r3, r3, #16
 8015212:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8015216:	fa02 f303 	lsl.w	r3, r2, r3
 801521a:	43da      	mvns	r2, r3
 801521c:	68fb      	ldr	r3, [r7, #12]
 801521e:	681b      	ldr	r3, [r3, #0]
 8015220:	400a      	ands	r2, r1
 8015222:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8015224:	68fb      	ldr	r3, [r7, #12]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	681b      	ldr	r3, [r3, #0]
 801522a:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 801522c:	687b      	ldr	r3, [r7, #4]
 801522e:	f003 0310 	and.w	r3, r3, #16
 8015232:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8015236:	fa02 f303 	lsl.w	r3, r2, r3
 801523a:	43db      	mvns	r3, r3
 801523c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 801523e:	4013      	ands	r3, r2
 8015240:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 8015242:	68bb      	ldr	r3, [r7, #8]
 8015244:	68db      	ldr	r3, [r3, #12]
 8015246:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8015248:	687b      	ldr	r3, [r7, #4]
 801524a:	f003 0310 	and.w	r3, r3, #16
 801524e:	697a      	ldr	r2, [r7, #20]
 8015250:	fa02 f303 	lsl.w	r3, r2, r3
 8015254:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015256:	4313      	orrs	r3, r2
 8015258:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 801525a:	68fb      	ldr	r3, [r7, #12]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8015260:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8015262:	68fb      	ldr	r3, [r7, #12]
 8015264:	681b      	ldr	r3, [r3, #0]
 8015266:	6819      	ldr	r1, [r3, #0]
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	f003 0310 	and.w	r3, r3, #16
 801526e:	22c0      	movs	r2, #192	@ 0xc0
 8015270:	fa02 f303 	lsl.w	r3, r2, r3
 8015274:	43da      	mvns	r2, r3
 8015276:	68fb      	ldr	r3, [r7, #12]
 8015278:	681b      	ldr	r3, [r3, #0]
 801527a:	400a      	ands	r2, r1
 801527c:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 801527e:	68bb      	ldr	r3, [r7, #8]
 8015280:	68db      	ldr	r3, [r3, #12]
 8015282:	089b      	lsrs	r3, r3, #2
 8015284:	f003 030f 	and.w	r3, r3, #15
 8015288:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 801528a:	68bb      	ldr	r3, [r7, #8]
 801528c:	691b      	ldr	r3, [r3, #16]
 801528e:	089b      	lsrs	r3, r3, #2
 8015290:	021b      	lsls	r3, r3, #8
 8015292:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8015296:	697a      	ldr	r2, [r7, #20]
 8015298:	4313      	orrs	r3, r2
 801529a:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 801529c:	68fb      	ldr	r3, [r7, #12]
 801529e:	681b      	ldr	r3, [r3, #0]
 80152a0:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	f003 0310 	and.w	r3, r3, #16
 80152a8:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80152ac:	fa01 f303 	lsl.w	r3, r1, r3
 80152b0:	43db      	mvns	r3, r3
 80152b2:	ea02 0103 	and.w	r1, r2, r3
 80152b6:	687b      	ldr	r3, [r7, #4]
 80152b8:	f003 0310 	and.w	r3, r3, #16
 80152bc:	697a      	ldr	r2, [r7, #20]
 80152be:	409a      	lsls	r2, r3
 80152c0:	68fb      	ldr	r3, [r7, #12]
 80152c2:	681b      	ldr	r3, [r3, #0]
 80152c4:	430a      	orrs	r2, r1
 80152c6:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80152c8:	68fb      	ldr	r3, [r7, #12]
 80152ca:	2201      	movs	r2, #1
 80152cc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80152ce:	68fb      	ldr	r3, [r7, #12]
 80152d0:	2200      	movs	r2, #0
 80152d2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80152d4:	7ffb      	ldrb	r3, [r7, #31]
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3728      	adds	r7, #40	@ 0x28
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	09896800 	.word	0x09896800
 80152e4:	04c4b400 	.word	0x04c4b400

080152e8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80152e8:	b580      	push	{r7, lr}
 80152ea:	b084      	sub	sp, #16
 80152ec:	af00      	add	r7, sp, #0
 80152ee:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80152f0:	687b      	ldr	r3, [r7, #4]
 80152f2:	2b00      	cmp	r3, #0
 80152f4:	d101      	bne.n	80152fa <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80152f6:	2301      	movs	r3, #1
 80152f8:	e168      	b.n	80155cc <HAL_DMA_Init+0x2e4>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80152fa:	687b      	ldr	r3, [r7, #4]
 80152fc:	681b      	ldr	r3, [r3, #0]
 80152fe:	4a66      	ldr	r2, [pc, #408]	@ (8015498 <HAL_DMA_Init+0x1b0>)
 8015300:	4293      	cmp	r3, r2
 8015302:	d03a      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	4a64      	ldr	r2, [pc, #400]	@ (801549c <HAL_DMA_Init+0x1b4>)
 801530a:	4293      	cmp	r3, r2
 801530c:	d035      	beq.n	801537a <HAL_DMA_Init+0x92>
 801530e:	687b      	ldr	r3, [r7, #4]
 8015310:	681b      	ldr	r3, [r3, #0]
 8015312:	4a63      	ldr	r2, [pc, #396]	@ (80154a0 <HAL_DMA_Init+0x1b8>)
 8015314:	4293      	cmp	r3, r2
 8015316:	d030      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	681b      	ldr	r3, [r3, #0]
 801531c:	4a61      	ldr	r2, [pc, #388]	@ (80154a4 <HAL_DMA_Init+0x1bc>)
 801531e:	4293      	cmp	r3, r2
 8015320:	d02b      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015322:	687b      	ldr	r3, [r7, #4]
 8015324:	681b      	ldr	r3, [r3, #0]
 8015326:	4a60      	ldr	r2, [pc, #384]	@ (80154a8 <HAL_DMA_Init+0x1c0>)
 8015328:	4293      	cmp	r3, r2
 801532a:	d026      	beq.n	801537a <HAL_DMA_Init+0x92>
 801532c:	687b      	ldr	r3, [r7, #4]
 801532e:	681b      	ldr	r3, [r3, #0]
 8015330:	4a5e      	ldr	r2, [pc, #376]	@ (80154ac <HAL_DMA_Init+0x1c4>)
 8015332:	4293      	cmp	r3, r2
 8015334:	d021      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	681b      	ldr	r3, [r3, #0]
 801533a:	4a5d      	ldr	r2, [pc, #372]	@ (80154b0 <HAL_DMA_Init+0x1c8>)
 801533c:	4293      	cmp	r3, r2
 801533e:	d01c      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015340:	687b      	ldr	r3, [r7, #4]
 8015342:	681b      	ldr	r3, [r3, #0]
 8015344:	4a5b      	ldr	r2, [pc, #364]	@ (80154b4 <HAL_DMA_Init+0x1cc>)
 8015346:	4293      	cmp	r3, r2
 8015348:	d017      	beq.n	801537a <HAL_DMA_Init+0x92>
 801534a:	687b      	ldr	r3, [r7, #4]
 801534c:	681b      	ldr	r3, [r3, #0]
 801534e:	4a5a      	ldr	r2, [pc, #360]	@ (80154b8 <HAL_DMA_Init+0x1d0>)
 8015350:	4293      	cmp	r3, r2
 8015352:	d012      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	681b      	ldr	r3, [r3, #0]
 8015358:	4a58      	ldr	r2, [pc, #352]	@ (80154bc <HAL_DMA_Init+0x1d4>)
 801535a:	4293      	cmp	r3, r2
 801535c:	d00d      	beq.n	801537a <HAL_DMA_Init+0x92>
 801535e:	687b      	ldr	r3, [r7, #4]
 8015360:	681b      	ldr	r3, [r3, #0]
 8015362:	4a57      	ldr	r2, [pc, #348]	@ (80154c0 <HAL_DMA_Init+0x1d8>)
 8015364:	4293      	cmp	r3, r2
 8015366:	d008      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015368:	687b      	ldr	r3, [r7, #4]
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	4a55      	ldr	r2, [pc, #340]	@ (80154c4 <HAL_DMA_Init+0x1dc>)
 801536e:	4293      	cmp	r3, r2
 8015370:	d003      	beq.n	801537a <HAL_DMA_Init+0x92>
 8015372:	21a3      	movs	r1, #163	@ 0xa3
 8015374:	4854      	ldr	r0, [pc, #336]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 8015376:	f7fd f89d 	bl	80124b4 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 801537a:	687b      	ldr	r3, [r7, #4]
 801537c:	689b      	ldr	r3, [r3, #8]
 801537e:	2b00      	cmp	r3, #0
 8015380:	d00c      	beq.n	801539c <HAL_DMA_Init+0xb4>
 8015382:	687b      	ldr	r3, [r7, #4]
 8015384:	689b      	ldr	r3, [r3, #8]
 8015386:	2b10      	cmp	r3, #16
 8015388:	d008      	beq.n	801539c <HAL_DMA_Init+0xb4>
 801538a:	687b      	ldr	r3, [r7, #4]
 801538c:	689b      	ldr	r3, [r3, #8]
 801538e:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015392:	d003      	beq.n	801539c <HAL_DMA_Init+0xb4>
 8015394:	21a4      	movs	r1, #164	@ 0xa4
 8015396:	484c      	ldr	r0, [pc, #304]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 8015398:	f7fd f88c 	bl	80124b4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 801539c:	687b      	ldr	r3, [r7, #4]
 801539e:	68db      	ldr	r3, [r3, #12]
 80153a0:	2b40      	cmp	r3, #64	@ 0x40
 80153a2:	d007      	beq.n	80153b4 <HAL_DMA_Init+0xcc>
 80153a4:	687b      	ldr	r3, [r7, #4]
 80153a6:	68db      	ldr	r3, [r3, #12]
 80153a8:	2b00      	cmp	r3, #0
 80153aa:	d003      	beq.n	80153b4 <HAL_DMA_Init+0xcc>
 80153ac:	21a5      	movs	r1, #165	@ 0xa5
 80153ae:	4846      	ldr	r0, [pc, #280]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 80153b0:	f7fd f880 	bl	80124b4 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80153b4:	687b      	ldr	r3, [r7, #4]
 80153b6:	691b      	ldr	r3, [r3, #16]
 80153b8:	2b80      	cmp	r3, #128	@ 0x80
 80153ba:	d007      	beq.n	80153cc <HAL_DMA_Init+0xe4>
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	691b      	ldr	r3, [r3, #16]
 80153c0:	2b00      	cmp	r3, #0
 80153c2:	d003      	beq.n	80153cc <HAL_DMA_Init+0xe4>
 80153c4:	21a6      	movs	r1, #166	@ 0xa6
 80153c6:	4840      	ldr	r0, [pc, #256]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 80153c8:	f7fd f874 	bl	80124b4 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80153cc:	687b      	ldr	r3, [r7, #4]
 80153ce:	695b      	ldr	r3, [r3, #20]
 80153d0:	2b00      	cmp	r3, #0
 80153d2:	d00d      	beq.n	80153f0 <HAL_DMA_Init+0x108>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	695b      	ldr	r3, [r3, #20]
 80153d8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80153dc:	d008      	beq.n	80153f0 <HAL_DMA_Init+0x108>
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	695b      	ldr	r3, [r3, #20]
 80153e2:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80153e6:	d003      	beq.n	80153f0 <HAL_DMA_Init+0x108>
 80153e8:	21a7      	movs	r1, #167	@ 0xa7
 80153ea:	4837      	ldr	r0, [pc, #220]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 80153ec:	f7fd f862 	bl	80124b4 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	699b      	ldr	r3, [r3, #24]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d00d      	beq.n	8015414 <HAL_DMA_Init+0x12c>
 80153f8:	687b      	ldr	r3, [r7, #4]
 80153fa:	699b      	ldr	r3, [r3, #24]
 80153fc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8015400:	d008      	beq.n	8015414 <HAL_DMA_Init+0x12c>
 8015402:	687b      	ldr	r3, [r7, #4]
 8015404:	699b      	ldr	r3, [r3, #24]
 8015406:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801540a:	d003      	beq.n	8015414 <HAL_DMA_Init+0x12c>
 801540c:	21a8      	movs	r1, #168	@ 0xa8
 801540e:	482e      	ldr	r0, [pc, #184]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 8015410:	f7fd f850 	bl	80124b4 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	69db      	ldr	r3, [r3, #28]
 8015418:	2b00      	cmp	r3, #0
 801541a:	d007      	beq.n	801542c <HAL_DMA_Init+0x144>
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	69db      	ldr	r3, [r3, #28]
 8015420:	2b20      	cmp	r3, #32
 8015422:	d003      	beq.n	801542c <HAL_DMA_Init+0x144>
 8015424:	21a9      	movs	r1, #169	@ 0xa9
 8015426:	4828      	ldr	r0, [pc, #160]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 8015428:	f7fd f844 	bl	80124b4 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 801542c:	687b      	ldr	r3, [r7, #4]
 801542e:	6a1b      	ldr	r3, [r3, #32]
 8015430:	2b00      	cmp	r3, #0
 8015432:	d012      	beq.n	801545a <HAL_DMA_Init+0x172>
 8015434:	687b      	ldr	r3, [r7, #4]
 8015436:	6a1b      	ldr	r3, [r3, #32]
 8015438:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801543c:	d00d      	beq.n	801545a <HAL_DMA_Init+0x172>
 801543e:	687b      	ldr	r3, [r7, #4]
 8015440:	6a1b      	ldr	r3, [r3, #32]
 8015442:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015446:	d008      	beq.n	801545a <HAL_DMA_Init+0x172>
 8015448:	687b      	ldr	r3, [r7, #4]
 801544a:	6a1b      	ldr	r3, [r3, #32]
 801544c:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8015450:	d003      	beq.n	801545a <HAL_DMA_Init+0x172>
 8015452:	21aa      	movs	r1, #170	@ 0xaa
 8015454:	481c      	ldr	r0, [pc, #112]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 8015456:	f7fd f82d 	bl	80124b4 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 801545a:	687b      	ldr	r3, [r7, #4]
 801545c:	685b      	ldr	r3, [r3, #4]
 801545e:	2b73      	cmp	r3, #115	@ 0x73
 8015460:	d903      	bls.n	801546a <HAL_DMA_Init+0x182>
 8015462:	21ac      	movs	r1, #172	@ 0xac
 8015464:	4818      	ldr	r0, [pc, #96]	@ (80154c8 <HAL_DMA_Init+0x1e0>)
 8015466:	f7fd f825 	bl	80124b4 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	681b      	ldr	r3, [r3, #0]
 801546e:	461a      	mov	r2, r3
 8015470:	4b16      	ldr	r3, [pc, #88]	@ (80154cc <HAL_DMA_Init+0x1e4>)
 8015472:	429a      	cmp	r2, r3
 8015474:	d832      	bhi.n	80154dc <HAL_DMA_Init+0x1f4>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8015476:	687b      	ldr	r3, [r7, #4]
 8015478:	681b      	ldr	r3, [r3, #0]
 801547a:	461a      	mov	r2, r3
 801547c:	4b14      	ldr	r3, [pc, #80]	@ (80154d0 <HAL_DMA_Init+0x1e8>)
 801547e:	4413      	add	r3, r2
 8015480:	4a14      	ldr	r2, [pc, #80]	@ (80154d4 <HAL_DMA_Init+0x1ec>)
 8015482:	fba2 2303 	umull	r2, r3, r2, r3
 8015486:	091b      	lsrs	r3, r3, #4
 8015488:	009a      	lsls	r2, r3, #2
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 801548e:	687b      	ldr	r3, [r7, #4]
 8015490:	4a11      	ldr	r2, [pc, #68]	@ (80154d8 <HAL_DMA_Init+0x1f0>)
 8015492:	641a      	str	r2, [r3, #64]	@ 0x40
 8015494:	e031      	b.n	80154fa <HAL_DMA_Init+0x212>
 8015496:	bf00      	nop
 8015498:	40020008 	.word	0x40020008
 801549c:	4002001c 	.word	0x4002001c
 80154a0:	40020030 	.word	0x40020030
 80154a4:	40020044 	.word	0x40020044
 80154a8:	40020058 	.word	0x40020058
 80154ac:	4002006c 	.word	0x4002006c
 80154b0:	40020408 	.word	0x40020408
 80154b4:	4002041c 	.word	0x4002041c
 80154b8:	40020430 	.word	0x40020430
 80154bc:	40020444 	.word	0x40020444
 80154c0:	40020458 	.word	0x40020458
 80154c4:	4002046c 	.word	0x4002046c
 80154c8:	0801dc84 	.word	0x0801dc84
 80154cc:	40020407 	.word	0x40020407
 80154d0:	bffdfff8 	.word	0xbffdfff8
 80154d4:	cccccccd 	.word	0xcccccccd
 80154d8:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80154dc:	687b      	ldr	r3, [r7, #4]
 80154de:	681b      	ldr	r3, [r3, #0]
 80154e0:	461a      	mov	r2, r3
 80154e2:	4b3c      	ldr	r3, [pc, #240]	@ (80155d4 <HAL_DMA_Init+0x2ec>)
 80154e4:	4413      	add	r3, r2
 80154e6:	4a3c      	ldr	r2, [pc, #240]	@ (80155d8 <HAL_DMA_Init+0x2f0>)
 80154e8:	fba2 2303 	umull	r2, r3, r2, r3
 80154ec:	091b      	lsrs	r3, r3, #4
 80154ee:	009a      	lsls	r2, r3, #2
 80154f0:	687b      	ldr	r3, [r7, #4]
 80154f2:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80154f4:	687b      	ldr	r3, [r7, #4]
 80154f6:	4a39      	ldr	r2, [pc, #228]	@ (80155dc <HAL_DMA_Init+0x2f4>)
 80154f8:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80154fa:	687b      	ldr	r3, [r7, #4]
 80154fc:	2202      	movs	r2, #2
 80154fe:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 8015502:	687b      	ldr	r3, [r7, #4]
 8015504:	681b      	ldr	r3, [r3, #0]
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 801550a:	68fb      	ldr	r3, [r7, #12]
 801550c:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 8015510:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8015514:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801551a:	687b      	ldr	r3, [r7, #4]
 801551c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 801551e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8015520:	687b      	ldr	r3, [r7, #4]
 8015522:	691b      	ldr	r3, [r3, #16]
 8015524:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 801552a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 801552c:	687b      	ldr	r3, [r7, #4]
 801552e:	699b      	ldr	r3, [r3, #24]
 8015530:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8015536:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8015538:	687b      	ldr	r3, [r7, #4]
 801553a:	6a1b      	ldr	r3, [r3, #32]
 801553c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 801553e:	68fa      	ldr	r2, [r7, #12]
 8015540:	4313      	orrs	r3, r2
 8015542:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8015544:	687b      	ldr	r3, [r7, #4]
 8015546:	681b      	ldr	r3, [r3, #0]
 8015548:	68fa      	ldr	r2, [r7, #12]
 801554a:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 801554c:	6878      	ldr	r0, [r7, #4]
 801554e:	f000 f9b7 	bl	80158c0 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8015552:	687b      	ldr	r3, [r7, #4]
 8015554:	689b      	ldr	r3, [r3, #8]
 8015556:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 801555a:	d102      	bne.n	8015562 <HAL_DMA_Init+0x27a>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 801555c:	687b      	ldr	r3, [r7, #4]
 801555e:	2200      	movs	r2, #0
 8015560:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8015562:	687b      	ldr	r3, [r7, #4]
 8015564:	685a      	ldr	r2, [r3, #4]
 8015566:	687b      	ldr	r3, [r7, #4]
 8015568:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801556a:	b2d2      	uxtb	r2, r2
 801556c:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801556e:	687b      	ldr	r3, [r7, #4]
 8015570:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8015572:	687a      	ldr	r2, [r7, #4]
 8015574:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015576:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8015578:	687b      	ldr	r3, [r7, #4]
 801557a:	685b      	ldr	r3, [r3, #4]
 801557c:	2b00      	cmp	r3, #0
 801557e:	d010      	beq.n	80155a2 <HAL_DMA_Init+0x2ba>
 8015580:	687b      	ldr	r3, [r7, #4]
 8015582:	685b      	ldr	r3, [r3, #4]
 8015584:	2b04      	cmp	r3, #4
 8015586:	d80c      	bhi.n	80155a2 <HAL_DMA_Init+0x2ba>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8015588:	6878      	ldr	r0, [r7, #4]
 801558a:	f000 f9d7 	bl	801593c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 801558e:	687b      	ldr	r3, [r7, #4]
 8015590:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015592:	2200      	movs	r2, #0
 8015594:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8015596:	687b      	ldr	r3, [r7, #4]
 8015598:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801559a:	687a      	ldr	r2, [r7, #4]
 801559c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 801559e:	605a      	str	r2, [r3, #4]
 80155a0:	e008      	b.n	80155b4 <HAL_DMA_Init+0x2cc>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 80155a2:	687b      	ldr	r3, [r7, #4]
 80155a4:	2200      	movs	r2, #0
 80155a6:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	2200      	movs	r2, #0
 80155ac:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80155ae:	687b      	ldr	r3, [r7, #4]
 80155b0:	2200      	movs	r2, #0
 80155b2:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80155b4:	687b      	ldr	r3, [r7, #4]
 80155b6:	2200      	movs	r2, #0
 80155b8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80155ba:	687b      	ldr	r3, [r7, #4]
 80155bc:	2201      	movs	r2, #1
 80155be:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80155c2:	687b      	ldr	r3, [r7, #4]
 80155c4:	2200      	movs	r2, #0
 80155c6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80155ca:	2300      	movs	r3, #0
}
 80155cc:	4618      	mov	r0, r3
 80155ce:	3710      	adds	r7, #16
 80155d0:	46bd      	mov	sp, r7
 80155d2:	bd80      	pop	{r7, pc}
 80155d4:	bffdfbf8 	.word	0xbffdfbf8
 80155d8:	cccccccd 	.word	0xcccccccd
 80155dc:	40020400 	.word	0x40020400

080155e0 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80155e0:	b480      	push	{r7}
 80155e2:	b085      	sub	sp, #20
 80155e4:	af00      	add	r7, sp, #0
 80155e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80155e8:	2300      	movs	r3, #0
 80155ea:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80155ec:	687b      	ldr	r3, [r7, #4]
 80155ee:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80155f2:	b2db      	uxtb	r3, r3
 80155f4:	2b02      	cmp	r3, #2
 80155f6:	d005      	beq.n	8015604 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80155f8:	687b      	ldr	r3, [r7, #4]
 80155fa:	2204      	movs	r2, #4
 80155fc:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80155fe:	2301      	movs	r3, #1
 8015600:	73fb      	strb	r3, [r7, #15]
 8015602:	e037      	b.n	8015674 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8015604:	687b      	ldr	r3, [r7, #4]
 8015606:	681b      	ldr	r3, [r3, #0]
 8015608:	681a      	ldr	r2, [r3, #0]
 801560a:	687b      	ldr	r3, [r7, #4]
 801560c:	681b      	ldr	r3, [r3, #0]
 801560e:	f022 020e 	bic.w	r2, r2, #14
 8015612:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8015614:	687b      	ldr	r3, [r7, #4]
 8015616:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8015618:	681a      	ldr	r2, [r3, #0]
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 801561e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8015622:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8015624:	687b      	ldr	r3, [r7, #4]
 8015626:	681b      	ldr	r3, [r3, #0]
 8015628:	681a      	ldr	r2, [r3, #0]
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	f022 0201 	bic.w	r2, r2, #1
 8015632:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015638:	f003 021f 	and.w	r2, r3, #31
 801563c:	687b      	ldr	r3, [r7, #4]
 801563e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015640:	2101      	movs	r1, #1
 8015642:	fa01 f202 	lsl.w	r2, r1, r2
 8015646:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801564c:	687a      	ldr	r2, [r7, #4]
 801564e:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015650:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015656:	2b00      	cmp	r3, #0
 8015658:	d00c      	beq.n	8015674 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801565a:	687b      	ldr	r3, [r7, #4]
 801565c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801565e:	681a      	ldr	r2, [r3, #0]
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015664:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8015668:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801566a:	687b      	ldr	r3, [r7, #4]
 801566c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801566e:	687a      	ldr	r2, [r7, #4]
 8015670:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8015672:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8015674:	687b      	ldr	r3, [r7, #4]
 8015676:	2201      	movs	r2, #1
 8015678:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 801567c:	687b      	ldr	r3, [r7, #4]
 801567e:	2200      	movs	r2, #0
 8015680:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8015684:	7bfb      	ldrb	r3, [r7, #15]
}
 8015686:	4618      	mov	r0, r3
 8015688:	3714      	adds	r7, #20
 801568a:	46bd      	mov	sp, r7
 801568c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015690:	4770      	bx	lr

08015692 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8015692:	b580      	push	{r7, lr}
 8015694:	b084      	sub	sp, #16
 8015696:	af00      	add	r7, sp, #0
 8015698:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 801569a:	2300      	movs	r3, #0
 801569c:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 801569e:	687b      	ldr	r3, [r7, #4]
 80156a0:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80156a4:	b2db      	uxtb	r3, r3
 80156a6:	2b02      	cmp	r3, #2
 80156a8:	d00d      	beq.n	80156c6 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80156aa:	687b      	ldr	r3, [r7, #4]
 80156ac:	2204      	movs	r2, #4
 80156ae:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80156b0:	687b      	ldr	r3, [r7, #4]
 80156b2:	2201      	movs	r2, #1
 80156b4:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	2200      	movs	r2, #0
 80156bc:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80156c0:	2301      	movs	r3, #1
 80156c2:	73fb      	strb	r3, [r7, #15]
 80156c4:	e047      	b.n	8015756 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80156c6:	687b      	ldr	r3, [r7, #4]
 80156c8:	681b      	ldr	r3, [r3, #0]
 80156ca:	681a      	ldr	r2, [r3, #0]
 80156cc:	687b      	ldr	r3, [r7, #4]
 80156ce:	681b      	ldr	r3, [r3, #0]
 80156d0:	f022 020e 	bic.w	r2, r2, #14
 80156d4:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80156d6:	687b      	ldr	r3, [r7, #4]
 80156d8:	681b      	ldr	r3, [r3, #0]
 80156da:	681a      	ldr	r2, [r3, #0]
 80156dc:	687b      	ldr	r3, [r7, #4]
 80156de:	681b      	ldr	r3, [r3, #0]
 80156e0:	f022 0201 	bic.w	r2, r2, #1
 80156e4:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80156e6:	687b      	ldr	r3, [r7, #4]
 80156e8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156ea:	681a      	ldr	r2, [r3, #0]
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80156f0:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80156f4:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80156f6:	687b      	ldr	r3, [r7, #4]
 80156f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80156fa:	f003 021f 	and.w	r2, r3, #31
 80156fe:	687b      	ldr	r3, [r7, #4]
 8015700:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015702:	2101      	movs	r1, #1
 8015704:	fa01 f202 	lsl.w	r2, r1, r2
 8015708:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 801570a:	687b      	ldr	r3, [r7, #4]
 801570c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801570e:	687a      	ldr	r2, [r7, #4]
 8015710:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8015712:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8015714:	687b      	ldr	r3, [r7, #4]
 8015716:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015718:	2b00      	cmp	r3, #0
 801571a:	d00c      	beq.n	8015736 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 801571c:	687b      	ldr	r3, [r7, #4]
 801571e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015720:	681a      	ldr	r2, [r3, #0]
 8015722:	687b      	ldr	r3, [r7, #4]
 8015724:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015726:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 801572a:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 801572c:	687b      	ldr	r3, [r7, #4]
 801572e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8015730:	687a      	ldr	r2, [r7, #4]
 8015732:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8015734:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015736:	687b      	ldr	r3, [r7, #4]
 8015738:	2201      	movs	r2, #1
 801573a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801573e:	687b      	ldr	r3, [r7, #4]
 8015740:	2200      	movs	r2, #0
 8015742:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8015746:	687b      	ldr	r3, [r7, #4]
 8015748:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 801574a:	2b00      	cmp	r3, #0
 801574c:	d003      	beq.n	8015756 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 801574e:	687b      	ldr	r3, [r7, #4]
 8015750:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8015752:	6878      	ldr	r0, [r7, #4]
 8015754:	4798      	blx	r3
    }
  }
  return status;
 8015756:	7bfb      	ldrb	r3, [r7, #15]
}
 8015758:	4618      	mov	r0, r3
 801575a:	3710      	adds	r7, #16
 801575c:	46bd      	mov	sp, r7
 801575e:	bd80      	pop	{r7, pc}

08015760 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8015760:	b580      	push	{r7, lr}
 8015762:	b084      	sub	sp, #16
 8015764:	af00      	add	r7, sp, #0
 8015766:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8015768:	687b      	ldr	r3, [r7, #4]
 801576a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801576c:	681b      	ldr	r3, [r3, #0]
 801576e:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	681b      	ldr	r3, [r3, #0]
 8015776:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8015778:	687b      	ldr	r3, [r7, #4]
 801577a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801577c:	f003 031f 	and.w	r3, r3, #31
 8015780:	2204      	movs	r2, #4
 8015782:	409a      	lsls	r2, r3
 8015784:	68fb      	ldr	r3, [r7, #12]
 8015786:	4013      	ands	r3, r2
 8015788:	2b00      	cmp	r3, #0
 801578a:	d026      	beq.n	80157da <HAL_DMA_IRQHandler+0x7a>
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	f003 0304 	and.w	r3, r3, #4
 8015792:	2b00      	cmp	r3, #0
 8015794:	d021      	beq.n	80157da <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8015796:	687b      	ldr	r3, [r7, #4]
 8015798:	681b      	ldr	r3, [r3, #0]
 801579a:	681b      	ldr	r3, [r3, #0]
 801579c:	f003 0320 	and.w	r3, r3, #32
 80157a0:	2b00      	cmp	r3, #0
 80157a2:	d107      	bne.n	80157b4 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80157a4:	687b      	ldr	r3, [r7, #4]
 80157a6:	681b      	ldr	r3, [r3, #0]
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	681b      	ldr	r3, [r3, #0]
 80157ae:	f022 0204 	bic.w	r2, r2, #4
 80157b2:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80157b4:	687b      	ldr	r3, [r7, #4]
 80157b6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157b8:	f003 021f 	and.w	r2, r3, #31
 80157bc:	687b      	ldr	r3, [r7, #4]
 80157be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80157c0:	2104      	movs	r1, #4
 80157c2:	fa01 f202 	lsl.w	r2, r1, r2
 80157c6:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80157c8:	687b      	ldr	r3, [r7, #4]
 80157ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157cc:	2b00      	cmp	r3, #0
 80157ce:	d071      	beq.n	80158b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80157d0:	687b      	ldr	r3, [r7, #4]
 80157d2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80157d4:	6878      	ldr	r0, [r7, #4]
 80157d6:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80157d8:	e06c      	b.n	80158b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80157da:	687b      	ldr	r3, [r7, #4]
 80157dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80157de:	f003 031f 	and.w	r3, r3, #31
 80157e2:	2202      	movs	r2, #2
 80157e4:	409a      	lsls	r2, r3
 80157e6:	68fb      	ldr	r3, [r7, #12]
 80157e8:	4013      	ands	r3, r2
 80157ea:	2b00      	cmp	r3, #0
 80157ec:	d02e      	beq.n	801584c <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80157ee:	68bb      	ldr	r3, [r7, #8]
 80157f0:	f003 0302 	and.w	r3, r3, #2
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d029      	beq.n	801584c <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80157f8:	687b      	ldr	r3, [r7, #4]
 80157fa:	681b      	ldr	r3, [r3, #0]
 80157fc:	681b      	ldr	r3, [r3, #0]
 80157fe:	f003 0320 	and.w	r3, r3, #32
 8015802:	2b00      	cmp	r3, #0
 8015804:	d10b      	bne.n	801581e <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8015806:	687b      	ldr	r3, [r7, #4]
 8015808:	681b      	ldr	r3, [r3, #0]
 801580a:	681a      	ldr	r2, [r3, #0]
 801580c:	687b      	ldr	r3, [r7, #4]
 801580e:	681b      	ldr	r3, [r3, #0]
 8015810:	f022 020a 	bic.w	r2, r2, #10
 8015814:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8015816:	687b      	ldr	r3, [r7, #4]
 8015818:	2201      	movs	r2, #1
 801581a:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015822:	f003 021f 	and.w	r2, r3, #31
 8015826:	687b      	ldr	r3, [r7, #4]
 8015828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801582a:	2102      	movs	r1, #2
 801582c:	fa01 f202 	lsl.w	r2, r1, r2
 8015830:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8015832:	687b      	ldr	r3, [r7, #4]
 8015834:	2200      	movs	r2, #0
 8015836:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 801583a:	687b      	ldr	r3, [r7, #4]
 801583c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801583e:	2b00      	cmp	r3, #0
 8015840:	d038      	beq.n	80158b4 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8015842:	687b      	ldr	r3, [r7, #4]
 8015844:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8015846:	6878      	ldr	r0, [r7, #4]
 8015848:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 801584a:	e033      	b.n	80158b4 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 801584c:	687b      	ldr	r3, [r7, #4]
 801584e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8015850:	f003 031f 	and.w	r3, r3, #31
 8015854:	2208      	movs	r2, #8
 8015856:	409a      	lsls	r2, r3
 8015858:	68fb      	ldr	r3, [r7, #12]
 801585a:	4013      	ands	r3, r2
 801585c:	2b00      	cmp	r3, #0
 801585e:	d02a      	beq.n	80158b6 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8015860:	68bb      	ldr	r3, [r7, #8]
 8015862:	f003 0308 	and.w	r3, r3, #8
 8015866:	2b00      	cmp	r3, #0
 8015868:	d025      	beq.n	80158b6 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 801586a:	687b      	ldr	r3, [r7, #4]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	681a      	ldr	r2, [r3, #0]
 8015870:	687b      	ldr	r3, [r7, #4]
 8015872:	681b      	ldr	r3, [r3, #0]
 8015874:	f022 020e 	bic.w	r2, r2, #14
 8015878:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 801587a:	687b      	ldr	r3, [r7, #4]
 801587c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801587e:	f003 021f 	and.w	r2, r3, #31
 8015882:	687b      	ldr	r3, [r7, #4]
 8015884:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8015886:	2101      	movs	r1, #1
 8015888:	fa01 f202 	lsl.w	r2, r1, r2
 801588c:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801588e:	687b      	ldr	r3, [r7, #4]
 8015890:	2201      	movs	r2, #1
 8015892:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8015894:	687b      	ldr	r3, [r7, #4]
 8015896:	2201      	movs	r2, #1
 8015898:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 801589c:	687b      	ldr	r3, [r7, #4]
 801589e:	2200      	movs	r2, #0
 80158a0:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80158a4:	687b      	ldr	r3, [r7, #4]
 80158a6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158a8:	2b00      	cmp	r3, #0
 80158aa:	d004      	beq.n	80158b6 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80158ac:	687b      	ldr	r3, [r7, #4]
 80158ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80158b0:	6878      	ldr	r0, [r7, #4]
 80158b2:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80158b4:	bf00      	nop
 80158b6:	bf00      	nop
}
 80158b8:	3710      	adds	r7, #16
 80158ba:	46bd      	mov	sp, r7
 80158bc:	bd80      	pop	{r7, pc}
	...

080158c0 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80158c0:	b480      	push	{r7}
 80158c2:	b087      	sub	sp, #28
 80158c4:	af00      	add	r7, sp, #0
 80158c6:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80158c8:	687b      	ldr	r3, [r7, #4]
 80158ca:	681b      	ldr	r3, [r3, #0]
 80158cc:	461a      	mov	r2, r3
 80158ce:	4b16      	ldr	r3, [pc, #88]	@ (8015928 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80158d0:	429a      	cmp	r2, r3
 80158d2:	d802      	bhi.n	80158da <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80158d4:	4b15      	ldr	r3, [pc, #84]	@ (801592c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80158d6:	617b      	str	r3, [r7, #20]
 80158d8:	e001      	b.n	80158de <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80158da:	4b15      	ldr	r3, [pc, #84]	@ (8015930 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80158dc:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80158de:	697b      	ldr	r3, [r7, #20]
 80158e0:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80158e2:	687b      	ldr	r3, [r7, #4]
 80158e4:	681b      	ldr	r3, [r3, #0]
 80158e6:	b2db      	uxtb	r3, r3
 80158e8:	3b08      	subs	r3, #8
 80158ea:	4a12      	ldr	r2, [pc, #72]	@ (8015934 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80158ec:	fba2 2303 	umull	r2, r3, r2, r3
 80158f0:	091b      	lsrs	r3, r3, #4
 80158f2:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80158f4:	687b      	ldr	r3, [r7, #4]
 80158f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80158f8:	089b      	lsrs	r3, r3, #2
 80158fa:	009a      	lsls	r2, r3, #2
 80158fc:	693b      	ldr	r3, [r7, #16]
 80158fe:	4413      	add	r3, r2
 8015900:	461a      	mov	r2, r3
 8015902:	687b      	ldr	r3, [r7, #4]
 8015904:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	4a0b      	ldr	r2, [pc, #44]	@ (8015938 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 801590a:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 801590c:	68fb      	ldr	r3, [r7, #12]
 801590e:	f003 031f 	and.w	r3, r3, #31
 8015912:	2201      	movs	r2, #1
 8015914:	409a      	lsls	r2, r3
 8015916:	687b      	ldr	r3, [r7, #4]
 8015918:	651a      	str	r2, [r3, #80]	@ 0x50
}
 801591a:	bf00      	nop
 801591c:	371c      	adds	r7, #28
 801591e:	46bd      	mov	sp, r7
 8015920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015924:	4770      	bx	lr
 8015926:	bf00      	nop
 8015928:	40020407 	.word	0x40020407
 801592c:	40020800 	.word	0x40020800
 8015930:	40020820 	.word	0x40020820
 8015934:	cccccccd 	.word	0xcccccccd
 8015938:	40020880 	.word	0x40020880

0801593c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 801593c:	b480      	push	{r7}
 801593e:	b085      	sub	sp, #20
 8015940:	af00      	add	r7, sp, #0
 8015942:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8015944:	687b      	ldr	r3, [r7, #4]
 8015946:	685b      	ldr	r3, [r3, #4]
 8015948:	b2db      	uxtb	r3, r3
 801594a:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 801594c:	68fa      	ldr	r2, [r7, #12]
 801594e:	4b0b      	ldr	r3, [pc, #44]	@ (801597c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 8015950:	4413      	add	r3, r2
 8015952:	009b      	lsls	r3, r3, #2
 8015954:	461a      	mov	r2, r3
 8015956:	687b      	ldr	r3, [r7, #4]
 8015958:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 801595a:	687b      	ldr	r3, [r7, #4]
 801595c:	4a08      	ldr	r2, [pc, #32]	@ (8015980 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 801595e:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 8015960:	68fb      	ldr	r3, [r7, #12]
 8015962:	3b01      	subs	r3, #1
 8015964:	f003 031f 	and.w	r3, r3, #31
 8015968:	2201      	movs	r2, #1
 801596a:	409a      	lsls	r2, r3
 801596c:	687b      	ldr	r3, [r7, #4]
 801596e:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 8015970:	bf00      	nop
 8015972:	3714      	adds	r7, #20
 8015974:	46bd      	mov	sp, r7
 8015976:	f85d 7b04 	ldr.w	r7, [sp], #4
 801597a:	4770      	bx	lr
 801597c:	1000823f 	.word	0x1000823f
 8015980:	40020940 	.word	0x40020940

08015984 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8015984:	b580      	push	{r7, lr}
 8015986:	b086      	sub	sp, #24
 8015988:	af00      	add	r7, sp, #0
 801598a:	60f8      	str	r0, [r7, #12]
 801598c:	60b9      	str	r1, [r7, #8]
 801598e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8015992:	2300      	movs	r3, #0
 8015994:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8015996:	68fb      	ldr	r3, [r7, #12]
 8015998:	2b00      	cmp	r3, #0
 801599a:	d009      	beq.n	80159b0 <HAL_FLASH_Program+0x2c>
 801599c:	68fb      	ldr	r3, [r7, #12]
 801599e:	2b01      	cmp	r3, #1
 80159a0:	d006      	beq.n	80159b0 <HAL_FLASH_Program+0x2c>
 80159a2:	68fb      	ldr	r3, [r7, #12]
 80159a4:	2b02      	cmp	r3, #2
 80159a6:	d003      	beq.n	80159b0 <HAL_FLASH_Program+0x2c>
 80159a8:	21b3      	movs	r1, #179	@ 0xb3
 80159aa:	4830      	ldr	r0, [pc, #192]	@ (8015a6c <HAL_FLASH_Program+0xe8>)
 80159ac:	f7fc fd82 	bl	80124b4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80159b0:	4b2f      	ldr	r3, [pc, #188]	@ (8015a70 <HAL_FLASH_Program+0xec>)
 80159b2:	781b      	ldrb	r3, [r3, #0]
 80159b4:	2b01      	cmp	r3, #1
 80159b6:	d101      	bne.n	80159bc <HAL_FLASH_Program+0x38>
 80159b8:	2302      	movs	r3, #2
 80159ba:	e053      	b.n	8015a64 <HAL_FLASH_Program+0xe0>
 80159bc:	4b2c      	ldr	r3, [pc, #176]	@ (8015a70 <HAL_FLASH_Program+0xec>)
 80159be:	2201      	movs	r2, #1
 80159c0:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80159c2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80159c6:	f000 f893 	bl	8015af0 <FLASH_WaitForLastOperation>
 80159ca:	4603      	mov	r3, r0
 80159cc:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80159ce:	7dfb      	ldrb	r3, [r7, #23]
 80159d0:	2b00      	cmp	r3, #0
 80159d2:	d143      	bne.n	8015a5c <HAL_FLASH_Program+0xd8>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80159d4:	4b26      	ldr	r3, [pc, #152]	@ (8015a70 <HAL_FLASH_Program+0xec>)
 80159d6:	2200      	movs	r2, #0
 80159d8:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80159da:	4b26      	ldr	r3, [pc, #152]	@ (8015a74 <HAL_FLASH_Program+0xf0>)
 80159dc:	681b      	ldr	r3, [r3, #0]
 80159de:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80159e2:	2b00      	cmp	r3, #0
 80159e4:	d009      	beq.n	80159fa <HAL_FLASH_Program+0x76>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80159e6:	4b23      	ldr	r3, [pc, #140]	@ (8015a74 <HAL_FLASH_Program+0xf0>)
 80159e8:	681b      	ldr	r3, [r3, #0]
 80159ea:	4a22      	ldr	r2, [pc, #136]	@ (8015a74 <HAL_FLASH_Program+0xf0>)
 80159ec:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80159f0:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80159f2:	4b1f      	ldr	r3, [pc, #124]	@ (8015a70 <HAL_FLASH_Program+0xec>)
 80159f4:	2202      	movs	r2, #2
 80159f6:	771a      	strb	r2, [r3, #28]
 80159f8:	e002      	b.n	8015a00 <HAL_FLASH_Program+0x7c>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80159fa:	4b1d      	ldr	r3, [pc, #116]	@ (8015a70 <HAL_FLASH_Program+0xec>)
 80159fc:	2200      	movs	r2, #0
 80159fe:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8015a00:	68fb      	ldr	r3, [r7, #12]
 8015a02:	2b00      	cmp	r3, #0
 8015a04:	d107      	bne.n	8015a16 <HAL_FLASH_Program+0x92>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 8015a06:	e9d7 2300 	ldrd	r2, r3, [r7]
 8015a0a:	68b8      	ldr	r0, [r7, #8]
 8015a0c:	f000 f8c2 	bl	8015b94 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8015a10:	2301      	movs	r3, #1
 8015a12:	613b      	str	r3, [r7, #16]
 8015a14:	e010      	b.n	8015a38 <HAL_FLASH_Program+0xb4>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 8015a16:	68fb      	ldr	r3, [r7, #12]
 8015a18:	2b01      	cmp	r3, #1
 8015a1a:	d002      	beq.n	8015a22 <HAL_FLASH_Program+0x9e>
 8015a1c:	68fb      	ldr	r3, [r7, #12]
 8015a1e:	2b02      	cmp	r3, #2
 8015a20:	d10a      	bne.n	8015a38 <HAL_FLASH_Program+0xb4>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8015a22:	683b      	ldr	r3, [r7, #0]
 8015a24:	4619      	mov	r1, r3
 8015a26:	68b8      	ldr	r0, [r7, #8]
 8015a28:	f000 f90c 	bl	8015c44 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8015a2c:	68fb      	ldr	r3, [r7, #12]
 8015a2e:	2b02      	cmp	r3, #2
 8015a30:	d102      	bne.n	8015a38 <HAL_FLASH_Program+0xb4>
      {
        prog_bit = FLASH_CR_FSTPG;
 8015a32:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 8015a36:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8015a38:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015a3c:	f000 f858 	bl	8015af0 <FLASH_WaitForLastOperation>
 8015a40:	4603      	mov	r3, r0
 8015a42:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 8015a44:	693b      	ldr	r3, [r7, #16]
 8015a46:	2b00      	cmp	r3, #0
 8015a48:	d006      	beq.n	8015a58 <HAL_FLASH_Program+0xd4>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8015a4a:	4b0a      	ldr	r3, [pc, #40]	@ (8015a74 <HAL_FLASH_Program+0xf0>)
 8015a4c:	695a      	ldr	r2, [r3, #20]
 8015a4e:	693b      	ldr	r3, [r7, #16]
 8015a50:	43db      	mvns	r3, r3
 8015a52:	4908      	ldr	r1, [pc, #32]	@ (8015a74 <HAL_FLASH_Program+0xf0>)
 8015a54:	4013      	ands	r3, r2
 8015a56:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8015a58:	f000 fa6e 	bl	8015f38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015a5c:	4b04      	ldr	r3, [pc, #16]	@ (8015a70 <HAL_FLASH_Program+0xec>)
 8015a5e:	2200      	movs	r2, #0
 8015a60:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 8015a62:	7dfb      	ldrb	r3, [r7, #23]
}
 8015a64:	4618      	mov	r0, r3
 8015a66:	3718      	adds	r7, #24
 8015a68:	46bd      	mov	sp, r7
 8015a6a:	bd80      	pop	{r7, pc}
 8015a6c:	0801dcbc 	.word	0x0801dcbc
 8015a70:	2000000c 	.word	0x2000000c
 8015a74:	40022000 	.word	0x40022000

08015a78 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8015a78:	b480      	push	{r7}
 8015a7a:	b083      	sub	sp, #12
 8015a7c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8015a7e:	2300      	movs	r3, #0
 8015a80:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8015a82:	4b0b      	ldr	r3, [pc, #44]	@ (8015ab0 <HAL_FLASH_Unlock+0x38>)
 8015a84:	695b      	ldr	r3, [r3, #20]
 8015a86:	2b00      	cmp	r3, #0
 8015a88:	da0b      	bge.n	8015aa2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8015a8a:	4b09      	ldr	r3, [pc, #36]	@ (8015ab0 <HAL_FLASH_Unlock+0x38>)
 8015a8c:	4a09      	ldr	r2, [pc, #36]	@ (8015ab4 <HAL_FLASH_Unlock+0x3c>)
 8015a8e:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8015a90:	4b07      	ldr	r3, [pc, #28]	@ (8015ab0 <HAL_FLASH_Unlock+0x38>)
 8015a92:	4a09      	ldr	r2, [pc, #36]	@ (8015ab8 <HAL_FLASH_Unlock+0x40>)
 8015a94:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8015a96:	4b06      	ldr	r3, [pc, #24]	@ (8015ab0 <HAL_FLASH_Unlock+0x38>)
 8015a98:	695b      	ldr	r3, [r3, #20]
 8015a9a:	2b00      	cmp	r3, #0
 8015a9c:	da01      	bge.n	8015aa2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8015a9e:	2301      	movs	r3, #1
 8015aa0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8015aa2:	79fb      	ldrb	r3, [r7, #7]
}
 8015aa4:	4618      	mov	r0, r3
 8015aa6:	370c      	adds	r7, #12
 8015aa8:	46bd      	mov	sp, r7
 8015aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aae:	4770      	bx	lr
 8015ab0:	40022000 	.word	0x40022000
 8015ab4:	45670123 	.word	0x45670123
 8015ab8:	cdef89ab 	.word	0xcdef89ab

08015abc <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8015abc:	b480      	push	{r7}
 8015abe:	b083      	sub	sp, #12
 8015ac0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8015ac2:	2301      	movs	r3, #1
 8015ac4:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 8015ac6:	4b09      	ldr	r3, [pc, #36]	@ (8015aec <HAL_FLASH_Lock+0x30>)
 8015ac8:	695b      	ldr	r3, [r3, #20]
 8015aca:	4a08      	ldr	r2, [pc, #32]	@ (8015aec <HAL_FLASH_Lock+0x30>)
 8015acc:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8015ad0:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8015ad2:	4b06      	ldr	r3, [pc, #24]	@ (8015aec <HAL_FLASH_Lock+0x30>)
 8015ad4:	695b      	ldr	r3, [r3, #20]
 8015ad6:	2b00      	cmp	r3, #0
 8015ad8:	da01      	bge.n	8015ade <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 8015ada:	2300      	movs	r3, #0
 8015adc:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8015ade:	79fb      	ldrb	r3, [r7, #7]
}
 8015ae0:	4618      	mov	r0, r3
 8015ae2:	370c      	adds	r7, #12
 8015ae4:	46bd      	mov	sp, r7
 8015ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015aea:	4770      	bx	lr
 8015aec:	40022000 	.word	0x40022000

08015af0 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8015af0:	b580      	push	{r7, lr}
 8015af2:	b084      	sub	sp, #16
 8015af4:	af00      	add	r7, sp, #0
 8015af6:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 8015af8:	f7fd f800 	bl	8012afc <HAL_GetTick>
 8015afc:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8015afe:	e009      	b.n	8015b14 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8015b00:	f7fc fffc 	bl	8012afc <HAL_GetTick>
 8015b04:	4602      	mov	r2, r0
 8015b06:	68fb      	ldr	r3, [r7, #12]
 8015b08:	1ad3      	subs	r3, r2, r3
 8015b0a:	687a      	ldr	r2, [r7, #4]
 8015b0c:	429a      	cmp	r2, r3
 8015b0e:	d201      	bcs.n	8015b14 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8015b10:	2303      	movs	r3, #3
 8015b12:	e037      	b.n	8015b84 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8015b14:	4b1d      	ldr	r3, [pc, #116]	@ (8015b8c <FLASH_WaitForLastOperation+0x9c>)
 8015b16:	691b      	ldr	r3, [r3, #16]
 8015b18:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8015b1c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8015b20:	d0ee      	beq.n	8015b00 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8015b22:	4b1a      	ldr	r3, [pc, #104]	@ (8015b8c <FLASH_WaitForLastOperation+0x9c>)
 8015b24:	691a      	ldr	r2, [r3, #16]
 8015b26:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8015b2a:	4013      	ands	r3, r2
 8015b2c:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8015b2e:	68bb      	ldr	r3, [r7, #8]
 8015b30:	2b00      	cmp	r3, #0
 8015b32:	d01d      	beq.n	8015b70 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8015b34:	4b16      	ldr	r3, [pc, #88]	@ (8015b90 <FLASH_WaitForLastOperation+0xa0>)
 8015b36:	685a      	ldr	r2, [r3, #4]
 8015b38:	68bb      	ldr	r3, [r7, #8]
 8015b3a:	4313      	orrs	r3, r2
 8015b3c:	4a14      	ldr	r2, [pc, #80]	@ (8015b90 <FLASH_WaitForLastOperation+0xa0>)
 8015b3e:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8015b40:	68bb      	ldr	r3, [r7, #8]
 8015b42:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015b46:	d307      	bcc.n	8015b58 <FLASH_WaitForLastOperation+0x68>
 8015b48:	4b10      	ldr	r3, [pc, #64]	@ (8015b8c <FLASH_WaitForLastOperation+0x9c>)
 8015b4a:	699a      	ldr	r2, [r3, #24]
 8015b4c:	68bb      	ldr	r3, [r7, #8]
 8015b4e:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 8015b52:	490e      	ldr	r1, [pc, #56]	@ (8015b8c <FLASH_WaitForLastOperation+0x9c>)
 8015b54:	4313      	orrs	r3, r2
 8015b56:	618b      	str	r3, [r1, #24]
 8015b58:	68bb      	ldr	r3, [r7, #8]
 8015b5a:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8015b5e:	2b00      	cmp	r3, #0
 8015b60:	d004      	beq.n	8015b6c <FLASH_WaitForLastOperation+0x7c>
 8015b62:	4a0a      	ldr	r2, [pc, #40]	@ (8015b8c <FLASH_WaitForLastOperation+0x9c>)
 8015b64:	68bb      	ldr	r3, [r7, #8]
 8015b66:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8015b6a:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8015b6c:	2301      	movs	r3, #1
 8015b6e:	e009      	b.n	8015b84 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8015b70:	4b06      	ldr	r3, [pc, #24]	@ (8015b8c <FLASH_WaitForLastOperation+0x9c>)
 8015b72:	691b      	ldr	r3, [r3, #16]
 8015b74:	f003 0301 	and.w	r3, r3, #1
 8015b78:	2b01      	cmp	r3, #1
 8015b7a:	d102      	bne.n	8015b82 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8015b7c:	4b03      	ldr	r3, [pc, #12]	@ (8015b8c <FLASH_WaitForLastOperation+0x9c>)
 8015b7e:	2201      	movs	r2, #1
 8015b80:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8015b82:	2300      	movs	r3, #0
}
 8015b84:	4618      	mov	r0, r3
 8015b86:	3710      	adds	r7, #16
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	bd80      	pop	{r7, pc}
 8015b8c:	40022000 	.word	0x40022000
 8015b90:	2000000c 	.word	0x2000000c

08015b94 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8015b94:	b580      	push	{r7, lr}
 8015b96:	b084      	sub	sp, #16
 8015b98:	af00      	add	r7, sp, #0
 8015b9a:	60f8      	str	r0, [r7, #12]
 8015b9c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 8015ba0:	68fb      	ldr	r3, [r7, #12]
 8015ba2:	4a20      	ldr	r2, [pc, #128]	@ (8015c24 <FLASH_Program_DoubleWord+0x90>)
 8015ba4:	4293      	cmp	r3, r2
 8015ba6:	d313      	bcc.n	8015bd0 <FLASH_Program_DoubleWord+0x3c>
 8015ba8:	4b1f      	ldr	r3, [pc, #124]	@ (8015c28 <FLASH_Program_DoubleWord+0x94>)
 8015baa:	881b      	ldrh	r3, [r3, #0]
 8015bac:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015bb0:	4293      	cmp	r3, r2
 8015bb2:	d009      	beq.n	8015bc8 <FLASH_Program_DoubleWord+0x34>
 8015bb4:	4b1c      	ldr	r3, [pc, #112]	@ (8015c28 <FLASH_Program_DoubleWord+0x94>)
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	029a      	lsls	r2, r3, #10
 8015bba:	4b1c      	ldr	r3, [pc, #112]	@ (8015c2c <FLASH_Program_DoubleWord+0x98>)
 8015bbc:	4013      	ands	r3, r2
 8015bbe:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8015bc2:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8015bc6:	e000      	b.n	8015bca <FLASH_Program_DoubleWord+0x36>
 8015bc8:	4b19      	ldr	r3, [pc, #100]	@ (8015c30 <FLASH_Program_DoubleWord+0x9c>)
 8015bca:	68fa      	ldr	r2, [r7, #12]
 8015bcc:	4293      	cmp	r3, r2
 8015bce:	d80c      	bhi.n	8015bea <FLASH_Program_DoubleWord+0x56>
 8015bd0:	68fb      	ldr	r3, [r7, #12]
 8015bd2:	4a18      	ldr	r2, [pc, #96]	@ (8015c34 <FLASH_Program_DoubleWord+0xa0>)
 8015bd4:	4293      	cmp	r3, r2
 8015bd6:	d903      	bls.n	8015be0 <FLASH_Program_DoubleWord+0x4c>
 8015bd8:	68fb      	ldr	r3, [r7, #12]
 8015bda:	4a17      	ldr	r2, [pc, #92]	@ (8015c38 <FLASH_Program_DoubleWord+0xa4>)
 8015bdc:	4293      	cmp	r3, r2
 8015bde:	d904      	bls.n	8015bea <FLASH_Program_DoubleWord+0x56>
 8015be0:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 8015be4:	4815      	ldr	r0, [pc, #84]	@ (8015c3c <FLASH_Program_DoubleWord+0xa8>)
 8015be6:	f7fc fc65 	bl	80124b4 <assert_failed>

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 8015bea:	4b15      	ldr	r3, [pc, #84]	@ (8015c40 <FLASH_Program_DoubleWord+0xac>)
 8015bec:	695b      	ldr	r3, [r3, #20]
 8015bee:	4a14      	ldr	r2, [pc, #80]	@ (8015c40 <FLASH_Program_DoubleWord+0xac>)
 8015bf0:	f043 0301 	orr.w	r3, r3, #1
 8015bf4:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8015bf6:	68fb      	ldr	r3, [r7, #12]
 8015bf8:	683a      	ldr	r2, [r7, #0]
 8015bfa:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8015bfc:	f3bf 8f6f 	isb	sy
}
 8015c00:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8015c02:	e9d7 0100 	ldrd	r0, r1, [r7]
 8015c06:	f04f 0200 	mov.w	r2, #0
 8015c0a:	f04f 0300 	mov.w	r3, #0
 8015c0e:	000a      	movs	r2, r1
 8015c10:	2300      	movs	r3, #0
 8015c12:	68f9      	ldr	r1, [r7, #12]
 8015c14:	3104      	adds	r1, #4
 8015c16:	4613      	mov	r3, r2
 8015c18:	600b      	str	r3, [r1, #0]
}
 8015c1a:	bf00      	nop
 8015c1c:	3710      	adds	r7, #16
 8015c1e:	46bd      	mov	sp, r7
 8015c20:	bd80      	pop	{r7, pc}
 8015c22:	bf00      	nop
 8015c24:	08011000 	.word	0x08011000
 8015c28:	1fff75e0 	.word	0x1fff75e0
 8015c2c:	03fffc00 	.word	0x03fffc00
 8015c30:	08031000 	.word	0x08031000
 8015c34:	1fff6fff 	.word	0x1fff6fff
 8015c38:	1fff73ff 	.word	0x1fff73ff
 8015c3c:	0801dcbc 	.word	0x0801dcbc
 8015c40:	40022000 	.word	0x40022000

08015c44 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 8015c44:	b580      	push	{r7, lr}
 8015c46:	b088      	sub	sp, #32
 8015c48:	af00      	add	r7, sp, #0
 8015c4a:	6078      	str	r0, [r7, #4]
 8015c4c:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8015c4e:	2340      	movs	r3, #64	@ 0x40
 8015c50:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 8015c52:	687b      	ldr	r3, [r7, #4]
 8015c54:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 8015c56:	683b      	ldr	r3, [r7, #0]
 8015c58:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 8015c5a:	687b      	ldr	r3, [r7, #4]
 8015c5c:	4a21      	ldr	r2, [pc, #132]	@ (8015ce4 <FLASH_Program_Fast+0xa0>)
 8015c5e:	4293      	cmp	r3, r2
 8015c60:	d313      	bcc.n	8015c8a <FLASH_Program_Fast+0x46>
 8015c62:	4b21      	ldr	r3, [pc, #132]	@ (8015ce8 <FLASH_Program_Fast+0xa4>)
 8015c64:	881b      	ldrh	r3, [r3, #0]
 8015c66:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015c6a:	4293      	cmp	r3, r2
 8015c6c:	d009      	beq.n	8015c82 <FLASH_Program_Fast+0x3e>
 8015c6e:	4b1e      	ldr	r3, [pc, #120]	@ (8015ce8 <FLASH_Program_Fast+0xa4>)
 8015c70:	681b      	ldr	r3, [r3, #0]
 8015c72:	029a      	lsls	r2, r3, #10
 8015c74:	4b1d      	ldr	r3, [pc, #116]	@ (8015cec <FLASH_Program_Fast+0xa8>)
 8015c76:	4013      	ands	r3, r2
 8015c78:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8015c7c:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8015c80:	e000      	b.n	8015c84 <FLASH_Program_Fast+0x40>
 8015c82:	4b1b      	ldr	r3, [pc, #108]	@ (8015cf0 <FLASH_Program_Fast+0xac>)
 8015c84:	687a      	ldr	r2, [r7, #4]
 8015c86:	4293      	cmp	r3, r2
 8015c88:	d804      	bhi.n	8015c94 <FLASH_Program_Fast+0x50>
 8015c8a:	f240 21f6 	movw	r1, #758	@ 0x2f6
 8015c8e:	4819      	ldr	r0, [pc, #100]	@ (8015cf4 <FLASH_Program_Fast+0xb0>)
 8015c90:	f7fc fc10 	bl	80124b4 <assert_failed>

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 8015c94:	4b18      	ldr	r3, [pc, #96]	@ (8015cf8 <FLASH_Program_Fast+0xb4>)
 8015c96:	695b      	ldr	r3, [r3, #20]
 8015c98:	4a17      	ldr	r2, [pc, #92]	@ (8015cf8 <FLASH_Program_Fast+0xb4>)
 8015c9a:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8015c9e:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015ca0:	f3ef 8310 	mrs	r3, PRIMASK
 8015ca4:	60fb      	str	r3, [r7, #12]
  return(result);
 8015ca6:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8015ca8:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8015caa:	b672      	cpsid	i
}
 8015cac:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8015cae:	697b      	ldr	r3, [r7, #20]
 8015cb0:	681a      	ldr	r2, [r3, #0]
 8015cb2:	69bb      	ldr	r3, [r7, #24]
 8015cb4:	601a      	str	r2, [r3, #0]
    dest_addr++;
 8015cb6:	69bb      	ldr	r3, [r7, #24]
 8015cb8:	3304      	adds	r3, #4
 8015cba:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8015cbc:	697b      	ldr	r3, [r7, #20]
 8015cbe:	3304      	adds	r3, #4
 8015cc0:	617b      	str	r3, [r7, #20]
    row_index--;
 8015cc2:	7ffb      	ldrb	r3, [r7, #31]
 8015cc4:	3b01      	subs	r3, #1
 8015cc6:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8015cc8:	7ffb      	ldrb	r3, [r7, #31]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	d1ef      	bne.n	8015cae <FLASH_Program_Fast+0x6a>
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015cd2:	68bb      	ldr	r3, [r7, #8]
 8015cd4:	f383 8810 	msr	PRIMASK, r3
}
 8015cd8:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8015cda:	bf00      	nop
 8015cdc:	3720      	adds	r7, #32
 8015cde:	46bd      	mov	sp, r7
 8015ce0:	bd80      	pop	{r7, pc}
 8015ce2:	bf00      	nop
 8015ce4:	08011000 	.word	0x08011000
 8015ce8:	1fff75e0 	.word	0x1fff75e0
 8015cec:	03fffc00 	.word	0x03fffc00
 8015cf0:	08031000 	.word	0x08031000
 8015cf4:	0801dcbc 	.word	0x0801dcbc
 8015cf8:	40022000 	.word	0x40022000

08015cfc <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8015cfc:	b580      	push	{r7, lr}
 8015cfe:	b084      	sub	sp, #16
 8015d00:	af00      	add	r7, sp, #0
 8015d02:	6078      	str	r0, [r7, #4]
 8015d04:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 8015d06:	687b      	ldr	r3, [r7, #4]
 8015d08:	681b      	ldr	r3, [r3, #0]
 8015d0a:	2b00      	cmp	r3, #0
 8015d0c:	d007      	beq.n	8015d1e <HAL_FLASHEx_Erase+0x22>
 8015d0e:	687b      	ldr	r3, [r7, #4]
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	2b01      	cmp	r3, #1
 8015d14:	d003      	beq.n	8015d1e <HAL_FLASHEx_Erase+0x22>
 8015d16:	2190      	movs	r1, #144	@ 0x90
 8015d18:	4848      	ldr	r0, [pc, #288]	@ (8015e3c <HAL_FLASHEx_Erase+0x140>)
 8015d1a:	f7fc fbcb 	bl	80124b4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8015d1e:	4b48      	ldr	r3, [pc, #288]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015d20:	781b      	ldrb	r3, [r3, #0]
 8015d22:	2b01      	cmp	r3, #1
 8015d24:	d101      	bne.n	8015d2a <HAL_FLASHEx_Erase+0x2e>
 8015d26:	2302      	movs	r3, #2
 8015d28:	e083      	b.n	8015e32 <HAL_FLASHEx_Erase+0x136>
 8015d2a:	4b45      	ldr	r3, [pc, #276]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015d2c:	2201      	movs	r2, #1
 8015d2e:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8015d30:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015d34:	f7ff fedc 	bl	8015af0 <FLASH_WaitForLastOperation>
 8015d38:	4603      	mov	r3, r0
 8015d3a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8015d3c:	7bfb      	ldrb	r3, [r7, #15]
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	d173      	bne.n	8015e2a <HAL_FLASHEx_Erase+0x12e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8015d42:	4b3f      	ldr	r3, [pc, #252]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015d44:	2200      	movs	r2, #0
 8015d46:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8015d48:	4b3e      	ldr	r3, [pc, #248]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015d4a:	681b      	ldr	r3, [r3, #0]
 8015d4c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8015d50:	2b00      	cmp	r3, #0
 8015d52:	d013      	beq.n	8015d7c <HAL_FLASHEx_Erase+0x80>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8015d54:	4b3b      	ldr	r3, [pc, #236]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015d56:	681b      	ldr	r3, [r3, #0]
 8015d58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015d5c:	2b00      	cmp	r3, #0
 8015d5e:	d009      	beq.n	8015d74 <HAL_FLASHEx_Erase+0x78>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8015d60:	4b38      	ldr	r3, [pc, #224]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015d62:	681b      	ldr	r3, [r3, #0]
 8015d64:	4a37      	ldr	r2, [pc, #220]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015d66:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8015d6a:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8015d6c:	4b34      	ldr	r3, [pc, #208]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015d6e:	2203      	movs	r2, #3
 8015d70:	771a      	strb	r2, [r3, #28]
 8015d72:	e016      	b.n	8015da2 <HAL_FLASHEx_Erase+0xa6>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 8015d74:	4b32      	ldr	r3, [pc, #200]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015d76:	2201      	movs	r2, #1
 8015d78:	771a      	strb	r2, [r3, #28]
 8015d7a:	e012      	b.n	8015da2 <HAL_FLASHEx_Erase+0xa6>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8015d7c:	4b31      	ldr	r3, [pc, #196]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015d7e:	681b      	ldr	r3, [r3, #0]
 8015d80:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8015d84:	2b00      	cmp	r3, #0
 8015d86:	d009      	beq.n	8015d9c <HAL_FLASHEx_Erase+0xa0>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8015d88:	4b2e      	ldr	r3, [pc, #184]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015d8a:	681b      	ldr	r3, [r3, #0]
 8015d8c:	4a2d      	ldr	r2, [pc, #180]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015d8e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8015d92:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8015d94:	4b2a      	ldr	r3, [pc, #168]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015d96:	2202      	movs	r2, #2
 8015d98:	771a      	strb	r2, [r3, #28]
 8015d9a:	e002      	b.n	8015da2 <HAL_FLASHEx_Erase+0xa6>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8015d9c:	4b28      	ldr	r3, [pc, #160]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015d9e:	2200      	movs	r2, #0
 8015da0:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8015da2:	687b      	ldr	r3, [r7, #4]
 8015da4:	681b      	ldr	r3, [r3, #0]
 8015da6:	2b01      	cmp	r3, #1
 8015da8:	d111      	bne.n	8015dce <HAL_FLASHEx_Erase+0xd2>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8015daa:	687b      	ldr	r3, [r7, #4]
 8015dac:	685b      	ldr	r3, [r3, #4]
 8015dae:	4618      	mov	r0, r3
 8015db0:	f000 f84a 	bl	8015e48 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8015db4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015db8:	f7ff fe9a 	bl	8015af0 <FLASH_WaitForLastOperation>
 8015dbc:	4603      	mov	r3, r0
 8015dbe:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8015dc0:	4b20      	ldr	r3, [pc, #128]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015dc2:	695b      	ldr	r3, [r3, #20]
 8015dc4:	4a1f      	ldr	r2, [pc, #124]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015dc6:	f023 0304 	bic.w	r3, r3, #4
 8015dca:	6153      	str	r3, [r2, #20]
 8015dcc:	e02b      	b.n	8015e26 <HAL_FLASHEx_Erase+0x12a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8015dce:	683b      	ldr	r3, [r7, #0]
 8015dd0:	f04f 32ff 	mov.w	r2, #4294967295
 8015dd4:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8015dd6:	687b      	ldr	r3, [r7, #4]
 8015dd8:	689b      	ldr	r3, [r3, #8]
 8015dda:	60bb      	str	r3, [r7, #8]
 8015ddc:	e01b      	b.n	8015e16 <HAL_FLASHEx_Erase+0x11a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8015dde:	687b      	ldr	r3, [r7, #4]
 8015de0:	685b      	ldr	r3, [r3, #4]
 8015de2:	4619      	mov	r1, r3
 8015de4:	68b8      	ldr	r0, [r7, #8]
 8015de6:	f000 f855 	bl	8015e94 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8015dea:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8015dee:	f7ff fe7f 	bl	8015af0 <FLASH_WaitForLastOperation>
 8015df2:	4603      	mov	r3, r0
 8015df4:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 8015df6:	4b13      	ldr	r3, [pc, #76]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015df8:	695b      	ldr	r3, [r3, #20]
 8015dfa:	4a12      	ldr	r2, [pc, #72]	@ (8015e44 <HAL_FLASHEx_Erase+0x148>)
 8015dfc:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8015e00:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8015e02:	7bfb      	ldrb	r3, [r7, #15]
 8015e04:	2b00      	cmp	r3, #0
 8015e06:	d003      	beq.n	8015e10 <HAL_FLASHEx_Erase+0x114>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 8015e08:	683b      	ldr	r3, [r7, #0]
 8015e0a:	68ba      	ldr	r2, [r7, #8]
 8015e0c:	601a      	str	r2, [r3, #0]
          break;
 8015e0e:	e00a      	b.n	8015e26 <HAL_FLASHEx_Erase+0x12a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8015e10:	68bb      	ldr	r3, [r7, #8]
 8015e12:	3301      	adds	r3, #1
 8015e14:	60bb      	str	r3, [r7, #8]
 8015e16:	687b      	ldr	r3, [r7, #4]
 8015e18:	689a      	ldr	r2, [r3, #8]
 8015e1a:	687b      	ldr	r3, [r7, #4]
 8015e1c:	68db      	ldr	r3, [r3, #12]
 8015e1e:	4413      	add	r3, r2
 8015e20:	68ba      	ldr	r2, [r7, #8]
 8015e22:	429a      	cmp	r2, r3
 8015e24:	d3db      	bcc.n	8015dde <HAL_FLASHEx_Erase+0xe2>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8015e26:	f000 f887 	bl	8015f38 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8015e2a:	4b05      	ldr	r3, [pc, #20]	@ (8015e40 <HAL_FLASHEx_Erase+0x144>)
 8015e2c:	2200      	movs	r2, #0
 8015e2e:	701a      	strb	r2, [r3, #0]

  return status;
 8015e30:	7bfb      	ldrb	r3, [r7, #15]
}
 8015e32:	4618      	mov	r0, r3
 8015e34:	3710      	adds	r7, #16
 8015e36:	46bd      	mov	sp, r7
 8015e38:	bd80      	pop	{r7, pc}
 8015e3a:	bf00      	nop
 8015e3c:	0801dcf8 	.word	0x0801dcf8
 8015e40:	2000000c 	.word	0x2000000c
 8015e44:	40022000 	.word	0x40022000

08015e48 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8015e48:	b580      	push	{r7, lr}
 8015e4a:	b082      	sub	sp, #8
 8015e4c:	af00      	add	r7, sp, #0
 8015e4e:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
#endif
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));
 8015e50:	687b      	ldr	r3, [r7, #4]
 8015e52:	2b01      	cmp	r3, #1
 8015e54:	d004      	beq.n	8015e60 <FLASH_MassErase+0x18>
 8015e56:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8015e5a:	480c      	ldr	r0, [pc, #48]	@ (8015e8c <FLASH_MassErase+0x44>)
 8015e5c:	f7fc fb2a 	bl	80124b4 <assert_failed>

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8015e60:	687b      	ldr	r3, [r7, #4]
 8015e62:	f003 0301 	and.w	r3, r3, #1
 8015e66:	2b00      	cmp	r3, #0
 8015e68:	d005      	beq.n	8015e76 <FLASH_MassErase+0x2e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8015e6a:	4b09      	ldr	r3, [pc, #36]	@ (8015e90 <FLASH_MassErase+0x48>)
 8015e6c:	695b      	ldr	r3, [r3, #20]
 8015e6e:	4a08      	ldr	r2, [pc, #32]	@ (8015e90 <FLASH_MassErase+0x48>)
 8015e70:	f043 0304 	orr.w	r3, r3, #4
 8015e74:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8015e76:	4b06      	ldr	r3, [pc, #24]	@ (8015e90 <FLASH_MassErase+0x48>)
 8015e78:	695b      	ldr	r3, [r3, #20]
 8015e7a:	4a05      	ldr	r2, [pc, #20]	@ (8015e90 <FLASH_MassErase+0x48>)
 8015e7c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015e80:	6153      	str	r3, [r2, #20]
}
 8015e82:	bf00      	nop
 8015e84:	3708      	adds	r7, #8
 8015e86:	46bd      	mov	sp, r7
 8015e88:	bd80      	pop	{r7, pc}
 8015e8a:	bf00      	nop
 8015e8c:	0801dcf8 	.word	0x0801dcf8
 8015e90:	40022000 	.word	0x40022000

08015e94 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 8015e94:	b580      	push	{r7, lr}
 8015e96:	b082      	sub	sp, #8
 8015e98:	af00      	add	r7, sp, #0
 8015e9a:	6078      	str	r0, [r7, #4]
 8015e9c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
 8015e9e:	4b22      	ldr	r3, [pc, #136]	@ (8015f28 <FLASH_PageErase+0x94>)
 8015ea0:	881b      	ldrh	r3, [r3, #0]
 8015ea2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ea6:	4293      	cmp	r3, r2
 8015ea8:	d007      	beq.n	8015eba <FLASH_PageErase+0x26>
 8015eaa:	4b1f      	ldr	r3, [pc, #124]	@ (8015f28 <FLASH_PageErase+0x94>)
 8015eac:	681b      	ldr	r3, [r3, #0]
 8015eae:	029a      	lsls	r2, r3, #10
 8015eb0:	4b1e      	ldr	r3, [pc, #120]	@ (8015f2c <FLASH_PageErase+0x98>)
 8015eb2:	4013      	ands	r3, r2
 8015eb4:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8015eb8:	d011      	beq.n	8015ede <FLASH_PageErase+0x4a>
 8015eba:	4b1b      	ldr	r3, [pc, #108]	@ (8015f28 <FLASH_PageErase+0x94>)
 8015ebc:	881b      	ldrh	r3, [r3, #0]
 8015ebe:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8015ec2:	4293      	cmp	r3, r2
 8015ec4:	d009      	beq.n	8015eda <FLASH_PageErase+0x46>
 8015ec6:	4b18      	ldr	r3, [pc, #96]	@ (8015f28 <FLASH_PageErase+0x94>)
 8015ec8:	681b      	ldr	r3, [r3, #0]
 8015eca:	029a      	lsls	r2, r3, #10
 8015ecc:	4b17      	ldr	r3, [pc, #92]	@ (8015f2c <FLASH_PageErase+0x98>)
 8015ece:	4013      	ands	r3, r2
 8015ed0:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015ed4:	d101      	bne.n	8015eda <FLASH_PageErase+0x46>
 8015ed6:	2380      	movs	r3, #128	@ 0x80
 8015ed8:	e003      	b.n	8015ee2 <FLASH_PageErase+0x4e>
 8015eda:	2340      	movs	r3, #64	@ 0x40
 8015edc:	e001      	b.n	8015ee2 <FLASH_PageErase+0x4e>
 8015ede:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8015ee2:	687a      	ldr	r2, [r7, #4]
 8015ee4:	4293      	cmp	r3, r2
 8015ee6:	d804      	bhi.n	8015ef2 <FLASH_PageErase+0x5e>
 8015ee8:	f240 2149 	movw	r1, #585	@ 0x249
 8015eec:	4810      	ldr	r0, [pc, #64]	@ (8015f30 <FLASH_PageErase+0x9c>)
 8015eee:	f7fc fae1 	bl	80124b4 <assert_failed>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8015ef2:	4b10      	ldr	r3, [pc, #64]	@ (8015f34 <FLASH_PageErase+0xa0>)
 8015ef4:	695b      	ldr	r3, [r3, #20]
 8015ef6:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 8015efa:	687b      	ldr	r3, [r7, #4]
 8015efc:	00db      	lsls	r3, r3, #3
 8015efe:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8015f02:	490c      	ldr	r1, [pc, #48]	@ (8015f34 <FLASH_PageErase+0xa0>)
 8015f04:	4313      	orrs	r3, r2
 8015f06:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 8015f08:	4b0a      	ldr	r3, [pc, #40]	@ (8015f34 <FLASH_PageErase+0xa0>)
 8015f0a:	695b      	ldr	r3, [r3, #20]
 8015f0c:	4a09      	ldr	r2, [pc, #36]	@ (8015f34 <FLASH_PageErase+0xa0>)
 8015f0e:	f043 0302 	orr.w	r3, r3, #2
 8015f12:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8015f14:	4b07      	ldr	r3, [pc, #28]	@ (8015f34 <FLASH_PageErase+0xa0>)
 8015f16:	695b      	ldr	r3, [r3, #20]
 8015f18:	4a06      	ldr	r2, [pc, #24]	@ (8015f34 <FLASH_PageErase+0xa0>)
 8015f1a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015f1e:	6153      	str	r3, [r2, #20]
}
 8015f20:	bf00      	nop
 8015f22:	3708      	adds	r7, #8
 8015f24:	46bd      	mov	sp, r7
 8015f26:	bd80      	pop	{r7, pc}
 8015f28:	1fff75e0 	.word	0x1fff75e0
 8015f2c:	03fffc00 	.word	0x03fffc00
 8015f30:	0801dcf8 	.word	0x0801dcf8
 8015f34:	40022000 	.word	0x40022000

08015f38 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8015f38:	b480      	push	{r7}
 8015f3a:	b083      	sub	sp, #12
 8015f3c:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8015f3e:	4b21      	ldr	r3, [pc, #132]	@ (8015fc4 <FLASH_FlushCaches+0x8c>)
 8015f40:	7f1b      	ldrb	r3, [r3, #28]
 8015f42:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8015f44:	79fb      	ldrb	r3, [r7, #7]
 8015f46:	2b01      	cmp	r3, #1
 8015f48:	d002      	beq.n	8015f50 <FLASH_FlushCaches+0x18>
 8015f4a:	79fb      	ldrb	r3, [r7, #7]
 8015f4c:	2b03      	cmp	r3, #3
 8015f4e:	d117      	bne.n	8015f80 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8015f50:	4b1d      	ldr	r3, [pc, #116]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f52:	681b      	ldr	r3, [r3, #0]
 8015f54:	4a1c      	ldr	r2, [pc, #112]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f56:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8015f5a:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8015f5c:	4b1a      	ldr	r3, [pc, #104]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f5e:	681b      	ldr	r3, [r3, #0]
 8015f60:	4a19      	ldr	r2, [pc, #100]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f62:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8015f66:	6013      	str	r3, [r2, #0]
 8015f68:	4b17      	ldr	r3, [pc, #92]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f6a:	681b      	ldr	r3, [r3, #0]
 8015f6c:	4a16      	ldr	r2, [pc, #88]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f6e:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8015f72:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8015f74:	4b14      	ldr	r3, [pc, #80]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f76:	681b      	ldr	r3, [r3, #0]
 8015f78:	4a13      	ldr	r2, [pc, #76]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f7a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8015f7e:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8015f80:	79fb      	ldrb	r3, [r7, #7]
 8015f82:	2b02      	cmp	r3, #2
 8015f84:	d002      	beq.n	8015f8c <FLASH_FlushCaches+0x54>
 8015f86:	79fb      	ldrb	r3, [r7, #7]
 8015f88:	2b03      	cmp	r3, #3
 8015f8a:	d111      	bne.n	8015fb0 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8015f8c:	4b0e      	ldr	r3, [pc, #56]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f8e:	681b      	ldr	r3, [r3, #0]
 8015f90:	4a0d      	ldr	r2, [pc, #52]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f92:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8015f96:	6013      	str	r3, [r2, #0]
 8015f98:	4b0b      	ldr	r3, [pc, #44]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f9a:	681b      	ldr	r3, [r3, #0]
 8015f9c:	4a0a      	ldr	r2, [pc, #40]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015f9e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8015fa2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8015fa4:	4b08      	ldr	r3, [pc, #32]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015fa6:	681b      	ldr	r3, [r3, #0]
 8015fa8:	4a07      	ldr	r2, [pc, #28]	@ (8015fc8 <FLASH_FlushCaches+0x90>)
 8015faa:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8015fae:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8015fb0:	4b04      	ldr	r3, [pc, #16]	@ (8015fc4 <FLASH_FlushCaches+0x8c>)
 8015fb2:	2200      	movs	r2, #0
 8015fb4:	771a      	strb	r2, [r3, #28]
}
 8015fb6:	bf00      	nop
 8015fb8:	370c      	adds	r7, #12
 8015fba:	46bd      	mov	sp, r7
 8015fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015fc0:	4770      	bx	lr
 8015fc2:	bf00      	nop
 8015fc4:	2000000c 	.word	0x2000000c
 8015fc8:	40022000 	.word	0x40022000

08015fcc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8015fcc:	b580      	push	{r7, lr}
 8015fce:	b086      	sub	sp, #24
 8015fd0:	af00      	add	r7, sp, #0
 8015fd2:	6078      	str	r0, [r7, #4]
 8015fd4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8015fd6:	2300      	movs	r3, #0
 8015fd8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 8015fda:	687b      	ldr	r3, [r7, #4]
 8015fdc:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8015fe0:	d01b      	beq.n	801601a <HAL_GPIO_Init+0x4e>
 8015fe2:	687b      	ldr	r3, [r7, #4]
 8015fe4:	4a37      	ldr	r2, [pc, #220]	@ (80160c4 <HAL_GPIO_Init+0xf8>)
 8015fe6:	4293      	cmp	r3, r2
 8015fe8:	d017      	beq.n	801601a <HAL_GPIO_Init+0x4e>
 8015fea:	687b      	ldr	r3, [r7, #4]
 8015fec:	4a36      	ldr	r2, [pc, #216]	@ (80160c8 <HAL_GPIO_Init+0xfc>)
 8015fee:	4293      	cmp	r3, r2
 8015ff0:	d013      	beq.n	801601a <HAL_GPIO_Init+0x4e>
 8015ff2:	687b      	ldr	r3, [r7, #4]
 8015ff4:	4a35      	ldr	r2, [pc, #212]	@ (80160cc <HAL_GPIO_Init+0x100>)
 8015ff6:	4293      	cmp	r3, r2
 8015ff8:	d00f      	beq.n	801601a <HAL_GPIO_Init+0x4e>
 8015ffa:	687b      	ldr	r3, [r7, #4]
 8015ffc:	4a34      	ldr	r2, [pc, #208]	@ (80160d0 <HAL_GPIO_Init+0x104>)
 8015ffe:	4293      	cmp	r3, r2
 8016000:	d00b      	beq.n	801601a <HAL_GPIO_Init+0x4e>
 8016002:	687b      	ldr	r3, [r7, #4]
 8016004:	4a33      	ldr	r2, [pc, #204]	@ (80160d4 <HAL_GPIO_Init+0x108>)
 8016006:	4293      	cmp	r3, r2
 8016008:	d007      	beq.n	801601a <HAL_GPIO_Init+0x4e>
 801600a:	687b      	ldr	r3, [r7, #4]
 801600c:	4a32      	ldr	r2, [pc, #200]	@ (80160d8 <HAL_GPIO_Init+0x10c>)
 801600e:	4293      	cmp	r3, r2
 8016010:	d003      	beq.n	801601a <HAL_GPIO_Init+0x4e>
 8016012:	21a9      	movs	r1, #169	@ 0xa9
 8016014:	4831      	ldr	r0, [pc, #196]	@ (80160dc <HAL_GPIO_Init+0x110>)
 8016016:	f7fc fa4d 	bl	80124b4 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 801601a:	683b      	ldr	r3, [r7, #0]
 801601c:	681b      	ldr	r3, [r3, #0]
 801601e:	b29b      	uxth	r3, r3
 8016020:	2b00      	cmp	r3, #0
 8016022:	d004      	beq.n	801602e <HAL_GPIO_Init+0x62>
 8016024:	683b      	ldr	r3, [r7, #0]
 8016026:	681b      	ldr	r3, [r3, #0]
 8016028:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801602c:	d303      	bcc.n	8016036 <HAL_GPIO_Init+0x6a>
 801602e:	21aa      	movs	r1, #170	@ 0xaa
 8016030:	482a      	ldr	r0, [pc, #168]	@ (80160dc <HAL_GPIO_Init+0x110>)
 8016032:	f7fc fa3f 	bl	80124b4 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 8016036:	683b      	ldr	r3, [r7, #0]
 8016038:	685b      	ldr	r3, [r3, #4]
 801603a:	2b00      	cmp	r3, #0
 801603c:	f000 8209 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 8016040:	683b      	ldr	r3, [r7, #0]
 8016042:	685b      	ldr	r3, [r3, #4]
 8016044:	2b01      	cmp	r3, #1
 8016046:	f000 8204 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	685b      	ldr	r3, [r3, #4]
 801604e:	2b11      	cmp	r3, #17
 8016050:	f000 81ff 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 8016054:	683b      	ldr	r3, [r7, #0]
 8016056:	685b      	ldr	r3, [r3, #4]
 8016058:	2b02      	cmp	r3, #2
 801605a:	f000 81fa 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 801605e:	683b      	ldr	r3, [r7, #0]
 8016060:	685b      	ldr	r3, [r3, #4]
 8016062:	2b12      	cmp	r3, #18
 8016064:	f000 81f5 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	685b      	ldr	r3, [r3, #4]
 801606c:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8016070:	f000 81ef 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 8016074:	683b      	ldr	r3, [r7, #0]
 8016076:	685b      	ldr	r3, [r3, #4]
 8016078:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 801607c:	f000 81e9 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 8016080:	683b      	ldr	r3, [r7, #0]
 8016082:	685b      	ldr	r3, [r3, #4]
 8016084:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8016088:	f000 81e3 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 801608c:	683b      	ldr	r3, [r7, #0]
 801608e:	685b      	ldr	r3, [r3, #4]
 8016090:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8016094:	f000 81dd 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 8016098:	683b      	ldr	r3, [r7, #0]
 801609a:	685b      	ldr	r3, [r3, #4]
 801609c:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80160a0:	f000 81d7 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 80160a4:	683b      	ldr	r3, [r7, #0]
 80160a6:	685b      	ldr	r3, [r3, #4]
 80160a8:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 80160ac:	f000 81d1 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 80160b0:	683b      	ldr	r3, [r7, #0]
 80160b2:	685b      	ldr	r3, [r3, #4]
 80160b4:	2b03      	cmp	r3, #3
 80160b6:	f000 81cc 	beq.w	8016452 <HAL_GPIO_Init+0x486>
 80160ba:	21ab      	movs	r1, #171	@ 0xab
 80160bc:	4807      	ldr	r0, [pc, #28]	@ (80160dc <HAL_GPIO_Init+0x110>)
 80160be:	f7fc f9f9 	bl	80124b4 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80160c2:	e1c6      	b.n	8016452 <HAL_GPIO_Init+0x486>
 80160c4:	48000400 	.word	0x48000400
 80160c8:	48000800 	.word	0x48000800
 80160cc:	48000c00 	.word	0x48000c00
 80160d0:	48001000 	.word	0x48001000
 80160d4:	48001400 	.word	0x48001400
 80160d8:	48001800 	.word	0x48001800
 80160dc:	0801dd38 	.word	0x0801dd38
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80160e0:	683b      	ldr	r3, [r7, #0]
 80160e2:	681a      	ldr	r2, [r3, #0]
 80160e4:	2101      	movs	r1, #1
 80160e6:	697b      	ldr	r3, [r7, #20]
 80160e8:	fa01 f303 	lsl.w	r3, r1, r3
 80160ec:	4013      	ands	r3, r2
 80160ee:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80160f0:	68fb      	ldr	r3, [r7, #12]
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	f000 81aa 	beq.w	801644c <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80160f8:	683b      	ldr	r3, [r7, #0]
 80160fa:	685b      	ldr	r3, [r3, #4]
 80160fc:	f003 0303 	and.w	r3, r3, #3
 8016100:	2b01      	cmp	r3, #1
 8016102:	d005      	beq.n	8016110 <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8016104:	683b      	ldr	r3, [r7, #0]
 8016106:	685b      	ldr	r3, [r3, #4]
 8016108:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 801610c:	2b02      	cmp	r3, #2
 801610e:	d144      	bne.n	801619a <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8016110:	683b      	ldr	r3, [r7, #0]
 8016112:	68db      	ldr	r3, [r3, #12]
 8016114:	2b00      	cmp	r3, #0
 8016116:	d00f      	beq.n	8016138 <HAL_GPIO_Init+0x16c>
 8016118:	683b      	ldr	r3, [r7, #0]
 801611a:	68db      	ldr	r3, [r3, #12]
 801611c:	2b01      	cmp	r3, #1
 801611e:	d00b      	beq.n	8016138 <HAL_GPIO_Init+0x16c>
 8016120:	683b      	ldr	r3, [r7, #0]
 8016122:	68db      	ldr	r3, [r3, #12]
 8016124:	2b02      	cmp	r3, #2
 8016126:	d007      	beq.n	8016138 <HAL_GPIO_Init+0x16c>
 8016128:	683b      	ldr	r3, [r7, #0]
 801612a:	68db      	ldr	r3, [r3, #12]
 801612c:	2b03      	cmp	r3, #3
 801612e:	d003      	beq.n	8016138 <HAL_GPIO_Init+0x16c>
 8016130:	21bb      	movs	r1, #187	@ 0xbb
 8016132:	488b      	ldr	r0, [pc, #556]	@ (8016360 <HAL_GPIO_Init+0x394>)
 8016134:	f7fc f9be 	bl	80124b4 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	689b      	ldr	r3, [r3, #8]
 801613c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 801613e:	697b      	ldr	r3, [r7, #20]
 8016140:	005b      	lsls	r3, r3, #1
 8016142:	2203      	movs	r2, #3
 8016144:	fa02 f303 	lsl.w	r3, r2, r3
 8016148:	43db      	mvns	r3, r3
 801614a:	693a      	ldr	r2, [r7, #16]
 801614c:	4013      	ands	r3, r2
 801614e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8016150:	683b      	ldr	r3, [r7, #0]
 8016152:	68da      	ldr	r2, [r3, #12]
 8016154:	697b      	ldr	r3, [r7, #20]
 8016156:	005b      	lsls	r3, r3, #1
 8016158:	fa02 f303 	lsl.w	r3, r2, r3
 801615c:	693a      	ldr	r2, [r7, #16]
 801615e:	4313      	orrs	r3, r2
 8016160:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8016162:	687b      	ldr	r3, [r7, #4]
 8016164:	693a      	ldr	r2, [r7, #16]
 8016166:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8016168:	687b      	ldr	r3, [r7, #4]
 801616a:	685b      	ldr	r3, [r3, #4]
 801616c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 801616e:	2201      	movs	r2, #1
 8016170:	697b      	ldr	r3, [r7, #20]
 8016172:	fa02 f303 	lsl.w	r3, r2, r3
 8016176:	43db      	mvns	r3, r3
 8016178:	693a      	ldr	r2, [r7, #16]
 801617a:	4013      	ands	r3, r2
 801617c:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 801617e:	683b      	ldr	r3, [r7, #0]
 8016180:	685b      	ldr	r3, [r3, #4]
 8016182:	091b      	lsrs	r3, r3, #4
 8016184:	f003 0201 	and.w	r2, r3, #1
 8016188:	697b      	ldr	r3, [r7, #20]
 801618a:	fa02 f303 	lsl.w	r3, r2, r3
 801618e:	693a      	ldr	r2, [r7, #16]
 8016190:	4313      	orrs	r3, r2
 8016192:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8016194:	687b      	ldr	r3, [r7, #4]
 8016196:	693a      	ldr	r2, [r7, #16]
 8016198:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 801619a:	683b      	ldr	r3, [r7, #0]
 801619c:	685b      	ldr	r3, [r3, #4]
 801619e:	f003 0303 	and.w	r3, r3, #3
 80161a2:	2b03      	cmp	r3, #3
 80161a4:	d027      	beq.n	80161f6 <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80161a6:	683b      	ldr	r3, [r7, #0]
 80161a8:	689b      	ldr	r3, [r3, #8]
 80161aa:	2b00      	cmp	r3, #0
 80161ac:	d00b      	beq.n	80161c6 <HAL_GPIO_Init+0x1fa>
 80161ae:	683b      	ldr	r3, [r7, #0]
 80161b0:	689b      	ldr	r3, [r3, #8]
 80161b2:	2b01      	cmp	r3, #1
 80161b4:	d007      	beq.n	80161c6 <HAL_GPIO_Init+0x1fa>
 80161b6:	683b      	ldr	r3, [r7, #0]
 80161b8:	689b      	ldr	r3, [r3, #8]
 80161ba:	2b02      	cmp	r3, #2
 80161bc:	d003      	beq.n	80161c6 <HAL_GPIO_Init+0x1fa>
 80161be:	21cc      	movs	r1, #204	@ 0xcc
 80161c0:	4867      	ldr	r0, [pc, #412]	@ (8016360 <HAL_GPIO_Init+0x394>)
 80161c2:	f7fc f977 	bl	80124b4 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80161c6:	687b      	ldr	r3, [r7, #4]
 80161c8:	68db      	ldr	r3, [r3, #12]
 80161ca:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80161cc:	697b      	ldr	r3, [r7, #20]
 80161ce:	005b      	lsls	r3, r3, #1
 80161d0:	2203      	movs	r2, #3
 80161d2:	fa02 f303 	lsl.w	r3, r2, r3
 80161d6:	43db      	mvns	r3, r3
 80161d8:	693a      	ldr	r2, [r7, #16]
 80161da:	4013      	ands	r3, r2
 80161dc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80161de:	683b      	ldr	r3, [r7, #0]
 80161e0:	689a      	ldr	r2, [r3, #8]
 80161e2:	697b      	ldr	r3, [r7, #20]
 80161e4:	005b      	lsls	r3, r3, #1
 80161e6:	fa02 f303 	lsl.w	r3, r2, r3
 80161ea:	693a      	ldr	r2, [r7, #16]
 80161ec:	4313      	orrs	r3, r2
 80161ee:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80161f0:	687b      	ldr	r3, [r7, #4]
 80161f2:	693a      	ldr	r2, [r7, #16]
 80161f4:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80161f6:	683b      	ldr	r3, [r7, #0]
 80161f8:	685b      	ldr	r3, [r3, #4]
 80161fa:	f003 0303 	and.w	r3, r3, #3
 80161fe:	2b02      	cmp	r3, #2
 8016200:	d14b      	bne.n	801629a <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8016202:	687b      	ldr	r3, [r7, #4]
 8016204:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8016208:	d01b      	beq.n	8016242 <HAL_GPIO_Init+0x276>
 801620a:	687b      	ldr	r3, [r7, #4]
 801620c:	4a55      	ldr	r2, [pc, #340]	@ (8016364 <HAL_GPIO_Init+0x398>)
 801620e:	4293      	cmp	r3, r2
 8016210:	d017      	beq.n	8016242 <HAL_GPIO_Init+0x276>
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	4a54      	ldr	r2, [pc, #336]	@ (8016368 <HAL_GPIO_Init+0x39c>)
 8016216:	4293      	cmp	r3, r2
 8016218:	d013      	beq.n	8016242 <HAL_GPIO_Init+0x276>
 801621a:	687b      	ldr	r3, [r7, #4]
 801621c:	4a53      	ldr	r2, [pc, #332]	@ (801636c <HAL_GPIO_Init+0x3a0>)
 801621e:	4293      	cmp	r3, r2
 8016220:	d00f      	beq.n	8016242 <HAL_GPIO_Init+0x276>
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	4a52      	ldr	r2, [pc, #328]	@ (8016370 <HAL_GPIO_Init+0x3a4>)
 8016226:	4293      	cmp	r3, r2
 8016228:	d00b      	beq.n	8016242 <HAL_GPIO_Init+0x276>
 801622a:	687b      	ldr	r3, [r7, #4]
 801622c:	4a51      	ldr	r2, [pc, #324]	@ (8016374 <HAL_GPIO_Init+0x3a8>)
 801622e:	4293      	cmp	r3, r2
 8016230:	d007      	beq.n	8016242 <HAL_GPIO_Init+0x276>
 8016232:	687b      	ldr	r3, [r7, #4]
 8016234:	4a50      	ldr	r2, [pc, #320]	@ (8016378 <HAL_GPIO_Init+0x3ac>)
 8016236:	4293      	cmp	r3, r2
 8016238:	d003      	beq.n	8016242 <HAL_GPIO_Init+0x276>
 801623a:	21d9      	movs	r1, #217	@ 0xd9
 801623c:	4848      	ldr	r0, [pc, #288]	@ (8016360 <HAL_GPIO_Init+0x394>)
 801623e:	f7fc f939 	bl	80124b4 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8016242:	683b      	ldr	r3, [r7, #0]
 8016244:	691b      	ldr	r3, [r3, #16]
 8016246:	2b0f      	cmp	r3, #15
 8016248:	d903      	bls.n	8016252 <HAL_GPIO_Init+0x286>
 801624a:	21da      	movs	r1, #218	@ 0xda
 801624c:	4844      	ldr	r0, [pc, #272]	@ (8016360 <HAL_GPIO_Init+0x394>)
 801624e:	f7fc f931 	bl	80124b4 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8016252:	697b      	ldr	r3, [r7, #20]
 8016254:	08da      	lsrs	r2, r3, #3
 8016256:	687b      	ldr	r3, [r7, #4]
 8016258:	3208      	adds	r2, #8
 801625a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 801625e:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8016260:	697b      	ldr	r3, [r7, #20]
 8016262:	f003 0307 	and.w	r3, r3, #7
 8016266:	009b      	lsls	r3, r3, #2
 8016268:	220f      	movs	r2, #15
 801626a:	fa02 f303 	lsl.w	r3, r2, r3
 801626e:	43db      	mvns	r3, r3
 8016270:	693a      	ldr	r2, [r7, #16]
 8016272:	4013      	ands	r3, r2
 8016274:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8016276:	683b      	ldr	r3, [r7, #0]
 8016278:	691a      	ldr	r2, [r3, #16]
 801627a:	697b      	ldr	r3, [r7, #20]
 801627c:	f003 0307 	and.w	r3, r3, #7
 8016280:	009b      	lsls	r3, r3, #2
 8016282:	fa02 f303 	lsl.w	r3, r2, r3
 8016286:	693a      	ldr	r2, [r7, #16]
 8016288:	4313      	orrs	r3, r2
 801628a:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 801628c:	697b      	ldr	r3, [r7, #20]
 801628e:	08da      	lsrs	r2, r3, #3
 8016290:	687b      	ldr	r3, [r7, #4]
 8016292:	3208      	adds	r2, #8
 8016294:	6939      	ldr	r1, [r7, #16]
 8016296:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 801629a:	687b      	ldr	r3, [r7, #4]
 801629c:	681b      	ldr	r3, [r3, #0]
 801629e:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80162a0:	697b      	ldr	r3, [r7, #20]
 80162a2:	005b      	lsls	r3, r3, #1
 80162a4:	2203      	movs	r2, #3
 80162a6:	fa02 f303 	lsl.w	r3, r2, r3
 80162aa:	43db      	mvns	r3, r3
 80162ac:	693a      	ldr	r2, [r7, #16]
 80162ae:	4013      	ands	r3, r2
 80162b0:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80162b2:	683b      	ldr	r3, [r7, #0]
 80162b4:	685b      	ldr	r3, [r3, #4]
 80162b6:	f003 0203 	and.w	r2, r3, #3
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	005b      	lsls	r3, r3, #1
 80162be:	fa02 f303 	lsl.w	r3, r2, r3
 80162c2:	693a      	ldr	r2, [r7, #16]
 80162c4:	4313      	orrs	r3, r2
 80162c6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	693a      	ldr	r2, [r7, #16]
 80162cc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	685b      	ldr	r3, [r3, #4]
 80162d2:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80162d6:	2b00      	cmp	r3, #0
 80162d8:	f000 80b8 	beq.w	801644c <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80162dc:	4b27      	ldr	r3, [pc, #156]	@ (801637c <HAL_GPIO_Init+0x3b0>)
 80162de:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80162e0:	4a26      	ldr	r2, [pc, #152]	@ (801637c <HAL_GPIO_Init+0x3b0>)
 80162e2:	f043 0301 	orr.w	r3, r3, #1
 80162e6:	6613      	str	r3, [r2, #96]	@ 0x60
 80162e8:	4b24      	ldr	r3, [pc, #144]	@ (801637c <HAL_GPIO_Init+0x3b0>)
 80162ea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80162ec:	f003 0301 	and.w	r3, r3, #1
 80162f0:	60bb      	str	r3, [r7, #8]
 80162f2:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 80162f4:	4a22      	ldr	r2, [pc, #136]	@ (8016380 <HAL_GPIO_Init+0x3b4>)
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	089b      	lsrs	r3, r3, #2
 80162fa:	3302      	adds	r3, #2
 80162fc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8016300:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8016302:	697b      	ldr	r3, [r7, #20]
 8016304:	f003 0303 	and.w	r3, r3, #3
 8016308:	009b      	lsls	r3, r3, #2
 801630a:	220f      	movs	r2, #15
 801630c:	fa02 f303 	lsl.w	r3, r2, r3
 8016310:	43db      	mvns	r3, r3
 8016312:	693a      	ldr	r2, [r7, #16]
 8016314:	4013      	ands	r3, r2
 8016316:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8016318:	687b      	ldr	r3, [r7, #4]
 801631a:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 801631e:	d031      	beq.n	8016384 <HAL_GPIO_Init+0x3b8>
 8016320:	687b      	ldr	r3, [r7, #4]
 8016322:	4a10      	ldr	r2, [pc, #64]	@ (8016364 <HAL_GPIO_Init+0x398>)
 8016324:	4293      	cmp	r3, r2
 8016326:	d019      	beq.n	801635c <HAL_GPIO_Init+0x390>
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	4a0f      	ldr	r2, [pc, #60]	@ (8016368 <HAL_GPIO_Init+0x39c>)
 801632c:	4293      	cmp	r3, r2
 801632e:	d013      	beq.n	8016358 <HAL_GPIO_Init+0x38c>
 8016330:	687b      	ldr	r3, [r7, #4]
 8016332:	4a0e      	ldr	r2, [pc, #56]	@ (801636c <HAL_GPIO_Init+0x3a0>)
 8016334:	4293      	cmp	r3, r2
 8016336:	d00d      	beq.n	8016354 <HAL_GPIO_Init+0x388>
 8016338:	687b      	ldr	r3, [r7, #4]
 801633a:	4a0d      	ldr	r2, [pc, #52]	@ (8016370 <HAL_GPIO_Init+0x3a4>)
 801633c:	4293      	cmp	r3, r2
 801633e:	d007      	beq.n	8016350 <HAL_GPIO_Init+0x384>
 8016340:	687b      	ldr	r3, [r7, #4]
 8016342:	4a0c      	ldr	r2, [pc, #48]	@ (8016374 <HAL_GPIO_Init+0x3a8>)
 8016344:	4293      	cmp	r3, r2
 8016346:	d101      	bne.n	801634c <HAL_GPIO_Init+0x380>
 8016348:	2305      	movs	r3, #5
 801634a:	e01c      	b.n	8016386 <HAL_GPIO_Init+0x3ba>
 801634c:	2306      	movs	r3, #6
 801634e:	e01a      	b.n	8016386 <HAL_GPIO_Init+0x3ba>
 8016350:	2304      	movs	r3, #4
 8016352:	e018      	b.n	8016386 <HAL_GPIO_Init+0x3ba>
 8016354:	2303      	movs	r3, #3
 8016356:	e016      	b.n	8016386 <HAL_GPIO_Init+0x3ba>
 8016358:	2302      	movs	r3, #2
 801635a:	e014      	b.n	8016386 <HAL_GPIO_Init+0x3ba>
 801635c:	2301      	movs	r3, #1
 801635e:	e012      	b.n	8016386 <HAL_GPIO_Init+0x3ba>
 8016360:	0801dd38 	.word	0x0801dd38
 8016364:	48000400 	.word	0x48000400
 8016368:	48000800 	.word	0x48000800
 801636c:	48000c00 	.word	0x48000c00
 8016370:	48001000 	.word	0x48001000
 8016374:	48001400 	.word	0x48001400
 8016378:	48001800 	.word	0x48001800
 801637c:	40021000 	.word	0x40021000
 8016380:	40010000 	.word	0x40010000
 8016384:	2300      	movs	r3, #0
 8016386:	697a      	ldr	r2, [r7, #20]
 8016388:	f002 0203 	and.w	r2, r2, #3
 801638c:	0092      	lsls	r2, r2, #2
 801638e:	4093      	lsls	r3, r2
 8016390:	693a      	ldr	r2, [r7, #16]
 8016392:	4313      	orrs	r3, r2
 8016394:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8016396:	4935      	ldr	r1, [pc, #212]	@ (801646c <HAL_GPIO_Init+0x4a0>)
 8016398:	697b      	ldr	r3, [r7, #20]
 801639a:	089b      	lsrs	r3, r3, #2
 801639c:	3302      	adds	r3, #2
 801639e:	693a      	ldr	r2, [r7, #16]
 80163a0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80163a4:	4b32      	ldr	r3, [pc, #200]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 80163a6:	689b      	ldr	r3, [r3, #8]
 80163a8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80163aa:	68fb      	ldr	r3, [r7, #12]
 80163ac:	43db      	mvns	r3, r3
 80163ae:	693a      	ldr	r2, [r7, #16]
 80163b0:	4013      	ands	r3, r2
 80163b2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80163b4:	683b      	ldr	r3, [r7, #0]
 80163b6:	685b      	ldr	r3, [r3, #4]
 80163b8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80163bc:	2b00      	cmp	r3, #0
 80163be:	d003      	beq.n	80163c8 <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 80163c0:	693a      	ldr	r2, [r7, #16]
 80163c2:	68fb      	ldr	r3, [r7, #12]
 80163c4:	4313      	orrs	r3, r2
 80163c6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80163c8:	4a29      	ldr	r2, [pc, #164]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 80163ca:	693b      	ldr	r3, [r7, #16]
 80163cc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80163ce:	4b28      	ldr	r3, [pc, #160]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 80163d0:	68db      	ldr	r3, [r3, #12]
 80163d2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80163d4:	68fb      	ldr	r3, [r7, #12]
 80163d6:	43db      	mvns	r3, r3
 80163d8:	693a      	ldr	r2, [r7, #16]
 80163da:	4013      	ands	r3, r2
 80163dc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80163de:	683b      	ldr	r3, [r7, #0]
 80163e0:	685b      	ldr	r3, [r3, #4]
 80163e2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80163e6:	2b00      	cmp	r3, #0
 80163e8:	d003      	beq.n	80163f2 <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 80163ea:	693a      	ldr	r2, [r7, #16]
 80163ec:	68fb      	ldr	r3, [r7, #12]
 80163ee:	4313      	orrs	r3, r2
 80163f0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 80163f2:	4a1f      	ldr	r2, [pc, #124]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 80163f4:	693b      	ldr	r3, [r7, #16]
 80163f6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 80163f8:	4b1d      	ldr	r3, [pc, #116]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 80163fa:	685b      	ldr	r3, [r3, #4]
 80163fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80163fe:	68fb      	ldr	r3, [r7, #12]
 8016400:	43db      	mvns	r3, r3
 8016402:	693a      	ldr	r2, [r7, #16]
 8016404:	4013      	ands	r3, r2
 8016406:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8016408:	683b      	ldr	r3, [r7, #0]
 801640a:	685b      	ldr	r3, [r3, #4]
 801640c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016410:	2b00      	cmp	r3, #0
 8016412:	d003      	beq.n	801641c <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8016414:	693a      	ldr	r2, [r7, #16]
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	4313      	orrs	r3, r2
 801641a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 801641c:	4a14      	ldr	r2, [pc, #80]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 801641e:	693b      	ldr	r3, [r7, #16]
 8016420:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8016422:	4b13      	ldr	r3, [pc, #76]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 8016424:	681b      	ldr	r3, [r3, #0]
 8016426:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8016428:	68fb      	ldr	r3, [r7, #12]
 801642a:	43db      	mvns	r3, r3
 801642c:	693a      	ldr	r2, [r7, #16]
 801642e:	4013      	ands	r3, r2
 8016430:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8016432:	683b      	ldr	r3, [r7, #0]
 8016434:	685b      	ldr	r3, [r3, #4]
 8016436:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 801643a:	2b00      	cmp	r3, #0
 801643c:	d003      	beq.n	8016446 <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 801643e:	693a      	ldr	r2, [r7, #16]
 8016440:	68fb      	ldr	r3, [r7, #12]
 8016442:	4313      	orrs	r3, r2
 8016444:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8016446:	4a0a      	ldr	r2, [pc, #40]	@ (8016470 <HAL_GPIO_Init+0x4a4>)
 8016448:	693b      	ldr	r3, [r7, #16]
 801644a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 801644c:	697b      	ldr	r3, [r7, #20]
 801644e:	3301      	adds	r3, #1
 8016450:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8016452:	683b      	ldr	r3, [r7, #0]
 8016454:	681a      	ldr	r2, [r3, #0]
 8016456:	697b      	ldr	r3, [r7, #20]
 8016458:	fa22 f303 	lsr.w	r3, r2, r3
 801645c:	2b00      	cmp	r3, #0
 801645e:	f47f ae3f 	bne.w	80160e0 <HAL_GPIO_Init+0x114>
  }
}
 8016462:	bf00      	nop
 8016464:	bf00      	nop
 8016466:	3718      	adds	r7, #24
 8016468:	46bd      	mov	sp, r7
 801646a:	bd80      	pop	{r7, pc}
 801646c:	40010000 	.word	0x40010000
 8016470:	40010400 	.word	0x40010400

08016474 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8016474:	b580      	push	{r7, lr}
 8016476:	b082      	sub	sp, #8
 8016478:	af00      	add	r7, sp, #0
 801647a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 801647c:	687b      	ldr	r3, [r7, #4]
 801647e:	2b00      	cmp	r3, #0
 8016480:	d101      	bne.n	8016486 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8016482:	2301      	movs	r3, #1
 8016484:	e110      	b.n	80166a8 <HAL_I2C_Init+0x234>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8016486:	687b      	ldr	r3, [r7, #4]
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	4a89      	ldr	r2, [pc, #548]	@ (80166b0 <HAL_I2C_Init+0x23c>)
 801648c:	4293      	cmp	r3, r2
 801648e:	d00e      	beq.n	80164ae <HAL_I2C_Init+0x3a>
 8016490:	687b      	ldr	r3, [r7, #4]
 8016492:	681b      	ldr	r3, [r3, #0]
 8016494:	4a87      	ldr	r2, [pc, #540]	@ (80166b4 <HAL_I2C_Init+0x240>)
 8016496:	4293      	cmp	r3, r2
 8016498:	d009      	beq.n	80164ae <HAL_I2C_Init+0x3a>
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	681b      	ldr	r3, [r3, #0]
 801649e:	4a86      	ldr	r2, [pc, #536]	@ (80166b8 <HAL_I2C_Init+0x244>)
 80164a0:	4293      	cmp	r3, r2
 80164a2:	d004      	beq.n	80164ae <HAL_I2C_Init+0x3a>
 80164a4:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80164a8:	4884      	ldr	r0, [pc, #528]	@ (80166bc <HAL_I2C_Init+0x248>)
 80164aa:	f7fc f803 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 80164ae:	687b      	ldr	r3, [r7, #4]
 80164b0:	689b      	ldr	r3, [r3, #8]
 80164b2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80164b6:	d304      	bcc.n	80164c2 <HAL_I2C_Init+0x4e>
 80164b8:	f240 2121 	movw	r1, #545	@ 0x221
 80164bc:	487f      	ldr	r0, [pc, #508]	@ (80166bc <HAL_I2C_Init+0x248>)
 80164be:	f7fb fff9 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	68db      	ldr	r3, [r3, #12]
 80164c6:	2b01      	cmp	r3, #1
 80164c8:	d008      	beq.n	80164dc <HAL_I2C_Init+0x68>
 80164ca:	687b      	ldr	r3, [r7, #4]
 80164cc:	68db      	ldr	r3, [r3, #12]
 80164ce:	2b02      	cmp	r3, #2
 80164d0:	d004      	beq.n	80164dc <HAL_I2C_Init+0x68>
 80164d2:	f240 2122 	movw	r1, #546	@ 0x222
 80164d6:	4879      	ldr	r0, [pc, #484]	@ (80166bc <HAL_I2C_Init+0x248>)
 80164d8:	f7fb ffec 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 80164dc:	687b      	ldr	r3, [r7, #4]
 80164de:	691b      	ldr	r3, [r3, #16]
 80164e0:	2b00      	cmp	r3, #0
 80164e2:	d009      	beq.n	80164f8 <HAL_I2C_Init+0x84>
 80164e4:	687b      	ldr	r3, [r7, #4]
 80164e6:	691b      	ldr	r3, [r3, #16]
 80164e8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80164ec:	d004      	beq.n	80164f8 <HAL_I2C_Init+0x84>
 80164ee:	f240 2123 	movw	r1, #547	@ 0x223
 80164f2:	4872      	ldr	r0, [pc, #456]	@ (80166bc <HAL_I2C_Init+0x248>)
 80164f4:	f7fb ffde 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	695b      	ldr	r3, [r3, #20]
 80164fc:	2bff      	cmp	r3, #255	@ 0xff
 80164fe:	d904      	bls.n	801650a <HAL_I2C_Init+0x96>
 8016500:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8016504:	486d      	ldr	r0, [pc, #436]	@ (80166bc <HAL_I2C_Init+0x248>)
 8016506:	f7fb ffd5 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 801650a:	687b      	ldr	r3, [r7, #4]
 801650c:	699b      	ldr	r3, [r3, #24]
 801650e:	2b00      	cmp	r3, #0
 8016510:	d020      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 8016512:	687b      	ldr	r3, [r7, #4]
 8016514:	699b      	ldr	r3, [r3, #24]
 8016516:	2b01      	cmp	r3, #1
 8016518:	d01c      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 801651a:	687b      	ldr	r3, [r7, #4]
 801651c:	699b      	ldr	r3, [r3, #24]
 801651e:	2b02      	cmp	r3, #2
 8016520:	d018      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 8016522:	687b      	ldr	r3, [r7, #4]
 8016524:	699b      	ldr	r3, [r3, #24]
 8016526:	2b03      	cmp	r3, #3
 8016528:	d014      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 801652a:	687b      	ldr	r3, [r7, #4]
 801652c:	699b      	ldr	r3, [r3, #24]
 801652e:	2b04      	cmp	r3, #4
 8016530:	d010      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	699b      	ldr	r3, [r3, #24]
 8016536:	2b05      	cmp	r3, #5
 8016538:	d00c      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 801653a:	687b      	ldr	r3, [r7, #4]
 801653c:	699b      	ldr	r3, [r3, #24]
 801653e:	2b06      	cmp	r3, #6
 8016540:	d008      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 8016542:	687b      	ldr	r3, [r7, #4]
 8016544:	699b      	ldr	r3, [r3, #24]
 8016546:	2b07      	cmp	r3, #7
 8016548:	d004      	beq.n	8016554 <HAL_I2C_Init+0xe0>
 801654a:	f240 2125 	movw	r1, #549	@ 0x225
 801654e:	485b      	ldr	r0, [pc, #364]	@ (80166bc <HAL_I2C_Init+0x248>)
 8016550:	f7fb ffb0 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8016554:	687b      	ldr	r3, [r7, #4]
 8016556:	69db      	ldr	r3, [r3, #28]
 8016558:	2b00      	cmp	r3, #0
 801655a:	d009      	beq.n	8016570 <HAL_I2C_Init+0xfc>
 801655c:	687b      	ldr	r3, [r7, #4]
 801655e:	69db      	ldr	r3, [r3, #28]
 8016560:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8016564:	d004      	beq.n	8016570 <HAL_I2C_Init+0xfc>
 8016566:	f240 2126 	movw	r1, #550	@ 0x226
 801656a:	4854      	ldr	r0, [pc, #336]	@ (80166bc <HAL_I2C_Init+0x248>)
 801656c:	f7fb ffa2 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	6a1b      	ldr	r3, [r3, #32]
 8016574:	2b00      	cmp	r3, #0
 8016576:	d009      	beq.n	801658c <HAL_I2C_Init+0x118>
 8016578:	687b      	ldr	r3, [r7, #4]
 801657a:	6a1b      	ldr	r3, [r3, #32]
 801657c:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016580:	d004      	beq.n	801658c <HAL_I2C_Init+0x118>
 8016582:	f240 2127 	movw	r1, #551	@ 0x227
 8016586:	484d      	ldr	r0, [pc, #308]	@ (80166bc <HAL_I2C_Init+0x248>)
 8016588:	f7fb ff94 	bl	80124b4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 801658c:	687b      	ldr	r3, [r7, #4]
 801658e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8016592:	b2db      	uxtb	r3, r3
 8016594:	2b00      	cmp	r3, #0
 8016596:	d106      	bne.n	80165a6 <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8016598:	687b      	ldr	r3, [r7, #4]
 801659a:	2200      	movs	r2, #0
 801659c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80165a0:	6878      	ldr	r0, [r7, #4]
 80165a2:	f7fb fead 	bl	8012300 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80165a6:	687b      	ldr	r3, [r7, #4]
 80165a8:	2224      	movs	r2, #36	@ 0x24
 80165aa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80165ae:	687b      	ldr	r3, [r7, #4]
 80165b0:	681b      	ldr	r3, [r3, #0]
 80165b2:	681a      	ldr	r2, [r3, #0]
 80165b4:	687b      	ldr	r3, [r7, #4]
 80165b6:	681b      	ldr	r3, [r3, #0]
 80165b8:	f022 0201 	bic.w	r2, r2, #1
 80165bc:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80165be:	687b      	ldr	r3, [r7, #4]
 80165c0:	685a      	ldr	r2, [r3, #4]
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	681b      	ldr	r3, [r3, #0]
 80165c6:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80165ca:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80165cc:	687b      	ldr	r3, [r7, #4]
 80165ce:	681b      	ldr	r3, [r3, #0]
 80165d0:	689a      	ldr	r2, [r3, #8]
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	681b      	ldr	r3, [r3, #0]
 80165d6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80165da:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	68db      	ldr	r3, [r3, #12]
 80165e0:	2b01      	cmp	r3, #1
 80165e2:	d107      	bne.n	80165f4 <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	689a      	ldr	r2, [r3, #8]
 80165e8:	687b      	ldr	r3, [r7, #4]
 80165ea:	681b      	ldr	r3, [r3, #0]
 80165ec:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80165f0:	609a      	str	r2, [r3, #8]
 80165f2:	e006      	b.n	8016602 <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	689a      	ldr	r2, [r3, #8]
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	681b      	ldr	r3, [r3, #0]
 80165fc:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8016600:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8016602:	687b      	ldr	r3, [r7, #4]
 8016604:	68db      	ldr	r3, [r3, #12]
 8016606:	2b02      	cmp	r3, #2
 8016608:	d108      	bne.n	801661c <HAL_I2C_Init+0x1a8>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801660a:	687b      	ldr	r3, [r7, #4]
 801660c:	681b      	ldr	r3, [r3, #0]
 801660e:	685a      	ldr	r2, [r3, #4]
 8016610:	687b      	ldr	r3, [r7, #4]
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8016618:	605a      	str	r2, [r3, #4]
 801661a:	e007      	b.n	801662c <HAL_I2C_Init+0x1b8>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 801661c:	687b      	ldr	r3, [r7, #4]
 801661e:	681b      	ldr	r3, [r3, #0]
 8016620:	685a      	ldr	r2, [r3, #4]
 8016622:	687b      	ldr	r3, [r7, #4]
 8016624:	681b      	ldr	r3, [r3, #0]
 8016626:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 801662a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 801662c:	687b      	ldr	r3, [r7, #4]
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	685b      	ldr	r3, [r3, #4]
 8016632:	687a      	ldr	r2, [r7, #4]
 8016634:	6812      	ldr	r2, [r2, #0]
 8016636:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 801663a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 801663e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8016640:	687b      	ldr	r3, [r7, #4]
 8016642:	681b      	ldr	r3, [r3, #0]
 8016644:	68da      	ldr	r2, [r3, #12]
 8016646:	687b      	ldr	r3, [r7, #4]
 8016648:	681b      	ldr	r3, [r3, #0]
 801664a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 801664e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016650:	687b      	ldr	r3, [r7, #4]
 8016652:	691a      	ldr	r2, [r3, #16]
 8016654:	687b      	ldr	r3, [r7, #4]
 8016656:	695b      	ldr	r3, [r3, #20]
 8016658:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	699b      	ldr	r3, [r3, #24]
 8016660:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8016662:	687b      	ldr	r3, [r7, #4]
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	430a      	orrs	r2, r1
 8016668:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 801666a:	687b      	ldr	r3, [r7, #4]
 801666c:	69d9      	ldr	r1, [r3, #28]
 801666e:	687b      	ldr	r3, [r7, #4]
 8016670:	6a1a      	ldr	r2, [r3, #32]
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	430a      	orrs	r2, r1
 8016678:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	681b      	ldr	r3, [r3, #0]
 801667e:	681a      	ldr	r2, [r3, #0]
 8016680:	687b      	ldr	r3, [r7, #4]
 8016682:	681b      	ldr	r3, [r3, #0]
 8016684:	f042 0201 	orr.w	r2, r2, #1
 8016688:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 801668a:	687b      	ldr	r3, [r7, #4]
 801668c:	2200      	movs	r2, #0
 801668e:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8016690:	687b      	ldr	r3, [r7, #4]
 8016692:	2220      	movs	r2, #32
 8016694:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8016698:	687b      	ldr	r3, [r7, #4]
 801669a:	2200      	movs	r2, #0
 801669c:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 801669e:	687b      	ldr	r3, [r7, #4]
 80166a0:	2200      	movs	r2, #0
 80166a2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 80166a6:	2300      	movs	r3, #0
}
 80166a8:	4618      	mov	r0, r3
 80166aa:	3708      	adds	r7, #8
 80166ac:	46bd      	mov	sp, r7
 80166ae:	bd80      	pop	{r7, pc}
 80166b0:	40005400 	.word	0x40005400
 80166b4:	40005800 	.word	0x40005800
 80166b8:	40007800 	.word	0x40007800
 80166bc:	0801dd74 	.word	0x0801dd74

080166c0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80166c0:	b580      	push	{r7, lr}
 80166c2:	b082      	sub	sp, #8
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
 80166c8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80166ca:	687b      	ldr	r3, [r7, #4]
 80166cc:	681b      	ldr	r3, [r3, #0]
 80166ce:	4a30      	ldr	r2, [pc, #192]	@ (8016790 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 80166d0:	4293      	cmp	r3, r2
 80166d2:	d00d      	beq.n	80166f0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	681b      	ldr	r3, [r3, #0]
 80166d8:	4a2e      	ldr	r2, [pc, #184]	@ (8016794 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 80166da:	4293      	cmp	r3, r2
 80166dc:	d008      	beq.n	80166f0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80166de:	687b      	ldr	r3, [r7, #4]
 80166e0:	681b      	ldr	r3, [r3, #0]
 80166e2:	4a2d      	ldr	r2, [pc, #180]	@ (8016798 <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 80166e4:	4293      	cmp	r3, r2
 80166e6:	d003      	beq.n	80166f0 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 80166e8:	2163      	movs	r1, #99	@ 0x63
 80166ea:	482c      	ldr	r0, [pc, #176]	@ (801679c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 80166ec:	f7fb fee2 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 80166f0:	683b      	ldr	r3, [r7, #0]
 80166f2:	2b00      	cmp	r3, #0
 80166f4:	d007      	beq.n	8016706 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80166f6:	683b      	ldr	r3, [r7, #0]
 80166f8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80166fc:	d003      	beq.n	8016706 <HAL_I2CEx_ConfigAnalogFilter+0x46>
 80166fe:	2164      	movs	r1, #100	@ 0x64
 8016700:	4826      	ldr	r0, [pc, #152]	@ (801679c <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8016702:	f7fb fed7 	bl	80124b4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 801670c:	b2db      	uxtb	r3, r3
 801670e:	2b20      	cmp	r3, #32
 8016710:	d138      	bne.n	8016784 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8016718:	2b01      	cmp	r3, #1
 801671a:	d101      	bne.n	8016720 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 801671c:	2302      	movs	r3, #2
 801671e:	e032      	b.n	8016786 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8016720:	687b      	ldr	r3, [r7, #4]
 8016722:	2201      	movs	r2, #1
 8016724:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	2224      	movs	r2, #36	@ 0x24
 801672c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016730:	687b      	ldr	r3, [r7, #4]
 8016732:	681b      	ldr	r3, [r3, #0]
 8016734:	681a      	ldr	r2, [r3, #0]
 8016736:	687b      	ldr	r3, [r7, #4]
 8016738:	681b      	ldr	r3, [r3, #0]
 801673a:	f022 0201 	bic.w	r2, r2, #1
 801673e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8016740:	687b      	ldr	r3, [r7, #4]
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	681a      	ldr	r2, [r3, #0]
 8016746:	687b      	ldr	r3, [r7, #4]
 8016748:	681b      	ldr	r3, [r3, #0]
 801674a:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 801674e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	6819      	ldr	r1, [r3, #0]
 8016756:	687b      	ldr	r3, [r7, #4]
 8016758:	681b      	ldr	r3, [r3, #0]
 801675a:	683a      	ldr	r2, [r7, #0]
 801675c:	430a      	orrs	r2, r1
 801675e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8016760:	687b      	ldr	r3, [r7, #4]
 8016762:	681b      	ldr	r3, [r3, #0]
 8016764:	681a      	ldr	r2, [r3, #0]
 8016766:	687b      	ldr	r3, [r7, #4]
 8016768:	681b      	ldr	r3, [r3, #0]
 801676a:	f042 0201 	orr.w	r2, r2, #1
 801676e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8016770:	687b      	ldr	r3, [r7, #4]
 8016772:	2220      	movs	r2, #32
 8016774:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	2200      	movs	r2, #0
 801677c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8016780:	2300      	movs	r3, #0
 8016782:	e000      	b.n	8016786 <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8016784:	2302      	movs	r3, #2
  }
}
 8016786:	4618      	mov	r0, r3
 8016788:	3708      	adds	r7, #8
 801678a:	46bd      	mov	sp, r7
 801678c:	bd80      	pop	{r7, pc}
 801678e:	bf00      	nop
 8016790:	40005400 	.word	0x40005400
 8016794:	40005800 	.word	0x40005800
 8016798:	40007800 	.word	0x40007800
 801679c:	0801ddac 	.word	0x0801ddac

080167a0 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80167a0:	b580      	push	{r7, lr}
 80167a2:	b084      	sub	sp, #16
 80167a4:	af00      	add	r7, sp, #0
 80167a6:	6078      	str	r0, [r7, #4]
 80167a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	681b      	ldr	r3, [r3, #0]
 80167ae:	4a2e      	ldr	r2, [pc, #184]	@ (8016868 <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 80167b0:	4293      	cmp	r3, r2
 80167b2:	d00d      	beq.n	80167d0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80167b4:	687b      	ldr	r3, [r7, #4]
 80167b6:	681b      	ldr	r3, [r3, #0]
 80167b8:	4a2c      	ldr	r2, [pc, #176]	@ (801686c <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 80167ba:	4293      	cmp	r3, r2
 80167bc:	d008      	beq.n	80167d0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	681b      	ldr	r3, [r3, #0]
 80167c2:	4a2b      	ldr	r2, [pc, #172]	@ (8016870 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 80167c4:	4293      	cmp	r3, r2
 80167c6:	d003      	beq.n	80167d0 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 80167c8:	2191      	movs	r1, #145	@ 0x91
 80167ca:	482a      	ldr	r0, [pc, #168]	@ (8016874 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80167cc:	f7fb fe72 	bl	80124b4 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 80167d0:	683b      	ldr	r3, [r7, #0]
 80167d2:	2b0f      	cmp	r3, #15
 80167d4:	d903      	bls.n	80167de <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 80167d6:	2192      	movs	r1, #146	@ 0x92
 80167d8:	4826      	ldr	r0, [pc, #152]	@ (8016874 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 80167da:	f7fb fe6b 	bl	80124b4 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 80167de:	687b      	ldr	r3, [r7, #4]
 80167e0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80167e4:	b2db      	uxtb	r3, r3
 80167e6:	2b20      	cmp	r3, #32
 80167e8:	d139      	bne.n	801685e <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80167f0:	2b01      	cmp	r3, #1
 80167f2:	d101      	bne.n	80167f8 <HAL_I2CEx_ConfigDigitalFilter+0x58>
 80167f4:	2302      	movs	r3, #2
 80167f6:	e033      	b.n	8016860 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 80167f8:	687b      	ldr	r3, [r7, #4]
 80167fa:	2201      	movs	r2, #1
 80167fc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	2224      	movs	r2, #36	@ 0x24
 8016804:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	681b      	ldr	r3, [r3, #0]
 801680c:	681a      	ldr	r2, [r3, #0]
 801680e:	687b      	ldr	r3, [r7, #4]
 8016810:	681b      	ldr	r3, [r3, #0]
 8016812:	f022 0201 	bic.w	r2, r2, #1
 8016816:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	681b      	ldr	r3, [r3, #0]
 801681c:	681b      	ldr	r3, [r3, #0]
 801681e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8016820:	68fb      	ldr	r3, [r7, #12]
 8016822:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8016826:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8016828:	683b      	ldr	r3, [r7, #0]
 801682a:	021b      	lsls	r3, r3, #8
 801682c:	68fa      	ldr	r2, [r7, #12]
 801682e:	4313      	orrs	r3, r2
 8016830:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	681b      	ldr	r3, [r3, #0]
 8016836:	68fa      	ldr	r2, [r7, #12]
 8016838:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 801683a:	687b      	ldr	r3, [r7, #4]
 801683c:	681b      	ldr	r3, [r3, #0]
 801683e:	681a      	ldr	r2, [r3, #0]
 8016840:	687b      	ldr	r3, [r7, #4]
 8016842:	681b      	ldr	r3, [r3, #0]
 8016844:	f042 0201 	orr.w	r2, r2, #1
 8016848:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2220      	movs	r2, #32
 801684e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8016852:	687b      	ldr	r3, [r7, #4]
 8016854:	2200      	movs	r2, #0
 8016856:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 801685a:	2300      	movs	r3, #0
 801685c:	e000      	b.n	8016860 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 801685e:	2302      	movs	r3, #2
  }
}
 8016860:	4618      	mov	r0, r3
 8016862:	3710      	adds	r7, #16
 8016864:	46bd      	mov	sp, r7
 8016866:	bd80      	pop	{r7, pc}
 8016868:	40005400 	.word	0x40005400
 801686c:	40005800 	.word	0x40005800
 8016870:	40007800 	.word	0x40007800
 8016874:	0801ddac 	.word	0x0801ddac

08016878 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8016878:	b580      	push	{r7, lr}
 801687a:	b084      	sub	sp, #16
 801687c:	af00      	add	r7, sp, #0
 801687e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8016880:	687b      	ldr	r3, [r7, #4]
 8016882:	2b00      	cmp	r3, #0
 8016884:	d00b      	beq.n	801689e <HAL_PWREx_ControlVoltageScaling+0x26>
 8016886:	687b      	ldr	r3, [r7, #4]
 8016888:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801688c:	d007      	beq.n	801689e <HAL_PWREx_ControlVoltageScaling+0x26>
 801688e:	687b      	ldr	r3, [r7, #4]
 8016890:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016894:	d003      	beq.n	801689e <HAL_PWREx_ControlVoltageScaling+0x26>
 8016896:	219d      	movs	r1, #157	@ 0x9d
 8016898:	484d      	ldr	r0, [pc, #308]	@ (80169d0 <HAL_PWREx_ControlVoltageScaling+0x158>)
 801689a:	f7fb fe0b 	bl	80124b4 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 801689e:	687b      	ldr	r3, [r7, #4]
 80168a0:	2b00      	cmp	r3, #0
 80168a2:	d141      	bne.n	8016928 <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80168a4:	4b4b      	ldr	r3, [pc, #300]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80168a6:	681b      	ldr	r3, [r3, #0]
 80168a8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80168ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80168b0:	d131      	bne.n	8016916 <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80168b2:	4b48      	ldr	r3, [pc, #288]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80168b4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80168b8:	4a46      	ldr	r2, [pc, #280]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80168ba:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80168be:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80168c2:	4b44      	ldr	r3, [pc, #272]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80168c4:	681b      	ldr	r3, [r3, #0]
 80168c6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80168ca:	4a42      	ldr	r2, [pc, #264]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80168cc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80168d0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80168d2:	4b41      	ldr	r3, [pc, #260]	@ (80169d8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 80168d4:	681b      	ldr	r3, [r3, #0]
 80168d6:	2232      	movs	r2, #50	@ 0x32
 80168d8:	fb02 f303 	mul.w	r3, r2, r3
 80168dc:	4a3f      	ldr	r2, [pc, #252]	@ (80169dc <HAL_PWREx_ControlVoltageScaling+0x164>)
 80168de:	fba2 2303 	umull	r2, r3, r2, r3
 80168e2:	0c9b      	lsrs	r3, r3, #18
 80168e4:	3301      	adds	r3, #1
 80168e6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80168e8:	e002      	b.n	80168f0 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 80168ea:	68fb      	ldr	r3, [r7, #12]
 80168ec:	3b01      	subs	r3, #1
 80168ee:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80168f0:	4b38      	ldr	r3, [pc, #224]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80168f2:	695b      	ldr	r3, [r3, #20]
 80168f4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80168f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80168fc:	d102      	bne.n	8016904 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80168fe:	68fb      	ldr	r3, [r7, #12]
 8016900:	2b00      	cmp	r3, #0
 8016902:	d1f2      	bne.n	80168ea <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8016904:	4b33      	ldr	r3, [pc, #204]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016906:	695b      	ldr	r3, [r3, #20]
 8016908:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801690c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016910:	d158      	bne.n	80169c4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8016912:	2303      	movs	r3, #3
 8016914:	e057      	b.n	80169c6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8016916:	4b2f      	ldr	r3, [pc, #188]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016918:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801691c:	4a2d      	ldr	r2, [pc, #180]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 801691e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016922:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8016926:	e04d      	b.n	80169c4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8016928:	687b      	ldr	r3, [r7, #4]
 801692a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801692e:	d141      	bne.n	80169b4 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8016930:	4b28      	ldr	r3, [pc, #160]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016932:	681b      	ldr	r3, [r3, #0]
 8016934:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8016938:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801693c:	d131      	bne.n	80169a2 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 801693e:	4b25      	ldr	r3, [pc, #148]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016944:	4a23      	ldr	r2, [pc, #140]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016946:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801694a:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 801694e:	4b21      	ldr	r3, [pc, #132]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016950:	681b      	ldr	r3, [r3, #0]
 8016952:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8016956:	4a1f      	ldr	r2, [pc, #124]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016958:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 801695c:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 801695e:	4b1e      	ldr	r3, [pc, #120]	@ (80169d8 <HAL_PWREx_ControlVoltageScaling+0x160>)
 8016960:	681b      	ldr	r3, [r3, #0]
 8016962:	2232      	movs	r2, #50	@ 0x32
 8016964:	fb02 f303 	mul.w	r3, r2, r3
 8016968:	4a1c      	ldr	r2, [pc, #112]	@ (80169dc <HAL_PWREx_ControlVoltageScaling+0x164>)
 801696a:	fba2 2303 	umull	r2, r3, r2, r3
 801696e:	0c9b      	lsrs	r3, r3, #18
 8016970:	3301      	adds	r3, #1
 8016972:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8016974:	e002      	b.n	801697c <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8016976:	68fb      	ldr	r3, [r7, #12]
 8016978:	3b01      	subs	r3, #1
 801697a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 801697c:	4b15      	ldr	r3, [pc, #84]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 801697e:	695b      	ldr	r3, [r3, #20]
 8016980:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016984:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016988:	d102      	bne.n	8016990 <HAL_PWREx_ControlVoltageScaling+0x118>
 801698a:	68fb      	ldr	r3, [r7, #12]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d1f2      	bne.n	8016976 <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8016990:	4b10      	ldr	r3, [pc, #64]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8016992:	695b      	ldr	r3, [r3, #20]
 8016994:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016998:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801699c:	d112      	bne.n	80169c4 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 801699e:	2303      	movs	r3, #3
 80169a0:	e011      	b.n	80169c6 <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80169a2:	4b0c      	ldr	r3, [pc, #48]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80169a4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80169a8:	4a0a      	ldr	r2, [pc, #40]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80169aa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80169ae:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80169b2:	e007      	b.n	80169c4 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80169b4:	4b07      	ldr	r3, [pc, #28]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80169b6:	681b      	ldr	r3, [r3, #0]
 80169b8:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 80169bc:	4a05      	ldr	r2, [pc, #20]	@ (80169d4 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80169be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80169c2:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 80169c4:	2300      	movs	r3, #0
}
 80169c6:	4618      	mov	r0, r3
 80169c8:	3710      	adds	r7, #16
 80169ca:	46bd      	mov	sp, r7
 80169cc:	bd80      	pop	{r7, pc}
 80169ce:	bf00      	nop
 80169d0:	0801dde8 	.word	0x0801dde8
 80169d4:	40007000 	.word	0x40007000
 80169d8:	20000000 	.word	0x20000000
 80169dc:	431bde83 	.word	0x431bde83

080169e0 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 80169e0:	b480      	push	{r7}
 80169e2:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 80169e4:	4b05      	ldr	r3, [pc, #20]	@ (80169fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80169e6:	689b      	ldr	r3, [r3, #8]
 80169e8:	4a04      	ldr	r2, [pc, #16]	@ (80169fc <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 80169ea:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80169ee:	6093      	str	r3, [r2, #8]
}
 80169f0:	bf00      	nop
 80169f2:	46bd      	mov	sp, r7
 80169f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169f8:	4770      	bx	lr
 80169fa:	bf00      	nop
 80169fc:	40007000 	.word	0x40007000

08016a00 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b088      	sub	sp, #32
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8016a08:	687b      	ldr	r3, [r7, #4]
 8016a0a:	2b00      	cmp	r3, #0
 8016a0c:	d101      	bne.n	8016a12 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8016a0e:	2301      	movs	r3, #1
 8016a10:	e3fc      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	681b      	ldr	r3, [r3, #0]
 8016a16:	2b00      	cmp	r3, #0
 8016a18:	d022      	beq.n	8016a60 <HAL_RCC_OscConfig+0x60>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	681b      	ldr	r3, [r3, #0]
 8016a1e:	f003 0301 	and.w	r3, r3, #1
 8016a22:	2b00      	cmp	r3, #0
 8016a24:	d11c      	bne.n	8016a60 <HAL_RCC_OscConfig+0x60>
 8016a26:	687b      	ldr	r3, [r7, #4]
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	f003 0302 	and.w	r3, r3, #2
 8016a2e:	2b00      	cmp	r3, #0
 8016a30:	d116      	bne.n	8016a60 <HAL_RCC_OscConfig+0x60>
 8016a32:	687b      	ldr	r3, [r7, #4]
 8016a34:	681b      	ldr	r3, [r3, #0]
 8016a36:	f003 0320 	and.w	r3, r3, #32
 8016a3a:	2b00      	cmp	r3, #0
 8016a3c:	d110      	bne.n	8016a60 <HAL_RCC_OscConfig+0x60>
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	681b      	ldr	r3, [r3, #0]
 8016a42:	f003 0308 	and.w	r3, r3, #8
 8016a46:	2b00      	cmp	r3, #0
 8016a48:	d10a      	bne.n	8016a60 <HAL_RCC_OscConfig+0x60>
 8016a4a:	687b      	ldr	r3, [r7, #4]
 8016a4c:	681b      	ldr	r3, [r3, #0]
 8016a4e:	f003 0304 	and.w	r3, r3, #4
 8016a52:	2b00      	cmp	r3, #0
 8016a54:	d104      	bne.n	8016a60 <HAL_RCC_OscConfig+0x60>
 8016a56:	f240 1145 	movw	r1, #325	@ 0x145
 8016a5a:	4893      	ldr	r0, [pc, #588]	@ (8016ca8 <HAL_RCC_OscConfig+0x2a8>)
 8016a5c:	f7fb fd2a 	bl	80124b4 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	f003 0301 	and.w	r3, r3, #1
 8016a68:	2b00      	cmp	r3, #0
 8016a6a:	f000 8089 	beq.w	8016b80 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	685b      	ldr	r3, [r3, #4]
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d00e      	beq.n	8016a94 <HAL_RCC_OscConfig+0x94>
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	685b      	ldr	r3, [r3, #4]
 8016a7a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016a7e:	d009      	beq.n	8016a94 <HAL_RCC_OscConfig+0x94>
 8016a80:	687b      	ldr	r3, [r7, #4]
 8016a82:	685b      	ldr	r3, [r3, #4]
 8016a84:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016a88:	d004      	beq.n	8016a94 <HAL_RCC_OscConfig+0x94>
 8016a8a:	f240 114b 	movw	r1, #331	@ 0x14b
 8016a8e:	4886      	ldr	r0, [pc, #536]	@ (8016ca8 <HAL_RCC_OscConfig+0x2a8>)
 8016a90:	f7fb fd10 	bl	80124b4 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016a94:	4b85      	ldr	r3, [pc, #532]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016a96:	689b      	ldr	r3, [r3, #8]
 8016a98:	f003 030c 	and.w	r3, r3, #12
 8016a9c:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016a9e:	4b83      	ldr	r3, [pc, #524]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016aa0:	68db      	ldr	r3, [r3, #12]
 8016aa2:	f003 0303 	and.w	r3, r3, #3
 8016aa6:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8016aa8:	69bb      	ldr	r3, [r7, #24]
 8016aaa:	2b0c      	cmp	r3, #12
 8016aac:	d102      	bne.n	8016ab4 <HAL_RCC_OscConfig+0xb4>
 8016aae:	697b      	ldr	r3, [r7, #20]
 8016ab0:	2b03      	cmp	r3, #3
 8016ab2:	d002      	beq.n	8016aba <HAL_RCC_OscConfig+0xba>
 8016ab4:	69bb      	ldr	r3, [r7, #24]
 8016ab6:	2b08      	cmp	r3, #8
 8016ab8:	d10b      	bne.n	8016ad2 <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016aba:	4b7c      	ldr	r3, [pc, #496]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016abc:	681b      	ldr	r3, [r3, #0]
 8016abe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016ac2:	2b00      	cmp	r3, #0
 8016ac4:	d05b      	beq.n	8016b7e <HAL_RCC_OscConfig+0x17e>
 8016ac6:	687b      	ldr	r3, [r7, #4]
 8016ac8:	685b      	ldr	r3, [r3, #4]
 8016aca:	2b00      	cmp	r3, #0
 8016acc:	d157      	bne.n	8016b7e <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8016ace:	2301      	movs	r3, #1
 8016ad0:	e39c      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	685b      	ldr	r3, [r3, #4]
 8016ad6:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016ada:	d106      	bne.n	8016aea <HAL_RCC_OscConfig+0xea>
 8016adc:	4b73      	ldr	r3, [pc, #460]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016ade:	681b      	ldr	r3, [r3, #0]
 8016ae0:	4a72      	ldr	r2, [pc, #456]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016ae2:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016ae6:	6013      	str	r3, [r2, #0]
 8016ae8:	e01d      	b.n	8016b26 <HAL_RCC_OscConfig+0x126>
 8016aea:	687b      	ldr	r3, [r7, #4]
 8016aec:	685b      	ldr	r3, [r3, #4]
 8016aee:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8016af2:	d10c      	bne.n	8016b0e <HAL_RCC_OscConfig+0x10e>
 8016af4:	4b6d      	ldr	r3, [pc, #436]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016af6:	681b      	ldr	r3, [r3, #0]
 8016af8:	4a6c      	ldr	r2, [pc, #432]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016afa:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8016afe:	6013      	str	r3, [r2, #0]
 8016b00:	4b6a      	ldr	r3, [pc, #424]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b02:	681b      	ldr	r3, [r3, #0]
 8016b04:	4a69      	ldr	r2, [pc, #420]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b06:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8016b0a:	6013      	str	r3, [r2, #0]
 8016b0c:	e00b      	b.n	8016b26 <HAL_RCC_OscConfig+0x126>
 8016b0e:	4b67      	ldr	r3, [pc, #412]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b10:	681b      	ldr	r3, [r3, #0]
 8016b12:	4a66      	ldr	r2, [pc, #408]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b14:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8016b18:	6013      	str	r3, [r2, #0]
 8016b1a:	4b64      	ldr	r3, [pc, #400]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	4a63      	ldr	r2, [pc, #396]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b20:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8016b24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8016b26:	687b      	ldr	r3, [r7, #4]
 8016b28:	685b      	ldr	r3, [r3, #4]
 8016b2a:	2b00      	cmp	r3, #0
 8016b2c:	d013      	beq.n	8016b56 <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016b2e:	f7fb ffe5 	bl	8012afc <HAL_GetTick>
 8016b32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016b34:	e008      	b.n	8016b48 <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016b36:	f7fb ffe1 	bl	8012afc <HAL_GetTick>
 8016b3a:	4602      	mov	r2, r0
 8016b3c:	693b      	ldr	r3, [r7, #16]
 8016b3e:	1ad3      	subs	r3, r2, r3
 8016b40:	2b64      	cmp	r3, #100	@ 0x64
 8016b42:	d901      	bls.n	8016b48 <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8016b44:	2303      	movs	r3, #3
 8016b46:	e361      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8016b48:	4b58      	ldr	r3, [pc, #352]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016b50:	2b00      	cmp	r3, #0
 8016b52:	d0f0      	beq.n	8016b36 <HAL_RCC_OscConfig+0x136>
 8016b54:	e014      	b.n	8016b80 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016b56:	f7fb ffd1 	bl	8012afc <HAL_GetTick>
 8016b5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016b5c:	e008      	b.n	8016b70 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8016b5e:	f7fb ffcd 	bl	8012afc <HAL_GetTick>
 8016b62:	4602      	mov	r2, r0
 8016b64:	693b      	ldr	r3, [r7, #16]
 8016b66:	1ad3      	subs	r3, r2, r3
 8016b68:	2b64      	cmp	r3, #100	@ 0x64
 8016b6a:	d901      	bls.n	8016b70 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 8016b6c:	2303      	movs	r3, #3
 8016b6e:	e34d      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8016b70:	4b4e      	ldr	r3, [pc, #312]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8016b78:	2b00      	cmp	r3, #0
 8016b7a:	d1f0      	bne.n	8016b5e <HAL_RCC_OscConfig+0x15e>
 8016b7c:	e000      	b.n	8016b80 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8016b7e:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8016b80:	687b      	ldr	r3, [r7, #4]
 8016b82:	681b      	ldr	r3, [r3, #0]
 8016b84:	f003 0302 	and.w	r3, r3, #2
 8016b88:	2b00      	cmp	r3, #0
 8016b8a:	f000 8094 	beq.w	8016cb6 <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8016b8e:	687b      	ldr	r3, [r7, #4]
 8016b90:	68db      	ldr	r3, [r3, #12]
 8016b92:	2b00      	cmp	r3, #0
 8016b94:	d009      	beq.n	8016baa <HAL_RCC_OscConfig+0x1aa>
 8016b96:	687b      	ldr	r3, [r7, #4]
 8016b98:	68db      	ldr	r3, [r3, #12]
 8016b9a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016b9e:	d004      	beq.n	8016baa <HAL_RCC_OscConfig+0x1aa>
 8016ba0:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8016ba4:	4840      	ldr	r0, [pc, #256]	@ (8016ca8 <HAL_RCC_OscConfig+0x2a8>)
 8016ba6:	f7fb fc85 	bl	80124b4 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8016baa:	687b      	ldr	r3, [r7, #4]
 8016bac:	691b      	ldr	r3, [r3, #16]
 8016bae:	2b7f      	cmp	r3, #127	@ 0x7f
 8016bb0:	d904      	bls.n	8016bbc <HAL_RCC_OscConfig+0x1bc>
 8016bb2:	f240 1181 	movw	r1, #385	@ 0x181
 8016bb6:	483c      	ldr	r0, [pc, #240]	@ (8016ca8 <HAL_RCC_OscConfig+0x2a8>)
 8016bb8:	f7fb fc7c 	bl	80124b4 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8016bbc:	4b3b      	ldr	r3, [pc, #236]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016bbe:	689b      	ldr	r3, [r3, #8]
 8016bc0:	f003 030c 	and.w	r3, r3, #12
 8016bc4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8016bc6:	4b39      	ldr	r3, [pc, #228]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016bc8:	68db      	ldr	r3, [r3, #12]
 8016bca:	f003 0303 	and.w	r3, r3, #3
 8016bce:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8016bd0:	69bb      	ldr	r3, [r7, #24]
 8016bd2:	2b0c      	cmp	r3, #12
 8016bd4:	d102      	bne.n	8016bdc <HAL_RCC_OscConfig+0x1dc>
 8016bd6:	697b      	ldr	r3, [r7, #20]
 8016bd8:	2b02      	cmp	r3, #2
 8016bda:	d002      	beq.n	8016be2 <HAL_RCC_OscConfig+0x1e2>
 8016bdc:	69bb      	ldr	r3, [r7, #24]
 8016bde:	2b04      	cmp	r3, #4
 8016be0:	d11f      	bne.n	8016c22 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016be2:	4b32      	ldr	r3, [pc, #200]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016be4:	681b      	ldr	r3, [r3, #0]
 8016be6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016bea:	2b00      	cmp	r3, #0
 8016bec:	d005      	beq.n	8016bfa <HAL_RCC_OscConfig+0x1fa>
 8016bee:	687b      	ldr	r3, [r7, #4]
 8016bf0:	68db      	ldr	r3, [r3, #12]
 8016bf2:	2b00      	cmp	r3, #0
 8016bf4:	d101      	bne.n	8016bfa <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8016bf6:	2301      	movs	r3, #1
 8016bf8:	e308      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016bfa:	4b2c      	ldr	r3, [pc, #176]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016bfc:	685b      	ldr	r3, [r3, #4]
 8016bfe:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8016c02:	687b      	ldr	r3, [r7, #4]
 8016c04:	691b      	ldr	r3, [r3, #16]
 8016c06:	061b      	lsls	r3, r3, #24
 8016c08:	4928      	ldr	r1, [pc, #160]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c0a:	4313      	orrs	r3, r2
 8016c0c:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8016c0e:	4b28      	ldr	r3, [pc, #160]	@ (8016cb0 <HAL_RCC_OscConfig+0x2b0>)
 8016c10:	681b      	ldr	r3, [r3, #0]
 8016c12:	4618      	mov	r0, r3
 8016c14:	f7fb fd04 	bl	8012620 <HAL_InitTick>
 8016c18:	4603      	mov	r3, r0
 8016c1a:	2b00      	cmp	r3, #0
 8016c1c:	d04a      	beq.n	8016cb4 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8016c1e:	2301      	movs	r3, #1
 8016c20:	e2f4      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8016c22:	687b      	ldr	r3, [r7, #4]
 8016c24:	68db      	ldr	r3, [r3, #12]
 8016c26:	2b00      	cmp	r3, #0
 8016c28:	d023      	beq.n	8016c72 <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8016c2a:	4b20      	ldr	r3, [pc, #128]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c2c:	681b      	ldr	r3, [r3, #0]
 8016c2e:	4a1f      	ldr	r2, [pc, #124]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c30:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016c34:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016c36:	f7fb ff61 	bl	8012afc <HAL_GetTick>
 8016c3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016c3c:	e008      	b.n	8016c50 <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016c3e:	f7fb ff5d 	bl	8012afc <HAL_GetTick>
 8016c42:	4602      	mov	r2, r0
 8016c44:	693b      	ldr	r3, [r7, #16]
 8016c46:	1ad3      	subs	r3, r2, r3
 8016c48:	2b02      	cmp	r3, #2
 8016c4a:	d901      	bls.n	8016c50 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8016c4c:	2303      	movs	r3, #3
 8016c4e:	e2dd      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8016c50:	4b16      	ldr	r3, [pc, #88]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c52:	681b      	ldr	r3, [r3, #0]
 8016c54:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016c58:	2b00      	cmp	r3, #0
 8016c5a:	d0f0      	beq.n	8016c3e <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8016c5c:	4b13      	ldr	r3, [pc, #76]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c5e:	685b      	ldr	r3, [r3, #4]
 8016c60:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	691b      	ldr	r3, [r3, #16]
 8016c68:	061b      	lsls	r3, r3, #24
 8016c6a:	4910      	ldr	r1, [pc, #64]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c6c:	4313      	orrs	r3, r2
 8016c6e:	604b      	str	r3, [r1, #4]
 8016c70:	e021      	b.n	8016cb6 <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8016c72:	4b0e      	ldr	r3, [pc, #56]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c74:	681b      	ldr	r3, [r3, #0]
 8016c76:	4a0d      	ldr	r2, [pc, #52]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c78:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8016c7c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8016c7e:	f7fb ff3d 	bl	8012afc <HAL_GetTick>
 8016c82:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016c84:	e008      	b.n	8016c98 <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8016c86:	f7fb ff39 	bl	8012afc <HAL_GetTick>
 8016c8a:	4602      	mov	r2, r0
 8016c8c:	693b      	ldr	r3, [r7, #16]
 8016c8e:	1ad3      	subs	r3, r2, r3
 8016c90:	2b02      	cmp	r3, #2
 8016c92:	d901      	bls.n	8016c98 <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8016c94:	2303      	movs	r3, #3
 8016c96:	e2b9      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8016c98:	4b04      	ldr	r3, [pc, #16]	@ (8016cac <HAL_RCC_OscConfig+0x2ac>)
 8016c9a:	681b      	ldr	r3, [r3, #0]
 8016c9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8016ca0:	2b00      	cmp	r3, #0
 8016ca2:	d1f0      	bne.n	8016c86 <HAL_RCC_OscConfig+0x286>
 8016ca4:	e007      	b.n	8016cb6 <HAL_RCC_OscConfig+0x2b6>
 8016ca6:	bf00      	nop
 8016ca8:	0801de24 	.word	0x0801de24
 8016cac:	40021000 	.word	0x40021000
 8016cb0:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8016cb4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8016cb6:	687b      	ldr	r3, [r7, #4]
 8016cb8:	681b      	ldr	r3, [r3, #0]
 8016cba:	f003 0308 	and.w	r3, r3, #8
 8016cbe:	2b00      	cmp	r3, #0
 8016cc0:	d049      	beq.n	8016d56 <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8016cc2:	687b      	ldr	r3, [r7, #4]
 8016cc4:	695b      	ldr	r3, [r3, #20]
 8016cc6:	2b00      	cmp	r3, #0
 8016cc8:	d008      	beq.n	8016cdc <HAL_RCC_OscConfig+0x2dc>
 8016cca:	687b      	ldr	r3, [r7, #4]
 8016ccc:	695b      	ldr	r3, [r3, #20]
 8016cce:	2b01      	cmp	r3, #1
 8016cd0:	d004      	beq.n	8016cdc <HAL_RCC_OscConfig+0x2dc>
 8016cd2:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8016cd6:	48a3      	ldr	r0, [pc, #652]	@ (8016f64 <HAL_RCC_OscConfig+0x564>)
 8016cd8:	f7fb fbec 	bl	80124b4 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8016cdc:	687b      	ldr	r3, [r7, #4]
 8016cde:	695b      	ldr	r3, [r3, #20]
 8016ce0:	2b00      	cmp	r3, #0
 8016ce2:	d01c      	beq.n	8016d1e <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8016ce4:	4ba0      	ldr	r3, [pc, #640]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016ce6:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016cea:	4a9f      	ldr	r2, [pc, #636]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016cec:	f043 0301 	orr.w	r3, r3, #1
 8016cf0:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016cf4:	f7fb ff02 	bl	8012afc <HAL_GetTick>
 8016cf8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016cfa:	e008      	b.n	8016d0e <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016cfc:	f7fb fefe 	bl	8012afc <HAL_GetTick>
 8016d00:	4602      	mov	r2, r0
 8016d02:	693b      	ldr	r3, [r7, #16]
 8016d04:	1ad3      	subs	r3, r2, r3
 8016d06:	2b02      	cmp	r3, #2
 8016d08:	d901      	bls.n	8016d0e <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8016d0a:	2303      	movs	r3, #3
 8016d0c:	e27e      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8016d0e:	4b96      	ldr	r3, [pc, #600]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016d10:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016d14:	f003 0302 	and.w	r3, r3, #2
 8016d18:	2b00      	cmp	r3, #0
 8016d1a:	d0ef      	beq.n	8016cfc <HAL_RCC_OscConfig+0x2fc>
 8016d1c:	e01b      	b.n	8016d56 <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8016d1e:	4b92      	ldr	r3, [pc, #584]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016d20:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016d24:	4a90      	ldr	r2, [pc, #576]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016d26:	f023 0301 	bic.w	r3, r3, #1
 8016d2a:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016d2e:	f7fb fee5 	bl	8012afc <HAL_GetTick>
 8016d32:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016d34:	e008      	b.n	8016d48 <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8016d36:	f7fb fee1 	bl	8012afc <HAL_GetTick>
 8016d3a:	4602      	mov	r2, r0
 8016d3c:	693b      	ldr	r3, [r7, #16]
 8016d3e:	1ad3      	subs	r3, r2, r3
 8016d40:	2b02      	cmp	r3, #2
 8016d42:	d901      	bls.n	8016d48 <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8016d44:	2303      	movs	r3, #3
 8016d46:	e261      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8016d48:	4b87      	ldr	r3, [pc, #540]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016d4a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8016d4e:	f003 0302 	and.w	r3, r3, #2
 8016d52:	2b00      	cmp	r3, #0
 8016d54:	d1ef      	bne.n	8016d36 <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8016d56:	687b      	ldr	r3, [r7, #4]
 8016d58:	681b      	ldr	r3, [r3, #0]
 8016d5a:	f003 0304 	and.w	r3, r3, #4
 8016d5e:	2b00      	cmp	r3, #0
 8016d60:	f000 80b7 	beq.w	8016ed2 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8016d64:	2300      	movs	r3, #0
 8016d66:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8016d68:	687b      	ldr	r3, [r7, #4]
 8016d6a:	689b      	ldr	r3, [r3, #8]
 8016d6c:	2b00      	cmp	r3, #0
 8016d6e:	d00c      	beq.n	8016d8a <HAL_RCC_OscConfig+0x38a>
 8016d70:	687b      	ldr	r3, [r7, #4]
 8016d72:	689b      	ldr	r3, [r3, #8]
 8016d74:	2b01      	cmp	r3, #1
 8016d76:	d008      	beq.n	8016d8a <HAL_RCC_OscConfig+0x38a>
 8016d78:	687b      	ldr	r3, [r7, #4]
 8016d7a:	689b      	ldr	r3, [r3, #8]
 8016d7c:	2b05      	cmp	r3, #5
 8016d7e:	d004      	beq.n	8016d8a <HAL_RCC_OscConfig+0x38a>
 8016d80:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8016d84:	4877      	ldr	r0, [pc, #476]	@ (8016f64 <HAL_RCC_OscConfig+0x564>)
 8016d86:	f7fb fb95 	bl	80124b4 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8016d8a:	4b77      	ldr	r3, [pc, #476]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016d8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016d8e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016d92:	2b00      	cmp	r3, #0
 8016d94:	d101      	bne.n	8016d9a <HAL_RCC_OscConfig+0x39a>
 8016d96:	2301      	movs	r3, #1
 8016d98:	e000      	b.n	8016d9c <HAL_RCC_OscConfig+0x39c>
 8016d9a:	2300      	movs	r3, #0
 8016d9c:	2b00      	cmp	r3, #0
 8016d9e:	d00d      	beq.n	8016dbc <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8016da0:	4b71      	ldr	r3, [pc, #452]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016da2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016da4:	4a70      	ldr	r2, [pc, #448]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016da6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8016daa:	6593      	str	r3, [r2, #88]	@ 0x58
 8016dac:	4b6e      	ldr	r3, [pc, #440]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016dae:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016db0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016db4:	60fb      	str	r3, [r7, #12]
 8016db6:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8016db8:	2301      	movs	r3, #1
 8016dba:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016dbc:	4b6b      	ldr	r3, [pc, #428]	@ (8016f6c <HAL_RCC_OscConfig+0x56c>)
 8016dbe:	681b      	ldr	r3, [r3, #0]
 8016dc0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d118      	bne.n	8016dfa <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8016dc8:	4b68      	ldr	r3, [pc, #416]	@ (8016f6c <HAL_RCC_OscConfig+0x56c>)
 8016dca:	681b      	ldr	r3, [r3, #0]
 8016dcc:	4a67      	ldr	r2, [pc, #412]	@ (8016f6c <HAL_RCC_OscConfig+0x56c>)
 8016dce:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8016dd2:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8016dd4:	f7fb fe92 	bl	8012afc <HAL_GetTick>
 8016dd8:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016dda:	e008      	b.n	8016dee <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8016ddc:	f7fb fe8e 	bl	8012afc <HAL_GetTick>
 8016de0:	4602      	mov	r2, r0
 8016de2:	693b      	ldr	r3, [r7, #16]
 8016de4:	1ad3      	subs	r3, r2, r3
 8016de6:	2b02      	cmp	r3, #2
 8016de8:	d901      	bls.n	8016dee <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 8016dea:	2303      	movs	r3, #3
 8016dec:	e20e      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8016dee:	4b5f      	ldr	r3, [pc, #380]	@ (8016f6c <HAL_RCC_OscConfig+0x56c>)
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8016df6:	2b00      	cmp	r3, #0
 8016df8:	d0f0      	beq.n	8016ddc <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8016dfa:	687b      	ldr	r3, [r7, #4]
 8016dfc:	689b      	ldr	r3, [r3, #8]
 8016dfe:	2b01      	cmp	r3, #1
 8016e00:	d108      	bne.n	8016e14 <HAL_RCC_OscConfig+0x414>
 8016e02:	4b59      	ldr	r3, [pc, #356]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e04:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e08:	4a57      	ldr	r2, [pc, #348]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e0a:	f043 0301 	orr.w	r3, r3, #1
 8016e0e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8016e12:	e024      	b.n	8016e5e <HAL_RCC_OscConfig+0x45e>
 8016e14:	687b      	ldr	r3, [r7, #4]
 8016e16:	689b      	ldr	r3, [r3, #8]
 8016e18:	2b05      	cmp	r3, #5
 8016e1a:	d110      	bne.n	8016e3e <HAL_RCC_OscConfig+0x43e>
 8016e1c:	4b52      	ldr	r3, [pc, #328]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e22:	4a51      	ldr	r2, [pc, #324]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e24:	f043 0304 	orr.w	r3, r3, #4
 8016e28:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8016e2c:	4b4e      	ldr	r3, [pc, #312]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e32:	4a4d      	ldr	r2, [pc, #308]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e34:	f043 0301 	orr.w	r3, r3, #1
 8016e38:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8016e3c:	e00f      	b.n	8016e5e <HAL_RCC_OscConfig+0x45e>
 8016e3e:	4b4a      	ldr	r3, [pc, #296]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e40:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e44:	4a48      	ldr	r2, [pc, #288]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e46:	f023 0301 	bic.w	r3, r3, #1
 8016e4a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8016e4e:	4b46      	ldr	r3, [pc, #280]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e50:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e54:	4a44      	ldr	r2, [pc, #272]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e56:	f023 0304 	bic.w	r3, r3, #4
 8016e5a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8016e5e:	687b      	ldr	r3, [r7, #4]
 8016e60:	689b      	ldr	r3, [r3, #8]
 8016e62:	2b00      	cmp	r3, #0
 8016e64:	d016      	beq.n	8016e94 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016e66:	f7fb fe49 	bl	8012afc <HAL_GetTick>
 8016e6a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016e6c:	e00a      	b.n	8016e84 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016e6e:	f7fb fe45 	bl	8012afc <HAL_GetTick>
 8016e72:	4602      	mov	r2, r0
 8016e74:	693b      	ldr	r3, [r7, #16]
 8016e76:	1ad3      	subs	r3, r2, r3
 8016e78:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016e7c:	4293      	cmp	r3, r2
 8016e7e:	d901      	bls.n	8016e84 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8016e80:	2303      	movs	r3, #3
 8016e82:	e1c3      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8016e84:	4b38      	ldr	r3, [pc, #224]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016e8a:	f003 0302 	and.w	r3, r3, #2
 8016e8e:	2b00      	cmp	r3, #0
 8016e90:	d0ed      	beq.n	8016e6e <HAL_RCC_OscConfig+0x46e>
 8016e92:	e015      	b.n	8016ec0 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016e94:	f7fb fe32 	bl	8012afc <HAL_GetTick>
 8016e98:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8016e9a:	e00a      	b.n	8016eb2 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8016e9c:	f7fb fe2e 	bl	8012afc <HAL_GetTick>
 8016ea0:	4602      	mov	r2, r0
 8016ea2:	693b      	ldr	r3, [r7, #16]
 8016ea4:	1ad3      	subs	r3, r2, r3
 8016ea6:	f241 3288 	movw	r2, #5000	@ 0x1388
 8016eaa:	4293      	cmp	r3, r2
 8016eac:	d901      	bls.n	8016eb2 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8016eae:	2303      	movs	r3, #3
 8016eb0:	e1ac      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8016eb2:	4b2d      	ldr	r3, [pc, #180]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8016eb8:	f003 0302 	and.w	r3, r3, #2
 8016ebc:	2b00      	cmp	r3, #0
 8016ebe:	d1ed      	bne.n	8016e9c <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8016ec0:	7ffb      	ldrb	r3, [r7, #31]
 8016ec2:	2b01      	cmp	r3, #1
 8016ec4:	d105      	bne.n	8016ed2 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8016ec6:	4b28      	ldr	r3, [pc, #160]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016ec8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8016eca:	4a27      	ldr	r2, [pc, #156]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016ecc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016ed0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8016ed2:	687b      	ldr	r3, [r7, #4]
 8016ed4:	681b      	ldr	r3, [r3, #0]
 8016ed6:	f003 0320 	and.w	r3, r3, #32
 8016eda:	2b00      	cmp	r3, #0
 8016edc:	d04f      	beq.n	8016f7e <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8016ede:	687b      	ldr	r3, [r7, #4]
 8016ee0:	699b      	ldr	r3, [r3, #24]
 8016ee2:	2b00      	cmp	r3, #0
 8016ee4:	d008      	beq.n	8016ef8 <HAL_RCC_OscConfig+0x4f8>
 8016ee6:	687b      	ldr	r3, [r7, #4]
 8016ee8:	699b      	ldr	r3, [r3, #24]
 8016eea:	2b01      	cmp	r3, #1
 8016eec:	d004      	beq.n	8016ef8 <HAL_RCC_OscConfig+0x4f8>
 8016eee:	f240 213b 	movw	r1, #571	@ 0x23b
 8016ef2:	481c      	ldr	r0, [pc, #112]	@ (8016f64 <HAL_RCC_OscConfig+0x564>)
 8016ef4:	f7fb fade 	bl	80124b4 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8016ef8:	687b      	ldr	r3, [r7, #4]
 8016efa:	699b      	ldr	r3, [r3, #24]
 8016efc:	2b00      	cmp	r3, #0
 8016efe:	d01c      	beq.n	8016f3a <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8016f00:	4b19      	ldr	r3, [pc, #100]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016f02:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016f06:	4a18      	ldr	r2, [pc, #96]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016f08:	f043 0301 	orr.w	r3, r3, #1
 8016f0c:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016f10:	f7fb fdf4 	bl	8012afc <HAL_GetTick>
 8016f14:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8016f16:	e008      	b.n	8016f2a <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8016f18:	f7fb fdf0 	bl	8012afc <HAL_GetTick>
 8016f1c:	4602      	mov	r2, r0
 8016f1e:	693b      	ldr	r3, [r7, #16]
 8016f20:	1ad3      	subs	r3, r2, r3
 8016f22:	2b02      	cmp	r3, #2
 8016f24:	d901      	bls.n	8016f2a <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 8016f26:	2303      	movs	r3, #3
 8016f28:	e170      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8016f2a:	4b0f      	ldr	r3, [pc, #60]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016f2c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016f30:	f003 0302 	and.w	r3, r3, #2
 8016f34:	2b00      	cmp	r3, #0
 8016f36:	d0ef      	beq.n	8016f18 <HAL_RCC_OscConfig+0x518>
 8016f38:	e021      	b.n	8016f7e <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8016f3a:	4b0b      	ldr	r3, [pc, #44]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016f3c:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016f40:	4a09      	ldr	r2, [pc, #36]	@ (8016f68 <HAL_RCC_OscConfig+0x568>)
 8016f42:	f023 0301 	bic.w	r3, r3, #1
 8016f46:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8016f4a:	f7fb fdd7 	bl	8012afc <HAL_GetTick>
 8016f4e:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8016f50:	e00e      	b.n	8016f70 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8016f52:	f7fb fdd3 	bl	8012afc <HAL_GetTick>
 8016f56:	4602      	mov	r2, r0
 8016f58:	693b      	ldr	r3, [r7, #16]
 8016f5a:	1ad3      	subs	r3, r2, r3
 8016f5c:	2b02      	cmp	r3, #2
 8016f5e:	d907      	bls.n	8016f70 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8016f60:	2303      	movs	r3, #3
 8016f62:	e153      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
 8016f64:	0801de24 	.word	0x0801de24
 8016f68:	40021000 	.word	0x40021000
 8016f6c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8016f70:	4b85      	ldr	r3, [pc, #532]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8016f72:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8016f76:	f003 0302 	and.w	r3, r3, #2
 8016f7a:	2b00      	cmp	r3, #0
 8016f7c:	d1e9      	bne.n	8016f52 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	69db      	ldr	r3, [r3, #28]
 8016f82:	2b00      	cmp	r3, #0
 8016f84:	d00c      	beq.n	8016fa0 <HAL_RCC_OscConfig+0x5a0>
 8016f86:	687b      	ldr	r3, [r7, #4]
 8016f88:	69db      	ldr	r3, [r3, #28]
 8016f8a:	2b01      	cmp	r3, #1
 8016f8c:	d008      	beq.n	8016fa0 <HAL_RCC_OscConfig+0x5a0>
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	69db      	ldr	r3, [r3, #28]
 8016f92:	2b02      	cmp	r3, #2
 8016f94:	d004      	beq.n	8016fa0 <HAL_RCC_OscConfig+0x5a0>
 8016f96:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8016f9a:	487c      	ldr	r0, [pc, #496]	@ (801718c <HAL_RCC_OscConfig+0x78c>)
 8016f9c:	f7fb fa8a 	bl	80124b4 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	69db      	ldr	r3, [r3, #28]
 8016fa4:	2b00      	cmp	r3, #0
 8016fa6:	f000 8130 	beq.w	801720a <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8016faa:	4b77      	ldr	r3, [pc, #476]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8016fac:	689b      	ldr	r3, [r3, #8]
 8016fae:	f003 030c 	and.w	r3, r3, #12
 8016fb2:	2b0c      	cmp	r3, #12
 8016fb4:	f000 80e2 	beq.w	801717c <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8016fb8:	687b      	ldr	r3, [r7, #4]
 8016fba:	69db      	ldr	r3, [r3, #28]
 8016fbc:	2b02      	cmp	r3, #2
 8016fbe:	f040 80bd 	bne.w	801713c <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8016fc2:	687b      	ldr	r3, [r7, #4]
 8016fc4:	6a1b      	ldr	r3, [r3, #32]
 8016fc6:	2b00      	cmp	r3, #0
 8016fc8:	d00c      	beq.n	8016fe4 <HAL_RCC_OscConfig+0x5e4>
 8016fca:	687b      	ldr	r3, [r7, #4]
 8016fcc:	6a1b      	ldr	r3, [r3, #32]
 8016fce:	2b02      	cmp	r3, #2
 8016fd0:	d008      	beq.n	8016fe4 <HAL_RCC_OscConfig+0x5e4>
 8016fd2:	687b      	ldr	r3, [r7, #4]
 8016fd4:	6a1b      	ldr	r3, [r3, #32]
 8016fd6:	2b03      	cmp	r3, #3
 8016fd8:	d004      	beq.n	8016fe4 <HAL_RCC_OscConfig+0x5e4>
 8016fda:	f240 216e 	movw	r1, #622	@ 0x26e
 8016fde:	486b      	ldr	r0, [pc, #428]	@ (801718c <HAL_RCC_OscConfig+0x78c>)
 8016fe0:	f7fb fa68 	bl	80124b4 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8016fe4:	687b      	ldr	r3, [r7, #4]
 8016fe6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d003      	beq.n	8016ff4 <HAL_RCC_OscConfig+0x5f4>
 8016fec:	687b      	ldr	r3, [r7, #4]
 8016fee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016ff0:	2b10      	cmp	r3, #16
 8016ff2:	d904      	bls.n	8016ffe <HAL_RCC_OscConfig+0x5fe>
 8016ff4:	f240 216f 	movw	r1, #623	@ 0x26f
 8016ff8:	4864      	ldr	r0, [pc, #400]	@ (801718c <HAL_RCC_OscConfig+0x78c>)
 8016ffa:	f7fb fa5b 	bl	80124b4 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8016ffe:	687b      	ldr	r3, [r7, #4]
 8017000:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017002:	2b07      	cmp	r3, #7
 8017004:	d903      	bls.n	801700e <HAL_RCC_OscConfig+0x60e>
 8017006:	687b      	ldr	r3, [r7, #4]
 8017008:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801700a:	2b7f      	cmp	r3, #127	@ 0x7f
 801700c:	d904      	bls.n	8017018 <HAL_RCC_OscConfig+0x618>
 801700e:	f44f 711c 	mov.w	r1, #624	@ 0x270
 8017012:	485e      	ldr	r0, [pc, #376]	@ (801718c <HAL_RCC_OscConfig+0x78c>)
 8017014:	f7fb fa4e 	bl	80124b4 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801701c:	2b01      	cmp	r3, #1
 801701e:	d903      	bls.n	8017028 <HAL_RCC_OscConfig+0x628>
 8017020:	687b      	ldr	r3, [r7, #4]
 8017022:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017024:	2b1f      	cmp	r3, #31
 8017026:	d904      	bls.n	8017032 <HAL_RCC_OscConfig+0x632>
 8017028:	f240 2171 	movw	r1, #625	@ 0x271
 801702c:	4857      	ldr	r0, [pc, #348]	@ (801718c <HAL_RCC_OscConfig+0x78c>)
 801702e:	f7fb fa41 	bl	80124b4 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8017032:	687b      	ldr	r3, [r7, #4]
 8017034:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017036:	2b02      	cmp	r3, #2
 8017038:	d010      	beq.n	801705c <HAL_RCC_OscConfig+0x65c>
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801703e:	2b04      	cmp	r3, #4
 8017040:	d00c      	beq.n	801705c <HAL_RCC_OscConfig+0x65c>
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017046:	2b06      	cmp	r3, #6
 8017048:	d008      	beq.n	801705c <HAL_RCC_OscConfig+0x65c>
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801704e:	2b08      	cmp	r3, #8
 8017050:	d004      	beq.n	801705c <HAL_RCC_OscConfig+0x65c>
 8017052:	f240 2172 	movw	r1, #626	@ 0x272
 8017056:	484d      	ldr	r0, [pc, #308]	@ (801718c <HAL_RCC_OscConfig+0x78c>)
 8017058:	f7fb fa2c 	bl	80124b4 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 801705c:	687b      	ldr	r3, [r7, #4]
 801705e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017060:	2b02      	cmp	r3, #2
 8017062:	d010      	beq.n	8017086 <HAL_RCC_OscConfig+0x686>
 8017064:	687b      	ldr	r3, [r7, #4]
 8017066:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017068:	2b04      	cmp	r3, #4
 801706a:	d00c      	beq.n	8017086 <HAL_RCC_OscConfig+0x686>
 801706c:	687b      	ldr	r3, [r7, #4]
 801706e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017070:	2b06      	cmp	r3, #6
 8017072:	d008      	beq.n	8017086 <HAL_RCC_OscConfig+0x686>
 8017074:	687b      	ldr	r3, [r7, #4]
 8017076:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017078:	2b08      	cmp	r3, #8
 801707a:	d004      	beq.n	8017086 <HAL_RCC_OscConfig+0x686>
 801707c:	f240 2173 	movw	r1, #627	@ 0x273
 8017080:	4842      	ldr	r0, [pc, #264]	@ (801718c <HAL_RCC_OscConfig+0x78c>)
 8017082:	f7fb fa17 	bl	80124b4 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8017086:	4b40      	ldr	r3, [pc, #256]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8017088:	681b      	ldr	r3, [r3, #0]
 801708a:	4a3f      	ldr	r2, [pc, #252]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 801708c:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8017090:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017092:	f7fb fd33 	bl	8012afc <HAL_GetTick>
 8017096:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017098:	e008      	b.n	80170ac <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801709a:	f7fb fd2f 	bl	8012afc <HAL_GetTick>
 801709e:	4602      	mov	r2, r0
 80170a0:	693b      	ldr	r3, [r7, #16]
 80170a2:	1ad3      	subs	r3, r2, r3
 80170a4:	2b02      	cmp	r3, #2
 80170a6:	d901      	bls.n	80170ac <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 80170a8:	2303      	movs	r3, #3
 80170aa:	e0af      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80170ac:	4b36      	ldr	r3, [pc, #216]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 80170ae:	681b      	ldr	r3, [r3, #0]
 80170b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80170b4:	2b00      	cmp	r3, #0
 80170b6:	d1f0      	bne.n	801709a <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80170b8:	4b33      	ldr	r3, [pc, #204]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 80170ba:	68da      	ldr	r2, [r3, #12]
 80170bc:	4b34      	ldr	r3, [pc, #208]	@ (8017190 <HAL_RCC_OscConfig+0x790>)
 80170be:	4013      	ands	r3, r2
 80170c0:	687a      	ldr	r2, [r7, #4]
 80170c2:	6a11      	ldr	r1, [r2, #32]
 80170c4:	687a      	ldr	r2, [r7, #4]
 80170c6:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80170c8:	3a01      	subs	r2, #1
 80170ca:	0112      	lsls	r2, r2, #4
 80170cc:	4311      	orrs	r1, r2
 80170ce:	687a      	ldr	r2, [r7, #4]
 80170d0:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80170d2:	0212      	lsls	r2, r2, #8
 80170d4:	4311      	orrs	r1, r2
 80170d6:	687a      	ldr	r2, [r7, #4]
 80170d8:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80170da:	0852      	lsrs	r2, r2, #1
 80170dc:	3a01      	subs	r2, #1
 80170de:	0552      	lsls	r2, r2, #21
 80170e0:	4311      	orrs	r1, r2
 80170e2:	687a      	ldr	r2, [r7, #4]
 80170e4:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80170e6:	0852      	lsrs	r2, r2, #1
 80170e8:	3a01      	subs	r2, #1
 80170ea:	0652      	lsls	r2, r2, #25
 80170ec:	4311      	orrs	r1, r2
 80170ee:	687a      	ldr	r2, [r7, #4]
 80170f0:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80170f2:	06d2      	lsls	r2, r2, #27
 80170f4:	430a      	orrs	r2, r1
 80170f6:	4924      	ldr	r1, [pc, #144]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 80170f8:	4313      	orrs	r3, r2
 80170fa:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80170fc:	4b22      	ldr	r3, [pc, #136]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 80170fe:	681b      	ldr	r3, [r3, #0]
 8017100:	4a21      	ldr	r2, [pc, #132]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8017102:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017106:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8017108:	4b1f      	ldr	r3, [pc, #124]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 801710a:	68db      	ldr	r3, [r3, #12]
 801710c:	4a1e      	ldr	r2, [pc, #120]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 801710e:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8017112:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017114:	f7fb fcf2 	bl	8012afc <HAL_GetTick>
 8017118:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801711a:	e008      	b.n	801712e <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801711c:	f7fb fcee 	bl	8012afc <HAL_GetTick>
 8017120:	4602      	mov	r2, r0
 8017122:	693b      	ldr	r3, [r7, #16]
 8017124:	1ad3      	subs	r3, r2, r3
 8017126:	2b02      	cmp	r3, #2
 8017128:	d901      	bls.n	801712e <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 801712a:	2303      	movs	r3, #3
 801712c:	e06e      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 801712e:	4b16      	ldr	r3, [pc, #88]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8017130:	681b      	ldr	r3, [r3, #0]
 8017132:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017136:	2b00      	cmp	r3, #0
 8017138:	d0f0      	beq.n	801711c <HAL_RCC_OscConfig+0x71c>
 801713a:	e066      	b.n	801720a <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801713c:	4b12      	ldr	r3, [pc, #72]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 801713e:	681b      	ldr	r3, [r3, #0]
 8017140:	4a11      	ldr	r2, [pc, #68]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8017142:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8017146:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017148:	f7fb fcd8 	bl	8012afc <HAL_GetTick>
 801714c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801714e:	e008      	b.n	8017162 <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8017150:	f7fb fcd4 	bl	8012afc <HAL_GetTick>
 8017154:	4602      	mov	r2, r0
 8017156:	693b      	ldr	r3, [r7, #16]
 8017158:	1ad3      	subs	r3, r2, r3
 801715a:	2b02      	cmp	r3, #2
 801715c:	d901      	bls.n	8017162 <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 801715e:	2303      	movs	r3, #3
 8017160:	e054      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8017162:	4b09      	ldr	r3, [pc, #36]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8017164:	681b      	ldr	r3, [r3, #0]
 8017166:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801716a:	2b00      	cmp	r3, #0
 801716c:	d1f0      	bne.n	8017150 <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 801716e:	4b06      	ldr	r3, [pc, #24]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8017170:	68da      	ldr	r2, [r3, #12]
 8017172:	4905      	ldr	r1, [pc, #20]	@ (8017188 <HAL_RCC_OscConfig+0x788>)
 8017174:	4b07      	ldr	r3, [pc, #28]	@ (8017194 <HAL_RCC_OscConfig+0x794>)
 8017176:	4013      	ands	r3, r2
 8017178:	60cb      	str	r3, [r1, #12]
 801717a:	e046      	b.n	801720a <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 801717c:	687b      	ldr	r3, [r7, #4]
 801717e:	69db      	ldr	r3, [r3, #28]
 8017180:	2b01      	cmp	r3, #1
 8017182:	d109      	bne.n	8017198 <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8017184:	2301      	movs	r3, #1
 8017186:	e041      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
 8017188:	40021000 	.word	0x40021000
 801718c:	0801de24 	.word	0x0801de24
 8017190:	019f800c 	.word	0x019f800c
 8017194:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8017198:	4b1e      	ldr	r3, [pc, #120]	@ (8017214 <HAL_RCC_OscConfig+0x814>)
 801719a:	68db      	ldr	r3, [r3, #12]
 801719c:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801719e:	697b      	ldr	r3, [r7, #20]
 80171a0:	f003 0203 	and.w	r2, r3, #3
 80171a4:	687b      	ldr	r3, [r7, #4]
 80171a6:	6a1b      	ldr	r3, [r3, #32]
 80171a8:	429a      	cmp	r2, r3
 80171aa:	d12c      	bne.n	8017206 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80171ac:	697b      	ldr	r3, [r7, #20]
 80171ae:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 80171b2:	687b      	ldr	r3, [r7, #4]
 80171b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80171b6:	3b01      	subs	r3, #1
 80171b8:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80171ba:	429a      	cmp	r2, r3
 80171bc:	d123      	bne.n	8017206 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80171be:	697b      	ldr	r3, [r7, #20]
 80171c0:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80171c8:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80171ca:	429a      	cmp	r2, r3
 80171cc:	d11b      	bne.n	8017206 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80171ce:	697b      	ldr	r3, [r7, #20]
 80171d0:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80171d4:	687b      	ldr	r3, [r7, #4]
 80171d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80171d8:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80171da:	429a      	cmp	r2, r3
 80171dc:	d113      	bne.n	8017206 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80171de:	697b      	ldr	r3, [r7, #20]
 80171e0:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80171e4:	687b      	ldr	r3, [r7, #4]
 80171e6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80171e8:	085b      	lsrs	r3, r3, #1
 80171ea:	3b01      	subs	r3, #1
 80171ec:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80171ee:	429a      	cmp	r2, r3
 80171f0:	d109      	bne.n	8017206 <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80171f2:	697b      	ldr	r3, [r7, #20]
 80171f4:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80171f8:	687b      	ldr	r3, [r7, #4]
 80171fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80171fc:	085b      	lsrs	r3, r3, #1
 80171fe:	3b01      	subs	r3, #1
 8017200:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8017202:	429a      	cmp	r2, r3
 8017204:	d001      	beq.n	801720a <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 8017206:	2301      	movs	r3, #1
 8017208:	e000      	b.n	801720c <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 801720a:	2300      	movs	r3, #0
}
 801720c:	4618      	mov	r0, r3
 801720e:	3720      	adds	r7, #32
 8017210:	46bd      	mov	sp, r7
 8017212:	bd80      	pop	{r7, pc}
 8017214:	40021000 	.word	0x40021000

08017218 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8017218:	b580      	push	{r7, lr}
 801721a:	b086      	sub	sp, #24
 801721c:	af00      	add	r7, sp, #0
 801721e:	6078      	str	r0, [r7, #4]
 8017220:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8017222:	2300      	movs	r3, #0
 8017224:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	2b00      	cmp	r3, #0
 801722a:	d101      	bne.n	8017230 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 801722c:	2301      	movs	r3, #1
 801722e:	e1e0      	b.n	80175f2 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8017230:	687b      	ldr	r3, [r7, #4]
 8017232:	681b      	ldr	r3, [r3, #0]
 8017234:	f003 030f 	and.w	r3, r3, #15
 8017238:	2b00      	cmp	r3, #0
 801723a:	d003      	beq.n	8017244 <HAL_RCC_ClockConfig+0x2c>
 801723c:	687b      	ldr	r3, [r7, #4]
 801723e:	681b      	ldr	r3, [r3, #0]
 8017240:	2b0f      	cmp	r3, #15
 8017242:	d904      	bls.n	801724e <HAL_RCC_ClockConfig+0x36>
 8017244:	f240 310b 	movw	r1, #779	@ 0x30b
 8017248:	4869      	ldr	r0, [pc, #420]	@ (80173f0 <HAL_RCC_ClockConfig+0x1d8>)
 801724a:	f7fb f933 	bl	80124b4 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 801724e:	683b      	ldr	r3, [r7, #0]
 8017250:	2b00      	cmp	r3, #0
 8017252:	d031      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017254:	683b      	ldr	r3, [r7, #0]
 8017256:	2b01      	cmp	r3, #1
 8017258:	d02e      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 801725a:	683b      	ldr	r3, [r7, #0]
 801725c:	2b02      	cmp	r3, #2
 801725e:	d02b      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017260:	683b      	ldr	r3, [r7, #0]
 8017262:	2b03      	cmp	r3, #3
 8017264:	d028      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017266:	683b      	ldr	r3, [r7, #0]
 8017268:	2b04      	cmp	r3, #4
 801726a:	d025      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	2b05      	cmp	r3, #5
 8017270:	d022      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017272:	683b      	ldr	r3, [r7, #0]
 8017274:	2b06      	cmp	r3, #6
 8017276:	d01f      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017278:	683b      	ldr	r3, [r7, #0]
 801727a:	2b07      	cmp	r3, #7
 801727c:	d01c      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 801727e:	683b      	ldr	r3, [r7, #0]
 8017280:	2b08      	cmp	r3, #8
 8017282:	d019      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017284:	683b      	ldr	r3, [r7, #0]
 8017286:	2b09      	cmp	r3, #9
 8017288:	d016      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 801728a:	683b      	ldr	r3, [r7, #0]
 801728c:	2b0a      	cmp	r3, #10
 801728e:	d013      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017290:	683b      	ldr	r3, [r7, #0]
 8017292:	2b0b      	cmp	r3, #11
 8017294:	d010      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 8017296:	683b      	ldr	r3, [r7, #0]
 8017298:	2b0c      	cmp	r3, #12
 801729a:	d00d      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 801729c:	683b      	ldr	r3, [r7, #0]
 801729e:	2b0d      	cmp	r3, #13
 80172a0:	d00a      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	2b0e      	cmp	r3, #14
 80172a6:	d007      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 80172a8:	683b      	ldr	r3, [r7, #0]
 80172aa:	2b0f      	cmp	r3, #15
 80172ac:	d004      	beq.n	80172b8 <HAL_RCC_ClockConfig+0xa0>
 80172ae:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 80172b2:	484f      	ldr	r0, [pc, #316]	@ (80173f0 <HAL_RCC_ClockConfig+0x1d8>)
 80172b4:	f7fb f8fe 	bl	80124b4 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80172b8:	4b4e      	ldr	r3, [pc, #312]	@ (80173f4 <HAL_RCC_ClockConfig+0x1dc>)
 80172ba:	681b      	ldr	r3, [r3, #0]
 80172bc:	f003 030f 	and.w	r3, r3, #15
 80172c0:	683a      	ldr	r2, [r7, #0]
 80172c2:	429a      	cmp	r2, r3
 80172c4:	d910      	bls.n	80172e8 <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80172c6:	4b4b      	ldr	r3, [pc, #300]	@ (80173f4 <HAL_RCC_ClockConfig+0x1dc>)
 80172c8:	681b      	ldr	r3, [r3, #0]
 80172ca:	f023 020f 	bic.w	r2, r3, #15
 80172ce:	4949      	ldr	r1, [pc, #292]	@ (80173f4 <HAL_RCC_ClockConfig+0x1dc>)
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	4313      	orrs	r3, r2
 80172d4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80172d6:	4b47      	ldr	r3, [pc, #284]	@ (80173f4 <HAL_RCC_ClockConfig+0x1dc>)
 80172d8:	681b      	ldr	r3, [r3, #0]
 80172da:	f003 030f 	and.w	r3, r3, #15
 80172de:	683a      	ldr	r2, [r7, #0]
 80172e0:	429a      	cmp	r2, r3
 80172e2:	d001      	beq.n	80172e8 <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80172e4:	2301      	movs	r3, #1
 80172e6:	e184      	b.n	80175f2 <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	681b      	ldr	r3, [r3, #0]
 80172ec:	f003 0301 	and.w	r3, r3, #1
 80172f0:	2b00      	cmp	r3, #0
 80172f2:	f000 808e 	beq.w	8017412 <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80172f6:	687b      	ldr	r3, [r7, #4]
 80172f8:	685b      	ldr	r3, [r3, #4]
 80172fa:	2b01      	cmp	r3, #1
 80172fc:	d00c      	beq.n	8017318 <HAL_RCC_ClockConfig+0x100>
 80172fe:	687b      	ldr	r3, [r7, #4]
 8017300:	685b      	ldr	r3, [r3, #4]
 8017302:	2b02      	cmp	r3, #2
 8017304:	d008      	beq.n	8017318 <HAL_RCC_ClockConfig+0x100>
 8017306:	687b      	ldr	r3, [r7, #4]
 8017308:	685b      	ldr	r3, [r3, #4]
 801730a:	2b03      	cmp	r3, #3
 801730c:	d004      	beq.n	8017318 <HAL_RCC_ClockConfig+0x100>
 801730e:	f240 3123 	movw	r1, #803	@ 0x323
 8017312:	4837      	ldr	r0, [pc, #220]	@ (80173f0 <HAL_RCC_ClockConfig+0x1d8>)
 8017314:	f7fb f8ce 	bl	80124b4 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8017318:	687b      	ldr	r3, [r7, #4]
 801731a:	685b      	ldr	r3, [r3, #4]
 801731c:	2b03      	cmp	r3, #3
 801731e:	d129      	bne.n	8017374 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8017320:	4b35      	ldr	r3, [pc, #212]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 8017322:	681b      	ldr	r3, [r3, #0]
 8017324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8017328:	2b00      	cmp	r3, #0
 801732a:	d101      	bne.n	8017330 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 801732c:	2301      	movs	r3, #1
 801732e:	e160      	b.n	80175f2 <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8017330:	f000 fa4c 	bl	80177cc <RCC_GetSysClockFreqFromPLLSource>
 8017334:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8017336:	693b      	ldr	r3, [r7, #16]
 8017338:	4a30      	ldr	r2, [pc, #192]	@ (80173fc <HAL_RCC_ClockConfig+0x1e4>)
 801733a:	4293      	cmp	r3, r2
 801733c:	d93f      	bls.n	80173be <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 801733e:	4b2e      	ldr	r3, [pc, #184]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 8017340:	689b      	ldr	r3, [r3, #8]
 8017342:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8017346:	2b00      	cmp	r3, #0
 8017348:	d009      	beq.n	801735e <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	681b      	ldr	r3, [r3, #0]
 801734e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8017352:	2b00      	cmp	r3, #0
 8017354:	d033      	beq.n	80173be <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8017356:	687b      	ldr	r3, [r7, #4]
 8017358:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801735a:	2b00      	cmp	r3, #0
 801735c:	d12f      	bne.n	80173be <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801735e:	4b26      	ldr	r3, [pc, #152]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 8017360:	689b      	ldr	r3, [r3, #8]
 8017362:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8017366:	4a24      	ldr	r2, [pc, #144]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 8017368:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801736c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 801736e:	2380      	movs	r3, #128	@ 0x80
 8017370:	617b      	str	r3, [r7, #20]
 8017372:	e024      	b.n	80173be <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8017374:	687b      	ldr	r3, [r7, #4]
 8017376:	685b      	ldr	r3, [r3, #4]
 8017378:	2b02      	cmp	r3, #2
 801737a:	d107      	bne.n	801738c <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 801737c:	4b1e      	ldr	r3, [pc, #120]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 801737e:	681b      	ldr	r3, [r3, #0]
 8017380:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8017384:	2b00      	cmp	r3, #0
 8017386:	d109      	bne.n	801739c <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8017388:	2301      	movs	r3, #1
 801738a:	e132      	b.n	80175f2 <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 801738c:	4b1a      	ldr	r3, [pc, #104]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 801738e:	681b      	ldr	r3, [r3, #0]
 8017390:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017394:	2b00      	cmp	r3, #0
 8017396:	d101      	bne.n	801739c <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8017398:	2301      	movs	r3, #1
 801739a:	e12a      	b.n	80175f2 <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 801739c:	f000 f93a 	bl	8017614 <HAL_RCC_GetSysClockFreq>
 80173a0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80173a2:	693b      	ldr	r3, [r7, #16]
 80173a4:	4a15      	ldr	r2, [pc, #84]	@ (80173fc <HAL_RCC_ClockConfig+0x1e4>)
 80173a6:	4293      	cmp	r3, r2
 80173a8:	d909      	bls.n	80173be <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80173aa:	4b13      	ldr	r3, [pc, #76]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 80173ac:	689b      	ldr	r3, [r3, #8]
 80173ae:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80173b2:	4a11      	ldr	r2, [pc, #68]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 80173b4:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80173b8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80173ba:	2380      	movs	r3, #128	@ 0x80
 80173bc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80173be:	4b0e      	ldr	r3, [pc, #56]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 80173c0:	689b      	ldr	r3, [r3, #8]
 80173c2:	f023 0203 	bic.w	r2, r3, #3
 80173c6:	687b      	ldr	r3, [r7, #4]
 80173c8:	685b      	ldr	r3, [r3, #4]
 80173ca:	490b      	ldr	r1, [pc, #44]	@ (80173f8 <HAL_RCC_ClockConfig+0x1e0>)
 80173cc:	4313      	orrs	r3, r2
 80173ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80173d0:	f7fb fb94 	bl	8012afc <HAL_GetTick>
 80173d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80173d6:	e013      	b.n	8017400 <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80173d8:	f7fb fb90 	bl	8012afc <HAL_GetTick>
 80173dc:	4602      	mov	r2, r0
 80173de:	68fb      	ldr	r3, [r7, #12]
 80173e0:	1ad3      	subs	r3, r2, r3
 80173e2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80173e6:	4293      	cmp	r3, r2
 80173e8:	d90a      	bls.n	8017400 <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 80173ea:	2303      	movs	r3, #3
 80173ec:	e101      	b.n	80175f2 <HAL_RCC_ClockConfig+0x3da>
 80173ee:	bf00      	nop
 80173f0:	0801de24 	.word	0x0801de24
 80173f4:	40022000 	.word	0x40022000
 80173f8:	40021000 	.word	0x40021000
 80173fc:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8017400:	4b7e      	ldr	r3, [pc, #504]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 8017402:	689b      	ldr	r3, [r3, #8]
 8017404:	f003 020c 	and.w	r2, r3, #12
 8017408:	687b      	ldr	r3, [r7, #4]
 801740a:	685b      	ldr	r3, [r3, #4]
 801740c:	009b      	lsls	r3, r3, #2
 801740e:	429a      	cmp	r2, r3
 8017410:	d1e2      	bne.n	80173d8 <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8017412:	687b      	ldr	r3, [r7, #4]
 8017414:	681b      	ldr	r3, [r3, #0]
 8017416:	f003 0302 	and.w	r3, r3, #2
 801741a:	2b00      	cmp	r3, #0
 801741c:	d04c      	beq.n	80174b8 <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 801741e:	687b      	ldr	r3, [r7, #4]
 8017420:	681b      	ldr	r3, [r3, #0]
 8017422:	f003 0304 	and.w	r3, r3, #4
 8017426:	2b00      	cmp	r3, #0
 8017428:	d005      	beq.n	8017436 <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801742a:	4b74      	ldr	r3, [pc, #464]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 801742c:	689b      	ldr	r3, [r3, #8]
 801742e:	4a73      	ldr	r2, [pc, #460]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 8017430:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8017434:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8017436:	687b      	ldr	r3, [r7, #4]
 8017438:	681b      	ldr	r3, [r3, #0]
 801743a:	f003 0308 	and.w	r3, r3, #8
 801743e:	2b00      	cmp	r3, #0
 8017440:	d007      	beq.n	8017452 <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8017442:	4b6e      	ldr	r3, [pc, #440]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 8017444:	689b      	ldr	r3, [r3, #8]
 8017446:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801744a:	4a6c      	ldr	r2, [pc, #432]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 801744c:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8017450:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8017452:	687b      	ldr	r3, [r7, #4]
 8017454:	689b      	ldr	r3, [r3, #8]
 8017456:	2b00      	cmp	r3, #0
 8017458:	d024      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 801745a:	687b      	ldr	r3, [r7, #4]
 801745c:	689b      	ldr	r3, [r3, #8]
 801745e:	2b80      	cmp	r3, #128	@ 0x80
 8017460:	d020      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	689b      	ldr	r3, [r3, #8]
 8017466:	2b90      	cmp	r3, #144	@ 0x90
 8017468:	d01c      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 801746a:	687b      	ldr	r3, [r7, #4]
 801746c:	689b      	ldr	r3, [r3, #8]
 801746e:	2ba0      	cmp	r3, #160	@ 0xa0
 8017470:	d018      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 8017472:	687b      	ldr	r3, [r7, #4]
 8017474:	689b      	ldr	r3, [r3, #8]
 8017476:	2bb0      	cmp	r3, #176	@ 0xb0
 8017478:	d014      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 801747a:	687b      	ldr	r3, [r7, #4]
 801747c:	689b      	ldr	r3, [r3, #8]
 801747e:	2bc0      	cmp	r3, #192	@ 0xc0
 8017480:	d010      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 8017482:	687b      	ldr	r3, [r7, #4]
 8017484:	689b      	ldr	r3, [r3, #8]
 8017486:	2bd0      	cmp	r3, #208	@ 0xd0
 8017488:	d00c      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 801748a:	687b      	ldr	r3, [r7, #4]
 801748c:	689b      	ldr	r3, [r3, #8]
 801748e:	2be0      	cmp	r3, #224	@ 0xe0
 8017490:	d008      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 8017492:	687b      	ldr	r3, [r7, #4]
 8017494:	689b      	ldr	r3, [r3, #8]
 8017496:	2bf0      	cmp	r3, #240	@ 0xf0
 8017498:	d004      	beq.n	80174a4 <HAL_RCC_ClockConfig+0x28c>
 801749a:	f240 317a 	movw	r1, #890	@ 0x37a
 801749e:	4858      	ldr	r0, [pc, #352]	@ (8017600 <HAL_RCC_ClockConfig+0x3e8>)
 80174a0:	f7fb f808 	bl	80124b4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80174a4:	4b55      	ldr	r3, [pc, #340]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 80174a6:	689b      	ldr	r3, [r3, #8]
 80174a8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80174ac:	687b      	ldr	r3, [r7, #4]
 80174ae:	689b      	ldr	r3, [r3, #8]
 80174b0:	4952      	ldr	r1, [pc, #328]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 80174b2:	4313      	orrs	r3, r2
 80174b4:	608b      	str	r3, [r1, #8]
 80174b6:	e008      	b.n	80174ca <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 80174b8:	697b      	ldr	r3, [r7, #20]
 80174ba:	2b80      	cmp	r3, #128	@ 0x80
 80174bc:	d105      	bne.n	80174ca <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80174be:	4b4f      	ldr	r3, [pc, #316]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 80174c0:	689b      	ldr	r3, [r3, #8]
 80174c2:	4a4e      	ldr	r2, [pc, #312]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 80174c4:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80174c8:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80174ca:	4b4e      	ldr	r3, [pc, #312]	@ (8017604 <HAL_RCC_ClockConfig+0x3ec>)
 80174cc:	681b      	ldr	r3, [r3, #0]
 80174ce:	f003 030f 	and.w	r3, r3, #15
 80174d2:	683a      	ldr	r2, [r7, #0]
 80174d4:	429a      	cmp	r2, r3
 80174d6:	d21d      	bcs.n	8017514 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80174d8:	4b4a      	ldr	r3, [pc, #296]	@ (8017604 <HAL_RCC_ClockConfig+0x3ec>)
 80174da:	681b      	ldr	r3, [r3, #0]
 80174dc:	f023 020f 	bic.w	r2, r3, #15
 80174e0:	4948      	ldr	r1, [pc, #288]	@ (8017604 <HAL_RCC_ClockConfig+0x3ec>)
 80174e2:	683b      	ldr	r3, [r7, #0]
 80174e4:	4313      	orrs	r3, r2
 80174e6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80174e8:	f7fb fb08 	bl	8012afc <HAL_GetTick>
 80174ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80174ee:	e00a      	b.n	8017506 <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80174f0:	f7fb fb04 	bl	8012afc <HAL_GetTick>
 80174f4:	4602      	mov	r2, r0
 80174f6:	68fb      	ldr	r3, [r7, #12]
 80174f8:	1ad3      	subs	r3, r2, r3
 80174fa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80174fe:	4293      	cmp	r3, r2
 8017500:	d901      	bls.n	8017506 <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8017502:	2303      	movs	r3, #3
 8017504:	e075      	b.n	80175f2 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8017506:	4b3f      	ldr	r3, [pc, #252]	@ (8017604 <HAL_RCC_ClockConfig+0x3ec>)
 8017508:	681b      	ldr	r3, [r3, #0]
 801750a:	f003 030f 	and.w	r3, r3, #15
 801750e:	683a      	ldr	r2, [r7, #0]
 8017510:	429a      	cmp	r2, r3
 8017512:	d1ed      	bne.n	80174f0 <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8017514:	687b      	ldr	r3, [r7, #4]
 8017516:	681b      	ldr	r3, [r3, #0]
 8017518:	f003 0304 	and.w	r3, r3, #4
 801751c:	2b00      	cmp	r3, #0
 801751e:	d025      	beq.n	801756c <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	68db      	ldr	r3, [r3, #12]
 8017524:	2b00      	cmp	r3, #0
 8017526:	d018      	beq.n	801755a <HAL_RCC_ClockConfig+0x342>
 8017528:	687b      	ldr	r3, [r7, #4]
 801752a:	68db      	ldr	r3, [r3, #12]
 801752c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017530:	d013      	beq.n	801755a <HAL_RCC_ClockConfig+0x342>
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	68db      	ldr	r3, [r3, #12]
 8017536:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801753a:	d00e      	beq.n	801755a <HAL_RCC_ClockConfig+0x342>
 801753c:	687b      	ldr	r3, [r7, #4]
 801753e:	68db      	ldr	r3, [r3, #12]
 8017540:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8017544:	d009      	beq.n	801755a <HAL_RCC_ClockConfig+0x342>
 8017546:	687b      	ldr	r3, [r7, #4]
 8017548:	68db      	ldr	r3, [r3, #12]
 801754a:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801754e:	d004      	beq.n	801755a <HAL_RCC_ClockConfig+0x342>
 8017550:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8017554:	482a      	ldr	r0, [pc, #168]	@ (8017600 <HAL_RCC_ClockConfig+0x3e8>)
 8017556:	f7fa ffad 	bl	80124b4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801755a:	4b28      	ldr	r3, [pc, #160]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 801755c:	689b      	ldr	r3, [r3, #8]
 801755e:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8017562:	687b      	ldr	r3, [r7, #4]
 8017564:	68db      	ldr	r3, [r3, #12]
 8017566:	4925      	ldr	r1, [pc, #148]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 8017568:	4313      	orrs	r3, r2
 801756a:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801756c:	687b      	ldr	r3, [r7, #4]
 801756e:	681b      	ldr	r3, [r3, #0]
 8017570:	f003 0308 	and.w	r3, r3, #8
 8017574:	2b00      	cmp	r3, #0
 8017576:	d026      	beq.n	80175c6 <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8017578:	687b      	ldr	r3, [r7, #4]
 801757a:	691b      	ldr	r3, [r3, #16]
 801757c:	2b00      	cmp	r3, #0
 801757e:	d018      	beq.n	80175b2 <HAL_RCC_ClockConfig+0x39a>
 8017580:	687b      	ldr	r3, [r7, #4]
 8017582:	691b      	ldr	r3, [r3, #16]
 8017584:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017588:	d013      	beq.n	80175b2 <HAL_RCC_ClockConfig+0x39a>
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	691b      	ldr	r3, [r3, #16]
 801758e:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8017592:	d00e      	beq.n	80175b2 <HAL_RCC_ClockConfig+0x39a>
 8017594:	687b      	ldr	r3, [r7, #4]
 8017596:	691b      	ldr	r3, [r3, #16]
 8017598:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 801759c:	d009      	beq.n	80175b2 <HAL_RCC_ClockConfig+0x39a>
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	691b      	ldr	r3, [r3, #16]
 80175a2:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80175a6:	d004      	beq.n	80175b2 <HAL_RCC_ClockConfig+0x39a>
 80175a8:	f240 31a3 	movw	r1, #931	@ 0x3a3
 80175ac:	4814      	ldr	r0, [pc, #80]	@ (8017600 <HAL_RCC_ClockConfig+0x3e8>)
 80175ae:	f7fa ff81 	bl	80124b4 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80175b2:	4b12      	ldr	r3, [pc, #72]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 80175b4:	689b      	ldr	r3, [r3, #8]
 80175b6:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	691b      	ldr	r3, [r3, #16]
 80175be:	00db      	lsls	r3, r3, #3
 80175c0:	490e      	ldr	r1, [pc, #56]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 80175c2:	4313      	orrs	r3, r2
 80175c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80175c6:	f000 f825 	bl	8017614 <HAL_RCC_GetSysClockFreq>
 80175ca:	4602      	mov	r2, r0
 80175cc:	4b0b      	ldr	r3, [pc, #44]	@ (80175fc <HAL_RCC_ClockConfig+0x3e4>)
 80175ce:	689b      	ldr	r3, [r3, #8]
 80175d0:	091b      	lsrs	r3, r3, #4
 80175d2:	f003 030f 	and.w	r3, r3, #15
 80175d6:	490c      	ldr	r1, [pc, #48]	@ (8017608 <HAL_RCC_ClockConfig+0x3f0>)
 80175d8:	5ccb      	ldrb	r3, [r1, r3]
 80175da:	f003 031f 	and.w	r3, r3, #31
 80175de:	fa22 f303 	lsr.w	r3, r2, r3
 80175e2:	4a0a      	ldr	r2, [pc, #40]	@ (801760c <HAL_RCC_ClockConfig+0x3f4>)
 80175e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80175e6:	4b0a      	ldr	r3, [pc, #40]	@ (8017610 <HAL_RCC_ClockConfig+0x3f8>)
 80175e8:	681b      	ldr	r3, [r3, #0]
 80175ea:	4618      	mov	r0, r3
 80175ec:	f7fb f818 	bl	8012620 <HAL_InitTick>
 80175f0:	4603      	mov	r3, r0
}
 80175f2:	4618      	mov	r0, r3
 80175f4:	3718      	adds	r7, #24
 80175f6:	46bd      	mov	sp, r7
 80175f8:	bd80      	pop	{r7, pc}
 80175fa:	bf00      	nop
 80175fc:	40021000 	.word	0x40021000
 8017600:	0801de24 	.word	0x0801de24
 8017604:	40022000 	.word	0x40022000
 8017608:	0801e318 	.word	0x0801e318
 801760c:	20000000 	.word	0x20000000
 8017610:	20000004 	.word	0x20000004

08017614 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8017614:	b480      	push	{r7}
 8017616:	b087      	sub	sp, #28
 8017618:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 801761a:	4b2c      	ldr	r3, [pc, #176]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 801761c:	689b      	ldr	r3, [r3, #8]
 801761e:	f003 030c 	and.w	r3, r3, #12
 8017622:	2b04      	cmp	r3, #4
 8017624:	d102      	bne.n	801762c <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8017626:	4b2a      	ldr	r3, [pc, #168]	@ (80176d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8017628:	613b      	str	r3, [r7, #16]
 801762a:	e047      	b.n	80176bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 801762c:	4b27      	ldr	r3, [pc, #156]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 801762e:	689b      	ldr	r3, [r3, #8]
 8017630:	f003 030c 	and.w	r3, r3, #12
 8017634:	2b08      	cmp	r3, #8
 8017636:	d102      	bne.n	801763e <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8017638:	4b26      	ldr	r3, [pc, #152]	@ (80176d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 801763a:	613b      	str	r3, [r7, #16]
 801763c:	e03e      	b.n	80176bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 801763e:	4b23      	ldr	r3, [pc, #140]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8017640:	689b      	ldr	r3, [r3, #8]
 8017642:	f003 030c 	and.w	r3, r3, #12
 8017646:	2b0c      	cmp	r3, #12
 8017648:	d136      	bne.n	80176b8 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 801764a:	4b20      	ldr	r3, [pc, #128]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 801764c:	68db      	ldr	r3, [r3, #12]
 801764e:	f003 0303 	and.w	r3, r3, #3
 8017652:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8017654:	4b1d      	ldr	r3, [pc, #116]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8017656:	68db      	ldr	r3, [r3, #12]
 8017658:	091b      	lsrs	r3, r3, #4
 801765a:	f003 030f 	and.w	r3, r3, #15
 801765e:	3301      	adds	r3, #1
 8017660:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8017662:	68fb      	ldr	r3, [r7, #12]
 8017664:	2b03      	cmp	r3, #3
 8017666:	d10c      	bne.n	8017682 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017668:	4a1a      	ldr	r2, [pc, #104]	@ (80176d4 <HAL_RCC_GetSysClockFreq+0xc0>)
 801766a:	68bb      	ldr	r3, [r7, #8]
 801766c:	fbb2 f3f3 	udiv	r3, r2, r3
 8017670:	4a16      	ldr	r2, [pc, #88]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 8017672:	68d2      	ldr	r2, [r2, #12]
 8017674:	0a12      	lsrs	r2, r2, #8
 8017676:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801767a:	fb02 f303 	mul.w	r3, r2, r3
 801767e:	617b      	str	r3, [r7, #20]
      break;
 8017680:	e00c      	b.n	801769c <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8017682:	4a13      	ldr	r2, [pc, #76]	@ (80176d0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8017684:	68bb      	ldr	r3, [r7, #8]
 8017686:	fbb2 f3f3 	udiv	r3, r2, r3
 801768a:	4a10      	ldr	r2, [pc, #64]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 801768c:	68d2      	ldr	r2, [r2, #12]
 801768e:	0a12      	lsrs	r2, r2, #8
 8017690:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017694:	fb02 f303 	mul.w	r3, r2, r3
 8017698:	617b      	str	r3, [r7, #20]
      break;
 801769a:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 801769c:	4b0b      	ldr	r3, [pc, #44]	@ (80176cc <HAL_RCC_GetSysClockFreq+0xb8>)
 801769e:	68db      	ldr	r3, [r3, #12]
 80176a0:	0e5b      	lsrs	r3, r3, #25
 80176a2:	f003 0303 	and.w	r3, r3, #3
 80176a6:	3301      	adds	r3, #1
 80176a8:	005b      	lsls	r3, r3, #1
 80176aa:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80176ac:	697a      	ldr	r2, [r7, #20]
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80176b4:	613b      	str	r3, [r7, #16]
 80176b6:	e001      	b.n	80176bc <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80176b8:	2300      	movs	r3, #0
 80176ba:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80176bc:	693b      	ldr	r3, [r7, #16]
}
 80176be:	4618      	mov	r0, r3
 80176c0:	371c      	adds	r7, #28
 80176c2:	46bd      	mov	sp, r7
 80176c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176c8:	4770      	bx	lr
 80176ca:	bf00      	nop
 80176cc:	40021000 	.word	0x40021000
 80176d0:	00f42400 	.word	0x00f42400
 80176d4:	016e3600 	.word	0x016e3600

080176d8 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80176d8:	b480      	push	{r7}
 80176da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80176dc:	4b03      	ldr	r3, [pc, #12]	@ (80176ec <HAL_RCC_GetHCLKFreq+0x14>)
 80176de:	681b      	ldr	r3, [r3, #0]
}
 80176e0:	4618      	mov	r0, r3
 80176e2:	46bd      	mov	sp, r7
 80176e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80176e8:	4770      	bx	lr
 80176ea:	bf00      	nop
 80176ec:	20000000 	.word	0x20000000

080176f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80176f0:	b580      	push	{r7, lr}
 80176f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 80176f4:	f7ff fff0 	bl	80176d8 <HAL_RCC_GetHCLKFreq>
 80176f8:	4602      	mov	r2, r0
 80176fa:	4b06      	ldr	r3, [pc, #24]	@ (8017714 <HAL_RCC_GetPCLK1Freq+0x24>)
 80176fc:	689b      	ldr	r3, [r3, #8]
 80176fe:	0a1b      	lsrs	r3, r3, #8
 8017700:	f003 0307 	and.w	r3, r3, #7
 8017704:	4904      	ldr	r1, [pc, #16]	@ (8017718 <HAL_RCC_GetPCLK1Freq+0x28>)
 8017706:	5ccb      	ldrb	r3, [r1, r3]
 8017708:	f003 031f 	and.w	r3, r3, #31
 801770c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8017710:	4618      	mov	r0, r3
 8017712:	bd80      	pop	{r7, pc}
 8017714:	40021000 	.word	0x40021000
 8017718:	0801e328 	.word	0x0801e328

0801771c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 801771c:	b580      	push	{r7, lr}
 801771e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8017720:	f7ff ffda 	bl	80176d8 <HAL_RCC_GetHCLKFreq>
 8017724:	4602      	mov	r2, r0
 8017726:	4b06      	ldr	r3, [pc, #24]	@ (8017740 <HAL_RCC_GetPCLK2Freq+0x24>)
 8017728:	689b      	ldr	r3, [r3, #8]
 801772a:	0adb      	lsrs	r3, r3, #11
 801772c:	f003 0307 	and.w	r3, r3, #7
 8017730:	4904      	ldr	r1, [pc, #16]	@ (8017744 <HAL_RCC_GetPCLK2Freq+0x28>)
 8017732:	5ccb      	ldrb	r3, [r1, r3]
 8017734:	f003 031f 	and.w	r3, r3, #31
 8017738:	fa22 f303 	lsr.w	r3, r2, r3
}
 801773c:	4618      	mov	r0, r3
 801773e:	bd80      	pop	{r7, pc}
 8017740:	40021000 	.word	0x40021000
 8017744:	0801e328 	.word	0x0801e328

08017748 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8017748:	b580      	push	{r7, lr}
 801774a:	b082      	sub	sp, #8
 801774c:	af00      	add	r7, sp, #0
 801774e:	6078      	str	r0, [r7, #4]
 8017750:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8017752:	687b      	ldr	r3, [r7, #4]
 8017754:	2b00      	cmp	r3, #0
 8017756:	d104      	bne.n	8017762 <HAL_RCC_GetClockConfig+0x1a>
 8017758:	f240 41e3 	movw	r1, #1251	@ 0x4e3
 801775c:	4818      	ldr	r0, [pc, #96]	@ (80177c0 <HAL_RCC_GetClockConfig+0x78>)
 801775e:	f7fa fea9 	bl	80124b4 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8017762:	683b      	ldr	r3, [r7, #0]
 8017764:	2b00      	cmp	r3, #0
 8017766:	d104      	bne.n	8017772 <HAL_RCC_GetClockConfig+0x2a>
 8017768:	f240 41e4 	movw	r1, #1252	@ 0x4e4
 801776c:	4814      	ldr	r0, [pc, #80]	@ (80177c0 <HAL_RCC_GetClockConfig+0x78>)
 801776e:	f7fa fea1 	bl	80124b4 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	220f      	movs	r2, #15
 8017776:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8017778:	4b12      	ldr	r3, [pc, #72]	@ (80177c4 <HAL_RCC_GetClockConfig+0x7c>)
 801777a:	689b      	ldr	r3, [r3, #8]
 801777c:	f003 0203 	and.w	r2, r3, #3
 8017780:	687b      	ldr	r3, [r7, #4]
 8017782:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8017784:	4b0f      	ldr	r3, [pc, #60]	@ (80177c4 <HAL_RCC_GetClockConfig+0x7c>)
 8017786:	689b      	ldr	r3, [r3, #8]
 8017788:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 801778c:	687b      	ldr	r3, [r7, #4]
 801778e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8017790:	4b0c      	ldr	r3, [pc, #48]	@ (80177c4 <HAL_RCC_GetClockConfig+0x7c>)
 8017792:	689b      	ldr	r3, [r3, #8]
 8017794:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 801779c:	4b09      	ldr	r3, [pc, #36]	@ (80177c4 <HAL_RCC_GetClockConfig+0x7c>)
 801779e:	689b      	ldr	r3, [r3, #8]
 80177a0:	08db      	lsrs	r3, r3, #3
 80177a2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80177a6:	687b      	ldr	r3, [r7, #4]
 80177a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80177aa:	4b07      	ldr	r3, [pc, #28]	@ (80177c8 <HAL_RCC_GetClockConfig+0x80>)
 80177ac:	681b      	ldr	r3, [r3, #0]
 80177ae:	f003 020f 	and.w	r2, r3, #15
 80177b2:	683b      	ldr	r3, [r7, #0]
 80177b4:	601a      	str	r2, [r3, #0]
}
 80177b6:	bf00      	nop
 80177b8:	3708      	adds	r7, #8
 80177ba:	46bd      	mov	sp, r7
 80177bc:	bd80      	pop	{r7, pc}
 80177be:	bf00      	nop
 80177c0:	0801de24 	.word	0x0801de24
 80177c4:	40021000 	.word	0x40021000
 80177c8:	40022000 	.word	0x40022000

080177cc <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80177cc:	b480      	push	{r7}
 80177ce:	b087      	sub	sp, #28
 80177d0:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80177d2:	4b1e      	ldr	r3, [pc, #120]	@ (801784c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80177d4:	68db      	ldr	r3, [r3, #12]
 80177d6:	f003 0303 	and.w	r3, r3, #3
 80177da:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80177dc:	4b1b      	ldr	r3, [pc, #108]	@ (801784c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80177de:	68db      	ldr	r3, [r3, #12]
 80177e0:	091b      	lsrs	r3, r3, #4
 80177e2:	f003 030f 	and.w	r3, r3, #15
 80177e6:	3301      	adds	r3, #1
 80177e8:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	2b03      	cmp	r3, #3
 80177ee:	d10c      	bne.n	801780a <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80177f0:	4a17      	ldr	r2, [pc, #92]	@ (8017850 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 80177f2:	68fb      	ldr	r3, [r7, #12]
 80177f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80177f8:	4a14      	ldr	r2, [pc, #80]	@ (801784c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80177fa:	68d2      	ldr	r2, [r2, #12]
 80177fc:	0a12      	lsrs	r2, r2, #8
 80177fe:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8017802:	fb02 f303 	mul.w	r3, r2, r3
 8017806:	617b      	str	r3, [r7, #20]
    break;
 8017808:	e00c      	b.n	8017824 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 801780a:	4a12      	ldr	r2, [pc, #72]	@ (8017854 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 801780c:	68fb      	ldr	r3, [r7, #12]
 801780e:	fbb2 f3f3 	udiv	r3, r2, r3
 8017812:	4a0e      	ldr	r2, [pc, #56]	@ (801784c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8017814:	68d2      	ldr	r2, [r2, #12]
 8017816:	0a12      	lsrs	r2, r2, #8
 8017818:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 801781c:	fb02 f303 	mul.w	r3, r2, r3
 8017820:	617b      	str	r3, [r7, #20]
    break;
 8017822:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8017824:	4b09      	ldr	r3, [pc, #36]	@ (801784c <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8017826:	68db      	ldr	r3, [r3, #12]
 8017828:	0e5b      	lsrs	r3, r3, #25
 801782a:	f003 0303 	and.w	r3, r3, #3
 801782e:	3301      	adds	r3, #1
 8017830:	005b      	lsls	r3, r3, #1
 8017832:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8017834:	697a      	ldr	r2, [r7, #20]
 8017836:	68bb      	ldr	r3, [r7, #8]
 8017838:	fbb2 f3f3 	udiv	r3, r2, r3
 801783c:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 801783e:	687b      	ldr	r3, [r7, #4]
}
 8017840:	4618      	mov	r0, r3
 8017842:	371c      	adds	r7, #28
 8017844:	46bd      	mov	sp, r7
 8017846:	f85d 7b04 	ldr.w	r7, [sp], #4
 801784a:	4770      	bx	lr
 801784c:	40021000 	.word	0x40021000
 8017850:	016e3600 	.word	0x016e3600
 8017854:	00f42400 	.word	0x00f42400

08017858 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8017858:	b580      	push	{r7, lr}
 801785a:	b086      	sub	sp, #24
 801785c:	af00      	add	r7, sp, #0
 801785e:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8017860:	2300      	movs	r3, #0
 8017862:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8017864:	2300      	movs	r3, #0
 8017866:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	681b      	ldr	r3, [r3, #0]
 801786c:	f003 0301 	and.w	r3, r3, #1
 8017870:	2b00      	cmp	r3, #0
 8017872:	d15d      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8017874:	687b      	ldr	r3, [r7, #4]
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	f003 0302 	and.w	r3, r3, #2
 801787c:	2b00      	cmp	r3, #0
 801787e:	d157      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8017880:	687b      	ldr	r3, [r7, #4]
 8017882:	681b      	ldr	r3, [r3, #0]
 8017884:	f003 0304 	and.w	r3, r3, #4
 8017888:	2b00      	cmp	r3, #0
 801788a:	d151      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 801788c:	687b      	ldr	r3, [r7, #4]
 801788e:	681b      	ldr	r3, [r3, #0]
 8017890:	f003 0308 	and.w	r3, r3, #8
 8017894:	2b00      	cmp	r3, #0
 8017896:	d14b      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	681b      	ldr	r3, [r3, #0]
 801789c:	f003 0320 	and.w	r3, r3, #32
 80178a0:	2b00      	cmp	r3, #0
 80178a2:	d145      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	681b      	ldr	r3, [r3, #0]
 80178a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80178ac:	2b00      	cmp	r3, #0
 80178ae:	d13f      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	681b      	ldr	r3, [r3, #0]
 80178b4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80178b8:	2b00      	cmp	r3, #0
 80178ba:	d139      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178bc:	687b      	ldr	r3, [r7, #4]
 80178be:	681b      	ldr	r3, [r3, #0]
 80178c0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80178c4:	2b00      	cmp	r3, #0
 80178c6:	d133      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178c8:	687b      	ldr	r3, [r7, #4]
 80178ca:	681b      	ldr	r3, [r3, #0]
 80178cc:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80178d0:	2b00      	cmp	r3, #0
 80178d2:	d12d      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178d4:	687b      	ldr	r3, [r7, #4]
 80178d6:	681b      	ldr	r3, [r3, #0]
 80178d8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80178dc:	2b00      	cmp	r3, #0
 80178de:	d127      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178e0:	687b      	ldr	r3, [r7, #4]
 80178e2:	681b      	ldr	r3, [r3, #0]
 80178e4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80178e8:	2b00      	cmp	r3, #0
 80178ea:	d121      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178ec:	687b      	ldr	r3, [r7, #4]
 80178ee:	681b      	ldr	r3, [r3, #0]
 80178f0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80178f4:	2b00      	cmp	r3, #0
 80178f6:	d11b      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	681b      	ldr	r3, [r3, #0]
 80178fc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017900:	2b00      	cmp	r3, #0
 8017902:	d115      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8017904:	687b      	ldr	r3, [r7, #4]
 8017906:	681b      	ldr	r3, [r3, #0]
 8017908:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 801790c:	2b00      	cmp	r3, #0
 801790e:	d10f      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8017910:	687b      	ldr	r3, [r7, #4]
 8017912:	681b      	ldr	r3, [r3, #0]
 8017914:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017918:	2b00      	cmp	r3, #0
 801791a:	d109      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 801791c:	687b      	ldr	r3, [r7, #4]
 801791e:	681b      	ldr	r3, [r3, #0]
 8017920:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8017924:	2b00      	cmp	r3, #0
 8017926:	d103      	bne.n	8017930 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8017928:	2183      	movs	r1, #131	@ 0x83
 801792a:	4855      	ldr	r0, [pc, #340]	@ (8017a80 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 801792c:	f7fa fdc2 	bl	80124b4 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8017930:	687b      	ldr	r3, [r7, #4]
 8017932:	681b      	ldr	r3, [r3, #0]
 8017934:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8017938:	2b00      	cmp	r3, #0
 801793a:	f000 80b2 	beq.w	8017aa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 801793e:	2300      	movs	r3, #0
 8017940:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017946:	2b00      	cmp	r3, #0
 8017948:	d012      	beq.n	8017970 <HAL_RCCEx_PeriphCLKConfig+0x118>
 801794a:	687b      	ldr	r3, [r7, #4]
 801794c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801794e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8017952:	d00d      	beq.n	8017970 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8017954:	687b      	ldr	r3, [r7, #4]
 8017956:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017958:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801795c:	d008      	beq.n	8017970 <HAL_RCCEx_PeriphCLKConfig+0x118>
 801795e:	687b      	ldr	r3, [r7, #4]
 8017960:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017962:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8017966:	d003      	beq.n	8017970 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8017968:	218b      	movs	r1, #139	@ 0x8b
 801796a:	4845      	ldr	r0, [pc, #276]	@ (8017a80 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 801796c:	f7fa fda2 	bl	80124b4 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8017970:	4b44      	ldr	r3, [pc, #272]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017972:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017974:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017978:	2b00      	cmp	r3, #0
 801797a:	d10d      	bne.n	8017998 <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 801797c:	4b41      	ldr	r3, [pc, #260]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801797e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017980:	4a40      	ldr	r2, [pc, #256]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017982:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8017986:	6593      	str	r3, [r2, #88]	@ 0x58
 8017988:	4b3e      	ldr	r3, [pc, #248]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 801798a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801798c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8017990:	60bb      	str	r3, [r7, #8]
 8017992:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8017994:	2301      	movs	r3, #1
 8017996:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8017998:	4b3b      	ldr	r3, [pc, #236]	@ (8017a88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	4a3a      	ldr	r2, [pc, #232]	@ (8017a88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 801799e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80179a2:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80179a4:	f7fb f8aa 	bl	8012afc <HAL_GetTick>
 80179a8:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80179aa:	e009      	b.n	80179c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80179ac:	f7fb f8a6 	bl	8012afc <HAL_GetTick>
 80179b0:	4602      	mov	r2, r0
 80179b2:	68fb      	ldr	r3, [r7, #12]
 80179b4:	1ad3      	subs	r3, r2, r3
 80179b6:	2b02      	cmp	r3, #2
 80179b8:	d902      	bls.n	80179c0 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 80179ba:	2303      	movs	r3, #3
 80179bc:	74fb      	strb	r3, [r7, #19]
        break;
 80179be:	e005      	b.n	80179cc <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80179c0:	4b31      	ldr	r3, [pc, #196]	@ (8017a88 <HAL_RCCEx_PeriphCLKConfig+0x230>)
 80179c2:	681b      	ldr	r3, [r3, #0]
 80179c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80179c8:	2b00      	cmp	r3, #0
 80179ca:	d0ef      	beq.n	80179ac <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 80179cc:	7cfb      	ldrb	r3, [r7, #19]
 80179ce:	2b00      	cmp	r3, #0
 80179d0:	d15c      	bne.n	8017a8c <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80179d2:	4b2c      	ldr	r3, [pc, #176]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80179d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80179d8:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80179dc:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 80179de:	697b      	ldr	r3, [r7, #20]
 80179e0:	2b00      	cmp	r3, #0
 80179e2:	d01e      	beq.n	8017a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 80179e4:	687b      	ldr	r3, [r7, #4]
 80179e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80179e8:	697a      	ldr	r2, [r7, #20]
 80179ea:	429a      	cmp	r2, r3
 80179ec:	d019      	beq.n	8017a22 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80179ee:	4b25      	ldr	r3, [pc, #148]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80179f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80179f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80179f8:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80179fa:	4b22      	ldr	r3, [pc, #136]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80179fc:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a00:	4a20      	ldr	r2, [pc, #128]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017a02:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017a06:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8017a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017a0c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a10:	4a1c      	ldr	r2, [pc, #112]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017a12:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8017a16:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8017a1a:	4a1a      	ldr	r2, [pc, #104]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017a1c:	697b      	ldr	r3, [r7, #20]
 8017a1e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8017a22:	697b      	ldr	r3, [r7, #20]
 8017a24:	f003 0301 	and.w	r3, r3, #1
 8017a28:	2b00      	cmp	r3, #0
 8017a2a:	d016      	beq.n	8017a5a <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8017a2c:	f7fb f866 	bl	8012afc <HAL_GetTick>
 8017a30:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017a32:	e00b      	b.n	8017a4c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8017a34:	f7fb f862 	bl	8012afc <HAL_GetTick>
 8017a38:	4602      	mov	r2, r0
 8017a3a:	68fb      	ldr	r3, [r7, #12]
 8017a3c:	1ad3      	subs	r3, r2, r3
 8017a3e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8017a42:	4293      	cmp	r3, r2
 8017a44:	d902      	bls.n	8017a4c <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 8017a46:	2303      	movs	r3, #3
 8017a48:	74fb      	strb	r3, [r7, #19]
            break;
 8017a4a:	e006      	b.n	8017a5a <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8017a4c:	4b0d      	ldr	r3, [pc, #52]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017a4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a52:	f003 0302 	and.w	r3, r3, #2
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d0ec      	beq.n	8017a34 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 8017a5a:	7cfb      	ldrb	r3, [r7, #19]
 8017a5c:	2b00      	cmp	r3, #0
 8017a5e:	d10b      	bne.n	8017a78 <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8017a60:	4b08      	ldr	r3, [pc, #32]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017a62:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017a66:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8017a6a:	687b      	ldr	r3, [r7, #4]
 8017a6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8017a6e:	4905      	ldr	r1, [pc, #20]	@ (8017a84 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8017a70:	4313      	orrs	r3, r2
 8017a72:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8017a76:	e00b      	b.n	8017a90 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8017a78:	7cfb      	ldrb	r3, [r7, #19]
 8017a7a:	74bb      	strb	r3, [r7, #18]
 8017a7c:	e008      	b.n	8017a90 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8017a7e:	bf00      	nop
 8017a80:	0801de5c 	.word	0x0801de5c
 8017a84:	40021000 	.word	0x40021000
 8017a88:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8017a8c:	7cfb      	ldrb	r3, [r7, #19]
 8017a8e:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8017a90:	7c7b      	ldrb	r3, [r7, #17]
 8017a92:	2b01      	cmp	r3, #1
 8017a94:	d105      	bne.n	8017aa2 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8017a96:	4b98      	ldr	r3, [pc, #608]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017a98:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017a9a:	4a97      	ldr	r2, [pc, #604]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017a9c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017aa0:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8017aa2:	687b      	ldr	r3, [r7, #4]
 8017aa4:	681b      	ldr	r3, [r3, #0]
 8017aa6:	f003 0301 	and.w	r3, r3, #1
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d01e      	beq.n	8017aec <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8017aae:	687b      	ldr	r3, [r7, #4]
 8017ab0:	685b      	ldr	r3, [r3, #4]
 8017ab2:	2b00      	cmp	r3, #0
 8017ab4:	d00f      	beq.n	8017ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	685b      	ldr	r3, [r3, #4]
 8017aba:	2b01      	cmp	r3, #1
 8017abc:	d00b      	beq.n	8017ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	685b      	ldr	r3, [r3, #4]
 8017ac2:	2b03      	cmp	r3, #3
 8017ac4:	d007      	beq.n	8017ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	685b      	ldr	r3, [r3, #4]
 8017aca:	2b02      	cmp	r3, #2
 8017acc:	d003      	beq.n	8017ad6 <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8017ace:	21e0      	movs	r1, #224	@ 0xe0
 8017ad0:	488a      	ldr	r0, [pc, #552]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017ad2:	f7fa fcef 	bl	80124b4 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8017ad6:	4b88      	ldr	r3, [pc, #544]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017ad8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017adc:	f023 0203 	bic.w	r2, r3, #3
 8017ae0:	687b      	ldr	r3, [r7, #4]
 8017ae2:	685b      	ldr	r3, [r3, #4]
 8017ae4:	4984      	ldr	r1, [pc, #528]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017ae6:	4313      	orrs	r3, r2
 8017ae8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8017aec:	687b      	ldr	r3, [r7, #4]
 8017aee:	681b      	ldr	r3, [r3, #0]
 8017af0:	f003 0302 	and.w	r3, r3, #2
 8017af4:	2b00      	cmp	r3, #0
 8017af6:	d01e      	beq.n	8017b36 <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8017af8:	687b      	ldr	r3, [r7, #4]
 8017afa:	689b      	ldr	r3, [r3, #8]
 8017afc:	2b00      	cmp	r3, #0
 8017afe:	d00f      	beq.n	8017b20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8017b00:	687b      	ldr	r3, [r7, #4]
 8017b02:	689b      	ldr	r3, [r3, #8]
 8017b04:	2b04      	cmp	r3, #4
 8017b06:	d00b      	beq.n	8017b20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8017b08:	687b      	ldr	r3, [r7, #4]
 8017b0a:	689b      	ldr	r3, [r3, #8]
 8017b0c:	2b0c      	cmp	r3, #12
 8017b0e:	d007      	beq.n	8017b20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	689b      	ldr	r3, [r3, #8]
 8017b14:	2b08      	cmp	r3, #8
 8017b16:	d003      	beq.n	8017b20 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8017b18:	21ea      	movs	r1, #234	@ 0xea
 8017b1a:	4878      	ldr	r0, [pc, #480]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017b1c:	f7fa fcca 	bl	80124b4 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8017b20:	4b75      	ldr	r3, [pc, #468]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017b22:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b26:	f023 020c 	bic.w	r2, r3, #12
 8017b2a:	687b      	ldr	r3, [r7, #4]
 8017b2c:	689b      	ldr	r3, [r3, #8]
 8017b2e:	4972      	ldr	r1, [pc, #456]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017b30:	4313      	orrs	r3, r2
 8017b32:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8017b36:	687b      	ldr	r3, [r7, #4]
 8017b38:	681b      	ldr	r3, [r3, #0]
 8017b3a:	f003 0304 	and.w	r3, r3, #4
 8017b3e:	2b00      	cmp	r3, #0
 8017b40:	d01e      	beq.n	8017b80 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8017b42:	687b      	ldr	r3, [r7, #4]
 8017b44:	68db      	ldr	r3, [r3, #12]
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d00f      	beq.n	8017b6a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	68db      	ldr	r3, [r3, #12]
 8017b4e:	2b10      	cmp	r3, #16
 8017b50:	d00b      	beq.n	8017b6a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8017b52:	687b      	ldr	r3, [r7, #4]
 8017b54:	68db      	ldr	r3, [r3, #12]
 8017b56:	2b30      	cmp	r3, #48	@ 0x30
 8017b58:	d007      	beq.n	8017b6a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8017b5a:	687b      	ldr	r3, [r7, #4]
 8017b5c:	68db      	ldr	r3, [r3, #12]
 8017b5e:	2b20      	cmp	r3, #32
 8017b60:	d003      	beq.n	8017b6a <HAL_RCCEx_PeriphCLKConfig+0x312>
 8017b62:	21f4      	movs	r1, #244	@ 0xf4
 8017b64:	4865      	ldr	r0, [pc, #404]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017b66:	f7fa fca5 	bl	80124b4 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8017b6a:	4b63      	ldr	r3, [pc, #396]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017b6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017b70:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	68db      	ldr	r3, [r3, #12]
 8017b78:	495f      	ldr	r1, [pc, #380]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017b7a:	4313      	orrs	r3, r2
 8017b7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8017b80:	687b      	ldr	r3, [r7, #4]
 8017b82:	681b      	ldr	r3, [r3, #0]
 8017b84:	f003 0308 	and.w	r3, r3, #8
 8017b88:	2b00      	cmp	r3, #0
 8017b8a:	d01e      	beq.n	8017bca <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8017b8c:	687b      	ldr	r3, [r7, #4]
 8017b8e:	691b      	ldr	r3, [r3, #16]
 8017b90:	2b00      	cmp	r3, #0
 8017b92:	d00f      	beq.n	8017bb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8017b94:	687b      	ldr	r3, [r7, #4]
 8017b96:	691b      	ldr	r3, [r3, #16]
 8017b98:	2b40      	cmp	r3, #64	@ 0x40
 8017b9a:	d00b      	beq.n	8017bb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8017b9c:	687b      	ldr	r3, [r7, #4]
 8017b9e:	691b      	ldr	r3, [r3, #16]
 8017ba0:	2bc0      	cmp	r3, #192	@ 0xc0
 8017ba2:	d007      	beq.n	8017bb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8017ba4:	687b      	ldr	r3, [r7, #4]
 8017ba6:	691b      	ldr	r3, [r3, #16]
 8017ba8:	2b80      	cmp	r3, #128	@ 0x80
 8017baa:	d003      	beq.n	8017bb4 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8017bac:	21ff      	movs	r1, #255	@ 0xff
 8017bae:	4853      	ldr	r0, [pc, #332]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017bb0:	f7fa fc80 	bl	80124b4 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8017bb4:	4b50      	ldr	r3, [pc, #320]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017bb6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017bba:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8017bbe:	687b      	ldr	r3, [r7, #4]
 8017bc0:	691b      	ldr	r3, [r3, #16]
 8017bc2:	494d      	ldr	r1, [pc, #308]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017bc4:	4313      	orrs	r3, r2
 8017bc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8017bca:	687b      	ldr	r3, [r7, #4]
 8017bcc:	681b      	ldr	r3, [r3, #0]
 8017bce:	f003 0320 	and.w	r3, r3, #32
 8017bd2:	2b00      	cmp	r3, #0
 8017bd4:	d022      	beq.n	8017c1c <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8017bd6:	687b      	ldr	r3, [r7, #4]
 8017bd8:	695b      	ldr	r3, [r3, #20]
 8017bda:	2b00      	cmp	r3, #0
 8017bdc:	d013      	beq.n	8017c06 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8017bde:	687b      	ldr	r3, [r7, #4]
 8017be0:	695b      	ldr	r3, [r3, #20]
 8017be2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017be6:	d00e      	beq.n	8017c06 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8017be8:	687b      	ldr	r3, [r7, #4]
 8017bea:	695b      	ldr	r3, [r3, #20]
 8017bec:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8017bf0:	d009      	beq.n	8017c06 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8017bf2:	687b      	ldr	r3, [r7, #4]
 8017bf4:	695b      	ldr	r3, [r3, #20]
 8017bf6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8017bfa:	d004      	beq.n	8017c06 <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8017bfc:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8017c00:	483e      	ldr	r0, [pc, #248]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017c02:	f7fa fc57 	bl	80124b4 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8017c06:	4b3c      	ldr	r3, [pc, #240]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017c08:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017c0c:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8017c10:	687b      	ldr	r3, [r7, #4]
 8017c12:	695b      	ldr	r3, [r3, #20]
 8017c14:	4938      	ldr	r1, [pc, #224]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017c16:	4313      	orrs	r3, r2
 8017c18:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8017c1c:	687b      	ldr	r3, [r7, #4]
 8017c1e:	681b      	ldr	r3, [r3, #0]
 8017c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	d01d      	beq.n	8017c64 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8017c28:	687b      	ldr	r3, [r7, #4]
 8017c2a:	699b      	ldr	r3, [r3, #24]
 8017c2c:	2b00      	cmp	r3, #0
 8017c2e:	d00e      	beq.n	8017c4e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	699b      	ldr	r3, [r3, #24]
 8017c34:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017c38:	d009      	beq.n	8017c4e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8017c3a:	687b      	ldr	r3, [r7, #4]
 8017c3c:	699b      	ldr	r3, [r3, #24]
 8017c3e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8017c42:	d004      	beq.n	8017c4e <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8017c44:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8017c48:	482c      	ldr	r0, [pc, #176]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017c4a:	f7fa fc33 	bl	80124b4 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8017c4e:	4b2a      	ldr	r3, [pc, #168]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017c54:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8017c58:	687b      	ldr	r3, [r7, #4]
 8017c5a:	699b      	ldr	r3, [r3, #24]
 8017c5c:	4926      	ldr	r1, [pc, #152]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017c5e:	4313      	orrs	r3, r2
 8017c60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8017c64:	687b      	ldr	r3, [r7, #4]
 8017c66:	681b      	ldr	r3, [r3, #0]
 8017c68:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8017c6c:	2b00      	cmp	r3, #0
 8017c6e:	d01d      	beq.n	8017cac <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	69db      	ldr	r3, [r3, #28]
 8017c74:	2b00      	cmp	r3, #0
 8017c76:	d00e      	beq.n	8017c96 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8017c78:	687b      	ldr	r3, [r7, #4]
 8017c7a:	69db      	ldr	r3, [r3, #28]
 8017c7c:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8017c80:	d009      	beq.n	8017c96 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8017c82:	687b      	ldr	r3, [r7, #4]
 8017c84:	69db      	ldr	r3, [r3, #28]
 8017c86:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8017c8a:	d004      	beq.n	8017c96 <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8017c8c:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8017c90:	481a      	ldr	r0, [pc, #104]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017c92:	f7fa fc0f 	bl	80124b4 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8017c96:	4b18      	ldr	r3, [pc, #96]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017c98:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017c9c:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	69db      	ldr	r3, [r3, #28]
 8017ca4:	4914      	ldr	r1, [pc, #80]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017ca6:	4313      	orrs	r3, r2
 8017ca8:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	681b      	ldr	r3, [r3, #0]
 8017cb0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017cb4:	2b00      	cmp	r3, #0
 8017cb6:	d023      	beq.n	8017d00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8017cb8:	687b      	ldr	r3, [r7, #4]
 8017cba:	6a1b      	ldr	r3, [r3, #32]
 8017cbc:	2b00      	cmp	r3, #0
 8017cbe:	d00e      	beq.n	8017cde <HAL_RCCEx_PeriphCLKConfig+0x486>
 8017cc0:	687b      	ldr	r3, [r7, #4]
 8017cc2:	6a1b      	ldr	r3, [r3, #32]
 8017cc4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8017cc8:	d009      	beq.n	8017cde <HAL_RCCEx_PeriphCLKConfig+0x486>
 8017cca:	687b      	ldr	r3, [r7, #4]
 8017ccc:	6a1b      	ldr	r3, [r3, #32]
 8017cce:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8017cd2:	d004      	beq.n	8017cde <HAL_RCCEx_PeriphCLKConfig+0x486>
 8017cd4:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8017cd8:	4808      	ldr	r0, [pc, #32]	@ (8017cfc <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8017cda:	f7fa fbeb 	bl	80124b4 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8017cde:	4b06      	ldr	r3, [pc, #24]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017ce0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017ce4:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8017ce8:	687b      	ldr	r3, [r7, #4]
 8017cea:	6a1b      	ldr	r3, [r3, #32]
 8017cec:	4902      	ldr	r1, [pc, #8]	@ (8017cf8 <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8017cee:	4313      	orrs	r3, r2
 8017cf0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8017cf4:	e004      	b.n	8017d00 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8017cf6:	bf00      	nop
 8017cf8:	40021000 	.word	0x40021000
 8017cfc:	0801de5c 	.word	0x0801de5c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8017d00:	687b      	ldr	r3, [r7, #4]
 8017d02:	681b      	ldr	r3, [r3, #0]
 8017d04:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8017d08:	2b00      	cmp	r3, #0
 8017d0a:	d022      	beq.n	8017d52 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d013      	beq.n	8017d3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d18:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8017d1c:	d00e      	beq.n	8017d3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8017d1e:	687b      	ldr	r3, [r7, #4]
 8017d20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d22:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8017d26:	d009      	beq.n	8017d3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8017d28:	687b      	ldr	r3, [r7, #4]
 8017d2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d2c:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8017d30:	d004      	beq.n	8017d3c <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8017d32:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8017d36:	4896      	ldr	r0, [pc, #600]	@ (8017f90 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8017d38:	f7fa fbbc 	bl	80124b4 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8017d3c:	4b95      	ldr	r3, [pc, #596]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017d3e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d42:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8017d46:	687b      	ldr	r3, [r7, #4]
 8017d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017d4a:	4992      	ldr	r1, [pc, #584]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017d4c:	4313      	orrs	r3, r2
 8017d4e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8017d52:	687b      	ldr	r3, [r7, #4]
 8017d54:	681b      	ldr	r3, [r3, #0]
 8017d56:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8017d5a:	2b00      	cmp	r3, #0
 8017d5c:	d02d      	beq.n	8017dba <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8017d5e:	687b      	ldr	r3, [r7, #4]
 8017d60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d62:	2b00      	cmp	r3, #0
 8017d64:	d013      	beq.n	8017d8e <HAL_RCCEx_PeriphCLKConfig+0x536>
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d6a:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017d6e:	d00e      	beq.n	8017d8e <HAL_RCCEx_PeriphCLKConfig+0x536>
 8017d70:	687b      	ldr	r3, [r7, #4]
 8017d72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d74:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8017d78:	d009      	beq.n	8017d8e <HAL_RCCEx_PeriphCLKConfig+0x536>
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d7e:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8017d82:	d004      	beq.n	8017d8e <HAL_RCCEx_PeriphCLKConfig+0x536>
 8017d84:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 8017d88:	4881      	ldr	r0, [pc, #516]	@ (8017f90 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8017d8a:	f7fa fb93 	bl	80124b4 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8017d8e:	4b81      	ldr	r3, [pc, #516]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017d90:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017d94:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 8017d98:	687b      	ldr	r3, [r7, #4]
 8017d9a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017d9c:	497d      	ldr	r1, [pc, #500]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017d9e:	4313      	orrs	r3, r2
 8017da0:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8017da4:	687b      	ldr	r3, [r7, #4]
 8017da6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017da8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8017dac:	d105      	bne.n	8017dba <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017dae:	4b79      	ldr	r3, [pc, #484]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017db0:	68db      	ldr	r3, [r3, #12]
 8017db2:	4a78      	ldr	r2, [pc, #480]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017db4:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017db8:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8017dba:	687b      	ldr	r3, [r7, #4]
 8017dbc:	681b      	ldr	r3, [r3, #0]
 8017dbe:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8017dc2:	2b00      	cmp	r3, #0
 8017dc4:	d02d      	beq.n	8017e22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 8017dc6:	687b      	ldr	r3, [r7, #4]
 8017dc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	d013      	beq.n	8017df6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017dd2:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017dd6:	d00e      	beq.n	8017df6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017ddc:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8017de0:	d009      	beq.n	8017df6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017de6:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 8017dea:	d004      	beq.n	8017df6 <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8017dec:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8017df0:	4867      	ldr	r0, [pc, #412]	@ (8017f90 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8017df2:	f7fa fb5f 	bl	80124b4 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8017df6:	4b67      	ldr	r3, [pc, #412]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017df8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017dfc:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8017e00:	687b      	ldr	r3, [r7, #4]
 8017e02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e04:	4963      	ldr	r1, [pc, #396]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017e06:	4313      	orrs	r3, r2
 8017e08:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8017e0c:	687b      	ldr	r3, [r7, #4]
 8017e0e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8017e10:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8017e14:	d105      	bne.n	8017e22 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017e16:	4b5f      	ldr	r3, [pc, #380]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017e18:	68db      	ldr	r3, [r3, #12]
 8017e1a:	4a5e      	ldr	r2, [pc, #376]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017e1c:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017e20:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8017e22:	687b      	ldr	r3, [r7, #4]
 8017e24:	681b      	ldr	r3, [r3, #0]
 8017e26:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8017e2a:	2b00      	cmp	r3, #0
 8017e2c:	d028      	beq.n	8017e80 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e32:	2b00      	cmp	r3, #0
 8017e34:	d00e      	beq.n	8017e54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8017e36:	687b      	ldr	r3, [r7, #4]
 8017e38:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e3a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017e3e:	d009      	beq.n	8017e54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8017e40:	687b      	ldr	r3, [r7, #4]
 8017e42:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e44:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8017e48:	d004      	beq.n	8017e54 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8017e4a:	f240 1179 	movw	r1, #377	@ 0x179
 8017e4e:	4850      	ldr	r0, [pc, #320]	@ (8017f90 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8017e50:	f7fa fb30 	bl	80124b4 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8017e54:	4b4f      	ldr	r3, [pc, #316]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017e56:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017e5a:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8017e5e:	687b      	ldr	r3, [r7, #4]
 8017e60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e62:	494c      	ldr	r1, [pc, #304]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017e64:	4313      	orrs	r3, r2
 8017e66:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8017e6a:	687b      	ldr	r3, [r7, #4]
 8017e6c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8017e6e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8017e72:	d105      	bne.n	8017e80 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017e74:	4b47      	ldr	r3, [pc, #284]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017e76:	68db      	ldr	r3, [r3, #12]
 8017e78:	4a46      	ldr	r2, [pc, #280]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017e7a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017e7e:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8017e80:	687b      	ldr	r3, [r7, #4]
 8017e82:	681b      	ldr	r3, [r3, #0]
 8017e84:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d023      	beq.n	8017ed4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8017e8c:	687b      	ldr	r3, [r7, #4]
 8017e8e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017e90:	2b00      	cmp	r3, #0
 8017e92:	d009      	beq.n	8017ea8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017e98:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017e9c:	d004      	beq.n	8017ea8 <HAL_RCCEx_PeriphCLKConfig+0x650>
 8017e9e:	f240 118b 	movw	r1, #395	@ 0x18b
 8017ea2:	483b      	ldr	r0, [pc, #236]	@ (8017f90 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8017ea4:	f7fa fb06 	bl	80124b4 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8017ea8:	4b3a      	ldr	r3, [pc, #232]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017eaa:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017eae:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017eb6:	4937      	ldr	r1, [pc, #220]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017eb8:	4313      	orrs	r3, r2
 8017eba:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8017ec2:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017ec6:	d105      	bne.n	8017ed4 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017ec8:	4b32      	ldr	r3, [pc, #200]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017eca:	68db      	ldr	r3, [r3, #12]
 8017ecc:	4a31      	ldr	r2, [pc, #196]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017ece:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017ed2:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8017ed4:	687b      	ldr	r3, [r7, #4]
 8017ed6:	681b      	ldr	r3, [r3, #0]
 8017ed8:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8017edc:	2b00      	cmp	r3, #0
 8017ede:	d023      	beq.n	8017f28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8017ee0:	687b      	ldr	r3, [r7, #4]
 8017ee2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017ee4:	2b00      	cmp	r3, #0
 8017ee6:	d009      	beq.n	8017efc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8017ee8:	687b      	ldr	r3, [r7, #4]
 8017eea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017eec:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017ef0:	d004      	beq.n	8017efc <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8017ef2:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 8017ef6:	4826      	ldr	r0, [pc, #152]	@ (8017f90 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8017ef8:	f7fa fadc 	bl	80124b4 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8017efc:	4b25      	ldr	r3, [pc, #148]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017efe:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f02:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8017f06:	687b      	ldr	r3, [r7, #4]
 8017f08:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f0a:	4922      	ldr	r1, [pc, #136]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017f0c:	4313      	orrs	r3, r2
 8017f0e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8017f12:	687b      	ldr	r3, [r7, #4]
 8017f14:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8017f16:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8017f1a:	d105      	bne.n	8017f28 <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8017f1c:	4b1d      	ldr	r3, [pc, #116]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017f1e:	68db      	ldr	r3, [r3, #12]
 8017f20:	4a1c      	ldr	r2, [pc, #112]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017f22:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8017f26:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	681b      	ldr	r3, [r3, #0]
 8017f2c:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	d028      	beq.n	8017f86 <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8017f34:	687b      	ldr	r3, [r7, #4]
 8017f36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d00e      	beq.n	8017f5a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8017f3c:	687b      	ldr	r3, [r7, #4]
 8017f3e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f40:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017f44:	d009      	beq.n	8017f5a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8017f46:	687b      	ldr	r3, [r7, #4]
 8017f48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f4a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017f4e:	d004      	beq.n	8017f5a <HAL_RCCEx_PeriphCLKConfig+0x702>
 8017f50:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8017f54:	480e      	ldr	r0, [pc, #56]	@ (8017f90 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8017f56:	f7fa faad 	bl	80124b4 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8017f5a:	4b0e      	ldr	r3, [pc, #56]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017f5c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8017f60:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8017f64:	687b      	ldr	r3, [r7, #4]
 8017f66:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f68:	490a      	ldr	r1, [pc, #40]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017f6a:	4313      	orrs	r3, r2
 8017f6c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8017f74:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8017f78:	d105      	bne.n	8017f86 <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8017f7a:	4b06      	ldr	r3, [pc, #24]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017f7c:	68db      	ldr	r3, [r3, #12]
 8017f7e:	4a05      	ldr	r2, [pc, #20]	@ (8017f94 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8017f80:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8017f84:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8017f86:	7cbb      	ldrb	r3, [r7, #18]
}
 8017f88:	4618      	mov	r0, r3
 8017f8a:	3718      	adds	r7, #24
 8017f8c:	46bd      	mov	sp, r7
 8017f8e:	bd80      	pop	{r7, pc}
 8017f90:	0801de5c 	.word	0x0801de5c
 8017f94:	40021000 	.word	0x40021000

08017f98 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8017f98:	b580      	push	{r7, lr}
 8017f9a:	b084      	sub	sp, #16
 8017f9c:	af00      	add	r7, sp, #0
 8017f9e:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8017fa0:	687b      	ldr	r3, [r7, #4]
 8017fa2:	2b00      	cmp	r3, #0
 8017fa4:	d101      	bne.n	8017faa <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8017fa6:	2301      	movs	r3, #1
 8017fa8:	e1e5      	b.n	8018376 <HAL_SPI_Init+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 8017faa:	687b      	ldr	r3, [r7, #4]
 8017fac:	681b      	ldr	r3, [r3, #0]
 8017fae:	4a7b      	ldr	r2, [pc, #492]	@ (801819c <HAL_SPI_Init+0x204>)
 8017fb0:	4293      	cmp	r3, r2
 8017fb2:	d00e      	beq.n	8017fd2 <HAL_SPI_Init+0x3a>
 8017fb4:	687b      	ldr	r3, [r7, #4]
 8017fb6:	681b      	ldr	r3, [r3, #0]
 8017fb8:	4a79      	ldr	r2, [pc, #484]	@ (80181a0 <HAL_SPI_Init+0x208>)
 8017fba:	4293      	cmp	r3, r2
 8017fbc:	d009      	beq.n	8017fd2 <HAL_SPI_Init+0x3a>
 8017fbe:	687b      	ldr	r3, [r7, #4]
 8017fc0:	681b      	ldr	r3, [r3, #0]
 8017fc2:	4a78      	ldr	r2, [pc, #480]	@ (80181a4 <HAL_SPI_Init+0x20c>)
 8017fc4:	4293      	cmp	r3, r2
 8017fc6:	d004      	beq.n	8017fd2 <HAL_SPI_Init+0x3a>
 8017fc8:	f240 1145 	movw	r1, #325	@ 0x145
 8017fcc:	4876      	ldr	r0, [pc, #472]	@ (80181a8 <HAL_SPI_Init+0x210>)
 8017fce:	f7fa fa71 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8017fd2:	687b      	ldr	r3, [r7, #4]
 8017fd4:	685b      	ldr	r3, [r3, #4]
 8017fd6:	2b00      	cmp	r3, #0
 8017fd8:	d009      	beq.n	8017fee <HAL_SPI_Init+0x56>
 8017fda:	687b      	ldr	r3, [r7, #4]
 8017fdc:	685b      	ldr	r3, [r3, #4]
 8017fde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8017fe2:	d004      	beq.n	8017fee <HAL_SPI_Init+0x56>
 8017fe4:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 8017fe8:	486f      	ldr	r0, [pc, #444]	@ (80181a8 <HAL_SPI_Init+0x210>)
 8017fea:	f7fa fa63 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 8017fee:	687b      	ldr	r3, [r7, #4]
 8017ff0:	689b      	ldr	r3, [r3, #8]
 8017ff2:	2b00      	cmp	r3, #0
 8017ff4:	d00e      	beq.n	8018014 <HAL_SPI_Init+0x7c>
 8017ff6:	687b      	ldr	r3, [r7, #4]
 8017ff8:	689b      	ldr	r3, [r3, #8]
 8017ffa:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8017ffe:	d009      	beq.n	8018014 <HAL_SPI_Init+0x7c>
 8018000:	687b      	ldr	r3, [r7, #4]
 8018002:	689b      	ldr	r3, [r3, #8]
 8018004:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8018008:	d004      	beq.n	8018014 <HAL_SPI_Init+0x7c>
 801800a:	f240 1147 	movw	r1, #327	@ 0x147
 801800e:	4866      	ldr	r0, [pc, #408]	@ (80181a8 <HAL_SPI_Init+0x210>)
 8018010:	f7fa fa50 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	68db      	ldr	r3, [r3, #12]
 8018018:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 801801c:	d040      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 801801e:	687b      	ldr	r3, [r7, #4]
 8018020:	68db      	ldr	r3, [r3, #12]
 8018022:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 8018026:	d03b      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018028:	687b      	ldr	r3, [r7, #4]
 801802a:	68db      	ldr	r3, [r3, #12]
 801802c:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 8018030:	d036      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018032:	687b      	ldr	r3, [r7, #4]
 8018034:	68db      	ldr	r3, [r3, #12]
 8018036:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801803a:	d031      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	68db      	ldr	r3, [r3, #12]
 8018040:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 8018044:	d02c      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018046:	687b      	ldr	r3, [r7, #4]
 8018048:	68db      	ldr	r3, [r3, #12]
 801804a:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 801804e:	d027      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018050:	687b      	ldr	r3, [r7, #4]
 8018052:	68db      	ldr	r3, [r3, #12]
 8018054:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8018058:	d022      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 801805a:	687b      	ldr	r3, [r7, #4]
 801805c:	68db      	ldr	r3, [r3, #12]
 801805e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8018062:	d01d      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018064:	687b      	ldr	r3, [r7, #4]
 8018066:	68db      	ldr	r3, [r3, #12]
 8018068:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801806c:	d018      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 801806e:	687b      	ldr	r3, [r7, #4]
 8018070:	68db      	ldr	r3, [r3, #12]
 8018072:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8018076:	d013      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018078:	687b      	ldr	r3, [r7, #4]
 801807a:	68db      	ldr	r3, [r3, #12]
 801807c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8018080:	d00e      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018082:	687b      	ldr	r3, [r7, #4]
 8018084:	68db      	ldr	r3, [r3, #12]
 8018086:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801808a:	d009      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 801808c:	687b      	ldr	r3, [r7, #4]
 801808e:	68db      	ldr	r3, [r3, #12]
 8018090:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8018094:	d004      	beq.n	80180a0 <HAL_SPI_Init+0x108>
 8018096:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 801809a:	4843      	ldr	r0, [pc, #268]	@ (80181a8 <HAL_SPI_Init+0x210>)
 801809c:	f7fa fa0a 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 80180a0:	687b      	ldr	r3, [r7, #4]
 80180a2:	699b      	ldr	r3, [r3, #24]
 80180a4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80180a8:	d00d      	beq.n	80180c6 <HAL_SPI_Init+0x12e>
 80180aa:	687b      	ldr	r3, [r7, #4]
 80180ac:	699b      	ldr	r3, [r3, #24]
 80180ae:	2b00      	cmp	r3, #0
 80180b0:	d009      	beq.n	80180c6 <HAL_SPI_Init+0x12e>
 80180b2:	687b      	ldr	r3, [r7, #4]
 80180b4:	699b      	ldr	r3, [r3, #24]
 80180b6:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80180ba:	d004      	beq.n	80180c6 <HAL_SPI_Init+0x12e>
 80180bc:	f240 1149 	movw	r1, #329	@ 0x149
 80180c0:	4839      	ldr	r0, [pc, #228]	@ (80181a8 <HAL_SPI_Init+0x210>)
 80180c2:	f7fa f9f7 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 80180c6:	687b      	ldr	r3, [r7, #4]
 80180c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80180ca:	2b08      	cmp	r3, #8
 80180cc:	d008      	beq.n	80180e0 <HAL_SPI_Init+0x148>
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80180d2:	2b00      	cmp	r3, #0
 80180d4:	d004      	beq.n	80180e0 <HAL_SPI_Init+0x148>
 80180d6:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 80180da:	4833      	ldr	r0, [pc, #204]	@ (80181a8 <HAL_SPI_Init+0x210>)
 80180dc:	f7fa f9ea 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80180e0:	687b      	ldr	r3, [r7, #4]
 80180e2:	69db      	ldr	r3, [r3, #28]
 80180e4:	2b00      	cmp	r3, #0
 80180e6:	d020      	beq.n	801812a <HAL_SPI_Init+0x192>
 80180e8:	687b      	ldr	r3, [r7, #4]
 80180ea:	69db      	ldr	r3, [r3, #28]
 80180ec:	2b08      	cmp	r3, #8
 80180ee:	d01c      	beq.n	801812a <HAL_SPI_Init+0x192>
 80180f0:	687b      	ldr	r3, [r7, #4]
 80180f2:	69db      	ldr	r3, [r3, #28]
 80180f4:	2b10      	cmp	r3, #16
 80180f6:	d018      	beq.n	801812a <HAL_SPI_Init+0x192>
 80180f8:	687b      	ldr	r3, [r7, #4]
 80180fa:	69db      	ldr	r3, [r3, #28]
 80180fc:	2b18      	cmp	r3, #24
 80180fe:	d014      	beq.n	801812a <HAL_SPI_Init+0x192>
 8018100:	687b      	ldr	r3, [r7, #4]
 8018102:	69db      	ldr	r3, [r3, #28]
 8018104:	2b20      	cmp	r3, #32
 8018106:	d010      	beq.n	801812a <HAL_SPI_Init+0x192>
 8018108:	687b      	ldr	r3, [r7, #4]
 801810a:	69db      	ldr	r3, [r3, #28]
 801810c:	2b28      	cmp	r3, #40	@ 0x28
 801810e:	d00c      	beq.n	801812a <HAL_SPI_Init+0x192>
 8018110:	687b      	ldr	r3, [r7, #4]
 8018112:	69db      	ldr	r3, [r3, #28]
 8018114:	2b30      	cmp	r3, #48	@ 0x30
 8018116:	d008      	beq.n	801812a <HAL_SPI_Init+0x192>
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	69db      	ldr	r3, [r3, #28]
 801811c:	2b38      	cmp	r3, #56	@ 0x38
 801811e:	d004      	beq.n	801812a <HAL_SPI_Init+0x192>
 8018120:	f240 114b 	movw	r1, #331	@ 0x14b
 8018124:	4820      	ldr	r0, [pc, #128]	@ (80181a8 <HAL_SPI_Init+0x210>)
 8018126:	f7fa f9c5 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 801812a:	687b      	ldr	r3, [r7, #4]
 801812c:	6a1b      	ldr	r3, [r3, #32]
 801812e:	2b00      	cmp	r3, #0
 8018130:	d008      	beq.n	8018144 <HAL_SPI_Init+0x1ac>
 8018132:	687b      	ldr	r3, [r7, #4]
 8018134:	6a1b      	ldr	r3, [r3, #32]
 8018136:	2b80      	cmp	r3, #128	@ 0x80
 8018138:	d004      	beq.n	8018144 <HAL_SPI_Init+0x1ac>
 801813a:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 801813e:	481a      	ldr	r0, [pc, #104]	@ (80181a8 <HAL_SPI_Init+0x210>)
 8018140:	f7fa f9b8 	bl	80124b4 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 8018144:	687b      	ldr	r3, [r7, #4]
 8018146:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018148:	2b00      	cmp	r3, #0
 801814a:	d008      	beq.n	801815e <HAL_SPI_Init+0x1c6>
 801814c:	687b      	ldr	r3, [r7, #4]
 801814e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018150:	2b10      	cmp	r3, #16
 8018152:	d004      	beq.n	801815e <HAL_SPI_Init+0x1c6>
 8018154:	f240 114d 	movw	r1, #333	@ 0x14d
 8018158:	4813      	ldr	r0, [pc, #76]	@ (80181a8 <HAL_SPI_Init+0x210>)
 801815a:	f7fa f9ab 	bl	80124b4 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 801815e:	687b      	ldr	r3, [r7, #4]
 8018160:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8018162:	2b00      	cmp	r3, #0
 8018164:	d151      	bne.n	801820a <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 8018166:	687b      	ldr	r3, [r7, #4]
 8018168:	691b      	ldr	r3, [r3, #16]
 801816a:	2b00      	cmp	r3, #0
 801816c:	d008      	beq.n	8018180 <HAL_SPI_Init+0x1e8>
 801816e:	687b      	ldr	r3, [r7, #4]
 8018170:	691b      	ldr	r3, [r3, #16]
 8018172:	2b02      	cmp	r3, #2
 8018174:	d004      	beq.n	8018180 <HAL_SPI_Init+0x1e8>
 8018176:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 801817a:	480b      	ldr	r0, [pc, #44]	@ (80181a8 <HAL_SPI_Init+0x210>)
 801817c:	f7fa f99a 	bl	80124b4 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8018180:	687b      	ldr	r3, [r7, #4]
 8018182:	695b      	ldr	r3, [r3, #20]
 8018184:	2b00      	cmp	r3, #0
 8018186:	d011      	beq.n	80181ac <HAL_SPI_Init+0x214>
 8018188:	687b      	ldr	r3, [r7, #4]
 801818a:	695b      	ldr	r3, [r3, #20]
 801818c:	2b01      	cmp	r3, #1
 801818e:	d00d      	beq.n	80181ac <HAL_SPI_Init+0x214>
 8018190:	f240 1151 	movw	r1, #337	@ 0x151
 8018194:	4804      	ldr	r0, [pc, #16]	@ (80181a8 <HAL_SPI_Init+0x210>)
 8018196:	f7fa f98d 	bl	80124b4 <assert_failed>
 801819a:	e007      	b.n	80181ac <HAL_SPI_Init+0x214>
 801819c:	40013000 	.word	0x40013000
 80181a0:	40003800 	.word	0x40003800
 80181a4:	40003c00 	.word	0x40003c00
 80181a8:	0801de98 	.word	0x0801de98

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	685b      	ldr	r3, [r3, #4]
 80181b0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80181b4:	d125      	bne.n	8018202 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	69db      	ldr	r3, [r3, #28]
 80181ba:	2b00      	cmp	r3, #0
 80181bc:	d050      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	69db      	ldr	r3, [r3, #28]
 80181c2:	2b08      	cmp	r3, #8
 80181c4:	d04c      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181c6:	687b      	ldr	r3, [r7, #4]
 80181c8:	69db      	ldr	r3, [r3, #28]
 80181ca:	2b10      	cmp	r3, #16
 80181cc:	d048      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181ce:	687b      	ldr	r3, [r7, #4]
 80181d0:	69db      	ldr	r3, [r3, #28]
 80181d2:	2b18      	cmp	r3, #24
 80181d4:	d044      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	69db      	ldr	r3, [r3, #28]
 80181da:	2b20      	cmp	r3, #32
 80181dc:	d040      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181de:	687b      	ldr	r3, [r7, #4]
 80181e0:	69db      	ldr	r3, [r3, #28]
 80181e2:	2b28      	cmp	r3, #40	@ 0x28
 80181e4:	d03c      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	69db      	ldr	r3, [r3, #28]
 80181ea:	2b30      	cmp	r3, #48	@ 0x30
 80181ec:	d038      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	69db      	ldr	r3, [r3, #28]
 80181f2:	2b38      	cmp	r3, #56	@ 0x38
 80181f4:	d034      	beq.n	8018260 <HAL_SPI_Init+0x2c8>
 80181f6:	f240 1155 	movw	r1, #341	@ 0x155
 80181fa:	4861      	ldr	r0, [pc, #388]	@ (8018380 <HAL_SPI_Init+0x3e8>)
 80181fc:	f7fa f95a 	bl	80124b4 <assert_failed>
 8018200:	e02e      	b.n	8018260 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8018202:	687b      	ldr	r3, [r7, #4]
 8018204:	2200      	movs	r2, #0
 8018206:	61da      	str	r2, [r3, #28]
 8018208:	e02a      	b.n	8018260 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 801820a:	687b      	ldr	r3, [r7, #4]
 801820c:	69db      	ldr	r3, [r3, #28]
 801820e:	2b00      	cmp	r3, #0
 8018210:	d020      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 8018212:	687b      	ldr	r3, [r7, #4]
 8018214:	69db      	ldr	r3, [r3, #28]
 8018216:	2b08      	cmp	r3, #8
 8018218:	d01c      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 801821a:	687b      	ldr	r3, [r7, #4]
 801821c:	69db      	ldr	r3, [r3, #28]
 801821e:	2b10      	cmp	r3, #16
 8018220:	d018      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 8018222:	687b      	ldr	r3, [r7, #4]
 8018224:	69db      	ldr	r3, [r3, #28]
 8018226:	2b18      	cmp	r3, #24
 8018228:	d014      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 801822a:	687b      	ldr	r3, [r7, #4]
 801822c:	69db      	ldr	r3, [r3, #28]
 801822e:	2b20      	cmp	r3, #32
 8018230:	d010      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 8018232:	687b      	ldr	r3, [r7, #4]
 8018234:	69db      	ldr	r3, [r3, #28]
 8018236:	2b28      	cmp	r3, #40	@ 0x28
 8018238:	d00c      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 801823a:	687b      	ldr	r3, [r7, #4]
 801823c:	69db      	ldr	r3, [r3, #28]
 801823e:	2b30      	cmp	r3, #48	@ 0x30
 8018240:	d008      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 8018242:	687b      	ldr	r3, [r7, #4]
 8018244:	69db      	ldr	r3, [r3, #28]
 8018246:	2b38      	cmp	r3, #56	@ 0x38
 8018248:	d004      	beq.n	8018254 <HAL_SPI_Init+0x2bc>
 801824a:	f240 115f 	movw	r1, #351	@ 0x15f
 801824e:	484c      	ldr	r0, [pc, #304]	@ (8018380 <HAL_SPI_Init+0x3e8>)
 8018250:	f7fa f930 	bl	80124b4 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8018254:	687b      	ldr	r3, [r7, #4]
 8018256:	2200      	movs	r2, #0
 8018258:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	2200      	movs	r2, #0
 801825e:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8018260:	687b      	ldr	r3, [r7, #4]
 8018262:	2200      	movs	r2, #0
 8018264:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8018266:	687b      	ldr	r3, [r7, #4]
 8018268:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 801826c:	b2db      	uxtb	r3, r3
 801826e:	2b00      	cmp	r3, #0
 8018270:	d106      	bne.n	8018280 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8018272:	687b      	ldr	r3, [r7, #4]
 8018274:	2200      	movs	r2, #0
 8018276:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 801827a:	6878      	ldr	r0, [r7, #4]
 801827c:	f7fa f964 	bl	8012548 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8018280:	687b      	ldr	r3, [r7, #4]
 8018282:	2202      	movs	r2, #2
 8018284:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8018288:	687b      	ldr	r3, [r7, #4]
 801828a:	681b      	ldr	r3, [r3, #0]
 801828c:	681a      	ldr	r2, [r3, #0]
 801828e:	687b      	ldr	r3, [r7, #4]
 8018290:	681b      	ldr	r3, [r3, #0]
 8018292:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8018296:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8018298:	687b      	ldr	r3, [r7, #4]
 801829a:	68db      	ldr	r3, [r3, #12]
 801829c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80182a0:	d902      	bls.n	80182a8 <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 80182a2:	2300      	movs	r3, #0
 80182a4:	60fb      	str	r3, [r7, #12]
 80182a6:	e002      	b.n	80182ae <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 80182a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80182ac:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 80182ae:	687b      	ldr	r3, [r7, #4]
 80182b0:	68db      	ldr	r3, [r3, #12]
 80182b2:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80182b6:	d007      	beq.n	80182c8 <HAL_SPI_Init+0x330>
 80182b8:	687b      	ldr	r3, [r7, #4]
 80182ba:	68db      	ldr	r3, [r3, #12]
 80182bc:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80182c0:	d002      	beq.n	80182c8 <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80182c2:	687b      	ldr	r3, [r7, #4]
 80182c4:	2200      	movs	r2, #0
 80182c6:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80182c8:	687b      	ldr	r3, [r7, #4]
 80182ca:	685b      	ldr	r3, [r3, #4]
 80182cc:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80182d0:	687b      	ldr	r3, [r7, #4]
 80182d2:	689b      	ldr	r3, [r3, #8]
 80182d4:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80182d8:	431a      	orrs	r2, r3
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	691b      	ldr	r3, [r3, #16]
 80182de:	f003 0302 	and.w	r3, r3, #2
 80182e2:	431a      	orrs	r2, r3
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	695b      	ldr	r3, [r3, #20]
 80182e8:	f003 0301 	and.w	r3, r3, #1
 80182ec:	431a      	orrs	r2, r3
 80182ee:	687b      	ldr	r3, [r7, #4]
 80182f0:	699b      	ldr	r3, [r3, #24]
 80182f2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80182f6:	431a      	orrs	r2, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	69db      	ldr	r3, [r3, #28]
 80182fc:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8018300:	431a      	orrs	r2, r3
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	6a1b      	ldr	r3, [r3, #32]
 8018306:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801830a:	ea42 0103 	orr.w	r1, r2, r3
 801830e:	687b      	ldr	r3, [r7, #4]
 8018310:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018312:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	430a      	orrs	r2, r1
 801831c:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	699b      	ldr	r3, [r3, #24]
 8018322:	0c1b      	lsrs	r3, r3, #16
 8018324:	f003 0204 	and.w	r2, r3, #4
 8018328:	687b      	ldr	r3, [r7, #4]
 801832a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801832c:	f003 0310 	and.w	r3, r3, #16
 8018330:	431a      	orrs	r2, r3
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018336:	f003 0308 	and.w	r3, r3, #8
 801833a:	431a      	orrs	r2, r3
 801833c:	687b      	ldr	r3, [r7, #4]
 801833e:	68db      	ldr	r3, [r3, #12]
 8018340:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8018344:	ea42 0103 	orr.w	r1, r2, r3
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 801834e:	687b      	ldr	r3, [r7, #4]
 8018350:	681b      	ldr	r3, [r3, #0]
 8018352:	430a      	orrs	r2, r1
 8018354:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8018356:	687b      	ldr	r3, [r7, #4]
 8018358:	681b      	ldr	r3, [r3, #0]
 801835a:	69da      	ldr	r2, [r3, #28]
 801835c:	687b      	ldr	r3, [r7, #4]
 801835e:	681b      	ldr	r3, [r3, #0]
 8018360:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8018364:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8018366:	687b      	ldr	r3, [r7, #4]
 8018368:	2200      	movs	r2, #0
 801836a:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 801836c:	687b      	ldr	r3, [r7, #4]
 801836e:	2201      	movs	r2, #1
 8018370:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8018374:	2300      	movs	r3, #0
}
 8018376:	4618      	mov	r0, r3
 8018378:	3710      	adds	r7, #16
 801837a:	46bd      	mov	sp, r7
 801837c:	bd80      	pop	{r7, pc}
 801837e:	bf00      	nop
 8018380:	0801de98 	.word	0x0801de98

08018384 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8018384:	b580      	push	{r7, lr}
 8018386:	b082      	sub	sp, #8
 8018388:	af00      	add	r7, sp, #0
 801838a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 801838c:	687b      	ldr	r3, [r7, #4]
 801838e:	2b00      	cmp	r3, #0
 8018390:	d101      	bne.n	8018396 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8018392:	2301      	movs	r3, #1
 8018394:	e0dc      	b.n	8018550 <HAL_TIM_Base_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8018396:	687b      	ldr	r3, [r7, #4]
 8018398:	681b      	ldr	r3, [r3, #0]
 801839a:	4a6f      	ldr	r2, [pc, #444]	@ (8018558 <HAL_TIM_Base_Init+0x1d4>)
 801839c:	4293      	cmp	r3, r2
 801839e:	d031      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	681b      	ldr	r3, [r3, #0]
 80183a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80183a8:	d02c      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183aa:	687b      	ldr	r3, [r7, #4]
 80183ac:	681b      	ldr	r3, [r3, #0]
 80183ae:	4a6b      	ldr	r2, [pc, #428]	@ (801855c <HAL_TIM_Base_Init+0x1d8>)
 80183b0:	4293      	cmp	r3, r2
 80183b2:	d027      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183b4:	687b      	ldr	r3, [r7, #4]
 80183b6:	681b      	ldr	r3, [r3, #0]
 80183b8:	4a69      	ldr	r2, [pc, #420]	@ (8018560 <HAL_TIM_Base_Init+0x1dc>)
 80183ba:	4293      	cmp	r3, r2
 80183bc:	d022      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183be:	687b      	ldr	r3, [r7, #4]
 80183c0:	681b      	ldr	r3, [r3, #0]
 80183c2:	4a68      	ldr	r2, [pc, #416]	@ (8018564 <HAL_TIM_Base_Init+0x1e0>)
 80183c4:	4293      	cmp	r3, r2
 80183c6:	d01d      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183c8:	687b      	ldr	r3, [r7, #4]
 80183ca:	681b      	ldr	r3, [r3, #0]
 80183cc:	4a66      	ldr	r2, [pc, #408]	@ (8018568 <HAL_TIM_Base_Init+0x1e4>)
 80183ce:	4293      	cmp	r3, r2
 80183d0:	d018      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183d2:	687b      	ldr	r3, [r7, #4]
 80183d4:	681b      	ldr	r3, [r3, #0]
 80183d6:	4a65      	ldr	r2, [pc, #404]	@ (801856c <HAL_TIM_Base_Init+0x1e8>)
 80183d8:	4293      	cmp	r3, r2
 80183da:	d013      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	681b      	ldr	r3, [r3, #0]
 80183e0:	4a63      	ldr	r2, [pc, #396]	@ (8018570 <HAL_TIM_Base_Init+0x1ec>)
 80183e2:	4293      	cmp	r3, r2
 80183e4:	d00e      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183e6:	687b      	ldr	r3, [r7, #4]
 80183e8:	681b      	ldr	r3, [r3, #0]
 80183ea:	4a62      	ldr	r2, [pc, #392]	@ (8018574 <HAL_TIM_Base_Init+0x1f0>)
 80183ec:	4293      	cmp	r3, r2
 80183ee:	d009      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183f0:	687b      	ldr	r3, [r7, #4]
 80183f2:	681b      	ldr	r3, [r3, #0]
 80183f4:	4a60      	ldr	r2, [pc, #384]	@ (8018578 <HAL_TIM_Base_Init+0x1f4>)
 80183f6:	4293      	cmp	r3, r2
 80183f8:	d004      	beq.n	8018404 <HAL_TIM_Base_Init+0x80>
 80183fa:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80183fe:	485f      	ldr	r0, [pc, #380]	@ (801857c <HAL_TIM_Base_Init+0x1f8>)
 8018400:	f7fa f858 	bl	80124b4 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8018404:	687b      	ldr	r3, [r7, #4]
 8018406:	689b      	ldr	r3, [r3, #8]
 8018408:	2b00      	cmp	r3, #0
 801840a:	d014      	beq.n	8018436 <HAL_TIM_Base_Init+0xb2>
 801840c:	687b      	ldr	r3, [r7, #4]
 801840e:	689b      	ldr	r3, [r3, #8]
 8018410:	2b10      	cmp	r3, #16
 8018412:	d010      	beq.n	8018436 <HAL_TIM_Base_Init+0xb2>
 8018414:	687b      	ldr	r3, [r7, #4]
 8018416:	689b      	ldr	r3, [r3, #8]
 8018418:	2b20      	cmp	r3, #32
 801841a:	d00c      	beq.n	8018436 <HAL_TIM_Base_Init+0xb2>
 801841c:	687b      	ldr	r3, [r7, #4]
 801841e:	689b      	ldr	r3, [r3, #8]
 8018420:	2b40      	cmp	r3, #64	@ 0x40
 8018422:	d008      	beq.n	8018436 <HAL_TIM_Base_Init+0xb2>
 8018424:	687b      	ldr	r3, [r7, #4]
 8018426:	689b      	ldr	r3, [r3, #8]
 8018428:	2b60      	cmp	r3, #96	@ 0x60
 801842a:	d004      	beq.n	8018436 <HAL_TIM_Base_Init+0xb2>
 801842c:	f240 1123 	movw	r1, #291	@ 0x123
 8018430:	4852      	ldr	r0, [pc, #328]	@ (801857c <HAL_TIM_Base_Init+0x1f8>)
 8018432:	f7fa f83f 	bl	80124b4 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8018436:	687b      	ldr	r3, [r7, #4]
 8018438:	691b      	ldr	r3, [r3, #16]
 801843a:	2b00      	cmp	r3, #0
 801843c:	d00e      	beq.n	801845c <HAL_TIM_Base_Init+0xd8>
 801843e:	687b      	ldr	r3, [r7, #4]
 8018440:	691b      	ldr	r3, [r3, #16]
 8018442:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8018446:	d009      	beq.n	801845c <HAL_TIM_Base_Init+0xd8>
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	691b      	ldr	r3, [r3, #16]
 801844c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8018450:	d004      	beq.n	801845c <HAL_TIM_Base_Init+0xd8>
 8018452:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8018456:	4849      	ldr	r0, [pc, #292]	@ (801857c <HAL_TIM_Base_Init+0x1f8>)
 8018458:	f7fa f82c 	bl	80124b4 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 801845c:	687b      	ldr	r3, [r7, #4]
 801845e:	681b      	ldr	r3, [r3, #0]
 8018460:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018464:	d00f      	beq.n	8018486 <HAL_TIM_Base_Init+0x102>
 8018466:	687b      	ldr	r3, [r7, #4]
 8018468:	68db      	ldr	r3, [r3, #12]
 801846a:	2b00      	cmp	r3, #0
 801846c:	d006      	beq.n	801847c <HAL_TIM_Base_Init+0xf8>
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	68db      	ldr	r3, [r3, #12]
 8018472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018476:	d201      	bcs.n	801847c <HAL_TIM_Base_Init+0xf8>
 8018478:	2301      	movs	r3, #1
 801847a:	e000      	b.n	801847e <HAL_TIM_Base_Init+0xfa>
 801847c:	2300      	movs	r3, #0
 801847e:	f003 0301 	and.w	r3, r3, #1
 8018482:	b2db      	uxtb	r3, r3
 8018484:	e006      	b.n	8018494 <HAL_TIM_Base_Init+0x110>
 8018486:	687b      	ldr	r3, [r7, #4]
 8018488:	68db      	ldr	r3, [r3, #12]
 801848a:	2b00      	cmp	r3, #0
 801848c:	bf14      	ite	ne
 801848e:	2301      	movne	r3, #1
 8018490:	2300      	moveq	r3, #0
 8018492:	b2db      	uxtb	r3, r3
 8018494:	2b00      	cmp	r3, #0
 8018496:	d104      	bne.n	80184a2 <HAL_TIM_Base_Init+0x11e>
 8018498:	f240 1125 	movw	r1, #293	@ 0x125
 801849c:	4837      	ldr	r0, [pc, #220]	@ (801857c <HAL_TIM_Base_Init+0x1f8>)
 801849e:	f7fa f809 	bl	80124b4 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 80184a2:	687b      	ldr	r3, [r7, #4]
 80184a4:	699b      	ldr	r3, [r3, #24]
 80184a6:	2b00      	cmp	r3, #0
 80184a8:	d008      	beq.n	80184bc <HAL_TIM_Base_Init+0x138>
 80184aa:	687b      	ldr	r3, [r7, #4]
 80184ac:	699b      	ldr	r3, [r3, #24]
 80184ae:	2b80      	cmp	r3, #128	@ 0x80
 80184b0:	d004      	beq.n	80184bc <HAL_TIM_Base_Init+0x138>
 80184b2:	f44f 7193 	mov.w	r1, #294	@ 0x126
 80184b6:	4831      	ldr	r0, [pc, #196]	@ (801857c <HAL_TIM_Base_Init+0x1f8>)
 80184b8:	f7f9 fffc 	bl	80124b4 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80184c2:	b2db      	uxtb	r3, r3
 80184c4:	2b00      	cmp	r3, #0
 80184c6:	d106      	bne.n	80184d6 <HAL_TIM_Base_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80184c8:	687b      	ldr	r3, [r7, #4]
 80184ca:	2200      	movs	r2, #0
 80184cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80184d0:	6878      	ldr	r0, [r7, #4]
 80184d2:	f000 f855 	bl	8018580 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	2202      	movs	r2, #2
 80184da:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80184de:	687b      	ldr	r3, [r7, #4]
 80184e0:	681a      	ldr	r2, [r3, #0]
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	3304      	adds	r3, #4
 80184e6:	4619      	mov	r1, r3
 80184e8:	4610      	mov	r0, r2
 80184ea:	f000 fa73 	bl	80189d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80184ee:	687b      	ldr	r3, [r7, #4]
 80184f0:	2201      	movs	r2, #1
 80184f2:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80184f6:	687b      	ldr	r3, [r7, #4]
 80184f8:	2201      	movs	r2, #1
 80184fa:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80184fe:	687b      	ldr	r3, [r7, #4]
 8018500:	2201      	movs	r2, #1
 8018502:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8018506:	687b      	ldr	r3, [r7, #4]
 8018508:	2201      	movs	r2, #1
 801850a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 801850e:	687b      	ldr	r3, [r7, #4]
 8018510:	2201      	movs	r2, #1
 8018512:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8018516:	687b      	ldr	r3, [r7, #4]
 8018518:	2201      	movs	r2, #1
 801851a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 801851e:	687b      	ldr	r3, [r7, #4]
 8018520:	2201      	movs	r2, #1
 8018522:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8018526:	687b      	ldr	r3, [r7, #4]
 8018528:	2201      	movs	r2, #1
 801852a:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 801852e:	687b      	ldr	r3, [r7, #4]
 8018530:	2201      	movs	r2, #1
 8018532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8018536:	687b      	ldr	r3, [r7, #4]
 8018538:	2201      	movs	r2, #1
 801853a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 801853e:	687b      	ldr	r3, [r7, #4]
 8018540:	2201      	movs	r2, #1
 8018542:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8018546:	687b      	ldr	r3, [r7, #4]
 8018548:	2201      	movs	r2, #1
 801854a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 801854e:	2300      	movs	r3, #0
}
 8018550:	4618      	mov	r0, r3
 8018552:	3708      	adds	r7, #8
 8018554:	46bd      	mov	sp, r7
 8018556:	bd80      	pop	{r7, pc}
 8018558:	40012c00 	.word	0x40012c00
 801855c:	40000400 	.word	0x40000400
 8018560:	40000800 	.word	0x40000800
 8018564:	40001000 	.word	0x40001000
 8018568:	40001400 	.word	0x40001400
 801856c:	40013400 	.word	0x40013400
 8018570:	40014000 	.word	0x40014000
 8018574:	40014400 	.word	0x40014400
 8018578:	40014800 	.word	0x40014800
 801857c:	0801ded0 	.word	0x0801ded0

08018580 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8018580:	b480      	push	{r7}
 8018582:	b083      	sub	sp, #12
 8018584:	af00      	add	r7, sp, #0
 8018586:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8018588:	bf00      	nop
 801858a:	370c      	adds	r7, #12
 801858c:	46bd      	mov	sp, r7
 801858e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018592:	4770      	bx	lr

08018594 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8018594:	b580      	push	{r7, lr}
 8018596:	b084      	sub	sp, #16
 8018598:	af00      	add	r7, sp, #0
 801859a:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801859c:	687b      	ldr	r3, [r7, #4]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	4a45      	ldr	r2, [pc, #276]	@ (80186b8 <HAL_TIM_Base_Start_IT+0x124>)
 80185a2:	4293      	cmp	r3, r2
 80185a4:	d031      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185a6:	687b      	ldr	r3, [r7, #4]
 80185a8:	681b      	ldr	r3, [r3, #0]
 80185aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80185ae:	d02c      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185b0:	687b      	ldr	r3, [r7, #4]
 80185b2:	681b      	ldr	r3, [r3, #0]
 80185b4:	4a41      	ldr	r2, [pc, #260]	@ (80186bc <HAL_TIM_Base_Start_IT+0x128>)
 80185b6:	4293      	cmp	r3, r2
 80185b8:	d027      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185ba:	687b      	ldr	r3, [r7, #4]
 80185bc:	681b      	ldr	r3, [r3, #0]
 80185be:	4a40      	ldr	r2, [pc, #256]	@ (80186c0 <HAL_TIM_Base_Start_IT+0x12c>)
 80185c0:	4293      	cmp	r3, r2
 80185c2:	d022      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185c4:	687b      	ldr	r3, [r7, #4]
 80185c6:	681b      	ldr	r3, [r3, #0]
 80185c8:	4a3e      	ldr	r2, [pc, #248]	@ (80186c4 <HAL_TIM_Base_Start_IT+0x130>)
 80185ca:	4293      	cmp	r3, r2
 80185cc:	d01d      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185ce:	687b      	ldr	r3, [r7, #4]
 80185d0:	681b      	ldr	r3, [r3, #0]
 80185d2:	4a3d      	ldr	r2, [pc, #244]	@ (80186c8 <HAL_TIM_Base_Start_IT+0x134>)
 80185d4:	4293      	cmp	r3, r2
 80185d6:	d018      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185d8:	687b      	ldr	r3, [r7, #4]
 80185da:	681b      	ldr	r3, [r3, #0]
 80185dc:	4a3b      	ldr	r2, [pc, #236]	@ (80186cc <HAL_TIM_Base_Start_IT+0x138>)
 80185de:	4293      	cmp	r3, r2
 80185e0:	d013      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185e2:	687b      	ldr	r3, [r7, #4]
 80185e4:	681b      	ldr	r3, [r3, #0]
 80185e6:	4a3a      	ldr	r2, [pc, #232]	@ (80186d0 <HAL_TIM_Base_Start_IT+0x13c>)
 80185e8:	4293      	cmp	r3, r2
 80185ea:	d00e      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185ec:	687b      	ldr	r3, [r7, #4]
 80185ee:	681b      	ldr	r3, [r3, #0]
 80185f0:	4a38      	ldr	r2, [pc, #224]	@ (80186d4 <HAL_TIM_Base_Start_IT+0x140>)
 80185f2:	4293      	cmp	r3, r2
 80185f4:	d009      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	681b      	ldr	r3, [r3, #0]
 80185fa:	4a37      	ldr	r2, [pc, #220]	@ (80186d8 <HAL_TIM_Base_Start_IT+0x144>)
 80185fc:	4293      	cmp	r3, r2
 80185fe:	d004      	beq.n	801860a <HAL_TIM_Base_Start_IT+0x76>
 8018600:	f240 11df 	movw	r1, #479	@ 0x1df
 8018604:	4835      	ldr	r0, [pc, #212]	@ (80186dc <HAL_TIM_Base_Start_IT+0x148>)
 8018606:	f7f9 ff55 	bl	80124b4 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 801860a:	687b      	ldr	r3, [r7, #4]
 801860c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8018610:	b2db      	uxtb	r3, r3
 8018612:	2b01      	cmp	r3, #1
 8018614:	d001      	beq.n	801861a <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 8018616:	2301      	movs	r3, #1
 8018618:	e04a      	b.n	80186b0 <HAL_TIM_Base_Start_IT+0x11c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 801861a:	687b      	ldr	r3, [r7, #4]
 801861c:	2202      	movs	r2, #2
 801861e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8018622:	687b      	ldr	r3, [r7, #4]
 8018624:	681b      	ldr	r3, [r3, #0]
 8018626:	68da      	ldr	r2, [r3, #12]
 8018628:	687b      	ldr	r3, [r7, #4]
 801862a:	681b      	ldr	r3, [r3, #0]
 801862c:	f042 0201 	orr.w	r2, r2, #1
 8018630:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8018632:	687b      	ldr	r3, [r7, #4]
 8018634:	681b      	ldr	r3, [r3, #0]
 8018636:	4a20      	ldr	r2, [pc, #128]	@ (80186b8 <HAL_TIM_Base_Start_IT+0x124>)
 8018638:	4293      	cmp	r3, r2
 801863a:	d018      	beq.n	801866e <HAL_TIM_Base_Start_IT+0xda>
 801863c:	687b      	ldr	r3, [r7, #4]
 801863e:	681b      	ldr	r3, [r3, #0]
 8018640:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018644:	d013      	beq.n	801866e <HAL_TIM_Base_Start_IT+0xda>
 8018646:	687b      	ldr	r3, [r7, #4]
 8018648:	681b      	ldr	r3, [r3, #0]
 801864a:	4a1c      	ldr	r2, [pc, #112]	@ (80186bc <HAL_TIM_Base_Start_IT+0x128>)
 801864c:	4293      	cmp	r3, r2
 801864e:	d00e      	beq.n	801866e <HAL_TIM_Base_Start_IT+0xda>
 8018650:	687b      	ldr	r3, [r7, #4]
 8018652:	681b      	ldr	r3, [r3, #0]
 8018654:	4a1a      	ldr	r2, [pc, #104]	@ (80186c0 <HAL_TIM_Base_Start_IT+0x12c>)
 8018656:	4293      	cmp	r3, r2
 8018658:	d009      	beq.n	801866e <HAL_TIM_Base_Start_IT+0xda>
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	681b      	ldr	r3, [r3, #0]
 801865e:	4a1b      	ldr	r2, [pc, #108]	@ (80186cc <HAL_TIM_Base_Start_IT+0x138>)
 8018660:	4293      	cmp	r3, r2
 8018662:	d004      	beq.n	801866e <HAL_TIM_Base_Start_IT+0xda>
 8018664:	687b      	ldr	r3, [r7, #4]
 8018666:	681b      	ldr	r3, [r3, #0]
 8018668:	4a19      	ldr	r2, [pc, #100]	@ (80186d0 <HAL_TIM_Base_Start_IT+0x13c>)
 801866a:	4293      	cmp	r3, r2
 801866c:	d115      	bne.n	801869a <HAL_TIM_Base_Start_IT+0x106>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 801866e:	687b      	ldr	r3, [r7, #4]
 8018670:	681b      	ldr	r3, [r3, #0]
 8018672:	689a      	ldr	r2, [r3, #8]
 8018674:	4b1a      	ldr	r3, [pc, #104]	@ (80186e0 <HAL_TIM_Base_Start_IT+0x14c>)
 8018676:	4013      	ands	r3, r2
 8018678:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 801867a:	68fb      	ldr	r3, [r7, #12]
 801867c:	2b06      	cmp	r3, #6
 801867e:	d015      	beq.n	80186ac <HAL_TIM_Base_Start_IT+0x118>
 8018680:	68fb      	ldr	r3, [r7, #12]
 8018682:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8018686:	d011      	beq.n	80186ac <HAL_TIM_Base_Start_IT+0x118>
    {
      __HAL_TIM_ENABLE(htim);
 8018688:	687b      	ldr	r3, [r7, #4]
 801868a:	681b      	ldr	r3, [r3, #0]
 801868c:	681a      	ldr	r2, [r3, #0]
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	681b      	ldr	r3, [r3, #0]
 8018692:	f042 0201 	orr.w	r2, r2, #1
 8018696:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8018698:	e008      	b.n	80186ac <HAL_TIM_Base_Start_IT+0x118>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 801869a:	687b      	ldr	r3, [r7, #4]
 801869c:	681b      	ldr	r3, [r3, #0]
 801869e:	681a      	ldr	r2, [r3, #0]
 80186a0:	687b      	ldr	r3, [r7, #4]
 80186a2:	681b      	ldr	r3, [r3, #0]
 80186a4:	f042 0201 	orr.w	r2, r2, #1
 80186a8:	601a      	str	r2, [r3, #0]
 80186aa:	e000      	b.n	80186ae <HAL_TIM_Base_Start_IT+0x11a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80186ac:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80186ae:	2300      	movs	r3, #0
}
 80186b0:	4618      	mov	r0, r3
 80186b2:	3710      	adds	r7, #16
 80186b4:	46bd      	mov	sp, r7
 80186b6:	bd80      	pop	{r7, pc}
 80186b8:	40012c00 	.word	0x40012c00
 80186bc:	40000400 	.word	0x40000400
 80186c0:	40000800 	.word	0x40000800
 80186c4:	40001000 	.word	0x40001000
 80186c8:	40001400 	.word	0x40001400
 80186cc:	40013400 	.word	0x40013400
 80186d0:	40014000 	.word	0x40014000
 80186d4:	40014400 	.word	0x40014400
 80186d8:	40014800 	.word	0x40014800
 80186dc:	0801ded0 	.word	0x0801ded0
 80186e0:	00010007 	.word	0x00010007

080186e4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80186e4:	b580      	push	{r7, lr}
 80186e6:	b084      	sub	sp, #16
 80186e8:	af00      	add	r7, sp, #0
 80186ea:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80186ec:	687b      	ldr	r3, [r7, #4]
 80186ee:	681b      	ldr	r3, [r3, #0]
 80186f0:	68db      	ldr	r3, [r3, #12]
 80186f2:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80186f4:	687b      	ldr	r3, [r7, #4]
 80186f6:	681b      	ldr	r3, [r3, #0]
 80186f8:	691b      	ldr	r3, [r3, #16]
 80186fa:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80186fc:	68bb      	ldr	r3, [r7, #8]
 80186fe:	f003 0302 	and.w	r3, r3, #2
 8018702:	2b00      	cmp	r3, #0
 8018704:	d020      	beq.n	8018748 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8018706:	68fb      	ldr	r3, [r7, #12]
 8018708:	f003 0302 	and.w	r3, r3, #2
 801870c:	2b00      	cmp	r3, #0
 801870e:	d01b      	beq.n	8018748 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	681b      	ldr	r3, [r3, #0]
 8018714:	f06f 0202 	mvn.w	r2, #2
 8018718:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 801871a:	687b      	ldr	r3, [r7, #4]
 801871c:	2201      	movs	r2, #1
 801871e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8018720:	687b      	ldr	r3, [r7, #4]
 8018722:	681b      	ldr	r3, [r3, #0]
 8018724:	699b      	ldr	r3, [r3, #24]
 8018726:	f003 0303 	and.w	r3, r3, #3
 801872a:	2b00      	cmp	r3, #0
 801872c:	d003      	beq.n	8018736 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 801872e:	6878      	ldr	r0, [r7, #4]
 8018730:	f000 f931 	bl	8018996 <HAL_TIM_IC_CaptureCallback>
 8018734:	e005      	b.n	8018742 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8018736:	6878      	ldr	r0, [r7, #4]
 8018738:	f000 f923 	bl	8018982 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 801873c:	6878      	ldr	r0, [r7, #4]
 801873e:	f000 f934 	bl	80189aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2200      	movs	r2, #0
 8018746:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8018748:	68bb      	ldr	r3, [r7, #8]
 801874a:	f003 0304 	and.w	r3, r3, #4
 801874e:	2b00      	cmp	r3, #0
 8018750:	d020      	beq.n	8018794 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8018752:	68fb      	ldr	r3, [r7, #12]
 8018754:	f003 0304 	and.w	r3, r3, #4
 8018758:	2b00      	cmp	r3, #0
 801875a:	d01b      	beq.n	8018794 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 801875c:	687b      	ldr	r3, [r7, #4]
 801875e:	681b      	ldr	r3, [r3, #0]
 8018760:	f06f 0204 	mvn.w	r2, #4
 8018764:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8018766:	687b      	ldr	r3, [r7, #4]
 8018768:	2202      	movs	r2, #2
 801876a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 801876c:	687b      	ldr	r3, [r7, #4]
 801876e:	681b      	ldr	r3, [r3, #0]
 8018770:	699b      	ldr	r3, [r3, #24]
 8018772:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8018776:	2b00      	cmp	r3, #0
 8018778:	d003      	beq.n	8018782 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801877a:	6878      	ldr	r0, [r7, #4]
 801877c:	f000 f90b 	bl	8018996 <HAL_TIM_IC_CaptureCallback>
 8018780:	e005      	b.n	801878e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8018782:	6878      	ldr	r0, [r7, #4]
 8018784:	f000 f8fd 	bl	8018982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018788:	6878      	ldr	r0, [r7, #4]
 801878a:	f000 f90e 	bl	80189aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801878e:	687b      	ldr	r3, [r7, #4]
 8018790:	2200      	movs	r2, #0
 8018792:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8018794:	68bb      	ldr	r3, [r7, #8]
 8018796:	f003 0308 	and.w	r3, r3, #8
 801879a:	2b00      	cmp	r3, #0
 801879c:	d020      	beq.n	80187e0 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 801879e:	68fb      	ldr	r3, [r7, #12]
 80187a0:	f003 0308 	and.w	r3, r3, #8
 80187a4:	2b00      	cmp	r3, #0
 80187a6:	d01b      	beq.n	80187e0 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80187a8:	687b      	ldr	r3, [r7, #4]
 80187aa:	681b      	ldr	r3, [r3, #0]
 80187ac:	f06f 0208 	mvn.w	r2, #8
 80187b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80187b2:	687b      	ldr	r3, [r7, #4]
 80187b4:	2204      	movs	r2, #4
 80187b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80187b8:	687b      	ldr	r3, [r7, #4]
 80187ba:	681b      	ldr	r3, [r3, #0]
 80187bc:	69db      	ldr	r3, [r3, #28]
 80187be:	f003 0303 	and.w	r3, r3, #3
 80187c2:	2b00      	cmp	r3, #0
 80187c4:	d003      	beq.n	80187ce <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80187c6:	6878      	ldr	r0, [r7, #4]
 80187c8:	f000 f8e5 	bl	8018996 <HAL_TIM_IC_CaptureCallback>
 80187cc:	e005      	b.n	80187da <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80187ce:	6878      	ldr	r0, [r7, #4]
 80187d0:	f000 f8d7 	bl	8018982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80187d4:	6878      	ldr	r0, [r7, #4]
 80187d6:	f000 f8e8 	bl	80189aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80187da:	687b      	ldr	r3, [r7, #4]
 80187dc:	2200      	movs	r2, #0
 80187de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80187e0:	68bb      	ldr	r3, [r7, #8]
 80187e2:	f003 0310 	and.w	r3, r3, #16
 80187e6:	2b00      	cmp	r3, #0
 80187e8:	d020      	beq.n	801882c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	f003 0310 	and.w	r3, r3, #16
 80187f0:	2b00      	cmp	r3, #0
 80187f2:	d01b      	beq.n	801882c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80187f4:	687b      	ldr	r3, [r7, #4]
 80187f6:	681b      	ldr	r3, [r3, #0]
 80187f8:	f06f 0210 	mvn.w	r2, #16
 80187fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80187fe:	687b      	ldr	r3, [r7, #4]
 8018800:	2208      	movs	r2, #8
 8018802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8018804:	687b      	ldr	r3, [r7, #4]
 8018806:	681b      	ldr	r3, [r3, #0]
 8018808:	69db      	ldr	r3, [r3, #28]
 801880a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801880e:	2b00      	cmp	r3, #0
 8018810:	d003      	beq.n	801881a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8018812:	6878      	ldr	r0, [r7, #4]
 8018814:	f000 f8bf 	bl	8018996 <HAL_TIM_IC_CaptureCallback>
 8018818:	e005      	b.n	8018826 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801881a:	6878      	ldr	r0, [r7, #4]
 801881c:	f000 f8b1 	bl	8018982 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8018820:	6878      	ldr	r0, [r7, #4]
 8018822:	f000 f8c2 	bl	80189aa <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8018826:	687b      	ldr	r3, [r7, #4]
 8018828:	2200      	movs	r2, #0
 801882a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 801882c:	68bb      	ldr	r3, [r7, #8]
 801882e:	f003 0301 	and.w	r3, r3, #1
 8018832:	2b00      	cmp	r3, #0
 8018834:	d00c      	beq.n	8018850 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8018836:	68fb      	ldr	r3, [r7, #12]
 8018838:	f003 0301 	and.w	r3, r3, #1
 801883c:	2b00      	cmp	r3, #0
 801883e:	d007      	beq.n	8018850 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8018840:	687b      	ldr	r3, [r7, #4]
 8018842:	681b      	ldr	r3, [r3, #0]
 8018844:	f06f 0201 	mvn.w	r2, #1
 8018848:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 801884a:	6878      	ldr	r0, [r7, #4]
 801884c:	f7f9 fe1a 	bl	8012484 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8018850:	68bb      	ldr	r3, [r7, #8]
 8018852:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018856:	2b00      	cmp	r3, #0
 8018858:	d104      	bne.n	8018864 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 801885a:	68bb      	ldr	r3, [r7, #8]
 801885c:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8018860:	2b00      	cmp	r3, #0
 8018862:	d00c      	beq.n	801887e <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018864:	68fb      	ldr	r3, [r7, #12]
 8018866:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801886a:	2b00      	cmp	r3, #0
 801886c:	d007      	beq.n	801887e <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 801886e:	687b      	ldr	r3, [r7, #4]
 8018870:	681b      	ldr	r3, [r3, #0]
 8018872:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 8018876:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8018878:	6878      	ldr	r0, [r7, #4]
 801887a:	f000 f951 	bl	8018b20 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 801887e:	68bb      	ldr	r3, [r7, #8]
 8018880:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018884:	2b00      	cmp	r3, #0
 8018886:	d00c      	beq.n	80188a2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8018888:	68fb      	ldr	r3, [r7, #12]
 801888a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801888e:	2b00      	cmp	r3, #0
 8018890:	d007      	beq.n	80188a2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8018892:	687b      	ldr	r3, [r7, #4]
 8018894:	681b      	ldr	r3, [r3, #0]
 8018896:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 801889a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 801889c:	6878      	ldr	r0, [r7, #4]
 801889e:	f000 f949 	bl	8018b34 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80188a2:	68bb      	ldr	r3, [r7, #8]
 80188a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	d00c      	beq.n	80188c6 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80188ac:	68fb      	ldr	r3, [r7, #12]
 80188ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80188b2:	2b00      	cmp	r3, #0
 80188b4:	d007      	beq.n	80188c6 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80188b6:	687b      	ldr	r3, [r7, #4]
 80188b8:	681b      	ldr	r3, [r3, #0]
 80188ba:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80188be:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80188c0:	6878      	ldr	r0, [r7, #4]
 80188c2:	f000 f87c 	bl	80189be <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80188c6:	68bb      	ldr	r3, [r7, #8]
 80188c8:	f003 0320 	and.w	r3, r3, #32
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d00c      	beq.n	80188ea <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80188d0:	68fb      	ldr	r3, [r7, #12]
 80188d2:	f003 0320 	and.w	r3, r3, #32
 80188d6:	2b00      	cmp	r3, #0
 80188d8:	d007      	beq.n	80188ea <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80188da:	687b      	ldr	r3, [r7, #4]
 80188dc:	681b      	ldr	r3, [r3, #0]
 80188de:	f06f 0220 	mvn.w	r2, #32
 80188e2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80188e4:	6878      	ldr	r0, [r7, #4]
 80188e6:	f000 f911 	bl	8018b0c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80188ea:	68bb      	ldr	r3, [r7, #8]
 80188ec:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80188f0:	2b00      	cmp	r3, #0
 80188f2:	d00c      	beq.n	801890e <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80188fa:	2b00      	cmp	r3, #0
 80188fc:	d007      	beq.n	801890e <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80188fe:	687b      	ldr	r3, [r7, #4]
 8018900:	681b      	ldr	r3, [r3, #0]
 8018902:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 8018906:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8018908:	6878      	ldr	r0, [r7, #4]
 801890a:	f000 f91d 	bl	8018b48 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 801890e:	68bb      	ldr	r3, [r7, #8]
 8018910:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8018914:	2b00      	cmp	r3, #0
 8018916:	d00c      	beq.n	8018932 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8018918:	68fb      	ldr	r3, [r7, #12]
 801891a:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801891e:	2b00      	cmp	r3, #0
 8018920:	d007      	beq.n	8018932 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 8018922:	687b      	ldr	r3, [r7, #4]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 801892a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 801892c:	6878      	ldr	r0, [r7, #4]
 801892e:	f000 f915 	bl	8018b5c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 8018932:	68bb      	ldr	r3, [r7, #8]
 8018934:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018938:	2b00      	cmp	r3, #0
 801893a:	d00c      	beq.n	8018956 <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 801893c:	68fb      	ldr	r3, [r7, #12]
 801893e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8018942:	2b00      	cmp	r3, #0
 8018944:	d007      	beq.n	8018956 <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 8018946:	687b      	ldr	r3, [r7, #4]
 8018948:	681b      	ldr	r3, [r3, #0]
 801894a:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 801894e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8018950:	6878      	ldr	r0, [r7, #4]
 8018952:	f000 f90d 	bl	8018b70 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 8018956:	68bb      	ldr	r3, [r7, #8]
 8018958:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801895c:	2b00      	cmp	r3, #0
 801895e:	d00c      	beq.n	801897a <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8018960:	68fb      	ldr	r3, [r7, #12]
 8018962:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018966:	2b00      	cmp	r3, #0
 8018968:	d007      	beq.n	801897a <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 801896a:	687b      	ldr	r3, [r7, #4]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8018972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8018974:	6878      	ldr	r0, [r7, #4]
 8018976:	f000 f905 	bl	8018b84 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 801897a:	bf00      	nop
 801897c:	3710      	adds	r7, #16
 801897e:	46bd      	mov	sp, r7
 8018980:	bd80      	pop	{r7, pc}

08018982 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8018982:	b480      	push	{r7}
 8018984:	b083      	sub	sp, #12
 8018986:	af00      	add	r7, sp, #0
 8018988:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 801898a:	bf00      	nop
 801898c:	370c      	adds	r7, #12
 801898e:	46bd      	mov	sp, r7
 8018990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018994:	4770      	bx	lr

08018996 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8018996:	b480      	push	{r7}
 8018998:	b083      	sub	sp, #12
 801899a:	af00      	add	r7, sp, #0
 801899c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 801899e:	bf00      	nop
 80189a0:	370c      	adds	r7, #12
 80189a2:	46bd      	mov	sp, r7
 80189a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189a8:	4770      	bx	lr

080189aa <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80189aa:	b480      	push	{r7}
 80189ac:	b083      	sub	sp, #12
 80189ae:	af00      	add	r7, sp, #0
 80189b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80189b2:	bf00      	nop
 80189b4:	370c      	adds	r7, #12
 80189b6:	46bd      	mov	sp, r7
 80189b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189bc:	4770      	bx	lr

080189be <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80189be:	b480      	push	{r7}
 80189c0:	b083      	sub	sp, #12
 80189c2:	af00      	add	r7, sp, #0
 80189c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80189c6:	bf00      	nop
 80189c8:	370c      	adds	r7, #12
 80189ca:	46bd      	mov	sp, r7
 80189cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80189d0:	4770      	bx	lr
	...

080189d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80189d4:	b480      	push	{r7}
 80189d6:	b085      	sub	sp, #20
 80189d8:	af00      	add	r7, sp, #0
 80189da:	6078      	str	r0, [r7, #4]
 80189dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80189de:	687b      	ldr	r3, [r7, #4]
 80189e0:	681b      	ldr	r3, [r3, #0]
 80189e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80189e4:	687b      	ldr	r3, [r7, #4]
 80189e6:	4a42      	ldr	r2, [pc, #264]	@ (8018af0 <TIM_Base_SetConfig+0x11c>)
 80189e8:	4293      	cmp	r3, r2
 80189ea:	d00f      	beq.n	8018a0c <TIM_Base_SetConfig+0x38>
 80189ec:	687b      	ldr	r3, [r7, #4]
 80189ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80189f2:	d00b      	beq.n	8018a0c <TIM_Base_SetConfig+0x38>
 80189f4:	687b      	ldr	r3, [r7, #4]
 80189f6:	4a3f      	ldr	r2, [pc, #252]	@ (8018af4 <TIM_Base_SetConfig+0x120>)
 80189f8:	4293      	cmp	r3, r2
 80189fa:	d007      	beq.n	8018a0c <TIM_Base_SetConfig+0x38>
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	4a3e      	ldr	r2, [pc, #248]	@ (8018af8 <TIM_Base_SetConfig+0x124>)
 8018a00:	4293      	cmp	r3, r2
 8018a02:	d003      	beq.n	8018a0c <TIM_Base_SetConfig+0x38>
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	4a3d      	ldr	r2, [pc, #244]	@ (8018afc <TIM_Base_SetConfig+0x128>)
 8018a08:	4293      	cmp	r3, r2
 8018a0a:	d108      	bne.n	8018a1e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8018a0c:	68fb      	ldr	r3, [r7, #12]
 8018a0e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8018a12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8018a14:	683b      	ldr	r3, [r7, #0]
 8018a16:	685b      	ldr	r3, [r3, #4]
 8018a18:	68fa      	ldr	r2, [r7, #12]
 8018a1a:	4313      	orrs	r3, r2
 8018a1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8018a1e:	687b      	ldr	r3, [r7, #4]
 8018a20:	4a33      	ldr	r2, [pc, #204]	@ (8018af0 <TIM_Base_SetConfig+0x11c>)
 8018a22:	4293      	cmp	r3, r2
 8018a24:	d01b      	beq.n	8018a5e <TIM_Base_SetConfig+0x8a>
 8018a26:	687b      	ldr	r3, [r7, #4]
 8018a28:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8018a2c:	d017      	beq.n	8018a5e <TIM_Base_SetConfig+0x8a>
 8018a2e:	687b      	ldr	r3, [r7, #4]
 8018a30:	4a30      	ldr	r2, [pc, #192]	@ (8018af4 <TIM_Base_SetConfig+0x120>)
 8018a32:	4293      	cmp	r3, r2
 8018a34:	d013      	beq.n	8018a5e <TIM_Base_SetConfig+0x8a>
 8018a36:	687b      	ldr	r3, [r7, #4]
 8018a38:	4a2f      	ldr	r2, [pc, #188]	@ (8018af8 <TIM_Base_SetConfig+0x124>)
 8018a3a:	4293      	cmp	r3, r2
 8018a3c:	d00f      	beq.n	8018a5e <TIM_Base_SetConfig+0x8a>
 8018a3e:	687b      	ldr	r3, [r7, #4]
 8018a40:	4a2e      	ldr	r2, [pc, #184]	@ (8018afc <TIM_Base_SetConfig+0x128>)
 8018a42:	4293      	cmp	r3, r2
 8018a44:	d00b      	beq.n	8018a5e <TIM_Base_SetConfig+0x8a>
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	4a2d      	ldr	r2, [pc, #180]	@ (8018b00 <TIM_Base_SetConfig+0x12c>)
 8018a4a:	4293      	cmp	r3, r2
 8018a4c:	d007      	beq.n	8018a5e <TIM_Base_SetConfig+0x8a>
 8018a4e:	687b      	ldr	r3, [r7, #4]
 8018a50:	4a2c      	ldr	r2, [pc, #176]	@ (8018b04 <TIM_Base_SetConfig+0x130>)
 8018a52:	4293      	cmp	r3, r2
 8018a54:	d003      	beq.n	8018a5e <TIM_Base_SetConfig+0x8a>
 8018a56:	687b      	ldr	r3, [r7, #4]
 8018a58:	4a2b      	ldr	r2, [pc, #172]	@ (8018b08 <TIM_Base_SetConfig+0x134>)
 8018a5a:	4293      	cmp	r3, r2
 8018a5c:	d108      	bne.n	8018a70 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8018a5e:	68fb      	ldr	r3, [r7, #12]
 8018a60:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8018a64:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8018a66:	683b      	ldr	r3, [r7, #0]
 8018a68:	68db      	ldr	r3, [r3, #12]
 8018a6a:	68fa      	ldr	r2, [r7, #12]
 8018a6c:	4313      	orrs	r3, r2
 8018a6e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8018a70:	68fb      	ldr	r3, [r7, #12]
 8018a72:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8018a76:	683b      	ldr	r3, [r7, #0]
 8018a78:	695b      	ldr	r3, [r3, #20]
 8018a7a:	4313      	orrs	r3, r2
 8018a7c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8018a7e:	687b      	ldr	r3, [r7, #4]
 8018a80:	68fa      	ldr	r2, [r7, #12]
 8018a82:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8018a84:	683b      	ldr	r3, [r7, #0]
 8018a86:	689a      	ldr	r2, [r3, #8]
 8018a88:	687b      	ldr	r3, [r7, #4]
 8018a8a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8018a8c:	683b      	ldr	r3, [r7, #0]
 8018a8e:	681a      	ldr	r2, [r3, #0]
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8018a94:	687b      	ldr	r3, [r7, #4]
 8018a96:	4a16      	ldr	r2, [pc, #88]	@ (8018af0 <TIM_Base_SetConfig+0x11c>)
 8018a98:	4293      	cmp	r3, r2
 8018a9a:	d00f      	beq.n	8018abc <TIM_Base_SetConfig+0xe8>
 8018a9c:	687b      	ldr	r3, [r7, #4]
 8018a9e:	4a17      	ldr	r2, [pc, #92]	@ (8018afc <TIM_Base_SetConfig+0x128>)
 8018aa0:	4293      	cmp	r3, r2
 8018aa2:	d00b      	beq.n	8018abc <TIM_Base_SetConfig+0xe8>
 8018aa4:	687b      	ldr	r3, [r7, #4]
 8018aa6:	4a16      	ldr	r2, [pc, #88]	@ (8018b00 <TIM_Base_SetConfig+0x12c>)
 8018aa8:	4293      	cmp	r3, r2
 8018aaa:	d007      	beq.n	8018abc <TIM_Base_SetConfig+0xe8>
 8018aac:	687b      	ldr	r3, [r7, #4]
 8018aae:	4a15      	ldr	r2, [pc, #84]	@ (8018b04 <TIM_Base_SetConfig+0x130>)
 8018ab0:	4293      	cmp	r3, r2
 8018ab2:	d003      	beq.n	8018abc <TIM_Base_SetConfig+0xe8>
 8018ab4:	687b      	ldr	r3, [r7, #4]
 8018ab6:	4a14      	ldr	r2, [pc, #80]	@ (8018b08 <TIM_Base_SetConfig+0x134>)
 8018ab8:	4293      	cmp	r3, r2
 8018aba:	d103      	bne.n	8018ac4 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8018abc:	683b      	ldr	r3, [r7, #0]
 8018abe:	691a      	ldr	r2, [r3, #16]
 8018ac0:	687b      	ldr	r3, [r7, #4]
 8018ac2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2201      	movs	r2, #1
 8018ac8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8018aca:	687b      	ldr	r3, [r7, #4]
 8018acc:	691b      	ldr	r3, [r3, #16]
 8018ace:	f003 0301 	and.w	r3, r3, #1
 8018ad2:	2b01      	cmp	r3, #1
 8018ad4:	d105      	bne.n	8018ae2 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	691b      	ldr	r3, [r3, #16]
 8018ada:	f023 0201 	bic.w	r2, r3, #1
 8018ade:	687b      	ldr	r3, [r7, #4]
 8018ae0:	611a      	str	r2, [r3, #16]
  }
}
 8018ae2:	bf00      	nop
 8018ae4:	3714      	adds	r7, #20
 8018ae6:	46bd      	mov	sp, r7
 8018ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018aec:	4770      	bx	lr
 8018aee:	bf00      	nop
 8018af0:	40012c00 	.word	0x40012c00
 8018af4:	40000400 	.word	0x40000400
 8018af8:	40000800 	.word	0x40000800
 8018afc:	40013400 	.word	0x40013400
 8018b00:	40014000 	.word	0x40014000
 8018b04:	40014400 	.word	0x40014400
 8018b08:	40014800 	.word	0x40014800

08018b0c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8018b0c:	b480      	push	{r7}
 8018b0e:	b083      	sub	sp, #12
 8018b10:	af00      	add	r7, sp, #0
 8018b12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8018b14:	bf00      	nop
 8018b16:	370c      	adds	r7, #12
 8018b18:	46bd      	mov	sp, r7
 8018b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b1e:	4770      	bx	lr

08018b20 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8018b20:	b480      	push	{r7}
 8018b22:	b083      	sub	sp, #12
 8018b24:	af00      	add	r7, sp, #0
 8018b26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8018b28:	bf00      	nop
 8018b2a:	370c      	adds	r7, #12
 8018b2c:	46bd      	mov	sp, r7
 8018b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b32:	4770      	bx	lr

08018b34 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8018b34:	b480      	push	{r7}
 8018b36:	b083      	sub	sp, #12
 8018b38:	af00      	add	r7, sp, #0
 8018b3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8018b3c:	bf00      	nop
 8018b3e:	370c      	adds	r7, #12
 8018b40:	46bd      	mov	sp, r7
 8018b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b46:	4770      	bx	lr

08018b48 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8018b48:	b480      	push	{r7}
 8018b4a:	b083      	sub	sp, #12
 8018b4c:	af00      	add	r7, sp, #0
 8018b4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8018b50:	bf00      	nop
 8018b52:	370c      	adds	r7, #12
 8018b54:	46bd      	mov	sp, r7
 8018b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b5a:	4770      	bx	lr

08018b5c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8018b5c:	b480      	push	{r7}
 8018b5e:	b083      	sub	sp, #12
 8018b60:	af00      	add	r7, sp, #0
 8018b62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8018b64:	bf00      	nop
 8018b66:	370c      	adds	r7, #12
 8018b68:	46bd      	mov	sp, r7
 8018b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b6e:	4770      	bx	lr

08018b70 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8018b70:	b480      	push	{r7}
 8018b72:	b083      	sub	sp, #12
 8018b74:	af00      	add	r7, sp, #0
 8018b76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8018b78:	bf00      	nop
 8018b7a:	370c      	adds	r7, #12
 8018b7c:	46bd      	mov	sp, r7
 8018b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b82:	4770      	bx	lr

08018b84 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8018b84:	b480      	push	{r7}
 8018b86:	b083      	sub	sp, #12
 8018b88:	af00      	add	r7, sp, #0
 8018b8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8018b8c:	bf00      	nop
 8018b8e:	370c      	adds	r7, #12
 8018b90:	46bd      	mov	sp, r7
 8018b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018b96:	4770      	bx	lr

08018b98 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8018ba0:	687b      	ldr	r3, [r7, #4]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d101      	bne.n	8018baa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	e083      	b.n	8018cb2 <HAL_UART_Init+0x11a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8018baa:	687b      	ldr	r3, [r7, #4]
 8018bac:	699b      	ldr	r3, [r3, #24]
 8018bae:	2b00      	cmp	r3, #0
 8018bb0:	d01e      	beq.n	8018bf0 <HAL_UART_Init+0x58>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8018bb2:	687b      	ldr	r3, [r7, #4]
 8018bb4:	681b      	ldr	r3, [r3, #0]
 8018bb6:	4a41      	ldr	r2, [pc, #260]	@ (8018cbc <HAL_UART_Init+0x124>)
 8018bb8:	4293      	cmp	r3, r2
 8018bba:	d037      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018bbc:	687b      	ldr	r3, [r7, #4]
 8018bbe:	681b      	ldr	r3, [r3, #0]
 8018bc0:	4a3f      	ldr	r2, [pc, #252]	@ (8018cc0 <HAL_UART_Init+0x128>)
 8018bc2:	4293      	cmp	r3, r2
 8018bc4:	d032      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018bc6:	687b      	ldr	r3, [r7, #4]
 8018bc8:	681b      	ldr	r3, [r3, #0]
 8018bca:	4a3e      	ldr	r2, [pc, #248]	@ (8018cc4 <HAL_UART_Init+0x12c>)
 8018bcc:	4293      	cmp	r3, r2
 8018bce:	d02d      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018bd0:	687b      	ldr	r3, [r7, #4]
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	4a3c      	ldr	r2, [pc, #240]	@ (8018cc8 <HAL_UART_Init+0x130>)
 8018bd6:	4293      	cmp	r3, r2
 8018bd8:	d028      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018bda:	687b      	ldr	r3, [r7, #4]
 8018bdc:	681b      	ldr	r3, [r3, #0]
 8018bde:	4a3b      	ldr	r2, [pc, #236]	@ (8018ccc <HAL_UART_Init+0x134>)
 8018be0:	4293      	cmp	r3, r2
 8018be2:	d023      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018be4:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8018be8:	4839      	ldr	r0, [pc, #228]	@ (8018cd0 <HAL_UART_Init+0x138>)
 8018bea:	f7f9 fc63 	bl	80124b4 <assert_failed>
 8018bee:	e01d      	b.n	8018c2c <HAL_UART_Init+0x94>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8018bf0:	687b      	ldr	r3, [r7, #4]
 8018bf2:	681b      	ldr	r3, [r3, #0]
 8018bf4:	4a31      	ldr	r2, [pc, #196]	@ (8018cbc <HAL_UART_Init+0x124>)
 8018bf6:	4293      	cmp	r3, r2
 8018bf8:	d018      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018bfa:	687b      	ldr	r3, [r7, #4]
 8018bfc:	681b      	ldr	r3, [r3, #0]
 8018bfe:	4a30      	ldr	r2, [pc, #192]	@ (8018cc0 <HAL_UART_Init+0x128>)
 8018c00:	4293      	cmp	r3, r2
 8018c02:	d013      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018c04:	687b      	ldr	r3, [r7, #4]
 8018c06:	681b      	ldr	r3, [r3, #0]
 8018c08:	4a2e      	ldr	r2, [pc, #184]	@ (8018cc4 <HAL_UART_Init+0x12c>)
 8018c0a:	4293      	cmp	r3, r2
 8018c0c:	d00e      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018c0e:	687b      	ldr	r3, [r7, #4]
 8018c10:	681b      	ldr	r3, [r3, #0]
 8018c12:	4a2d      	ldr	r2, [pc, #180]	@ (8018cc8 <HAL_UART_Init+0x130>)
 8018c14:	4293      	cmp	r3, r2
 8018c16:	d009      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018c18:	687b      	ldr	r3, [r7, #4]
 8018c1a:	681b      	ldr	r3, [r3, #0]
 8018c1c:	4a2b      	ldr	r2, [pc, #172]	@ (8018ccc <HAL_UART_Init+0x134>)
 8018c1e:	4293      	cmp	r3, r2
 8018c20:	d004      	beq.n	8018c2c <HAL_UART_Init+0x94>
 8018c22:	f240 1143 	movw	r1, #323	@ 0x143
 8018c26:	482a      	ldr	r0, [pc, #168]	@ (8018cd0 <HAL_UART_Init+0x138>)
 8018c28:	f7f9 fc44 	bl	80124b4 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8018c2c:	687b      	ldr	r3, [r7, #4]
 8018c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018c32:	2b00      	cmp	r3, #0
 8018c34:	d106      	bne.n	8018c44 <HAL_UART_Init+0xac>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8018c36:	687b      	ldr	r3, [r7, #4]
 8018c38:	2200      	movs	r2, #0
 8018c3a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8018c3e:	6878      	ldr	r0, [r7, #4]
 8018c40:	f7f9 fea8 	bl	8012994 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	2224      	movs	r2, #36	@ 0x24
 8018c48:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	681b      	ldr	r3, [r3, #0]
 8018c50:	681a      	ldr	r2, [r3, #0]
 8018c52:	687b      	ldr	r3, [r7, #4]
 8018c54:	681b      	ldr	r3, [r3, #0]
 8018c56:	f022 0201 	bic.w	r2, r2, #1
 8018c5a:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8018c5c:	687b      	ldr	r3, [r7, #4]
 8018c5e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018c60:	2b00      	cmp	r3, #0
 8018c62:	d002      	beq.n	8018c6a <HAL_UART_Init+0xd2>
  {
    UART_AdvFeatureConfig(huart);
 8018c64:	6878      	ldr	r0, [r7, #4]
 8018c66:	f001 f801 	bl	8019c6c <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8018c6a:	6878      	ldr	r0, [r7, #4]
 8018c6c:	f000 fc50 	bl	8019510 <UART_SetConfig>
 8018c70:	4603      	mov	r3, r0
 8018c72:	2b01      	cmp	r3, #1
 8018c74:	d101      	bne.n	8018c7a <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
 8018c76:	2301      	movs	r3, #1
 8018c78:	e01b      	b.n	8018cb2 <HAL_UART_Init+0x11a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8018c7a:	687b      	ldr	r3, [r7, #4]
 8018c7c:	681b      	ldr	r3, [r3, #0]
 8018c7e:	685a      	ldr	r2, [r3, #4]
 8018c80:	687b      	ldr	r3, [r7, #4]
 8018c82:	681b      	ldr	r3, [r3, #0]
 8018c84:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8018c88:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8018c8a:	687b      	ldr	r3, [r7, #4]
 8018c8c:	681b      	ldr	r3, [r3, #0]
 8018c8e:	689a      	ldr	r2, [r3, #8]
 8018c90:	687b      	ldr	r3, [r7, #4]
 8018c92:	681b      	ldr	r3, [r3, #0]
 8018c94:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8018c98:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8018c9a:	687b      	ldr	r3, [r7, #4]
 8018c9c:	681b      	ldr	r3, [r3, #0]
 8018c9e:	681a      	ldr	r2, [r3, #0]
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	f042 0201 	orr.w	r2, r2, #1
 8018ca8:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8018caa:	6878      	ldr	r0, [r7, #4]
 8018cac:	f001 f936 	bl	8019f1c <UART_CheckIdleState>
 8018cb0:	4603      	mov	r3, r0
}
 8018cb2:	4618      	mov	r0, r3
 8018cb4:	3708      	adds	r7, #8
 8018cb6:	46bd      	mov	sp, r7
 8018cb8:	bd80      	pop	{r7, pc}
 8018cba:	bf00      	nop
 8018cbc:	40013800 	.word	0x40013800
 8018cc0:	40004400 	.word	0x40004400
 8018cc4:	40004800 	.word	0x40004800
 8018cc8:	40004c00 	.word	0x40004c00
 8018ccc:	40008000 	.word	0x40008000
 8018cd0:	0801df08 	.word	0x0801df08

08018cd4 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	b08a      	sub	sp, #40	@ 0x28
 8018cd8:	af02      	add	r7, sp, #8
 8018cda:	60f8      	str	r0, [r7, #12]
 8018cdc:	60b9      	str	r1, [r7, #8]
 8018cde:	603b      	str	r3, [r7, #0]
 8018ce0:	4613      	mov	r3, r2
 8018ce2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8018ce4:	68fb      	ldr	r3, [r7, #12]
 8018ce6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8018cea:	2b20      	cmp	r3, #32
 8018cec:	d17b      	bne.n	8018de6 <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8018cee:	68bb      	ldr	r3, [r7, #8]
 8018cf0:	2b00      	cmp	r3, #0
 8018cf2:	d002      	beq.n	8018cfa <HAL_UART_Transmit+0x26>
 8018cf4:	88fb      	ldrh	r3, [r7, #6]
 8018cf6:	2b00      	cmp	r3, #0
 8018cf8:	d101      	bne.n	8018cfe <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8018cfa:	2301      	movs	r3, #1
 8018cfc:	e074      	b.n	8018de8 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8018cfe:	68fb      	ldr	r3, [r7, #12]
 8018d00:	2200      	movs	r2, #0
 8018d02:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8018d06:	68fb      	ldr	r3, [r7, #12]
 8018d08:	2221      	movs	r2, #33	@ 0x21
 8018d0a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8018d0e:	f7f9 fef5 	bl	8012afc <HAL_GetTick>
 8018d12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8018d14:	68fb      	ldr	r3, [r7, #12]
 8018d16:	88fa      	ldrh	r2, [r7, #6]
 8018d18:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8018d1c:	68fb      	ldr	r3, [r7, #12]
 8018d1e:	88fa      	ldrh	r2, [r7, #6]
 8018d20:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8018d24:	68fb      	ldr	r3, [r7, #12]
 8018d26:	689b      	ldr	r3, [r3, #8]
 8018d28:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8018d2c:	d108      	bne.n	8018d40 <HAL_UART_Transmit+0x6c>
 8018d2e:	68fb      	ldr	r3, [r7, #12]
 8018d30:	691b      	ldr	r3, [r3, #16]
 8018d32:	2b00      	cmp	r3, #0
 8018d34:	d104      	bne.n	8018d40 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8018d36:	2300      	movs	r3, #0
 8018d38:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8018d3a:	68bb      	ldr	r3, [r7, #8]
 8018d3c:	61bb      	str	r3, [r7, #24]
 8018d3e:	e003      	b.n	8018d48 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8018d40:	68bb      	ldr	r3, [r7, #8]
 8018d42:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8018d44:	2300      	movs	r3, #0
 8018d46:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8018d48:	e030      	b.n	8018dac <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8018d4a:	683b      	ldr	r3, [r7, #0]
 8018d4c:	9300      	str	r3, [sp, #0]
 8018d4e:	697b      	ldr	r3, [r7, #20]
 8018d50:	2200      	movs	r2, #0
 8018d52:	2180      	movs	r1, #128	@ 0x80
 8018d54:	68f8      	ldr	r0, [r7, #12]
 8018d56:	f001 f98b 	bl	801a070 <UART_WaitOnFlagUntilTimeout>
 8018d5a:	4603      	mov	r3, r0
 8018d5c:	2b00      	cmp	r3, #0
 8018d5e:	d005      	beq.n	8018d6c <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8018d60:	68fb      	ldr	r3, [r7, #12]
 8018d62:	2220      	movs	r2, #32
 8018d64:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8018d68:	2303      	movs	r3, #3
 8018d6a:	e03d      	b.n	8018de8 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8018d6c:	69fb      	ldr	r3, [r7, #28]
 8018d6e:	2b00      	cmp	r3, #0
 8018d70:	d10b      	bne.n	8018d8a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8018d72:	69bb      	ldr	r3, [r7, #24]
 8018d74:	881b      	ldrh	r3, [r3, #0]
 8018d76:	461a      	mov	r2, r3
 8018d78:	68fb      	ldr	r3, [r7, #12]
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8018d80:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8018d82:	69bb      	ldr	r3, [r7, #24]
 8018d84:	3302      	adds	r3, #2
 8018d86:	61bb      	str	r3, [r7, #24]
 8018d88:	e007      	b.n	8018d9a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8018d8a:	69fb      	ldr	r3, [r7, #28]
 8018d8c:	781a      	ldrb	r2, [r3, #0]
 8018d8e:	68fb      	ldr	r3, [r7, #12]
 8018d90:	681b      	ldr	r3, [r3, #0]
 8018d92:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8018d94:	69fb      	ldr	r3, [r7, #28]
 8018d96:	3301      	adds	r3, #1
 8018d98:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018da0:	b29b      	uxth	r3, r3
 8018da2:	3b01      	subs	r3, #1
 8018da4:	b29a      	uxth	r2, r3
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8018db2:	b29b      	uxth	r3, r3
 8018db4:	2b00      	cmp	r3, #0
 8018db6:	d1c8      	bne.n	8018d4a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8018db8:	683b      	ldr	r3, [r7, #0]
 8018dba:	9300      	str	r3, [sp, #0]
 8018dbc:	697b      	ldr	r3, [r7, #20]
 8018dbe:	2200      	movs	r2, #0
 8018dc0:	2140      	movs	r1, #64	@ 0x40
 8018dc2:	68f8      	ldr	r0, [r7, #12]
 8018dc4:	f001 f954 	bl	801a070 <UART_WaitOnFlagUntilTimeout>
 8018dc8:	4603      	mov	r3, r0
 8018dca:	2b00      	cmp	r3, #0
 8018dcc:	d005      	beq.n	8018dda <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8018dce:	68fb      	ldr	r3, [r7, #12]
 8018dd0:	2220      	movs	r2, #32
 8018dd2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8018dd6:	2303      	movs	r3, #3
 8018dd8:	e006      	b.n	8018de8 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8018dda:	68fb      	ldr	r3, [r7, #12]
 8018ddc:	2220      	movs	r2, #32
 8018dde:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8018de2:	2300      	movs	r3, #0
 8018de4:	e000      	b.n	8018de8 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8018de6:	2302      	movs	r3, #2
  }
}
 8018de8:	4618      	mov	r0, r3
 8018dea:	3720      	adds	r7, #32
 8018dec:	46bd      	mov	sp, r7
 8018dee:	bd80      	pop	{r7, pc}

08018df0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b08a      	sub	sp, #40	@ 0x28
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	60f8      	str	r0, [r7, #12]
 8018df8:	60b9      	str	r1, [r7, #8]
 8018dfa:	4613      	mov	r3, r2
 8018dfc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8018dfe:	68fb      	ldr	r3, [r7, #12]
 8018e00:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8018e04:	2b20      	cmp	r3, #32
 8018e06:	d137      	bne.n	8018e78 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8018e08:	68bb      	ldr	r3, [r7, #8]
 8018e0a:	2b00      	cmp	r3, #0
 8018e0c:	d002      	beq.n	8018e14 <HAL_UART_Receive_IT+0x24>
 8018e0e:	88fb      	ldrh	r3, [r7, #6]
 8018e10:	2b00      	cmp	r3, #0
 8018e12:	d101      	bne.n	8018e18 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8018e14:	2301      	movs	r3, #1
 8018e16:	e030      	b.n	8018e7a <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8018e18:	68fb      	ldr	r3, [r7, #12]
 8018e1a:	2200      	movs	r2, #0
 8018e1c:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8018e1e:	68fb      	ldr	r3, [r7, #12]
 8018e20:	681b      	ldr	r3, [r3, #0]
 8018e22:	4a18      	ldr	r2, [pc, #96]	@ (8018e84 <HAL_UART_Receive_IT+0x94>)
 8018e24:	4293      	cmp	r3, r2
 8018e26:	d01f      	beq.n	8018e68 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8018e28:	68fb      	ldr	r3, [r7, #12]
 8018e2a:	681b      	ldr	r3, [r3, #0]
 8018e2c:	685b      	ldr	r3, [r3, #4]
 8018e2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8018e32:	2b00      	cmp	r3, #0
 8018e34:	d018      	beq.n	8018e68 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8018e36:	68fb      	ldr	r3, [r7, #12]
 8018e38:	681b      	ldr	r3, [r3, #0]
 8018e3a:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8018e3c:	697b      	ldr	r3, [r7, #20]
 8018e3e:	e853 3f00 	ldrex	r3, [r3]
 8018e42:	613b      	str	r3, [r7, #16]
   return(result);
 8018e44:	693b      	ldr	r3, [r7, #16]
 8018e46:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8018e4a:	627b      	str	r3, [r7, #36]	@ 0x24
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	681b      	ldr	r3, [r3, #0]
 8018e50:	461a      	mov	r2, r3
 8018e52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8018e54:	623b      	str	r3, [r7, #32]
 8018e56:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8018e58:	69f9      	ldr	r1, [r7, #28]
 8018e5a:	6a3a      	ldr	r2, [r7, #32]
 8018e5c:	e841 2300 	strex	r3, r2, [r1]
 8018e60:	61bb      	str	r3, [r7, #24]
   return(result);
 8018e62:	69bb      	ldr	r3, [r7, #24]
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d1e6      	bne.n	8018e36 <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8018e68:	88fb      	ldrh	r3, [r7, #6]
 8018e6a:	461a      	mov	r2, r3
 8018e6c:	68b9      	ldr	r1, [r7, #8]
 8018e6e:	68f8      	ldr	r0, [r7, #12]
 8018e70:	f001 f96c 	bl	801a14c <UART_Start_Receive_IT>
 8018e74:	4603      	mov	r3, r0
 8018e76:	e000      	b.n	8018e7a <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8018e78:	2302      	movs	r3, #2
  }
}
 8018e7a:	4618      	mov	r0, r3
 8018e7c:	3728      	adds	r7, #40	@ 0x28
 8018e7e:	46bd      	mov	sp, r7
 8018e80:	bd80      	pop	{r7, pc}
 8018e82:	bf00      	nop
 8018e84:	40008000 	.word	0x40008000

08018e88 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8018e88:	b580      	push	{r7, lr}
 8018e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8018e8c:	af00      	add	r7, sp, #0
 8018e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8018e90:	687b      	ldr	r3, [r7, #4]
 8018e92:	681b      	ldr	r3, [r3, #0]
 8018e94:	69db      	ldr	r3, [r3, #28]
 8018e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8018e9a:	687b      	ldr	r3, [r7, #4]
 8018e9c:	681b      	ldr	r3, [r3, #0]
 8018e9e:	681b      	ldr	r3, [r3, #0]
 8018ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8018ea4:	687b      	ldr	r3, [r7, #4]
 8018ea6:	681b      	ldr	r3, [r3, #0]
 8018ea8:	689b      	ldr	r3, [r3, #8]
 8018eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8018eae:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8018eb2:	f640 030f 	movw	r3, #2063	@ 0x80f
 8018eb6:	4013      	ands	r3, r2
 8018eb8:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8018ebc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018ec0:	2b00      	cmp	r3, #0
 8018ec2:	d11b      	bne.n	8018efc <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8018ec4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018ec8:	f003 0320 	and.w	r3, r3, #32
 8018ecc:	2b00      	cmp	r3, #0
 8018ece:	d015      	beq.n	8018efc <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8018ed0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018ed4:	f003 0320 	and.w	r3, r3, #32
 8018ed8:	2b00      	cmp	r3, #0
 8018eda:	d105      	bne.n	8018ee8 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8018edc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018ee0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8018ee4:	2b00      	cmp	r3, #0
 8018ee6:	d009      	beq.n	8018efc <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8018ee8:	687b      	ldr	r3, [r7, #4]
 8018eea:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018eec:	2b00      	cmp	r3, #0
 8018eee:	f000 82e3 	beq.w	80194b8 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8018ef2:	687b      	ldr	r3, [r7, #4]
 8018ef4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8018ef6:	6878      	ldr	r0, [r7, #4]
 8018ef8:	4798      	blx	r3
      }
      return;
 8018efa:	e2dd      	b.n	80194b8 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8018efc:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8018f00:	2b00      	cmp	r3, #0
 8018f02:	f000 8123 	beq.w	801914c <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8018f06:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018f0a:	4b8d      	ldr	r3, [pc, #564]	@ (8019140 <HAL_UART_IRQHandler+0x2b8>)
 8018f0c:	4013      	ands	r3, r2
 8018f0e:	2b00      	cmp	r3, #0
 8018f10:	d106      	bne.n	8018f20 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8018f12:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8018f16:	4b8b      	ldr	r3, [pc, #556]	@ (8019144 <HAL_UART_IRQHandler+0x2bc>)
 8018f18:	4013      	ands	r3, r2
 8018f1a:	2b00      	cmp	r3, #0
 8018f1c:	f000 8116 	beq.w	801914c <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8018f20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018f24:	f003 0301 	and.w	r3, r3, #1
 8018f28:	2b00      	cmp	r3, #0
 8018f2a:	d011      	beq.n	8018f50 <HAL_UART_IRQHandler+0xc8>
 8018f2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018f30:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8018f34:	2b00      	cmp	r3, #0
 8018f36:	d00b      	beq.n	8018f50 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8018f38:	687b      	ldr	r3, [r7, #4]
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	2201      	movs	r2, #1
 8018f3e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8018f40:	687b      	ldr	r3, [r7, #4]
 8018f42:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018f46:	f043 0201 	orr.w	r2, r3, #1
 8018f4a:	687b      	ldr	r3, [r7, #4]
 8018f4c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018f50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018f54:	f003 0302 	and.w	r3, r3, #2
 8018f58:	2b00      	cmp	r3, #0
 8018f5a:	d011      	beq.n	8018f80 <HAL_UART_IRQHandler+0xf8>
 8018f5c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018f60:	f003 0301 	and.w	r3, r3, #1
 8018f64:	2b00      	cmp	r3, #0
 8018f66:	d00b      	beq.n	8018f80 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8018f68:	687b      	ldr	r3, [r7, #4]
 8018f6a:	681b      	ldr	r3, [r3, #0]
 8018f6c:	2202      	movs	r2, #2
 8018f6e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8018f70:	687b      	ldr	r3, [r7, #4]
 8018f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018f76:	f043 0204 	orr.w	r2, r3, #4
 8018f7a:	687b      	ldr	r3, [r7, #4]
 8018f7c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8018f80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018f84:	f003 0304 	and.w	r3, r3, #4
 8018f88:	2b00      	cmp	r3, #0
 8018f8a:	d011      	beq.n	8018fb0 <HAL_UART_IRQHandler+0x128>
 8018f8c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8018f90:	f003 0301 	and.w	r3, r3, #1
 8018f94:	2b00      	cmp	r3, #0
 8018f96:	d00b      	beq.n	8018fb0 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	681b      	ldr	r3, [r3, #0]
 8018f9c:	2204      	movs	r2, #4
 8018f9e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8018fa0:	687b      	ldr	r3, [r7, #4]
 8018fa2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018fa6:	f043 0202 	orr.w	r2, r3, #2
 8018faa:	687b      	ldr	r3, [r7, #4]
 8018fac:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8018fb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018fb4:	f003 0308 	and.w	r3, r3, #8
 8018fb8:	2b00      	cmp	r3, #0
 8018fba:	d017      	beq.n	8018fec <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018fbc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018fc0:	f003 0320 	and.w	r3, r3, #32
 8018fc4:	2b00      	cmp	r3, #0
 8018fc6:	d105      	bne.n	8018fd4 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8018fc8:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8018fcc:	4b5c      	ldr	r3, [pc, #368]	@ (8019140 <HAL_UART_IRQHandler+0x2b8>)
 8018fce:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8018fd0:	2b00      	cmp	r3, #0
 8018fd2:	d00b      	beq.n	8018fec <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8018fd4:	687b      	ldr	r3, [r7, #4]
 8018fd6:	681b      	ldr	r3, [r3, #0]
 8018fd8:	2208      	movs	r2, #8
 8018fda:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8018fdc:	687b      	ldr	r3, [r7, #4]
 8018fde:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8018fe2:	f043 0208 	orr.w	r2, r3, #8
 8018fe6:	687b      	ldr	r3, [r7, #4]
 8018fe8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8018fec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8018ff0:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8018ff4:	2b00      	cmp	r3, #0
 8018ff6:	d012      	beq.n	801901e <HAL_UART_IRQHandler+0x196>
 8018ff8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8018ffc:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8019000:	2b00      	cmp	r3, #0
 8019002:	d00c      	beq.n	801901e <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8019004:	687b      	ldr	r3, [r7, #4]
 8019006:	681b      	ldr	r3, [r3, #0]
 8019008:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801900c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 801900e:	687b      	ldr	r3, [r7, #4]
 8019010:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019014:	f043 0220 	orr.w	r2, r3, #32
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801901e:	687b      	ldr	r3, [r7, #4]
 8019020:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019024:	2b00      	cmp	r3, #0
 8019026:	f000 8249 	beq.w	80194bc <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 801902a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801902e:	f003 0320 	and.w	r3, r3, #32
 8019032:	2b00      	cmp	r3, #0
 8019034:	d013      	beq.n	801905e <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8019036:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801903a:	f003 0320 	and.w	r3, r3, #32
 801903e:	2b00      	cmp	r3, #0
 8019040:	d105      	bne.n	801904e <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8019042:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019046:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 801904a:	2b00      	cmp	r3, #0
 801904c:	d007      	beq.n	801905e <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 801904e:	687b      	ldr	r3, [r7, #4]
 8019050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8019052:	2b00      	cmp	r3, #0
 8019054:	d003      	beq.n	801905e <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8019056:	687b      	ldr	r3, [r7, #4]
 8019058:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801905a:	6878      	ldr	r0, [r7, #4]
 801905c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 801905e:	687b      	ldr	r3, [r7, #4]
 8019060:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8019064:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8019068:	687b      	ldr	r3, [r7, #4]
 801906a:	681b      	ldr	r3, [r3, #0]
 801906c:	689b      	ldr	r3, [r3, #8]
 801906e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019072:	2b40      	cmp	r3, #64	@ 0x40
 8019074:	d005      	beq.n	8019082 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8019076:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 801907a:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 801907e:	2b00      	cmp	r3, #0
 8019080:	d054      	beq.n	801912c <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8019082:	6878      	ldr	r0, [r7, #4]
 8019084:	f001 f984 	bl	801a390 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019088:	687b      	ldr	r3, [r7, #4]
 801908a:	681b      	ldr	r3, [r3, #0]
 801908c:	689b      	ldr	r3, [r3, #8]
 801908e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019092:	2b40      	cmp	r3, #64	@ 0x40
 8019094:	d146      	bne.n	8019124 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019096:	687b      	ldr	r3, [r7, #4]
 8019098:	681b      	ldr	r3, [r3, #0]
 801909a:	3308      	adds	r3, #8
 801909c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80190a0:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80190a4:	e853 3f00 	ldrex	r3, [r3]
 80190a8:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80190ac:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80190b0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80190b4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80190b8:	687b      	ldr	r3, [r7, #4]
 80190ba:	681b      	ldr	r3, [r3, #0]
 80190bc:	3308      	adds	r3, #8
 80190be:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80190c2:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80190c6:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80190ca:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80190ce:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80190d2:	e841 2300 	strex	r3, r2, [r1]
 80190d6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80190da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d1d9      	bne.n	8019096 <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80190e2:	687b      	ldr	r3, [r7, #4]
 80190e4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d017      	beq.n	801911c <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80190ec:	687b      	ldr	r3, [r7, #4]
 80190ee:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80190f2:	4a15      	ldr	r2, [pc, #84]	@ (8019148 <HAL_UART_IRQHandler+0x2c0>)
 80190f4:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80190f6:	687b      	ldr	r3, [r7, #4]
 80190f8:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80190fc:	4618      	mov	r0, r3
 80190fe:	f7fc fac8 	bl	8015692 <HAL_DMA_Abort_IT>
 8019102:	4603      	mov	r3, r0
 8019104:	2b00      	cmp	r3, #0
 8019106:	d019      	beq.n	801913c <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8019108:	687b      	ldr	r3, [r7, #4]
 801910a:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 801910e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019110:	687a      	ldr	r2, [r7, #4]
 8019112:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8019116:	4610      	mov	r0, r2
 8019118:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801911a:	e00f      	b.n	801913c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 801911c:	6878      	ldr	r0, [r7, #4]
 801911e:	f000 f9e1 	bl	80194e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8019122:	e00b      	b.n	801913c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8019124:	6878      	ldr	r0, [r7, #4]
 8019126:	f000 f9dd 	bl	80194e4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801912a:	e007      	b.n	801913c <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 801912c:	6878      	ldr	r0, [r7, #4]
 801912e:	f000 f9d9 	bl	80194e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2200      	movs	r2, #0
 8019136:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 801913a:	e1bf      	b.n	80194bc <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801913c:	bf00      	nop
    return;
 801913e:	e1bd      	b.n	80194bc <HAL_UART_IRQHandler+0x634>
 8019140:	10000001 	.word	0x10000001
 8019144:	04000120 	.word	0x04000120
 8019148:	0801a45d 	.word	0x0801a45d

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801914c:	687b      	ldr	r3, [r7, #4]
 801914e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8019150:	2b01      	cmp	r3, #1
 8019152:	f040 8153 	bne.w	80193fc <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8019156:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801915a:	f003 0310 	and.w	r3, r3, #16
 801915e:	2b00      	cmp	r3, #0
 8019160:	f000 814c 	beq.w	80193fc <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8019164:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019168:	f003 0310 	and.w	r3, r3, #16
 801916c:	2b00      	cmp	r3, #0
 801916e:	f000 8145 	beq.w	80193fc <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8019172:	687b      	ldr	r3, [r7, #4]
 8019174:	681b      	ldr	r3, [r3, #0]
 8019176:	2210      	movs	r2, #16
 8019178:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801917a:	687b      	ldr	r3, [r7, #4]
 801917c:	681b      	ldr	r3, [r3, #0]
 801917e:	689b      	ldr	r3, [r3, #8]
 8019180:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019184:	2b40      	cmp	r3, #64	@ 0x40
 8019186:	f040 80bb 	bne.w	8019300 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 801918a:	687b      	ldr	r3, [r7, #4]
 801918c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8019190:	681b      	ldr	r3, [r3, #0]
 8019192:	685b      	ldr	r3, [r3, #4]
 8019194:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8019198:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 801919c:	2b00      	cmp	r3, #0
 801919e:	f000 818f 	beq.w	80194c0 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80191a2:	687b      	ldr	r3, [r7, #4]
 80191a4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80191a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80191ac:	429a      	cmp	r2, r3
 80191ae:	f080 8187 	bcs.w	80194c0 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80191b2:	687b      	ldr	r3, [r7, #4]
 80191b4:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80191b8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80191bc:	687b      	ldr	r3, [r7, #4]
 80191be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80191c2:	681b      	ldr	r3, [r3, #0]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	f003 0320 	and.w	r3, r3, #32
 80191ca:	2b00      	cmp	r3, #0
 80191cc:	f040 8087 	bne.w	80192de <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80191d0:	687b      	ldr	r3, [r7, #4]
 80191d2:	681b      	ldr	r3, [r3, #0]
 80191d4:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80191d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80191dc:	e853 3f00 	ldrex	r3, [r3]
 80191e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80191e4:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80191e8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80191ec:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80191f0:	687b      	ldr	r3, [r7, #4]
 80191f2:	681b      	ldr	r3, [r3, #0]
 80191f4:	461a      	mov	r2, r3
 80191f6:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80191fa:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80191fe:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019202:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8019206:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801920a:	e841 2300 	strex	r3, r2, [r1]
 801920e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8019212:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8019216:	2b00      	cmp	r3, #0
 8019218:	d1da      	bne.n	80191d0 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801921a:	687b      	ldr	r3, [r7, #4]
 801921c:	681b      	ldr	r3, [r3, #0]
 801921e:	3308      	adds	r3, #8
 8019220:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019222:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8019224:	e853 3f00 	ldrex	r3, [r3]
 8019228:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801922a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801922c:	f023 0301 	bic.w	r3, r3, #1
 8019230:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8019234:	687b      	ldr	r3, [r7, #4]
 8019236:	681b      	ldr	r3, [r3, #0]
 8019238:	3308      	adds	r3, #8
 801923a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 801923e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8019242:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019244:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8019246:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801924a:	e841 2300 	strex	r3, r2, [r1]
 801924e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8019250:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8019252:	2b00      	cmp	r3, #0
 8019254:	d1e1      	bne.n	801921a <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	681b      	ldr	r3, [r3, #0]
 801925a:	3308      	adds	r3, #8
 801925c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801925e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8019260:	e853 3f00 	ldrex	r3, [r3]
 8019264:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8019266:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8019268:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801926c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8019270:	687b      	ldr	r3, [r7, #4]
 8019272:	681b      	ldr	r3, [r3, #0]
 8019274:	3308      	adds	r3, #8
 8019276:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 801927a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801927c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801927e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8019280:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8019282:	e841 2300 	strex	r3, r2, [r1]
 8019286:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8019288:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801928a:	2b00      	cmp	r3, #0
 801928c:	d1e3      	bne.n	8019256 <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 801928e:	687b      	ldr	r3, [r7, #4]
 8019290:	2220      	movs	r2, #32
 8019292:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8019296:	687b      	ldr	r3, [r7, #4]
 8019298:	2200      	movs	r2, #0
 801929a:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801929c:	687b      	ldr	r3, [r7, #4]
 801929e:	681b      	ldr	r3, [r3, #0]
 80192a0:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80192a2:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80192a4:	e853 3f00 	ldrex	r3, [r3]
 80192a8:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80192aa:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80192ac:	f023 0310 	bic.w	r3, r3, #16
 80192b0:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80192b4:	687b      	ldr	r3, [r7, #4]
 80192b6:	681b      	ldr	r3, [r3, #0]
 80192b8:	461a      	mov	r2, r3
 80192ba:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80192be:	65bb      	str	r3, [r7, #88]	@ 0x58
 80192c0:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80192c2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80192c4:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80192c6:	e841 2300 	strex	r3, r2, [r1]
 80192ca:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80192cc:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80192ce:	2b00      	cmp	r3, #0
 80192d0:	d1e4      	bne.n	801929c <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80192d2:	687b      	ldr	r3, [r7, #4]
 80192d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80192d8:	4618      	mov	r0, r3
 80192da:	f7fc f981 	bl	80155e0 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80192de:	687b      	ldr	r3, [r7, #4]
 80192e0:	2202      	movs	r2, #2
 80192e2:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80192e4:	687b      	ldr	r3, [r7, #4]
 80192e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80192ea:	687b      	ldr	r3, [r7, #4]
 80192ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80192f0:	b29b      	uxth	r3, r3
 80192f2:	1ad3      	subs	r3, r2, r3
 80192f4:	b29b      	uxth	r3, r3
 80192f6:	4619      	mov	r1, r3
 80192f8:	6878      	ldr	r0, [r7, #4]
 80192fa:	f000 f8fd 	bl	80194f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80192fe:	e0df      	b.n	80194c0 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8019300:	687b      	ldr	r3, [r7, #4]
 8019302:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8019306:	687b      	ldr	r3, [r7, #4]
 8019308:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801930c:	b29b      	uxth	r3, r3
 801930e:	1ad3      	subs	r3, r2, r3
 8019310:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8019314:	687b      	ldr	r3, [r7, #4]
 8019316:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801931a:	b29b      	uxth	r3, r3
 801931c:	2b00      	cmp	r3, #0
 801931e:	f000 80d1 	beq.w	80194c4 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8019322:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8019326:	2b00      	cmp	r3, #0
 8019328:	f000 80cc 	beq.w	80194c4 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801932c:	687b      	ldr	r3, [r7, #4]
 801932e:	681b      	ldr	r3, [r3, #0]
 8019330:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019332:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019334:	e853 3f00 	ldrex	r3, [r3]
 8019338:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801933a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801933c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019340:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8019344:	687b      	ldr	r3, [r7, #4]
 8019346:	681b      	ldr	r3, [r3, #0]
 8019348:	461a      	mov	r2, r3
 801934a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 801934e:	647b      	str	r3, [r7, #68]	@ 0x44
 8019350:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019352:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019354:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019356:	e841 2300 	strex	r3, r2, [r1]
 801935a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801935c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801935e:	2b00      	cmp	r3, #0
 8019360:	d1e4      	bne.n	801932c <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8019362:	687b      	ldr	r3, [r7, #4]
 8019364:	681b      	ldr	r3, [r3, #0]
 8019366:	3308      	adds	r3, #8
 8019368:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801936a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801936c:	e853 3f00 	ldrex	r3, [r3]
 8019370:	623b      	str	r3, [r7, #32]
   return(result);
 8019372:	6a3b      	ldr	r3, [r7, #32]
 8019374:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8019378:	f023 0301 	bic.w	r3, r3, #1
 801937c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8019380:	687b      	ldr	r3, [r7, #4]
 8019382:	681b      	ldr	r3, [r3, #0]
 8019384:	3308      	adds	r3, #8
 8019386:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 801938a:	633a      	str	r2, [r7, #48]	@ 0x30
 801938c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801938e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019390:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019392:	e841 2300 	strex	r3, r2, [r1]
 8019396:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801939a:	2b00      	cmp	r3, #0
 801939c:	d1e1      	bne.n	8019362 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801939e:	687b      	ldr	r3, [r7, #4]
 80193a0:	2220      	movs	r2, #32
 80193a2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80193a6:	687b      	ldr	r3, [r7, #4]
 80193a8:	2200      	movs	r2, #0
 80193aa:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80193ac:	687b      	ldr	r3, [r7, #4]
 80193ae:	2200      	movs	r2, #0
 80193b0:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80193b2:	687b      	ldr	r3, [r7, #4]
 80193b4:	681b      	ldr	r3, [r3, #0]
 80193b6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80193b8:	693b      	ldr	r3, [r7, #16]
 80193ba:	e853 3f00 	ldrex	r3, [r3]
 80193be:	60fb      	str	r3, [r7, #12]
   return(result);
 80193c0:	68fb      	ldr	r3, [r7, #12]
 80193c2:	f023 0310 	bic.w	r3, r3, #16
 80193c6:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80193ca:	687b      	ldr	r3, [r7, #4]
 80193cc:	681b      	ldr	r3, [r3, #0]
 80193ce:	461a      	mov	r2, r3
 80193d0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80193d4:	61fb      	str	r3, [r7, #28]
 80193d6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80193d8:	69b9      	ldr	r1, [r7, #24]
 80193da:	69fa      	ldr	r2, [r7, #28]
 80193dc:	e841 2300 	strex	r3, r2, [r1]
 80193e0:	617b      	str	r3, [r7, #20]
   return(result);
 80193e2:	697b      	ldr	r3, [r7, #20]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d1e4      	bne.n	80193b2 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80193e8:	687b      	ldr	r3, [r7, #4]
 80193ea:	2202      	movs	r2, #2
 80193ec:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80193ee:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80193f2:	4619      	mov	r1, r3
 80193f4:	6878      	ldr	r0, [r7, #4]
 80193f6:	f000 f87f 	bl	80194f8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80193fa:	e063      	b.n	80194c4 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80193fc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019400:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8019404:	2b00      	cmp	r3, #0
 8019406:	d00e      	beq.n	8019426 <HAL_UART_IRQHandler+0x59e>
 8019408:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801940c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8019410:	2b00      	cmp	r3, #0
 8019412:	d008      	beq.n	8019426 <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8019414:	687b      	ldr	r3, [r7, #4]
 8019416:	681b      	ldr	r3, [r3, #0]
 8019418:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 801941c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 801941e:	6878      	ldr	r0, [r7, #4]
 8019420:	f001 fd7a 	bl	801af18 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8019424:	e051      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8019426:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 801942a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801942e:	2b00      	cmp	r3, #0
 8019430:	d014      	beq.n	801945c <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8019432:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8019436:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801943a:	2b00      	cmp	r3, #0
 801943c:	d105      	bne.n	801944a <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 801943e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8019442:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019446:	2b00      	cmp	r3, #0
 8019448:	d008      	beq.n	801945c <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 801944a:	687b      	ldr	r3, [r7, #4]
 801944c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801944e:	2b00      	cmp	r3, #0
 8019450:	d03a      	beq.n	80194c8 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8019456:	6878      	ldr	r0, [r7, #4]
 8019458:	4798      	blx	r3
    }
    return;
 801945a:	e035      	b.n	80194c8 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 801945c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019460:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019464:	2b00      	cmp	r3, #0
 8019466:	d009      	beq.n	801947c <HAL_UART_IRQHandler+0x5f4>
 8019468:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801946c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019470:	2b00      	cmp	r3, #0
 8019472:	d003      	beq.n	801947c <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8019474:	6878      	ldr	r0, [r7, #4]
 8019476:	f001 f807 	bl	801a488 <UART_EndTransmit_IT>
    return;
 801947a:	e026      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 801947c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8019480:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8019484:	2b00      	cmp	r3, #0
 8019486:	d009      	beq.n	801949c <HAL_UART_IRQHandler+0x614>
 8019488:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801948c:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8019490:	2b00      	cmp	r3, #0
 8019492:	d003      	beq.n	801949c <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8019494:	6878      	ldr	r0, [r7, #4]
 8019496:	f001 fd53 	bl	801af40 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801949a:	e016      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 801949c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80194a0:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 80194a4:	2b00      	cmp	r3, #0
 80194a6:	d010      	beq.n	80194ca <HAL_UART_IRQHandler+0x642>
 80194a8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	da0c      	bge.n	80194ca <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80194b0:	6878      	ldr	r0, [r7, #4]
 80194b2:	f001 fd3b 	bl	801af2c <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80194b6:	e008      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
      return;
 80194b8:	bf00      	nop
 80194ba:	e006      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
    return;
 80194bc:	bf00      	nop
 80194be:	e004      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
      return;
 80194c0:	bf00      	nop
 80194c2:	e002      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
      return;
 80194c4:	bf00      	nop
 80194c6:	e000      	b.n	80194ca <HAL_UART_IRQHandler+0x642>
    return;
 80194c8:	bf00      	nop
  }
}
 80194ca:	37e8      	adds	r7, #232	@ 0xe8
 80194cc:	46bd      	mov	sp, r7
 80194ce:	bd80      	pop	{r7, pc}

080194d0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80194d0:	b480      	push	{r7}
 80194d2:	b083      	sub	sp, #12
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80194d8:	bf00      	nop
 80194da:	370c      	adds	r7, #12
 80194dc:	46bd      	mov	sp, r7
 80194de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194e2:	4770      	bx	lr

080194e4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80194e4:	b480      	push	{r7}
 80194e6:	b083      	sub	sp, #12
 80194e8:	af00      	add	r7, sp, #0
 80194ea:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80194ec:	bf00      	nop
 80194ee:	370c      	adds	r7, #12
 80194f0:	46bd      	mov	sp, r7
 80194f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80194f6:	4770      	bx	lr

080194f8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80194f8:	b480      	push	{r7}
 80194fa:	b083      	sub	sp, #12
 80194fc:	af00      	add	r7, sp, #0
 80194fe:	6078      	str	r0, [r7, #4]
 8019500:	460b      	mov	r3, r1
 8019502:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8019504:	bf00      	nop
 8019506:	370c      	adds	r7, #12
 8019508:	46bd      	mov	sp, r7
 801950a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801950e:	4770      	bx	lr

08019510 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8019510:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8019514:	b08c      	sub	sp, #48	@ 0x30
 8019516:	af00      	add	r7, sp, #0
 8019518:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 801951a:	2300      	movs	r3, #0
 801951c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8019520:	697b      	ldr	r3, [r7, #20]
 8019522:	685b      	ldr	r3, [r3, #4]
 8019524:	4a17      	ldr	r2, [pc, #92]	@ (8019584 <UART_SetConfig+0x74>)
 8019526:	4293      	cmp	r3, r2
 8019528:	d904      	bls.n	8019534 <UART_SetConfig+0x24>
 801952a:	f640 31c7 	movw	r1, #3015	@ 0xbc7
 801952e:	4816      	ldr	r0, [pc, #88]	@ (8019588 <UART_SetConfig+0x78>)
 8019530:	f7f8 ffc0 	bl	80124b4 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8019534:	697b      	ldr	r3, [r7, #20]
 8019536:	689b      	ldr	r3, [r3, #8]
 8019538:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801953c:	d00d      	beq.n	801955a <UART_SetConfig+0x4a>
 801953e:	697b      	ldr	r3, [r7, #20]
 8019540:	689b      	ldr	r3, [r3, #8]
 8019542:	2b00      	cmp	r3, #0
 8019544:	d009      	beq.n	801955a <UART_SetConfig+0x4a>
 8019546:	697b      	ldr	r3, [r7, #20]
 8019548:	689b      	ldr	r3, [r3, #8]
 801954a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801954e:	d004      	beq.n	801955a <UART_SetConfig+0x4a>
 8019550:	f640 31c8 	movw	r1, #3016	@ 0xbc8
 8019554:	480c      	ldr	r0, [pc, #48]	@ (8019588 <UART_SetConfig+0x78>)
 8019556:	f7f8 ffad 	bl	80124b4 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 801955a:	697b      	ldr	r3, [r7, #20]
 801955c:	681b      	ldr	r3, [r3, #0]
 801955e:	4a0b      	ldr	r2, [pc, #44]	@ (801958c <UART_SetConfig+0x7c>)
 8019560:	4293      	cmp	r3, r2
 8019562:	d115      	bne.n	8019590 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8019564:	697b      	ldr	r3, [r7, #20]
 8019566:	68db      	ldr	r3, [r3, #12]
 8019568:	2b00      	cmp	r3, #0
 801956a:	d037      	beq.n	80195dc <UART_SetConfig+0xcc>
 801956c:	697b      	ldr	r3, [r7, #20]
 801956e:	68db      	ldr	r3, [r3, #12]
 8019570:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8019574:	d032      	beq.n	80195dc <UART_SetConfig+0xcc>
 8019576:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 801957a:	4803      	ldr	r0, [pc, #12]	@ (8019588 <UART_SetConfig+0x78>)
 801957c:	f7f8 ff9a 	bl	80124b4 <assert_failed>
 8019580:	e02c      	b.n	80195dc <UART_SetConfig+0xcc>
 8019582:	bf00      	nop
 8019584:	011e1a30 	.word	0x011e1a30
 8019588:	0801df08 	.word	0x0801df08
 801958c:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8019590:	697b      	ldr	r3, [r7, #20]
 8019592:	68db      	ldr	r3, [r3, #12]
 8019594:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019598:	d012      	beq.n	80195c0 <UART_SetConfig+0xb0>
 801959a:	697b      	ldr	r3, [r7, #20]
 801959c:	68db      	ldr	r3, [r3, #12]
 801959e:	2b00      	cmp	r3, #0
 80195a0:	d00e      	beq.n	80195c0 <UART_SetConfig+0xb0>
 80195a2:	697b      	ldr	r3, [r7, #20]
 80195a4:	68db      	ldr	r3, [r3, #12]
 80195a6:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80195aa:	d009      	beq.n	80195c0 <UART_SetConfig+0xb0>
 80195ac:	697b      	ldr	r3, [r7, #20]
 80195ae:	68db      	ldr	r3, [r3, #12]
 80195b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80195b4:	d004      	beq.n	80195c0 <UART_SetConfig+0xb0>
 80195b6:	f640 31cf 	movw	r1, #3023	@ 0xbcf
 80195ba:	489e      	ldr	r0, [pc, #632]	@ (8019834 <UART_SetConfig+0x324>)
 80195bc:	f7f8 ff7a 	bl	80124b4 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80195c0:	697b      	ldr	r3, [r7, #20]
 80195c2:	6a1b      	ldr	r3, [r3, #32]
 80195c4:	2b00      	cmp	r3, #0
 80195c6:	d009      	beq.n	80195dc <UART_SetConfig+0xcc>
 80195c8:	697b      	ldr	r3, [r7, #20]
 80195ca:	6a1b      	ldr	r3, [r3, #32]
 80195cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80195d0:	d004      	beq.n	80195dc <UART_SetConfig+0xcc>
 80195d2:	f44f 613d 	mov.w	r1, #3024	@ 0xbd0
 80195d6:	4897      	ldr	r0, [pc, #604]	@ (8019834 <UART_SetConfig+0x324>)
 80195d8:	f7f8 ff6c 	bl	80124b4 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80195dc:	697b      	ldr	r3, [r7, #20]
 80195de:	691b      	ldr	r3, [r3, #16]
 80195e0:	2b00      	cmp	r3, #0
 80195e2:	d00e      	beq.n	8019602 <UART_SetConfig+0xf2>
 80195e4:	697b      	ldr	r3, [r7, #20]
 80195e6:	691b      	ldr	r3, [r3, #16]
 80195e8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80195ec:	d009      	beq.n	8019602 <UART_SetConfig+0xf2>
 80195ee:	697b      	ldr	r3, [r7, #20]
 80195f0:	691b      	ldr	r3, [r3, #16]
 80195f2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80195f6:	d004      	beq.n	8019602 <UART_SetConfig+0xf2>
 80195f8:	f640 31d3 	movw	r1, #3027	@ 0xbd3
 80195fc:	488d      	ldr	r0, [pc, #564]	@ (8019834 <UART_SetConfig+0x324>)
 80195fe:	f7f8 ff59 	bl	80124b4 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8019602:	697b      	ldr	r3, [r7, #20]
 8019604:	695b      	ldr	r3, [r3, #20]
 8019606:	f023 030c 	bic.w	r3, r3, #12
 801960a:	2b00      	cmp	r3, #0
 801960c:	d103      	bne.n	8019616 <UART_SetConfig+0x106>
 801960e:	697b      	ldr	r3, [r7, #20]
 8019610:	695b      	ldr	r3, [r3, #20]
 8019612:	2b00      	cmp	r3, #0
 8019614:	d104      	bne.n	8019620 <UART_SetConfig+0x110>
 8019616:	f640 31d4 	movw	r1, #3028	@ 0xbd4
 801961a:	4886      	ldr	r0, [pc, #536]	@ (8019834 <UART_SetConfig+0x324>)
 801961c:	f7f8 ff4a 	bl	80124b4 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8019620:	697b      	ldr	r3, [r7, #20]
 8019622:	699b      	ldr	r3, [r3, #24]
 8019624:	2b00      	cmp	r3, #0
 8019626:	d013      	beq.n	8019650 <UART_SetConfig+0x140>
 8019628:	697b      	ldr	r3, [r7, #20]
 801962a:	699b      	ldr	r3, [r3, #24]
 801962c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8019630:	d00e      	beq.n	8019650 <UART_SetConfig+0x140>
 8019632:	697b      	ldr	r3, [r7, #20]
 8019634:	699b      	ldr	r3, [r3, #24]
 8019636:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801963a:	d009      	beq.n	8019650 <UART_SetConfig+0x140>
 801963c:	697b      	ldr	r3, [r7, #20]
 801963e:	699b      	ldr	r3, [r3, #24]
 8019640:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019644:	d004      	beq.n	8019650 <UART_SetConfig+0x140>
 8019646:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 801964a:	487a      	ldr	r0, [pc, #488]	@ (8019834 <UART_SetConfig+0x324>)
 801964c:	f7f8 ff32 	bl	80124b4 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8019650:	697b      	ldr	r3, [r7, #20]
 8019652:	69db      	ldr	r3, [r3, #28]
 8019654:	2b00      	cmp	r3, #0
 8019656:	d009      	beq.n	801966c <UART_SetConfig+0x15c>
 8019658:	697b      	ldr	r3, [r7, #20]
 801965a:	69db      	ldr	r3, [r3, #28]
 801965c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019660:	d004      	beq.n	801966c <UART_SetConfig+0x15c>
 8019662:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 8019666:	4873      	ldr	r0, [pc, #460]	@ (8019834 <UART_SetConfig+0x324>)
 8019668:	f7f8 ff24 	bl	80124b4 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 801966c:	697b      	ldr	r3, [r7, #20]
 801966e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019670:	2b00      	cmp	r3, #0
 8019672:	d030      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 8019674:	697b      	ldr	r3, [r7, #20]
 8019676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019678:	2b01      	cmp	r3, #1
 801967a:	d02c      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 801967c:	697b      	ldr	r3, [r7, #20]
 801967e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019680:	2b02      	cmp	r3, #2
 8019682:	d028      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 8019684:	697b      	ldr	r3, [r7, #20]
 8019686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019688:	2b03      	cmp	r3, #3
 801968a:	d024      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 801968c:	697b      	ldr	r3, [r7, #20]
 801968e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019690:	2b04      	cmp	r3, #4
 8019692:	d020      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 8019694:	697b      	ldr	r3, [r7, #20]
 8019696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019698:	2b05      	cmp	r3, #5
 801969a:	d01c      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 801969c:	697b      	ldr	r3, [r7, #20]
 801969e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196a0:	2b06      	cmp	r3, #6
 80196a2:	d018      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 80196a4:	697b      	ldr	r3, [r7, #20]
 80196a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196a8:	2b07      	cmp	r3, #7
 80196aa:	d014      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 80196ac:	697b      	ldr	r3, [r7, #20]
 80196ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196b0:	2b08      	cmp	r3, #8
 80196b2:	d010      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 80196b4:	697b      	ldr	r3, [r7, #20]
 80196b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196b8:	2b09      	cmp	r3, #9
 80196ba:	d00c      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 80196bc:	697b      	ldr	r3, [r7, #20]
 80196be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196c0:	2b0a      	cmp	r3, #10
 80196c2:	d008      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 80196c4:	697b      	ldr	r3, [r7, #20]
 80196c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80196c8:	2b0b      	cmp	r3, #11
 80196ca:	d004      	beq.n	80196d6 <UART_SetConfig+0x1c6>
 80196cc:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 80196d0:	4858      	ldr	r0, [pc, #352]	@ (8019834 <UART_SetConfig+0x324>)
 80196d2:	f7f8 feef 	bl	80124b4 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80196d6:	697b      	ldr	r3, [r7, #20]
 80196d8:	689a      	ldr	r2, [r3, #8]
 80196da:	697b      	ldr	r3, [r7, #20]
 80196dc:	691b      	ldr	r3, [r3, #16]
 80196de:	431a      	orrs	r2, r3
 80196e0:	697b      	ldr	r3, [r7, #20]
 80196e2:	695b      	ldr	r3, [r3, #20]
 80196e4:	431a      	orrs	r2, r3
 80196e6:	697b      	ldr	r3, [r7, #20]
 80196e8:	69db      	ldr	r3, [r3, #28]
 80196ea:	4313      	orrs	r3, r2
 80196ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80196ee:	697b      	ldr	r3, [r7, #20]
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	681a      	ldr	r2, [r3, #0]
 80196f4:	4b50      	ldr	r3, [pc, #320]	@ (8019838 <UART_SetConfig+0x328>)
 80196f6:	4013      	ands	r3, r2
 80196f8:	697a      	ldr	r2, [r7, #20]
 80196fa:	6812      	ldr	r2, [r2, #0]
 80196fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80196fe:	430b      	orrs	r3, r1
 8019700:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8019702:	697b      	ldr	r3, [r7, #20]
 8019704:	681b      	ldr	r3, [r3, #0]
 8019706:	685b      	ldr	r3, [r3, #4]
 8019708:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 801970c:	697b      	ldr	r3, [r7, #20]
 801970e:	68da      	ldr	r2, [r3, #12]
 8019710:	697b      	ldr	r3, [r7, #20]
 8019712:	681b      	ldr	r3, [r3, #0]
 8019714:	430a      	orrs	r2, r1
 8019716:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8019718:	697b      	ldr	r3, [r7, #20]
 801971a:	699b      	ldr	r3, [r3, #24]
 801971c:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 801971e:	697b      	ldr	r3, [r7, #20]
 8019720:	681b      	ldr	r3, [r3, #0]
 8019722:	4a46      	ldr	r2, [pc, #280]	@ (801983c <UART_SetConfig+0x32c>)
 8019724:	4293      	cmp	r3, r2
 8019726:	d004      	beq.n	8019732 <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8019728:	697b      	ldr	r3, [r7, #20]
 801972a:	6a1b      	ldr	r3, [r3, #32]
 801972c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801972e:	4313      	orrs	r3, r2
 8019730:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8019732:	697b      	ldr	r3, [r7, #20]
 8019734:	681b      	ldr	r3, [r3, #0]
 8019736:	689b      	ldr	r3, [r3, #8]
 8019738:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 801973c:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8019740:	697a      	ldr	r2, [r7, #20]
 8019742:	6812      	ldr	r2, [r2, #0]
 8019744:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019746:	430b      	orrs	r3, r1
 8019748:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 801974a:	697b      	ldr	r3, [r7, #20]
 801974c:	681b      	ldr	r3, [r3, #0]
 801974e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019750:	f023 010f 	bic.w	r1, r3, #15
 8019754:	697b      	ldr	r3, [r7, #20]
 8019756:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8019758:	697b      	ldr	r3, [r7, #20]
 801975a:	681b      	ldr	r3, [r3, #0]
 801975c:	430a      	orrs	r2, r1
 801975e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8019760:	697b      	ldr	r3, [r7, #20]
 8019762:	681b      	ldr	r3, [r3, #0]
 8019764:	4a36      	ldr	r2, [pc, #216]	@ (8019840 <UART_SetConfig+0x330>)
 8019766:	4293      	cmp	r3, r2
 8019768:	d126      	bne.n	80197b8 <UART_SetConfig+0x2a8>
 801976a:	4b36      	ldr	r3, [pc, #216]	@ (8019844 <UART_SetConfig+0x334>)
 801976c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019770:	f003 0303 	and.w	r3, r3, #3
 8019774:	2b03      	cmp	r3, #3
 8019776:	d81b      	bhi.n	80197b0 <UART_SetConfig+0x2a0>
 8019778:	a201      	add	r2, pc, #4	@ (adr r2, 8019780 <UART_SetConfig+0x270>)
 801977a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801977e:	bf00      	nop
 8019780:	08019791 	.word	0x08019791
 8019784:	080197a1 	.word	0x080197a1
 8019788:	08019799 	.word	0x08019799
 801978c:	080197a9 	.word	0x080197a9
 8019790:	2301      	movs	r3, #1
 8019792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019796:	e0e2      	b.n	801995e <UART_SetConfig+0x44e>
 8019798:	2302      	movs	r3, #2
 801979a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801979e:	e0de      	b.n	801995e <UART_SetConfig+0x44e>
 80197a0:	2304      	movs	r3, #4
 80197a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80197a6:	e0da      	b.n	801995e <UART_SetConfig+0x44e>
 80197a8:	2308      	movs	r3, #8
 80197aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80197ae:	e0d6      	b.n	801995e <UART_SetConfig+0x44e>
 80197b0:	2310      	movs	r3, #16
 80197b2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80197b6:	e0d2      	b.n	801995e <UART_SetConfig+0x44e>
 80197b8:	697b      	ldr	r3, [r7, #20]
 80197ba:	681b      	ldr	r3, [r3, #0]
 80197bc:	4a22      	ldr	r2, [pc, #136]	@ (8019848 <UART_SetConfig+0x338>)
 80197be:	4293      	cmp	r3, r2
 80197c0:	d144      	bne.n	801984c <UART_SetConfig+0x33c>
 80197c2:	4b20      	ldr	r3, [pc, #128]	@ (8019844 <UART_SetConfig+0x334>)
 80197c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80197c8:	f003 030c 	and.w	r3, r3, #12
 80197cc:	2b0c      	cmp	r3, #12
 80197ce:	d82d      	bhi.n	801982c <UART_SetConfig+0x31c>
 80197d0:	a201      	add	r2, pc, #4	@ (adr r2, 80197d8 <UART_SetConfig+0x2c8>)
 80197d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80197d6:	bf00      	nop
 80197d8:	0801980d 	.word	0x0801980d
 80197dc:	0801982d 	.word	0x0801982d
 80197e0:	0801982d 	.word	0x0801982d
 80197e4:	0801982d 	.word	0x0801982d
 80197e8:	0801981d 	.word	0x0801981d
 80197ec:	0801982d 	.word	0x0801982d
 80197f0:	0801982d 	.word	0x0801982d
 80197f4:	0801982d 	.word	0x0801982d
 80197f8:	08019815 	.word	0x08019815
 80197fc:	0801982d 	.word	0x0801982d
 8019800:	0801982d 	.word	0x0801982d
 8019804:	0801982d 	.word	0x0801982d
 8019808:	08019825 	.word	0x08019825
 801980c:	2300      	movs	r3, #0
 801980e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019812:	e0a4      	b.n	801995e <UART_SetConfig+0x44e>
 8019814:	2302      	movs	r3, #2
 8019816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801981a:	e0a0      	b.n	801995e <UART_SetConfig+0x44e>
 801981c:	2304      	movs	r3, #4
 801981e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019822:	e09c      	b.n	801995e <UART_SetConfig+0x44e>
 8019824:	2308      	movs	r3, #8
 8019826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801982a:	e098      	b.n	801995e <UART_SetConfig+0x44e>
 801982c:	2310      	movs	r3, #16
 801982e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019832:	e094      	b.n	801995e <UART_SetConfig+0x44e>
 8019834:	0801df08 	.word	0x0801df08
 8019838:	cfff69f3 	.word	0xcfff69f3
 801983c:	40008000 	.word	0x40008000
 8019840:	40013800 	.word	0x40013800
 8019844:	40021000 	.word	0x40021000
 8019848:	40004400 	.word	0x40004400
 801984c:	697b      	ldr	r3, [r7, #20]
 801984e:	681b      	ldr	r3, [r3, #0]
 8019850:	4aaa      	ldr	r2, [pc, #680]	@ (8019afc <UART_SetConfig+0x5ec>)
 8019852:	4293      	cmp	r3, r2
 8019854:	d125      	bne.n	80198a2 <UART_SetConfig+0x392>
 8019856:	4baa      	ldr	r3, [pc, #680]	@ (8019b00 <UART_SetConfig+0x5f0>)
 8019858:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801985c:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8019860:	2b30      	cmp	r3, #48	@ 0x30
 8019862:	d016      	beq.n	8019892 <UART_SetConfig+0x382>
 8019864:	2b30      	cmp	r3, #48	@ 0x30
 8019866:	d818      	bhi.n	801989a <UART_SetConfig+0x38a>
 8019868:	2b20      	cmp	r3, #32
 801986a:	d00a      	beq.n	8019882 <UART_SetConfig+0x372>
 801986c:	2b20      	cmp	r3, #32
 801986e:	d814      	bhi.n	801989a <UART_SetConfig+0x38a>
 8019870:	2b00      	cmp	r3, #0
 8019872:	d002      	beq.n	801987a <UART_SetConfig+0x36a>
 8019874:	2b10      	cmp	r3, #16
 8019876:	d008      	beq.n	801988a <UART_SetConfig+0x37a>
 8019878:	e00f      	b.n	801989a <UART_SetConfig+0x38a>
 801987a:	2300      	movs	r3, #0
 801987c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019880:	e06d      	b.n	801995e <UART_SetConfig+0x44e>
 8019882:	2302      	movs	r3, #2
 8019884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019888:	e069      	b.n	801995e <UART_SetConfig+0x44e>
 801988a:	2304      	movs	r3, #4
 801988c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019890:	e065      	b.n	801995e <UART_SetConfig+0x44e>
 8019892:	2308      	movs	r3, #8
 8019894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019898:	e061      	b.n	801995e <UART_SetConfig+0x44e>
 801989a:	2310      	movs	r3, #16
 801989c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80198a0:	e05d      	b.n	801995e <UART_SetConfig+0x44e>
 80198a2:	697b      	ldr	r3, [r7, #20]
 80198a4:	681b      	ldr	r3, [r3, #0]
 80198a6:	4a97      	ldr	r2, [pc, #604]	@ (8019b04 <UART_SetConfig+0x5f4>)
 80198a8:	4293      	cmp	r3, r2
 80198aa:	d125      	bne.n	80198f8 <UART_SetConfig+0x3e8>
 80198ac:	4b94      	ldr	r3, [pc, #592]	@ (8019b00 <UART_SetConfig+0x5f0>)
 80198ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80198b2:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80198b6:	2bc0      	cmp	r3, #192	@ 0xc0
 80198b8:	d016      	beq.n	80198e8 <UART_SetConfig+0x3d8>
 80198ba:	2bc0      	cmp	r3, #192	@ 0xc0
 80198bc:	d818      	bhi.n	80198f0 <UART_SetConfig+0x3e0>
 80198be:	2b80      	cmp	r3, #128	@ 0x80
 80198c0:	d00a      	beq.n	80198d8 <UART_SetConfig+0x3c8>
 80198c2:	2b80      	cmp	r3, #128	@ 0x80
 80198c4:	d814      	bhi.n	80198f0 <UART_SetConfig+0x3e0>
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d002      	beq.n	80198d0 <UART_SetConfig+0x3c0>
 80198ca:	2b40      	cmp	r3, #64	@ 0x40
 80198cc:	d008      	beq.n	80198e0 <UART_SetConfig+0x3d0>
 80198ce:	e00f      	b.n	80198f0 <UART_SetConfig+0x3e0>
 80198d0:	2300      	movs	r3, #0
 80198d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80198d6:	e042      	b.n	801995e <UART_SetConfig+0x44e>
 80198d8:	2302      	movs	r3, #2
 80198da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80198de:	e03e      	b.n	801995e <UART_SetConfig+0x44e>
 80198e0:	2304      	movs	r3, #4
 80198e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80198e6:	e03a      	b.n	801995e <UART_SetConfig+0x44e>
 80198e8:	2308      	movs	r3, #8
 80198ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80198ee:	e036      	b.n	801995e <UART_SetConfig+0x44e>
 80198f0:	2310      	movs	r3, #16
 80198f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80198f6:	e032      	b.n	801995e <UART_SetConfig+0x44e>
 80198f8:	697b      	ldr	r3, [r7, #20]
 80198fa:	681b      	ldr	r3, [r3, #0]
 80198fc:	4a82      	ldr	r2, [pc, #520]	@ (8019b08 <UART_SetConfig+0x5f8>)
 80198fe:	4293      	cmp	r3, r2
 8019900:	d12a      	bne.n	8019958 <UART_SetConfig+0x448>
 8019902:	4b7f      	ldr	r3, [pc, #508]	@ (8019b00 <UART_SetConfig+0x5f0>)
 8019904:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8019908:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 801990c:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8019910:	d01a      	beq.n	8019948 <UART_SetConfig+0x438>
 8019912:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8019916:	d81b      	bhi.n	8019950 <UART_SetConfig+0x440>
 8019918:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801991c:	d00c      	beq.n	8019938 <UART_SetConfig+0x428>
 801991e:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8019922:	d815      	bhi.n	8019950 <UART_SetConfig+0x440>
 8019924:	2b00      	cmp	r3, #0
 8019926:	d003      	beq.n	8019930 <UART_SetConfig+0x420>
 8019928:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801992c:	d008      	beq.n	8019940 <UART_SetConfig+0x430>
 801992e:	e00f      	b.n	8019950 <UART_SetConfig+0x440>
 8019930:	2300      	movs	r3, #0
 8019932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019936:	e012      	b.n	801995e <UART_SetConfig+0x44e>
 8019938:	2302      	movs	r3, #2
 801993a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801993e:	e00e      	b.n	801995e <UART_SetConfig+0x44e>
 8019940:	2304      	movs	r3, #4
 8019942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019946:	e00a      	b.n	801995e <UART_SetConfig+0x44e>
 8019948:	2308      	movs	r3, #8
 801994a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801994e:	e006      	b.n	801995e <UART_SetConfig+0x44e>
 8019950:	2310      	movs	r3, #16
 8019952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8019956:	e002      	b.n	801995e <UART_SetConfig+0x44e>
 8019958:	2310      	movs	r3, #16
 801995a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801995e:	697b      	ldr	r3, [r7, #20]
 8019960:	681b      	ldr	r3, [r3, #0]
 8019962:	4a69      	ldr	r2, [pc, #420]	@ (8019b08 <UART_SetConfig+0x5f8>)
 8019964:	4293      	cmp	r3, r2
 8019966:	f040 8097 	bne.w	8019a98 <UART_SetConfig+0x588>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 801996a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 801996e:	2b08      	cmp	r3, #8
 8019970:	d823      	bhi.n	80199ba <UART_SetConfig+0x4aa>
 8019972:	a201      	add	r2, pc, #4	@ (adr r2, 8019978 <UART_SetConfig+0x468>)
 8019974:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019978:	0801999d 	.word	0x0801999d
 801997c:	080199bb 	.word	0x080199bb
 8019980:	080199a5 	.word	0x080199a5
 8019984:	080199bb 	.word	0x080199bb
 8019988:	080199ab 	.word	0x080199ab
 801998c:	080199bb 	.word	0x080199bb
 8019990:	080199bb 	.word	0x080199bb
 8019994:	080199bb 	.word	0x080199bb
 8019998:	080199b3 	.word	0x080199b3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 801999c:	f7fd fea8 	bl	80176f0 <HAL_RCC_GetPCLK1Freq>
 80199a0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80199a2:	e010      	b.n	80199c6 <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80199a4:	4b59      	ldr	r3, [pc, #356]	@ (8019b0c <UART_SetConfig+0x5fc>)
 80199a6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80199a8:	e00d      	b.n	80199c6 <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80199aa:	f7fd fe33 	bl	8017614 <HAL_RCC_GetSysClockFreq>
 80199ae:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80199b0:	e009      	b.n	80199c6 <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80199b2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80199b6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80199b8:	e005      	b.n	80199c6 <UART_SetConfig+0x4b6>
      default:
        pclk = 0U;
 80199ba:	2300      	movs	r3, #0
 80199bc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80199be:	2301      	movs	r3, #1
 80199c0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80199c4:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80199c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199c8:	2b00      	cmp	r3, #0
 80199ca:	f000 8135 	beq.w	8019c38 <UART_SetConfig+0x728>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80199ce:	697b      	ldr	r3, [r7, #20]
 80199d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80199d2:	4a4f      	ldr	r2, [pc, #316]	@ (8019b10 <UART_SetConfig+0x600>)
 80199d4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80199d8:	461a      	mov	r2, r3
 80199da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80199dc:	fbb3 f3f2 	udiv	r3, r3, r2
 80199e0:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80199e2:	697b      	ldr	r3, [r7, #20]
 80199e4:	685a      	ldr	r2, [r3, #4]
 80199e6:	4613      	mov	r3, r2
 80199e8:	005b      	lsls	r3, r3, #1
 80199ea:	4413      	add	r3, r2
 80199ec:	69ba      	ldr	r2, [r7, #24]
 80199ee:	429a      	cmp	r2, r3
 80199f0:	d305      	bcc.n	80199fe <UART_SetConfig+0x4ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80199f2:	697b      	ldr	r3, [r7, #20]
 80199f4:	685b      	ldr	r3, [r3, #4]
 80199f6:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80199f8:	69ba      	ldr	r2, [r7, #24]
 80199fa:	429a      	cmp	r2, r3
 80199fc:	d903      	bls.n	8019a06 <UART_SetConfig+0x4f6>
      {
        ret = HAL_ERROR;
 80199fe:	2301      	movs	r3, #1
 8019a00:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8019a04:	e118      	b.n	8019c38 <UART_SetConfig+0x728>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019a06:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019a08:	2200      	movs	r2, #0
 8019a0a:	60bb      	str	r3, [r7, #8]
 8019a0c:	60fa      	str	r2, [r7, #12]
 8019a0e:	697b      	ldr	r3, [r7, #20]
 8019a10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019a12:	4a3f      	ldr	r2, [pc, #252]	@ (8019b10 <UART_SetConfig+0x600>)
 8019a14:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019a18:	b29b      	uxth	r3, r3
 8019a1a:	2200      	movs	r2, #0
 8019a1c:	603b      	str	r3, [r7, #0]
 8019a1e:	607a      	str	r2, [r7, #4]
 8019a20:	e9d7 2300 	ldrd	r2, r3, [r7]
 8019a24:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8019a28:	f7f7 fc62 	bl	80112f0 <__aeabi_uldivmod>
 8019a2c:	4602      	mov	r2, r0
 8019a2e:	460b      	mov	r3, r1
 8019a30:	4610      	mov	r0, r2
 8019a32:	4619      	mov	r1, r3
 8019a34:	f04f 0200 	mov.w	r2, #0
 8019a38:	f04f 0300 	mov.w	r3, #0
 8019a3c:	020b      	lsls	r3, r1, #8
 8019a3e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8019a42:	0202      	lsls	r2, r0, #8
 8019a44:	6979      	ldr	r1, [r7, #20]
 8019a46:	6849      	ldr	r1, [r1, #4]
 8019a48:	0849      	lsrs	r1, r1, #1
 8019a4a:	2000      	movs	r0, #0
 8019a4c:	460c      	mov	r4, r1
 8019a4e:	4605      	mov	r5, r0
 8019a50:	eb12 0804 	adds.w	r8, r2, r4
 8019a54:	eb43 0905 	adc.w	r9, r3, r5
 8019a58:	697b      	ldr	r3, [r7, #20]
 8019a5a:	685b      	ldr	r3, [r3, #4]
 8019a5c:	2200      	movs	r2, #0
 8019a5e:	469a      	mov	sl, r3
 8019a60:	4693      	mov	fp, r2
 8019a62:	4652      	mov	r2, sl
 8019a64:	465b      	mov	r3, fp
 8019a66:	4640      	mov	r0, r8
 8019a68:	4649      	mov	r1, r9
 8019a6a:	f7f7 fc41 	bl	80112f0 <__aeabi_uldivmod>
 8019a6e:	4602      	mov	r2, r0
 8019a70:	460b      	mov	r3, r1
 8019a72:	4613      	mov	r3, r2
 8019a74:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8019a76:	6a3b      	ldr	r3, [r7, #32]
 8019a78:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8019a7c:	d308      	bcc.n	8019a90 <UART_SetConfig+0x580>
 8019a7e:	6a3b      	ldr	r3, [r7, #32]
 8019a80:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019a84:	d204      	bcs.n	8019a90 <UART_SetConfig+0x580>
        {
          huart->Instance->BRR = usartdiv;
 8019a86:	697b      	ldr	r3, [r7, #20]
 8019a88:	681b      	ldr	r3, [r3, #0]
 8019a8a:	6a3a      	ldr	r2, [r7, #32]
 8019a8c:	60da      	str	r2, [r3, #12]
 8019a8e:	e0d3      	b.n	8019c38 <UART_SetConfig+0x728>
        }
        else
        {
          ret = HAL_ERROR;
 8019a90:	2301      	movs	r3, #1
 8019a92:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8019a96:	e0cf      	b.n	8019c38 <UART_SetConfig+0x728>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8019a98:	697b      	ldr	r3, [r7, #20]
 8019a9a:	69db      	ldr	r3, [r3, #28]
 8019a9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019aa0:	d173      	bne.n	8019b8a <UART_SetConfig+0x67a>
  {
    switch (clocksource)
 8019aa2:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019aa6:	2b08      	cmp	r3, #8
 8019aa8:	d834      	bhi.n	8019b14 <UART_SetConfig+0x604>
 8019aaa:	a201      	add	r2, pc, #4	@ (adr r2, 8019ab0 <UART_SetConfig+0x5a0>)
 8019aac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019ab0:	08019ad5 	.word	0x08019ad5
 8019ab4:	08019add 	.word	0x08019add
 8019ab8:	08019ae5 	.word	0x08019ae5
 8019abc:	08019b15 	.word	0x08019b15
 8019ac0:	08019aeb 	.word	0x08019aeb
 8019ac4:	08019b15 	.word	0x08019b15
 8019ac8:	08019b15 	.word	0x08019b15
 8019acc:	08019b15 	.word	0x08019b15
 8019ad0:	08019af3 	.word	0x08019af3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019ad4:	f7fd fe0c 	bl	80176f0 <HAL_RCC_GetPCLK1Freq>
 8019ad8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8019ada:	e021      	b.n	8019b20 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019adc:	f7fd fe1e 	bl	801771c <HAL_RCC_GetPCLK2Freq>
 8019ae0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8019ae2:	e01d      	b.n	8019b20 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8019ae4:	4b09      	ldr	r3, [pc, #36]	@ (8019b0c <UART_SetConfig+0x5fc>)
 8019ae6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019ae8:	e01a      	b.n	8019b20 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8019aea:	f7fd fd93 	bl	8017614 <HAL_RCC_GetSysClockFreq>
 8019aee:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8019af0:	e016      	b.n	8019b20 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019af2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019af6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019af8:	e012      	b.n	8019b20 <UART_SetConfig+0x610>
 8019afa:	bf00      	nop
 8019afc:	40004800 	.word	0x40004800
 8019b00:	40021000 	.word	0x40021000
 8019b04:	40004c00 	.word	0x40004c00
 8019b08:	40008000 	.word	0x40008000
 8019b0c:	00f42400 	.word	0x00f42400
 8019b10:	0801e330 	.word	0x0801e330
      default:
        pclk = 0U;
 8019b14:	2300      	movs	r3, #0
 8019b16:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8019b18:	2301      	movs	r3, #1
 8019b1a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8019b1e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8019b20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b22:	2b00      	cmp	r3, #0
 8019b24:	f000 8088 	beq.w	8019c38 <UART_SetConfig+0x728>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019b28:	697b      	ldr	r3, [r7, #20]
 8019b2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019b2c:	4a4d      	ldr	r2, [pc, #308]	@ (8019c64 <UART_SetConfig+0x754>)
 8019b2e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019b32:	461a      	mov	r2, r3
 8019b34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019b36:	fbb3 f3f2 	udiv	r3, r3, r2
 8019b3a:	005a      	lsls	r2, r3, #1
 8019b3c:	697b      	ldr	r3, [r7, #20]
 8019b3e:	685b      	ldr	r3, [r3, #4]
 8019b40:	085b      	lsrs	r3, r3, #1
 8019b42:	441a      	add	r2, r3
 8019b44:	697b      	ldr	r3, [r7, #20]
 8019b46:	685b      	ldr	r3, [r3, #4]
 8019b48:	fbb2 f3f3 	udiv	r3, r2, r3
 8019b4c:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019b4e:	6a3b      	ldr	r3, [r7, #32]
 8019b50:	2b0f      	cmp	r3, #15
 8019b52:	d916      	bls.n	8019b82 <UART_SetConfig+0x672>
 8019b54:	6a3b      	ldr	r3, [r7, #32]
 8019b56:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019b5a:	d212      	bcs.n	8019b82 <UART_SetConfig+0x672>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8019b5c:	6a3b      	ldr	r3, [r7, #32]
 8019b5e:	b29b      	uxth	r3, r3
 8019b60:	f023 030f 	bic.w	r3, r3, #15
 8019b64:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8019b66:	6a3b      	ldr	r3, [r7, #32]
 8019b68:	085b      	lsrs	r3, r3, #1
 8019b6a:	b29b      	uxth	r3, r3
 8019b6c:	f003 0307 	and.w	r3, r3, #7
 8019b70:	b29a      	uxth	r2, r3
 8019b72:	8bfb      	ldrh	r3, [r7, #30]
 8019b74:	4313      	orrs	r3, r2
 8019b76:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8019b78:	697b      	ldr	r3, [r7, #20]
 8019b7a:	681b      	ldr	r3, [r3, #0]
 8019b7c:	8bfa      	ldrh	r2, [r7, #30]
 8019b7e:	60da      	str	r2, [r3, #12]
 8019b80:	e05a      	b.n	8019c38 <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 8019b82:	2301      	movs	r3, #1
 8019b84:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8019b88:	e056      	b.n	8019c38 <UART_SetConfig+0x728>
      }
    }
  }
  else
  {
    switch (clocksource)
 8019b8a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8019b8e:	2b08      	cmp	r3, #8
 8019b90:	d827      	bhi.n	8019be2 <UART_SetConfig+0x6d2>
 8019b92:	a201      	add	r2, pc, #4	@ (adr r2, 8019b98 <UART_SetConfig+0x688>)
 8019b94:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8019b98:	08019bbd 	.word	0x08019bbd
 8019b9c:	08019bc5 	.word	0x08019bc5
 8019ba0:	08019bcd 	.word	0x08019bcd
 8019ba4:	08019be3 	.word	0x08019be3
 8019ba8:	08019bd3 	.word	0x08019bd3
 8019bac:	08019be3 	.word	0x08019be3
 8019bb0:	08019be3 	.word	0x08019be3
 8019bb4:	08019be3 	.word	0x08019be3
 8019bb8:	08019bdb 	.word	0x08019bdb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8019bbc:	f7fd fd98 	bl	80176f0 <HAL_RCC_GetPCLK1Freq>
 8019bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8019bc2:	e014      	b.n	8019bee <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8019bc4:	f7fd fdaa 	bl	801771c <HAL_RCC_GetPCLK2Freq>
 8019bc8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8019bca:	e010      	b.n	8019bee <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8019bcc:	4b26      	ldr	r3, [pc, #152]	@ (8019c68 <UART_SetConfig+0x758>)
 8019bce:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019bd0:	e00d      	b.n	8019bee <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8019bd2:	f7fd fd1f 	bl	8017614 <HAL_RCC_GetSysClockFreq>
 8019bd6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8019bd8:	e009      	b.n	8019bee <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8019bda:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8019bde:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8019be0:	e005      	b.n	8019bee <UART_SetConfig+0x6de>
      default:
        pclk = 0U;
 8019be2:	2300      	movs	r3, #0
 8019be4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8019be6:	2301      	movs	r3, #1
 8019be8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8019bec:	bf00      	nop
    }

    if (pclk != 0U)
 8019bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019bf0:	2b00      	cmp	r3, #0
 8019bf2:	d021      	beq.n	8019c38 <UART_SetConfig+0x728>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8019bf4:	697b      	ldr	r3, [r7, #20]
 8019bf6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8019bf8:	4a1a      	ldr	r2, [pc, #104]	@ (8019c64 <UART_SetConfig+0x754>)
 8019bfa:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8019bfe:	461a      	mov	r2, r3
 8019c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019c02:	fbb3 f2f2 	udiv	r2, r3, r2
 8019c06:	697b      	ldr	r3, [r7, #20]
 8019c08:	685b      	ldr	r3, [r3, #4]
 8019c0a:	085b      	lsrs	r3, r3, #1
 8019c0c:	441a      	add	r2, r3
 8019c0e:	697b      	ldr	r3, [r7, #20]
 8019c10:	685b      	ldr	r3, [r3, #4]
 8019c12:	fbb2 f3f3 	udiv	r3, r2, r3
 8019c16:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8019c18:	6a3b      	ldr	r3, [r7, #32]
 8019c1a:	2b0f      	cmp	r3, #15
 8019c1c:	d909      	bls.n	8019c32 <UART_SetConfig+0x722>
 8019c1e:	6a3b      	ldr	r3, [r7, #32]
 8019c20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019c24:	d205      	bcs.n	8019c32 <UART_SetConfig+0x722>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8019c26:	6a3b      	ldr	r3, [r7, #32]
 8019c28:	b29a      	uxth	r2, r3
 8019c2a:	697b      	ldr	r3, [r7, #20]
 8019c2c:	681b      	ldr	r3, [r3, #0]
 8019c2e:	60da      	str	r2, [r3, #12]
 8019c30:	e002      	b.n	8019c38 <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 8019c32:	2301      	movs	r3, #1
 8019c34:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8019c38:	697b      	ldr	r3, [r7, #20]
 8019c3a:	2201      	movs	r2, #1
 8019c3c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8019c40:	697b      	ldr	r3, [r7, #20]
 8019c42:	2201      	movs	r2, #1
 8019c44:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8019c48:	697b      	ldr	r3, [r7, #20]
 8019c4a:	2200      	movs	r2, #0
 8019c4c:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8019c4e:	697b      	ldr	r3, [r7, #20]
 8019c50:	2200      	movs	r2, #0
 8019c52:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8019c54:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8019c58:	4618      	mov	r0, r3
 8019c5a:	3730      	adds	r7, #48	@ 0x30
 8019c5c:	46bd      	mov	sp, r7
 8019c5e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8019c62:	bf00      	nop
 8019c64:	0801e330 	.word	0x0801e330
 8019c68:	00f42400 	.word	0x00f42400

08019c6c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8019c6c:	b580      	push	{r7, lr}
 8019c6e:	b082      	sub	sp, #8
 8019c70:	af00      	add	r7, sp, #0
 8019c72:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8019c74:	687b      	ldr	r3, [r7, #4]
 8019c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019c78:	2bff      	cmp	r3, #255	@ 0xff
 8019c7a:	d904      	bls.n	8019c86 <UART_AdvFeatureConfig+0x1a>
 8019c7c:	f640 4198 	movw	r1, #3224	@ 0xc98
 8019c80:	488e      	ldr	r0, [pc, #568]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019c82:	f7f8 fc17 	bl	80124b4 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8019c86:	687b      	ldr	r3, [r7, #4]
 8019c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019c8a:	f003 0308 	and.w	r3, r3, #8
 8019c8e:	2b00      	cmp	r3, #0
 8019c90:	d018      	beq.n	8019cc4 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8019c92:	687b      	ldr	r3, [r7, #4]
 8019c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019c96:	2b00      	cmp	r3, #0
 8019c98:	d009      	beq.n	8019cae <UART_AdvFeatureConfig+0x42>
 8019c9a:	687b      	ldr	r3, [r7, #4]
 8019c9c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8019c9e:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8019ca2:	d004      	beq.n	8019cae <UART_AdvFeatureConfig+0x42>
 8019ca4:	f640 419d 	movw	r1, #3229	@ 0xc9d
 8019ca8:	4884      	ldr	r0, [pc, #528]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019caa:	f7f8 fc03 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8019cae:	687b      	ldr	r3, [r7, #4]
 8019cb0:	681b      	ldr	r3, [r3, #0]
 8019cb2:	685b      	ldr	r3, [r3, #4]
 8019cb4:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8019cb8:	687b      	ldr	r3, [r7, #4]
 8019cba:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8019cbc:	687b      	ldr	r3, [r7, #4]
 8019cbe:	681b      	ldr	r3, [r3, #0]
 8019cc0:	430a      	orrs	r2, r1
 8019cc2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8019cc4:	687b      	ldr	r3, [r7, #4]
 8019cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019cc8:	f003 0301 	and.w	r3, r3, #1
 8019ccc:	2b00      	cmp	r3, #0
 8019cce:	d018      	beq.n	8019d02 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8019cd0:	687b      	ldr	r3, [r7, #4]
 8019cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cd4:	2b00      	cmp	r3, #0
 8019cd6:	d009      	beq.n	8019cec <UART_AdvFeatureConfig+0x80>
 8019cd8:	687b      	ldr	r3, [r7, #4]
 8019cda:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8019cdc:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8019ce0:	d004      	beq.n	8019cec <UART_AdvFeatureConfig+0x80>
 8019ce2:	f640 41a4 	movw	r1, #3236	@ 0xca4
 8019ce6:	4875      	ldr	r0, [pc, #468]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019ce8:	f7f8 fbe4 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8019cec:	687b      	ldr	r3, [r7, #4]
 8019cee:	681b      	ldr	r3, [r3, #0]
 8019cf0:	685b      	ldr	r3, [r3, #4]
 8019cf2:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8019cf6:	687b      	ldr	r3, [r7, #4]
 8019cf8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8019cfa:	687b      	ldr	r3, [r7, #4]
 8019cfc:	681b      	ldr	r3, [r3, #0]
 8019cfe:	430a      	orrs	r2, r1
 8019d00:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8019d02:	687b      	ldr	r3, [r7, #4]
 8019d04:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019d06:	f003 0302 	and.w	r3, r3, #2
 8019d0a:	2b00      	cmp	r3, #0
 8019d0c:	d018      	beq.n	8019d40 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8019d0e:	687b      	ldr	r3, [r7, #4]
 8019d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d12:	2b00      	cmp	r3, #0
 8019d14:	d009      	beq.n	8019d2a <UART_AdvFeatureConfig+0xbe>
 8019d16:	687b      	ldr	r3, [r7, #4]
 8019d18:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8019d1a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8019d1e:	d004      	beq.n	8019d2a <UART_AdvFeatureConfig+0xbe>
 8019d20:	f640 41ab 	movw	r1, #3243	@ 0xcab
 8019d24:	4865      	ldr	r0, [pc, #404]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019d26:	f7f8 fbc5 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8019d2a:	687b      	ldr	r3, [r7, #4]
 8019d2c:	681b      	ldr	r3, [r3, #0]
 8019d2e:	685b      	ldr	r3, [r3, #4]
 8019d30:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8019d34:	687b      	ldr	r3, [r7, #4]
 8019d36:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8019d38:	687b      	ldr	r3, [r7, #4]
 8019d3a:	681b      	ldr	r3, [r3, #0]
 8019d3c:	430a      	orrs	r2, r1
 8019d3e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8019d40:	687b      	ldr	r3, [r7, #4]
 8019d42:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019d44:	f003 0304 	and.w	r3, r3, #4
 8019d48:	2b00      	cmp	r3, #0
 8019d4a:	d018      	beq.n	8019d7e <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8019d4c:	687b      	ldr	r3, [r7, #4]
 8019d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d50:	2b00      	cmp	r3, #0
 8019d52:	d009      	beq.n	8019d68 <UART_AdvFeatureConfig+0xfc>
 8019d54:	687b      	ldr	r3, [r7, #4]
 8019d56:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8019d58:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8019d5c:	d004      	beq.n	8019d68 <UART_AdvFeatureConfig+0xfc>
 8019d5e:	f640 41b2 	movw	r1, #3250	@ 0xcb2
 8019d62:	4856      	ldr	r0, [pc, #344]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019d64:	f7f8 fba6 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8019d68:	687b      	ldr	r3, [r7, #4]
 8019d6a:	681b      	ldr	r3, [r3, #0]
 8019d6c:	685b      	ldr	r3, [r3, #4]
 8019d6e:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8019d72:	687b      	ldr	r3, [r7, #4]
 8019d74:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8019d76:	687b      	ldr	r3, [r7, #4]
 8019d78:	681b      	ldr	r3, [r3, #0]
 8019d7a:	430a      	orrs	r2, r1
 8019d7c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8019d7e:	687b      	ldr	r3, [r7, #4]
 8019d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019d82:	f003 0310 	and.w	r3, r3, #16
 8019d86:	2b00      	cmp	r3, #0
 8019d88:	d018      	beq.n	8019dbc <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8019d8a:	687b      	ldr	r3, [r7, #4]
 8019d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d8e:	2b00      	cmp	r3, #0
 8019d90:	d009      	beq.n	8019da6 <UART_AdvFeatureConfig+0x13a>
 8019d92:	687b      	ldr	r3, [r7, #4]
 8019d94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8019d96:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8019d9a:	d004      	beq.n	8019da6 <UART_AdvFeatureConfig+0x13a>
 8019d9c:	f640 41b9 	movw	r1, #3257	@ 0xcb9
 8019da0:	4846      	ldr	r0, [pc, #280]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019da2:	f7f8 fb87 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8019da6:	687b      	ldr	r3, [r7, #4]
 8019da8:	681b      	ldr	r3, [r3, #0]
 8019daa:	689b      	ldr	r3, [r3, #8]
 8019dac:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8019db0:	687b      	ldr	r3, [r7, #4]
 8019db2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8019db4:	687b      	ldr	r3, [r7, #4]
 8019db6:	681b      	ldr	r3, [r3, #0]
 8019db8:	430a      	orrs	r2, r1
 8019dba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8019dbc:	687b      	ldr	r3, [r7, #4]
 8019dbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019dc0:	f003 0320 	and.w	r3, r3, #32
 8019dc4:	2b00      	cmp	r3, #0
 8019dc6:	d018      	beq.n	8019dfa <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8019dc8:	687b      	ldr	r3, [r7, #4]
 8019dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019dcc:	2b00      	cmp	r3, #0
 8019dce:	d009      	beq.n	8019de4 <UART_AdvFeatureConfig+0x178>
 8019dd0:	687b      	ldr	r3, [r7, #4]
 8019dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8019dd4:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8019dd8:	d004      	beq.n	8019de4 <UART_AdvFeatureConfig+0x178>
 8019dda:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8019dde:	4837      	ldr	r0, [pc, #220]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019de0:	f7f8 fb68 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8019de4:	687b      	ldr	r3, [r7, #4]
 8019de6:	681b      	ldr	r3, [r3, #0]
 8019de8:	689b      	ldr	r3, [r3, #8]
 8019dea:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8019dee:	687b      	ldr	r3, [r7, #4]
 8019df0:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8019df2:	687b      	ldr	r3, [r7, #4]
 8019df4:	681b      	ldr	r3, [r3, #0]
 8019df6:	430a      	orrs	r2, r1
 8019df8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8019dfa:	687b      	ldr	r3, [r7, #4]
 8019dfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019dfe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d064      	beq.n	8019ed0 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8019e06:	687b      	ldr	r3, [r7, #4]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	4a2d      	ldr	r2, [pc, #180]	@ (8019ec0 <UART_AdvFeatureConfig+0x254>)
 8019e0c:	4293      	cmp	r3, r2
 8019e0e:	d013      	beq.n	8019e38 <UART_AdvFeatureConfig+0x1cc>
 8019e10:	687b      	ldr	r3, [r7, #4]
 8019e12:	681b      	ldr	r3, [r3, #0]
 8019e14:	4a2b      	ldr	r2, [pc, #172]	@ (8019ec4 <UART_AdvFeatureConfig+0x258>)
 8019e16:	4293      	cmp	r3, r2
 8019e18:	d00e      	beq.n	8019e38 <UART_AdvFeatureConfig+0x1cc>
 8019e1a:	687b      	ldr	r3, [r7, #4]
 8019e1c:	681b      	ldr	r3, [r3, #0]
 8019e1e:	4a2a      	ldr	r2, [pc, #168]	@ (8019ec8 <UART_AdvFeatureConfig+0x25c>)
 8019e20:	4293      	cmp	r3, r2
 8019e22:	d009      	beq.n	8019e38 <UART_AdvFeatureConfig+0x1cc>
 8019e24:	687b      	ldr	r3, [r7, #4]
 8019e26:	681b      	ldr	r3, [r3, #0]
 8019e28:	4a28      	ldr	r2, [pc, #160]	@ (8019ecc <UART_AdvFeatureConfig+0x260>)
 8019e2a:	4293      	cmp	r3, r2
 8019e2c:	d004      	beq.n	8019e38 <UART_AdvFeatureConfig+0x1cc>
 8019e2e:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 8019e32:	4822      	ldr	r0, [pc, #136]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019e34:	f7f8 fb3e 	bl	80124b4 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8019e38:	687b      	ldr	r3, [r7, #4]
 8019e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019e3c:	2b00      	cmp	r3, #0
 8019e3e:	d009      	beq.n	8019e54 <UART_AdvFeatureConfig+0x1e8>
 8019e40:	687b      	ldr	r3, [r7, #4]
 8019e42:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019e44:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019e48:	d004      	beq.n	8019e54 <UART_AdvFeatureConfig+0x1e8>
 8019e4a:	f640 41c8 	movw	r1, #3272	@ 0xcc8
 8019e4e:	481b      	ldr	r0, [pc, #108]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019e50:	f7f8 fb30 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8019e54:	687b      	ldr	r3, [r7, #4]
 8019e56:	681b      	ldr	r3, [r3, #0]
 8019e58:	685b      	ldr	r3, [r3, #4]
 8019e5a:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8019e5e:	687b      	ldr	r3, [r7, #4]
 8019e60:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8019e62:	687b      	ldr	r3, [r7, #4]
 8019e64:	681b      	ldr	r3, [r3, #0]
 8019e66:	430a      	orrs	r2, r1
 8019e68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8019e6a:	687b      	ldr	r3, [r7, #4]
 8019e6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8019e6e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8019e72:	d12d      	bne.n	8019ed0 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8019e74:	687b      	ldr	r3, [r7, #4]
 8019e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019e78:	2b00      	cmp	r3, #0
 8019e7a:	d013      	beq.n	8019ea4 <UART_AdvFeatureConfig+0x238>
 8019e7c:	687b      	ldr	r3, [r7, #4]
 8019e7e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019e80:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8019e84:	d00e      	beq.n	8019ea4 <UART_AdvFeatureConfig+0x238>
 8019e86:	687b      	ldr	r3, [r7, #4]
 8019e88:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019e8a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8019e8e:	d009      	beq.n	8019ea4 <UART_AdvFeatureConfig+0x238>
 8019e90:	687b      	ldr	r3, [r7, #4]
 8019e92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8019e94:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8019e98:	d004      	beq.n	8019ea4 <UART_AdvFeatureConfig+0x238>
 8019e9a:	f640 41cd 	movw	r1, #3277	@ 0xccd
 8019e9e:	4807      	ldr	r0, [pc, #28]	@ (8019ebc <UART_AdvFeatureConfig+0x250>)
 8019ea0:	f7f8 fb08 	bl	80124b4 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8019ea4:	687b      	ldr	r3, [r7, #4]
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	685b      	ldr	r3, [r3, #4]
 8019eaa:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8019eae:	687b      	ldr	r3, [r7, #4]
 8019eb0:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8019eb2:	687b      	ldr	r3, [r7, #4]
 8019eb4:	681b      	ldr	r3, [r3, #0]
 8019eb6:	430a      	orrs	r2, r1
 8019eb8:	605a      	str	r2, [r3, #4]
 8019eba:	e009      	b.n	8019ed0 <UART_AdvFeatureConfig+0x264>
 8019ebc:	0801df08 	.word	0x0801df08
 8019ec0:	40013800 	.word	0x40013800
 8019ec4:	40004400 	.word	0x40004400
 8019ec8:	40004800 	.word	0x40004800
 8019ecc:	40004c00 	.word	0x40004c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8019ed0:	687b      	ldr	r3, [r7, #4]
 8019ed2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8019ed4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d018      	beq.n	8019f0e <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8019edc:	687b      	ldr	r3, [r7, #4]
 8019ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ee0:	2b00      	cmp	r3, #0
 8019ee2:	d009      	beq.n	8019ef8 <UART_AdvFeatureConfig+0x28c>
 8019ee4:	687b      	ldr	r3, [r7, #4]
 8019ee6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8019ee8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8019eec:	d004      	beq.n	8019ef8 <UART_AdvFeatureConfig+0x28c>
 8019eee:	f640 41d5 	movw	r1, #3285	@ 0xcd5
 8019ef2:	4809      	ldr	r0, [pc, #36]	@ (8019f18 <UART_AdvFeatureConfig+0x2ac>)
 8019ef4:	f7f8 fade 	bl	80124b4 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8019ef8:	687b      	ldr	r3, [r7, #4]
 8019efa:	681b      	ldr	r3, [r3, #0]
 8019efc:	685b      	ldr	r3, [r3, #4]
 8019efe:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8019f02:	687b      	ldr	r3, [r7, #4]
 8019f04:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8019f06:	687b      	ldr	r3, [r7, #4]
 8019f08:	681b      	ldr	r3, [r3, #0]
 8019f0a:	430a      	orrs	r2, r1
 8019f0c:	605a      	str	r2, [r3, #4]
  }
}
 8019f0e:	bf00      	nop
 8019f10:	3708      	adds	r7, #8
 8019f12:	46bd      	mov	sp, r7
 8019f14:	bd80      	pop	{r7, pc}
 8019f16:	bf00      	nop
 8019f18:	0801df08 	.word	0x0801df08

08019f1c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8019f1c:	b580      	push	{r7, lr}
 8019f1e:	b098      	sub	sp, #96	@ 0x60
 8019f20:	af02      	add	r7, sp, #8
 8019f22:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8019f24:	687b      	ldr	r3, [r7, #4]
 8019f26:	2200      	movs	r2, #0
 8019f28:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8019f2c:	f7f8 fde6 	bl	8012afc <HAL_GetTick>
 8019f30:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8019f32:	687b      	ldr	r3, [r7, #4]
 8019f34:	681b      	ldr	r3, [r3, #0]
 8019f36:	681b      	ldr	r3, [r3, #0]
 8019f38:	f003 0308 	and.w	r3, r3, #8
 8019f3c:	2b08      	cmp	r3, #8
 8019f3e:	d12f      	bne.n	8019fa0 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019f40:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019f44:	9300      	str	r3, [sp, #0]
 8019f46:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019f48:	2200      	movs	r2, #0
 8019f4a:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8019f4e:	6878      	ldr	r0, [r7, #4]
 8019f50:	f000 f88e 	bl	801a070 <UART_WaitOnFlagUntilTimeout>
 8019f54:	4603      	mov	r3, r0
 8019f56:	2b00      	cmp	r3, #0
 8019f58:	d022      	beq.n	8019fa0 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8019f5a:	687b      	ldr	r3, [r7, #4]
 8019f5c:	681b      	ldr	r3, [r3, #0]
 8019f5e:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019f60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8019f62:	e853 3f00 	ldrex	r3, [r3]
 8019f66:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8019f68:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8019f6a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8019f6e:	653b      	str	r3, [r7, #80]	@ 0x50
 8019f70:	687b      	ldr	r3, [r7, #4]
 8019f72:	681b      	ldr	r3, [r3, #0]
 8019f74:	461a      	mov	r2, r3
 8019f76:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8019f78:	647b      	str	r3, [r7, #68]	@ 0x44
 8019f7a:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019f7c:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8019f7e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019f80:	e841 2300 	strex	r3, r2, [r1]
 8019f84:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8019f86:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8019f88:	2b00      	cmp	r3, #0
 8019f8a:	d1e6      	bne.n	8019f5a <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	2220      	movs	r2, #32
 8019f90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8019f94:	687b      	ldr	r3, [r7, #4]
 8019f96:	2200      	movs	r2, #0
 8019f98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8019f9c:	2303      	movs	r3, #3
 8019f9e:	e063      	b.n	801a068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8019fa0:	687b      	ldr	r3, [r7, #4]
 8019fa2:	681b      	ldr	r3, [r3, #0]
 8019fa4:	681b      	ldr	r3, [r3, #0]
 8019fa6:	f003 0304 	and.w	r3, r3, #4
 8019faa:	2b04      	cmp	r3, #4
 8019fac:	d149      	bne.n	801a042 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8019fae:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8019fb2:	9300      	str	r3, [sp, #0]
 8019fb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8019fb6:	2200      	movs	r2, #0
 8019fb8:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8019fbc:	6878      	ldr	r0, [r7, #4]
 8019fbe:	f000 f857 	bl	801a070 <UART_WaitOnFlagUntilTimeout>
 8019fc2:	4603      	mov	r3, r0
 8019fc4:	2b00      	cmp	r3, #0
 8019fc6:	d03c      	beq.n	801a042 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8019fc8:	687b      	ldr	r3, [r7, #4]
 8019fca:	681b      	ldr	r3, [r3, #0]
 8019fcc:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8019fce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8019fd0:	e853 3f00 	ldrex	r3, [r3]
 8019fd4:	623b      	str	r3, [r7, #32]
   return(result);
 8019fd6:	6a3b      	ldr	r3, [r7, #32]
 8019fd8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8019fdc:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8019fde:	687b      	ldr	r3, [r7, #4]
 8019fe0:	681b      	ldr	r3, [r3, #0]
 8019fe2:	461a      	mov	r2, r3
 8019fe4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8019fe6:	633b      	str	r3, [r7, #48]	@ 0x30
 8019fe8:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8019fea:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8019fec:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8019fee:	e841 2300 	strex	r3, r2, [r1]
 8019ff2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8019ff4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8019ff6:	2b00      	cmp	r3, #0
 8019ff8:	d1e6      	bne.n	8019fc8 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8019ffa:	687b      	ldr	r3, [r7, #4]
 8019ffc:	681b      	ldr	r3, [r3, #0]
 8019ffe:	3308      	adds	r3, #8
 801a000:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a002:	693b      	ldr	r3, [r7, #16]
 801a004:	e853 3f00 	ldrex	r3, [r3]
 801a008:	60fb      	str	r3, [r7, #12]
   return(result);
 801a00a:	68fb      	ldr	r3, [r7, #12]
 801a00c:	f023 0301 	bic.w	r3, r3, #1
 801a010:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a012:	687b      	ldr	r3, [r7, #4]
 801a014:	681b      	ldr	r3, [r3, #0]
 801a016:	3308      	adds	r3, #8
 801a018:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a01a:	61fa      	str	r2, [r7, #28]
 801a01c:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a01e:	69b9      	ldr	r1, [r7, #24]
 801a020:	69fa      	ldr	r2, [r7, #28]
 801a022:	e841 2300 	strex	r3, r2, [r1]
 801a026:	617b      	str	r3, [r7, #20]
   return(result);
 801a028:	697b      	ldr	r3, [r7, #20]
 801a02a:	2b00      	cmp	r3, #0
 801a02c:	d1e5      	bne.n	8019ffa <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 801a02e:	687b      	ldr	r3, [r7, #4]
 801a030:	2220      	movs	r2, #32
 801a032:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801a036:	687b      	ldr	r3, [r7, #4]
 801a038:	2200      	movs	r2, #0
 801a03a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 801a03e:	2303      	movs	r3, #3
 801a040:	e012      	b.n	801a068 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801a042:	687b      	ldr	r3, [r7, #4]
 801a044:	2220      	movs	r2, #32
 801a046:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 801a04a:	687b      	ldr	r3, [r7, #4]
 801a04c:	2220      	movs	r2, #32
 801a04e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a052:	687b      	ldr	r3, [r7, #4]
 801a054:	2200      	movs	r2, #0
 801a056:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a058:	687b      	ldr	r3, [r7, #4]
 801a05a:	2200      	movs	r2, #0
 801a05c:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 801a05e:	687b      	ldr	r3, [r7, #4]
 801a060:	2200      	movs	r2, #0
 801a062:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801a066:	2300      	movs	r3, #0
}
 801a068:	4618      	mov	r0, r3
 801a06a:	3758      	adds	r7, #88	@ 0x58
 801a06c:	46bd      	mov	sp, r7
 801a06e:	bd80      	pop	{r7, pc}

0801a070 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 801a070:	b580      	push	{r7, lr}
 801a072:	b084      	sub	sp, #16
 801a074:	af00      	add	r7, sp, #0
 801a076:	60f8      	str	r0, [r7, #12]
 801a078:	60b9      	str	r1, [r7, #8]
 801a07a:	603b      	str	r3, [r7, #0]
 801a07c:	4613      	mov	r3, r2
 801a07e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a080:	e04f      	b.n	801a122 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801a082:	69bb      	ldr	r3, [r7, #24]
 801a084:	f1b3 3fff 	cmp.w	r3, #4294967295
 801a088:	d04b      	beq.n	801a122 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801a08a:	f7f8 fd37 	bl	8012afc <HAL_GetTick>
 801a08e:	4602      	mov	r2, r0
 801a090:	683b      	ldr	r3, [r7, #0]
 801a092:	1ad3      	subs	r3, r2, r3
 801a094:	69ba      	ldr	r2, [r7, #24]
 801a096:	429a      	cmp	r2, r3
 801a098:	d302      	bcc.n	801a0a0 <UART_WaitOnFlagUntilTimeout+0x30>
 801a09a:	69bb      	ldr	r3, [r7, #24]
 801a09c:	2b00      	cmp	r3, #0
 801a09e:	d101      	bne.n	801a0a4 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 801a0a0:	2303      	movs	r3, #3
 801a0a2:	e04e      	b.n	801a142 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801a0a4:	68fb      	ldr	r3, [r7, #12]
 801a0a6:	681b      	ldr	r3, [r3, #0]
 801a0a8:	681b      	ldr	r3, [r3, #0]
 801a0aa:	f003 0304 	and.w	r3, r3, #4
 801a0ae:	2b00      	cmp	r3, #0
 801a0b0:	d037      	beq.n	801a122 <UART_WaitOnFlagUntilTimeout+0xb2>
 801a0b2:	68bb      	ldr	r3, [r7, #8]
 801a0b4:	2b80      	cmp	r3, #128	@ 0x80
 801a0b6:	d034      	beq.n	801a122 <UART_WaitOnFlagUntilTimeout+0xb2>
 801a0b8:	68bb      	ldr	r3, [r7, #8]
 801a0ba:	2b40      	cmp	r3, #64	@ 0x40
 801a0bc:	d031      	beq.n	801a122 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 801a0be:	68fb      	ldr	r3, [r7, #12]
 801a0c0:	681b      	ldr	r3, [r3, #0]
 801a0c2:	69db      	ldr	r3, [r3, #28]
 801a0c4:	f003 0308 	and.w	r3, r3, #8
 801a0c8:	2b08      	cmp	r3, #8
 801a0ca:	d110      	bne.n	801a0ee <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 801a0cc:	68fb      	ldr	r3, [r7, #12]
 801a0ce:	681b      	ldr	r3, [r3, #0]
 801a0d0:	2208      	movs	r2, #8
 801a0d2:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a0d4:	68f8      	ldr	r0, [r7, #12]
 801a0d6:	f000 f95b 	bl	801a390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 801a0da:	68fb      	ldr	r3, [r7, #12]
 801a0dc:	2208      	movs	r2, #8
 801a0de:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a0e2:	68fb      	ldr	r3, [r7, #12]
 801a0e4:	2200      	movs	r2, #0
 801a0e6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 801a0ea:	2301      	movs	r3, #1
 801a0ec:	e029      	b.n	801a142 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 801a0ee:	68fb      	ldr	r3, [r7, #12]
 801a0f0:	681b      	ldr	r3, [r3, #0]
 801a0f2:	69db      	ldr	r3, [r3, #28]
 801a0f4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 801a0f8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801a0fc:	d111      	bne.n	801a122 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 801a0fe:	68fb      	ldr	r3, [r7, #12]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 801a106:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 801a108:	68f8      	ldr	r0, [r7, #12]
 801a10a:	f000 f941 	bl	801a390 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	2220      	movs	r2, #32
 801a112:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801a116:	68fb      	ldr	r3, [r7, #12]
 801a118:	2200      	movs	r2, #0
 801a11a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 801a11e:	2303      	movs	r3, #3
 801a120:	e00f      	b.n	801a142 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801a122:	68fb      	ldr	r3, [r7, #12]
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	69da      	ldr	r2, [r3, #28]
 801a128:	68bb      	ldr	r3, [r7, #8]
 801a12a:	4013      	ands	r3, r2
 801a12c:	68ba      	ldr	r2, [r7, #8]
 801a12e:	429a      	cmp	r2, r3
 801a130:	bf0c      	ite	eq
 801a132:	2301      	moveq	r3, #1
 801a134:	2300      	movne	r3, #0
 801a136:	b2db      	uxtb	r3, r3
 801a138:	461a      	mov	r2, r3
 801a13a:	79fb      	ldrb	r3, [r7, #7]
 801a13c:	429a      	cmp	r2, r3
 801a13e:	d0a0      	beq.n	801a082 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 801a140:	2300      	movs	r3, #0
}
 801a142:	4618      	mov	r0, r3
 801a144:	3710      	adds	r7, #16
 801a146:	46bd      	mov	sp, r7
 801a148:	bd80      	pop	{r7, pc}
	...

0801a14c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801a14c:	b480      	push	{r7}
 801a14e:	b0a3      	sub	sp, #140	@ 0x8c
 801a150:	af00      	add	r7, sp, #0
 801a152:	60f8      	str	r0, [r7, #12]
 801a154:	60b9      	str	r1, [r7, #8]
 801a156:	4613      	mov	r3, r2
 801a158:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 801a15a:	68fb      	ldr	r3, [r7, #12]
 801a15c:	68ba      	ldr	r2, [r7, #8]
 801a15e:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 801a160:	68fb      	ldr	r3, [r7, #12]
 801a162:	88fa      	ldrh	r2, [r7, #6]
 801a164:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 801a168:	68fb      	ldr	r3, [r7, #12]
 801a16a:	88fa      	ldrh	r2, [r7, #6]
 801a16c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	2200      	movs	r2, #0
 801a174:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801a176:	68fb      	ldr	r3, [r7, #12]
 801a178:	689b      	ldr	r3, [r3, #8]
 801a17a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a17e:	d10e      	bne.n	801a19e <UART_Start_Receive_IT+0x52>
 801a180:	68fb      	ldr	r3, [r7, #12]
 801a182:	691b      	ldr	r3, [r3, #16]
 801a184:	2b00      	cmp	r3, #0
 801a186:	d105      	bne.n	801a194 <UART_Start_Receive_IT+0x48>
 801a188:	68fb      	ldr	r3, [r7, #12]
 801a18a:	f240 12ff 	movw	r2, #511	@ 0x1ff
 801a18e:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a192:	e02d      	b.n	801a1f0 <UART_Start_Receive_IT+0xa4>
 801a194:	68fb      	ldr	r3, [r7, #12]
 801a196:	22ff      	movs	r2, #255	@ 0xff
 801a198:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a19c:	e028      	b.n	801a1f0 <UART_Start_Receive_IT+0xa4>
 801a19e:	68fb      	ldr	r3, [r7, #12]
 801a1a0:	689b      	ldr	r3, [r3, #8]
 801a1a2:	2b00      	cmp	r3, #0
 801a1a4:	d10d      	bne.n	801a1c2 <UART_Start_Receive_IT+0x76>
 801a1a6:	68fb      	ldr	r3, [r7, #12]
 801a1a8:	691b      	ldr	r3, [r3, #16]
 801a1aa:	2b00      	cmp	r3, #0
 801a1ac:	d104      	bne.n	801a1b8 <UART_Start_Receive_IT+0x6c>
 801a1ae:	68fb      	ldr	r3, [r7, #12]
 801a1b0:	22ff      	movs	r2, #255	@ 0xff
 801a1b2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a1b6:	e01b      	b.n	801a1f0 <UART_Start_Receive_IT+0xa4>
 801a1b8:	68fb      	ldr	r3, [r7, #12]
 801a1ba:	227f      	movs	r2, #127	@ 0x7f
 801a1bc:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a1c0:	e016      	b.n	801a1f0 <UART_Start_Receive_IT+0xa4>
 801a1c2:	68fb      	ldr	r3, [r7, #12]
 801a1c4:	689b      	ldr	r3, [r3, #8]
 801a1c6:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801a1ca:	d10d      	bne.n	801a1e8 <UART_Start_Receive_IT+0x9c>
 801a1cc:	68fb      	ldr	r3, [r7, #12]
 801a1ce:	691b      	ldr	r3, [r3, #16]
 801a1d0:	2b00      	cmp	r3, #0
 801a1d2:	d104      	bne.n	801a1de <UART_Start_Receive_IT+0x92>
 801a1d4:	68fb      	ldr	r3, [r7, #12]
 801a1d6:	227f      	movs	r2, #127	@ 0x7f
 801a1d8:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a1dc:	e008      	b.n	801a1f0 <UART_Start_Receive_IT+0xa4>
 801a1de:	68fb      	ldr	r3, [r7, #12]
 801a1e0:	223f      	movs	r2, #63	@ 0x3f
 801a1e2:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801a1e6:	e003      	b.n	801a1f0 <UART_Start_Receive_IT+0xa4>
 801a1e8:	68fb      	ldr	r3, [r7, #12]
 801a1ea:	2200      	movs	r2, #0
 801a1ec:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a1f0:	68fb      	ldr	r3, [r7, #12]
 801a1f2:	2200      	movs	r2, #0
 801a1f4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 801a1f8:	68fb      	ldr	r3, [r7, #12]
 801a1fa:	2222      	movs	r2, #34	@ 0x22
 801a1fc:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a200:	68fb      	ldr	r3, [r7, #12]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	3308      	adds	r3, #8
 801a206:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a208:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a20a:	e853 3f00 	ldrex	r3, [r3]
 801a20e:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801a210:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a212:	f043 0301 	orr.w	r3, r3, #1
 801a216:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801a21a:	68fb      	ldr	r3, [r7, #12]
 801a21c:	681b      	ldr	r3, [r3, #0]
 801a21e:	3308      	adds	r3, #8
 801a220:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801a224:	673a      	str	r2, [r7, #112]	@ 0x70
 801a226:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a228:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 801a22a:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 801a22c:	e841 2300 	strex	r3, r2, [r1]
 801a230:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801a232:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a234:	2b00      	cmp	r3, #0
 801a236:	d1e3      	bne.n	801a200 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 801a238:	68fb      	ldr	r3, [r7, #12]
 801a23a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801a23c:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801a240:	d14f      	bne.n	801a2e2 <UART_Start_Receive_IT+0x196>
 801a242:	68fb      	ldr	r3, [r7, #12]
 801a244:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a248:	88fa      	ldrh	r2, [r7, #6]
 801a24a:	429a      	cmp	r2, r3
 801a24c:	d349      	bcc.n	801a2e2 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a24e:	68fb      	ldr	r3, [r7, #12]
 801a250:	689b      	ldr	r3, [r3, #8]
 801a252:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a256:	d107      	bne.n	801a268 <UART_Start_Receive_IT+0x11c>
 801a258:	68fb      	ldr	r3, [r7, #12]
 801a25a:	691b      	ldr	r3, [r3, #16]
 801a25c:	2b00      	cmp	r3, #0
 801a25e:	d103      	bne.n	801a268 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 801a260:	68fb      	ldr	r3, [r7, #12]
 801a262:	4a47      	ldr	r2, [pc, #284]	@ (801a380 <UART_Start_Receive_IT+0x234>)
 801a264:	675a      	str	r2, [r3, #116]	@ 0x74
 801a266:	e002      	b.n	801a26e <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 801a268:	68fb      	ldr	r3, [r7, #12]
 801a26a:	4a46      	ldr	r2, [pc, #280]	@ (801a384 <UART_Start_Receive_IT+0x238>)
 801a26c:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801a26e:	68fb      	ldr	r3, [r7, #12]
 801a270:	691b      	ldr	r3, [r3, #16]
 801a272:	2b00      	cmp	r3, #0
 801a274:	d01a      	beq.n	801a2ac <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a276:	68fb      	ldr	r3, [r7, #12]
 801a278:	681b      	ldr	r3, [r3, #0]
 801a27a:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a27c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a27e:	e853 3f00 	ldrex	r3, [r3]
 801a282:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a284:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a286:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 801a28a:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801a28e:	68fb      	ldr	r3, [r7, #12]
 801a290:	681b      	ldr	r3, [r3, #0]
 801a292:	461a      	mov	r2, r3
 801a294:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801a298:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a29a:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a29c:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 801a29e:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 801a2a0:	e841 2300 	strex	r3, r2, [r1]
 801a2a4:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801a2a6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801a2a8:	2b00      	cmp	r3, #0
 801a2aa:	d1e4      	bne.n	801a276 <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801a2ac:	68fb      	ldr	r3, [r7, #12]
 801a2ae:	681b      	ldr	r3, [r3, #0]
 801a2b0:	3308      	adds	r3, #8
 801a2b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a2b4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a2b6:	e853 3f00 	ldrex	r3, [r3]
 801a2ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a2bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a2be:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801a2c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a2c4:	68fb      	ldr	r3, [r7, #12]
 801a2c6:	681b      	ldr	r3, [r3, #0]
 801a2c8:	3308      	adds	r3, #8
 801a2ca:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a2cc:	64ba      	str	r2, [r7, #72]	@ 0x48
 801a2ce:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a2d0:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 801a2d2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a2d4:	e841 2300 	strex	r3, r2, [r1]
 801a2d8:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 801a2da:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801a2dc:	2b00      	cmp	r3, #0
 801a2de:	d1e5      	bne.n	801a2ac <UART_Start_Receive_IT+0x160>
 801a2e0:	e046      	b.n	801a370 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801a2e2:	68fb      	ldr	r3, [r7, #12]
 801a2e4:	689b      	ldr	r3, [r3, #8]
 801a2e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801a2ea:	d107      	bne.n	801a2fc <UART_Start_Receive_IT+0x1b0>
 801a2ec:	68fb      	ldr	r3, [r7, #12]
 801a2ee:	691b      	ldr	r3, [r3, #16]
 801a2f0:	2b00      	cmp	r3, #0
 801a2f2:	d103      	bne.n	801a2fc <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 801a2f4:	68fb      	ldr	r3, [r7, #12]
 801a2f6:	4a24      	ldr	r2, [pc, #144]	@ (801a388 <UART_Start_Receive_IT+0x23c>)
 801a2f8:	675a      	str	r2, [r3, #116]	@ 0x74
 801a2fa:	e002      	b.n	801a302 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 801a2fc:	68fb      	ldr	r3, [r7, #12]
 801a2fe:	4a23      	ldr	r2, [pc, #140]	@ (801a38c <UART_Start_Receive_IT+0x240>)
 801a300:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 801a302:	68fb      	ldr	r3, [r7, #12]
 801a304:	691b      	ldr	r3, [r3, #16]
 801a306:	2b00      	cmp	r3, #0
 801a308:	d019      	beq.n	801a33e <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 801a30a:	68fb      	ldr	r3, [r7, #12]
 801a30c:	681b      	ldr	r3, [r3, #0]
 801a30e:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a310:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a312:	e853 3f00 	ldrex	r3, [r3]
 801a316:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a318:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a31a:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 801a31e:	677b      	str	r3, [r7, #116]	@ 0x74
 801a320:	68fb      	ldr	r3, [r7, #12]
 801a322:	681b      	ldr	r3, [r3, #0]
 801a324:	461a      	mov	r2, r3
 801a326:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a328:	637b      	str	r3, [r7, #52]	@ 0x34
 801a32a:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a32c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 801a32e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801a330:	e841 2300 	strex	r3, r2, [r1]
 801a334:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801a336:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801a338:	2b00      	cmp	r3, #0
 801a33a:	d1e6      	bne.n	801a30a <UART_Start_Receive_IT+0x1be>
 801a33c:	e018      	b.n	801a370 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801a33e:	68fb      	ldr	r3, [r7, #12]
 801a340:	681b      	ldr	r3, [r3, #0]
 801a342:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a344:	697b      	ldr	r3, [r7, #20]
 801a346:	e853 3f00 	ldrex	r3, [r3]
 801a34a:	613b      	str	r3, [r7, #16]
   return(result);
 801a34c:	693b      	ldr	r3, [r7, #16]
 801a34e:	f043 0320 	orr.w	r3, r3, #32
 801a352:	67bb      	str	r3, [r7, #120]	@ 0x78
 801a354:	68fb      	ldr	r3, [r7, #12]
 801a356:	681b      	ldr	r3, [r3, #0]
 801a358:	461a      	mov	r2, r3
 801a35a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801a35c:	623b      	str	r3, [r7, #32]
 801a35e:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a360:	69f9      	ldr	r1, [r7, #28]
 801a362:	6a3a      	ldr	r2, [r7, #32]
 801a364:	e841 2300 	strex	r3, r2, [r1]
 801a368:	61bb      	str	r3, [r7, #24]
   return(result);
 801a36a:	69bb      	ldr	r3, [r7, #24]
 801a36c:	2b00      	cmp	r3, #0
 801a36e:	d1e6      	bne.n	801a33e <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 801a370:	2300      	movs	r3, #0
}
 801a372:	4618      	mov	r0, r3
 801a374:	378c      	adds	r7, #140	@ 0x8c
 801a376:	46bd      	mov	sp, r7
 801a378:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a37c:	4770      	bx	lr
 801a37e:	bf00      	nop
 801a380:	0801abb1 	.word	0x0801abb1
 801a384:	0801a851 	.word	0x0801a851
 801a388:	0801a699 	.word	0x0801a699
 801a38c:	0801a4e1 	.word	0x0801a4e1

0801a390 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 801a390:	b480      	push	{r7}
 801a392:	b095      	sub	sp, #84	@ 0x54
 801a394:	af00      	add	r7, sp, #0
 801a396:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a398:	687b      	ldr	r3, [r7, #4]
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a39e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a3a0:	e853 3f00 	ldrex	r3, [r3]
 801a3a4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a3a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a3a8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a3ac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801a3ae:	687b      	ldr	r3, [r7, #4]
 801a3b0:	681b      	ldr	r3, [r3, #0]
 801a3b2:	461a      	mov	r2, r3
 801a3b4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a3b6:	643b      	str	r3, [r7, #64]	@ 0x40
 801a3b8:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3ba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a3bc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a3be:	e841 2300 	strex	r3, r2, [r1]
 801a3c2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a3c4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a3c6:	2b00      	cmp	r3, #0
 801a3c8:	d1e6      	bne.n	801a398 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a3ca:	687b      	ldr	r3, [r7, #4]
 801a3cc:	681b      	ldr	r3, [r3, #0]
 801a3ce:	3308      	adds	r3, #8
 801a3d0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a3d2:	6a3b      	ldr	r3, [r7, #32]
 801a3d4:	e853 3f00 	ldrex	r3, [r3]
 801a3d8:	61fb      	str	r3, [r7, #28]
   return(result);
 801a3da:	69fb      	ldr	r3, [r7, #28]
 801a3dc:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a3e0:	f023 0301 	bic.w	r3, r3, #1
 801a3e4:	64bb      	str	r3, [r7, #72]	@ 0x48
 801a3e6:	687b      	ldr	r3, [r7, #4]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	3308      	adds	r3, #8
 801a3ec:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 801a3ee:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801a3f0:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a3f2:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a3f4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a3f6:	e841 2300 	strex	r3, r2, [r1]
 801a3fa:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a3fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a3fe:	2b00      	cmp	r3, #0
 801a400:	d1e3      	bne.n	801a3ca <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a402:	687b      	ldr	r3, [r7, #4]
 801a404:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a406:	2b01      	cmp	r3, #1
 801a408:	d118      	bne.n	801a43c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a40a:	687b      	ldr	r3, [r7, #4]
 801a40c:	681b      	ldr	r3, [r3, #0]
 801a40e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a410:	68fb      	ldr	r3, [r7, #12]
 801a412:	e853 3f00 	ldrex	r3, [r3]
 801a416:	60bb      	str	r3, [r7, #8]
   return(result);
 801a418:	68bb      	ldr	r3, [r7, #8]
 801a41a:	f023 0310 	bic.w	r3, r3, #16
 801a41e:	647b      	str	r3, [r7, #68]	@ 0x44
 801a420:	687b      	ldr	r3, [r7, #4]
 801a422:	681b      	ldr	r3, [r3, #0]
 801a424:	461a      	mov	r2, r3
 801a426:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a428:	61bb      	str	r3, [r7, #24]
 801a42a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a42c:	6979      	ldr	r1, [r7, #20]
 801a42e:	69ba      	ldr	r2, [r7, #24]
 801a430:	e841 2300 	strex	r3, r2, [r1]
 801a434:	613b      	str	r3, [r7, #16]
   return(result);
 801a436:	693b      	ldr	r3, [r7, #16]
 801a438:	2b00      	cmp	r3, #0
 801a43a:	d1e6      	bne.n	801a40a <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 801a43c:	687b      	ldr	r3, [r7, #4]
 801a43e:	2220      	movs	r2, #32
 801a440:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a444:	687b      	ldr	r3, [r7, #4]
 801a446:	2200      	movs	r2, #0
 801a448:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 801a44a:	687b      	ldr	r3, [r7, #4]
 801a44c:	2200      	movs	r2, #0
 801a44e:	675a      	str	r2, [r3, #116]	@ 0x74
}
 801a450:	bf00      	nop
 801a452:	3754      	adds	r7, #84	@ 0x54
 801a454:	46bd      	mov	sp, r7
 801a456:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a45a:	4770      	bx	lr

0801a45c <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 801a45c:	b580      	push	{r7, lr}
 801a45e:	b084      	sub	sp, #16
 801a460:	af00      	add	r7, sp, #0
 801a462:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801a464:	687b      	ldr	r3, [r7, #4]
 801a466:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801a468:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801a46a:	68fb      	ldr	r3, [r7, #12]
 801a46c:	2200      	movs	r2, #0
 801a46e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801a472:	68fb      	ldr	r3, [r7, #12]
 801a474:	2200      	movs	r2, #0
 801a476:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 801a47a:	68f8      	ldr	r0, [r7, #12]
 801a47c:	f7ff f832 	bl	80194e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a480:	bf00      	nop
 801a482:	3710      	adds	r7, #16
 801a484:	46bd      	mov	sp, r7
 801a486:	bd80      	pop	{r7, pc}

0801a488 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 801a488:	b580      	push	{r7, lr}
 801a48a:	b088      	sub	sp, #32
 801a48c:	af00      	add	r7, sp, #0
 801a48e:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 801a490:	687b      	ldr	r3, [r7, #4]
 801a492:	681b      	ldr	r3, [r3, #0]
 801a494:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a496:	68fb      	ldr	r3, [r7, #12]
 801a498:	e853 3f00 	ldrex	r3, [r3]
 801a49c:	60bb      	str	r3, [r7, #8]
   return(result);
 801a49e:	68bb      	ldr	r3, [r7, #8]
 801a4a0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801a4a4:	61fb      	str	r3, [r7, #28]
 801a4a6:	687b      	ldr	r3, [r7, #4]
 801a4a8:	681b      	ldr	r3, [r3, #0]
 801a4aa:	461a      	mov	r2, r3
 801a4ac:	69fb      	ldr	r3, [r7, #28]
 801a4ae:	61bb      	str	r3, [r7, #24]
 801a4b0:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a4b2:	6979      	ldr	r1, [r7, #20]
 801a4b4:	69ba      	ldr	r2, [r7, #24]
 801a4b6:	e841 2300 	strex	r3, r2, [r1]
 801a4ba:	613b      	str	r3, [r7, #16]
   return(result);
 801a4bc:	693b      	ldr	r3, [r7, #16]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d1e6      	bne.n	801a490 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 801a4c2:	687b      	ldr	r3, [r7, #4]
 801a4c4:	2220      	movs	r2, #32
 801a4c6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 801a4ca:	687b      	ldr	r3, [r7, #4]
 801a4cc:	2200      	movs	r2, #0
 801a4ce:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 801a4d0:	6878      	ldr	r0, [r7, #4]
 801a4d2:	f7fe fffd 	bl	80194d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 801a4d6:	bf00      	nop
 801a4d8:	3720      	adds	r7, #32
 801a4da:	46bd      	mov	sp, r7
 801a4dc:	bd80      	pop	{r7, pc}
	...

0801a4e0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801a4e0:	b580      	push	{r7, lr}
 801a4e2:	b09c      	sub	sp, #112	@ 0x70
 801a4e4:	af00      	add	r7, sp, #0
 801a4e6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 801a4e8:	687b      	ldr	r3, [r7, #4]
 801a4ea:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a4ee:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a4f2:	687b      	ldr	r3, [r7, #4]
 801a4f4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a4f8:	2b22      	cmp	r3, #34	@ 0x22
 801a4fa:	f040 80be 	bne.w	801a67a <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a4fe:	687b      	ldr	r3, [r7, #4]
 801a500:	681b      	ldr	r3, [r3, #0]
 801a502:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a504:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a508:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 801a50c:	b2d9      	uxtb	r1, r3
 801a50e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a512:	b2da      	uxtb	r2, r3
 801a514:	687b      	ldr	r3, [r7, #4]
 801a516:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a518:	400a      	ands	r2, r1
 801a51a:	b2d2      	uxtb	r2, r2
 801a51c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801a51e:	687b      	ldr	r3, [r7, #4]
 801a520:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a522:	1c5a      	adds	r2, r3, #1
 801a524:	687b      	ldr	r3, [r7, #4]
 801a526:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a528:	687b      	ldr	r3, [r7, #4]
 801a52a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a52e:	b29b      	uxth	r3, r3
 801a530:	3b01      	subs	r3, #1
 801a532:	b29a      	uxth	r2, r3
 801a534:	687b      	ldr	r3, [r7, #4]
 801a536:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a53a:	687b      	ldr	r3, [r7, #4]
 801a53c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a540:	b29b      	uxth	r3, r3
 801a542:	2b00      	cmp	r3, #0
 801a544:	f040 80a1 	bne.w	801a68a <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a548:	687b      	ldr	r3, [r7, #4]
 801a54a:	681b      	ldr	r3, [r3, #0]
 801a54c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a54e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a550:	e853 3f00 	ldrex	r3, [r3]
 801a554:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801a556:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a558:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a55c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801a55e:	687b      	ldr	r3, [r7, #4]
 801a560:	681b      	ldr	r3, [r3, #0]
 801a562:	461a      	mov	r2, r3
 801a564:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a566:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a568:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a56a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801a56c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801a56e:	e841 2300 	strex	r3, r2, [r1]
 801a572:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801a574:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801a576:	2b00      	cmp	r3, #0
 801a578:	d1e6      	bne.n	801a548 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a57a:	687b      	ldr	r3, [r7, #4]
 801a57c:	681b      	ldr	r3, [r3, #0]
 801a57e:	3308      	adds	r3, #8
 801a580:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a582:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a584:	e853 3f00 	ldrex	r3, [r3]
 801a588:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801a58a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a58c:	f023 0301 	bic.w	r3, r3, #1
 801a590:	667b      	str	r3, [r7, #100]	@ 0x64
 801a592:	687b      	ldr	r3, [r7, #4]
 801a594:	681b      	ldr	r3, [r3, #0]
 801a596:	3308      	adds	r3, #8
 801a598:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 801a59a:	647a      	str	r2, [r7, #68]	@ 0x44
 801a59c:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a59e:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801a5a0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801a5a2:	e841 2300 	strex	r3, r2, [r1]
 801a5a6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801a5a8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801a5aa:	2b00      	cmp	r3, #0
 801a5ac:	d1e5      	bne.n	801a57a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a5ae:	687b      	ldr	r3, [r7, #4]
 801a5b0:	2220      	movs	r2, #32
 801a5b2:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a5b6:	687b      	ldr	r3, [r7, #4]
 801a5b8:	2200      	movs	r2, #0
 801a5ba:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a5bc:	687b      	ldr	r3, [r7, #4]
 801a5be:	2200      	movs	r2, #0
 801a5c0:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a5c2:	687b      	ldr	r3, [r7, #4]
 801a5c4:	681b      	ldr	r3, [r3, #0]
 801a5c6:	4a33      	ldr	r2, [pc, #204]	@ (801a694 <UART_RxISR_8BIT+0x1b4>)
 801a5c8:	4293      	cmp	r3, r2
 801a5ca:	d01f      	beq.n	801a60c <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a5cc:	687b      	ldr	r3, [r7, #4]
 801a5ce:	681b      	ldr	r3, [r3, #0]
 801a5d0:	685b      	ldr	r3, [r3, #4]
 801a5d2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a5d6:	2b00      	cmp	r3, #0
 801a5d8:	d018      	beq.n	801a60c <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a5da:	687b      	ldr	r3, [r7, #4]
 801a5dc:	681b      	ldr	r3, [r3, #0]
 801a5de:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a5e0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a5e2:	e853 3f00 	ldrex	r3, [r3]
 801a5e6:	623b      	str	r3, [r7, #32]
   return(result);
 801a5e8:	6a3b      	ldr	r3, [r7, #32]
 801a5ea:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a5ee:	663b      	str	r3, [r7, #96]	@ 0x60
 801a5f0:	687b      	ldr	r3, [r7, #4]
 801a5f2:	681b      	ldr	r3, [r3, #0]
 801a5f4:	461a      	mov	r2, r3
 801a5f6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801a5f8:	633b      	str	r3, [r7, #48]	@ 0x30
 801a5fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a5fc:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801a5fe:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801a600:	e841 2300 	strex	r3, r2, [r1]
 801a604:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801a606:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801a608:	2b00      	cmp	r3, #0
 801a60a:	d1e6      	bne.n	801a5da <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a60c:	687b      	ldr	r3, [r7, #4]
 801a60e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a610:	2b01      	cmp	r3, #1
 801a612:	d12e      	bne.n	801a672 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a614:	687b      	ldr	r3, [r7, #4]
 801a616:	2200      	movs	r2, #0
 801a618:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a61a:	687b      	ldr	r3, [r7, #4]
 801a61c:	681b      	ldr	r3, [r3, #0]
 801a61e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a620:	693b      	ldr	r3, [r7, #16]
 801a622:	e853 3f00 	ldrex	r3, [r3]
 801a626:	60fb      	str	r3, [r7, #12]
   return(result);
 801a628:	68fb      	ldr	r3, [r7, #12]
 801a62a:	f023 0310 	bic.w	r3, r3, #16
 801a62e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a630:	687b      	ldr	r3, [r7, #4]
 801a632:	681b      	ldr	r3, [r3, #0]
 801a634:	461a      	mov	r2, r3
 801a636:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a638:	61fb      	str	r3, [r7, #28]
 801a63a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a63c:	69b9      	ldr	r1, [r7, #24]
 801a63e:	69fa      	ldr	r2, [r7, #28]
 801a640:	e841 2300 	strex	r3, r2, [r1]
 801a644:	617b      	str	r3, [r7, #20]
   return(result);
 801a646:	697b      	ldr	r3, [r7, #20]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d1e6      	bne.n	801a61a <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a64c:	687b      	ldr	r3, [r7, #4]
 801a64e:	681b      	ldr	r3, [r3, #0]
 801a650:	69db      	ldr	r3, [r3, #28]
 801a652:	f003 0310 	and.w	r3, r3, #16
 801a656:	2b10      	cmp	r3, #16
 801a658:	d103      	bne.n	801a662 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a65a:	687b      	ldr	r3, [r7, #4]
 801a65c:	681b      	ldr	r3, [r3, #0]
 801a65e:	2210      	movs	r2, #16
 801a660:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a662:	687b      	ldr	r3, [r7, #4]
 801a664:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a668:	4619      	mov	r1, r3
 801a66a:	6878      	ldr	r0, [r7, #4]
 801a66c:	f7fe ff44 	bl	80194f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a670:	e00b      	b.n	801a68a <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a672:	6878      	ldr	r0, [r7, #4]
 801a674:	f7f7 f85a 	bl	801172c <HAL_UART_RxCpltCallback>
}
 801a678:	e007      	b.n	801a68a <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a67a:	687b      	ldr	r3, [r7, #4]
 801a67c:	681b      	ldr	r3, [r3, #0]
 801a67e:	699a      	ldr	r2, [r3, #24]
 801a680:	687b      	ldr	r3, [r7, #4]
 801a682:	681b      	ldr	r3, [r3, #0]
 801a684:	f042 0208 	orr.w	r2, r2, #8
 801a688:	619a      	str	r2, [r3, #24]
}
 801a68a:	bf00      	nop
 801a68c:	3770      	adds	r7, #112	@ 0x70
 801a68e:	46bd      	mov	sp, r7
 801a690:	bd80      	pop	{r7, pc}
 801a692:	bf00      	nop
 801a694:	40008000 	.word	0x40008000

0801a698 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 801a698:	b580      	push	{r7, lr}
 801a69a:	b09c      	sub	sp, #112	@ 0x70
 801a69c:	af00      	add	r7, sp, #0
 801a69e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 801a6a0:	687b      	ldr	r3, [r7, #4]
 801a6a2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a6a6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a6aa:	687b      	ldr	r3, [r7, #4]
 801a6ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a6b0:	2b22      	cmp	r3, #34	@ 0x22
 801a6b2:	f040 80be 	bne.w	801a832 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a6b6:	687b      	ldr	r3, [r7, #4]
 801a6b8:	681b      	ldr	r3, [r3, #0]
 801a6ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a6bc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 801a6c0:	687b      	ldr	r3, [r7, #4]
 801a6c2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a6c4:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 801a6c6:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 801a6ca:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801a6ce:	4013      	ands	r3, r2
 801a6d0:	b29a      	uxth	r2, r3
 801a6d2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801a6d4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801a6d6:	687b      	ldr	r3, [r7, #4]
 801a6d8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a6da:	1c9a      	adds	r2, r3, #2
 801a6dc:	687b      	ldr	r3, [r7, #4]
 801a6de:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 801a6e0:	687b      	ldr	r3, [r7, #4]
 801a6e2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a6e6:	b29b      	uxth	r3, r3
 801a6e8:	3b01      	subs	r3, #1
 801a6ea:	b29a      	uxth	r2, r3
 801a6ec:	687b      	ldr	r3, [r7, #4]
 801a6ee:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 801a6f2:	687b      	ldr	r3, [r7, #4]
 801a6f4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a6f8:	b29b      	uxth	r3, r3
 801a6fa:	2b00      	cmp	r3, #0
 801a6fc:	f040 80a1 	bne.w	801a842 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 801a700:	687b      	ldr	r3, [r7, #4]
 801a702:	681b      	ldr	r3, [r3, #0]
 801a704:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a706:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801a708:	e853 3f00 	ldrex	r3, [r3]
 801a70c:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801a70e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801a710:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801a714:	667b      	str	r3, [r7, #100]	@ 0x64
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	681b      	ldr	r3, [r3, #0]
 801a71a:	461a      	mov	r2, r3
 801a71c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801a71e:	657b      	str	r3, [r7, #84]	@ 0x54
 801a720:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a722:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801a724:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801a726:	e841 2300 	strex	r3, r2, [r1]
 801a72a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801a72c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801a72e:	2b00      	cmp	r3, #0
 801a730:	d1e6      	bne.n	801a700 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801a732:	687b      	ldr	r3, [r7, #4]
 801a734:	681b      	ldr	r3, [r3, #0]
 801a736:	3308      	adds	r3, #8
 801a738:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a73a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801a73c:	e853 3f00 	ldrex	r3, [r3]
 801a740:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801a742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801a744:	f023 0301 	bic.w	r3, r3, #1
 801a748:	663b      	str	r3, [r7, #96]	@ 0x60
 801a74a:	687b      	ldr	r3, [r7, #4]
 801a74c:	681b      	ldr	r3, [r3, #0]
 801a74e:	3308      	adds	r3, #8
 801a750:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801a752:	643a      	str	r2, [r7, #64]	@ 0x40
 801a754:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a756:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801a758:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801a75a:	e841 2300 	strex	r3, r2, [r1]
 801a75e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801a760:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801a762:	2b00      	cmp	r3, #0
 801a764:	d1e5      	bne.n	801a732 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801a766:	687b      	ldr	r3, [r7, #4]
 801a768:	2220      	movs	r2, #32
 801a76a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 801a76e:	687b      	ldr	r3, [r7, #4]
 801a770:	2200      	movs	r2, #0
 801a772:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801a774:	687b      	ldr	r3, [r7, #4]
 801a776:	2200      	movs	r2, #0
 801a778:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801a77a:	687b      	ldr	r3, [r7, #4]
 801a77c:	681b      	ldr	r3, [r3, #0]
 801a77e:	4a33      	ldr	r2, [pc, #204]	@ (801a84c <UART_RxISR_16BIT+0x1b4>)
 801a780:	4293      	cmp	r3, r2
 801a782:	d01f      	beq.n	801a7c4 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801a784:	687b      	ldr	r3, [r7, #4]
 801a786:	681b      	ldr	r3, [r3, #0]
 801a788:	685b      	ldr	r3, [r3, #4]
 801a78a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801a78e:	2b00      	cmp	r3, #0
 801a790:	d018      	beq.n	801a7c4 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801a792:	687b      	ldr	r3, [r7, #4]
 801a794:	681b      	ldr	r3, [r3, #0]
 801a796:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a798:	6a3b      	ldr	r3, [r7, #32]
 801a79a:	e853 3f00 	ldrex	r3, [r3]
 801a79e:	61fb      	str	r3, [r7, #28]
   return(result);
 801a7a0:	69fb      	ldr	r3, [r7, #28]
 801a7a2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801a7a6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801a7a8:	687b      	ldr	r3, [r7, #4]
 801a7aa:	681b      	ldr	r3, [r3, #0]
 801a7ac:	461a      	mov	r2, r3
 801a7ae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a7b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 801a7b2:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7b4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801a7b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801a7b8:	e841 2300 	strex	r3, r2, [r1]
 801a7bc:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801a7be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801a7c0:	2b00      	cmp	r3, #0
 801a7c2:	d1e6      	bne.n	801a792 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801a7c4:	687b      	ldr	r3, [r7, #4]
 801a7c6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801a7c8:	2b01      	cmp	r3, #1
 801a7ca:	d12e      	bne.n	801a82a <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801a7cc:	687b      	ldr	r3, [r7, #4]
 801a7ce:	2200      	movs	r2, #0
 801a7d0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801a7d2:	687b      	ldr	r3, [r7, #4]
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a7d8:	68fb      	ldr	r3, [r7, #12]
 801a7da:	e853 3f00 	ldrex	r3, [r3]
 801a7de:	60bb      	str	r3, [r7, #8]
   return(result);
 801a7e0:	68bb      	ldr	r3, [r7, #8]
 801a7e2:	f023 0310 	bic.w	r3, r3, #16
 801a7e6:	65bb      	str	r3, [r7, #88]	@ 0x58
 801a7e8:	687b      	ldr	r3, [r7, #4]
 801a7ea:	681b      	ldr	r3, [r3, #0]
 801a7ec:	461a      	mov	r2, r3
 801a7ee:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a7f0:	61bb      	str	r3, [r7, #24]
 801a7f2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a7f4:	6979      	ldr	r1, [r7, #20]
 801a7f6:	69ba      	ldr	r2, [r7, #24]
 801a7f8:	e841 2300 	strex	r3, r2, [r1]
 801a7fc:	613b      	str	r3, [r7, #16]
   return(result);
 801a7fe:	693b      	ldr	r3, [r7, #16]
 801a800:	2b00      	cmp	r3, #0
 801a802:	d1e6      	bne.n	801a7d2 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801a804:	687b      	ldr	r3, [r7, #4]
 801a806:	681b      	ldr	r3, [r3, #0]
 801a808:	69db      	ldr	r3, [r3, #28]
 801a80a:	f003 0310 	and.w	r3, r3, #16
 801a80e:	2b10      	cmp	r3, #16
 801a810:	d103      	bne.n	801a81a <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801a812:	687b      	ldr	r3, [r7, #4]
 801a814:	681b      	ldr	r3, [r3, #0]
 801a816:	2210      	movs	r2, #16
 801a818:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801a81a:	687b      	ldr	r3, [r7, #4]
 801a81c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801a820:	4619      	mov	r1, r3
 801a822:	6878      	ldr	r0, [r7, #4]
 801a824:	f7fe fe68 	bl	80194f8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801a828:	e00b      	b.n	801a842 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801a82a:	6878      	ldr	r0, [r7, #4]
 801a82c:	f7f6 ff7e 	bl	801172c <HAL_UART_RxCpltCallback>
}
 801a830:	e007      	b.n	801a842 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801a832:	687b      	ldr	r3, [r7, #4]
 801a834:	681b      	ldr	r3, [r3, #0]
 801a836:	699a      	ldr	r2, [r3, #24]
 801a838:	687b      	ldr	r3, [r7, #4]
 801a83a:	681b      	ldr	r3, [r3, #0]
 801a83c:	f042 0208 	orr.w	r2, r2, #8
 801a840:	619a      	str	r2, [r3, #24]
}
 801a842:	bf00      	nop
 801a844:	3770      	adds	r7, #112	@ 0x70
 801a846:	46bd      	mov	sp, r7
 801a848:	bd80      	pop	{r7, pc}
 801a84a:	bf00      	nop
 801a84c:	40008000 	.word	0x40008000

0801a850 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801a850:	b580      	push	{r7, lr}
 801a852:	b0ac      	sub	sp, #176	@ 0xb0
 801a854:	af00      	add	r7, sp, #0
 801a856:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 801a858:	687b      	ldr	r3, [r7, #4]
 801a85a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801a85e:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801a862:	687b      	ldr	r3, [r7, #4]
 801a864:	681b      	ldr	r3, [r3, #0]
 801a866:	69db      	ldr	r3, [r3, #28]
 801a868:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801a86c:	687b      	ldr	r3, [r7, #4]
 801a86e:	681b      	ldr	r3, [r3, #0]
 801a870:	681b      	ldr	r3, [r3, #0]
 801a872:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801a876:	687b      	ldr	r3, [r7, #4]
 801a878:	681b      	ldr	r3, [r3, #0]
 801a87a:	689b      	ldr	r3, [r3, #8]
 801a87c:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801a880:	687b      	ldr	r3, [r7, #4]
 801a882:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801a886:	2b22      	cmp	r3, #34	@ 0x22
 801a888:	f040 8182 	bne.w	801ab90 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801a88c:	687b      	ldr	r3, [r7, #4]
 801a88e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801a892:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801a896:	e125      	b.n	801aae4 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801a898:	687b      	ldr	r3, [r7, #4]
 801a89a:	681b      	ldr	r3, [r3, #0]
 801a89c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801a89e:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801a8a2:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801a8a6:	b2d9      	uxtb	r1, r3
 801a8a8:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 801a8ac:	b2da      	uxtb	r2, r3
 801a8ae:	687b      	ldr	r3, [r7, #4]
 801a8b0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a8b2:	400a      	ands	r2, r1
 801a8b4:	b2d2      	uxtb	r2, r2
 801a8b6:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 801a8b8:	687b      	ldr	r3, [r7, #4]
 801a8ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801a8bc:	1c5a      	adds	r2, r3, #1
 801a8be:	687b      	ldr	r3, [r7, #4]
 801a8c0:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801a8c2:	687b      	ldr	r3, [r7, #4]
 801a8c4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a8c8:	b29b      	uxth	r3, r3
 801a8ca:	3b01      	subs	r3, #1
 801a8cc:	b29a      	uxth	r2, r3
 801a8ce:	687b      	ldr	r3, [r7, #4]
 801a8d0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801a8d4:	687b      	ldr	r3, [r7, #4]
 801a8d6:	681b      	ldr	r3, [r3, #0]
 801a8d8:	69db      	ldr	r3, [r3, #28]
 801a8da:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801a8de:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8e2:	f003 0307 	and.w	r3, r3, #7
 801a8e6:	2b00      	cmp	r3, #0
 801a8e8:	d053      	beq.n	801a992 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801a8ea:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a8ee:	f003 0301 	and.w	r3, r3, #1
 801a8f2:	2b00      	cmp	r3, #0
 801a8f4:	d011      	beq.n	801a91a <UART_RxISR_8BIT_FIFOEN+0xca>
 801a8f6:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 801a8fa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801a8fe:	2b00      	cmp	r3, #0
 801a900:	d00b      	beq.n	801a91a <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801a902:	687b      	ldr	r3, [r7, #4]
 801a904:	681b      	ldr	r3, [r3, #0]
 801a906:	2201      	movs	r2, #1
 801a908:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801a90a:	687b      	ldr	r3, [r7, #4]
 801a90c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a910:	f043 0201 	orr.w	r2, r3, #1
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a91a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a91e:	f003 0302 	and.w	r3, r3, #2
 801a922:	2b00      	cmp	r3, #0
 801a924:	d011      	beq.n	801a94a <UART_RxISR_8BIT_FIFOEN+0xfa>
 801a926:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a92a:	f003 0301 	and.w	r3, r3, #1
 801a92e:	2b00      	cmp	r3, #0
 801a930:	d00b      	beq.n	801a94a <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801a932:	687b      	ldr	r3, [r7, #4]
 801a934:	681b      	ldr	r3, [r3, #0]
 801a936:	2202      	movs	r2, #2
 801a938:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801a93a:	687b      	ldr	r3, [r7, #4]
 801a93c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a940:	f043 0204 	orr.w	r2, r3, #4
 801a944:	687b      	ldr	r3, [r7, #4]
 801a946:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801a94a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801a94e:	f003 0304 	and.w	r3, r3, #4
 801a952:	2b00      	cmp	r3, #0
 801a954:	d011      	beq.n	801a97a <UART_RxISR_8BIT_FIFOEN+0x12a>
 801a956:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801a95a:	f003 0301 	and.w	r3, r3, #1
 801a95e:	2b00      	cmp	r3, #0
 801a960:	d00b      	beq.n	801a97a <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801a962:	687b      	ldr	r3, [r7, #4]
 801a964:	681b      	ldr	r3, [r3, #0]
 801a966:	2204      	movs	r2, #4
 801a968:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801a96a:	687b      	ldr	r3, [r7, #4]
 801a96c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a970:	f043 0202 	orr.w	r2, r3, #2
 801a974:	687b      	ldr	r3, [r7, #4]
 801a976:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801a97a:	687b      	ldr	r3, [r7, #4]
 801a97c:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801a980:	2b00      	cmp	r3, #0
 801a982:	d006      	beq.n	801a992 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801a984:	6878      	ldr	r0, [r7, #4]
 801a986:	f7fe fdad 	bl	80194e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801a98a:	687b      	ldr	r3, [r7, #4]
 801a98c:	2200      	movs	r2, #0
 801a98e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801a992:	687b      	ldr	r3, [r7, #4]
 801a994:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801a998:	b29b      	uxth	r3, r3
 801a99a:	2b00      	cmp	r3, #0
 801a99c:	f040 80a2 	bne.w	801aae4 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801a9a0:	687b      	ldr	r3, [r7, #4]
 801a9a2:	681b      	ldr	r3, [r3, #0]
 801a9a4:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9a6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801a9a8:	e853 3f00 	ldrex	r3, [r3]
 801a9ac:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 801a9ae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 801a9b0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801a9b4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801a9b8:	687b      	ldr	r3, [r7, #4]
 801a9ba:	681b      	ldr	r3, [r3, #0]
 801a9bc:	461a      	mov	r2, r3
 801a9be:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 801a9c2:	67fb      	str	r3, [r7, #124]	@ 0x7c
 801a9c4:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801a9c6:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 801a9c8:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 801a9ca:	e841 2300 	strex	r3, r2, [r1]
 801a9ce:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 801a9d0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801a9d2:	2b00      	cmp	r3, #0
 801a9d4:	d1e4      	bne.n	801a9a0 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801a9d6:	687b      	ldr	r3, [r7, #4]
 801a9d8:	681b      	ldr	r3, [r3, #0]
 801a9da:	3308      	adds	r3, #8
 801a9dc:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801a9de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801a9e0:	e853 3f00 	ldrex	r3, [r3]
 801a9e4:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 801a9e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801a9e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801a9ec:	f023 0301 	bic.w	r3, r3, #1
 801a9f0:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801a9f4:	687b      	ldr	r3, [r7, #4]
 801a9f6:	681b      	ldr	r3, [r3, #0]
 801a9f8:	3308      	adds	r3, #8
 801a9fa:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 801a9fe:	66ba      	str	r2, [r7, #104]	@ 0x68
 801aa00:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa02:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 801aa04:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 801aa06:	e841 2300 	strex	r3, r2, [r1]
 801aa0a:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 801aa0c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801aa0e:	2b00      	cmp	r3, #0
 801aa10:	d1e1      	bne.n	801a9d6 <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801aa12:	687b      	ldr	r3, [r7, #4]
 801aa14:	2220      	movs	r2, #32
 801aa16:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801aa1a:	687b      	ldr	r3, [r7, #4]
 801aa1c:	2200      	movs	r2, #0
 801aa1e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801aa20:	687b      	ldr	r3, [r7, #4]
 801aa22:	2200      	movs	r2, #0
 801aa24:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801aa26:	687b      	ldr	r3, [r7, #4]
 801aa28:	681b      	ldr	r3, [r3, #0]
 801aa2a:	4a5f      	ldr	r2, [pc, #380]	@ (801aba8 <UART_RxISR_8BIT_FIFOEN+0x358>)
 801aa2c:	4293      	cmp	r3, r2
 801aa2e:	d021      	beq.n	801aa74 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801aa30:	687b      	ldr	r3, [r7, #4]
 801aa32:	681b      	ldr	r3, [r3, #0]
 801aa34:	685b      	ldr	r3, [r3, #4]
 801aa36:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801aa3a:	2b00      	cmp	r3, #0
 801aa3c:	d01a      	beq.n	801aa74 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801aa3e:	687b      	ldr	r3, [r7, #4]
 801aa40:	681b      	ldr	r3, [r3, #0]
 801aa42:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa44:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801aa46:	e853 3f00 	ldrex	r3, [r3]
 801aa4a:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 801aa4c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801aa4e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801aa52:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	681b      	ldr	r3, [r3, #0]
 801aa5a:	461a      	mov	r2, r3
 801aa5c:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801aa60:	657b      	str	r3, [r7, #84]	@ 0x54
 801aa62:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aa64:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801aa66:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801aa68:	e841 2300 	strex	r3, r2, [r1]
 801aa6c:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801aa6e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801aa70:	2b00      	cmp	r3, #0
 801aa72:	d1e4      	bne.n	801aa3e <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801aa74:	687b      	ldr	r3, [r7, #4]
 801aa76:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801aa78:	2b01      	cmp	r3, #1
 801aa7a:	d130      	bne.n	801aade <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801aa7c:	687b      	ldr	r3, [r7, #4]
 801aa7e:	2200      	movs	r2, #0
 801aa80:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801aa82:	687b      	ldr	r3, [r7, #4]
 801aa84:	681b      	ldr	r3, [r3, #0]
 801aa86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aa88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801aa8a:	e853 3f00 	ldrex	r3, [r3]
 801aa8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801aa90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801aa92:	f023 0310 	bic.w	r3, r3, #16
 801aa96:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 801aa9a:	687b      	ldr	r3, [r7, #4]
 801aa9c:	681b      	ldr	r3, [r3, #0]
 801aa9e:	461a      	mov	r2, r3
 801aaa0:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801aaa4:	643b      	str	r3, [r7, #64]	@ 0x40
 801aaa6:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aaa8:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 801aaaa:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 801aaac:	e841 2300 	strex	r3, r2, [r1]
 801aab0:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 801aab2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801aab4:	2b00      	cmp	r3, #0
 801aab6:	d1e4      	bne.n	801aa82 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801aab8:	687b      	ldr	r3, [r7, #4]
 801aaba:	681b      	ldr	r3, [r3, #0]
 801aabc:	69db      	ldr	r3, [r3, #28]
 801aabe:	f003 0310 	and.w	r3, r3, #16
 801aac2:	2b10      	cmp	r3, #16
 801aac4:	d103      	bne.n	801aace <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801aac6:	687b      	ldr	r3, [r7, #4]
 801aac8:	681b      	ldr	r3, [r3, #0]
 801aaca:	2210      	movs	r2, #16
 801aacc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801aace:	687b      	ldr	r3, [r7, #4]
 801aad0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801aad4:	4619      	mov	r1, r3
 801aad6:	6878      	ldr	r0, [r7, #4]
 801aad8:	f7fe fd0e 	bl	80194f8 <HAL_UARTEx_RxEventCallback>
 801aadc:	e002      	b.n	801aae4 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801aade:	6878      	ldr	r0, [r7, #4]
 801aae0:	f7f6 fe24 	bl	801172c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801aae4:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 801aae8:	2b00      	cmp	r3, #0
 801aaea:	d006      	beq.n	801aafa <UART_RxISR_8BIT_FIFOEN+0x2aa>
 801aaec:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801aaf0:	f003 0320 	and.w	r3, r3, #32
 801aaf4:	2b00      	cmp	r3, #0
 801aaf6:	f47f aecf 	bne.w	801a898 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801aafa:	687b      	ldr	r3, [r7, #4]
 801aafc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801ab00:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801ab04:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d049      	beq.n	801aba0 <UART_RxISR_8BIT_FIFOEN+0x350>
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ab12:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 801ab16:	429a      	cmp	r2, r3
 801ab18:	d242      	bcs.n	801aba0 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801ab1a:	687b      	ldr	r3, [r7, #4]
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	3308      	adds	r3, #8
 801ab20:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab22:	6a3b      	ldr	r3, [r7, #32]
 801ab24:	e853 3f00 	ldrex	r3, [r3]
 801ab28:	61fb      	str	r3, [r7, #28]
   return(result);
 801ab2a:	69fb      	ldr	r3, [r7, #28]
 801ab2c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ab30:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801ab34:	687b      	ldr	r3, [r7, #4]
 801ab36:	681b      	ldr	r3, [r3, #0]
 801ab38:	3308      	adds	r3, #8
 801ab3a:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801ab3e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 801ab40:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab42:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 801ab44:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 801ab46:	e841 2300 	strex	r3, r2, [r1]
 801ab4a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 801ab4c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ab4e:	2b00      	cmp	r3, #0
 801ab50:	d1e3      	bne.n	801ab1a <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 801ab52:	687b      	ldr	r3, [r7, #4]
 801ab54:	4a15      	ldr	r2, [pc, #84]	@ (801abac <UART_RxISR_8BIT_FIFOEN+0x35c>)
 801ab56:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801ab58:	687b      	ldr	r3, [r7, #4]
 801ab5a:	681b      	ldr	r3, [r3, #0]
 801ab5c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ab5e:	68fb      	ldr	r3, [r7, #12]
 801ab60:	e853 3f00 	ldrex	r3, [r3]
 801ab64:	60bb      	str	r3, [r7, #8]
   return(result);
 801ab66:	68bb      	ldr	r3, [r7, #8]
 801ab68:	f043 0320 	orr.w	r3, r3, #32
 801ab6c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ab70:	687b      	ldr	r3, [r7, #4]
 801ab72:	681b      	ldr	r3, [r3, #0]
 801ab74:	461a      	mov	r2, r3
 801ab76:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 801ab7a:	61bb      	str	r3, [r7, #24]
 801ab7c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ab7e:	6979      	ldr	r1, [r7, #20]
 801ab80:	69ba      	ldr	r2, [r7, #24]
 801ab82:	e841 2300 	strex	r3, r2, [r1]
 801ab86:	613b      	str	r3, [r7, #16]
   return(result);
 801ab88:	693b      	ldr	r3, [r7, #16]
 801ab8a:	2b00      	cmp	r3, #0
 801ab8c:	d1e4      	bne.n	801ab58 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801ab8e:	e007      	b.n	801aba0 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801ab90:	687b      	ldr	r3, [r7, #4]
 801ab92:	681b      	ldr	r3, [r3, #0]
 801ab94:	699a      	ldr	r2, [r3, #24]
 801ab96:	687b      	ldr	r3, [r7, #4]
 801ab98:	681b      	ldr	r3, [r3, #0]
 801ab9a:	f042 0208 	orr.w	r2, r2, #8
 801ab9e:	619a      	str	r2, [r3, #24]
}
 801aba0:	bf00      	nop
 801aba2:	37b0      	adds	r7, #176	@ 0xb0
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	40008000 	.word	0x40008000
 801abac:	0801a4e1 	.word	0x0801a4e1

0801abb0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b0ae      	sub	sp, #184	@ 0xb8
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801abbe:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801abc2:	687b      	ldr	r3, [r7, #4]
 801abc4:	681b      	ldr	r3, [r3, #0]
 801abc6:	69db      	ldr	r3, [r3, #28]
 801abc8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 801abcc:	687b      	ldr	r3, [r7, #4]
 801abce:	681b      	ldr	r3, [r3, #0]
 801abd0:	681b      	ldr	r3, [r3, #0]
 801abd2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	681b      	ldr	r3, [r3, #0]
 801abda:	689b      	ldr	r3, [r3, #8]
 801abdc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 801abe0:	687b      	ldr	r3, [r7, #4]
 801abe2:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801abe6:	2b22      	cmp	r3, #34	@ 0x22
 801abe8:	f040 8186 	bne.w	801aef8 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 801abec:	687b      	ldr	r3, [r7, #4]
 801abee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801abf2:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801abf6:	e129      	b.n	801ae4c <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801abf8:	687b      	ldr	r3, [r7, #4]
 801abfa:	681b      	ldr	r3, [r3, #0]
 801abfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801abfe:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 801ac02:	687b      	ldr	r3, [r7, #4]
 801ac04:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ac06:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 801ac0a:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 801ac0e:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 801ac12:	4013      	ands	r3, r2
 801ac14:	b29a      	uxth	r2, r3
 801ac16:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 801ac1a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 801ac1c:	687b      	ldr	r3, [r7, #4]
 801ac1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801ac20:	1c9a      	adds	r2, r3, #2
 801ac22:	687b      	ldr	r3, [r7, #4]
 801ac24:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 801ac26:	687b      	ldr	r3, [r7, #4]
 801ac28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801ac2c:	b29b      	uxth	r3, r3
 801ac2e:	3b01      	subs	r3, #1
 801ac30:	b29a      	uxth	r2, r3
 801ac32:	687b      	ldr	r3, [r7, #4]
 801ac34:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 801ac38:	687b      	ldr	r3, [r7, #4]
 801ac3a:	681b      	ldr	r3, [r3, #0]
 801ac3c:	69db      	ldr	r3, [r3, #28]
 801ac3e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 801ac42:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801ac46:	f003 0307 	and.w	r3, r3, #7
 801ac4a:	2b00      	cmp	r3, #0
 801ac4c:	d053      	beq.n	801acf6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 801ac4e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801ac52:	f003 0301 	and.w	r3, r3, #1
 801ac56:	2b00      	cmp	r3, #0
 801ac58:	d011      	beq.n	801ac7e <UART_RxISR_16BIT_FIFOEN+0xce>
 801ac5a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 801ac5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801ac62:	2b00      	cmp	r3, #0
 801ac64:	d00b      	beq.n	801ac7e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 801ac66:	687b      	ldr	r3, [r7, #4]
 801ac68:	681b      	ldr	r3, [r3, #0]
 801ac6a:	2201      	movs	r2, #1
 801ac6c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 801ac6e:	687b      	ldr	r3, [r7, #4]
 801ac70:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ac74:	f043 0201 	orr.w	r2, r3, #1
 801ac78:	687b      	ldr	r3, [r7, #4]
 801ac7a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801ac7e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801ac82:	f003 0302 	and.w	r3, r3, #2
 801ac86:	2b00      	cmp	r3, #0
 801ac88:	d011      	beq.n	801acae <UART_RxISR_16BIT_FIFOEN+0xfe>
 801ac8a:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801ac8e:	f003 0301 	and.w	r3, r3, #1
 801ac92:	2b00      	cmp	r3, #0
 801ac94:	d00b      	beq.n	801acae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801ac96:	687b      	ldr	r3, [r7, #4]
 801ac98:	681b      	ldr	r3, [r3, #0]
 801ac9a:	2202      	movs	r2, #2
 801ac9c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 801ac9e:	687b      	ldr	r3, [r7, #4]
 801aca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801aca4:	f043 0204 	orr.w	r2, r3, #4
 801aca8:	687b      	ldr	r3, [r7, #4]
 801acaa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 801acae:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801acb2:	f003 0304 	and.w	r3, r3, #4
 801acb6:	2b00      	cmp	r3, #0
 801acb8:	d011      	beq.n	801acde <UART_RxISR_16BIT_FIFOEN+0x12e>
 801acba:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 801acbe:	f003 0301 	and.w	r3, r3, #1
 801acc2:	2b00      	cmp	r3, #0
 801acc4:	d00b      	beq.n	801acde <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801acc6:	687b      	ldr	r3, [r7, #4]
 801acc8:	681b      	ldr	r3, [r3, #0]
 801acca:	2204      	movs	r2, #4
 801accc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 801acce:	687b      	ldr	r3, [r7, #4]
 801acd0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801acd4:	f043 0202 	orr.w	r2, r3, #2
 801acd8:	687b      	ldr	r3, [r7, #4]
 801acda:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 801acde:	687b      	ldr	r3, [r7, #4]
 801ace0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801ace4:	2b00      	cmp	r3, #0
 801ace6:	d006      	beq.n	801acf6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801ace8:	6878      	ldr	r0, [r7, #4]
 801acea:	f7fe fbfb 	bl	80194e4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 801acee:	687b      	ldr	r3, [r7, #4]
 801acf0:	2200      	movs	r2, #0
 801acf2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801acf6:	687b      	ldr	r3, [r7, #4]
 801acf8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801acfc:	b29b      	uxth	r3, r3
 801acfe:	2b00      	cmp	r3, #0
 801ad00:	f040 80a4 	bne.w	801ae4c <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801ad04:	687b      	ldr	r3, [r7, #4]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801ad0c:	e853 3f00 	ldrex	r3, [r3]
 801ad10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 801ad12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 801ad14:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 801ad18:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 801ad1c:	687b      	ldr	r3, [r7, #4]
 801ad1e:	681b      	ldr	r3, [r3, #0]
 801ad20:	461a      	mov	r2, r3
 801ad22:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801ad26:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 801ad2a:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801ad2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 801ad32:	e841 2300 	strex	r3, r2, [r1]
 801ad36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 801ad38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801ad3a:	2b00      	cmp	r3, #0
 801ad3c:	d1e2      	bne.n	801ad04 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801ad3e:	687b      	ldr	r3, [r7, #4]
 801ad40:	681b      	ldr	r3, [r3, #0]
 801ad42:	3308      	adds	r3, #8
 801ad44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ad46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801ad48:	e853 3f00 	ldrex	r3, [r3]
 801ad4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801ad4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 801ad50:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ad54:	f023 0301 	bic.w	r3, r3, #1
 801ad58:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 801ad5c:	687b      	ldr	r3, [r7, #4]
 801ad5e:	681b      	ldr	r3, [r3, #0]
 801ad60:	3308      	adds	r3, #8
 801ad62:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 801ad66:	66fa      	str	r2, [r7, #108]	@ 0x6c
 801ad68:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ad6a:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 801ad6c:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801ad6e:	e841 2300 	strex	r3, r2, [r1]
 801ad72:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 801ad74:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d1e1      	bne.n	801ad3e <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 801ad7a:	687b      	ldr	r3, [r7, #4]
 801ad7c:	2220      	movs	r2, #32
 801ad7e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 801ad82:	687b      	ldr	r3, [r7, #4]
 801ad84:	2200      	movs	r2, #0
 801ad86:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 801ad88:	687b      	ldr	r3, [r7, #4]
 801ad8a:	2200      	movs	r2, #0
 801ad8c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 801ad8e:	687b      	ldr	r3, [r7, #4]
 801ad90:	681b      	ldr	r3, [r3, #0]
 801ad92:	4a5f      	ldr	r2, [pc, #380]	@ (801af10 <UART_RxISR_16BIT_FIFOEN+0x360>)
 801ad94:	4293      	cmp	r3, r2
 801ad96:	d021      	beq.n	801addc <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801ad98:	687b      	ldr	r3, [r7, #4]
 801ad9a:	681b      	ldr	r3, [r3, #0]
 801ad9c:	685b      	ldr	r3, [r3, #4]
 801ad9e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d01a      	beq.n	801addc <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801ada6:	687b      	ldr	r3, [r7, #4]
 801ada8:	681b      	ldr	r3, [r3, #0]
 801adaa:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801adac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801adae:	e853 3f00 	ldrex	r3, [r3]
 801adb2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801adb4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801adb6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801adba:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 801adbe:	687b      	ldr	r3, [r7, #4]
 801adc0:	681b      	ldr	r3, [r3, #0]
 801adc2:	461a      	mov	r2, r3
 801adc4:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 801adc8:	65bb      	str	r3, [r7, #88]	@ 0x58
 801adca:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801adcc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 801adce:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 801add0:	e841 2300 	strex	r3, r2, [r1]
 801add4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801add6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801add8:	2b00      	cmp	r3, #0
 801adda:	d1e4      	bne.n	801ada6 <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801addc:	687b      	ldr	r3, [r7, #4]
 801adde:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 801ade0:	2b01      	cmp	r3, #1
 801ade2:	d130      	bne.n	801ae46 <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801ade4:	687b      	ldr	r3, [r7, #4]
 801ade6:	2200      	movs	r2, #0
 801ade8:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801adea:	687b      	ldr	r3, [r7, #4]
 801adec:	681b      	ldr	r3, [r3, #0]
 801adee:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801adf0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801adf2:	e853 3f00 	ldrex	r3, [r3]
 801adf6:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 801adf8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801adfa:	f023 0310 	bic.w	r3, r3, #16
 801adfe:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 801ae02:	687b      	ldr	r3, [r7, #4]
 801ae04:	681b      	ldr	r3, [r3, #0]
 801ae06:	461a      	mov	r2, r3
 801ae08:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 801ae0c:	647b      	str	r3, [r7, #68]	@ 0x44
 801ae0e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801ae10:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801ae12:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801ae14:	e841 2300 	strex	r3, r2, [r1]
 801ae18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 801ae1a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 801ae1c:	2b00      	cmp	r3, #0
 801ae1e:	d1e4      	bne.n	801adea <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801ae20:	687b      	ldr	r3, [r7, #4]
 801ae22:	681b      	ldr	r3, [r3, #0]
 801ae24:	69db      	ldr	r3, [r3, #28]
 801ae26:	f003 0310 	and.w	r3, r3, #16
 801ae2a:	2b10      	cmp	r3, #16
 801ae2c:	d103      	bne.n	801ae36 <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801ae2e:	687b      	ldr	r3, [r7, #4]
 801ae30:	681b      	ldr	r3, [r3, #0]
 801ae32:	2210      	movs	r2, #16
 801ae34:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801ae36:	687b      	ldr	r3, [r7, #4]
 801ae38:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 801ae3c:	4619      	mov	r1, r3
 801ae3e:	6878      	ldr	r0, [r7, #4]
 801ae40:	f7fe fb5a 	bl	80194f8 <HAL_UARTEx_RxEventCallback>
 801ae44:	e002      	b.n	801ae4c <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 801ae46:	6878      	ldr	r0, [r7, #4]
 801ae48:	f7f6 fc70 	bl	801172c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801ae4c:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 801ae50:	2b00      	cmp	r3, #0
 801ae52:	d006      	beq.n	801ae62 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 801ae54:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 801ae58:	f003 0320 	and.w	r3, r3, #32
 801ae5c:	2b00      	cmp	r3, #0
 801ae5e:	f47f aecb 	bne.w	801abf8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 801ae62:	687b      	ldr	r3, [r7, #4]
 801ae64:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 801ae68:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 801ae6c:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 801ae70:	2b00      	cmp	r3, #0
 801ae72:	d049      	beq.n	801af08 <UART_RxISR_16BIT_FIFOEN+0x358>
 801ae74:	687b      	ldr	r3, [r7, #4]
 801ae76:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801ae7a:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 801ae7e:	429a      	cmp	r2, r3
 801ae80:	d242      	bcs.n	801af08 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 801ae82:	687b      	ldr	r3, [r7, #4]
 801ae84:	681b      	ldr	r3, [r3, #0]
 801ae86:	3308      	adds	r3, #8
 801ae88:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801ae8a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801ae8c:	e853 3f00 	ldrex	r3, [r3]
 801ae90:	623b      	str	r3, [r7, #32]
   return(result);
 801ae92:	6a3b      	ldr	r3, [r7, #32]
 801ae94:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 801ae98:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 801ae9c:	687b      	ldr	r3, [r7, #4]
 801ae9e:	681b      	ldr	r3, [r3, #0]
 801aea0:	3308      	adds	r3, #8
 801aea2:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 801aea6:	633a      	str	r2, [r7, #48]	@ 0x30
 801aea8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aeaa:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801aeac:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801aeae:	e841 2300 	strex	r3, r2, [r1]
 801aeb2:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 801aeb4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801aeb6:	2b00      	cmp	r3, #0
 801aeb8:	d1e3      	bne.n	801ae82 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 801aeba:	687b      	ldr	r3, [r7, #4]
 801aebc:	4a15      	ldr	r2, [pc, #84]	@ (801af14 <UART_RxISR_16BIT_FIFOEN+0x364>)
 801aebe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 801aec0:	687b      	ldr	r3, [r7, #4]
 801aec2:	681b      	ldr	r3, [r3, #0]
 801aec4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801aec6:	693b      	ldr	r3, [r7, #16]
 801aec8:	e853 3f00 	ldrex	r3, [r3]
 801aecc:	60fb      	str	r3, [r7, #12]
   return(result);
 801aece:	68fb      	ldr	r3, [r7, #12]
 801aed0:	f043 0320 	orr.w	r3, r3, #32
 801aed4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 801aed8:	687b      	ldr	r3, [r7, #4]
 801aeda:	681b      	ldr	r3, [r3, #0]
 801aedc:	461a      	mov	r2, r3
 801aede:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 801aee2:	61fb      	str	r3, [r7, #28]
 801aee4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801aee6:	69b9      	ldr	r1, [r7, #24]
 801aee8:	69fa      	ldr	r2, [r7, #28]
 801aeea:	e841 2300 	strex	r3, r2, [r1]
 801aeee:	617b      	str	r3, [r7, #20]
   return(result);
 801aef0:	697b      	ldr	r3, [r7, #20]
 801aef2:	2b00      	cmp	r3, #0
 801aef4:	d1e4      	bne.n	801aec0 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801aef6:	e007      	b.n	801af08 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801aef8:	687b      	ldr	r3, [r7, #4]
 801aefa:	681b      	ldr	r3, [r3, #0]
 801aefc:	699a      	ldr	r2, [r3, #24]
 801aefe:	687b      	ldr	r3, [r7, #4]
 801af00:	681b      	ldr	r3, [r3, #0]
 801af02:	f042 0208 	orr.w	r2, r2, #8
 801af06:	619a      	str	r2, [r3, #24]
}
 801af08:	bf00      	nop
 801af0a:	37b8      	adds	r7, #184	@ 0xb8
 801af0c:	46bd      	mov	sp, r7
 801af0e:	bd80      	pop	{r7, pc}
 801af10:	40008000 	.word	0x40008000
 801af14:	0801a699 	.word	0x0801a699

0801af18 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 801af18:	b480      	push	{r7}
 801af1a:	b083      	sub	sp, #12
 801af1c:	af00      	add	r7, sp, #0
 801af1e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 801af20:	bf00      	nop
 801af22:	370c      	adds	r7, #12
 801af24:	46bd      	mov	sp, r7
 801af26:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af2a:	4770      	bx	lr

0801af2c <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 801af2c:	b480      	push	{r7}
 801af2e:	b083      	sub	sp, #12
 801af30:	af00      	add	r7, sp, #0
 801af32:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 801af34:	bf00      	nop
 801af36:	370c      	adds	r7, #12
 801af38:	46bd      	mov	sp, r7
 801af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af3e:	4770      	bx	lr

0801af40 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 801af40:	b480      	push	{r7}
 801af42:	b083      	sub	sp, #12
 801af44:	af00      	add	r7, sp, #0
 801af46:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 801af48:	bf00      	nop
 801af4a:	370c      	adds	r7, #12
 801af4c:	46bd      	mov	sp, r7
 801af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 801af52:	4770      	bx	lr

0801af54 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 801af54:	b580      	push	{r7, lr}
 801af56:	b084      	sub	sp, #16
 801af58:	af00      	add	r7, sp, #0
 801af5a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801af5c:	687b      	ldr	r3, [r7, #4]
 801af5e:	681b      	ldr	r3, [r3, #0]
 801af60:	4a27      	ldr	r2, [pc, #156]	@ (801b000 <HAL_UARTEx_DisableFifoMode+0xac>)
 801af62:	4293      	cmp	r3, r2
 801af64:	d018      	beq.n	801af98 <HAL_UARTEx_DisableFifoMode+0x44>
 801af66:	687b      	ldr	r3, [r7, #4]
 801af68:	681b      	ldr	r3, [r3, #0]
 801af6a:	4a26      	ldr	r2, [pc, #152]	@ (801b004 <HAL_UARTEx_DisableFifoMode+0xb0>)
 801af6c:	4293      	cmp	r3, r2
 801af6e:	d013      	beq.n	801af98 <HAL_UARTEx_DisableFifoMode+0x44>
 801af70:	687b      	ldr	r3, [r7, #4]
 801af72:	681b      	ldr	r3, [r3, #0]
 801af74:	4a24      	ldr	r2, [pc, #144]	@ (801b008 <HAL_UARTEx_DisableFifoMode+0xb4>)
 801af76:	4293      	cmp	r3, r2
 801af78:	d00e      	beq.n	801af98 <HAL_UARTEx_DisableFifoMode+0x44>
 801af7a:	687b      	ldr	r3, [r7, #4]
 801af7c:	681b      	ldr	r3, [r3, #0]
 801af7e:	4a23      	ldr	r2, [pc, #140]	@ (801b00c <HAL_UARTEx_DisableFifoMode+0xb8>)
 801af80:	4293      	cmp	r3, r2
 801af82:	d009      	beq.n	801af98 <HAL_UARTEx_DisableFifoMode+0x44>
 801af84:	687b      	ldr	r3, [r7, #4]
 801af86:	681b      	ldr	r3, [r3, #0]
 801af88:	4a21      	ldr	r2, [pc, #132]	@ (801b010 <HAL_UARTEx_DisableFifoMode+0xbc>)
 801af8a:	4293      	cmp	r3, r2
 801af8c:	d004      	beq.n	801af98 <HAL_UARTEx_DisableFifoMode+0x44>
 801af8e:	f240 2136 	movw	r1, #566	@ 0x236
 801af92:	4820      	ldr	r0, [pc, #128]	@ (801b014 <HAL_UARTEx_DisableFifoMode+0xc0>)
 801af94:	f7f7 fa8e 	bl	80124b4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 801af98:	687b      	ldr	r3, [r7, #4]
 801af9a:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801af9e:	2b01      	cmp	r3, #1
 801afa0:	d101      	bne.n	801afa6 <HAL_UARTEx_DisableFifoMode+0x52>
 801afa2:	2302      	movs	r3, #2
 801afa4:	e027      	b.n	801aff6 <HAL_UARTEx_DisableFifoMode+0xa2>
 801afa6:	687b      	ldr	r3, [r7, #4]
 801afa8:	2201      	movs	r2, #1
 801afaa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801afae:	687b      	ldr	r3, [r7, #4]
 801afb0:	2224      	movs	r2, #36	@ 0x24
 801afb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801afb6:	687b      	ldr	r3, [r7, #4]
 801afb8:	681b      	ldr	r3, [r3, #0]
 801afba:	681b      	ldr	r3, [r3, #0]
 801afbc:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801afbe:	687b      	ldr	r3, [r7, #4]
 801afc0:	681b      	ldr	r3, [r3, #0]
 801afc2:	681a      	ldr	r2, [r3, #0]
 801afc4:	687b      	ldr	r3, [r7, #4]
 801afc6:	681b      	ldr	r3, [r3, #0]
 801afc8:	f022 0201 	bic.w	r2, r2, #1
 801afcc:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 801afce:	68fb      	ldr	r3, [r7, #12]
 801afd0:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 801afd4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 801afd6:	687b      	ldr	r3, [r7, #4]
 801afd8:	2200      	movs	r2, #0
 801afda:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801afdc:	687b      	ldr	r3, [r7, #4]
 801afde:	681b      	ldr	r3, [r3, #0]
 801afe0:	68fa      	ldr	r2, [r7, #12]
 801afe2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801afe4:	687b      	ldr	r3, [r7, #4]
 801afe6:	2220      	movs	r2, #32
 801afe8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	2200      	movs	r2, #0
 801aff0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801aff4:	2300      	movs	r3, #0
}
 801aff6:	4618      	mov	r0, r3
 801aff8:	3710      	adds	r7, #16
 801affa:	46bd      	mov	sp, r7
 801affc:	bd80      	pop	{r7, pc}
 801affe:	bf00      	nop
 801b000:	40013800 	.word	0x40013800
 801b004:	40004400 	.word	0x40004400
 801b008:	40004800 	.word	0x40004800
 801b00c:	40004c00 	.word	0x40004c00
 801b010:	40008000 	.word	0x40008000
 801b014:	0801df44 	.word	0x0801df44

0801b018 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b018:	b580      	push	{r7, lr}
 801b01a:	b084      	sub	sp, #16
 801b01c:	af00      	add	r7, sp, #0
 801b01e:	6078      	str	r0, [r7, #4]
 801b020:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801b022:	687b      	ldr	r3, [r7, #4]
 801b024:	681b      	ldr	r3, [r3, #0]
 801b026:	4a38      	ldr	r2, [pc, #224]	@ (801b108 <HAL_UARTEx_SetTxFifoThreshold+0xf0>)
 801b028:	4293      	cmp	r3, r2
 801b02a:	d018      	beq.n	801b05e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801b02c:	687b      	ldr	r3, [r7, #4]
 801b02e:	681b      	ldr	r3, [r3, #0]
 801b030:	4a36      	ldr	r2, [pc, #216]	@ (801b10c <HAL_UARTEx_SetTxFifoThreshold+0xf4>)
 801b032:	4293      	cmp	r3, r2
 801b034:	d013      	beq.n	801b05e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801b036:	687b      	ldr	r3, [r7, #4]
 801b038:	681b      	ldr	r3, [r3, #0]
 801b03a:	4a35      	ldr	r2, [pc, #212]	@ (801b110 <HAL_UARTEx_SetTxFifoThreshold+0xf8>)
 801b03c:	4293      	cmp	r3, r2
 801b03e:	d00e      	beq.n	801b05e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801b040:	687b      	ldr	r3, [r7, #4]
 801b042:	681b      	ldr	r3, [r3, #0]
 801b044:	4a33      	ldr	r2, [pc, #204]	@ (801b114 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 801b046:	4293      	cmp	r3, r2
 801b048:	d009      	beq.n	801b05e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801b04a:	687b      	ldr	r3, [r7, #4]
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	4a32      	ldr	r2, [pc, #200]	@ (801b118 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 801b050:	4293      	cmp	r3, r2
 801b052:	d004      	beq.n	801b05e <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801b054:	f44f 7119 	mov.w	r1, #612	@ 0x264
 801b058:	4830      	ldr	r0, [pc, #192]	@ (801b11c <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 801b05a:	f7f7 fa2b 	bl	80124b4 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 801b05e:	683b      	ldr	r3, [r7, #0]
 801b060:	2b00      	cmp	r3, #0
 801b062:	d018      	beq.n	801b096 <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801b064:	683b      	ldr	r3, [r7, #0]
 801b066:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 801b06a:	d014      	beq.n	801b096 <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801b06c:	683b      	ldr	r3, [r7, #0]
 801b06e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801b072:	d010      	beq.n	801b096 <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801b074:	683b      	ldr	r3, [r7, #0]
 801b076:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 801b07a:	d00c      	beq.n	801b096 <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801b07c:	683b      	ldr	r3, [r7, #0]
 801b07e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801b082:	d008      	beq.n	801b096 <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801b084:	683b      	ldr	r3, [r7, #0]
 801b086:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 801b08a:	d004      	beq.n	801b096 <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801b08c:	f240 2165 	movw	r1, #613	@ 0x265
 801b090:	4822      	ldr	r0, [pc, #136]	@ (801b11c <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 801b092:	f7f7 fa0f 	bl	80124b4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 801b096:	687b      	ldr	r3, [r7, #4]
 801b098:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b09c:	2b01      	cmp	r3, #1
 801b09e:	d101      	bne.n	801b0a4 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 801b0a0:	2302      	movs	r3, #2
 801b0a2:	e02d      	b.n	801b100 <HAL_UARTEx_SetTxFifoThreshold+0xe8>
 801b0a4:	687b      	ldr	r3, [r7, #4]
 801b0a6:	2201      	movs	r2, #1
 801b0a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b0ac:	687b      	ldr	r3, [r7, #4]
 801b0ae:	2224      	movs	r2, #36	@ 0x24
 801b0b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b0b4:	687b      	ldr	r3, [r7, #4]
 801b0b6:	681b      	ldr	r3, [r3, #0]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b0bc:	687b      	ldr	r3, [r7, #4]
 801b0be:	681b      	ldr	r3, [r3, #0]
 801b0c0:	681a      	ldr	r2, [r3, #0]
 801b0c2:	687b      	ldr	r3, [r7, #4]
 801b0c4:	681b      	ldr	r3, [r3, #0]
 801b0c6:	f022 0201 	bic.w	r2, r2, #1
 801b0ca:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 801b0cc:	687b      	ldr	r3, [r7, #4]
 801b0ce:	681b      	ldr	r3, [r3, #0]
 801b0d0:	689b      	ldr	r3, [r3, #8]
 801b0d2:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 801b0d6:	687b      	ldr	r3, [r7, #4]
 801b0d8:	681b      	ldr	r3, [r3, #0]
 801b0da:	683a      	ldr	r2, [r7, #0]
 801b0dc:	430a      	orrs	r2, r1
 801b0de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b0e0:	6878      	ldr	r0, [r7, #4]
 801b0e2:	f000 f8a1 	bl	801b228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b0e6:	687b      	ldr	r3, [r7, #4]
 801b0e8:	681b      	ldr	r3, [r3, #0]
 801b0ea:	68fa      	ldr	r2, [r7, #12]
 801b0ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b0ee:	687b      	ldr	r3, [r7, #4]
 801b0f0:	2220      	movs	r2, #32
 801b0f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b0f6:	687b      	ldr	r3, [r7, #4]
 801b0f8:	2200      	movs	r2, #0
 801b0fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b0fe:	2300      	movs	r3, #0
}
 801b100:	4618      	mov	r0, r3
 801b102:	3710      	adds	r7, #16
 801b104:	46bd      	mov	sp, r7
 801b106:	bd80      	pop	{r7, pc}
 801b108:	40013800 	.word	0x40013800
 801b10c:	40004400 	.word	0x40004400
 801b110:	40004800 	.word	0x40004800
 801b114:	40004c00 	.word	0x40004c00
 801b118:	40008000 	.word	0x40008000
 801b11c:	0801df44 	.word	0x0801df44

0801b120 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 801b120:	b580      	push	{r7, lr}
 801b122:	b084      	sub	sp, #16
 801b124:	af00      	add	r7, sp, #0
 801b126:	6078      	str	r0, [r7, #4]
 801b128:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801b12a:	687b      	ldr	r3, [r7, #4]
 801b12c:	681b      	ldr	r3, [r3, #0]
 801b12e:	4a38      	ldr	r2, [pc, #224]	@ (801b210 <HAL_UARTEx_SetRxFifoThreshold+0xf0>)
 801b130:	4293      	cmp	r3, r2
 801b132:	d018      	beq.n	801b166 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 801b134:	687b      	ldr	r3, [r7, #4]
 801b136:	681b      	ldr	r3, [r3, #0]
 801b138:	4a36      	ldr	r2, [pc, #216]	@ (801b214 <HAL_UARTEx_SetRxFifoThreshold+0xf4>)
 801b13a:	4293      	cmp	r3, r2
 801b13c:	d013      	beq.n	801b166 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 801b13e:	687b      	ldr	r3, [r7, #4]
 801b140:	681b      	ldr	r3, [r3, #0]
 801b142:	4a35      	ldr	r2, [pc, #212]	@ (801b218 <HAL_UARTEx_SetRxFifoThreshold+0xf8>)
 801b144:	4293      	cmp	r3, r2
 801b146:	d00e      	beq.n	801b166 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 801b148:	687b      	ldr	r3, [r7, #4]
 801b14a:	681b      	ldr	r3, [r3, #0]
 801b14c:	4a33      	ldr	r2, [pc, #204]	@ (801b21c <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 801b14e:	4293      	cmp	r3, r2
 801b150:	d009      	beq.n	801b166 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 801b152:	687b      	ldr	r3, [r7, #4]
 801b154:	681b      	ldr	r3, [r3, #0]
 801b156:	4a32      	ldr	r2, [pc, #200]	@ (801b220 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 801b158:	4293      	cmp	r3, r2
 801b15a:	d004      	beq.n	801b166 <HAL_UARTEx_SetRxFifoThreshold+0x46>
 801b15c:	f240 2195 	movw	r1, #661	@ 0x295
 801b160:	4830      	ldr	r0, [pc, #192]	@ (801b224 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 801b162:	f7f7 f9a7 	bl	80124b4 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 801b166:	683b      	ldr	r3, [r7, #0]
 801b168:	2b00      	cmp	r3, #0
 801b16a:	d018      	beq.n	801b19e <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801b16c:	683b      	ldr	r3, [r7, #0]
 801b16e:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801b172:	d014      	beq.n	801b19e <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801b174:	683b      	ldr	r3, [r7, #0]
 801b176:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 801b17a:	d010      	beq.n	801b19e <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801b17c:	683b      	ldr	r3, [r7, #0]
 801b17e:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 801b182:	d00c      	beq.n	801b19e <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801b184:	683b      	ldr	r3, [r7, #0]
 801b186:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 801b18a:	d008      	beq.n	801b19e <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801b18c:	683b      	ldr	r3, [r7, #0]
 801b18e:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 801b192:	d004      	beq.n	801b19e <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801b194:	f240 2196 	movw	r1, #662	@ 0x296
 801b198:	4822      	ldr	r0, [pc, #136]	@ (801b224 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 801b19a:	f7f7 f98b 	bl	80124b4 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 801b19e:	687b      	ldr	r3, [r7, #4]
 801b1a0:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801b1a4:	2b01      	cmp	r3, #1
 801b1a6:	d101      	bne.n	801b1ac <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 801b1a8:	2302      	movs	r3, #2
 801b1aa:	e02d      	b.n	801b208 <HAL_UARTEx_SetRxFifoThreshold+0xe8>
 801b1ac:	687b      	ldr	r3, [r7, #4]
 801b1ae:	2201      	movs	r2, #1
 801b1b0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 801b1b4:	687b      	ldr	r3, [r7, #4]
 801b1b6:	2224      	movs	r2, #36	@ 0x24
 801b1b8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 801b1bc:	687b      	ldr	r3, [r7, #4]
 801b1be:	681b      	ldr	r3, [r3, #0]
 801b1c0:	681b      	ldr	r3, [r3, #0]
 801b1c2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 801b1c4:	687b      	ldr	r3, [r7, #4]
 801b1c6:	681b      	ldr	r3, [r3, #0]
 801b1c8:	681a      	ldr	r2, [r3, #0]
 801b1ca:	687b      	ldr	r3, [r7, #4]
 801b1cc:	681b      	ldr	r3, [r3, #0]
 801b1ce:	f022 0201 	bic.w	r2, r2, #1
 801b1d2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 801b1d4:	687b      	ldr	r3, [r7, #4]
 801b1d6:	681b      	ldr	r3, [r3, #0]
 801b1d8:	689b      	ldr	r3, [r3, #8]
 801b1da:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 801b1de:	687b      	ldr	r3, [r7, #4]
 801b1e0:	681b      	ldr	r3, [r3, #0]
 801b1e2:	683a      	ldr	r2, [r7, #0]
 801b1e4:	430a      	orrs	r2, r1
 801b1e6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 801b1e8:	6878      	ldr	r0, [r7, #4]
 801b1ea:	f000 f81d 	bl	801b228 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 801b1ee:	687b      	ldr	r3, [r7, #4]
 801b1f0:	681b      	ldr	r3, [r3, #0]
 801b1f2:	68fa      	ldr	r2, [r7, #12]
 801b1f4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 801b1f6:	687b      	ldr	r3, [r7, #4]
 801b1f8:	2220      	movs	r2, #32
 801b1fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 801b1fe:	687b      	ldr	r3, [r7, #4]
 801b200:	2200      	movs	r2, #0
 801b202:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801b206:	2300      	movs	r3, #0
}
 801b208:	4618      	mov	r0, r3
 801b20a:	3710      	adds	r7, #16
 801b20c:	46bd      	mov	sp, r7
 801b20e:	bd80      	pop	{r7, pc}
 801b210:	40013800 	.word	0x40013800
 801b214:	40004400 	.word	0x40004400
 801b218:	40004800 	.word	0x40004800
 801b21c:	40004c00 	.word	0x40004c00
 801b220:	40008000 	.word	0x40008000
 801b224:	0801df44 	.word	0x0801df44

0801b228 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 801b228:	b480      	push	{r7}
 801b22a:	b085      	sub	sp, #20
 801b22c:	af00      	add	r7, sp, #0
 801b22e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 801b230:	687b      	ldr	r3, [r7, #4]
 801b232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801b234:	2b00      	cmp	r3, #0
 801b236:	d108      	bne.n	801b24a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 801b238:	687b      	ldr	r3, [r7, #4]
 801b23a:	2201      	movs	r2, #1
 801b23c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 801b240:	687b      	ldr	r3, [r7, #4]
 801b242:	2201      	movs	r2, #1
 801b244:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 801b248:	e031      	b.n	801b2ae <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 801b24a:	2308      	movs	r3, #8
 801b24c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 801b24e:	2308      	movs	r3, #8
 801b250:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801b252:	687b      	ldr	r3, [r7, #4]
 801b254:	681b      	ldr	r3, [r3, #0]
 801b256:	689b      	ldr	r3, [r3, #8]
 801b258:	0e5b      	lsrs	r3, r3, #25
 801b25a:	b2db      	uxtb	r3, r3
 801b25c:	f003 0307 	and.w	r3, r3, #7
 801b260:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	681b      	ldr	r3, [r3, #0]
 801b266:	689b      	ldr	r3, [r3, #8]
 801b268:	0f5b      	lsrs	r3, r3, #29
 801b26a:	b2db      	uxtb	r3, r3
 801b26c:	f003 0307 	and.w	r3, r3, #7
 801b270:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b272:	7bbb      	ldrb	r3, [r7, #14]
 801b274:	7b3a      	ldrb	r2, [r7, #12]
 801b276:	4911      	ldr	r1, [pc, #68]	@ (801b2bc <UARTEx_SetNbDataToProcess+0x94>)
 801b278:	5c8a      	ldrb	r2, [r1, r2]
 801b27a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 801b27e:	7b3a      	ldrb	r2, [r7, #12]
 801b280:	490f      	ldr	r1, [pc, #60]	@ (801b2c0 <UARTEx_SetNbDataToProcess+0x98>)
 801b282:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801b284:	fb93 f3f2 	sdiv	r3, r3, r2
 801b288:	b29a      	uxth	r2, r3
 801b28a:	687b      	ldr	r3, [r7, #4]
 801b28c:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b290:	7bfb      	ldrb	r3, [r7, #15]
 801b292:	7b7a      	ldrb	r2, [r7, #13]
 801b294:	4909      	ldr	r1, [pc, #36]	@ (801b2bc <UARTEx_SetNbDataToProcess+0x94>)
 801b296:	5c8a      	ldrb	r2, [r1, r2]
 801b298:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 801b29c:	7b7a      	ldrb	r2, [r7, #13]
 801b29e:	4908      	ldr	r1, [pc, #32]	@ (801b2c0 <UARTEx_SetNbDataToProcess+0x98>)
 801b2a0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801b2a2:	fb93 f3f2 	sdiv	r3, r3, r2
 801b2a6:	b29a      	uxth	r2, r3
 801b2a8:	687b      	ldr	r3, [r7, #4]
 801b2aa:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 801b2ae:	bf00      	nop
 801b2b0:	3714      	adds	r7, #20
 801b2b2:	46bd      	mov	sp, r7
 801b2b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2b8:	4770      	bx	lr
 801b2ba:	bf00      	nop
 801b2bc:	0801e348 	.word	0x0801e348
 801b2c0:	0801e350 	.word	0x0801e350

0801b2c4 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 801b2c4:	b480      	push	{r7}
 801b2c6:	b085      	sub	sp, #20
 801b2c8:	af00      	add	r7, sp, #0
 801b2ca:	4603      	mov	r3, r0
 801b2cc:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 801b2ce:	2300      	movs	r3, #0
 801b2d0:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 801b2d2:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 801b2d6:	2b84      	cmp	r3, #132	@ 0x84
 801b2d8:	d005      	beq.n	801b2e6 <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 801b2da:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 801b2de:	68fb      	ldr	r3, [r7, #12]
 801b2e0:	4413      	add	r3, r2
 801b2e2:	3303      	adds	r3, #3
 801b2e4:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 801b2e6:	68fb      	ldr	r3, [r7, #12]
}
 801b2e8:	4618      	mov	r0, r3
 801b2ea:	3714      	adds	r7, #20
 801b2ec:	46bd      	mov	sp, r7
 801b2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b2f2:	4770      	bx	lr

0801b2f4 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 801b2f4:	b580      	push	{r7, lr}
 801b2f6:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 801b2f8:	f000 fa5c 	bl	801b7b4 <vTaskStartScheduler>
  
  return osOK;
 801b2fc:	2300      	movs	r3, #0
}
 801b2fe:	4618      	mov	r0, r3
 801b300:	bd80      	pop	{r7, pc}

0801b302 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 801b302:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b304:	b087      	sub	sp, #28
 801b306:	af02      	add	r7, sp, #8
 801b308:	6078      	str	r0, [r7, #4]
 801b30a:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801b30c:	687b      	ldr	r3, [r7, #4]
 801b30e:	685c      	ldr	r4, [r3, #4]
 801b310:	687b      	ldr	r3, [r7, #4]
 801b312:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801b314:	687b      	ldr	r3, [r7, #4]
 801b316:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801b318:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801b31a:	687b      	ldr	r3, [r7, #4]
 801b31c:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 801b320:	4618      	mov	r0, r3
 801b322:	f7ff ffcf 	bl	801b2c4 <makeFreeRtosPriority>
 801b326:	4602      	mov	r2, r0
 801b328:	f107 030c 	add.w	r3, r7, #12
 801b32c:	9301      	str	r3, [sp, #4]
 801b32e:	9200      	str	r2, [sp, #0]
 801b330:	683b      	ldr	r3, [r7, #0]
 801b332:	4632      	mov	r2, r6
 801b334:	4629      	mov	r1, r5
 801b336:	4620      	mov	r0, r4
 801b338:	f000 f8d2 	bl	801b4e0 <xTaskCreate>
 801b33c:	4603      	mov	r3, r0
 801b33e:	2b01      	cmp	r3, #1
 801b340:	d001      	beq.n	801b346 <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 801b342:	2300      	movs	r3, #0
 801b344:	e000      	b.n	801b348 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801b346:	68fb      	ldr	r3, [r7, #12]
}
 801b348:	4618      	mov	r0, r3
 801b34a:	3714      	adds	r7, #20
 801b34c:	46bd      	mov	sp, r7
 801b34e:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801b350 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 801b350:	b580      	push	{r7, lr}
 801b352:	b084      	sub	sp, #16
 801b354:	af00      	add	r7, sp, #0
 801b356:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 801b358:	687b      	ldr	r3, [r7, #4]
 801b35a:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 801b35c:	68fb      	ldr	r3, [r7, #12]
 801b35e:	2b00      	cmp	r3, #0
 801b360:	d001      	beq.n	801b366 <osDelay+0x16>
 801b362:	68fb      	ldr	r3, [r7, #12]
 801b364:	e000      	b.n	801b368 <osDelay+0x18>
 801b366:	2301      	movs	r3, #1
 801b368:	4618      	mov	r0, r3
 801b36a:	f000 f9ed 	bl	801b748 <vTaskDelay>
  
  return osOK;
 801b36e:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 801b370:	4618      	mov	r0, r3
 801b372:	3710      	adds	r7, #16
 801b374:	46bd      	mov	sp, r7
 801b376:	bd80      	pop	{r7, pc}

0801b378 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 801b378:	b480      	push	{r7}
 801b37a:	b083      	sub	sp, #12
 801b37c:	af00      	add	r7, sp, #0
 801b37e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b380:	687b      	ldr	r3, [r7, #4]
 801b382:	f103 0208 	add.w	r2, r3, #8
 801b386:	687b      	ldr	r3, [r7, #4]
 801b388:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	f04f 32ff 	mov.w	r2, #4294967295
 801b390:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b392:	687b      	ldr	r3, [r7, #4]
 801b394:	f103 0208 	add.w	r2, r3, #8
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801b39c:	687b      	ldr	r3, [r7, #4]
 801b39e:	f103 0208 	add.w	r2, r3, #8
 801b3a2:	687b      	ldr	r3, [r7, #4]
 801b3a4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801b3a6:	687b      	ldr	r3, [r7, #4]
 801b3a8:	2200      	movs	r2, #0
 801b3aa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 801b3ac:	bf00      	nop
 801b3ae:	370c      	adds	r7, #12
 801b3b0:	46bd      	mov	sp, r7
 801b3b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b6:	4770      	bx	lr

0801b3b8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 801b3b8:	b480      	push	{r7}
 801b3ba:	b083      	sub	sp, #12
 801b3bc:	af00      	add	r7, sp, #0
 801b3be:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 801b3c0:	687b      	ldr	r3, [r7, #4]
 801b3c2:	2200      	movs	r2, #0
 801b3c4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 801b3c6:	bf00      	nop
 801b3c8:	370c      	adds	r7, #12
 801b3ca:	46bd      	mov	sp, r7
 801b3cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3d0:	4770      	bx	lr

0801b3d2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801b3d2:	b480      	push	{r7}
 801b3d4:	b085      	sub	sp, #20
 801b3d6:	af00      	add	r7, sp, #0
 801b3d8:	6078      	str	r0, [r7, #4]
 801b3da:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 801b3dc:	687b      	ldr	r3, [r7, #4]
 801b3de:	685b      	ldr	r3, [r3, #4]
 801b3e0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 801b3e2:	683b      	ldr	r3, [r7, #0]
 801b3e4:	68fa      	ldr	r2, [r7, #12]
 801b3e6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 801b3e8:	68fb      	ldr	r3, [r7, #12]
 801b3ea:	689a      	ldr	r2, [r3, #8]
 801b3ec:	683b      	ldr	r3, [r7, #0]
 801b3ee:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 801b3f0:	68fb      	ldr	r3, [r7, #12]
 801b3f2:	689b      	ldr	r3, [r3, #8]
 801b3f4:	683a      	ldr	r2, [r7, #0]
 801b3f6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 801b3f8:	68fb      	ldr	r3, [r7, #12]
 801b3fa:	683a      	ldr	r2, [r7, #0]
 801b3fc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 801b3fe:	683b      	ldr	r3, [r7, #0]
 801b400:	687a      	ldr	r2, [r7, #4]
 801b402:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801b404:	687b      	ldr	r3, [r7, #4]
 801b406:	681b      	ldr	r3, [r3, #0]
 801b408:	1c5a      	adds	r2, r3, #1
 801b40a:	687b      	ldr	r3, [r7, #4]
 801b40c:	601a      	str	r2, [r3, #0]
}
 801b40e:	bf00      	nop
 801b410:	3714      	adds	r7, #20
 801b412:	46bd      	mov	sp, r7
 801b414:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b418:	4770      	bx	lr

0801b41a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 801b41a:	b480      	push	{r7}
 801b41c:	b085      	sub	sp, #20
 801b41e:	af00      	add	r7, sp, #0
 801b420:	6078      	str	r0, [r7, #4]
 801b422:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801b424:	683b      	ldr	r3, [r7, #0]
 801b426:	681b      	ldr	r3, [r3, #0]
 801b428:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 801b42a:	68bb      	ldr	r3, [r7, #8]
 801b42c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b430:	d103      	bne.n	801b43a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801b432:	687b      	ldr	r3, [r7, #4]
 801b434:	691b      	ldr	r3, [r3, #16]
 801b436:	60fb      	str	r3, [r7, #12]
 801b438:	e00c      	b.n	801b454 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 801b43a:	687b      	ldr	r3, [r7, #4]
 801b43c:	3308      	adds	r3, #8
 801b43e:	60fb      	str	r3, [r7, #12]
 801b440:	e002      	b.n	801b448 <vListInsert+0x2e>
 801b442:	68fb      	ldr	r3, [r7, #12]
 801b444:	685b      	ldr	r3, [r3, #4]
 801b446:	60fb      	str	r3, [r7, #12]
 801b448:	68fb      	ldr	r3, [r7, #12]
 801b44a:	685b      	ldr	r3, [r3, #4]
 801b44c:	681b      	ldr	r3, [r3, #0]
 801b44e:	68ba      	ldr	r2, [r7, #8]
 801b450:	429a      	cmp	r2, r3
 801b452:	d2f6      	bcs.n	801b442 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801b454:	68fb      	ldr	r3, [r7, #12]
 801b456:	685a      	ldr	r2, [r3, #4]
 801b458:	683b      	ldr	r3, [r7, #0]
 801b45a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 801b45c:	683b      	ldr	r3, [r7, #0]
 801b45e:	685b      	ldr	r3, [r3, #4]
 801b460:	683a      	ldr	r2, [r7, #0]
 801b462:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801b464:	683b      	ldr	r3, [r7, #0]
 801b466:	68fa      	ldr	r2, [r7, #12]
 801b468:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 801b46a:	68fb      	ldr	r3, [r7, #12]
 801b46c:	683a      	ldr	r2, [r7, #0]
 801b46e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 801b470:	683b      	ldr	r3, [r7, #0]
 801b472:	687a      	ldr	r2, [r7, #4]
 801b474:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801b476:	687b      	ldr	r3, [r7, #4]
 801b478:	681b      	ldr	r3, [r3, #0]
 801b47a:	1c5a      	adds	r2, r3, #1
 801b47c:	687b      	ldr	r3, [r7, #4]
 801b47e:	601a      	str	r2, [r3, #0]
}
 801b480:	bf00      	nop
 801b482:	3714      	adds	r7, #20
 801b484:	46bd      	mov	sp, r7
 801b486:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b48a:	4770      	bx	lr

0801b48c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 801b48c:	b480      	push	{r7}
 801b48e:	b085      	sub	sp, #20
 801b490:	af00      	add	r7, sp, #0
 801b492:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801b494:	687b      	ldr	r3, [r7, #4]
 801b496:	691b      	ldr	r3, [r3, #16]
 801b498:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 801b49a:	687b      	ldr	r3, [r7, #4]
 801b49c:	685b      	ldr	r3, [r3, #4]
 801b49e:	687a      	ldr	r2, [r7, #4]
 801b4a0:	6892      	ldr	r2, [r2, #8]
 801b4a2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801b4a4:	687b      	ldr	r3, [r7, #4]
 801b4a6:	689b      	ldr	r3, [r3, #8]
 801b4a8:	687a      	ldr	r2, [r7, #4]
 801b4aa:	6852      	ldr	r2, [r2, #4]
 801b4ac:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 801b4ae:	68fb      	ldr	r3, [r7, #12]
 801b4b0:	685b      	ldr	r3, [r3, #4]
 801b4b2:	687a      	ldr	r2, [r7, #4]
 801b4b4:	429a      	cmp	r2, r3
 801b4b6:	d103      	bne.n	801b4c0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 801b4b8:	687b      	ldr	r3, [r7, #4]
 801b4ba:	689a      	ldr	r2, [r3, #8]
 801b4bc:	68fb      	ldr	r3, [r7, #12]
 801b4be:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 801b4c0:	687b      	ldr	r3, [r7, #4]
 801b4c2:	2200      	movs	r2, #0
 801b4c4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 801b4c6:	68fb      	ldr	r3, [r7, #12]
 801b4c8:	681b      	ldr	r3, [r3, #0]
 801b4ca:	1e5a      	subs	r2, r3, #1
 801b4cc:	68fb      	ldr	r3, [r7, #12]
 801b4ce:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 801b4d0:	68fb      	ldr	r3, [r7, #12]
 801b4d2:	681b      	ldr	r3, [r3, #0]
}
 801b4d4:	4618      	mov	r0, r3
 801b4d6:	3714      	adds	r7, #20
 801b4d8:	46bd      	mov	sp, r7
 801b4da:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b4de:	4770      	bx	lr

0801b4e0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801b4e0:	b580      	push	{r7, lr}
 801b4e2:	b08c      	sub	sp, #48	@ 0x30
 801b4e4:	af04      	add	r7, sp, #16
 801b4e6:	60f8      	str	r0, [r7, #12]
 801b4e8:	60b9      	str	r1, [r7, #8]
 801b4ea:	603b      	str	r3, [r7, #0]
 801b4ec:	4613      	mov	r3, r2
 801b4ee:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801b4f0:	88fb      	ldrh	r3, [r7, #6]
 801b4f2:	009b      	lsls	r3, r3, #2
 801b4f4:	4618      	mov	r0, r3
 801b4f6:	f000 fe97 	bl	801c228 <pvPortMalloc>
 801b4fa:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801b4fc:	697b      	ldr	r3, [r7, #20]
 801b4fe:	2b00      	cmp	r3, #0
 801b500:	d00e      	beq.n	801b520 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801b502:	2054      	movs	r0, #84	@ 0x54
 801b504:	f000 fe90 	bl	801c228 <pvPortMalloc>
 801b508:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 801b50a:	69fb      	ldr	r3, [r7, #28]
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d003      	beq.n	801b518 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801b510:	69fb      	ldr	r3, [r7, #28]
 801b512:	697a      	ldr	r2, [r7, #20]
 801b514:	631a      	str	r2, [r3, #48]	@ 0x30
 801b516:	e005      	b.n	801b524 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 801b518:	6978      	ldr	r0, [r7, #20]
 801b51a:	f000 fe97 	bl	801c24c <vPortFree>
 801b51e:	e001      	b.n	801b524 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801b520:	2300      	movs	r3, #0
 801b522:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801b524:	69fb      	ldr	r3, [r7, #28]
 801b526:	2b00      	cmp	r3, #0
 801b528:	d013      	beq.n	801b552 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801b52a:	88fa      	ldrh	r2, [r7, #6]
 801b52c:	2300      	movs	r3, #0
 801b52e:	9303      	str	r3, [sp, #12]
 801b530:	69fb      	ldr	r3, [r7, #28]
 801b532:	9302      	str	r3, [sp, #8]
 801b534:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b536:	9301      	str	r3, [sp, #4]
 801b538:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b53a:	9300      	str	r3, [sp, #0]
 801b53c:	683b      	ldr	r3, [r7, #0]
 801b53e:	68b9      	ldr	r1, [r7, #8]
 801b540:	68f8      	ldr	r0, [r7, #12]
 801b542:	f000 f80e 	bl	801b562 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801b546:	69f8      	ldr	r0, [r7, #28]
 801b548:	f000 f894 	bl	801b674 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801b54c:	2301      	movs	r3, #1
 801b54e:	61bb      	str	r3, [r7, #24]
 801b550:	e002      	b.n	801b558 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801b552:	f04f 33ff 	mov.w	r3, #4294967295
 801b556:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801b558:	69bb      	ldr	r3, [r7, #24]
	}
 801b55a:	4618      	mov	r0, r3
 801b55c:	3720      	adds	r7, #32
 801b55e:	46bd      	mov	sp, r7
 801b560:	bd80      	pop	{r7, pc}

0801b562 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801b562:	b580      	push	{r7, lr}
 801b564:	b088      	sub	sp, #32
 801b566:	af00      	add	r7, sp, #0
 801b568:	60f8      	str	r0, [r7, #12]
 801b56a:	60b9      	str	r1, [r7, #8]
 801b56c:	607a      	str	r2, [r7, #4]
 801b56e:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 801b570:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b572:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801b574:	687b      	ldr	r3, [r7, #4]
 801b576:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 801b57a:	3b01      	subs	r3, #1
 801b57c:	009b      	lsls	r3, r3, #2
 801b57e:	4413      	add	r3, r2
 801b580:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801b582:	69bb      	ldr	r3, [r7, #24]
 801b584:	f023 0307 	bic.w	r3, r3, #7
 801b588:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 801b58a:	69bb      	ldr	r3, [r7, #24]
 801b58c:	f003 0307 	and.w	r3, r3, #7
 801b590:	2b00      	cmp	r3, #0
 801b592:	d00b      	beq.n	801b5ac <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801b594:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b598:	f383 8811 	msr	BASEPRI, r3
 801b59c:	f3bf 8f6f 	isb	sy
 801b5a0:	f3bf 8f4f 	dsb	sy
 801b5a4:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801b5a6:	bf00      	nop
 801b5a8:	bf00      	nop
 801b5aa:	e7fd      	b.n	801b5a8 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 801b5ac:	68bb      	ldr	r3, [r7, #8]
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d01f      	beq.n	801b5f2 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b5b2:	2300      	movs	r3, #0
 801b5b4:	61fb      	str	r3, [r7, #28]
 801b5b6:	e012      	b.n	801b5de <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 801b5b8:	68ba      	ldr	r2, [r7, #8]
 801b5ba:	69fb      	ldr	r3, [r7, #28]
 801b5bc:	4413      	add	r3, r2
 801b5be:	7819      	ldrb	r1, [r3, #0]
 801b5c0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b5c2:	69fb      	ldr	r3, [r7, #28]
 801b5c4:	4413      	add	r3, r2
 801b5c6:	3334      	adds	r3, #52	@ 0x34
 801b5c8:	460a      	mov	r2, r1
 801b5ca:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 801b5cc:	68ba      	ldr	r2, [r7, #8]
 801b5ce:	69fb      	ldr	r3, [r7, #28]
 801b5d0:	4413      	add	r3, r2
 801b5d2:	781b      	ldrb	r3, [r3, #0]
 801b5d4:	2b00      	cmp	r3, #0
 801b5d6:	d006      	beq.n	801b5e6 <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801b5d8:	69fb      	ldr	r3, [r7, #28]
 801b5da:	3301      	adds	r3, #1
 801b5dc:	61fb      	str	r3, [r7, #28]
 801b5de:	69fb      	ldr	r3, [r7, #28]
 801b5e0:	2b0f      	cmp	r3, #15
 801b5e2:	d9e9      	bls.n	801b5b8 <prvInitialiseNewTask+0x56>
 801b5e4:	e000      	b.n	801b5e8 <prvInitialiseNewTask+0x86>
			{
				break;
 801b5e6:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801b5e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b5ea:	2200      	movs	r2, #0
 801b5ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 801b5f0:	e003      	b.n	801b5fa <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801b5f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b5f4:	2200      	movs	r2, #0
 801b5f6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801b5fa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b5fc:	2b06      	cmp	r3, #6
 801b5fe:	d901      	bls.n	801b604 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 801b600:	2306      	movs	r3, #6
 801b602:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801b604:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b606:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b608:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801b60a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b60c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801b60e:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 801b610:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b612:	2200      	movs	r2, #0
 801b614:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801b616:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b618:	3304      	adds	r3, #4
 801b61a:	4618      	mov	r0, r3
 801b61c:	f7ff fecc 	bl	801b3b8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 801b620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b622:	3318      	adds	r3, #24
 801b624:	4618      	mov	r0, r3
 801b626:	f7ff fec7 	bl	801b3b8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801b62a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b62c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b62e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801b630:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801b632:	f1c3 0207 	rsb	r2, r3, #7
 801b636:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b638:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801b63a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b63c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b63e:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 801b640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b642:	2200      	movs	r2, #0
 801b644:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801b646:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b648:	2200      	movs	r2, #0
 801b64a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 801b64e:	683a      	ldr	r2, [r7, #0]
 801b650:	68f9      	ldr	r1, [r7, #12]
 801b652:	69b8      	ldr	r0, [r7, #24]
 801b654:	f000 fbd6 	bl	801be04 <pxPortInitialiseStack>
 801b658:	4602      	mov	r2, r0
 801b65a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801b65c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 801b65e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b660:	2b00      	cmp	r3, #0
 801b662:	d002      	beq.n	801b66a <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801b664:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801b666:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801b668:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b66a:	bf00      	nop
 801b66c:	3720      	adds	r7, #32
 801b66e:	46bd      	mov	sp, r7
 801b670:	bd80      	pop	{r7, pc}
	...

0801b674 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801b674:	b580      	push	{r7, lr}
 801b676:	b082      	sub	sp, #8
 801b678:	af00      	add	r7, sp, #0
 801b67a:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 801b67c:	f000 fcf4 	bl	801c068 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 801b680:	4b2a      	ldr	r3, [pc, #168]	@ (801b72c <prvAddNewTaskToReadyList+0xb8>)
 801b682:	681b      	ldr	r3, [r3, #0]
 801b684:	3301      	adds	r3, #1
 801b686:	4a29      	ldr	r2, [pc, #164]	@ (801b72c <prvAddNewTaskToReadyList+0xb8>)
 801b688:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 801b68a:	4b29      	ldr	r3, [pc, #164]	@ (801b730 <prvAddNewTaskToReadyList+0xbc>)
 801b68c:	681b      	ldr	r3, [r3, #0]
 801b68e:	2b00      	cmp	r3, #0
 801b690:	d109      	bne.n	801b6a6 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801b692:	4a27      	ldr	r2, [pc, #156]	@ (801b730 <prvAddNewTaskToReadyList+0xbc>)
 801b694:	687b      	ldr	r3, [r7, #4]
 801b696:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 801b698:	4b24      	ldr	r3, [pc, #144]	@ (801b72c <prvAddNewTaskToReadyList+0xb8>)
 801b69a:	681b      	ldr	r3, [r3, #0]
 801b69c:	2b01      	cmp	r3, #1
 801b69e:	d110      	bne.n	801b6c2 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 801b6a0:	f000 faac 	bl	801bbfc <prvInitialiseTaskLists>
 801b6a4:	e00d      	b.n	801b6c2 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801b6a6:	4b23      	ldr	r3, [pc, #140]	@ (801b734 <prvAddNewTaskToReadyList+0xc0>)
 801b6a8:	681b      	ldr	r3, [r3, #0]
 801b6aa:	2b00      	cmp	r3, #0
 801b6ac:	d109      	bne.n	801b6c2 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 801b6ae:	4b20      	ldr	r3, [pc, #128]	@ (801b730 <prvAddNewTaskToReadyList+0xbc>)
 801b6b0:	681b      	ldr	r3, [r3, #0]
 801b6b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b6b4:	687b      	ldr	r3, [r7, #4]
 801b6b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6b8:	429a      	cmp	r2, r3
 801b6ba:	d802      	bhi.n	801b6c2 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 801b6bc:	4a1c      	ldr	r2, [pc, #112]	@ (801b730 <prvAddNewTaskToReadyList+0xbc>)
 801b6be:	687b      	ldr	r3, [r7, #4]
 801b6c0:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 801b6c2:	4b1d      	ldr	r3, [pc, #116]	@ (801b738 <prvAddNewTaskToReadyList+0xc4>)
 801b6c4:	681b      	ldr	r3, [r3, #0]
 801b6c6:	3301      	adds	r3, #1
 801b6c8:	4a1b      	ldr	r2, [pc, #108]	@ (801b738 <prvAddNewTaskToReadyList+0xc4>)
 801b6ca:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 801b6cc:	687b      	ldr	r3, [r7, #4]
 801b6ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b6d0:	2201      	movs	r2, #1
 801b6d2:	409a      	lsls	r2, r3
 801b6d4:	4b19      	ldr	r3, [pc, #100]	@ (801b73c <prvAddNewTaskToReadyList+0xc8>)
 801b6d6:	681b      	ldr	r3, [r3, #0]
 801b6d8:	4313      	orrs	r3, r2
 801b6da:	4a18      	ldr	r2, [pc, #96]	@ (801b73c <prvAddNewTaskToReadyList+0xc8>)
 801b6dc:	6013      	str	r3, [r2, #0]
 801b6de:	687b      	ldr	r3, [r7, #4]
 801b6e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b6e2:	4613      	mov	r3, r2
 801b6e4:	009b      	lsls	r3, r3, #2
 801b6e6:	4413      	add	r3, r2
 801b6e8:	009b      	lsls	r3, r3, #2
 801b6ea:	4a15      	ldr	r2, [pc, #84]	@ (801b740 <prvAddNewTaskToReadyList+0xcc>)
 801b6ec:	441a      	add	r2, r3
 801b6ee:	687b      	ldr	r3, [r7, #4]
 801b6f0:	3304      	adds	r3, #4
 801b6f2:	4619      	mov	r1, r3
 801b6f4:	4610      	mov	r0, r2
 801b6f6:	f7ff fe6c 	bl	801b3d2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801b6fa:	f000 fce7 	bl	801c0cc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 801b6fe:	4b0d      	ldr	r3, [pc, #52]	@ (801b734 <prvAddNewTaskToReadyList+0xc0>)
 801b700:	681b      	ldr	r3, [r3, #0]
 801b702:	2b00      	cmp	r3, #0
 801b704:	d00e      	beq.n	801b724 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801b706:	4b0a      	ldr	r3, [pc, #40]	@ (801b730 <prvAddNewTaskToReadyList+0xbc>)
 801b708:	681b      	ldr	r3, [r3, #0]
 801b70a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b70c:	687b      	ldr	r3, [r7, #4]
 801b70e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b710:	429a      	cmp	r2, r3
 801b712:	d207      	bcs.n	801b724 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801b714:	4b0b      	ldr	r3, [pc, #44]	@ (801b744 <prvAddNewTaskToReadyList+0xd0>)
 801b716:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b71a:	601a      	str	r2, [r3, #0]
 801b71c:	f3bf 8f4f 	dsb	sy
 801b720:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801b724:	bf00      	nop
 801b726:	3708      	adds	r7, #8
 801b728:	46bd      	mov	sp, r7
 801b72a:	bd80      	pop	{r7, pc}
 801b72c:	20000534 	.word	0x20000534
 801b730:	20000434 	.word	0x20000434
 801b734:	20000540 	.word	0x20000540
 801b738:	20000550 	.word	0x20000550
 801b73c:	2000053c 	.word	0x2000053c
 801b740:	20000438 	.word	0x20000438
 801b744:	e000ed04 	.word	0xe000ed04

0801b748 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 801b748:	b580      	push	{r7, lr}
 801b74a:	b084      	sub	sp, #16
 801b74c:	af00      	add	r7, sp, #0
 801b74e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 801b750:	2300      	movs	r3, #0
 801b752:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801b754:	687b      	ldr	r3, [r7, #4]
 801b756:	2b00      	cmp	r3, #0
 801b758:	d018      	beq.n	801b78c <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 801b75a:	4b14      	ldr	r3, [pc, #80]	@ (801b7ac <vTaskDelay+0x64>)
 801b75c:	681b      	ldr	r3, [r3, #0]
 801b75e:	2b00      	cmp	r3, #0
 801b760:	d00b      	beq.n	801b77a <vTaskDelay+0x32>
	__asm volatile
 801b762:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b766:	f383 8811 	msr	BASEPRI, r3
 801b76a:	f3bf 8f6f 	isb	sy
 801b76e:	f3bf 8f4f 	dsb	sy
 801b772:	60bb      	str	r3, [r7, #8]
}
 801b774:	bf00      	nop
 801b776:	bf00      	nop
 801b778:	e7fd      	b.n	801b776 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 801b77a:	f000 f865 	bl	801b848 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 801b77e:	2100      	movs	r1, #0
 801b780:	6878      	ldr	r0, [r7, #4]
 801b782:	f000 fad9 	bl	801bd38 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801b786:	f000 f86d 	bl	801b864 <xTaskResumeAll>
 801b78a:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 801b78c:	68fb      	ldr	r3, [r7, #12]
 801b78e:	2b00      	cmp	r3, #0
 801b790:	d107      	bne.n	801b7a2 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801b792:	4b07      	ldr	r3, [pc, #28]	@ (801b7b0 <vTaskDelay+0x68>)
 801b794:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b798:	601a      	str	r2, [r3, #0]
 801b79a:	f3bf 8f4f 	dsb	sy
 801b79e:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801b7a2:	bf00      	nop
 801b7a4:	3710      	adds	r7, #16
 801b7a6:	46bd      	mov	sp, r7
 801b7a8:	bd80      	pop	{r7, pc}
 801b7aa:	bf00      	nop
 801b7ac:	2000055c 	.word	0x2000055c
 801b7b0:	e000ed04 	.word	0xe000ed04

0801b7b4 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801b7b4:	b580      	push	{r7, lr}
 801b7b6:	b086      	sub	sp, #24
 801b7b8:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 801b7ba:	4b1d      	ldr	r3, [pc, #116]	@ (801b830 <vTaskStartScheduler+0x7c>)
 801b7bc:	9301      	str	r3, [sp, #4]
 801b7be:	2300      	movs	r3, #0
 801b7c0:	9300      	str	r3, [sp, #0]
 801b7c2:	2300      	movs	r3, #0
 801b7c4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 801b7c8:	491a      	ldr	r1, [pc, #104]	@ (801b834 <vTaskStartScheduler+0x80>)
 801b7ca:	481b      	ldr	r0, [pc, #108]	@ (801b838 <vTaskStartScheduler+0x84>)
 801b7cc:	f7ff fe88 	bl	801b4e0 <xTaskCreate>
 801b7d0:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801b7d2:	68fb      	ldr	r3, [r7, #12]
 801b7d4:	2b01      	cmp	r3, #1
 801b7d6:	d116      	bne.n	801b806 <vTaskStartScheduler+0x52>
	__asm volatile
 801b7d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b7dc:	f383 8811 	msr	BASEPRI, r3
 801b7e0:	f3bf 8f6f 	isb	sy
 801b7e4:	f3bf 8f4f 	dsb	sy
 801b7e8:	60bb      	str	r3, [r7, #8]
}
 801b7ea:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 801b7ec:	4b13      	ldr	r3, [pc, #76]	@ (801b83c <vTaskStartScheduler+0x88>)
 801b7ee:	f04f 32ff 	mov.w	r2, #4294967295
 801b7f2:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 801b7f4:	4b12      	ldr	r3, [pc, #72]	@ (801b840 <vTaskStartScheduler+0x8c>)
 801b7f6:	2201      	movs	r2, #1
 801b7f8:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 801b7fa:	4b12      	ldr	r3, [pc, #72]	@ (801b844 <vTaskStartScheduler+0x90>)
 801b7fc:	2200      	movs	r2, #0
 801b7fe:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 801b800:	f000 fb8e 	bl	801bf20 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 801b804:	e00f      	b.n	801b826 <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 801b806:	68fb      	ldr	r3, [r7, #12]
 801b808:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b80c:	d10b      	bne.n	801b826 <vTaskStartScheduler+0x72>
	__asm volatile
 801b80e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b812:	f383 8811 	msr	BASEPRI, r3
 801b816:	f3bf 8f6f 	isb	sy
 801b81a:	f3bf 8f4f 	dsb	sy
 801b81e:	607b      	str	r3, [r7, #4]
}
 801b820:	bf00      	nop
 801b822:	bf00      	nop
 801b824:	e7fd      	b.n	801b822 <vTaskStartScheduler+0x6e>
}
 801b826:	bf00      	nop
 801b828:	3710      	adds	r7, #16
 801b82a:	46bd      	mov	sp, r7
 801b82c:	bd80      	pop	{r7, pc}
 801b82e:	bf00      	nop
 801b830:	20000558 	.word	0x20000558
 801b834:	0801df80 	.word	0x0801df80
 801b838:	0801bbcd 	.word	0x0801bbcd
 801b83c:	20000554 	.word	0x20000554
 801b840:	20000540 	.word	0x20000540
 801b844:	20000538 	.word	0x20000538

0801b848 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 801b848:	b480      	push	{r7}
 801b84a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 801b84c:	4b04      	ldr	r3, [pc, #16]	@ (801b860 <vTaskSuspendAll+0x18>)
 801b84e:	681b      	ldr	r3, [r3, #0]
 801b850:	3301      	adds	r3, #1
 801b852:	4a03      	ldr	r2, [pc, #12]	@ (801b860 <vTaskSuspendAll+0x18>)
 801b854:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801b856:	bf00      	nop
 801b858:	46bd      	mov	sp, r7
 801b85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b85e:	4770      	bx	lr
 801b860:	2000055c 	.word	0x2000055c

0801b864 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801b864:	b580      	push	{r7, lr}
 801b866:	b084      	sub	sp, #16
 801b868:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801b86a:	2300      	movs	r3, #0
 801b86c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801b86e:	2300      	movs	r3, #0
 801b870:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801b872:	4b42      	ldr	r3, [pc, #264]	@ (801b97c <xTaskResumeAll+0x118>)
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	2b00      	cmp	r3, #0
 801b878:	d10b      	bne.n	801b892 <xTaskResumeAll+0x2e>
	__asm volatile
 801b87a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b87e:	f383 8811 	msr	BASEPRI, r3
 801b882:	f3bf 8f6f 	isb	sy
 801b886:	f3bf 8f4f 	dsb	sy
 801b88a:	603b      	str	r3, [r7, #0]
}
 801b88c:	bf00      	nop
 801b88e:	bf00      	nop
 801b890:	e7fd      	b.n	801b88e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801b892:	f000 fbe9 	bl	801c068 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801b896:	4b39      	ldr	r3, [pc, #228]	@ (801b97c <xTaskResumeAll+0x118>)
 801b898:	681b      	ldr	r3, [r3, #0]
 801b89a:	3b01      	subs	r3, #1
 801b89c:	4a37      	ldr	r2, [pc, #220]	@ (801b97c <xTaskResumeAll+0x118>)
 801b89e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b8a0:	4b36      	ldr	r3, [pc, #216]	@ (801b97c <xTaskResumeAll+0x118>)
 801b8a2:	681b      	ldr	r3, [r3, #0]
 801b8a4:	2b00      	cmp	r3, #0
 801b8a6:	d161      	bne.n	801b96c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801b8a8:	4b35      	ldr	r3, [pc, #212]	@ (801b980 <xTaskResumeAll+0x11c>)
 801b8aa:	681b      	ldr	r3, [r3, #0]
 801b8ac:	2b00      	cmp	r3, #0
 801b8ae:	d05d      	beq.n	801b96c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b8b0:	e02e      	b.n	801b910 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801b8b2:	4b34      	ldr	r3, [pc, #208]	@ (801b984 <xTaskResumeAll+0x120>)
 801b8b4:	68db      	ldr	r3, [r3, #12]
 801b8b6:	68db      	ldr	r3, [r3, #12]
 801b8b8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	3318      	adds	r3, #24
 801b8be:	4618      	mov	r0, r3
 801b8c0:	f7ff fde4 	bl	801b48c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801b8c4:	68fb      	ldr	r3, [r7, #12]
 801b8c6:	3304      	adds	r3, #4
 801b8c8:	4618      	mov	r0, r3
 801b8ca:	f7ff fddf 	bl	801b48c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 801b8ce:	68fb      	ldr	r3, [r7, #12]
 801b8d0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b8d2:	2201      	movs	r2, #1
 801b8d4:	409a      	lsls	r2, r3
 801b8d6:	4b2c      	ldr	r3, [pc, #176]	@ (801b988 <xTaskResumeAll+0x124>)
 801b8d8:	681b      	ldr	r3, [r3, #0]
 801b8da:	4313      	orrs	r3, r2
 801b8dc:	4a2a      	ldr	r2, [pc, #168]	@ (801b988 <xTaskResumeAll+0x124>)
 801b8de:	6013      	str	r3, [r2, #0]
 801b8e0:	68fb      	ldr	r3, [r7, #12]
 801b8e2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b8e4:	4613      	mov	r3, r2
 801b8e6:	009b      	lsls	r3, r3, #2
 801b8e8:	4413      	add	r3, r2
 801b8ea:	009b      	lsls	r3, r3, #2
 801b8ec:	4a27      	ldr	r2, [pc, #156]	@ (801b98c <xTaskResumeAll+0x128>)
 801b8ee:	441a      	add	r2, r3
 801b8f0:	68fb      	ldr	r3, [r7, #12]
 801b8f2:	3304      	adds	r3, #4
 801b8f4:	4619      	mov	r1, r3
 801b8f6:	4610      	mov	r0, r2
 801b8f8:	f7ff fd6b 	bl	801b3d2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801b8fc:	68fb      	ldr	r3, [r7, #12]
 801b8fe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801b900:	4b23      	ldr	r3, [pc, #140]	@ (801b990 <xTaskResumeAll+0x12c>)
 801b902:	681b      	ldr	r3, [r3, #0]
 801b904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801b906:	429a      	cmp	r2, r3
 801b908:	d302      	bcc.n	801b910 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 801b90a:	4b22      	ldr	r3, [pc, #136]	@ (801b994 <xTaskResumeAll+0x130>)
 801b90c:	2201      	movs	r2, #1
 801b90e:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 801b910:	4b1c      	ldr	r3, [pc, #112]	@ (801b984 <xTaskResumeAll+0x120>)
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	2b00      	cmp	r3, #0
 801b916:	d1cc      	bne.n	801b8b2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 801b918:	68fb      	ldr	r3, [r7, #12]
 801b91a:	2b00      	cmp	r3, #0
 801b91c:	d001      	beq.n	801b922 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 801b91e:	f000 f9eb 	bl	801bcf8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801b922:	4b1d      	ldr	r3, [pc, #116]	@ (801b998 <xTaskResumeAll+0x134>)
 801b924:	681b      	ldr	r3, [r3, #0]
 801b926:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 801b928:	687b      	ldr	r3, [r7, #4]
 801b92a:	2b00      	cmp	r3, #0
 801b92c:	d010      	beq.n	801b950 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 801b92e:	f000 f837 	bl	801b9a0 <xTaskIncrementTick>
 801b932:	4603      	mov	r3, r0
 801b934:	2b00      	cmp	r3, #0
 801b936:	d002      	beq.n	801b93e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 801b938:	4b16      	ldr	r3, [pc, #88]	@ (801b994 <xTaskResumeAll+0x130>)
 801b93a:	2201      	movs	r2, #1
 801b93c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 801b93e:	687b      	ldr	r3, [r7, #4]
 801b940:	3b01      	subs	r3, #1
 801b942:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801b944:	687b      	ldr	r3, [r7, #4]
 801b946:	2b00      	cmp	r3, #0
 801b948:	d1f1      	bne.n	801b92e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 801b94a:	4b13      	ldr	r3, [pc, #76]	@ (801b998 <xTaskResumeAll+0x134>)
 801b94c:	2200      	movs	r2, #0
 801b94e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 801b950:	4b10      	ldr	r3, [pc, #64]	@ (801b994 <xTaskResumeAll+0x130>)
 801b952:	681b      	ldr	r3, [r3, #0]
 801b954:	2b00      	cmp	r3, #0
 801b956:	d009      	beq.n	801b96c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801b958:	2301      	movs	r3, #1
 801b95a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801b95c:	4b0f      	ldr	r3, [pc, #60]	@ (801b99c <xTaskResumeAll+0x138>)
 801b95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801b962:	601a      	str	r2, [r3, #0]
 801b964:	f3bf 8f4f 	dsb	sy
 801b968:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801b96c:	f000 fbae 	bl	801c0cc <vPortExitCritical>

	return xAlreadyYielded;
 801b970:	68bb      	ldr	r3, [r7, #8]
}
 801b972:	4618      	mov	r0, r3
 801b974:	3710      	adds	r7, #16
 801b976:	46bd      	mov	sp, r7
 801b978:	bd80      	pop	{r7, pc}
 801b97a:	bf00      	nop
 801b97c:	2000055c 	.word	0x2000055c
 801b980:	20000534 	.word	0x20000534
 801b984:	200004f4 	.word	0x200004f4
 801b988:	2000053c 	.word	0x2000053c
 801b98c:	20000438 	.word	0x20000438
 801b990:	20000434 	.word	0x20000434
 801b994:	20000548 	.word	0x20000548
 801b998:	20000544 	.word	0x20000544
 801b99c:	e000ed04 	.word	0xe000ed04

0801b9a0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 801b9a0:	b580      	push	{r7, lr}
 801b9a2:	b086      	sub	sp, #24
 801b9a4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 801b9aa:	4b4f      	ldr	r3, [pc, #316]	@ (801bae8 <xTaskIncrementTick+0x148>)
 801b9ac:	681b      	ldr	r3, [r3, #0]
 801b9ae:	2b00      	cmp	r3, #0
 801b9b0:	f040 808f 	bne.w	801bad2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 801b9b4:	4b4d      	ldr	r3, [pc, #308]	@ (801baec <xTaskIncrementTick+0x14c>)
 801b9b6:	681b      	ldr	r3, [r3, #0]
 801b9b8:	3301      	adds	r3, #1
 801b9ba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 801b9bc:	4a4b      	ldr	r2, [pc, #300]	@ (801baec <xTaskIncrementTick+0x14c>)
 801b9be:	693b      	ldr	r3, [r7, #16]
 801b9c0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 801b9c2:	693b      	ldr	r3, [r7, #16]
 801b9c4:	2b00      	cmp	r3, #0
 801b9c6:	d121      	bne.n	801ba0c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 801b9c8:	4b49      	ldr	r3, [pc, #292]	@ (801baf0 <xTaskIncrementTick+0x150>)
 801b9ca:	681b      	ldr	r3, [r3, #0]
 801b9cc:	681b      	ldr	r3, [r3, #0]
 801b9ce:	2b00      	cmp	r3, #0
 801b9d0:	d00b      	beq.n	801b9ea <xTaskIncrementTick+0x4a>
	__asm volatile
 801b9d2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801b9d6:	f383 8811 	msr	BASEPRI, r3
 801b9da:	f3bf 8f6f 	isb	sy
 801b9de:	f3bf 8f4f 	dsb	sy
 801b9e2:	603b      	str	r3, [r7, #0]
}
 801b9e4:	bf00      	nop
 801b9e6:	bf00      	nop
 801b9e8:	e7fd      	b.n	801b9e6 <xTaskIncrementTick+0x46>
 801b9ea:	4b41      	ldr	r3, [pc, #260]	@ (801baf0 <xTaskIncrementTick+0x150>)
 801b9ec:	681b      	ldr	r3, [r3, #0]
 801b9ee:	60fb      	str	r3, [r7, #12]
 801b9f0:	4b40      	ldr	r3, [pc, #256]	@ (801baf4 <xTaskIncrementTick+0x154>)
 801b9f2:	681b      	ldr	r3, [r3, #0]
 801b9f4:	4a3e      	ldr	r2, [pc, #248]	@ (801baf0 <xTaskIncrementTick+0x150>)
 801b9f6:	6013      	str	r3, [r2, #0]
 801b9f8:	4a3e      	ldr	r2, [pc, #248]	@ (801baf4 <xTaskIncrementTick+0x154>)
 801b9fa:	68fb      	ldr	r3, [r7, #12]
 801b9fc:	6013      	str	r3, [r2, #0]
 801b9fe:	4b3e      	ldr	r3, [pc, #248]	@ (801baf8 <xTaskIncrementTick+0x158>)
 801ba00:	681b      	ldr	r3, [r3, #0]
 801ba02:	3301      	adds	r3, #1
 801ba04:	4a3c      	ldr	r2, [pc, #240]	@ (801baf8 <xTaskIncrementTick+0x158>)
 801ba06:	6013      	str	r3, [r2, #0]
 801ba08:	f000 f976 	bl	801bcf8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 801ba0c:	4b3b      	ldr	r3, [pc, #236]	@ (801bafc <xTaskIncrementTick+0x15c>)
 801ba0e:	681b      	ldr	r3, [r3, #0]
 801ba10:	693a      	ldr	r2, [r7, #16]
 801ba12:	429a      	cmp	r2, r3
 801ba14:	d348      	bcc.n	801baa8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801ba16:	4b36      	ldr	r3, [pc, #216]	@ (801baf0 <xTaskIncrementTick+0x150>)
 801ba18:	681b      	ldr	r3, [r3, #0]
 801ba1a:	681b      	ldr	r3, [r3, #0]
 801ba1c:	2b00      	cmp	r3, #0
 801ba1e:	d104      	bne.n	801ba2a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 801ba20:	4b36      	ldr	r3, [pc, #216]	@ (801bafc <xTaskIncrementTick+0x15c>)
 801ba22:	f04f 32ff 	mov.w	r2, #4294967295
 801ba26:	601a      	str	r2, [r3, #0]
					break;
 801ba28:	e03e      	b.n	801baa8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801ba2a:	4b31      	ldr	r3, [pc, #196]	@ (801baf0 <xTaskIncrementTick+0x150>)
 801ba2c:	681b      	ldr	r3, [r3, #0]
 801ba2e:	68db      	ldr	r3, [r3, #12]
 801ba30:	68db      	ldr	r3, [r3, #12]
 801ba32:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801ba34:	68bb      	ldr	r3, [r7, #8]
 801ba36:	685b      	ldr	r3, [r3, #4]
 801ba38:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 801ba3a:	693a      	ldr	r2, [r7, #16]
 801ba3c:	687b      	ldr	r3, [r7, #4]
 801ba3e:	429a      	cmp	r2, r3
 801ba40:	d203      	bcs.n	801ba4a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 801ba42:	4a2e      	ldr	r2, [pc, #184]	@ (801bafc <xTaskIncrementTick+0x15c>)
 801ba44:	687b      	ldr	r3, [r7, #4]
 801ba46:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801ba48:	e02e      	b.n	801baa8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801ba4a:	68bb      	ldr	r3, [r7, #8]
 801ba4c:	3304      	adds	r3, #4
 801ba4e:	4618      	mov	r0, r3
 801ba50:	f7ff fd1c 	bl	801b48c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801ba54:	68bb      	ldr	r3, [r7, #8]
 801ba56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801ba58:	2b00      	cmp	r3, #0
 801ba5a:	d004      	beq.n	801ba66 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801ba5c:	68bb      	ldr	r3, [r7, #8]
 801ba5e:	3318      	adds	r3, #24
 801ba60:	4618      	mov	r0, r3
 801ba62:	f7ff fd13 	bl	801b48c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801ba66:	68bb      	ldr	r3, [r7, #8]
 801ba68:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba6a:	2201      	movs	r2, #1
 801ba6c:	409a      	lsls	r2, r3
 801ba6e:	4b24      	ldr	r3, [pc, #144]	@ (801bb00 <xTaskIncrementTick+0x160>)
 801ba70:	681b      	ldr	r3, [r3, #0]
 801ba72:	4313      	orrs	r3, r2
 801ba74:	4a22      	ldr	r2, [pc, #136]	@ (801bb00 <xTaskIncrementTick+0x160>)
 801ba76:	6013      	str	r3, [r2, #0]
 801ba78:	68bb      	ldr	r3, [r7, #8]
 801ba7a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba7c:	4613      	mov	r3, r2
 801ba7e:	009b      	lsls	r3, r3, #2
 801ba80:	4413      	add	r3, r2
 801ba82:	009b      	lsls	r3, r3, #2
 801ba84:	4a1f      	ldr	r2, [pc, #124]	@ (801bb04 <xTaskIncrementTick+0x164>)
 801ba86:	441a      	add	r2, r3
 801ba88:	68bb      	ldr	r3, [r7, #8]
 801ba8a:	3304      	adds	r3, #4
 801ba8c:	4619      	mov	r1, r3
 801ba8e:	4610      	mov	r0, r2
 801ba90:	f7ff fc9f 	bl	801b3d2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801ba94:	68bb      	ldr	r3, [r7, #8]
 801ba96:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801ba98:	4b1b      	ldr	r3, [pc, #108]	@ (801bb08 <xTaskIncrementTick+0x168>)
 801ba9a:	681b      	ldr	r3, [r3, #0]
 801ba9c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801ba9e:	429a      	cmp	r2, r3
 801baa0:	d3b9      	bcc.n	801ba16 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 801baa2:	2301      	movs	r3, #1
 801baa4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801baa6:	e7b6      	b.n	801ba16 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 801baa8:	4b17      	ldr	r3, [pc, #92]	@ (801bb08 <xTaskIncrementTick+0x168>)
 801baaa:	681b      	ldr	r3, [r3, #0]
 801baac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 801baae:	4915      	ldr	r1, [pc, #84]	@ (801bb04 <xTaskIncrementTick+0x164>)
 801bab0:	4613      	mov	r3, r2
 801bab2:	009b      	lsls	r3, r3, #2
 801bab4:	4413      	add	r3, r2
 801bab6:	009b      	lsls	r3, r3, #2
 801bab8:	440b      	add	r3, r1
 801baba:	681b      	ldr	r3, [r3, #0]
 801babc:	2b01      	cmp	r3, #1
 801babe:	d901      	bls.n	801bac4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 801bac0:	2301      	movs	r3, #1
 801bac2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 801bac4:	4b11      	ldr	r3, [pc, #68]	@ (801bb0c <xTaskIncrementTick+0x16c>)
 801bac6:	681b      	ldr	r3, [r3, #0]
 801bac8:	2b00      	cmp	r3, #0
 801baca:	d007      	beq.n	801badc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 801bacc:	2301      	movs	r3, #1
 801bace:	617b      	str	r3, [r7, #20]
 801bad0:	e004      	b.n	801badc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 801bad2:	4b0f      	ldr	r3, [pc, #60]	@ (801bb10 <xTaskIncrementTick+0x170>)
 801bad4:	681b      	ldr	r3, [r3, #0]
 801bad6:	3301      	adds	r3, #1
 801bad8:	4a0d      	ldr	r2, [pc, #52]	@ (801bb10 <xTaskIncrementTick+0x170>)
 801bada:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 801badc:	697b      	ldr	r3, [r7, #20]
}
 801bade:	4618      	mov	r0, r3
 801bae0:	3718      	adds	r7, #24
 801bae2:	46bd      	mov	sp, r7
 801bae4:	bd80      	pop	{r7, pc}
 801bae6:	bf00      	nop
 801bae8:	2000055c 	.word	0x2000055c
 801baec:	20000538 	.word	0x20000538
 801baf0:	200004ec 	.word	0x200004ec
 801baf4:	200004f0 	.word	0x200004f0
 801baf8:	2000054c 	.word	0x2000054c
 801bafc:	20000554 	.word	0x20000554
 801bb00:	2000053c 	.word	0x2000053c
 801bb04:	20000438 	.word	0x20000438
 801bb08:	20000434 	.word	0x20000434
 801bb0c:	20000548 	.word	0x20000548
 801bb10:	20000544 	.word	0x20000544

0801bb14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 801bb14:	b480      	push	{r7}
 801bb16:	b087      	sub	sp, #28
 801bb18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801bb1a:	4b27      	ldr	r3, [pc, #156]	@ (801bbb8 <vTaskSwitchContext+0xa4>)
 801bb1c:	681b      	ldr	r3, [r3, #0]
 801bb1e:	2b00      	cmp	r3, #0
 801bb20:	d003      	beq.n	801bb2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 801bb22:	4b26      	ldr	r3, [pc, #152]	@ (801bbbc <vTaskSwitchContext+0xa8>)
 801bb24:	2201      	movs	r2, #1
 801bb26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801bb28:	e040      	b.n	801bbac <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 801bb2a:	4b24      	ldr	r3, [pc, #144]	@ (801bbbc <vTaskSwitchContext+0xa8>)
 801bb2c:	2200      	movs	r2, #0
 801bb2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bb30:	4b23      	ldr	r3, [pc, #140]	@ (801bbc0 <vTaskSwitchContext+0xac>)
 801bb32:	681b      	ldr	r3, [r3, #0]
 801bb34:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801bb36:	68fb      	ldr	r3, [r7, #12]
 801bb38:	fab3 f383 	clz	r3, r3
 801bb3c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801bb3e:	7afb      	ldrb	r3, [r7, #11]
 801bb40:	f1c3 031f 	rsb	r3, r3, #31
 801bb44:	617b      	str	r3, [r7, #20]
 801bb46:	491f      	ldr	r1, [pc, #124]	@ (801bbc4 <vTaskSwitchContext+0xb0>)
 801bb48:	697a      	ldr	r2, [r7, #20]
 801bb4a:	4613      	mov	r3, r2
 801bb4c:	009b      	lsls	r3, r3, #2
 801bb4e:	4413      	add	r3, r2
 801bb50:	009b      	lsls	r3, r3, #2
 801bb52:	440b      	add	r3, r1
 801bb54:	681b      	ldr	r3, [r3, #0]
 801bb56:	2b00      	cmp	r3, #0
 801bb58:	d10b      	bne.n	801bb72 <vTaskSwitchContext+0x5e>
	__asm volatile
 801bb5a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bb5e:	f383 8811 	msr	BASEPRI, r3
 801bb62:	f3bf 8f6f 	isb	sy
 801bb66:	f3bf 8f4f 	dsb	sy
 801bb6a:	607b      	str	r3, [r7, #4]
}
 801bb6c:	bf00      	nop
 801bb6e:	bf00      	nop
 801bb70:	e7fd      	b.n	801bb6e <vTaskSwitchContext+0x5a>
 801bb72:	697a      	ldr	r2, [r7, #20]
 801bb74:	4613      	mov	r3, r2
 801bb76:	009b      	lsls	r3, r3, #2
 801bb78:	4413      	add	r3, r2
 801bb7a:	009b      	lsls	r3, r3, #2
 801bb7c:	4a11      	ldr	r2, [pc, #68]	@ (801bbc4 <vTaskSwitchContext+0xb0>)
 801bb7e:	4413      	add	r3, r2
 801bb80:	613b      	str	r3, [r7, #16]
 801bb82:	693b      	ldr	r3, [r7, #16]
 801bb84:	685b      	ldr	r3, [r3, #4]
 801bb86:	685a      	ldr	r2, [r3, #4]
 801bb88:	693b      	ldr	r3, [r7, #16]
 801bb8a:	605a      	str	r2, [r3, #4]
 801bb8c:	693b      	ldr	r3, [r7, #16]
 801bb8e:	685a      	ldr	r2, [r3, #4]
 801bb90:	693b      	ldr	r3, [r7, #16]
 801bb92:	3308      	adds	r3, #8
 801bb94:	429a      	cmp	r2, r3
 801bb96:	d104      	bne.n	801bba2 <vTaskSwitchContext+0x8e>
 801bb98:	693b      	ldr	r3, [r7, #16]
 801bb9a:	685b      	ldr	r3, [r3, #4]
 801bb9c:	685a      	ldr	r2, [r3, #4]
 801bb9e:	693b      	ldr	r3, [r7, #16]
 801bba0:	605a      	str	r2, [r3, #4]
 801bba2:	693b      	ldr	r3, [r7, #16]
 801bba4:	685b      	ldr	r3, [r3, #4]
 801bba6:	68db      	ldr	r3, [r3, #12]
 801bba8:	4a07      	ldr	r2, [pc, #28]	@ (801bbc8 <vTaskSwitchContext+0xb4>)
 801bbaa:	6013      	str	r3, [r2, #0]
}
 801bbac:	bf00      	nop
 801bbae:	371c      	adds	r7, #28
 801bbb0:	46bd      	mov	sp, r7
 801bbb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bbb6:	4770      	bx	lr
 801bbb8:	2000055c 	.word	0x2000055c
 801bbbc:	20000548 	.word	0x20000548
 801bbc0:	2000053c 	.word	0x2000053c
 801bbc4:	20000438 	.word	0x20000438
 801bbc8:	20000434 	.word	0x20000434

0801bbcc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 801bbcc:	b580      	push	{r7, lr}
 801bbce:	b082      	sub	sp, #8
 801bbd0:	af00      	add	r7, sp, #0
 801bbd2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 801bbd4:	f000 f852 	bl	801bc7c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801bbd8:	4b06      	ldr	r3, [pc, #24]	@ (801bbf4 <prvIdleTask+0x28>)
 801bbda:	681b      	ldr	r3, [r3, #0]
 801bbdc:	2b01      	cmp	r3, #1
 801bbde:	d9f9      	bls.n	801bbd4 <prvIdleTask+0x8>
			{
				taskYIELD();
 801bbe0:	4b05      	ldr	r3, [pc, #20]	@ (801bbf8 <prvIdleTask+0x2c>)
 801bbe2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801bbe6:	601a      	str	r2, [r3, #0]
 801bbe8:	f3bf 8f4f 	dsb	sy
 801bbec:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 801bbf0:	e7f0      	b.n	801bbd4 <prvIdleTask+0x8>
 801bbf2:	bf00      	nop
 801bbf4:	20000438 	.word	0x20000438
 801bbf8:	e000ed04 	.word	0xe000ed04

0801bbfc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 801bbfc:	b580      	push	{r7, lr}
 801bbfe:	b082      	sub	sp, #8
 801bc00:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bc02:	2300      	movs	r3, #0
 801bc04:	607b      	str	r3, [r7, #4]
 801bc06:	e00c      	b.n	801bc22 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801bc08:	687a      	ldr	r2, [r7, #4]
 801bc0a:	4613      	mov	r3, r2
 801bc0c:	009b      	lsls	r3, r3, #2
 801bc0e:	4413      	add	r3, r2
 801bc10:	009b      	lsls	r3, r3, #2
 801bc12:	4a12      	ldr	r2, [pc, #72]	@ (801bc5c <prvInitialiseTaskLists+0x60>)
 801bc14:	4413      	add	r3, r2
 801bc16:	4618      	mov	r0, r3
 801bc18:	f7ff fbae 	bl	801b378 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 801bc1c:	687b      	ldr	r3, [r7, #4]
 801bc1e:	3301      	adds	r3, #1
 801bc20:	607b      	str	r3, [r7, #4]
 801bc22:	687b      	ldr	r3, [r7, #4]
 801bc24:	2b06      	cmp	r3, #6
 801bc26:	d9ef      	bls.n	801bc08 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801bc28:	480d      	ldr	r0, [pc, #52]	@ (801bc60 <prvInitialiseTaskLists+0x64>)
 801bc2a:	f7ff fba5 	bl	801b378 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 801bc2e:	480d      	ldr	r0, [pc, #52]	@ (801bc64 <prvInitialiseTaskLists+0x68>)
 801bc30:	f7ff fba2 	bl	801b378 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 801bc34:	480c      	ldr	r0, [pc, #48]	@ (801bc68 <prvInitialiseTaskLists+0x6c>)
 801bc36:	f7ff fb9f 	bl	801b378 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801bc3a:	480c      	ldr	r0, [pc, #48]	@ (801bc6c <prvInitialiseTaskLists+0x70>)
 801bc3c:	f7ff fb9c 	bl	801b378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 801bc40:	480b      	ldr	r0, [pc, #44]	@ (801bc70 <prvInitialiseTaskLists+0x74>)
 801bc42:	f7ff fb99 	bl	801b378 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801bc46:	4b0b      	ldr	r3, [pc, #44]	@ (801bc74 <prvInitialiseTaskLists+0x78>)
 801bc48:	4a05      	ldr	r2, [pc, #20]	@ (801bc60 <prvInitialiseTaskLists+0x64>)
 801bc4a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 801bc4c:	4b0a      	ldr	r3, [pc, #40]	@ (801bc78 <prvInitialiseTaskLists+0x7c>)
 801bc4e:	4a05      	ldr	r2, [pc, #20]	@ (801bc64 <prvInitialiseTaskLists+0x68>)
 801bc50:	601a      	str	r2, [r3, #0]
}
 801bc52:	bf00      	nop
 801bc54:	3708      	adds	r7, #8
 801bc56:	46bd      	mov	sp, r7
 801bc58:	bd80      	pop	{r7, pc}
 801bc5a:	bf00      	nop
 801bc5c:	20000438 	.word	0x20000438
 801bc60:	200004c4 	.word	0x200004c4
 801bc64:	200004d8 	.word	0x200004d8
 801bc68:	200004f4 	.word	0x200004f4
 801bc6c:	20000508 	.word	0x20000508
 801bc70:	20000520 	.word	0x20000520
 801bc74:	200004ec 	.word	0x200004ec
 801bc78:	200004f0 	.word	0x200004f0

0801bc7c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 801bc7c:	b580      	push	{r7, lr}
 801bc7e:	b082      	sub	sp, #8
 801bc80:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bc82:	e019      	b.n	801bcb8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 801bc84:	f000 f9f0 	bl	801c068 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bc88:	4b10      	ldr	r3, [pc, #64]	@ (801bccc <prvCheckTasksWaitingTermination+0x50>)
 801bc8a:	68db      	ldr	r3, [r3, #12]
 801bc8c:	68db      	ldr	r3, [r3, #12]
 801bc8e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 801bc90:	687b      	ldr	r3, [r7, #4]
 801bc92:	3304      	adds	r3, #4
 801bc94:	4618      	mov	r0, r3
 801bc96:	f7ff fbf9 	bl	801b48c <uxListRemove>
				--uxCurrentNumberOfTasks;
 801bc9a:	4b0d      	ldr	r3, [pc, #52]	@ (801bcd0 <prvCheckTasksWaitingTermination+0x54>)
 801bc9c:	681b      	ldr	r3, [r3, #0]
 801bc9e:	3b01      	subs	r3, #1
 801bca0:	4a0b      	ldr	r2, [pc, #44]	@ (801bcd0 <prvCheckTasksWaitingTermination+0x54>)
 801bca2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 801bca4:	4b0b      	ldr	r3, [pc, #44]	@ (801bcd4 <prvCheckTasksWaitingTermination+0x58>)
 801bca6:	681b      	ldr	r3, [r3, #0]
 801bca8:	3b01      	subs	r3, #1
 801bcaa:	4a0a      	ldr	r2, [pc, #40]	@ (801bcd4 <prvCheckTasksWaitingTermination+0x58>)
 801bcac:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 801bcae:	f000 fa0d 	bl	801c0cc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 801bcb2:	6878      	ldr	r0, [r7, #4]
 801bcb4:	f000 f810 	bl	801bcd8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801bcb8:	4b06      	ldr	r3, [pc, #24]	@ (801bcd4 <prvCheckTasksWaitingTermination+0x58>)
 801bcba:	681b      	ldr	r3, [r3, #0]
 801bcbc:	2b00      	cmp	r3, #0
 801bcbe:	d1e1      	bne.n	801bc84 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 801bcc0:	bf00      	nop
 801bcc2:	bf00      	nop
 801bcc4:	3708      	adds	r7, #8
 801bcc6:	46bd      	mov	sp, r7
 801bcc8:	bd80      	pop	{r7, pc}
 801bcca:	bf00      	nop
 801bccc:	20000508 	.word	0x20000508
 801bcd0:	20000534 	.word	0x20000534
 801bcd4:	2000051c 	.word	0x2000051c

0801bcd8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801bcd8:	b580      	push	{r7, lr}
 801bcda:	b082      	sub	sp, #8
 801bcdc:	af00      	add	r7, sp, #0
 801bcde:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 801bce0:	687b      	ldr	r3, [r7, #4]
 801bce2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801bce4:	4618      	mov	r0, r3
 801bce6:	f000 fab1 	bl	801c24c <vPortFree>
			vPortFree( pxTCB );
 801bcea:	6878      	ldr	r0, [r7, #4]
 801bcec:	f000 faae 	bl	801c24c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 801bcf0:	bf00      	nop
 801bcf2:	3708      	adds	r7, #8
 801bcf4:	46bd      	mov	sp, r7
 801bcf6:	bd80      	pop	{r7, pc}

0801bcf8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 801bcf8:	b480      	push	{r7}
 801bcfa:	b083      	sub	sp, #12
 801bcfc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801bcfe:	4b0c      	ldr	r3, [pc, #48]	@ (801bd30 <prvResetNextTaskUnblockTime+0x38>)
 801bd00:	681b      	ldr	r3, [r3, #0]
 801bd02:	681b      	ldr	r3, [r3, #0]
 801bd04:	2b00      	cmp	r3, #0
 801bd06:	d104      	bne.n	801bd12 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 801bd08:	4b0a      	ldr	r3, [pc, #40]	@ (801bd34 <prvResetNextTaskUnblockTime+0x3c>)
 801bd0a:	f04f 32ff 	mov.w	r2, #4294967295
 801bd0e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 801bd10:	e008      	b.n	801bd24 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 801bd12:	4b07      	ldr	r3, [pc, #28]	@ (801bd30 <prvResetNextTaskUnblockTime+0x38>)
 801bd14:	681b      	ldr	r3, [r3, #0]
 801bd16:	68db      	ldr	r3, [r3, #12]
 801bd18:	68db      	ldr	r3, [r3, #12]
 801bd1a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 801bd1c:	687b      	ldr	r3, [r7, #4]
 801bd1e:	685b      	ldr	r3, [r3, #4]
 801bd20:	4a04      	ldr	r2, [pc, #16]	@ (801bd34 <prvResetNextTaskUnblockTime+0x3c>)
 801bd22:	6013      	str	r3, [r2, #0]
}
 801bd24:	bf00      	nop
 801bd26:	370c      	adds	r7, #12
 801bd28:	46bd      	mov	sp, r7
 801bd2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bd2e:	4770      	bx	lr
 801bd30:	200004ec 	.word	0x200004ec
 801bd34:	20000554 	.word	0x20000554

0801bd38 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801bd38:	b580      	push	{r7, lr}
 801bd3a:	b084      	sub	sp, #16
 801bd3c:	af00      	add	r7, sp, #0
 801bd3e:	6078      	str	r0, [r7, #4]
 801bd40:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801bd42:	4b29      	ldr	r3, [pc, #164]	@ (801bde8 <prvAddCurrentTaskToDelayedList+0xb0>)
 801bd44:	681b      	ldr	r3, [r3, #0]
 801bd46:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801bd48:	4b28      	ldr	r3, [pc, #160]	@ (801bdec <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd4a:	681b      	ldr	r3, [r3, #0]
 801bd4c:	3304      	adds	r3, #4
 801bd4e:	4618      	mov	r0, r3
 801bd50:	f7ff fb9c 	bl	801b48c <uxListRemove>
 801bd54:	4603      	mov	r3, r0
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d10b      	bne.n	801bd72 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 801bd5a:	4b24      	ldr	r3, [pc, #144]	@ (801bdec <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd5c:	681b      	ldr	r3, [r3, #0]
 801bd5e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 801bd60:	2201      	movs	r2, #1
 801bd62:	fa02 f303 	lsl.w	r3, r2, r3
 801bd66:	43da      	mvns	r2, r3
 801bd68:	4b21      	ldr	r3, [pc, #132]	@ (801bdf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bd6a:	681b      	ldr	r3, [r3, #0]
 801bd6c:	4013      	ands	r3, r2
 801bd6e:	4a20      	ldr	r2, [pc, #128]	@ (801bdf0 <prvAddCurrentTaskToDelayedList+0xb8>)
 801bd70:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 801bd72:	687b      	ldr	r3, [r7, #4]
 801bd74:	f1b3 3fff 	cmp.w	r3, #4294967295
 801bd78:	d10a      	bne.n	801bd90 <prvAddCurrentTaskToDelayedList+0x58>
 801bd7a:	683b      	ldr	r3, [r7, #0]
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d007      	beq.n	801bd90 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bd80:	4b1a      	ldr	r3, [pc, #104]	@ (801bdec <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd82:	681b      	ldr	r3, [r3, #0]
 801bd84:	3304      	adds	r3, #4
 801bd86:	4619      	mov	r1, r3
 801bd88:	481a      	ldr	r0, [pc, #104]	@ (801bdf4 <prvAddCurrentTaskToDelayedList+0xbc>)
 801bd8a:	f7ff fb22 	bl	801b3d2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 801bd8e:	e026      	b.n	801bdde <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 801bd90:	68fa      	ldr	r2, [r7, #12]
 801bd92:	687b      	ldr	r3, [r7, #4]
 801bd94:	4413      	add	r3, r2
 801bd96:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 801bd98:	4b14      	ldr	r3, [pc, #80]	@ (801bdec <prvAddCurrentTaskToDelayedList+0xb4>)
 801bd9a:	681b      	ldr	r3, [r3, #0]
 801bd9c:	68ba      	ldr	r2, [r7, #8]
 801bd9e:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 801bda0:	68ba      	ldr	r2, [r7, #8]
 801bda2:	68fb      	ldr	r3, [r7, #12]
 801bda4:	429a      	cmp	r2, r3
 801bda6:	d209      	bcs.n	801bdbc <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bda8:	4b13      	ldr	r3, [pc, #76]	@ (801bdf8 <prvAddCurrentTaskToDelayedList+0xc0>)
 801bdaa:	681a      	ldr	r2, [r3, #0]
 801bdac:	4b0f      	ldr	r3, [pc, #60]	@ (801bdec <prvAddCurrentTaskToDelayedList+0xb4>)
 801bdae:	681b      	ldr	r3, [r3, #0]
 801bdb0:	3304      	adds	r3, #4
 801bdb2:	4619      	mov	r1, r3
 801bdb4:	4610      	mov	r0, r2
 801bdb6:	f7ff fb30 	bl	801b41a <vListInsert>
}
 801bdba:	e010      	b.n	801bdde <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 801bdbc:	4b0f      	ldr	r3, [pc, #60]	@ (801bdfc <prvAddCurrentTaskToDelayedList+0xc4>)
 801bdbe:	681a      	ldr	r2, [r3, #0]
 801bdc0:	4b0a      	ldr	r3, [pc, #40]	@ (801bdec <prvAddCurrentTaskToDelayedList+0xb4>)
 801bdc2:	681b      	ldr	r3, [r3, #0]
 801bdc4:	3304      	adds	r3, #4
 801bdc6:	4619      	mov	r1, r3
 801bdc8:	4610      	mov	r0, r2
 801bdca:	f7ff fb26 	bl	801b41a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 801bdce:	4b0c      	ldr	r3, [pc, #48]	@ (801be00 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bdd0:	681b      	ldr	r3, [r3, #0]
 801bdd2:	68ba      	ldr	r2, [r7, #8]
 801bdd4:	429a      	cmp	r2, r3
 801bdd6:	d202      	bcs.n	801bdde <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801bdd8:	4a09      	ldr	r2, [pc, #36]	@ (801be00 <prvAddCurrentTaskToDelayedList+0xc8>)
 801bdda:	68bb      	ldr	r3, [r7, #8]
 801bddc:	6013      	str	r3, [r2, #0]
}
 801bdde:	bf00      	nop
 801bde0:	3710      	adds	r7, #16
 801bde2:	46bd      	mov	sp, r7
 801bde4:	bd80      	pop	{r7, pc}
 801bde6:	bf00      	nop
 801bde8:	20000538 	.word	0x20000538
 801bdec:	20000434 	.word	0x20000434
 801bdf0:	2000053c 	.word	0x2000053c
 801bdf4:	20000520 	.word	0x20000520
 801bdf8:	200004f0 	.word	0x200004f0
 801bdfc:	200004ec 	.word	0x200004ec
 801be00:	20000554 	.word	0x20000554

0801be04 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801be04:	b480      	push	{r7}
 801be06:	b085      	sub	sp, #20
 801be08:	af00      	add	r7, sp, #0
 801be0a:	60f8      	str	r0, [r7, #12]
 801be0c:	60b9      	str	r1, [r7, #8]
 801be0e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 801be10:	68fb      	ldr	r3, [r7, #12]
 801be12:	3b04      	subs	r3, #4
 801be14:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801be16:	68fb      	ldr	r3, [r7, #12]
 801be18:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 801be1c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801be1e:	68fb      	ldr	r3, [r7, #12]
 801be20:	3b04      	subs	r3, #4
 801be22:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801be24:	68bb      	ldr	r3, [r7, #8]
 801be26:	f023 0201 	bic.w	r2, r3, #1
 801be2a:	68fb      	ldr	r3, [r7, #12]
 801be2c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 801be2e:	68fb      	ldr	r3, [r7, #12]
 801be30:	3b04      	subs	r3, #4
 801be32:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801be34:	4a0c      	ldr	r2, [pc, #48]	@ (801be68 <pxPortInitialiseStack+0x64>)
 801be36:	68fb      	ldr	r3, [r7, #12]
 801be38:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801be3a:	68fb      	ldr	r3, [r7, #12]
 801be3c:	3b14      	subs	r3, #20
 801be3e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 801be40:	687a      	ldr	r2, [r7, #4]
 801be42:	68fb      	ldr	r3, [r7, #12]
 801be44:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801be46:	68fb      	ldr	r3, [r7, #12]
 801be48:	3b04      	subs	r3, #4
 801be4a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 801be4c:	68fb      	ldr	r3, [r7, #12]
 801be4e:	f06f 0202 	mvn.w	r2, #2
 801be52:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801be54:	68fb      	ldr	r3, [r7, #12]
 801be56:	3b20      	subs	r3, #32
 801be58:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 801be5a:	68fb      	ldr	r3, [r7, #12]
}
 801be5c:	4618      	mov	r0, r3
 801be5e:	3714      	adds	r7, #20
 801be60:	46bd      	mov	sp, r7
 801be62:	f85d 7b04 	ldr.w	r7, [sp], #4
 801be66:	4770      	bx	lr
 801be68:	0801be6d 	.word	0x0801be6d

0801be6c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 801be6c:	b480      	push	{r7}
 801be6e:	b085      	sub	sp, #20
 801be70:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 801be72:	2300      	movs	r3, #0
 801be74:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 801be76:	4b13      	ldr	r3, [pc, #76]	@ (801bec4 <prvTaskExitError+0x58>)
 801be78:	681b      	ldr	r3, [r3, #0]
 801be7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801be7e:	d00b      	beq.n	801be98 <prvTaskExitError+0x2c>
	__asm volatile
 801be80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be84:	f383 8811 	msr	BASEPRI, r3
 801be88:	f3bf 8f6f 	isb	sy
 801be8c:	f3bf 8f4f 	dsb	sy
 801be90:	60fb      	str	r3, [r7, #12]
}
 801be92:	bf00      	nop
 801be94:	bf00      	nop
 801be96:	e7fd      	b.n	801be94 <prvTaskExitError+0x28>
	__asm volatile
 801be98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801be9c:	f383 8811 	msr	BASEPRI, r3
 801bea0:	f3bf 8f6f 	isb	sy
 801bea4:	f3bf 8f4f 	dsb	sy
 801bea8:	60bb      	str	r3, [r7, #8]
}
 801beaa:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 801beac:	bf00      	nop
 801beae:	687b      	ldr	r3, [r7, #4]
 801beb0:	2b00      	cmp	r3, #0
 801beb2:	d0fc      	beq.n	801beae <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 801beb4:	bf00      	nop
 801beb6:	bf00      	nop
 801beb8:	3714      	adds	r7, #20
 801beba:	46bd      	mov	sp, r7
 801bebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bec0:	4770      	bx	lr
 801bec2:	bf00      	nop
 801bec4:	2000002c 	.word	0x2000002c
	...

0801bed0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 801bed0:	4b07      	ldr	r3, [pc, #28]	@ (801bef0 <pxCurrentTCBConst2>)
 801bed2:	6819      	ldr	r1, [r3, #0]
 801bed4:	6808      	ldr	r0, [r1, #0]
 801bed6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801beda:	f380 8809 	msr	PSP, r0
 801bede:	f3bf 8f6f 	isb	sy
 801bee2:	f04f 0000 	mov.w	r0, #0
 801bee6:	f380 8811 	msr	BASEPRI, r0
 801beea:	4770      	bx	lr
 801beec:	f3af 8000 	nop.w

0801bef0 <pxCurrentTCBConst2>:
 801bef0:	20000434 	.word	0x20000434
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 801bef4:	bf00      	nop
 801bef6:	bf00      	nop

0801bef8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 801bef8:	4808      	ldr	r0, [pc, #32]	@ (801bf1c <prvPortStartFirstTask+0x24>)
 801befa:	6800      	ldr	r0, [r0, #0]
 801befc:	6800      	ldr	r0, [r0, #0]
 801befe:	f380 8808 	msr	MSP, r0
 801bf02:	f04f 0000 	mov.w	r0, #0
 801bf06:	f380 8814 	msr	CONTROL, r0
 801bf0a:	b662      	cpsie	i
 801bf0c:	b661      	cpsie	f
 801bf0e:	f3bf 8f4f 	dsb	sy
 801bf12:	f3bf 8f6f 	isb	sy
 801bf16:	df00      	svc	0
 801bf18:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801bf1a:	bf00      	nop
 801bf1c:	e000ed08 	.word	0xe000ed08

0801bf20 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b086      	sub	sp, #24
 801bf24:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 801bf26:	4b47      	ldr	r3, [pc, #284]	@ (801c044 <xPortStartScheduler+0x124>)
 801bf28:	681b      	ldr	r3, [r3, #0]
 801bf2a:	4a47      	ldr	r2, [pc, #284]	@ (801c048 <xPortStartScheduler+0x128>)
 801bf2c:	4293      	cmp	r3, r2
 801bf2e:	d10b      	bne.n	801bf48 <xPortStartScheduler+0x28>
	__asm volatile
 801bf30:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf34:	f383 8811 	msr	BASEPRI, r3
 801bf38:	f3bf 8f6f 	isb	sy
 801bf3c:	f3bf 8f4f 	dsb	sy
 801bf40:	613b      	str	r3, [r7, #16]
}
 801bf42:	bf00      	nop
 801bf44:	bf00      	nop
 801bf46:	e7fd      	b.n	801bf44 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 801bf48:	4b3e      	ldr	r3, [pc, #248]	@ (801c044 <xPortStartScheduler+0x124>)
 801bf4a:	681b      	ldr	r3, [r3, #0]
 801bf4c:	4a3f      	ldr	r2, [pc, #252]	@ (801c04c <xPortStartScheduler+0x12c>)
 801bf4e:	4293      	cmp	r3, r2
 801bf50:	d10b      	bne.n	801bf6a <xPortStartScheduler+0x4a>
	__asm volatile
 801bf52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bf56:	f383 8811 	msr	BASEPRI, r3
 801bf5a:	f3bf 8f6f 	isb	sy
 801bf5e:	f3bf 8f4f 	dsb	sy
 801bf62:	60fb      	str	r3, [r7, #12]
}
 801bf64:	bf00      	nop
 801bf66:	bf00      	nop
 801bf68:	e7fd      	b.n	801bf66 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 801bf6a:	4b39      	ldr	r3, [pc, #228]	@ (801c050 <xPortStartScheduler+0x130>)
 801bf6c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801bf6e:	697b      	ldr	r3, [r7, #20]
 801bf70:	781b      	ldrb	r3, [r3, #0]
 801bf72:	b2db      	uxtb	r3, r3
 801bf74:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 801bf76:	697b      	ldr	r3, [r7, #20]
 801bf78:	22ff      	movs	r2, #255	@ 0xff
 801bf7a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 801bf7c:	697b      	ldr	r3, [r7, #20]
 801bf7e:	781b      	ldrb	r3, [r3, #0]
 801bf80:	b2db      	uxtb	r3, r3
 801bf82:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 801bf84:	78fb      	ldrb	r3, [r7, #3]
 801bf86:	b2db      	uxtb	r3, r3
 801bf88:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 801bf8c:	b2da      	uxtb	r2, r3
 801bf8e:	4b31      	ldr	r3, [pc, #196]	@ (801c054 <xPortStartScheduler+0x134>)
 801bf90:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801bf92:	4b31      	ldr	r3, [pc, #196]	@ (801c058 <xPortStartScheduler+0x138>)
 801bf94:	2207      	movs	r2, #7
 801bf96:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bf98:	e009      	b.n	801bfae <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 801bf9a:	4b2f      	ldr	r3, [pc, #188]	@ (801c058 <xPortStartScheduler+0x138>)
 801bf9c:	681b      	ldr	r3, [r3, #0]
 801bf9e:	3b01      	subs	r3, #1
 801bfa0:	4a2d      	ldr	r2, [pc, #180]	@ (801c058 <xPortStartScheduler+0x138>)
 801bfa2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 801bfa4:	78fb      	ldrb	r3, [r7, #3]
 801bfa6:	b2db      	uxtb	r3, r3
 801bfa8:	005b      	lsls	r3, r3, #1
 801bfaa:	b2db      	uxtb	r3, r3
 801bfac:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 801bfae:	78fb      	ldrb	r3, [r7, #3]
 801bfb0:	b2db      	uxtb	r3, r3
 801bfb2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801bfb6:	2b80      	cmp	r3, #128	@ 0x80
 801bfb8:	d0ef      	beq.n	801bf9a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 801bfba:	4b27      	ldr	r3, [pc, #156]	@ (801c058 <xPortStartScheduler+0x138>)
 801bfbc:	681b      	ldr	r3, [r3, #0]
 801bfbe:	f1c3 0307 	rsb	r3, r3, #7
 801bfc2:	2b04      	cmp	r3, #4
 801bfc4:	d00b      	beq.n	801bfde <xPortStartScheduler+0xbe>
	__asm volatile
 801bfc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801bfca:	f383 8811 	msr	BASEPRI, r3
 801bfce:	f3bf 8f6f 	isb	sy
 801bfd2:	f3bf 8f4f 	dsb	sy
 801bfd6:	60bb      	str	r3, [r7, #8]
}
 801bfd8:	bf00      	nop
 801bfda:	bf00      	nop
 801bfdc:	e7fd      	b.n	801bfda <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 801bfde:	4b1e      	ldr	r3, [pc, #120]	@ (801c058 <xPortStartScheduler+0x138>)
 801bfe0:	681b      	ldr	r3, [r3, #0]
 801bfe2:	021b      	lsls	r3, r3, #8
 801bfe4:	4a1c      	ldr	r2, [pc, #112]	@ (801c058 <xPortStartScheduler+0x138>)
 801bfe6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 801bfe8:	4b1b      	ldr	r3, [pc, #108]	@ (801c058 <xPortStartScheduler+0x138>)
 801bfea:	681b      	ldr	r3, [r3, #0]
 801bfec:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 801bff0:	4a19      	ldr	r2, [pc, #100]	@ (801c058 <xPortStartScheduler+0x138>)
 801bff2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 801bff4:	687b      	ldr	r3, [r7, #4]
 801bff6:	b2da      	uxtb	r2, r3
 801bff8:	697b      	ldr	r3, [r7, #20]
 801bffa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 801bffc:	4b17      	ldr	r3, [pc, #92]	@ (801c05c <xPortStartScheduler+0x13c>)
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	4a16      	ldr	r2, [pc, #88]	@ (801c05c <xPortStartScheduler+0x13c>)
 801c002:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 801c006:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 801c008:	4b14      	ldr	r3, [pc, #80]	@ (801c05c <xPortStartScheduler+0x13c>)
 801c00a:	681b      	ldr	r3, [r3, #0]
 801c00c:	4a13      	ldr	r2, [pc, #76]	@ (801c05c <xPortStartScheduler+0x13c>)
 801c00e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 801c012:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 801c014:	f000 f8da 	bl	801c1cc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 801c018:	4b11      	ldr	r3, [pc, #68]	@ (801c060 <xPortStartScheduler+0x140>)
 801c01a:	2200      	movs	r2, #0
 801c01c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801c01e:	f000 f8f9 	bl	801c214 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 801c022:	4b10      	ldr	r3, [pc, #64]	@ (801c064 <xPortStartScheduler+0x144>)
 801c024:	681b      	ldr	r3, [r3, #0]
 801c026:	4a0f      	ldr	r2, [pc, #60]	@ (801c064 <xPortStartScheduler+0x144>)
 801c028:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801c02c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801c02e:	f7ff ff63 	bl	801bef8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 801c032:	f7ff fd6f 	bl	801bb14 <vTaskSwitchContext>
	prvTaskExitError();
 801c036:	f7ff ff19 	bl	801be6c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801c03a:	2300      	movs	r3, #0
}
 801c03c:	4618      	mov	r0, r3
 801c03e:	3718      	adds	r7, #24
 801c040:	46bd      	mov	sp, r7
 801c042:	bd80      	pop	{r7, pc}
 801c044:	e000ed00 	.word	0xe000ed00
 801c048:	410fc271 	.word	0x410fc271
 801c04c:	410fc270 	.word	0x410fc270
 801c050:	e000e400 	.word	0xe000e400
 801c054:	20000560 	.word	0x20000560
 801c058:	20000564 	.word	0x20000564
 801c05c:	e000ed20 	.word	0xe000ed20
 801c060:	2000002c 	.word	0x2000002c
 801c064:	e000ef34 	.word	0xe000ef34

0801c068 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801c068:	b480      	push	{r7}
 801c06a:	b083      	sub	sp, #12
 801c06c:	af00      	add	r7, sp, #0
	__asm volatile
 801c06e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c072:	f383 8811 	msr	BASEPRI, r3
 801c076:	f3bf 8f6f 	isb	sy
 801c07a:	f3bf 8f4f 	dsb	sy
 801c07e:	607b      	str	r3, [r7, #4]
}
 801c080:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801c082:	4b10      	ldr	r3, [pc, #64]	@ (801c0c4 <vPortEnterCritical+0x5c>)
 801c084:	681b      	ldr	r3, [r3, #0]
 801c086:	3301      	adds	r3, #1
 801c088:	4a0e      	ldr	r2, [pc, #56]	@ (801c0c4 <vPortEnterCritical+0x5c>)
 801c08a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801c08c:	4b0d      	ldr	r3, [pc, #52]	@ (801c0c4 <vPortEnterCritical+0x5c>)
 801c08e:	681b      	ldr	r3, [r3, #0]
 801c090:	2b01      	cmp	r3, #1
 801c092:	d110      	bne.n	801c0b6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801c094:	4b0c      	ldr	r3, [pc, #48]	@ (801c0c8 <vPortEnterCritical+0x60>)
 801c096:	681b      	ldr	r3, [r3, #0]
 801c098:	b2db      	uxtb	r3, r3
 801c09a:	2b00      	cmp	r3, #0
 801c09c:	d00b      	beq.n	801c0b6 <vPortEnterCritical+0x4e>
	__asm volatile
 801c09e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c0a2:	f383 8811 	msr	BASEPRI, r3
 801c0a6:	f3bf 8f6f 	isb	sy
 801c0aa:	f3bf 8f4f 	dsb	sy
 801c0ae:	603b      	str	r3, [r7, #0]
}
 801c0b0:	bf00      	nop
 801c0b2:	bf00      	nop
 801c0b4:	e7fd      	b.n	801c0b2 <vPortEnterCritical+0x4a>
	}
}
 801c0b6:	bf00      	nop
 801c0b8:	370c      	adds	r7, #12
 801c0ba:	46bd      	mov	sp, r7
 801c0bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c0c0:	4770      	bx	lr
 801c0c2:	bf00      	nop
 801c0c4:	2000002c 	.word	0x2000002c
 801c0c8:	e000ed04 	.word	0xe000ed04

0801c0cc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 801c0cc:	b480      	push	{r7}
 801c0ce:	b083      	sub	sp, #12
 801c0d0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 801c0d2:	4b12      	ldr	r3, [pc, #72]	@ (801c11c <vPortExitCritical+0x50>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	2b00      	cmp	r3, #0
 801c0d8:	d10b      	bne.n	801c0f2 <vPortExitCritical+0x26>
	__asm volatile
 801c0da:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c0de:	f383 8811 	msr	BASEPRI, r3
 801c0e2:	f3bf 8f6f 	isb	sy
 801c0e6:	f3bf 8f4f 	dsb	sy
 801c0ea:	607b      	str	r3, [r7, #4]
}
 801c0ec:	bf00      	nop
 801c0ee:	bf00      	nop
 801c0f0:	e7fd      	b.n	801c0ee <vPortExitCritical+0x22>
	uxCriticalNesting--;
 801c0f2:	4b0a      	ldr	r3, [pc, #40]	@ (801c11c <vPortExitCritical+0x50>)
 801c0f4:	681b      	ldr	r3, [r3, #0]
 801c0f6:	3b01      	subs	r3, #1
 801c0f8:	4a08      	ldr	r2, [pc, #32]	@ (801c11c <vPortExitCritical+0x50>)
 801c0fa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 801c0fc:	4b07      	ldr	r3, [pc, #28]	@ (801c11c <vPortExitCritical+0x50>)
 801c0fe:	681b      	ldr	r3, [r3, #0]
 801c100:	2b00      	cmp	r3, #0
 801c102:	d105      	bne.n	801c110 <vPortExitCritical+0x44>
 801c104:	2300      	movs	r3, #0
 801c106:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 801c108:	683b      	ldr	r3, [r7, #0]
 801c10a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 801c10e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801c110:	bf00      	nop
 801c112:	370c      	adds	r7, #12
 801c114:	46bd      	mov	sp, r7
 801c116:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c11a:	4770      	bx	lr
 801c11c:	2000002c 	.word	0x2000002c

0801c120 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 801c120:	f3ef 8009 	mrs	r0, PSP
 801c124:	f3bf 8f6f 	isb	sy
 801c128:	4b15      	ldr	r3, [pc, #84]	@ (801c180 <pxCurrentTCBConst>)
 801c12a:	681a      	ldr	r2, [r3, #0]
 801c12c:	f01e 0f10 	tst.w	lr, #16
 801c130:	bf08      	it	eq
 801c132:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 801c136:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c13a:	6010      	str	r0, [r2, #0]
 801c13c:	e92d 0009 	stmdb	sp!, {r0, r3}
 801c140:	f04f 0050 	mov.w	r0, #80	@ 0x50
 801c144:	f380 8811 	msr	BASEPRI, r0
 801c148:	f3bf 8f4f 	dsb	sy
 801c14c:	f3bf 8f6f 	isb	sy
 801c150:	f7ff fce0 	bl	801bb14 <vTaskSwitchContext>
 801c154:	f04f 0000 	mov.w	r0, #0
 801c158:	f380 8811 	msr	BASEPRI, r0
 801c15c:	bc09      	pop	{r0, r3}
 801c15e:	6819      	ldr	r1, [r3, #0]
 801c160:	6808      	ldr	r0, [r1, #0]
 801c162:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801c166:	f01e 0f10 	tst.w	lr, #16
 801c16a:	bf08      	it	eq
 801c16c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 801c170:	f380 8809 	msr	PSP, r0
 801c174:	f3bf 8f6f 	isb	sy
 801c178:	4770      	bx	lr
 801c17a:	bf00      	nop
 801c17c:	f3af 8000 	nop.w

0801c180 <pxCurrentTCBConst>:
 801c180:	20000434 	.word	0x20000434
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 801c184:	bf00      	nop
 801c186:	bf00      	nop

0801c188 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 801c188:	b580      	push	{r7, lr}
 801c18a:	b082      	sub	sp, #8
 801c18c:	af00      	add	r7, sp, #0
	__asm volatile
 801c18e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801c192:	f383 8811 	msr	BASEPRI, r3
 801c196:	f3bf 8f6f 	isb	sy
 801c19a:	f3bf 8f4f 	dsb	sy
 801c19e:	607b      	str	r3, [r7, #4]
}
 801c1a0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 801c1a2:	f7ff fbfd 	bl	801b9a0 <xTaskIncrementTick>
 801c1a6:	4603      	mov	r3, r0
 801c1a8:	2b00      	cmp	r3, #0
 801c1aa:	d003      	beq.n	801c1b4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801c1ac:	4b06      	ldr	r3, [pc, #24]	@ (801c1c8 <SysTick_Handler+0x40>)
 801c1ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801c1b2:	601a      	str	r2, [r3, #0]
 801c1b4:	2300      	movs	r3, #0
 801c1b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 801c1b8:	683b      	ldr	r3, [r7, #0]
 801c1ba:	f383 8811 	msr	BASEPRI, r3
}
 801c1be:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 801c1c0:	bf00      	nop
 801c1c2:	3708      	adds	r7, #8
 801c1c4:	46bd      	mov	sp, r7
 801c1c6:	bd80      	pop	{r7, pc}
 801c1c8:	e000ed04 	.word	0xe000ed04

0801c1cc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 801c1cc:	b480      	push	{r7}
 801c1ce:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 801c1d0:	4b0b      	ldr	r3, [pc, #44]	@ (801c200 <vPortSetupTimerInterrupt+0x34>)
 801c1d2:	2200      	movs	r2, #0
 801c1d4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 801c1d6:	4b0b      	ldr	r3, [pc, #44]	@ (801c204 <vPortSetupTimerInterrupt+0x38>)
 801c1d8:	2200      	movs	r2, #0
 801c1da:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 801c1dc:	4b0a      	ldr	r3, [pc, #40]	@ (801c208 <vPortSetupTimerInterrupt+0x3c>)
 801c1de:	681b      	ldr	r3, [r3, #0]
 801c1e0:	4a0a      	ldr	r2, [pc, #40]	@ (801c20c <vPortSetupTimerInterrupt+0x40>)
 801c1e2:	fba2 2303 	umull	r2, r3, r2, r3
 801c1e6:	099b      	lsrs	r3, r3, #6
 801c1e8:	4a09      	ldr	r2, [pc, #36]	@ (801c210 <vPortSetupTimerInterrupt+0x44>)
 801c1ea:	3b01      	subs	r3, #1
 801c1ec:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 801c1ee:	4b04      	ldr	r3, [pc, #16]	@ (801c200 <vPortSetupTimerInterrupt+0x34>)
 801c1f0:	2207      	movs	r2, #7
 801c1f2:	601a      	str	r2, [r3, #0]
}
 801c1f4:	bf00      	nop
 801c1f6:	46bd      	mov	sp, r7
 801c1f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c1fc:	4770      	bx	lr
 801c1fe:	bf00      	nop
 801c200:	e000e010 	.word	0xe000e010
 801c204:	e000e018 	.word	0xe000e018
 801c208:	20000000 	.word	0x20000000
 801c20c:	10624dd3 	.word	0x10624dd3
 801c210:	e000e014 	.word	0xe000e014

0801c214 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 801c214:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 801c224 <vPortEnableVFP+0x10>
 801c218:	6801      	ldr	r1, [r0, #0]
 801c21a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801c21e:	6001      	str	r1, [r0, #0]
 801c220:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 801c222:	bf00      	nop
 801c224:	e000ed88 	.word	0xe000ed88

0801c228 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 801c228:	b580      	push	{r7, lr}
 801c22a:	b084      	sub	sp, #16
 801c22c:	af00      	add	r7, sp, #0
 801c22e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 801c230:	f7ff fb0a 	bl	801b848 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 801c234:	6878      	ldr	r0, [r7, #4]
 801c236:	f000 f81f 	bl	801c278 <malloc>
 801c23a:	4603      	mov	r3, r0
 801c23c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801c23e:	f7ff fb11 	bl	801b864 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 801c242:	68fb      	ldr	r3, [r7, #12]
}
 801c244:	4618      	mov	r0, r3
 801c246:	3710      	adds	r7, #16
 801c248:	46bd      	mov	sp, r7
 801c24a:	bd80      	pop	{r7, pc}

0801c24c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801c24c:	b580      	push	{r7, lr}
 801c24e:	b082      	sub	sp, #8
 801c250:	af00      	add	r7, sp, #0
 801c252:	6078      	str	r0, [r7, #4]
	if( pv )
 801c254:	687b      	ldr	r3, [r7, #4]
 801c256:	2b00      	cmp	r3, #0
 801c258:	d006      	beq.n	801c268 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 801c25a:	f7ff faf5 	bl	801b848 <vTaskSuspendAll>
		{
			free( pv );
 801c25e:	6878      	ldr	r0, [r7, #4]
 801c260:	f000 f812 	bl	801c288 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 801c264:	f7ff fafe 	bl	801b864 <xTaskResumeAll>
	}
}
 801c268:	bf00      	nop
 801c26a:	3708      	adds	r7, #8
 801c26c:	46bd      	mov	sp, r7
 801c26e:	bd80      	pop	{r7, pc}

0801c270 <atoi>:
 801c270:	220a      	movs	r2, #10
 801c272:	2100      	movs	r1, #0
 801c274:	f000 b938 	b.w	801c4e8 <strtol>

0801c278 <malloc>:
 801c278:	4b02      	ldr	r3, [pc, #8]	@ (801c284 <malloc+0xc>)
 801c27a:	4601      	mov	r1, r0
 801c27c:	6818      	ldr	r0, [r3, #0]
 801c27e:	f000 b82d 	b.w	801c2dc <_malloc_r>
 801c282:	bf00      	nop
 801c284:	2000003c 	.word	0x2000003c

0801c288 <free>:
 801c288:	4b02      	ldr	r3, [pc, #8]	@ (801c294 <free+0xc>)
 801c28a:	4601      	mov	r1, r0
 801c28c:	6818      	ldr	r0, [r3, #0]
 801c28e:	f000 bd09 	b.w	801cca4 <_free_r>
 801c292:	bf00      	nop
 801c294:	2000003c 	.word	0x2000003c

0801c298 <sbrk_aligned>:
 801c298:	b570      	push	{r4, r5, r6, lr}
 801c29a:	4e0f      	ldr	r6, [pc, #60]	@ (801c2d8 <sbrk_aligned+0x40>)
 801c29c:	460c      	mov	r4, r1
 801c29e:	6831      	ldr	r1, [r6, #0]
 801c2a0:	4605      	mov	r5, r0
 801c2a2:	b911      	cbnz	r1, 801c2aa <sbrk_aligned+0x12>
 801c2a4:	f000 fc88 	bl	801cbb8 <_sbrk_r>
 801c2a8:	6030      	str	r0, [r6, #0]
 801c2aa:	4621      	mov	r1, r4
 801c2ac:	4628      	mov	r0, r5
 801c2ae:	f000 fc83 	bl	801cbb8 <_sbrk_r>
 801c2b2:	1c43      	adds	r3, r0, #1
 801c2b4:	d103      	bne.n	801c2be <sbrk_aligned+0x26>
 801c2b6:	f04f 34ff 	mov.w	r4, #4294967295
 801c2ba:	4620      	mov	r0, r4
 801c2bc:	bd70      	pop	{r4, r5, r6, pc}
 801c2be:	1cc4      	adds	r4, r0, #3
 801c2c0:	f024 0403 	bic.w	r4, r4, #3
 801c2c4:	42a0      	cmp	r0, r4
 801c2c6:	d0f8      	beq.n	801c2ba <sbrk_aligned+0x22>
 801c2c8:	1a21      	subs	r1, r4, r0
 801c2ca:	4628      	mov	r0, r5
 801c2cc:	f000 fc74 	bl	801cbb8 <_sbrk_r>
 801c2d0:	3001      	adds	r0, #1
 801c2d2:	d1f2      	bne.n	801c2ba <sbrk_aligned+0x22>
 801c2d4:	e7ef      	b.n	801c2b6 <sbrk_aligned+0x1e>
 801c2d6:	bf00      	nop
 801c2d8:	20000568 	.word	0x20000568

0801c2dc <_malloc_r>:
 801c2dc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c2e0:	1ccd      	adds	r5, r1, #3
 801c2e2:	f025 0503 	bic.w	r5, r5, #3
 801c2e6:	3508      	adds	r5, #8
 801c2e8:	2d0c      	cmp	r5, #12
 801c2ea:	bf38      	it	cc
 801c2ec:	250c      	movcc	r5, #12
 801c2ee:	2d00      	cmp	r5, #0
 801c2f0:	4606      	mov	r6, r0
 801c2f2:	db01      	blt.n	801c2f8 <_malloc_r+0x1c>
 801c2f4:	42a9      	cmp	r1, r5
 801c2f6:	d904      	bls.n	801c302 <_malloc_r+0x26>
 801c2f8:	230c      	movs	r3, #12
 801c2fa:	6033      	str	r3, [r6, #0]
 801c2fc:	2000      	movs	r0, #0
 801c2fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c302:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 801c3d8 <_malloc_r+0xfc>
 801c306:	f000 f869 	bl	801c3dc <__malloc_lock>
 801c30a:	f8d8 3000 	ldr.w	r3, [r8]
 801c30e:	461c      	mov	r4, r3
 801c310:	bb44      	cbnz	r4, 801c364 <_malloc_r+0x88>
 801c312:	4629      	mov	r1, r5
 801c314:	4630      	mov	r0, r6
 801c316:	f7ff ffbf 	bl	801c298 <sbrk_aligned>
 801c31a:	1c43      	adds	r3, r0, #1
 801c31c:	4604      	mov	r4, r0
 801c31e:	d158      	bne.n	801c3d2 <_malloc_r+0xf6>
 801c320:	f8d8 4000 	ldr.w	r4, [r8]
 801c324:	4627      	mov	r7, r4
 801c326:	2f00      	cmp	r7, #0
 801c328:	d143      	bne.n	801c3b2 <_malloc_r+0xd6>
 801c32a:	2c00      	cmp	r4, #0
 801c32c:	d04b      	beq.n	801c3c6 <_malloc_r+0xea>
 801c32e:	6823      	ldr	r3, [r4, #0]
 801c330:	4639      	mov	r1, r7
 801c332:	4630      	mov	r0, r6
 801c334:	eb04 0903 	add.w	r9, r4, r3
 801c338:	f000 fc3e 	bl	801cbb8 <_sbrk_r>
 801c33c:	4581      	cmp	r9, r0
 801c33e:	d142      	bne.n	801c3c6 <_malloc_r+0xea>
 801c340:	6821      	ldr	r1, [r4, #0]
 801c342:	1a6d      	subs	r5, r5, r1
 801c344:	4629      	mov	r1, r5
 801c346:	4630      	mov	r0, r6
 801c348:	f7ff ffa6 	bl	801c298 <sbrk_aligned>
 801c34c:	3001      	adds	r0, #1
 801c34e:	d03a      	beq.n	801c3c6 <_malloc_r+0xea>
 801c350:	6823      	ldr	r3, [r4, #0]
 801c352:	442b      	add	r3, r5
 801c354:	6023      	str	r3, [r4, #0]
 801c356:	f8d8 3000 	ldr.w	r3, [r8]
 801c35a:	685a      	ldr	r2, [r3, #4]
 801c35c:	bb62      	cbnz	r2, 801c3b8 <_malloc_r+0xdc>
 801c35e:	f8c8 7000 	str.w	r7, [r8]
 801c362:	e00f      	b.n	801c384 <_malloc_r+0xa8>
 801c364:	6822      	ldr	r2, [r4, #0]
 801c366:	1b52      	subs	r2, r2, r5
 801c368:	d420      	bmi.n	801c3ac <_malloc_r+0xd0>
 801c36a:	2a0b      	cmp	r2, #11
 801c36c:	d917      	bls.n	801c39e <_malloc_r+0xc2>
 801c36e:	1961      	adds	r1, r4, r5
 801c370:	42a3      	cmp	r3, r4
 801c372:	6025      	str	r5, [r4, #0]
 801c374:	bf18      	it	ne
 801c376:	6059      	strne	r1, [r3, #4]
 801c378:	6863      	ldr	r3, [r4, #4]
 801c37a:	bf08      	it	eq
 801c37c:	f8c8 1000 	streq.w	r1, [r8]
 801c380:	5162      	str	r2, [r4, r5]
 801c382:	604b      	str	r3, [r1, #4]
 801c384:	4630      	mov	r0, r6
 801c386:	f000 f82f 	bl	801c3e8 <__malloc_unlock>
 801c38a:	f104 000b 	add.w	r0, r4, #11
 801c38e:	1d23      	adds	r3, r4, #4
 801c390:	f020 0007 	bic.w	r0, r0, #7
 801c394:	1ac2      	subs	r2, r0, r3
 801c396:	bf1c      	itt	ne
 801c398:	1a1b      	subne	r3, r3, r0
 801c39a:	50a3      	strne	r3, [r4, r2]
 801c39c:	e7af      	b.n	801c2fe <_malloc_r+0x22>
 801c39e:	6862      	ldr	r2, [r4, #4]
 801c3a0:	42a3      	cmp	r3, r4
 801c3a2:	bf0c      	ite	eq
 801c3a4:	f8c8 2000 	streq.w	r2, [r8]
 801c3a8:	605a      	strne	r2, [r3, #4]
 801c3aa:	e7eb      	b.n	801c384 <_malloc_r+0xa8>
 801c3ac:	4623      	mov	r3, r4
 801c3ae:	6864      	ldr	r4, [r4, #4]
 801c3b0:	e7ae      	b.n	801c310 <_malloc_r+0x34>
 801c3b2:	463c      	mov	r4, r7
 801c3b4:	687f      	ldr	r7, [r7, #4]
 801c3b6:	e7b6      	b.n	801c326 <_malloc_r+0x4a>
 801c3b8:	461a      	mov	r2, r3
 801c3ba:	685b      	ldr	r3, [r3, #4]
 801c3bc:	42a3      	cmp	r3, r4
 801c3be:	d1fb      	bne.n	801c3b8 <_malloc_r+0xdc>
 801c3c0:	2300      	movs	r3, #0
 801c3c2:	6053      	str	r3, [r2, #4]
 801c3c4:	e7de      	b.n	801c384 <_malloc_r+0xa8>
 801c3c6:	230c      	movs	r3, #12
 801c3c8:	6033      	str	r3, [r6, #0]
 801c3ca:	4630      	mov	r0, r6
 801c3cc:	f000 f80c 	bl	801c3e8 <__malloc_unlock>
 801c3d0:	e794      	b.n	801c2fc <_malloc_r+0x20>
 801c3d2:	6005      	str	r5, [r0, #0]
 801c3d4:	e7d6      	b.n	801c384 <_malloc_r+0xa8>
 801c3d6:	bf00      	nop
 801c3d8:	2000056c 	.word	0x2000056c

0801c3dc <__malloc_lock>:
 801c3dc:	4801      	ldr	r0, [pc, #4]	@ (801c3e4 <__malloc_lock+0x8>)
 801c3de:	f000 bc38 	b.w	801cc52 <__retarget_lock_acquire_recursive>
 801c3e2:	bf00      	nop
 801c3e4:	200006b0 	.word	0x200006b0

0801c3e8 <__malloc_unlock>:
 801c3e8:	4801      	ldr	r0, [pc, #4]	@ (801c3f0 <__malloc_unlock+0x8>)
 801c3ea:	f000 bc33 	b.w	801cc54 <__retarget_lock_release_recursive>
 801c3ee:	bf00      	nop
 801c3f0:	200006b0 	.word	0x200006b0

0801c3f4 <_strtol_l.constprop.0>:
 801c3f4:	2b24      	cmp	r3, #36	@ 0x24
 801c3f6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801c3fa:	4686      	mov	lr, r0
 801c3fc:	4690      	mov	r8, r2
 801c3fe:	d801      	bhi.n	801c404 <_strtol_l.constprop.0+0x10>
 801c400:	2b01      	cmp	r3, #1
 801c402:	d106      	bne.n	801c412 <_strtol_l.constprop.0+0x1e>
 801c404:	f000 fbfa 	bl	801cbfc <__errno>
 801c408:	2316      	movs	r3, #22
 801c40a:	6003      	str	r3, [r0, #0]
 801c40c:	2000      	movs	r0, #0
 801c40e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801c412:	4834      	ldr	r0, [pc, #208]	@ (801c4e4 <_strtol_l.constprop.0+0xf0>)
 801c414:	460d      	mov	r5, r1
 801c416:	462a      	mov	r2, r5
 801c418:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c41c:	5d06      	ldrb	r6, [r0, r4]
 801c41e:	f016 0608 	ands.w	r6, r6, #8
 801c422:	d1f8      	bne.n	801c416 <_strtol_l.constprop.0+0x22>
 801c424:	2c2d      	cmp	r4, #45	@ 0x2d
 801c426:	d12d      	bne.n	801c484 <_strtol_l.constprop.0+0x90>
 801c428:	782c      	ldrb	r4, [r5, #0]
 801c42a:	2601      	movs	r6, #1
 801c42c:	1c95      	adds	r5, r2, #2
 801c42e:	f033 0210 	bics.w	r2, r3, #16
 801c432:	d109      	bne.n	801c448 <_strtol_l.constprop.0+0x54>
 801c434:	2c30      	cmp	r4, #48	@ 0x30
 801c436:	d12a      	bne.n	801c48e <_strtol_l.constprop.0+0x9a>
 801c438:	782a      	ldrb	r2, [r5, #0]
 801c43a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801c43e:	2a58      	cmp	r2, #88	@ 0x58
 801c440:	d125      	bne.n	801c48e <_strtol_l.constprop.0+0x9a>
 801c442:	786c      	ldrb	r4, [r5, #1]
 801c444:	2310      	movs	r3, #16
 801c446:	3502      	adds	r5, #2
 801c448:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801c44c:	f10c 3cff 	add.w	ip, ip, #4294967295
 801c450:	2200      	movs	r2, #0
 801c452:	fbbc f9f3 	udiv	r9, ip, r3
 801c456:	4610      	mov	r0, r2
 801c458:	fb03 ca19 	mls	sl, r3, r9, ip
 801c45c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 801c460:	2f09      	cmp	r7, #9
 801c462:	d81b      	bhi.n	801c49c <_strtol_l.constprop.0+0xa8>
 801c464:	463c      	mov	r4, r7
 801c466:	42a3      	cmp	r3, r4
 801c468:	dd27      	ble.n	801c4ba <_strtol_l.constprop.0+0xc6>
 801c46a:	1c57      	adds	r7, r2, #1
 801c46c:	d007      	beq.n	801c47e <_strtol_l.constprop.0+0x8a>
 801c46e:	4581      	cmp	r9, r0
 801c470:	d320      	bcc.n	801c4b4 <_strtol_l.constprop.0+0xc0>
 801c472:	d101      	bne.n	801c478 <_strtol_l.constprop.0+0x84>
 801c474:	45a2      	cmp	sl, r4
 801c476:	db1d      	blt.n	801c4b4 <_strtol_l.constprop.0+0xc0>
 801c478:	fb00 4003 	mla	r0, r0, r3, r4
 801c47c:	2201      	movs	r2, #1
 801c47e:	f815 4b01 	ldrb.w	r4, [r5], #1
 801c482:	e7eb      	b.n	801c45c <_strtol_l.constprop.0+0x68>
 801c484:	2c2b      	cmp	r4, #43	@ 0x2b
 801c486:	bf04      	itt	eq
 801c488:	782c      	ldrbeq	r4, [r5, #0]
 801c48a:	1c95      	addeq	r5, r2, #2
 801c48c:	e7cf      	b.n	801c42e <_strtol_l.constprop.0+0x3a>
 801c48e:	2b00      	cmp	r3, #0
 801c490:	d1da      	bne.n	801c448 <_strtol_l.constprop.0+0x54>
 801c492:	2c30      	cmp	r4, #48	@ 0x30
 801c494:	bf0c      	ite	eq
 801c496:	2308      	moveq	r3, #8
 801c498:	230a      	movne	r3, #10
 801c49a:	e7d5      	b.n	801c448 <_strtol_l.constprop.0+0x54>
 801c49c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 801c4a0:	2f19      	cmp	r7, #25
 801c4a2:	d801      	bhi.n	801c4a8 <_strtol_l.constprop.0+0xb4>
 801c4a4:	3c37      	subs	r4, #55	@ 0x37
 801c4a6:	e7de      	b.n	801c466 <_strtol_l.constprop.0+0x72>
 801c4a8:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801c4ac:	2f19      	cmp	r7, #25
 801c4ae:	d804      	bhi.n	801c4ba <_strtol_l.constprop.0+0xc6>
 801c4b0:	3c57      	subs	r4, #87	@ 0x57
 801c4b2:	e7d8      	b.n	801c466 <_strtol_l.constprop.0+0x72>
 801c4b4:	f04f 32ff 	mov.w	r2, #4294967295
 801c4b8:	e7e1      	b.n	801c47e <_strtol_l.constprop.0+0x8a>
 801c4ba:	1c53      	adds	r3, r2, #1
 801c4bc:	d108      	bne.n	801c4d0 <_strtol_l.constprop.0+0xdc>
 801c4be:	2322      	movs	r3, #34	@ 0x22
 801c4c0:	f8ce 3000 	str.w	r3, [lr]
 801c4c4:	4660      	mov	r0, ip
 801c4c6:	f1b8 0f00 	cmp.w	r8, #0
 801c4ca:	d0a0      	beq.n	801c40e <_strtol_l.constprop.0+0x1a>
 801c4cc:	1e69      	subs	r1, r5, #1
 801c4ce:	e006      	b.n	801c4de <_strtol_l.constprop.0+0xea>
 801c4d0:	b106      	cbz	r6, 801c4d4 <_strtol_l.constprop.0+0xe0>
 801c4d2:	4240      	negs	r0, r0
 801c4d4:	f1b8 0f00 	cmp.w	r8, #0
 801c4d8:	d099      	beq.n	801c40e <_strtol_l.constprop.0+0x1a>
 801c4da:	2a00      	cmp	r2, #0
 801c4dc:	d1f6      	bne.n	801c4cc <_strtol_l.constprop.0+0xd8>
 801c4de:	f8c8 1000 	str.w	r1, [r8]
 801c4e2:	e794      	b.n	801c40e <_strtol_l.constprop.0+0x1a>
 801c4e4:	0801e359 	.word	0x0801e359

0801c4e8 <strtol>:
 801c4e8:	4613      	mov	r3, r2
 801c4ea:	460a      	mov	r2, r1
 801c4ec:	4601      	mov	r1, r0
 801c4ee:	4802      	ldr	r0, [pc, #8]	@ (801c4f8 <strtol+0x10>)
 801c4f0:	6800      	ldr	r0, [r0, #0]
 801c4f2:	f7ff bf7f 	b.w	801c3f4 <_strtol_l.constprop.0>
 801c4f6:	bf00      	nop
 801c4f8:	2000003c 	.word	0x2000003c

0801c4fc <std>:
 801c4fc:	2300      	movs	r3, #0
 801c4fe:	b510      	push	{r4, lr}
 801c500:	4604      	mov	r4, r0
 801c502:	e9c0 3300 	strd	r3, r3, [r0]
 801c506:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801c50a:	6083      	str	r3, [r0, #8]
 801c50c:	8181      	strh	r1, [r0, #12]
 801c50e:	6643      	str	r3, [r0, #100]	@ 0x64
 801c510:	81c2      	strh	r2, [r0, #14]
 801c512:	6183      	str	r3, [r0, #24]
 801c514:	4619      	mov	r1, r3
 801c516:	2208      	movs	r2, #8
 801c518:	305c      	adds	r0, #92	@ 0x5c
 801c51a:	f000 fab5 	bl	801ca88 <memset>
 801c51e:	4b0d      	ldr	r3, [pc, #52]	@ (801c554 <std+0x58>)
 801c520:	6263      	str	r3, [r4, #36]	@ 0x24
 801c522:	4b0d      	ldr	r3, [pc, #52]	@ (801c558 <std+0x5c>)
 801c524:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c526:	4b0d      	ldr	r3, [pc, #52]	@ (801c55c <std+0x60>)
 801c528:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c52a:	4b0d      	ldr	r3, [pc, #52]	@ (801c560 <std+0x64>)
 801c52c:	6323      	str	r3, [r4, #48]	@ 0x30
 801c52e:	4b0d      	ldr	r3, [pc, #52]	@ (801c564 <std+0x68>)
 801c530:	6224      	str	r4, [r4, #32]
 801c532:	429c      	cmp	r4, r3
 801c534:	d006      	beq.n	801c544 <std+0x48>
 801c536:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801c53a:	4294      	cmp	r4, r2
 801c53c:	d002      	beq.n	801c544 <std+0x48>
 801c53e:	33d0      	adds	r3, #208	@ 0xd0
 801c540:	429c      	cmp	r4, r3
 801c542:	d105      	bne.n	801c550 <std+0x54>
 801c544:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 801c548:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c54c:	f000 bb80 	b.w	801cc50 <__retarget_lock_init_recursive>
 801c550:	bd10      	pop	{r4, pc}
 801c552:	bf00      	nop
 801c554:	0801c8d9 	.word	0x0801c8d9
 801c558:	0801c8fb 	.word	0x0801c8fb
 801c55c:	0801c933 	.word	0x0801c933
 801c560:	0801c957 	.word	0x0801c957
 801c564:	20000570 	.word	0x20000570

0801c568 <stdio_exit_handler>:
 801c568:	4a02      	ldr	r2, [pc, #8]	@ (801c574 <stdio_exit_handler+0xc>)
 801c56a:	4903      	ldr	r1, [pc, #12]	@ (801c578 <stdio_exit_handler+0x10>)
 801c56c:	4803      	ldr	r0, [pc, #12]	@ (801c57c <stdio_exit_handler+0x14>)
 801c56e:	f000 b869 	b.w	801c644 <_fwalk_sglue>
 801c572:	bf00      	nop
 801c574:	20000030 	.word	0x20000030
 801c578:	0801d3e1 	.word	0x0801d3e1
 801c57c:	20000040 	.word	0x20000040

0801c580 <cleanup_stdio>:
 801c580:	6841      	ldr	r1, [r0, #4]
 801c582:	4b0c      	ldr	r3, [pc, #48]	@ (801c5b4 <cleanup_stdio+0x34>)
 801c584:	4299      	cmp	r1, r3
 801c586:	b510      	push	{r4, lr}
 801c588:	4604      	mov	r4, r0
 801c58a:	d001      	beq.n	801c590 <cleanup_stdio+0x10>
 801c58c:	f000 ff28 	bl	801d3e0 <_fflush_r>
 801c590:	68a1      	ldr	r1, [r4, #8]
 801c592:	4b09      	ldr	r3, [pc, #36]	@ (801c5b8 <cleanup_stdio+0x38>)
 801c594:	4299      	cmp	r1, r3
 801c596:	d002      	beq.n	801c59e <cleanup_stdio+0x1e>
 801c598:	4620      	mov	r0, r4
 801c59a:	f000 ff21 	bl	801d3e0 <_fflush_r>
 801c59e:	68e1      	ldr	r1, [r4, #12]
 801c5a0:	4b06      	ldr	r3, [pc, #24]	@ (801c5bc <cleanup_stdio+0x3c>)
 801c5a2:	4299      	cmp	r1, r3
 801c5a4:	d004      	beq.n	801c5b0 <cleanup_stdio+0x30>
 801c5a6:	4620      	mov	r0, r4
 801c5a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5ac:	f000 bf18 	b.w	801d3e0 <_fflush_r>
 801c5b0:	bd10      	pop	{r4, pc}
 801c5b2:	bf00      	nop
 801c5b4:	20000570 	.word	0x20000570
 801c5b8:	200005d8 	.word	0x200005d8
 801c5bc:	20000640 	.word	0x20000640

0801c5c0 <global_stdio_init.part.0>:
 801c5c0:	b510      	push	{r4, lr}
 801c5c2:	4b0b      	ldr	r3, [pc, #44]	@ (801c5f0 <global_stdio_init.part.0+0x30>)
 801c5c4:	4c0b      	ldr	r4, [pc, #44]	@ (801c5f4 <global_stdio_init.part.0+0x34>)
 801c5c6:	4a0c      	ldr	r2, [pc, #48]	@ (801c5f8 <global_stdio_init.part.0+0x38>)
 801c5c8:	601a      	str	r2, [r3, #0]
 801c5ca:	4620      	mov	r0, r4
 801c5cc:	2200      	movs	r2, #0
 801c5ce:	2104      	movs	r1, #4
 801c5d0:	f7ff ff94 	bl	801c4fc <std>
 801c5d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 801c5d8:	2201      	movs	r2, #1
 801c5da:	2109      	movs	r1, #9
 801c5dc:	f7ff ff8e 	bl	801c4fc <std>
 801c5e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 801c5e4:	2202      	movs	r2, #2
 801c5e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c5ea:	2112      	movs	r1, #18
 801c5ec:	f7ff bf86 	b.w	801c4fc <std>
 801c5f0:	200006a8 	.word	0x200006a8
 801c5f4:	20000570 	.word	0x20000570
 801c5f8:	0801c569 	.word	0x0801c569

0801c5fc <__sfp_lock_acquire>:
 801c5fc:	4801      	ldr	r0, [pc, #4]	@ (801c604 <__sfp_lock_acquire+0x8>)
 801c5fe:	f000 bb28 	b.w	801cc52 <__retarget_lock_acquire_recursive>
 801c602:	bf00      	nop
 801c604:	200006b1 	.word	0x200006b1

0801c608 <__sfp_lock_release>:
 801c608:	4801      	ldr	r0, [pc, #4]	@ (801c610 <__sfp_lock_release+0x8>)
 801c60a:	f000 bb23 	b.w	801cc54 <__retarget_lock_release_recursive>
 801c60e:	bf00      	nop
 801c610:	200006b1 	.word	0x200006b1

0801c614 <__sinit>:
 801c614:	b510      	push	{r4, lr}
 801c616:	4604      	mov	r4, r0
 801c618:	f7ff fff0 	bl	801c5fc <__sfp_lock_acquire>
 801c61c:	6a23      	ldr	r3, [r4, #32]
 801c61e:	b11b      	cbz	r3, 801c628 <__sinit+0x14>
 801c620:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801c624:	f7ff bff0 	b.w	801c608 <__sfp_lock_release>
 801c628:	4b04      	ldr	r3, [pc, #16]	@ (801c63c <__sinit+0x28>)
 801c62a:	6223      	str	r3, [r4, #32]
 801c62c:	4b04      	ldr	r3, [pc, #16]	@ (801c640 <__sinit+0x2c>)
 801c62e:	681b      	ldr	r3, [r3, #0]
 801c630:	2b00      	cmp	r3, #0
 801c632:	d1f5      	bne.n	801c620 <__sinit+0xc>
 801c634:	f7ff ffc4 	bl	801c5c0 <global_stdio_init.part.0>
 801c638:	e7f2      	b.n	801c620 <__sinit+0xc>
 801c63a:	bf00      	nop
 801c63c:	0801c581 	.word	0x0801c581
 801c640:	200006a8 	.word	0x200006a8

0801c644 <_fwalk_sglue>:
 801c644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801c648:	4607      	mov	r7, r0
 801c64a:	4688      	mov	r8, r1
 801c64c:	4614      	mov	r4, r2
 801c64e:	2600      	movs	r6, #0
 801c650:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801c654:	f1b9 0901 	subs.w	r9, r9, #1
 801c658:	d505      	bpl.n	801c666 <_fwalk_sglue+0x22>
 801c65a:	6824      	ldr	r4, [r4, #0]
 801c65c:	2c00      	cmp	r4, #0
 801c65e:	d1f7      	bne.n	801c650 <_fwalk_sglue+0xc>
 801c660:	4630      	mov	r0, r6
 801c662:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801c666:	89ab      	ldrh	r3, [r5, #12]
 801c668:	2b01      	cmp	r3, #1
 801c66a:	d907      	bls.n	801c67c <_fwalk_sglue+0x38>
 801c66c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801c670:	3301      	adds	r3, #1
 801c672:	d003      	beq.n	801c67c <_fwalk_sglue+0x38>
 801c674:	4629      	mov	r1, r5
 801c676:	4638      	mov	r0, r7
 801c678:	47c0      	blx	r8
 801c67a:	4306      	orrs	r6, r0
 801c67c:	3568      	adds	r5, #104	@ 0x68
 801c67e:	e7e9      	b.n	801c654 <_fwalk_sglue+0x10>

0801c680 <iprintf>:
 801c680:	b40f      	push	{r0, r1, r2, r3}
 801c682:	b507      	push	{r0, r1, r2, lr}
 801c684:	4906      	ldr	r1, [pc, #24]	@ (801c6a0 <iprintf+0x20>)
 801c686:	ab04      	add	r3, sp, #16
 801c688:	6808      	ldr	r0, [r1, #0]
 801c68a:	f853 2b04 	ldr.w	r2, [r3], #4
 801c68e:	6881      	ldr	r1, [r0, #8]
 801c690:	9301      	str	r3, [sp, #4]
 801c692:	f000 fb7b 	bl	801cd8c <_vfiprintf_r>
 801c696:	b003      	add	sp, #12
 801c698:	f85d eb04 	ldr.w	lr, [sp], #4
 801c69c:	b004      	add	sp, #16
 801c69e:	4770      	bx	lr
 801c6a0:	2000003c 	.word	0x2000003c

0801c6a4 <_puts_r>:
 801c6a4:	6a03      	ldr	r3, [r0, #32]
 801c6a6:	b570      	push	{r4, r5, r6, lr}
 801c6a8:	6884      	ldr	r4, [r0, #8]
 801c6aa:	4605      	mov	r5, r0
 801c6ac:	460e      	mov	r6, r1
 801c6ae:	b90b      	cbnz	r3, 801c6b4 <_puts_r+0x10>
 801c6b0:	f7ff ffb0 	bl	801c614 <__sinit>
 801c6b4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c6b6:	07db      	lsls	r3, r3, #31
 801c6b8:	d405      	bmi.n	801c6c6 <_puts_r+0x22>
 801c6ba:	89a3      	ldrh	r3, [r4, #12]
 801c6bc:	0598      	lsls	r0, r3, #22
 801c6be:	d402      	bmi.n	801c6c6 <_puts_r+0x22>
 801c6c0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6c2:	f000 fac6 	bl	801cc52 <__retarget_lock_acquire_recursive>
 801c6c6:	89a3      	ldrh	r3, [r4, #12]
 801c6c8:	0719      	lsls	r1, r3, #28
 801c6ca:	d502      	bpl.n	801c6d2 <_puts_r+0x2e>
 801c6cc:	6923      	ldr	r3, [r4, #16]
 801c6ce:	2b00      	cmp	r3, #0
 801c6d0:	d135      	bne.n	801c73e <_puts_r+0x9a>
 801c6d2:	4621      	mov	r1, r4
 801c6d4:	4628      	mov	r0, r5
 801c6d6:	f000 f981 	bl	801c9dc <__swsetup_r>
 801c6da:	b380      	cbz	r0, 801c73e <_puts_r+0x9a>
 801c6dc:	f04f 35ff 	mov.w	r5, #4294967295
 801c6e0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c6e2:	07da      	lsls	r2, r3, #31
 801c6e4:	d405      	bmi.n	801c6f2 <_puts_r+0x4e>
 801c6e6:	89a3      	ldrh	r3, [r4, #12]
 801c6e8:	059b      	lsls	r3, r3, #22
 801c6ea:	d402      	bmi.n	801c6f2 <_puts_r+0x4e>
 801c6ec:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c6ee:	f000 fab1 	bl	801cc54 <__retarget_lock_release_recursive>
 801c6f2:	4628      	mov	r0, r5
 801c6f4:	bd70      	pop	{r4, r5, r6, pc}
 801c6f6:	2b00      	cmp	r3, #0
 801c6f8:	da04      	bge.n	801c704 <_puts_r+0x60>
 801c6fa:	69a2      	ldr	r2, [r4, #24]
 801c6fc:	429a      	cmp	r2, r3
 801c6fe:	dc17      	bgt.n	801c730 <_puts_r+0x8c>
 801c700:	290a      	cmp	r1, #10
 801c702:	d015      	beq.n	801c730 <_puts_r+0x8c>
 801c704:	6823      	ldr	r3, [r4, #0]
 801c706:	1c5a      	adds	r2, r3, #1
 801c708:	6022      	str	r2, [r4, #0]
 801c70a:	7019      	strb	r1, [r3, #0]
 801c70c:	68a3      	ldr	r3, [r4, #8]
 801c70e:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 801c712:	3b01      	subs	r3, #1
 801c714:	60a3      	str	r3, [r4, #8]
 801c716:	2900      	cmp	r1, #0
 801c718:	d1ed      	bne.n	801c6f6 <_puts_r+0x52>
 801c71a:	2b00      	cmp	r3, #0
 801c71c:	da11      	bge.n	801c742 <_puts_r+0x9e>
 801c71e:	4622      	mov	r2, r4
 801c720:	210a      	movs	r1, #10
 801c722:	4628      	mov	r0, r5
 801c724:	f000 f91b 	bl	801c95e <__swbuf_r>
 801c728:	3001      	adds	r0, #1
 801c72a:	d0d7      	beq.n	801c6dc <_puts_r+0x38>
 801c72c:	250a      	movs	r5, #10
 801c72e:	e7d7      	b.n	801c6e0 <_puts_r+0x3c>
 801c730:	4622      	mov	r2, r4
 801c732:	4628      	mov	r0, r5
 801c734:	f000 f913 	bl	801c95e <__swbuf_r>
 801c738:	3001      	adds	r0, #1
 801c73a:	d1e7      	bne.n	801c70c <_puts_r+0x68>
 801c73c:	e7ce      	b.n	801c6dc <_puts_r+0x38>
 801c73e:	3e01      	subs	r6, #1
 801c740:	e7e4      	b.n	801c70c <_puts_r+0x68>
 801c742:	6823      	ldr	r3, [r4, #0]
 801c744:	1c5a      	adds	r2, r3, #1
 801c746:	6022      	str	r2, [r4, #0]
 801c748:	220a      	movs	r2, #10
 801c74a:	701a      	strb	r2, [r3, #0]
 801c74c:	e7ee      	b.n	801c72c <_puts_r+0x88>
	...

0801c750 <puts>:
 801c750:	4b02      	ldr	r3, [pc, #8]	@ (801c75c <puts+0xc>)
 801c752:	4601      	mov	r1, r0
 801c754:	6818      	ldr	r0, [r3, #0]
 801c756:	f7ff bfa5 	b.w	801c6a4 <_puts_r>
 801c75a:	bf00      	nop
 801c75c:	2000003c 	.word	0x2000003c

0801c760 <setbuf>:
 801c760:	fab1 f281 	clz	r2, r1
 801c764:	0952      	lsrs	r2, r2, #5
 801c766:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801c76a:	0052      	lsls	r2, r2, #1
 801c76c:	f000 b800 	b.w	801c770 <setvbuf>

0801c770 <setvbuf>:
 801c770:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 801c774:	461d      	mov	r5, r3
 801c776:	4b57      	ldr	r3, [pc, #348]	@ (801c8d4 <setvbuf+0x164>)
 801c778:	681f      	ldr	r7, [r3, #0]
 801c77a:	4604      	mov	r4, r0
 801c77c:	460e      	mov	r6, r1
 801c77e:	4690      	mov	r8, r2
 801c780:	b127      	cbz	r7, 801c78c <setvbuf+0x1c>
 801c782:	6a3b      	ldr	r3, [r7, #32]
 801c784:	b913      	cbnz	r3, 801c78c <setvbuf+0x1c>
 801c786:	4638      	mov	r0, r7
 801c788:	f7ff ff44 	bl	801c614 <__sinit>
 801c78c:	f1b8 0f02 	cmp.w	r8, #2
 801c790:	d006      	beq.n	801c7a0 <setvbuf+0x30>
 801c792:	f1b8 0f01 	cmp.w	r8, #1
 801c796:	f200 809a 	bhi.w	801c8ce <setvbuf+0x15e>
 801c79a:	2d00      	cmp	r5, #0
 801c79c:	f2c0 8097 	blt.w	801c8ce <setvbuf+0x15e>
 801c7a0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801c7a2:	07d9      	lsls	r1, r3, #31
 801c7a4:	d405      	bmi.n	801c7b2 <setvbuf+0x42>
 801c7a6:	89a3      	ldrh	r3, [r4, #12]
 801c7a8:	059a      	lsls	r2, r3, #22
 801c7aa:	d402      	bmi.n	801c7b2 <setvbuf+0x42>
 801c7ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c7ae:	f000 fa50 	bl	801cc52 <__retarget_lock_acquire_recursive>
 801c7b2:	4621      	mov	r1, r4
 801c7b4:	4638      	mov	r0, r7
 801c7b6:	f000 fe13 	bl	801d3e0 <_fflush_r>
 801c7ba:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801c7bc:	b141      	cbz	r1, 801c7d0 <setvbuf+0x60>
 801c7be:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801c7c2:	4299      	cmp	r1, r3
 801c7c4:	d002      	beq.n	801c7cc <setvbuf+0x5c>
 801c7c6:	4638      	mov	r0, r7
 801c7c8:	f000 fa6c 	bl	801cca4 <_free_r>
 801c7cc:	2300      	movs	r3, #0
 801c7ce:	6363      	str	r3, [r4, #52]	@ 0x34
 801c7d0:	2300      	movs	r3, #0
 801c7d2:	61a3      	str	r3, [r4, #24]
 801c7d4:	6063      	str	r3, [r4, #4]
 801c7d6:	89a3      	ldrh	r3, [r4, #12]
 801c7d8:	061b      	lsls	r3, r3, #24
 801c7da:	d503      	bpl.n	801c7e4 <setvbuf+0x74>
 801c7dc:	6921      	ldr	r1, [r4, #16]
 801c7de:	4638      	mov	r0, r7
 801c7e0:	f000 fa60 	bl	801cca4 <_free_r>
 801c7e4:	89a3      	ldrh	r3, [r4, #12]
 801c7e6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 801c7ea:	f023 0303 	bic.w	r3, r3, #3
 801c7ee:	f1b8 0f02 	cmp.w	r8, #2
 801c7f2:	81a3      	strh	r3, [r4, #12]
 801c7f4:	d061      	beq.n	801c8ba <setvbuf+0x14a>
 801c7f6:	ab01      	add	r3, sp, #4
 801c7f8:	466a      	mov	r2, sp
 801c7fa:	4621      	mov	r1, r4
 801c7fc:	4638      	mov	r0, r7
 801c7fe:	f000 fe29 	bl	801d454 <__swhatbuf_r>
 801c802:	89a3      	ldrh	r3, [r4, #12]
 801c804:	4318      	orrs	r0, r3
 801c806:	81a0      	strh	r0, [r4, #12]
 801c808:	bb2d      	cbnz	r5, 801c856 <setvbuf+0xe6>
 801c80a:	9d00      	ldr	r5, [sp, #0]
 801c80c:	4628      	mov	r0, r5
 801c80e:	f7ff fd33 	bl	801c278 <malloc>
 801c812:	4606      	mov	r6, r0
 801c814:	2800      	cmp	r0, #0
 801c816:	d152      	bne.n	801c8be <setvbuf+0x14e>
 801c818:	f8dd 9000 	ldr.w	r9, [sp]
 801c81c:	45a9      	cmp	r9, r5
 801c81e:	d140      	bne.n	801c8a2 <setvbuf+0x132>
 801c820:	f04f 35ff 	mov.w	r5, #4294967295
 801c824:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c828:	f043 0202 	orr.w	r2, r3, #2
 801c82c:	81a2      	strh	r2, [r4, #12]
 801c82e:	2200      	movs	r2, #0
 801c830:	60a2      	str	r2, [r4, #8]
 801c832:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 801c836:	6022      	str	r2, [r4, #0]
 801c838:	6122      	str	r2, [r4, #16]
 801c83a:	2201      	movs	r2, #1
 801c83c:	6162      	str	r2, [r4, #20]
 801c83e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c840:	07d6      	lsls	r6, r2, #31
 801c842:	d404      	bmi.n	801c84e <setvbuf+0xde>
 801c844:	0598      	lsls	r0, r3, #22
 801c846:	d402      	bmi.n	801c84e <setvbuf+0xde>
 801c848:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c84a:	f000 fa03 	bl	801cc54 <__retarget_lock_release_recursive>
 801c84e:	4628      	mov	r0, r5
 801c850:	b003      	add	sp, #12
 801c852:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 801c856:	2e00      	cmp	r6, #0
 801c858:	d0d8      	beq.n	801c80c <setvbuf+0x9c>
 801c85a:	6a3b      	ldr	r3, [r7, #32]
 801c85c:	b913      	cbnz	r3, 801c864 <setvbuf+0xf4>
 801c85e:	4638      	mov	r0, r7
 801c860:	f7ff fed8 	bl	801c614 <__sinit>
 801c864:	f1b8 0f01 	cmp.w	r8, #1
 801c868:	bf08      	it	eq
 801c86a:	89a3      	ldrheq	r3, [r4, #12]
 801c86c:	6026      	str	r6, [r4, #0]
 801c86e:	bf04      	itt	eq
 801c870:	f043 0301 	orreq.w	r3, r3, #1
 801c874:	81a3      	strheq	r3, [r4, #12]
 801c876:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c87a:	f013 0208 	ands.w	r2, r3, #8
 801c87e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 801c882:	d01e      	beq.n	801c8c2 <setvbuf+0x152>
 801c884:	07d9      	lsls	r1, r3, #31
 801c886:	bf41      	itttt	mi
 801c888:	2200      	movmi	r2, #0
 801c88a:	426d      	negmi	r5, r5
 801c88c:	60a2      	strmi	r2, [r4, #8]
 801c88e:	61a5      	strmi	r5, [r4, #24]
 801c890:	bf58      	it	pl
 801c892:	60a5      	strpl	r5, [r4, #8]
 801c894:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801c896:	07d2      	lsls	r2, r2, #31
 801c898:	d401      	bmi.n	801c89e <setvbuf+0x12e>
 801c89a:	059b      	lsls	r3, r3, #22
 801c89c:	d513      	bpl.n	801c8c6 <setvbuf+0x156>
 801c89e:	2500      	movs	r5, #0
 801c8a0:	e7d5      	b.n	801c84e <setvbuf+0xde>
 801c8a2:	4648      	mov	r0, r9
 801c8a4:	f7ff fce8 	bl	801c278 <malloc>
 801c8a8:	4606      	mov	r6, r0
 801c8aa:	2800      	cmp	r0, #0
 801c8ac:	d0b8      	beq.n	801c820 <setvbuf+0xb0>
 801c8ae:	89a3      	ldrh	r3, [r4, #12]
 801c8b0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801c8b4:	81a3      	strh	r3, [r4, #12]
 801c8b6:	464d      	mov	r5, r9
 801c8b8:	e7cf      	b.n	801c85a <setvbuf+0xea>
 801c8ba:	2500      	movs	r5, #0
 801c8bc:	e7b2      	b.n	801c824 <setvbuf+0xb4>
 801c8be:	46a9      	mov	r9, r5
 801c8c0:	e7f5      	b.n	801c8ae <setvbuf+0x13e>
 801c8c2:	60a2      	str	r2, [r4, #8]
 801c8c4:	e7e6      	b.n	801c894 <setvbuf+0x124>
 801c8c6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801c8c8:	f000 f9c4 	bl	801cc54 <__retarget_lock_release_recursive>
 801c8cc:	e7e7      	b.n	801c89e <setvbuf+0x12e>
 801c8ce:	f04f 35ff 	mov.w	r5, #4294967295
 801c8d2:	e7bc      	b.n	801c84e <setvbuf+0xde>
 801c8d4:	2000003c 	.word	0x2000003c

0801c8d8 <__sread>:
 801c8d8:	b510      	push	{r4, lr}
 801c8da:	460c      	mov	r4, r1
 801c8dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c8e0:	f000 f958 	bl	801cb94 <_read_r>
 801c8e4:	2800      	cmp	r0, #0
 801c8e6:	bfab      	itete	ge
 801c8e8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 801c8ea:	89a3      	ldrhlt	r3, [r4, #12]
 801c8ec:	181b      	addge	r3, r3, r0
 801c8ee:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 801c8f2:	bfac      	ite	ge
 801c8f4:	6563      	strge	r3, [r4, #84]	@ 0x54
 801c8f6:	81a3      	strhlt	r3, [r4, #12]
 801c8f8:	bd10      	pop	{r4, pc}

0801c8fa <__swrite>:
 801c8fa:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801c8fe:	461f      	mov	r7, r3
 801c900:	898b      	ldrh	r3, [r1, #12]
 801c902:	05db      	lsls	r3, r3, #23
 801c904:	4605      	mov	r5, r0
 801c906:	460c      	mov	r4, r1
 801c908:	4616      	mov	r6, r2
 801c90a:	d505      	bpl.n	801c918 <__swrite+0x1e>
 801c90c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c910:	2302      	movs	r3, #2
 801c912:	2200      	movs	r2, #0
 801c914:	f000 f92c 	bl	801cb70 <_lseek_r>
 801c918:	89a3      	ldrh	r3, [r4, #12]
 801c91a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801c91e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801c922:	81a3      	strh	r3, [r4, #12]
 801c924:	4632      	mov	r2, r6
 801c926:	463b      	mov	r3, r7
 801c928:	4628      	mov	r0, r5
 801c92a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801c92e:	f000 b953 	b.w	801cbd8 <_write_r>

0801c932 <__sseek>:
 801c932:	b510      	push	{r4, lr}
 801c934:	460c      	mov	r4, r1
 801c936:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c93a:	f000 f919 	bl	801cb70 <_lseek_r>
 801c93e:	1c43      	adds	r3, r0, #1
 801c940:	89a3      	ldrh	r3, [r4, #12]
 801c942:	bf15      	itete	ne
 801c944:	6560      	strne	r0, [r4, #84]	@ 0x54
 801c946:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801c94a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801c94e:	81a3      	strheq	r3, [r4, #12]
 801c950:	bf18      	it	ne
 801c952:	81a3      	strhne	r3, [r4, #12]
 801c954:	bd10      	pop	{r4, pc}

0801c956 <__sclose>:
 801c956:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801c95a:	f000 b8f9 	b.w	801cb50 <_close_r>

0801c95e <__swbuf_r>:
 801c95e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c960:	460e      	mov	r6, r1
 801c962:	4614      	mov	r4, r2
 801c964:	4605      	mov	r5, r0
 801c966:	b118      	cbz	r0, 801c970 <__swbuf_r+0x12>
 801c968:	6a03      	ldr	r3, [r0, #32]
 801c96a:	b90b      	cbnz	r3, 801c970 <__swbuf_r+0x12>
 801c96c:	f7ff fe52 	bl	801c614 <__sinit>
 801c970:	69a3      	ldr	r3, [r4, #24]
 801c972:	60a3      	str	r3, [r4, #8]
 801c974:	89a3      	ldrh	r3, [r4, #12]
 801c976:	071a      	lsls	r2, r3, #28
 801c978:	d501      	bpl.n	801c97e <__swbuf_r+0x20>
 801c97a:	6923      	ldr	r3, [r4, #16]
 801c97c:	b943      	cbnz	r3, 801c990 <__swbuf_r+0x32>
 801c97e:	4621      	mov	r1, r4
 801c980:	4628      	mov	r0, r5
 801c982:	f000 f82b 	bl	801c9dc <__swsetup_r>
 801c986:	b118      	cbz	r0, 801c990 <__swbuf_r+0x32>
 801c988:	f04f 37ff 	mov.w	r7, #4294967295
 801c98c:	4638      	mov	r0, r7
 801c98e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c990:	6823      	ldr	r3, [r4, #0]
 801c992:	6922      	ldr	r2, [r4, #16]
 801c994:	1a98      	subs	r0, r3, r2
 801c996:	6963      	ldr	r3, [r4, #20]
 801c998:	b2f6      	uxtb	r6, r6
 801c99a:	4283      	cmp	r3, r0
 801c99c:	4637      	mov	r7, r6
 801c99e:	dc05      	bgt.n	801c9ac <__swbuf_r+0x4e>
 801c9a0:	4621      	mov	r1, r4
 801c9a2:	4628      	mov	r0, r5
 801c9a4:	f000 fd1c 	bl	801d3e0 <_fflush_r>
 801c9a8:	2800      	cmp	r0, #0
 801c9aa:	d1ed      	bne.n	801c988 <__swbuf_r+0x2a>
 801c9ac:	68a3      	ldr	r3, [r4, #8]
 801c9ae:	3b01      	subs	r3, #1
 801c9b0:	60a3      	str	r3, [r4, #8]
 801c9b2:	6823      	ldr	r3, [r4, #0]
 801c9b4:	1c5a      	adds	r2, r3, #1
 801c9b6:	6022      	str	r2, [r4, #0]
 801c9b8:	701e      	strb	r6, [r3, #0]
 801c9ba:	6962      	ldr	r2, [r4, #20]
 801c9bc:	1c43      	adds	r3, r0, #1
 801c9be:	429a      	cmp	r2, r3
 801c9c0:	d004      	beq.n	801c9cc <__swbuf_r+0x6e>
 801c9c2:	89a3      	ldrh	r3, [r4, #12]
 801c9c4:	07db      	lsls	r3, r3, #31
 801c9c6:	d5e1      	bpl.n	801c98c <__swbuf_r+0x2e>
 801c9c8:	2e0a      	cmp	r6, #10
 801c9ca:	d1df      	bne.n	801c98c <__swbuf_r+0x2e>
 801c9cc:	4621      	mov	r1, r4
 801c9ce:	4628      	mov	r0, r5
 801c9d0:	f000 fd06 	bl	801d3e0 <_fflush_r>
 801c9d4:	2800      	cmp	r0, #0
 801c9d6:	d0d9      	beq.n	801c98c <__swbuf_r+0x2e>
 801c9d8:	e7d6      	b.n	801c988 <__swbuf_r+0x2a>
	...

0801c9dc <__swsetup_r>:
 801c9dc:	b538      	push	{r3, r4, r5, lr}
 801c9de:	4b29      	ldr	r3, [pc, #164]	@ (801ca84 <__swsetup_r+0xa8>)
 801c9e0:	4605      	mov	r5, r0
 801c9e2:	6818      	ldr	r0, [r3, #0]
 801c9e4:	460c      	mov	r4, r1
 801c9e6:	b118      	cbz	r0, 801c9f0 <__swsetup_r+0x14>
 801c9e8:	6a03      	ldr	r3, [r0, #32]
 801c9ea:	b90b      	cbnz	r3, 801c9f0 <__swsetup_r+0x14>
 801c9ec:	f7ff fe12 	bl	801c614 <__sinit>
 801c9f0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801c9f4:	0719      	lsls	r1, r3, #28
 801c9f6:	d422      	bmi.n	801ca3e <__swsetup_r+0x62>
 801c9f8:	06da      	lsls	r2, r3, #27
 801c9fa:	d407      	bmi.n	801ca0c <__swsetup_r+0x30>
 801c9fc:	2209      	movs	r2, #9
 801c9fe:	602a      	str	r2, [r5, #0]
 801ca00:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801ca04:	81a3      	strh	r3, [r4, #12]
 801ca06:	f04f 30ff 	mov.w	r0, #4294967295
 801ca0a:	e033      	b.n	801ca74 <__swsetup_r+0x98>
 801ca0c:	0758      	lsls	r0, r3, #29
 801ca0e:	d512      	bpl.n	801ca36 <__swsetup_r+0x5a>
 801ca10:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ca12:	b141      	cbz	r1, 801ca26 <__swsetup_r+0x4a>
 801ca14:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801ca18:	4299      	cmp	r1, r3
 801ca1a:	d002      	beq.n	801ca22 <__swsetup_r+0x46>
 801ca1c:	4628      	mov	r0, r5
 801ca1e:	f000 f941 	bl	801cca4 <_free_r>
 801ca22:	2300      	movs	r3, #0
 801ca24:	6363      	str	r3, [r4, #52]	@ 0x34
 801ca26:	89a3      	ldrh	r3, [r4, #12]
 801ca28:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 801ca2c:	81a3      	strh	r3, [r4, #12]
 801ca2e:	2300      	movs	r3, #0
 801ca30:	6063      	str	r3, [r4, #4]
 801ca32:	6923      	ldr	r3, [r4, #16]
 801ca34:	6023      	str	r3, [r4, #0]
 801ca36:	89a3      	ldrh	r3, [r4, #12]
 801ca38:	f043 0308 	orr.w	r3, r3, #8
 801ca3c:	81a3      	strh	r3, [r4, #12]
 801ca3e:	6923      	ldr	r3, [r4, #16]
 801ca40:	b94b      	cbnz	r3, 801ca56 <__swsetup_r+0x7a>
 801ca42:	89a3      	ldrh	r3, [r4, #12]
 801ca44:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 801ca48:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 801ca4c:	d003      	beq.n	801ca56 <__swsetup_r+0x7a>
 801ca4e:	4621      	mov	r1, r4
 801ca50:	4628      	mov	r0, r5
 801ca52:	f000 fd25 	bl	801d4a0 <__smakebuf_r>
 801ca56:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801ca5a:	f013 0201 	ands.w	r2, r3, #1
 801ca5e:	d00a      	beq.n	801ca76 <__swsetup_r+0x9a>
 801ca60:	2200      	movs	r2, #0
 801ca62:	60a2      	str	r2, [r4, #8]
 801ca64:	6962      	ldr	r2, [r4, #20]
 801ca66:	4252      	negs	r2, r2
 801ca68:	61a2      	str	r2, [r4, #24]
 801ca6a:	6922      	ldr	r2, [r4, #16]
 801ca6c:	b942      	cbnz	r2, 801ca80 <__swsetup_r+0xa4>
 801ca6e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 801ca72:	d1c5      	bne.n	801ca00 <__swsetup_r+0x24>
 801ca74:	bd38      	pop	{r3, r4, r5, pc}
 801ca76:	0799      	lsls	r1, r3, #30
 801ca78:	bf58      	it	pl
 801ca7a:	6962      	ldrpl	r2, [r4, #20]
 801ca7c:	60a2      	str	r2, [r4, #8]
 801ca7e:	e7f4      	b.n	801ca6a <__swsetup_r+0x8e>
 801ca80:	2000      	movs	r0, #0
 801ca82:	e7f7      	b.n	801ca74 <__swsetup_r+0x98>
 801ca84:	2000003c 	.word	0x2000003c

0801ca88 <memset>:
 801ca88:	4402      	add	r2, r0
 801ca8a:	4603      	mov	r3, r0
 801ca8c:	4293      	cmp	r3, r2
 801ca8e:	d100      	bne.n	801ca92 <memset+0xa>
 801ca90:	4770      	bx	lr
 801ca92:	f803 1b01 	strb.w	r1, [r3], #1
 801ca96:	e7f9      	b.n	801ca8c <memset+0x4>

0801ca98 <strtok>:
 801ca98:	4b16      	ldr	r3, [pc, #88]	@ (801caf4 <strtok+0x5c>)
 801ca9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801ca9e:	681f      	ldr	r7, [r3, #0]
 801caa0:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 801caa2:	4605      	mov	r5, r0
 801caa4:	460e      	mov	r6, r1
 801caa6:	b9ec      	cbnz	r4, 801cae4 <strtok+0x4c>
 801caa8:	2050      	movs	r0, #80	@ 0x50
 801caaa:	f7ff fbe5 	bl	801c278 <malloc>
 801caae:	4602      	mov	r2, r0
 801cab0:	6478      	str	r0, [r7, #68]	@ 0x44
 801cab2:	b920      	cbnz	r0, 801cabe <strtok+0x26>
 801cab4:	4b10      	ldr	r3, [pc, #64]	@ (801caf8 <strtok+0x60>)
 801cab6:	4811      	ldr	r0, [pc, #68]	@ (801cafc <strtok+0x64>)
 801cab8:	215b      	movs	r1, #91	@ 0x5b
 801caba:	f000 f8d5 	bl	801cc68 <__assert_func>
 801cabe:	e9c0 4400 	strd	r4, r4, [r0]
 801cac2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 801cac6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 801caca:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 801cace:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 801cad2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 801cad6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 801cada:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 801cade:	6184      	str	r4, [r0, #24]
 801cae0:	7704      	strb	r4, [r0, #28]
 801cae2:	6244      	str	r4, [r0, #36]	@ 0x24
 801cae4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801cae6:	4631      	mov	r1, r6
 801cae8:	4628      	mov	r0, r5
 801caea:	2301      	movs	r3, #1
 801caec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801caf0:	f000 b806 	b.w	801cb00 <__strtok_r>
 801caf4:	2000003c 	.word	0x2000003c
 801caf8:	0801e459 	.word	0x0801e459
 801cafc:	0801e470 	.word	0x0801e470

0801cb00 <__strtok_r>:
 801cb00:	b5f0      	push	{r4, r5, r6, r7, lr}
 801cb02:	4604      	mov	r4, r0
 801cb04:	b908      	cbnz	r0, 801cb0a <__strtok_r+0xa>
 801cb06:	6814      	ldr	r4, [r2, #0]
 801cb08:	b144      	cbz	r4, 801cb1c <__strtok_r+0x1c>
 801cb0a:	4620      	mov	r0, r4
 801cb0c:	f814 5b01 	ldrb.w	r5, [r4], #1
 801cb10:	460f      	mov	r7, r1
 801cb12:	f817 6b01 	ldrb.w	r6, [r7], #1
 801cb16:	b91e      	cbnz	r6, 801cb20 <__strtok_r+0x20>
 801cb18:	b965      	cbnz	r5, 801cb34 <__strtok_r+0x34>
 801cb1a:	6015      	str	r5, [r2, #0]
 801cb1c:	2000      	movs	r0, #0
 801cb1e:	e005      	b.n	801cb2c <__strtok_r+0x2c>
 801cb20:	42b5      	cmp	r5, r6
 801cb22:	d1f6      	bne.n	801cb12 <__strtok_r+0x12>
 801cb24:	2b00      	cmp	r3, #0
 801cb26:	d1f0      	bne.n	801cb0a <__strtok_r+0xa>
 801cb28:	6014      	str	r4, [r2, #0]
 801cb2a:	7003      	strb	r3, [r0, #0]
 801cb2c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801cb2e:	461c      	mov	r4, r3
 801cb30:	e00c      	b.n	801cb4c <__strtok_r+0x4c>
 801cb32:	b915      	cbnz	r5, 801cb3a <__strtok_r+0x3a>
 801cb34:	f814 3b01 	ldrb.w	r3, [r4], #1
 801cb38:	460e      	mov	r6, r1
 801cb3a:	f816 5b01 	ldrb.w	r5, [r6], #1
 801cb3e:	42ab      	cmp	r3, r5
 801cb40:	d1f7      	bne.n	801cb32 <__strtok_r+0x32>
 801cb42:	2b00      	cmp	r3, #0
 801cb44:	d0f3      	beq.n	801cb2e <__strtok_r+0x2e>
 801cb46:	2300      	movs	r3, #0
 801cb48:	f804 3c01 	strb.w	r3, [r4, #-1]
 801cb4c:	6014      	str	r4, [r2, #0]
 801cb4e:	e7ed      	b.n	801cb2c <__strtok_r+0x2c>

0801cb50 <_close_r>:
 801cb50:	b538      	push	{r3, r4, r5, lr}
 801cb52:	4d06      	ldr	r5, [pc, #24]	@ (801cb6c <_close_r+0x1c>)
 801cb54:	2300      	movs	r3, #0
 801cb56:	4604      	mov	r4, r0
 801cb58:	4608      	mov	r0, r1
 801cb5a:	602b      	str	r3, [r5, #0]
 801cb5c:	f7f5 fe50 	bl	8012800 <_close>
 801cb60:	1c43      	adds	r3, r0, #1
 801cb62:	d102      	bne.n	801cb6a <_close_r+0x1a>
 801cb64:	682b      	ldr	r3, [r5, #0]
 801cb66:	b103      	cbz	r3, 801cb6a <_close_r+0x1a>
 801cb68:	6023      	str	r3, [r4, #0]
 801cb6a:	bd38      	pop	{r3, r4, r5, pc}
 801cb6c:	200006ac 	.word	0x200006ac

0801cb70 <_lseek_r>:
 801cb70:	b538      	push	{r3, r4, r5, lr}
 801cb72:	4d07      	ldr	r5, [pc, #28]	@ (801cb90 <_lseek_r+0x20>)
 801cb74:	4604      	mov	r4, r0
 801cb76:	4608      	mov	r0, r1
 801cb78:	4611      	mov	r1, r2
 801cb7a:	2200      	movs	r2, #0
 801cb7c:	602a      	str	r2, [r5, #0]
 801cb7e:	461a      	mov	r2, r3
 801cb80:	f7f5 fe65 	bl	801284e <_lseek>
 801cb84:	1c43      	adds	r3, r0, #1
 801cb86:	d102      	bne.n	801cb8e <_lseek_r+0x1e>
 801cb88:	682b      	ldr	r3, [r5, #0]
 801cb8a:	b103      	cbz	r3, 801cb8e <_lseek_r+0x1e>
 801cb8c:	6023      	str	r3, [r4, #0]
 801cb8e:	bd38      	pop	{r3, r4, r5, pc}
 801cb90:	200006ac 	.word	0x200006ac

0801cb94 <_read_r>:
 801cb94:	b538      	push	{r3, r4, r5, lr}
 801cb96:	4d07      	ldr	r5, [pc, #28]	@ (801cbb4 <_read_r+0x20>)
 801cb98:	4604      	mov	r4, r0
 801cb9a:	4608      	mov	r0, r1
 801cb9c:	4611      	mov	r1, r2
 801cb9e:	2200      	movs	r2, #0
 801cba0:	602a      	str	r2, [r5, #0]
 801cba2:	461a      	mov	r2, r3
 801cba4:	f7f5 fe0f 	bl	80127c6 <_read>
 801cba8:	1c43      	adds	r3, r0, #1
 801cbaa:	d102      	bne.n	801cbb2 <_read_r+0x1e>
 801cbac:	682b      	ldr	r3, [r5, #0]
 801cbae:	b103      	cbz	r3, 801cbb2 <_read_r+0x1e>
 801cbb0:	6023      	str	r3, [r4, #0]
 801cbb2:	bd38      	pop	{r3, r4, r5, pc}
 801cbb4:	200006ac 	.word	0x200006ac

0801cbb8 <_sbrk_r>:
 801cbb8:	b538      	push	{r3, r4, r5, lr}
 801cbba:	4d06      	ldr	r5, [pc, #24]	@ (801cbd4 <_sbrk_r+0x1c>)
 801cbbc:	2300      	movs	r3, #0
 801cbbe:	4604      	mov	r4, r0
 801cbc0:	4608      	mov	r0, r1
 801cbc2:	602b      	str	r3, [r5, #0]
 801cbc4:	f7f5 fe50 	bl	8012868 <_sbrk>
 801cbc8:	1c43      	adds	r3, r0, #1
 801cbca:	d102      	bne.n	801cbd2 <_sbrk_r+0x1a>
 801cbcc:	682b      	ldr	r3, [r5, #0]
 801cbce:	b103      	cbz	r3, 801cbd2 <_sbrk_r+0x1a>
 801cbd0:	6023      	str	r3, [r4, #0]
 801cbd2:	bd38      	pop	{r3, r4, r5, pc}
 801cbd4:	200006ac 	.word	0x200006ac

0801cbd8 <_write_r>:
 801cbd8:	b538      	push	{r3, r4, r5, lr}
 801cbda:	4d07      	ldr	r5, [pc, #28]	@ (801cbf8 <_write_r+0x20>)
 801cbdc:	4604      	mov	r4, r0
 801cbde:	4608      	mov	r0, r1
 801cbe0:	4611      	mov	r1, r2
 801cbe2:	2200      	movs	r2, #0
 801cbe4:	602a      	str	r2, [r5, #0]
 801cbe6:	461a      	mov	r2, r3
 801cbe8:	f7f4 fd6e 	bl	80116c8 <_write>
 801cbec:	1c43      	adds	r3, r0, #1
 801cbee:	d102      	bne.n	801cbf6 <_write_r+0x1e>
 801cbf0:	682b      	ldr	r3, [r5, #0]
 801cbf2:	b103      	cbz	r3, 801cbf6 <_write_r+0x1e>
 801cbf4:	6023      	str	r3, [r4, #0]
 801cbf6:	bd38      	pop	{r3, r4, r5, pc}
 801cbf8:	200006ac 	.word	0x200006ac

0801cbfc <__errno>:
 801cbfc:	4b01      	ldr	r3, [pc, #4]	@ (801cc04 <__errno+0x8>)
 801cbfe:	6818      	ldr	r0, [r3, #0]
 801cc00:	4770      	bx	lr
 801cc02:	bf00      	nop
 801cc04:	2000003c 	.word	0x2000003c

0801cc08 <__libc_init_array>:
 801cc08:	b570      	push	{r4, r5, r6, lr}
 801cc0a:	4d0d      	ldr	r5, [pc, #52]	@ (801cc40 <__libc_init_array+0x38>)
 801cc0c:	4c0d      	ldr	r4, [pc, #52]	@ (801cc44 <__libc_init_array+0x3c>)
 801cc0e:	1b64      	subs	r4, r4, r5
 801cc10:	10a4      	asrs	r4, r4, #2
 801cc12:	2600      	movs	r6, #0
 801cc14:	42a6      	cmp	r6, r4
 801cc16:	d109      	bne.n	801cc2c <__libc_init_array+0x24>
 801cc18:	4d0b      	ldr	r5, [pc, #44]	@ (801cc48 <__libc_init_array+0x40>)
 801cc1a:	4c0c      	ldr	r4, [pc, #48]	@ (801cc4c <__libc_init_array+0x44>)
 801cc1c:	f000 fcea 	bl	801d5f4 <_init>
 801cc20:	1b64      	subs	r4, r4, r5
 801cc22:	10a4      	asrs	r4, r4, #2
 801cc24:	2600      	movs	r6, #0
 801cc26:	42a6      	cmp	r6, r4
 801cc28:	d105      	bne.n	801cc36 <__libc_init_array+0x2e>
 801cc2a:	bd70      	pop	{r4, r5, r6, pc}
 801cc2c:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc30:	4798      	blx	r3
 801cc32:	3601      	adds	r6, #1
 801cc34:	e7ee      	b.n	801cc14 <__libc_init_array+0xc>
 801cc36:	f855 3b04 	ldr.w	r3, [r5], #4
 801cc3a:	4798      	blx	r3
 801cc3c:	3601      	adds	r6, #1
 801cc3e:	e7f2      	b.n	801cc26 <__libc_init_array+0x1e>
 801cc40:	0801e544 	.word	0x0801e544
 801cc44:	0801e544 	.word	0x0801e544
 801cc48:	0801e544 	.word	0x0801e544
 801cc4c:	0801e548 	.word	0x0801e548

0801cc50 <__retarget_lock_init_recursive>:
 801cc50:	4770      	bx	lr

0801cc52 <__retarget_lock_acquire_recursive>:
 801cc52:	4770      	bx	lr

0801cc54 <__retarget_lock_release_recursive>:
 801cc54:	4770      	bx	lr

0801cc56 <strcpy>:
 801cc56:	4603      	mov	r3, r0
 801cc58:	f811 2b01 	ldrb.w	r2, [r1], #1
 801cc5c:	f803 2b01 	strb.w	r2, [r3], #1
 801cc60:	2a00      	cmp	r2, #0
 801cc62:	d1f9      	bne.n	801cc58 <strcpy+0x2>
 801cc64:	4770      	bx	lr
	...

0801cc68 <__assert_func>:
 801cc68:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801cc6a:	4614      	mov	r4, r2
 801cc6c:	461a      	mov	r2, r3
 801cc6e:	4b09      	ldr	r3, [pc, #36]	@ (801cc94 <__assert_func+0x2c>)
 801cc70:	681b      	ldr	r3, [r3, #0]
 801cc72:	4605      	mov	r5, r0
 801cc74:	68d8      	ldr	r0, [r3, #12]
 801cc76:	b954      	cbnz	r4, 801cc8e <__assert_func+0x26>
 801cc78:	4b07      	ldr	r3, [pc, #28]	@ (801cc98 <__assert_func+0x30>)
 801cc7a:	461c      	mov	r4, r3
 801cc7c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801cc80:	9100      	str	r1, [sp, #0]
 801cc82:	462b      	mov	r3, r5
 801cc84:	4905      	ldr	r1, [pc, #20]	@ (801cc9c <__assert_func+0x34>)
 801cc86:	f000 fbd3 	bl	801d430 <fiprintf>
 801cc8a:	f000 fc67 	bl	801d55c <abort>
 801cc8e:	4b04      	ldr	r3, [pc, #16]	@ (801cca0 <__assert_func+0x38>)
 801cc90:	e7f4      	b.n	801cc7c <__assert_func+0x14>
 801cc92:	bf00      	nop
 801cc94:	2000003c 	.word	0x2000003c
 801cc98:	0801e505 	.word	0x0801e505
 801cc9c:	0801e4d7 	.word	0x0801e4d7
 801cca0:	0801e4ca 	.word	0x0801e4ca

0801cca4 <_free_r>:
 801cca4:	b538      	push	{r3, r4, r5, lr}
 801cca6:	4605      	mov	r5, r0
 801cca8:	2900      	cmp	r1, #0
 801ccaa:	d041      	beq.n	801cd30 <_free_r+0x8c>
 801ccac:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801ccb0:	1f0c      	subs	r4, r1, #4
 801ccb2:	2b00      	cmp	r3, #0
 801ccb4:	bfb8      	it	lt
 801ccb6:	18e4      	addlt	r4, r4, r3
 801ccb8:	f7ff fb90 	bl	801c3dc <__malloc_lock>
 801ccbc:	4a1d      	ldr	r2, [pc, #116]	@ (801cd34 <_free_r+0x90>)
 801ccbe:	6813      	ldr	r3, [r2, #0]
 801ccc0:	b933      	cbnz	r3, 801ccd0 <_free_r+0x2c>
 801ccc2:	6063      	str	r3, [r4, #4]
 801ccc4:	6014      	str	r4, [r2, #0]
 801ccc6:	4628      	mov	r0, r5
 801ccc8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801cccc:	f7ff bb8c 	b.w	801c3e8 <__malloc_unlock>
 801ccd0:	42a3      	cmp	r3, r4
 801ccd2:	d908      	bls.n	801cce6 <_free_r+0x42>
 801ccd4:	6820      	ldr	r0, [r4, #0]
 801ccd6:	1821      	adds	r1, r4, r0
 801ccd8:	428b      	cmp	r3, r1
 801ccda:	bf01      	itttt	eq
 801ccdc:	6819      	ldreq	r1, [r3, #0]
 801ccde:	685b      	ldreq	r3, [r3, #4]
 801cce0:	1809      	addeq	r1, r1, r0
 801cce2:	6021      	streq	r1, [r4, #0]
 801cce4:	e7ed      	b.n	801ccc2 <_free_r+0x1e>
 801cce6:	461a      	mov	r2, r3
 801cce8:	685b      	ldr	r3, [r3, #4]
 801ccea:	b10b      	cbz	r3, 801ccf0 <_free_r+0x4c>
 801ccec:	42a3      	cmp	r3, r4
 801ccee:	d9fa      	bls.n	801cce6 <_free_r+0x42>
 801ccf0:	6811      	ldr	r1, [r2, #0]
 801ccf2:	1850      	adds	r0, r2, r1
 801ccf4:	42a0      	cmp	r0, r4
 801ccf6:	d10b      	bne.n	801cd10 <_free_r+0x6c>
 801ccf8:	6820      	ldr	r0, [r4, #0]
 801ccfa:	4401      	add	r1, r0
 801ccfc:	1850      	adds	r0, r2, r1
 801ccfe:	4283      	cmp	r3, r0
 801cd00:	6011      	str	r1, [r2, #0]
 801cd02:	d1e0      	bne.n	801ccc6 <_free_r+0x22>
 801cd04:	6818      	ldr	r0, [r3, #0]
 801cd06:	685b      	ldr	r3, [r3, #4]
 801cd08:	6053      	str	r3, [r2, #4]
 801cd0a:	4408      	add	r0, r1
 801cd0c:	6010      	str	r0, [r2, #0]
 801cd0e:	e7da      	b.n	801ccc6 <_free_r+0x22>
 801cd10:	d902      	bls.n	801cd18 <_free_r+0x74>
 801cd12:	230c      	movs	r3, #12
 801cd14:	602b      	str	r3, [r5, #0]
 801cd16:	e7d6      	b.n	801ccc6 <_free_r+0x22>
 801cd18:	6820      	ldr	r0, [r4, #0]
 801cd1a:	1821      	adds	r1, r4, r0
 801cd1c:	428b      	cmp	r3, r1
 801cd1e:	bf04      	itt	eq
 801cd20:	6819      	ldreq	r1, [r3, #0]
 801cd22:	685b      	ldreq	r3, [r3, #4]
 801cd24:	6063      	str	r3, [r4, #4]
 801cd26:	bf04      	itt	eq
 801cd28:	1809      	addeq	r1, r1, r0
 801cd2a:	6021      	streq	r1, [r4, #0]
 801cd2c:	6054      	str	r4, [r2, #4]
 801cd2e:	e7ca      	b.n	801ccc6 <_free_r+0x22>
 801cd30:	bd38      	pop	{r3, r4, r5, pc}
 801cd32:	bf00      	nop
 801cd34:	2000056c 	.word	0x2000056c

0801cd38 <__sfputc_r>:
 801cd38:	6893      	ldr	r3, [r2, #8]
 801cd3a:	3b01      	subs	r3, #1
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	b410      	push	{r4}
 801cd40:	6093      	str	r3, [r2, #8]
 801cd42:	da08      	bge.n	801cd56 <__sfputc_r+0x1e>
 801cd44:	6994      	ldr	r4, [r2, #24]
 801cd46:	42a3      	cmp	r3, r4
 801cd48:	db01      	blt.n	801cd4e <__sfputc_r+0x16>
 801cd4a:	290a      	cmp	r1, #10
 801cd4c:	d103      	bne.n	801cd56 <__sfputc_r+0x1e>
 801cd4e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd52:	f7ff be04 	b.w	801c95e <__swbuf_r>
 801cd56:	6813      	ldr	r3, [r2, #0]
 801cd58:	1c58      	adds	r0, r3, #1
 801cd5a:	6010      	str	r0, [r2, #0]
 801cd5c:	7019      	strb	r1, [r3, #0]
 801cd5e:	4608      	mov	r0, r1
 801cd60:	f85d 4b04 	ldr.w	r4, [sp], #4
 801cd64:	4770      	bx	lr

0801cd66 <__sfputs_r>:
 801cd66:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801cd68:	4606      	mov	r6, r0
 801cd6a:	460f      	mov	r7, r1
 801cd6c:	4614      	mov	r4, r2
 801cd6e:	18d5      	adds	r5, r2, r3
 801cd70:	42ac      	cmp	r4, r5
 801cd72:	d101      	bne.n	801cd78 <__sfputs_r+0x12>
 801cd74:	2000      	movs	r0, #0
 801cd76:	e007      	b.n	801cd88 <__sfputs_r+0x22>
 801cd78:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cd7c:	463a      	mov	r2, r7
 801cd7e:	4630      	mov	r0, r6
 801cd80:	f7ff ffda 	bl	801cd38 <__sfputc_r>
 801cd84:	1c43      	adds	r3, r0, #1
 801cd86:	d1f3      	bne.n	801cd70 <__sfputs_r+0xa>
 801cd88:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801cd8c <_vfiprintf_r>:
 801cd8c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801cd90:	460d      	mov	r5, r1
 801cd92:	b09d      	sub	sp, #116	@ 0x74
 801cd94:	4614      	mov	r4, r2
 801cd96:	4698      	mov	r8, r3
 801cd98:	4606      	mov	r6, r0
 801cd9a:	b118      	cbz	r0, 801cda4 <_vfiprintf_r+0x18>
 801cd9c:	6a03      	ldr	r3, [r0, #32]
 801cd9e:	b90b      	cbnz	r3, 801cda4 <_vfiprintf_r+0x18>
 801cda0:	f7ff fc38 	bl	801c614 <__sinit>
 801cda4:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cda6:	07d9      	lsls	r1, r3, #31
 801cda8:	d405      	bmi.n	801cdb6 <_vfiprintf_r+0x2a>
 801cdaa:	89ab      	ldrh	r3, [r5, #12]
 801cdac:	059a      	lsls	r2, r3, #22
 801cdae:	d402      	bmi.n	801cdb6 <_vfiprintf_r+0x2a>
 801cdb0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cdb2:	f7ff ff4e 	bl	801cc52 <__retarget_lock_acquire_recursive>
 801cdb6:	89ab      	ldrh	r3, [r5, #12]
 801cdb8:	071b      	lsls	r3, r3, #28
 801cdba:	d501      	bpl.n	801cdc0 <_vfiprintf_r+0x34>
 801cdbc:	692b      	ldr	r3, [r5, #16]
 801cdbe:	b99b      	cbnz	r3, 801cde8 <_vfiprintf_r+0x5c>
 801cdc0:	4629      	mov	r1, r5
 801cdc2:	4630      	mov	r0, r6
 801cdc4:	f7ff fe0a 	bl	801c9dc <__swsetup_r>
 801cdc8:	b170      	cbz	r0, 801cde8 <_vfiprintf_r+0x5c>
 801cdca:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cdcc:	07dc      	lsls	r4, r3, #31
 801cdce:	d504      	bpl.n	801cdda <_vfiprintf_r+0x4e>
 801cdd0:	f04f 30ff 	mov.w	r0, #4294967295
 801cdd4:	b01d      	add	sp, #116	@ 0x74
 801cdd6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801cdda:	89ab      	ldrh	r3, [r5, #12]
 801cddc:	0598      	lsls	r0, r3, #22
 801cdde:	d4f7      	bmi.n	801cdd0 <_vfiprintf_r+0x44>
 801cde0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cde2:	f7ff ff37 	bl	801cc54 <__retarget_lock_release_recursive>
 801cde6:	e7f3      	b.n	801cdd0 <_vfiprintf_r+0x44>
 801cde8:	2300      	movs	r3, #0
 801cdea:	9309      	str	r3, [sp, #36]	@ 0x24
 801cdec:	2320      	movs	r3, #32
 801cdee:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 801cdf2:	f8cd 800c 	str.w	r8, [sp, #12]
 801cdf6:	2330      	movs	r3, #48	@ 0x30
 801cdf8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 801cfa8 <_vfiprintf_r+0x21c>
 801cdfc:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 801ce00:	f04f 0901 	mov.w	r9, #1
 801ce04:	4623      	mov	r3, r4
 801ce06:	469a      	mov	sl, r3
 801ce08:	f813 2b01 	ldrb.w	r2, [r3], #1
 801ce0c:	b10a      	cbz	r2, 801ce12 <_vfiprintf_r+0x86>
 801ce0e:	2a25      	cmp	r2, #37	@ 0x25
 801ce10:	d1f9      	bne.n	801ce06 <_vfiprintf_r+0x7a>
 801ce12:	ebba 0b04 	subs.w	fp, sl, r4
 801ce16:	d00b      	beq.n	801ce30 <_vfiprintf_r+0xa4>
 801ce18:	465b      	mov	r3, fp
 801ce1a:	4622      	mov	r2, r4
 801ce1c:	4629      	mov	r1, r5
 801ce1e:	4630      	mov	r0, r6
 801ce20:	f7ff ffa1 	bl	801cd66 <__sfputs_r>
 801ce24:	3001      	adds	r0, #1
 801ce26:	f000 80a7 	beq.w	801cf78 <_vfiprintf_r+0x1ec>
 801ce2a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ce2c:	445a      	add	r2, fp
 801ce2e:	9209      	str	r2, [sp, #36]	@ 0x24
 801ce30:	f89a 3000 	ldrb.w	r3, [sl]
 801ce34:	2b00      	cmp	r3, #0
 801ce36:	f000 809f 	beq.w	801cf78 <_vfiprintf_r+0x1ec>
 801ce3a:	2300      	movs	r3, #0
 801ce3c:	f04f 32ff 	mov.w	r2, #4294967295
 801ce40:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801ce44:	f10a 0a01 	add.w	sl, sl, #1
 801ce48:	9304      	str	r3, [sp, #16]
 801ce4a:	9307      	str	r3, [sp, #28]
 801ce4c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 801ce50:	931a      	str	r3, [sp, #104]	@ 0x68
 801ce52:	4654      	mov	r4, sl
 801ce54:	2205      	movs	r2, #5
 801ce56:	f814 1b01 	ldrb.w	r1, [r4], #1
 801ce5a:	4853      	ldr	r0, [pc, #332]	@ (801cfa8 <_vfiprintf_r+0x21c>)
 801ce5c:	f7f4 f9f8 	bl	8011250 <memchr>
 801ce60:	9a04      	ldr	r2, [sp, #16]
 801ce62:	b9d8      	cbnz	r0, 801ce9c <_vfiprintf_r+0x110>
 801ce64:	06d1      	lsls	r1, r2, #27
 801ce66:	bf44      	itt	mi
 801ce68:	2320      	movmi	r3, #32
 801ce6a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ce6e:	0713      	lsls	r3, r2, #28
 801ce70:	bf44      	itt	mi
 801ce72:	232b      	movmi	r3, #43	@ 0x2b
 801ce74:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 801ce78:	f89a 3000 	ldrb.w	r3, [sl]
 801ce7c:	2b2a      	cmp	r3, #42	@ 0x2a
 801ce7e:	d015      	beq.n	801ceac <_vfiprintf_r+0x120>
 801ce80:	9a07      	ldr	r2, [sp, #28]
 801ce82:	4654      	mov	r4, sl
 801ce84:	2000      	movs	r0, #0
 801ce86:	f04f 0c0a 	mov.w	ip, #10
 801ce8a:	4621      	mov	r1, r4
 801ce8c:	f811 3b01 	ldrb.w	r3, [r1], #1
 801ce90:	3b30      	subs	r3, #48	@ 0x30
 801ce92:	2b09      	cmp	r3, #9
 801ce94:	d94b      	bls.n	801cf2e <_vfiprintf_r+0x1a2>
 801ce96:	b1b0      	cbz	r0, 801cec6 <_vfiprintf_r+0x13a>
 801ce98:	9207      	str	r2, [sp, #28]
 801ce9a:	e014      	b.n	801cec6 <_vfiprintf_r+0x13a>
 801ce9c:	eba0 0308 	sub.w	r3, r0, r8
 801cea0:	fa09 f303 	lsl.w	r3, r9, r3
 801cea4:	4313      	orrs	r3, r2
 801cea6:	9304      	str	r3, [sp, #16]
 801cea8:	46a2      	mov	sl, r4
 801ceaa:	e7d2      	b.n	801ce52 <_vfiprintf_r+0xc6>
 801ceac:	9b03      	ldr	r3, [sp, #12]
 801ceae:	1d19      	adds	r1, r3, #4
 801ceb0:	681b      	ldr	r3, [r3, #0]
 801ceb2:	9103      	str	r1, [sp, #12]
 801ceb4:	2b00      	cmp	r3, #0
 801ceb6:	bfbb      	ittet	lt
 801ceb8:	425b      	neglt	r3, r3
 801ceba:	f042 0202 	orrlt.w	r2, r2, #2
 801cebe:	9307      	strge	r3, [sp, #28]
 801cec0:	9307      	strlt	r3, [sp, #28]
 801cec2:	bfb8      	it	lt
 801cec4:	9204      	strlt	r2, [sp, #16]
 801cec6:	7823      	ldrb	r3, [r4, #0]
 801cec8:	2b2e      	cmp	r3, #46	@ 0x2e
 801ceca:	d10a      	bne.n	801cee2 <_vfiprintf_r+0x156>
 801cecc:	7863      	ldrb	r3, [r4, #1]
 801cece:	2b2a      	cmp	r3, #42	@ 0x2a
 801ced0:	d132      	bne.n	801cf38 <_vfiprintf_r+0x1ac>
 801ced2:	9b03      	ldr	r3, [sp, #12]
 801ced4:	1d1a      	adds	r2, r3, #4
 801ced6:	681b      	ldr	r3, [r3, #0]
 801ced8:	9203      	str	r2, [sp, #12]
 801ceda:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 801cede:	3402      	adds	r4, #2
 801cee0:	9305      	str	r3, [sp, #20]
 801cee2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 801cfb8 <_vfiprintf_r+0x22c>
 801cee6:	7821      	ldrb	r1, [r4, #0]
 801cee8:	2203      	movs	r2, #3
 801ceea:	4650      	mov	r0, sl
 801ceec:	f7f4 f9b0 	bl	8011250 <memchr>
 801cef0:	b138      	cbz	r0, 801cf02 <_vfiprintf_r+0x176>
 801cef2:	9b04      	ldr	r3, [sp, #16]
 801cef4:	eba0 000a 	sub.w	r0, r0, sl
 801cef8:	2240      	movs	r2, #64	@ 0x40
 801cefa:	4082      	lsls	r2, r0
 801cefc:	4313      	orrs	r3, r2
 801cefe:	3401      	adds	r4, #1
 801cf00:	9304      	str	r3, [sp, #16]
 801cf02:	f814 1b01 	ldrb.w	r1, [r4], #1
 801cf06:	4829      	ldr	r0, [pc, #164]	@ (801cfac <_vfiprintf_r+0x220>)
 801cf08:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 801cf0c:	2206      	movs	r2, #6
 801cf0e:	f7f4 f99f 	bl	8011250 <memchr>
 801cf12:	2800      	cmp	r0, #0
 801cf14:	d03f      	beq.n	801cf96 <_vfiprintf_r+0x20a>
 801cf16:	4b26      	ldr	r3, [pc, #152]	@ (801cfb0 <_vfiprintf_r+0x224>)
 801cf18:	bb1b      	cbnz	r3, 801cf62 <_vfiprintf_r+0x1d6>
 801cf1a:	9b03      	ldr	r3, [sp, #12]
 801cf1c:	3307      	adds	r3, #7
 801cf1e:	f023 0307 	bic.w	r3, r3, #7
 801cf22:	3308      	adds	r3, #8
 801cf24:	9303      	str	r3, [sp, #12]
 801cf26:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cf28:	443b      	add	r3, r7
 801cf2a:	9309      	str	r3, [sp, #36]	@ 0x24
 801cf2c:	e76a      	b.n	801ce04 <_vfiprintf_r+0x78>
 801cf2e:	fb0c 3202 	mla	r2, ip, r2, r3
 801cf32:	460c      	mov	r4, r1
 801cf34:	2001      	movs	r0, #1
 801cf36:	e7a8      	b.n	801ce8a <_vfiprintf_r+0xfe>
 801cf38:	2300      	movs	r3, #0
 801cf3a:	3401      	adds	r4, #1
 801cf3c:	9305      	str	r3, [sp, #20]
 801cf3e:	4619      	mov	r1, r3
 801cf40:	f04f 0c0a 	mov.w	ip, #10
 801cf44:	4620      	mov	r0, r4
 801cf46:	f810 2b01 	ldrb.w	r2, [r0], #1
 801cf4a:	3a30      	subs	r2, #48	@ 0x30
 801cf4c:	2a09      	cmp	r2, #9
 801cf4e:	d903      	bls.n	801cf58 <_vfiprintf_r+0x1cc>
 801cf50:	2b00      	cmp	r3, #0
 801cf52:	d0c6      	beq.n	801cee2 <_vfiprintf_r+0x156>
 801cf54:	9105      	str	r1, [sp, #20]
 801cf56:	e7c4      	b.n	801cee2 <_vfiprintf_r+0x156>
 801cf58:	fb0c 2101 	mla	r1, ip, r1, r2
 801cf5c:	4604      	mov	r4, r0
 801cf5e:	2301      	movs	r3, #1
 801cf60:	e7f0      	b.n	801cf44 <_vfiprintf_r+0x1b8>
 801cf62:	ab03      	add	r3, sp, #12
 801cf64:	9300      	str	r3, [sp, #0]
 801cf66:	462a      	mov	r2, r5
 801cf68:	4b12      	ldr	r3, [pc, #72]	@ (801cfb4 <_vfiprintf_r+0x228>)
 801cf6a:	a904      	add	r1, sp, #16
 801cf6c:	4630      	mov	r0, r6
 801cf6e:	f3af 8000 	nop.w
 801cf72:	4607      	mov	r7, r0
 801cf74:	1c78      	adds	r0, r7, #1
 801cf76:	d1d6      	bne.n	801cf26 <_vfiprintf_r+0x19a>
 801cf78:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 801cf7a:	07d9      	lsls	r1, r3, #31
 801cf7c:	d405      	bmi.n	801cf8a <_vfiprintf_r+0x1fe>
 801cf7e:	89ab      	ldrh	r3, [r5, #12]
 801cf80:	059a      	lsls	r2, r3, #22
 801cf82:	d402      	bmi.n	801cf8a <_vfiprintf_r+0x1fe>
 801cf84:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 801cf86:	f7ff fe65 	bl	801cc54 <__retarget_lock_release_recursive>
 801cf8a:	89ab      	ldrh	r3, [r5, #12]
 801cf8c:	065b      	lsls	r3, r3, #25
 801cf8e:	f53f af1f 	bmi.w	801cdd0 <_vfiprintf_r+0x44>
 801cf92:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801cf94:	e71e      	b.n	801cdd4 <_vfiprintf_r+0x48>
 801cf96:	ab03      	add	r3, sp, #12
 801cf98:	9300      	str	r3, [sp, #0]
 801cf9a:	462a      	mov	r2, r5
 801cf9c:	4b05      	ldr	r3, [pc, #20]	@ (801cfb4 <_vfiprintf_r+0x228>)
 801cf9e:	a904      	add	r1, sp, #16
 801cfa0:	4630      	mov	r0, r6
 801cfa2:	f000 f879 	bl	801d098 <_printf_i>
 801cfa6:	e7e4      	b.n	801cf72 <_vfiprintf_r+0x1e6>
 801cfa8:	0801e506 	.word	0x0801e506
 801cfac:	0801e510 	.word	0x0801e510
 801cfb0:	00000000 	.word	0x00000000
 801cfb4:	0801cd67 	.word	0x0801cd67
 801cfb8:	0801e50c 	.word	0x0801e50c

0801cfbc <_printf_common>:
 801cfbc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801cfc0:	4616      	mov	r6, r2
 801cfc2:	4698      	mov	r8, r3
 801cfc4:	688a      	ldr	r2, [r1, #8]
 801cfc6:	690b      	ldr	r3, [r1, #16]
 801cfc8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 801cfcc:	4293      	cmp	r3, r2
 801cfce:	bfb8      	it	lt
 801cfd0:	4613      	movlt	r3, r2
 801cfd2:	6033      	str	r3, [r6, #0]
 801cfd4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 801cfd8:	4607      	mov	r7, r0
 801cfda:	460c      	mov	r4, r1
 801cfdc:	b10a      	cbz	r2, 801cfe2 <_printf_common+0x26>
 801cfde:	3301      	adds	r3, #1
 801cfe0:	6033      	str	r3, [r6, #0]
 801cfe2:	6823      	ldr	r3, [r4, #0]
 801cfe4:	0699      	lsls	r1, r3, #26
 801cfe6:	bf42      	ittt	mi
 801cfe8:	6833      	ldrmi	r3, [r6, #0]
 801cfea:	3302      	addmi	r3, #2
 801cfec:	6033      	strmi	r3, [r6, #0]
 801cfee:	6825      	ldr	r5, [r4, #0]
 801cff0:	f015 0506 	ands.w	r5, r5, #6
 801cff4:	d106      	bne.n	801d004 <_printf_common+0x48>
 801cff6:	f104 0a19 	add.w	sl, r4, #25
 801cffa:	68e3      	ldr	r3, [r4, #12]
 801cffc:	6832      	ldr	r2, [r6, #0]
 801cffe:	1a9b      	subs	r3, r3, r2
 801d000:	42ab      	cmp	r3, r5
 801d002:	dc26      	bgt.n	801d052 <_printf_common+0x96>
 801d004:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 801d008:	6822      	ldr	r2, [r4, #0]
 801d00a:	3b00      	subs	r3, #0
 801d00c:	bf18      	it	ne
 801d00e:	2301      	movne	r3, #1
 801d010:	0692      	lsls	r2, r2, #26
 801d012:	d42b      	bmi.n	801d06c <_printf_common+0xb0>
 801d014:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801d018:	4641      	mov	r1, r8
 801d01a:	4638      	mov	r0, r7
 801d01c:	47c8      	blx	r9
 801d01e:	3001      	adds	r0, #1
 801d020:	d01e      	beq.n	801d060 <_printf_common+0xa4>
 801d022:	6823      	ldr	r3, [r4, #0]
 801d024:	6922      	ldr	r2, [r4, #16]
 801d026:	f003 0306 	and.w	r3, r3, #6
 801d02a:	2b04      	cmp	r3, #4
 801d02c:	bf02      	ittt	eq
 801d02e:	68e5      	ldreq	r5, [r4, #12]
 801d030:	6833      	ldreq	r3, [r6, #0]
 801d032:	1aed      	subeq	r5, r5, r3
 801d034:	68a3      	ldr	r3, [r4, #8]
 801d036:	bf0c      	ite	eq
 801d038:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801d03c:	2500      	movne	r5, #0
 801d03e:	4293      	cmp	r3, r2
 801d040:	bfc4      	itt	gt
 801d042:	1a9b      	subgt	r3, r3, r2
 801d044:	18ed      	addgt	r5, r5, r3
 801d046:	2600      	movs	r6, #0
 801d048:	341a      	adds	r4, #26
 801d04a:	42b5      	cmp	r5, r6
 801d04c:	d11a      	bne.n	801d084 <_printf_common+0xc8>
 801d04e:	2000      	movs	r0, #0
 801d050:	e008      	b.n	801d064 <_printf_common+0xa8>
 801d052:	2301      	movs	r3, #1
 801d054:	4652      	mov	r2, sl
 801d056:	4641      	mov	r1, r8
 801d058:	4638      	mov	r0, r7
 801d05a:	47c8      	blx	r9
 801d05c:	3001      	adds	r0, #1
 801d05e:	d103      	bne.n	801d068 <_printf_common+0xac>
 801d060:	f04f 30ff 	mov.w	r0, #4294967295
 801d064:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d068:	3501      	adds	r5, #1
 801d06a:	e7c6      	b.n	801cffa <_printf_common+0x3e>
 801d06c:	18e1      	adds	r1, r4, r3
 801d06e:	1c5a      	adds	r2, r3, #1
 801d070:	2030      	movs	r0, #48	@ 0x30
 801d072:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801d076:	4422      	add	r2, r4
 801d078:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801d07c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801d080:	3302      	adds	r3, #2
 801d082:	e7c7      	b.n	801d014 <_printf_common+0x58>
 801d084:	2301      	movs	r3, #1
 801d086:	4622      	mov	r2, r4
 801d088:	4641      	mov	r1, r8
 801d08a:	4638      	mov	r0, r7
 801d08c:	47c8      	blx	r9
 801d08e:	3001      	adds	r0, #1
 801d090:	d0e6      	beq.n	801d060 <_printf_common+0xa4>
 801d092:	3601      	adds	r6, #1
 801d094:	e7d9      	b.n	801d04a <_printf_common+0x8e>
	...

0801d098 <_printf_i>:
 801d098:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801d09c:	7e0f      	ldrb	r7, [r1, #24]
 801d09e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801d0a0:	2f78      	cmp	r7, #120	@ 0x78
 801d0a2:	4691      	mov	r9, r2
 801d0a4:	4680      	mov	r8, r0
 801d0a6:	460c      	mov	r4, r1
 801d0a8:	469a      	mov	sl, r3
 801d0aa:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801d0ae:	d807      	bhi.n	801d0c0 <_printf_i+0x28>
 801d0b0:	2f62      	cmp	r7, #98	@ 0x62
 801d0b2:	d80a      	bhi.n	801d0ca <_printf_i+0x32>
 801d0b4:	2f00      	cmp	r7, #0
 801d0b6:	f000 80d2 	beq.w	801d25e <_printf_i+0x1c6>
 801d0ba:	2f58      	cmp	r7, #88	@ 0x58
 801d0bc:	f000 80b9 	beq.w	801d232 <_printf_i+0x19a>
 801d0c0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d0c4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801d0c8:	e03a      	b.n	801d140 <_printf_i+0xa8>
 801d0ca:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801d0ce:	2b15      	cmp	r3, #21
 801d0d0:	d8f6      	bhi.n	801d0c0 <_printf_i+0x28>
 801d0d2:	a101      	add	r1, pc, #4	@ (adr r1, 801d0d8 <_printf_i+0x40>)
 801d0d4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801d0d8:	0801d131 	.word	0x0801d131
 801d0dc:	0801d145 	.word	0x0801d145
 801d0e0:	0801d0c1 	.word	0x0801d0c1
 801d0e4:	0801d0c1 	.word	0x0801d0c1
 801d0e8:	0801d0c1 	.word	0x0801d0c1
 801d0ec:	0801d0c1 	.word	0x0801d0c1
 801d0f0:	0801d145 	.word	0x0801d145
 801d0f4:	0801d0c1 	.word	0x0801d0c1
 801d0f8:	0801d0c1 	.word	0x0801d0c1
 801d0fc:	0801d0c1 	.word	0x0801d0c1
 801d100:	0801d0c1 	.word	0x0801d0c1
 801d104:	0801d245 	.word	0x0801d245
 801d108:	0801d16f 	.word	0x0801d16f
 801d10c:	0801d1ff 	.word	0x0801d1ff
 801d110:	0801d0c1 	.word	0x0801d0c1
 801d114:	0801d0c1 	.word	0x0801d0c1
 801d118:	0801d267 	.word	0x0801d267
 801d11c:	0801d0c1 	.word	0x0801d0c1
 801d120:	0801d16f 	.word	0x0801d16f
 801d124:	0801d0c1 	.word	0x0801d0c1
 801d128:	0801d0c1 	.word	0x0801d0c1
 801d12c:	0801d207 	.word	0x0801d207
 801d130:	6833      	ldr	r3, [r6, #0]
 801d132:	1d1a      	adds	r2, r3, #4
 801d134:	681b      	ldr	r3, [r3, #0]
 801d136:	6032      	str	r2, [r6, #0]
 801d138:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801d13c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801d140:	2301      	movs	r3, #1
 801d142:	e09d      	b.n	801d280 <_printf_i+0x1e8>
 801d144:	6833      	ldr	r3, [r6, #0]
 801d146:	6820      	ldr	r0, [r4, #0]
 801d148:	1d19      	adds	r1, r3, #4
 801d14a:	6031      	str	r1, [r6, #0]
 801d14c:	0606      	lsls	r6, r0, #24
 801d14e:	d501      	bpl.n	801d154 <_printf_i+0xbc>
 801d150:	681d      	ldr	r5, [r3, #0]
 801d152:	e003      	b.n	801d15c <_printf_i+0xc4>
 801d154:	0645      	lsls	r5, r0, #25
 801d156:	d5fb      	bpl.n	801d150 <_printf_i+0xb8>
 801d158:	f9b3 5000 	ldrsh.w	r5, [r3]
 801d15c:	2d00      	cmp	r5, #0
 801d15e:	da03      	bge.n	801d168 <_printf_i+0xd0>
 801d160:	232d      	movs	r3, #45	@ 0x2d
 801d162:	426d      	negs	r5, r5
 801d164:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d168:	4859      	ldr	r0, [pc, #356]	@ (801d2d0 <_printf_i+0x238>)
 801d16a:	230a      	movs	r3, #10
 801d16c:	e011      	b.n	801d192 <_printf_i+0xfa>
 801d16e:	6821      	ldr	r1, [r4, #0]
 801d170:	6833      	ldr	r3, [r6, #0]
 801d172:	0608      	lsls	r0, r1, #24
 801d174:	f853 5b04 	ldr.w	r5, [r3], #4
 801d178:	d402      	bmi.n	801d180 <_printf_i+0xe8>
 801d17a:	0649      	lsls	r1, r1, #25
 801d17c:	bf48      	it	mi
 801d17e:	b2ad      	uxthmi	r5, r5
 801d180:	2f6f      	cmp	r7, #111	@ 0x6f
 801d182:	4853      	ldr	r0, [pc, #332]	@ (801d2d0 <_printf_i+0x238>)
 801d184:	6033      	str	r3, [r6, #0]
 801d186:	bf14      	ite	ne
 801d188:	230a      	movne	r3, #10
 801d18a:	2308      	moveq	r3, #8
 801d18c:	2100      	movs	r1, #0
 801d18e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801d192:	6866      	ldr	r6, [r4, #4]
 801d194:	60a6      	str	r6, [r4, #8]
 801d196:	2e00      	cmp	r6, #0
 801d198:	bfa2      	ittt	ge
 801d19a:	6821      	ldrge	r1, [r4, #0]
 801d19c:	f021 0104 	bicge.w	r1, r1, #4
 801d1a0:	6021      	strge	r1, [r4, #0]
 801d1a2:	b90d      	cbnz	r5, 801d1a8 <_printf_i+0x110>
 801d1a4:	2e00      	cmp	r6, #0
 801d1a6:	d04b      	beq.n	801d240 <_printf_i+0x1a8>
 801d1a8:	4616      	mov	r6, r2
 801d1aa:	fbb5 f1f3 	udiv	r1, r5, r3
 801d1ae:	fb03 5711 	mls	r7, r3, r1, r5
 801d1b2:	5dc7      	ldrb	r7, [r0, r7]
 801d1b4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801d1b8:	462f      	mov	r7, r5
 801d1ba:	42bb      	cmp	r3, r7
 801d1bc:	460d      	mov	r5, r1
 801d1be:	d9f4      	bls.n	801d1aa <_printf_i+0x112>
 801d1c0:	2b08      	cmp	r3, #8
 801d1c2:	d10b      	bne.n	801d1dc <_printf_i+0x144>
 801d1c4:	6823      	ldr	r3, [r4, #0]
 801d1c6:	07df      	lsls	r7, r3, #31
 801d1c8:	d508      	bpl.n	801d1dc <_printf_i+0x144>
 801d1ca:	6923      	ldr	r3, [r4, #16]
 801d1cc:	6861      	ldr	r1, [r4, #4]
 801d1ce:	4299      	cmp	r1, r3
 801d1d0:	bfde      	ittt	le
 801d1d2:	2330      	movle	r3, #48	@ 0x30
 801d1d4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801d1d8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801d1dc:	1b92      	subs	r2, r2, r6
 801d1de:	6122      	str	r2, [r4, #16]
 801d1e0:	f8cd a000 	str.w	sl, [sp]
 801d1e4:	464b      	mov	r3, r9
 801d1e6:	aa03      	add	r2, sp, #12
 801d1e8:	4621      	mov	r1, r4
 801d1ea:	4640      	mov	r0, r8
 801d1ec:	f7ff fee6 	bl	801cfbc <_printf_common>
 801d1f0:	3001      	adds	r0, #1
 801d1f2:	d14a      	bne.n	801d28a <_printf_i+0x1f2>
 801d1f4:	f04f 30ff 	mov.w	r0, #4294967295
 801d1f8:	b004      	add	sp, #16
 801d1fa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801d1fe:	6823      	ldr	r3, [r4, #0]
 801d200:	f043 0320 	orr.w	r3, r3, #32
 801d204:	6023      	str	r3, [r4, #0]
 801d206:	4833      	ldr	r0, [pc, #204]	@ (801d2d4 <_printf_i+0x23c>)
 801d208:	2778      	movs	r7, #120	@ 0x78
 801d20a:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801d20e:	6823      	ldr	r3, [r4, #0]
 801d210:	6831      	ldr	r1, [r6, #0]
 801d212:	061f      	lsls	r7, r3, #24
 801d214:	f851 5b04 	ldr.w	r5, [r1], #4
 801d218:	d402      	bmi.n	801d220 <_printf_i+0x188>
 801d21a:	065f      	lsls	r7, r3, #25
 801d21c:	bf48      	it	mi
 801d21e:	b2ad      	uxthmi	r5, r5
 801d220:	6031      	str	r1, [r6, #0]
 801d222:	07d9      	lsls	r1, r3, #31
 801d224:	bf44      	itt	mi
 801d226:	f043 0320 	orrmi.w	r3, r3, #32
 801d22a:	6023      	strmi	r3, [r4, #0]
 801d22c:	b11d      	cbz	r5, 801d236 <_printf_i+0x19e>
 801d22e:	2310      	movs	r3, #16
 801d230:	e7ac      	b.n	801d18c <_printf_i+0xf4>
 801d232:	4827      	ldr	r0, [pc, #156]	@ (801d2d0 <_printf_i+0x238>)
 801d234:	e7e9      	b.n	801d20a <_printf_i+0x172>
 801d236:	6823      	ldr	r3, [r4, #0]
 801d238:	f023 0320 	bic.w	r3, r3, #32
 801d23c:	6023      	str	r3, [r4, #0]
 801d23e:	e7f6      	b.n	801d22e <_printf_i+0x196>
 801d240:	4616      	mov	r6, r2
 801d242:	e7bd      	b.n	801d1c0 <_printf_i+0x128>
 801d244:	6833      	ldr	r3, [r6, #0]
 801d246:	6825      	ldr	r5, [r4, #0]
 801d248:	6961      	ldr	r1, [r4, #20]
 801d24a:	1d18      	adds	r0, r3, #4
 801d24c:	6030      	str	r0, [r6, #0]
 801d24e:	062e      	lsls	r6, r5, #24
 801d250:	681b      	ldr	r3, [r3, #0]
 801d252:	d501      	bpl.n	801d258 <_printf_i+0x1c0>
 801d254:	6019      	str	r1, [r3, #0]
 801d256:	e002      	b.n	801d25e <_printf_i+0x1c6>
 801d258:	0668      	lsls	r0, r5, #25
 801d25a:	d5fb      	bpl.n	801d254 <_printf_i+0x1bc>
 801d25c:	8019      	strh	r1, [r3, #0]
 801d25e:	2300      	movs	r3, #0
 801d260:	6123      	str	r3, [r4, #16]
 801d262:	4616      	mov	r6, r2
 801d264:	e7bc      	b.n	801d1e0 <_printf_i+0x148>
 801d266:	6833      	ldr	r3, [r6, #0]
 801d268:	1d1a      	adds	r2, r3, #4
 801d26a:	6032      	str	r2, [r6, #0]
 801d26c:	681e      	ldr	r6, [r3, #0]
 801d26e:	6862      	ldr	r2, [r4, #4]
 801d270:	2100      	movs	r1, #0
 801d272:	4630      	mov	r0, r6
 801d274:	f7f3 ffec 	bl	8011250 <memchr>
 801d278:	b108      	cbz	r0, 801d27e <_printf_i+0x1e6>
 801d27a:	1b80      	subs	r0, r0, r6
 801d27c:	6060      	str	r0, [r4, #4]
 801d27e:	6863      	ldr	r3, [r4, #4]
 801d280:	6123      	str	r3, [r4, #16]
 801d282:	2300      	movs	r3, #0
 801d284:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801d288:	e7aa      	b.n	801d1e0 <_printf_i+0x148>
 801d28a:	6923      	ldr	r3, [r4, #16]
 801d28c:	4632      	mov	r2, r6
 801d28e:	4649      	mov	r1, r9
 801d290:	4640      	mov	r0, r8
 801d292:	47d0      	blx	sl
 801d294:	3001      	adds	r0, #1
 801d296:	d0ad      	beq.n	801d1f4 <_printf_i+0x15c>
 801d298:	6823      	ldr	r3, [r4, #0]
 801d29a:	079b      	lsls	r3, r3, #30
 801d29c:	d413      	bmi.n	801d2c6 <_printf_i+0x22e>
 801d29e:	68e0      	ldr	r0, [r4, #12]
 801d2a0:	9b03      	ldr	r3, [sp, #12]
 801d2a2:	4298      	cmp	r0, r3
 801d2a4:	bfb8      	it	lt
 801d2a6:	4618      	movlt	r0, r3
 801d2a8:	e7a6      	b.n	801d1f8 <_printf_i+0x160>
 801d2aa:	2301      	movs	r3, #1
 801d2ac:	4632      	mov	r2, r6
 801d2ae:	4649      	mov	r1, r9
 801d2b0:	4640      	mov	r0, r8
 801d2b2:	47d0      	blx	sl
 801d2b4:	3001      	adds	r0, #1
 801d2b6:	d09d      	beq.n	801d1f4 <_printf_i+0x15c>
 801d2b8:	3501      	adds	r5, #1
 801d2ba:	68e3      	ldr	r3, [r4, #12]
 801d2bc:	9903      	ldr	r1, [sp, #12]
 801d2be:	1a5b      	subs	r3, r3, r1
 801d2c0:	42ab      	cmp	r3, r5
 801d2c2:	dcf2      	bgt.n	801d2aa <_printf_i+0x212>
 801d2c4:	e7eb      	b.n	801d29e <_printf_i+0x206>
 801d2c6:	2500      	movs	r5, #0
 801d2c8:	f104 0619 	add.w	r6, r4, #25
 801d2cc:	e7f5      	b.n	801d2ba <_printf_i+0x222>
 801d2ce:	bf00      	nop
 801d2d0:	0801e517 	.word	0x0801e517
 801d2d4:	0801e528 	.word	0x0801e528

0801d2d8 <__sflush_r>:
 801d2d8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801d2dc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d2e0:	0716      	lsls	r6, r2, #28
 801d2e2:	4605      	mov	r5, r0
 801d2e4:	460c      	mov	r4, r1
 801d2e6:	d454      	bmi.n	801d392 <__sflush_r+0xba>
 801d2e8:	684b      	ldr	r3, [r1, #4]
 801d2ea:	2b00      	cmp	r3, #0
 801d2ec:	dc02      	bgt.n	801d2f4 <__sflush_r+0x1c>
 801d2ee:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801d2f0:	2b00      	cmp	r3, #0
 801d2f2:	dd48      	ble.n	801d386 <__sflush_r+0xae>
 801d2f4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d2f6:	2e00      	cmp	r6, #0
 801d2f8:	d045      	beq.n	801d386 <__sflush_r+0xae>
 801d2fa:	2300      	movs	r3, #0
 801d2fc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801d300:	682f      	ldr	r7, [r5, #0]
 801d302:	6a21      	ldr	r1, [r4, #32]
 801d304:	602b      	str	r3, [r5, #0]
 801d306:	d030      	beq.n	801d36a <__sflush_r+0x92>
 801d308:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801d30a:	89a3      	ldrh	r3, [r4, #12]
 801d30c:	0759      	lsls	r1, r3, #29
 801d30e:	d505      	bpl.n	801d31c <__sflush_r+0x44>
 801d310:	6863      	ldr	r3, [r4, #4]
 801d312:	1ad2      	subs	r2, r2, r3
 801d314:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801d316:	b10b      	cbz	r3, 801d31c <__sflush_r+0x44>
 801d318:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801d31a:	1ad2      	subs	r2, r2, r3
 801d31c:	2300      	movs	r3, #0
 801d31e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801d320:	6a21      	ldr	r1, [r4, #32]
 801d322:	4628      	mov	r0, r5
 801d324:	47b0      	blx	r6
 801d326:	1c43      	adds	r3, r0, #1
 801d328:	89a3      	ldrh	r3, [r4, #12]
 801d32a:	d106      	bne.n	801d33a <__sflush_r+0x62>
 801d32c:	6829      	ldr	r1, [r5, #0]
 801d32e:	291d      	cmp	r1, #29
 801d330:	d82b      	bhi.n	801d38a <__sflush_r+0xb2>
 801d332:	4a2a      	ldr	r2, [pc, #168]	@ (801d3dc <__sflush_r+0x104>)
 801d334:	410a      	asrs	r2, r1
 801d336:	07d6      	lsls	r6, r2, #31
 801d338:	d427      	bmi.n	801d38a <__sflush_r+0xb2>
 801d33a:	2200      	movs	r2, #0
 801d33c:	6062      	str	r2, [r4, #4]
 801d33e:	04d9      	lsls	r1, r3, #19
 801d340:	6922      	ldr	r2, [r4, #16]
 801d342:	6022      	str	r2, [r4, #0]
 801d344:	d504      	bpl.n	801d350 <__sflush_r+0x78>
 801d346:	1c42      	adds	r2, r0, #1
 801d348:	d101      	bne.n	801d34e <__sflush_r+0x76>
 801d34a:	682b      	ldr	r3, [r5, #0]
 801d34c:	b903      	cbnz	r3, 801d350 <__sflush_r+0x78>
 801d34e:	6560      	str	r0, [r4, #84]	@ 0x54
 801d350:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801d352:	602f      	str	r7, [r5, #0]
 801d354:	b1b9      	cbz	r1, 801d386 <__sflush_r+0xae>
 801d356:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801d35a:	4299      	cmp	r1, r3
 801d35c:	d002      	beq.n	801d364 <__sflush_r+0x8c>
 801d35e:	4628      	mov	r0, r5
 801d360:	f7ff fca0 	bl	801cca4 <_free_r>
 801d364:	2300      	movs	r3, #0
 801d366:	6363      	str	r3, [r4, #52]	@ 0x34
 801d368:	e00d      	b.n	801d386 <__sflush_r+0xae>
 801d36a:	2301      	movs	r3, #1
 801d36c:	4628      	mov	r0, r5
 801d36e:	47b0      	blx	r6
 801d370:	4602      	mov	r2, r0
 801d372:	1c50      	adds	r0, r2, #1
 801d374:	d1c9      	bne.n	801d30a <__sflush_r+0x32>
 801d376:	682b      	ldr	r3, [r5, #0]
 801d378:	2b00      	cmp	r3, #0
 801d37a:	d0c6      	beq.n	801d30a <__sflush_r+0x32>
 801d37c:	2b1d      	cmp	r3, #29
 801d37e:	d001      	beq.n	801d384 <__sflush_r+0xac>
 801d380:	2b16      	cmp	r3, #22
 801d382:	d11e      	bne.n	801d3c2 <__sflush_r+0xea>
 801d384:	602f      	str	r7, [r5, #0]
 801d386:	2000      	movs	r0, #0
 801d388:	e022      	b.n	801d3d0 <__sflush_r+0xf8>
 801d38a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d38e:	b21b      	sxth	r3, r3
 801d390:	e01b      	b.n	801d3ca <__sflush_r+0xf2>
 801d392:	690f      	ldr	r7, [r1, #16]
 801d394:	2f00      	cmp	r7, #0
 801d396:	d0f6      	beq.n	801d386 <__sflush_r+0xae>
 801d398:	0793      	lsls	r3, r2, #30
 801d39a:	680e      	ldr	r6, [r1, #0]
 801d39c:	bf08      	it	eq
 801d39e:	694b      	ldreq	r3, [r1, #20]
 801d3a0:	600f      	str	r7, [r1, #0]
 801d3a2:	bf18      	it	ne
 801d3a4:	2300      	movne	r3, #0
 801d3a6:	eba6 0807 	sub.w	r8, r6, r7
 801d3aa:	608b      	str	r3, [r1, #8]
 801d3ac:	f1b8 0f00 	cmp.w	r8, #0
 801d3b0:	dde9      	ble.n	801d386 <__sflush_r+0xae>
 801d3b2:	6a21      	ldr	r1, [r4, #32]
 801d3b4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801d3b6:	4643      	mov	r3, r8
 801d3b8:	463a      	mov	r2, r7
 801d3ba:	4628      	mov	r0, r5
 801d3bc:	47b0      	blx	r6
 801d3be:	2800      	cmp	r0, #0
 801d3c0:	dc08      	bgt.n	801d3d4 <__sflush_r+0xfc>
 801d3c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3c6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801d3ca:	81a3      	strh	r3, [r4, #12]
 801d3cc:	f04f 30ff 	mov.w	r0, #4294967295
 801d3d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801d3d4:	4407      	add	r7, r0
 801d3d6:	eba8 0800 	sub.w	r8, r8, r0
 801d3da:	e7e7      	b.n	801d3ac <__sflush_r+0xd4>
 801d3dc:	dfbffffe 	.word	0xdfbffffe

0801d3e0 <_fflush_r>:
 801d3e0:	b538      	push	{r3, r4, r5, lr}
 801d3e2:	690b      	ldr	r3, [r1, #16]
 801d3e4:	4605      	mov	r5, r0
 801d3e6:	460c      	mov	r4, r1
 801d3e8:	b913      	cbnz	r3, 801d3f0 <_fflush_r+0x10>
 801d3ea:	2500      	movs	r5, #0
 801d3ec:	4628      	mov	r0, r5
 801d3ee:	bd38      	pop	{r3, r4, r5, pc}
 801d3f0:	b118      	cbz	r0, 801d3fa <_fflush_r+0x1a>
 801d3f2:	6a03      	ldr	r3, [r0, #32]
 801d3f4:	b90b      	cbnz	r3, 801d3fa <_fflush_r+0x1a>
 801d3f6:	f7ff f90d 	bl	801c614 <__sinit>
 801d3fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d3fe:	2b00      	cmp	r3, #0
 801d400:	d0f3      	beq.n	801d3ea <_fflush_r+0xa>
 801d402:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801d404:	07d0      	lsls	r0, r2, #31
 801d406:	d404      	bmi.n	801d412 <_fflush_r+0x32>
 801d408:	0599      	lsls	r1, r3, #22
 801d40a:	d402      	bmi.n	801d412 <_fflush_r+0x32>
 801d40c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d40e:	f7ff fc20 	bl	801cc52 <__retarget_lock_acquire_recursive>
 801d412:	4628      	mov	r0, r5
 801d414:	4621      	mov	r1, r4
 801d416:	f7ff ff5f 	bl	801d2d8 <__sflush_r>
 801d41a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801d41c:	07da      	lsls	r2, r3, #31
 801d41e:	4605      	mov	r5, r0
 801d420:	d4e4      	bmi.n	801d3ec <_fflush_r+0xc>
 801d422:	89a3      	ldrh	r3, [r4, #12]
 801d424:	059b      	lsls	r3, r3, #22
 801d426:	d4e1      	bmi.n	801d3ec <_fflush_r+0xc>
 801d428:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801d42a:	f7ff fc13 	bl	801cc54 <__retarget_lock_release_recursive>
 801d42e:	e7dd      	b.n	801d3ec <_fflush_r+0xc>

0801d430 <fiprintf>:
 801d430:	b40e      	push	{r1, r2, r3}
 801d432:	b503      	push	{r0, r1, lr}
 801d434:	4601      	mov	r1, r0
 801d436:	ab03      	add	r3, sp, #12
 801d438:	4805      	ldr	r0, [pc, #20]	@ (801d450 <fiprintf+0x20>)
 801d43a:	f853 2b04 	ldr.w	r2, [r3], #4
 801d43e:	6800      	ldr	r0, [r0, #0]
 801d440:	9301      	str	r3, [sp, #4]
 801d442:	f7ff fca3 	bl	801cd8c <_vfiprintf_r>
 801d446:	b002      	add	sp, #8
 801d448:	f85d eb04 	ldr.w	lr, [sp], #4
 801d44c:	b003      	add	sp, #12
 801d44e:	4770      	bx	lr
 801d450:	2000003c 	.word	0x2000003c

0801d454 <__swhatbuf_r>:
 801d454:	b570      	push	{r4, r5, r6, lr}
 801d456:	460c      	mov	r4, r1
 801d458:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d45c:	2900      	cmp	r1, #0
 801d45e:	b096      	sub	sp, #88	@ 0x58
 801d460:	4615      	mov	r5, r2
 801d462:	461e      	mov	r6, r3
 801d464:	da0d      	bge.n	801d482 <__swhatbuf_r+0x2e>
 801d466:	89a3      	ldrh	r3, [r4, #12]
 801d468:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801d46c:	f04f 0100 	mov.w	r1, #0
 801d470:	bf14      	ite	ne
 801d472:	2340      	movne	r3, #64	@ 0x40
 801d474:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801d478:	2000      	movs	r0, #0
 801d47a:	6031      	str	r1, [r6, #0]
 801d47c:	602b      	str	r3, [r5, #0]
 801d47e:	b016      	add	sp, #88	@ 0x58
 801d480:	bd70      	pop	{r4, r5, r6, pc}
 801d482:	466a      	mov	r2, sp
 801d484:	f000 f848 	bl	801d518 <_fstat_r>
 801d488:	2800      	cmp	r0, #0
 801d48a:	dbec      	blt.n	801d466 <__swhatbuf_r+0x12>
 801d48c:	9901      	ldr	r1, [sp, #4]
 801d48e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801d492:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801d496:	4259      	negs	r1, r3
 801d498:	4159      	adcs	r1, r3
 801d49a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801d49e:	e7eb      	b.n	801d478 <__swhatbuf_r+0x24>

0801d4a0 <__smakebuf_r>:
 801d4a0:	898b      	ldrh	r3, [r1, #12]
 801d4a2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801d4a4:	079d      	lsls	r5, r3, #30
 801d4a6:	4606      	mov	r6, r0
 801d4a8:	460c      	mov	r4, r1
 801d4aa:	d507      	bpl.n	801d4bc <__smakebuf_r+0x1c>
 801d4ac:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801d4b0:	6023      	str	r3, [r4, #0]
 801d4b2:	6123      	str	r3, [r4, #16]
 801d4b4:	2301      	movs	r3, #1
 801d4b6:	6163      	str	r3, [r4, #20]
 801d4b8:	b003      	add	sp, #12
 801d4ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4bc:	ab01      	add	r3, sp, #4
 801d4be:	466a      	mov	r2, sp
 801d4c0:	f7ff ffc8 	bl	801d454 <__swhatbuf_r>
 801d4c4:	9f00      	ldr	r7, [sp, #0]
 801d4c6:	4605      	mov	r5, r0
 801d4c8:	4639      	mov	r1, r7
 801d4ca:	4630      	mov	r0, r6
 801d4cc:	f7fe ff06 	bl	801c2dc <_malloc_r>
 801d4d0:	b948      	cbnz	r0, 801d4e6 <__smakebuf_r+0x46>
 801d4d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801d4d6:	059a      	lsls	r2, r3, #22
 801d4d8:	d4ee      	bmi.n	801d4b8 <__smakebuf_r+0x18>
 801d4da:	f023 0303 	bic.w	r3, r3, #3
 801d4de:	f043 0302 	orr.w	r3, r3, #2
 801d4e2:	81a3      	strh	r3, [r4, #12]
 801d4e4:	e7e2      	b.n	801d4ac <__smakebuf_r+0xc>
 801d4e6:	89a3      	ldrh	r3, [r4, #12]
 801d4e8:	6020      	str	r0, [r4, #0]
 801d4ea:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801d4ee:	81a3      	strh	r3, [r4, #12]
 801d4f0:	9b01      	ldr	r3, [sp, #4]
 801d4f2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801d4f6:	b15b      	cbz	r3, 801d510 <__smakebuf_r+0x70>
 801d4f8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d4fc:	4630      	mov	r0, r6
 801d4fe:	f000 f81d 	bl	801d53c <_isatty_r>
 801d502:	b128      	cbz	r0, 801d510 <__smakebuf_r+0x70>
 801d504:	89a3      	ldrh	r3, [r4, #12]
 801d506:	f023 0303 	bic.w	r3, r3, #3
 801d50a:	f043 0301 	orr.w	r3, r3, #1
 801d50e:	81a3      	strh	r3, [r4, #12]
 801d510:	89a3      	ldrh	r3, [r4, #12]
 801d512:	431d      	orrs	r5, r3
 801d514:	81a5      	strh	r5, [r4, #12]
 801d516:	e7cf      	b.n	801d4b8 <__smakebuf_r+0x18>

0801d518 <_fstat_r>:
 801d518:	b538      	push	{r3, r4, r5, lr}
 801d51a:	4d07      	ldr	r5, [pc, #28]	@ (801d538 <_fstat_r+0x20>)
 801d51c:	2300      	movs	r3, #0
 801d51e:	4604      	mov	r4, r0
 801d520:	4608      	mov	r0, r1
 801d522:	4611      	mov	r1, r2
 801d524:	602b      	str	r3, [r5, #0]
 801d526:	f7f5 f977 	bl	8012818 <_fstat>
 801d52a:	1c43      	adds	r3, r0, #1
 801d52c:	d102      	bne.n	801d534 <_fstat_r+0x1c>
 801d52e:	682b      	ldr	r3, [r5, #0]
 801d530:	b103      	cbz	r3, 801d534 <_fstat_r+0x1c>
 801d532:	6023      	str	r3, [r4, #0]
 801d534:	bd38      	pop	{r3, r4, r5, pc}
 801d536:	bf00      	nop
 801d538:	200006ac 	.word	0x200006ac

0801d53c <_isatty_r>:
 801d53c:	b538      	push	{r3, r4, r5, lr}
 801d53e:	4d06      	ldr	r5, [pc, #24]	@ (801d558 <_isatty_r+0x1c>)
 801d540:	2300      	movs	r3, #0
 801d542:	4604      	mov	r4, r0
 801d544:	4608      	mov	r0, r1
 801d546:	602b      	str	r3, [r5, #0]
 801d548:	f7f5 f976 	bl	8012838 <_isatty>
 801d54c:	1c43      	adds	r3, r0, #1
 801d54e:	d102      	bne.n	801d556 <_isatty_r+0x1a>
 801d550:	682b      	ldr	r3, [r5, #0]
 801d552:	b103      	cbz	r3, 801d556 <_isatty_r+0x1a>
 801d554:	6023      	str	r3, [r4, #0]
 801d556:	bd38      	pop	{r3, r4, r5, pc}
 801d558:	200006ac 	.word	0x200006ac

0801d55c <abort>:
 801d55c:	b508      	push	{r3, lr}
 801d55e:	2006      	movs	r0, #6
 801d560:	f000 f82c 	bl	801d5bc <raise>
 801d564:	2001      	movs	r0, #1
 801d566:	f7f5 f923 	bl	80127b0 <_exit>

0801d56a <_raise_r>:
 801d56a:	291f      	cmp	r1, #31
 801d56c:	b538      	push	{r3, r4, r5, lr}
 801d56e:	4605      	mov	r5, r0
 801d570:	460c      	mov	r4, r1
 801d572:	d904      	bls.n	801d57e <_raise_r+0x14>
 801d574:	2316      	movs	r3, #22
 801d576:	6003      	str	r3, [r0, #0]
 801d578:	f04f 30ff 	mov.w	r0, #4294967295
 801d57c:	bd38      	pop	{r3, r4, r5, pc}
 801d57e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801d580:	b112      	cbz	r2, 801d588 <_raise_r+0x1e>
 801d582:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801d586:	b94b      	cbnz	r3, 801d59c <_raise_r+0x32>
 801d588:	4628      	mov	r0, r5
 801d58a:	f000 f831 	bl	801d5f0 <_getpid_r>
 801d58e:	4622      	mov	r2, r4
 801d590:	4601      	mov	r1, r0
 801d592:	4628      	mov	r0, r5
 801d594:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801d598:	f000 b818 	b.w	801d5cc <_kill_r>
 801d59c:	2b01      	cmp	r3, #1
 801d59e:	d00a      	beq.n	801d5b6 <_raise_r+0x4c>
 801d5a0:	1c59      	adds	r1, r3, #1
 801d5a2:	d103      	bne.n	801d5ac <_raise_r+0x42>
 801d5a4:	2316      	movs	r3, #22
 801d5a6:	6003      	str	r3, [r0, #0]
 801d5a8:	2001      	movs	r0, #1
 801d5aa:	e7e7      	b.n	801d57c <_raise_r+0x12>
 801d5ac:	2100      	movs	r1, #0
 801d5ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801d5b2:	4620      	mov	r0, r4
 801d5b4:	4798      	blx	r3
 801d5b6:	2000      	movs	r0, #0
 801d5b8:	e7e0      	b.n	801d57c <_raise_r+0x12>
	...

0801d5bc <raise>:
 801d5bc:	4b02      	ldr	r3, [pc, #8]	@ (801d5c8 <raise+0xc>)
 801d5be:	4601      	mov	r1, r0
 801d5c0:	6818      	ldr	r0, [r3, #0]
 801d5c2:	f7ff bfd2 	b.w	801d56a <_raise_r>
 801d5c6:	bf00      	nop
 801d5c8:	2000003c 	.word	0x2000003c

0801d5cc <_kill_r>:
 801d5cc:	b538      	push	{r3, r4, r5, lr}
 801d5ce:	4d07      	ldr	r5, [pc, #28]	@ (801d5ec <_kill_r+0x20>)
 801d5d0:	2300      	movs	r3, #0
 801d5d2:	4604      	mov	r4, r0
 801d5d4:	4608      	mov	r0, r1
 801d5d6:	4611      	mov	r1, r2
 801d5d8:	602b      	str	r3, [r5, #0]
 801d5da:	f7f5 f8d9 	bl	8012790 <_kill>
 801d5de:	1c43      	adds	r3, r0, #1
 801d5e0:	d102      	bne.n	801d5e8 <_kill_r+0x1c>
 801d5e2:	682b      	ldr	r3, [r5, #0]
 801d5e4:	b103      	cbz	r3, 801d5e8 <_kill_r+0x1c>
 801d5e6:	6023      	str	r3, [r4, #0]
 801d5e8:	bd38      	pop	{r3, r4, r5, pc}
 801d5ea:	bf00      	nop
 801d5ec:	200006ac 	.word	0x200006ac

0801d5f0 <_getpid_r>:
 801d5f0:	f7f5 b8c6 	b.w	8012780 <_getpid>

0801d5f4 <_init>:
 801d5f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d5f6:	bf00      	nop
 801d5f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d5fa:	bc08      	pop	{r3}
 801d5fc:	469e      	mov	lr, r3
 801d5fe:	4770      	bx	lr

0801d600 <_fini>:
 801d600:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d602:	bf00      	nop
 801d604:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801d606:	bc08      	pop	{r3}
 801d608:	469e      	mov	lr, r3
 801d60a:	4770      	bx	lr
