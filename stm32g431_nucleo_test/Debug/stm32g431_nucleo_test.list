
stm32g431_nucleo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000bbd4  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000a1c  0800bdb4  0800bdb4  0000cdb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c7d0  0800c7d0  0000e06c  2**0
                  CONTENTS
  4 .ARM          00000008  0800c7d0  0800c7d0  0000d7d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c7d8  0800c7d8  0000e06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c7d8  0800c7d8  0000d7d8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800c7dc  0800c7dc  0000d7dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800c7e0  0000e000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  2000006c  0800c84c  0000e06c  2**2
                  ALLOC
 10 ._user_heap_stack 00000800  20000698  0800c84c  0000e698  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000e06c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002597d  00000000  00000000  0000e09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000052fe  00000000  00000000  00033a19  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00002110  00000000  00000000  00038d18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000019b5  00000000  00000000  0003ae28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00025d49  00000000  00000000  0003c7dd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002f6b8  00000000  00000000  00062526  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed3de  00000000  00000000  00091bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017efbc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00009610  00000000  00000000  0017f000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00188610  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000006c 	.word	0x2000006c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800bd9c 	.word	0x0800bd9c

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000070 	.word	0x20000070
 800021c:	0800bd9c 	.word	0x0800bd9c

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <_write>:
//----------------------------------------
// retarget
//----------------------------------------
extern UART_HandleTypeDef hlpuart1;
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b084      	sub	sp, #16
 80005e4:	af00      	add	r7, sp, #0
 80005e6:	60f8      	str	r0, [r7, #12]
 80005e8:	60b9      	str	r1, [r7, #8]
 80005ea:	607a      	str	r2, [r7, #4]
    if ( HAL_UART_Transmit(&hlpuart1, ptr, len, len) == HAL_OK ) return len;
 80005ec:	687b      	ldr	r3, [r7, #4]
 80005ee:	b29a      	uxth	r2, r3
 80005f0:	687b      	ldr	r3, [r7, #4]
 80005f2:	68b9      	ldr	r1, [r7, #8]
 80005f4:	4806      	ldr	r0, [pc, #24]	@ (8000610 <_write+0x30>)
 80005f6:	f006 ff47 	bl	8007488 <HAL_UART_Transmit>
 80005fa:	4603      	mov	r3, r0
 80005fc:	2b00      	cmp	r3, #0
 80005fe:	d101      	bne.n	8000604 <_write+0x24>
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	e000      	b.n	8000606 <_write+0x26>
    else return 0;
 8000604:	2300      	movs	r3, #0
}
 8000606:	4618      	mov	r0, r3
 8000608:	3710      	adds	r7, #16
 800060a:	46bd      	mov	sp, r7
 800060c:	bd80      	pop	{r7, pc}
 800060e:	bf00      	nop
 8000610:	20000380 	.word	0x20000380

08000614 <Convert_Char>:
//----------------------------------------
// CLI UART CALLBACK for stm32f
//----------------------------------------
/* USER CODE BEGIN 1 */
void Convert_Char(uint8_t *byte)
{
 8000614:	b480      	push	{r7}
 8000616:	b083      	sub	sp, #12
 8000618:	af00      	add	r7, sp, #0
 800061a:	6078      	str	r0, [r7, #4]
    #if 1 // LOW to UP
    if ((*byte >= LOWER_A) && (*byte <= LOWER_Z)) {
 800061c:	687b      	ldr	r3, [r7, #4]
 800061e:	781b      	ldrb	r3, [r3, #0]
 8000620:	2b60      	cmp	r3, #96	@ 0x60
 8000622:	d909      	bls.n	8000638 <Convert_Char+0x24>
 8000624:	687b      	ldr	r3, [r7, #4]
 8000626:	781b      	ldrb	r3, [r3, #0]
 8000628:	2b7a      	cmp	r3, #122	@ 0x7a
 800062a:	d805      	bhi.n	8000638 <Convert_Char+0x24>
        *byte -= CONVERT_CHAR_OFFSET;
 800062c:	687b      	ldr	r3, [r7, #4]
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	3b20      	subs	r3, #32
 8000632:	b2da      	uxtb	r2, r3
 8000634:	687b      	ldr	r3, [r7, #4]
 8000636:	701a      	strb	r2, [r3, #0]
    #else
    if ((*byte >= UPPER_A) && (*byte <= UPPER_Z)) {
        *byte += CONVERT_CHAR_OFFSET;
    }
    #endif
}
 8000638:	bf00      	nop
 800063a:	370c      	adds	r7, #12
 800063c:	46bd      	mov	sp, r7
 800063e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000642:	4770      	bx	lr

08000644 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b082      	sub	sp, #8
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 800064c:	687b      	ldr	r3, [r7, #4]
 800064e:	681b      	ldr	r3, [r3, #0]
 8000650:	4a2c      	ldr	r2, [pc, #176]	@ (8000704 <HAL_UART_RxCpltCallback+0xc0>)
 8000652:	4293      	cmp	r3, r2
 8000654:	d151      	bne.n	80006fa <HAL_UART_RxCpltCallback+0xb6>
        if (uart_rx_byte == ASCII_LF || uart_rx_byte == ASCII_CR || uart_rx_byte == ASTERISK) {
 8000656:	4b2c      	ldr	r3, [pc, #176]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 8000658:	781b      	ldrb	r3, [r3, #0]
 800065a:	2b0a      	cmp	r3, #10
 800065c:	d007      	beq.n	800066e <HAL_UART_RxCpltCallback+0x2a>
 800065e:	4b2a      	ldr	r3, [pc, #168]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b0d      	cmp	r3, #13
 8000664:	d003      	beq.n	800066e <HAL_UART_RxCpltCallback+0x2a>
 8000666:	4b28      	ldr	r3, [pc, #160]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 8000668:	781b      	ldrb	r3, [r3, #0]
 800066a:	2b2a      	cmp	r3, #42	@ 0x2a
 800066c:	d104      	bne.n	8000678 <HAL_UART_RxCpltCallback+0x34>
            cli.rx_done  = CLI_READY;
 800066e:	4b27      	ldr	r3, [pc, #156]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 8000670:	2201      	movs	r2, #1
 8000672:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8000676:	e03b      	b.n	80006f0 <HAL_UART_RxCpltCallback+0xac>
        } else if (uart_rx_byte == ASCII_BACKSPACE || uart_rx_byte == ASCII_DEL) {
 8000678:	4b23      	ldr	r3, [pc, #140]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 800067a:	781b      	ldrb	r3, [r3, #0]
 800067c:	2b08      	cmp	r3, #8
 800067e:	d003      	beq.n	8000688 <HAL_UART_RxCpltCallback+0x44>
 8000680:	4b21      	ldr	r3, [pc, #132]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 8000682:	781b      	ldrb	r3, [r3, #0]
 8000684:	2b7f      	cmp	r3, #127	@ 0x7f
 8000686:	d119      	bne.n	80006bc <HAL_UART_RxCpltCallback+0x78>
            if (cli.rx_index > 0) {
 8000688:	4b20      	ldr	r3, [pc, #128]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 800068a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800068e:	2b00      	cmp	r3, #0
 8000690:	d02e      	beq.n	80006f0 <HAL_UART_RxCpltCallback+0xac>
                cli.buffer[--cli.rx_index] = 0;
 8000692:	4b1e      	ldr	r3, [pc, #120]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 8000694:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8000698:	3b01      	subs	r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b1b      	ldr	r3, [pc, #108]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 800069e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 80006a2:	4b1a      	ldr	r3, [pc, #104]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 80006a4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80006a8:	461a      	mov	r2, r3
 80006aa:	4b18      	ldr	r3, [pc, #96]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 80006ac:	2100      	movs	r1, #0
 80006ae:	5499      	strb	r1, [r3, r2]
                printf("%c %c", ASCII_BACKSPACE, ASCII_BACKSPACE);
 80006b0:	2208      	movs	r2, #8
 80006b2:	2108      	movs	r1, #8
 80006b4:	4816      	ldr	r0, [pc, #88]	@ (8000710 <HAL_UART_RxCpltCallback+0xcc>)
 80006b6:	f00a fbb7 	bl	800ae28 <iprintf>
            if (cli.rx_index > 0) {
 80006ba:	e019      	b.n	80006f0 <HAL_UART_RxCpltCallback+0xac>
            }
        } else {
            Convert_Char(&uart_rx_byte);
 80006bc:	4812      	ldr	r0, [pc, #72]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 80006be:	f7ff ffa9 	bl	8000614 <Convert_Char>
            cli.buffer[cli.rx_index] = uart_rx_byte;
 80006c2:	4b12      	ldr	r3, [pc, #72]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 80006c4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80006c8:	461a      	mov	r2, r3
 80006ca:	4b0f      	ldr	r3, [pc, #60]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 80006cc:	7819      	ldrb	r1, [r3, #0]
 80006ce:	4b0f      	ldr	r3, [pc, #60]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 80006d0:	5499      	strb	r1, [r3, r2]
            cli.rx_index = (cli.rx_index + 1) % UART_BUF_MAX;
 80006d2:	4b0e      	ldr	r3, [pc, #56]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 80006d4:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80006d8:	3301      	adds	r3, #1
 80006da:	425a      	negs	r2, r3
 80006dc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80006e0:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80006e4:	bf58      	it	pl
 80006e6:	4253      	negpl	r3, r2
 80006e8:	b2da      	uxtb	r2, r3
 80006ea:	4b08      	ldr	r3, [pc, #32]	@ (800070c <HAL_UART_RxCpltCallback+0xc8>)
 80006ec:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        }
        // uart rxne pending clear
        HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 80006f0:	2201      	movs	r2, #1
 80006f2:	4905      	ldr	r1, [pc, #20]	@ (8000708 <HAL_UART_RxCpltCallback+0xc4>)
 80006f4:	4807      	ldr	r0, [pc, #28]	@ (8000714 <HAL_UART_RxCpltCallback+0xd0>)
 80006f6:	f006 ff55 	bl	80075a4 <HAL_UART_Receive_IT>
    }
}
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}
 8000702:	bf00      	nop
 8000704:	40008000 	.word	0x40008000
 8000708:	20000088 	.word	0x20000088
 800070c:	2000008c 	.word	0x2000008c
 8000710:	0800bf04 	.word	0x0800bf04
 8000714:	20000380 	.word	0x20000380

08000718 <CLI_Init>:
//----------------------------------------


void CLI_Init(void)
{
 8000718:	b580      	push	{r7, lr}
 800071a:	af00      	add	r7, sp, #0
    setbuf(stdin, NULL);
 800071c:	4b0e      	ldr	r3, [pc, #56]	@ (8000758 <CLI_Init+0x40>)
 800071e:	681b      	ldr	r3, [r3, #0]
 8000720:	685b      	ldr	r3, [r3, #4]
 8000722:	2100      	movs	r1, #0
 8000724:	4618      	mov	r0, r3
 8000726:	f00a fbef 	bl	800af08 <setbuf>
    setbuf(stdout,NULL);
 800072a:	4b0b      	ldr	r3, [pc, #44]	@ (8000758 <CLI_Init+0x40>)
 800072c:	681b      	ldr	r3, [r3, #0]
 800072e:	689b      	ldr	r3, [r3, #8]
 8000730:	2100      	movs	r1, #0
 8000732:	4618      	mov	r0, r3
 8000734:	f00a fbe8 	bl	800af08 <setbuf>
    memset(&cli, 0x0, sizeof(CLI_t));
 8000738:	2283      	movs	r2, #131	@ 0x83
 800073a:	2100      	movs	r1, #0
 800073c:	4807      	ldr	r0, [pc, #28]	@ (800075c <CLI_Init+0x44>)
 800073e:	f00a fd77 	bl	800b230 <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 8000742:	2201      	movs	r2, #1
 8000744:	4906      	ldr	r1, [pc, #24]	@ (8000760 <CLI_Init+0x48>)
 8000746:	4807      	ldr	r0, [pc, #28]	@ (8000764 <CLI_Init+0x4c>)
 8000748:	f006 ff2c 	bl	80075a4 <HAL_UART_Receive_IT>
    cbf_boot_logo(0, NULL);
 800074c:	2100      	movs	r1, #0
 800074e:	2000      	movs	r0, #0
 8000750:	f000 f8dc 	bl	800090c <cbf_boot_logo>
}
 8000754:	bf00      	nop
 8000756:	bd80      	pop	{r7, pc}
 8000758:	2000001c 	.word	0x2000001c
 800075c:	2000008c 	.word	0x2000008c
 8000760:	20000088 	.word	0x20000088
 8000764:	20000380 	.word	0x20000380

08000768 <parser>:


/* CLI PARSER */
#define DBG_CMD 0
int parser(char *cmd)
{
 8000768:	b590      	push	{r4, r7, lr}
 800076a:	b091      	sub	sp, #68	@ 0x44
 800076c:	af00      	add	r7, sp, #0
 800076e:	6078      	str	r0, [r7, #4]
    int     argc = 0;
 8000770:	2300      	movs	r3, #0
 8000772:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char   *argv[NUMBER_OF_DELIMITER_VALUE];
    char   **ppStr  = NULL;
 8000774:	2300      	movs	r3, #0
 8000776:	63bb      	str	r3, [r7, #56]	@ 0x38
    short   str_len = 0;
 8000778:	2300      	movs	r3, #0
 800077a:	867b      	strh	r3, [r7, #50]	@ 0x32
    
    if (cmd == NULL) {
 800077c:	687b      	ldr	r3, [r7, #4]
 800077e:	2b00      	cmp	r3, #0
 8000780:	d102      	bne.n	8000788 <parser+0x20>
        printf("CMD Error\r\n");
 8000782:	485a      	ldr	r0, [pc, #360]	@ (80008ec <parser+0x184>)
 8000784:	f00a fbb8 	bl	800aef8 <puts>
    }
    
    // is cmd repeat?
    if (uart_rx_byte == ASTERISK) {
 8000788:	4b59      	ldr	r3, [pc, #356]	@ (80008f0 <parser+0x188>)
 800078a:	781b      	ldrb	r3, [r3, #0]
 800078c:	2b2a      	cmp	r3, #42	@ 0x2a
 800078e:	d10b      	bne.n	80007a8 <parser+0x40>
        strcpy(cmd, (char *)&gRx_cmd_repeat[0]);
 8000790:	4958      	ldr	r1, [pc, #352]	@ (80008f4 <parser+0x18c>)
 8000792:	6878      	ldr	r0, [r7, #4]
 8000794:	f00a fe33 	bl	800b3fe <strcpy>
        #if DBG_CMD
        printf("STR:%s", gRx_cmd_repeat);
        #endif
        printf("\r\n");
 8000798:	4857      	ldr	r0, [pc, #348]	@ (80008f8 <parser+0x190>)
 800079a:	f00a fbad 	bl	800aef8 <puts>
        cli.is_cmd_repeat = TRUE;
 800079e:	4b57      	ldr	r3, [pc, #348]	@ (80008fc <parser+0x194>)
 80007a0:	2201      	movs	r2, #1
 80007a2:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 80007a6:	e003      	b.n	80007b0 <parser+0x48>
    } else {
        cli.is_cmd_repeat = FALSE;
 80007a8:	4b54      	ldr	r3, [pc, #336]	@ (80008fc <parser+0x194>)
 80007aa:	2200      	movs	r2, #0
 80007ac:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    }

	//----------------------------------------
    // SPLIT THE UART RX STRING
    //----------------------------------------
    argv[argc++] = strtok(cmd, D_DELIMITER);
 80007b0:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 80007b2:	1c63      	adds	r3, r4, #1
 80007b4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007b6:	4952      	ldr	r1, [pc, #328]	@ (8000900 <parser+0x198>)
 80007b8:	6878      	ldr	r0, [r7, #4]
 80007ba:	f00a fd41 	bl	800b240 <strtok>
 80007be:	4602      	mov	r2, r0
 80007c0:	00a3      	lsls	r3, r4, #2
 80007c2:	3340      	adds	r3, #64	@ 0x40
 80007c4:	443b      	add	r3, r7
 80007c6:	f843 2c38 	str.w	r2, [r3, #-56]

    while (1) {
        argv[argc] = strtok(NULL, D_DELIMITER);
 80007ca:	494d      	ldr	r1, [pc, #308]	@ (8000900 <parser+0x198>)
 80007cc:	2000      	movs	r0, #0
 80007ce:	f00a fd37 	bl	800b240 <strtok>
 80007d2:	4602      	mov	r2, r0
 80007d4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007d6:	009b      	lsls	r3, r3, #2
 80007d8:	3340      	adds	r3, #64	@ 0x40
 80007da:	443b      	add	r3, r7
 80007dc:	f843 2c38 	str.w	r2, [r3, #-56]
        
        if (argv[argc] == NULL) {
 80007e0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007e2:	009b      	lsls	r3, r3, #2
 80007e4:	3340      	adds	r3, #64	@ 0x40
 80007e6:	443b      	add	r3, r7
 80007e8:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d006      	beq.n	80007fe <parser+0x96>
            break;
        }

        if (++argc >= NUMBER_OF_DELIMITER_VALUE) {
 80007f0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f2:	3301      	adds	r3, #1
 80007f4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80007f6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80007f8:	2b09      	cmp	r3, #9
 80007fa:	dc02      	bgt.n	8000802 <parser+0x9a>
        argv[argc] = strtok(NULL, D_DELIMITER);
 80007fc:	e7e5      	b.n	80007ca <parser+0x62>
            break;
 80007fe:	bf00      	nop
 8000800:	e000      	b.n	8000804 <parser+0x9c>
            break;
 8000802:	bf00      	nop
    }

    //----------------------------------------
    // FIND THE MATCHED STRING
    //----------------------------------------
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 8000804:	2300      	movs	r3, #0
 8000806:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000808:	e025      	b.n	8000856 <parser+0xee>
        if (strcmp(cmd_list[cnt].name, argv[0]) == CLI_MATCH) {
 800080a:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 800080e:	493d      	ldr	r1, [pc, #244]	@ (8000904 <parser+0x19c>)
 8000810:	4613      	mov	r3, r2
 8000812:	005b      	lsls	r3, r3, #1
 8000814:	4413      	add	r3, r2
 8000816:	009b      	lsls	r3, r3, #2
 8000818:	440b      	add	r3, r1
 800081a:	681b      	ldr	r3, [r3, #0]
 800081c:	68ba      	ldr	r2, [r7, #8]
 800081e:	4611      	mov	r1, r2
 8000820:	4618      	mov	r0, r3
 8000822:	f7ff fcfd 	bl	8000220 <strcmp>
 8000826:	4603      	mov	r3, r0
 8000828:	2b00      	cmp	r3, #0
 800082a:	d10e      	bne.n	800084a <parser+0xe2>
            cmd_list[cnt].func(argc, argv);
 800082c:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8000830:	4934      	ldr	r1, [pc, #208]	@ (8000904 <parser+0x19c>)
 8000832:	4613      	mov	r3, r2
 8000834:	005b      	lsls	r3, r3, #1
 8000836:	4413      	add	r3, r2
 8000838:	009b      	lsls	r3, r3, #2
 800083a:	440b      	add	r3, r1
 800083c:	3304      	adds	r3, #4
 800083e:	681b      	ldr	r3, [r3, #0]
 8000840:	f107 0208 	add.w	r2, r7, #8
 8000844:	4611      	mov	r1, r2
 8000846:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000848:	4798      	blx	r3
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 800084a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 800084e:	b29b      	uxth	r3, r3
 8000850:	3301      	adds	r3, #1
 8000852:	b29b      	uxth	r3, r3
 8000854:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8000856:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 800085a:	492a      	ldr	r1, [pc, #168]	@ (8000904 <parser+0x19c>)
 800085c:	4613      	mov	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4413      	add	r3, r2
 8000862:	009b      	lsls	r3, r3, #2
 8000864:	440b      	add	r3, r1
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	2b00      	cmp	r3, #0
 800086a:	d1ce      	bne.n	800080a <parser+0xa2>
        }
    }
    
    // Cpy Last Command...
    if (cli.is_cmd_repeat == FALSE) {
 800086c:	4b23      	ldr	r3, [pc, #140]	@ (80008fc <parser+0x194>)
 800086e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8000872:	2b00      	cmp	r3, #0
 8000874:	d12c      	bne.n	80008d0 <parser+0x168>
        memset((char *)&gRx_cmd_repeat[0], (char)'\0', sizeof(gRx_cmd_repeat));
 8000876:	2280      	movs	r2, #128	@ 0x80
 8000878:	2100      	movs	r1, #0
 800087a:	481e      	ldr	r0, [pc, #120]	@ (80008f4 <parser+0x18c>)
 800087c:	f00a fcd8 	bl	800b230 <memset>
        ppStr = &argv[0];
 8000880:	f107 0308 	add.w	r3, r7, #8
 8000884:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (short cnt = 0; cnt < argc; cnt++) {
 8000886:	2300      	movs	r3, #0
 8000888:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800088a:	e01c      	b.n	80008c6 <parser+0x15e>
            strcpy(&gRx_cmd_repeat[0] + strlen(&gRx_cmd_repeat[0]), *ppStr++);
 800088c:	4819      	ldr	r0, [pc, #100]	@ (80008f4 <parser+0x18c>)
 800088e:	f7ff fcd1 	bl	8000234 <strlen>
 8000892:	4603      	mov	r3, r0
 8000894:	4a17      	ldr	r2, [pc, #92]	@ (80008f4 <parser+0x18c>)
 8000896:	1898      	adds	r0, r3, r2
 8000898:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800089a:	1d1a      	adds	r2, r3, #4
 800089c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	4619      	mov	r1, r3
 80008a2:	f00a fdac 	bl	800b3fe <strcpy>
            str_len = strlen(&gRx_cmd_repeat[0]);
 80008a6:	4813      	ldr	r0, [pc, #76]	@ (80008f4 <parser+0x18c>)
 80008a8:	f7ff fcc4 	bl	8000234 <strlen>
 80008ac:	4603      	mov	r3, r0
 80008ae:	867b      	strh	r3, [r7, #50]	@ 0x32
            gRx_cmd_repeat[str_len] = SPACE_BAR;
 80008b0:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 80008b4:	4a0f      	ldr	r2, [pc, #60]	@ (80008f4 <parser+0x18c>)
 80008b6:	2120      	movs	r1, #32
 80008b8:	54d1      	strb	r1, [r2, r3]
        for (short cnt = 0; cnt < argc; cnt++) {
 80008ba:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80008be:	b29b      	uxth	r3, r3
 80008c0:	3301      	adds	r3, #1
 80008c2:	b29b      	uxth	r3, r3
 80008c4:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80008c6:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80008ca:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80008cc:	429a      	cmp	r2, r3
 80008ce:	dcdd      	bgt.n	800088c <parser+0x124>
        #if DBG_CMD
        printf("cpy str:%s\r\n", gRx_cmd_repeat);
        #endif
    }

    memset(&cli, 0x0, sizeof(CLI_t));
 80008d0:	2283      	movs	r2, #131	@ 0x83
 80008d2:	2100      	movs	r1, #0
 80008d4:	4809      	ldr	r0, [pc, #36]	@ (80008fc <parser+0x194>)
 80008d6:	f00a fcab 	bl	800b230 <memset>
    printf(" $Fish >> ");
 80008da:	480b      	ldr	r0, [pc, #44]	@ (8000908 <parser+0x1a0>)
 80008dc:	f00a faa4 	bl	800ae28 <iprintf>
    
    return LIST_NOT_FOUND;
 80008e0:	2301      	movs	r3, #1
}
 80008e2:	4618      	mov	r0, r3
 80008e4:	3744      	adds	r7, #68	@ 0x44
 80008e6:	46bd      	mov	sp, r7
 80008e8:	bd90      	pop	{r4, r7, pc}
 80008ea:	bf00      	nop
 80008ec:	0800bf0c 	.word	0x0800bf0c
 80008f0:	20000088 	.word	0x20000088
 80008f4:	20000114 	.word	0x20000114
 80008f8:	0800bf18 	.word	0x0800bf18
 80008fc:	2000008c 	.word	0x2000008c
 8000900:	0800bf1c 	.word	0x0800bf1c
 8000904:	0800c4f8 	.word	0x0800c4f8
 8000908:	0800bf20 	.word	0x0800bf20

0800090c <cbf_boot_logo>:

//----------------------------------------
// CALL BACK FUNCTION
//----------------------------------------
int cbf_boot_logo(int argc, char *argv[])
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b082      	sub	sp, #8
 8000910:	af00      	add	r7, sp, #0
 8000912:	6078      	str	r0, [r7, #4]
 8000914:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8000916:	4811      	ldr	r0, [pc, #68]	@ (800095c <cbf_boot_logo+0x50>)
 8000918:	f00a faee 	bl	800aef8 <puts>
    printf("+=====================================+\r\n");
 800091c:	4810      	ldr	r0, [pc, #64]	@ (8000960 <cbf_boot_logo+0x54>)
 800091e:	f00a faeb 	bl	800aef8 <puts>
    printf("|,------.   ,--.             ,--.     |\r\n");
 8000922:	4810      	ldr	r0, [pc, #64]	@ (8000964 <cbf_boot_logo+0x58>)
 8000924:	f00a fae8 	bl	800aef8 <puts>
    printf("||  .---'   `--'    ,---.    |  ,---. |\r\n");
 8000928:	480f      	ldr	r0, [pc, #60]	@ (8000968 <cbf_boot_logo+0x5c>)
 800092a:	f00a fae5 	bl	800aef8 <puts>
    printf("||  `--,    ,--.   (  .-'    |  .-.  ||\r\n");
 800092e:	480f      	ldr	r0, [pc, #60]	@ (800096c <cbf_boot_logo+0x60>)
 8000930:	f00a fae2 	bl	800aef8 <puts>
    printf("||  |`      |  |   .-'  `)   |  | |  ||\r\n");
 8000934:	480e      	ldr	r0, [pc, #56]	@ (8000970 <cbf_boot_logo+0x64>)
 8000936:	f00a fadf 	bl	800aef8 <puts>
    printf("|`--'       `--'   `----'    `--' `--'|\r\n");
 800093a:	480e      	ldr	r0, [pc, #56]	@ (8000974 <cbf_boot_logo+0x68>)
 800093c:	f00a fadc 	bl	800aef8 <puts>
    printf("+=====================================+\r\n");
 8000940:	4807      	ldr	r0, [pc, #28]	@ (8000960 <cbf_boot_logo+0x54>)
 8000942:	f00a fad9 	bl	800aef8 <puts>
    CONSOLE_SPLIT;
 8000946:	4805      	ldr	r0, [pc, #20]	@ (800095c <cbf_boot_logo+0x50>)
 8000948:	f00a fad6 	bl	800aef8 <puts>
    printf(" $Fish >> ");
 800094c:	480a      	ldr	r0, [pc, #40]	@ (8000978 <cbf_boot_logo+0x6c>)
 800094e:	f00a fa6b 	bl	800ae28 <iprintf>
    return 0;
 8000952:	2300      	movs	r3, #0
}
 8000954:	4618      	mov	r0, r3
 8000956:	3708      	adds	r7, #8
 8000958:	46bd      	mov	sp, r7
 800095a:	bd80      	pop	{r7, pc}
 800095c:	0800bf2c 	.word	0x0800bf2c
 8000960:	0800bf60 	.word	0x0800bf60
 8000964:	0800bf8c 	.word	0x0800bf8c
 8000968:	0800bfb8 	.word	0x0800bfb8
 800096c:	0800bfe4 	.word	0x0800bfe4
 8000970:	0800c010 	.word	0x0800c010
 8000974:	0800c03c 	.word	0x0800c03c
 8000978:	0800bf20 	.word	0x0800bf20

0800097c <cbf_sn>:

int cbf_sn(int argc, char *argv[])
{
 800097c:	b480      	push	{r7}
 800097e:	b083      	sub	sp, #12
 8000980:	af00      	add	r7, sp, #0
 8000982:	6078      	str	r0, [r7, #4]
 8000984:	6039      	str	r1, [r7, #0]

#if LEGACY
    printf("SN : %s\r\n", (char *)tag->fw_sn);
#endif
    return 0;
 8000986:	2300      	movs	r3, #0
}
 8000988:	4618      	mov	r0, r3
 800098a:	370c      	adds	r7, #12
 800098c:	46bd      	mov	sp, r7
 800098e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000992:	4770      	bx	lr

08000994 <cbf_help>:

int cbf_help(int argc, char *argv[])
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b084      	sub	sp, #16
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
 800099c:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 800099e:	481c      	ldr	r0, [pc, #112]	@ (8000a10 <cbf_help+0x7c>)
 80009a0:	f00a faaa 	bl	800aef8 <puts>
    printf("Command List %-6s Description\r\n", "||");
 80009a4:	491b      	ldr	r1, [pc, #108]	@ (8000a14 <cbf_help+0x80>)
 80009a6:	481c      	ldr	r0, [pc, #112]	@ (8000a18 <cbf_help+0x84>)
 80009a8:	f00a fa3e 	bl	800ae28 <iprintf>
    CONSOLE_SPLIT;
 80009ac:	4818      	ldr	r0, [pc, #96]	@ (8000a10 <cbf_help+0x7c>)
 80009ae:	f00a faa3 	bl	800aef8 <puts>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 80009b2:	2301      	movs	r3, #1
 80009b4:	60fb      	str	r3, [r7, #12]
 80009b6:	e01b      	b.n	80009f0 <cbf_help+0x5c>
        printf("%-20s", cmd_list[cnt].name);
 80009b8:	4918      	ldr	r1, [pc, #96]	@ (8000a1c <cbf_help+0x88>)
 80009ba:	68fa      	ldr	r2, [r7, #12]
 80009bc:	4613      	mov	r3, r2
 80009be:	005b      	lsls	r3, r3, #1
 80009c0:	4413      	add	r3, r2
 80009c2:	009b      	lsls	r3, r3, #2
 80009c4:	440b      	add	r3, r1
 80009c6:	681b      	ldr	r3, [r3, #0]
 80009c8:	4619      	mov	r1, r3
 80009ca:	4815      	ldr	r0, [pc, #84]	@ (8000a20 <cbf_help+0x8c>)
 80009cc:	f00a fa2c 	bl	800ae28 <iprintf>
        printf("%-30s\r", cmd_list[cnt].description);
 80009d0:	4912      	ldr	r1, [pc, #72]	@ (8000a1c <cbf_help+0x88>)
 80009d2:	68fa      	ldr	r2, [r7, #12]
 80009d4:	4613      	mov	r3, r2
 80009d6:	005b      	lsls	r3, r3, #1
 80009d8:	4413      	add	r3, r2
 80009da:	009b      	lsls	r3, r3, #2
 80009dc:	440b      	add	r3, r1
 80009de:	3308      	adds	r3, #8
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	4619      	mov	r1, r3
 80009e4:	480f      	ldr	r0, [pc, #60]	@ (8000a24 <cbf_help+0x90>)
 80009e6:	f00a fa1f 	bl	800ae28 <iprintf>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 80009ea:	68fb      	ldr	r3, [r7, #12]
 80009ec:	3301      	adds	r3, #1
 80009ee:	60fb      	str	r3, [r7, #12]
 80009f0:	490a      	ldr	r1, [pc, #40]	@ (8000a1c <cbf_help+0x88>)
 80009f2:	68fa      	ldr	r2, [r7, #12]
 80009f4:	4613      	mov	r3, r2
 80009f6:	005b      	lsls	r3, r3, #1
 80009f8:	4413      	add	r3, r2
 80009fa:	009b      	lsls	r3, r3, #2
 80009fc:	440b      	add	r3, r1
 80009fe:	681b      	ldr	r3, [r3, #0]
 8000a00:	2b00      	cmp	r3, #0
 8000a02:	d1d9      	bne.n	80009b8 <cbf_help+0x24>
    }
    return 0;
 8000a04:	2300      	movs	r3, #0
}
 8000a06:	4618      	mov	r0, r3
 8000a08:	3710      	adds	r7, #16
 8000a0a:	46bd      	mov	sp, r7
 8000a0c:	bd80      	pop	{r7, pc}
 8000a0e:	bf00      	nop
 8000a10:	0800bf2c 	.word	0x0800bf2c
 8000a14:	0800c068 	.word	0x0800c068
 8000a18:	0800c06c 	.word	0x0800c06c
 8000a1c:	0800c4f8 	.word	0x0800c4f8
 8000a20:	0800c08c 	.word	0x0800c08c
 8000a24:	0800c094 	.word	0x0800c094

08000a28 <cbf_reset>:

int cbf_reset(int argc, char *argv[])
{
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	b082      	sub	sp, #8
 8000a2c:	af00      	add	r7, sp, #0
 8000a2e:	6078      	str	r0, [r7, #4]
 8000a30:	6039      	str	r1, [r7, #0]
    // software reset
    HAL_NVIC_SystemReset();
 8000a32:	f003 f865 	bl	8003b00 <HAL_NVIC_SystemReset>
    return 0;
 8000a36:	2300      	movs	r3, #0
}
 8000a38:	4618      	mov	r0, r3
 8000a3a:	3708      	adds	r7, #8
 8000a3c:	46bd      	mov	sp, r7
 8000a3e:	bd80      	pop	{r7, pc}

08000a40 <cbf_test>:

int cbf_test(int argc, char *argv[])
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b082      	sub	sp, #8
 8000a44:	af00      	add	r7, sp, #0
 8000a46:	6078      	str	r0, [r7, #4]
 8000a48:	6039      	str	r1, [r7, #0]
	printf("argv : %s \r\n", argv[0]);
 8000a4a:	683b      	ldr	r3, [r7, #0]
 8000a4c:	681b      	ldr	r3, [r3, #0]
 8000a4e:	4619      	mov	r1, r3
 8000a50:	4805      	ldr	r0, [pc, #20]	@ (8000a68 <cbf_test+0x28>)
 8000a52:	f00a f9e9 	bl	800ae28 <iprintf>
	//printf("argc : %d , argv : %s \r\n", argc, argv[1]);
	printf("TEST \r\n");
 8000a56:	4805      	ldr	r0, [pc, #20]	@ (8000a6c <cbf_test+0x2c>)
 8000a58:	f00a fa4e 	bl	800aef8 <puts>
	return 0;
 8000a5c:	2300      	movs	r3, #0
}
 8000a5e:	4618      	mov	r0, r3
 8000a60:	3708      	adds	r7, #8
 8000a62:	46bd      	mov	sp, r7
 8000a64:	bd80      	pop	{r7, pc}
 8000a66:	bf00      	nop
 8000a68:	0800c09c 	.word	0x0800c09c
 8000a6c:	0800c0ac 	.word	0x0800c0ac

08000a70 <cbf_xmodem>:


int cbf_xmodem(int argc, char *argv[])
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	b082      	sub	sp, #8
 8000a74:	af00      	add	r7, sp, #0
 8000a76:	6078      	str	r0, [r7, #4]
 8000a78:	6039      	str	r1, [r7, #0]

    // resetting uart isr
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(USART2_IRQn);
    #else
    CONSOLE_SPLIT;
 8000a7a:	4808      	ldr	r0, [pc, #32]	@ (8000a9c <cbf_xmodem+0x2c>)
 8000a7c:	f00a fa3c 	bl	800aef8 <puts>
    printf("System is now entering the bootloader after reboot ... \r\n");
 8000a80:	4807      	ldr	r0, [pc, #28]	@ (8000aa0 <cbf_xmodem+0x30>)
 8000a82:	f00a fa39 	bl	800aef8 <puts>
    CONSOLE_SPLIT;
 8000a86:	4805      	ldr	r0, [pc, #20]	@ (8000a9c <cbf_xmodem+0x2c>)
 8000a88:	f00a fa36 	bl	800aef8 <puts>
    
    HAL_NVIC_SystemReset();
 8000a8c:	f003 f838 	bl	8003b00 <HAL_NVIC_SystemReset>
    #endif
    return 0;
 8000a90:	2300      	movs	r3, #0
}
 8000a92:	4618      	mov	r0, r3
 8000a94:	3708      	adds	r7, #8
 8000a96:	46bd      	mov	sp, r7
 8000a98:	bd80      	pop	{r7, pc}
 8000a9a:	bf00      	nop
 8000a9c:	0800bf2c 	.word	0x0800bf2c
 8000aa0:	0800c0b4 	.word	0x0800c0b4

08000aa4 <cbf_dump>:
#define CHAR_SPACE          ' '
#define CHAR_z              'z'
#define CHAR_dot            '.'
#define ASCII_CHAR_DUMP     0
int cbf_dump(int argc, char *argv[])
{
 8000aa4:	b580      	push	{r7, lr}
 8000aa6:	b082      	sub	sp, #8
 8000aa8:	af00      	add	r7, sp, #0
 8000aaa:	6078      	str	r0, [r7, #4]
 8000aac:	6039      	str	r1, [r7, #0]
            printf("\r\n");
            printf("0x%08lx : ", (uint32_t)addr);
        }
    }
#endif
    printf("\r\n");
 8000aae:	4804      	ldr	r0, [pc, #16]	@ (8000ac0 <cbf_dump+0x1c>)
 8000ab0:	f00a fa22 	bl	800aef8 <puts>
    return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	0800bf18 	.word	0x0800bf18

08000ac4 <cbf_flash_test>:

int cbf_flash_test(int argc, char *argv[])
{
 8000ac4:	b480      	push	{r7}
 8000ac6:	b083      	sub	sp, #12
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
 8000acc:	6039      	str	r1, [r7, #0]

    HAL_FLASH_Lock();
    
    printf("0x%08lx - 0x%08lx\r\n", (uint32_t)flash_addr, (uint32_t)*flash_addr);
#endif
    return 0;
 8000ace:	2300      	movs	r3, #0
}
 8000ad0:	4618      	mov	r0, r3
 8000ad2:	370c      	adds	r7, #12
 8000ad4:	46bd      	mov	sp, r7
 8000ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ada:	4770      	bx	lr

08000adc <cbf_tag>:
    #endif
    return 0;
}

int cbf_tag(int argc, char *argv[])
{
 8000adc:	b580      	push	{r7, lr}
 8000ade:	b082      	sub	sp, #8
 8000ae0:	af00      	add	r7, sp, #0
 8000ae2:	6078      	str	r0, [r7, #4]
 8000ae4:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8000ae6:	4805      	ldr	r0, [pc, #20]	@ (8000afc <cbf_tag+0x20>)
 8000ae8:	f00a fa06 	bl	800aef8 <puts>
    printf("FW SN\t\t\t%s\r\n", tag->fw_sn );
    printf("FW Version\t\t%s\r\n", tag->fw_version );
    printf("FW Compiled date\t%s\r\n", tag->fw_compile_data);
    printf("FW Compiled time\t%s\r\n", tag->fw_compile_time);
#endif
    CONSOLE_SPLIT;
 8000aec:	4803      	ldr	r0, [pc, #12]	@ (8000afc <cbf_tag+0x20>)
 8000aee:	f00a fa03 	bl	800aef8 <puts>
    return 0;
 8000af2:	2300      	movs	r3, #0
}
 8000af4:	4618      	mov	r0, r3
 8000af6:	3708      	adds	r7, #8
 8000af8:	46bd      	mov	sp, r7
 8000afa:	bd80      	pop	{r7, pc}
 8000afc:	0800bf2c 	.word	0x0800bf2c

08000b00 <cbf_test_assert>:

int cbf_test_assert(int argc, char *argv[])
{
 8000b00:	b480      	push	{r7}
 8000b02:	b083      	sub	sp, #12
 8000b04:	af00      	add	r7, sp, #0
 8000b06:	6078      	str	r0, [r7, #4]
 8000b08:	6039      	str	r1, [r7, #0]
	#if 0
	int ret = atoi(argv[1]);
    assert_param(ret);
	#endif
    return 0;
 8000b0a:	2300      	movs	r3, #0
}
 8000b0c:	4618      	mov	r0, r3
 8000b0e:	370c      	adds	r7, #12
 8000b10:	46bd      	mov	sp, r7
 8000b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b16:	4770      	bx	lr

08000b18 <cbf_event_print>:

int cbf_event_print(int argc, char *argv[])
{
 8000b18:	b480      	push	{r7}
 8000b1a:	b083      	sub	sp, #12
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
 8000b20:	6039      	str	r1, [r7, #0]
    #if LEGACY
    PRINT_SRAM_EVENT_LOG();
    #endif
    return 0;
 8000b22:	2300      	movs	r3, #0
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	370c      	adds	r7, #12
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b2e:	4770      	bx	lr

08000b30 <cbf_event_test>:

int cbf_event_test(int argc, char *argv[])
{
 8000b30:	b480      	push	{r7}
 8000b32:	b083      	sub	sp, #12
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
 8000b38:	6039      	str	r1, [r7, #0]
    }

    //printf("type : %d \r\n", type);
    SAVE_SRAM_EVENT_LOG(type);
    #endif
    return 0;
 8000b3a:	2300      	movs	r3, #0
}
 8000b3c:	4618      	mov	r0, r3
 8000b3e:	370c      	adds	r7, #12
 8000b40:	46bd      	mov	sp, r7
 8000b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b46:	4770      	bx	lr

08000b48 <cbf_event_reset>:

int cbf_event_reset(int argc, char *argv[])
{
 8000b48:	b580      	push	{r7, lr}
 8000b4a:	b082      	sub	sp, #8
 8000b4c:	af00      	add	r7, sp, #0
 8000b4e:	6078      	str	r0, [r7, #4]
 8000b50:	6039      	str	r1, [r7, #0]
    #if LEGACY
    RESET_EVENT_LOG();
    #endif
    printf("Event Reset Completed\r\n");
 8000b52:	4804      	ldr	r0, [pc, #16]	@ (8000b64 <cbf_event_reset+0x1c>)
 8000b54:	f00a f9d0 	bl	800aef8 <puts>
    return 0;
 8000b58:	2300      	movs	r3, #0
}
 8000b5a:	4618      	mov	r0, r3
 8000b5c:	3708      	adds	r7, #8
 8000b5e:	46bd      	mov	sp, r7
 8000b60:	bd80      	pop	{r7, pc}
 8000b62:	bf00      	nop
 8000b64:	0800c0f0 	.word	0x0800c0f0

08000b68 <cbf_dbg_view>:

int cbf_dbg_view(int argc, char *argv[])
{
 8000b68:	b590      	push	{r4, r7, lr}
 8000b6a:	b089      	sub	sp, #36	@ 0x24
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
 8000b70:	6039      	str	r1, [r7, #0]
    VIEW_DBG_POINT_e view_list[] = 
 8000b72:	4b2a      	ldr	r3, [pc, #168]	@ (8000c1c <cbf_dbg_view+0xb4>)
 8000b74:	f107 0408 	add.w	r4, r7, #8
 8000b78:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000b7a:	c407      	stmia	r4!, {r0, r1, r2}
 8000b7c:	8023      	strh	r3, [r4, #0]
        VIEW_DBG_SRAM ,
        VIEW_DBG_FLASH,
        VIEW_MAX
    };
    
    const uint8_t max_size = sizeof(view_list) / sizeof(view_list[0]);
 8000b7e:	2307      	movs	r3, #7
 8000b80:	77bb      	strb	r3, [r7, #30]
    long view_point = strtol(argv[1], NULL, 16);
 8000b82:	683b      	ldr	r3, [r7, #0]
 8000b84:	3304      	adds	r3, #4
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2210      	movs	r2, #16
 8000b8a:	2100      	movs	r1, #0
 8000b8c:	4618      	mov	r0, r3
 8000b8e:	f00a f87f 	bl	800ac90 <strtol>
 8000b92:	61b8      	str	r0, [r7, #24]
    
    if (view_point <= VIEW_NONE || view_point >= VIEW_MAX) {
 8000b94:	69bb      	ldr	r3, [r7, #24]
 8000b96:	2b00      	cmp	r3, #0
 8000b98:	dd04      	ble.n	8000ba4 <cbf_dbg_view+0x3c>
 8000b9a:	69bb      	ldr	r3, [r7, #24]
 8000b9c:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8000ba0:	4293      	cmp	r3, r2
 8000ba2:	dd25      	ble.n	8000bf0 <cbf_dbg_view+0x88>
        CONSOLE_SPLIT;
 8000ba4:	481e      	ldr	r0, [pc, #120]	@ (8000c20 <cbf_dbg_view+0xb8>)
 8000ba6:	f00a f9a7 	bl	800aef8 <puts>
        printf("Invalid View Point\r\n");        
 8000baa:	481e      	ldr	r0, [pc, #120]	@ (8000c24 <cbf_dbg_view+0xbc>)
 8000bac:	f00a f9a4 	bl	800aef8 <puts>
        printf("VIEW POINT HEX is ... \r\n");
 8000bb0:	481d      	ldr	r0, [pc, #116]	@ (8000c28 <cbf_dbg_view+0xc0>)
 8000bb2:	f00a f9a1 	bl	800aef8 <puts>
        CONSOLE_SPLIT;
 8000bb6:	481a      	ldr	r0, [pc, #104]	@ (8000c20 <cbf_dbg_view+0xb8>)
 8000bb8:	f00a f99e 	bl	800aef8 <puts>
        for (uint8_t cnt = 1; cnt < max_size - 1; cnt++) {
 8000bbc:	2301      	movs	r3, #1
 8000bbe:	77fb      	strb	r3, [r7, #31]
 8000bc0:	e00c      	b.n	8000bdc <cbf_dbg_view+0x74>
            printf("0x%08x\r\n", view_list[cnt]);
 8000bc2:	7ffb      	ldrb	r3, [r7, #31]
 8000bc4:	005b      	lsls	r3, r3, #1
 8000bc6:	3320      	adds	r3, #32
 8000bc8:	443b      	add	r3, r7
 8000bca:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4816      	ldr	r0, [pc, #88]	@ (8000c2c <cbf_dbg_view+0xc4>)
 8000bd2:	f00a f929 	bl	800ae28 <iprintf>
        for (uint8_t cnt = 1; cnt < max_size - 1; cnt++) {
 8000bd6:	7ffb      	ldrb	r3, [r7, #31]
 8000bd8:	3301      	adds	r3, #1
 8000bda:	77fb      	strb	r3, [r7, #31]
 8000bdc:	7ffa      	ldrb	r2, [r7, #31]
 8000bde:	7fbb      	ldrb	r3, [r7, #30]
 8000be0:	3b01      	subs	r3, #1
 8000be2:	429a      	cmp	r2, r3
 8000be4:	dbed      	blt.n	8000bc2 <cbf_dbg_view+0x5a>
        }
        CONSOLE_SPLIT;
 8000be6:	480e      	ldr	r0, [pc, #56]	@ (8000c20 <cbf_dbg_view+0xb8>)
 8000be8:	f00a f986 	bl	800aef8 <puts>
        return 0;
 8000bec:	2300      	movs	r3, #0
 8000bee:	e010      	b.n	8000c12 <cbf_dbg_view+0xaa>
    }
    
    view.dbg_value = (uint16_t)view_point;
 8000bf0:	69bb      	ldr	r3, [r7, #24]
 8000bf2:	b29a      	uxth	r2, r3
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <cbf_dbg_view+0xc8>)
 8000bf6:	805a      	strh	r2, [r3, #2]

    CONSOLE_SPLIT;
 8000bf8:	4809      	ldr	r0, [pc, #36]	@ (8000c20 <cbf_dbg_view+0xb8>)
 8000bfa:	f00a f97d 	bl	800aef8 <puts>
    printf("view_point is 0x%04x\r\n", view.dbg_value);
 8000bfe:	4b0c      	ldr	r3, [pc, #48]	@ (8000c30 <cbf_dbg_view+0xc8>)
 8000c00:	885b      	ldrh	r3, [r3, #2]
 8000c02:	4619      	mov	r1, r3
 8000c04:	480b      	ldr	r0, [pc, #44]	@ (8000c34 <cbf_dbg_view+0xcc>)
 8000c06:	f00a f90f 	bl	800ae28 <iprintf>
    CONSOLE_SPLIT;
 8000c0a:	4805      	ldr	r0, [pc, #20]	@ (8000c20 <cbf_dbg_view+0xb8>)
 8000c0c:	f00a f974 	bl	800aef8 <puts>

    return 0;
 8000c10:	2300      	movs	r3, #0
}
 8000c12:	4618      	mov	r0, r3
 8000c14:	3724      	adds	r7, #36	@ 0x24
 8000c16:	46bd      	mov	sp, r7
 8000c18:	bd90      	pop	{r4, r7, pc}
 8000c1a:	bf00      	nop
 8000c1c:	0800c158 	.word	0x0800c158
 8000c20:	0800bf2c 	.word	0x0800bf2c
 8000c24:	0800c108 	.word	0x0800c108
 8000c28:	0800c11c 	.word	0x0800c11c
 8000c2c:	0800c134 	.word	0x0800c134
 8000c30:	20000110 	.word	0x20000110
 8000c34:	0800c140 	.word	0x0800c140

08000c38 <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b08c      	sub	sp, #48	@ 0x30
 8000c3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000c3e:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000c42:	2200      	movs	r2, #0
 8000c44:	601a      	str	r2, [r3, #0]
 8000c46:	605a      	str	r2, [r3, #4]
 8000c48:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000c4a:	1d3b      	adds	r3, r7, #4
 8000c4c:	2220      	movs	r2, #32
 8000c4e:	2100      	movs	r1, #0
 8000c50:	4618      	mov	r0, r3
 8000c52:	f00a faed 	bl	800b230 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000c56:	4b32      	ldr	r3, [pc, #200]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c58:	f04f 42a0 	mov.w	r2, #1342177280	@ 0x50000000
 8000c5c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000c5e:	4b30      	ldr	r3, [pc, #192]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c60:	f44f 3240 	mov.w	r2, #196608	@ 0x30000
 8000c64:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c66:	4b2e      	ldr	r3, [pc, #184]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c6c:	4b2c      	ldr	r3, [pc, #176]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000c72:	4b2b      	ldr	r3, [pc, #172]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000c78:	4b29      	ldr	r3, [pc, #164]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c7e:	4b28      	ldr	r3, [pc, #160]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c80:	2204      	movs	r2, #4
 8000c82:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000c84:	4b26      	ldr	r3, [pc, #152]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c8a:	4b25      	ldr	r3, [pc, #148]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000c90:	4b23      	ldr	r3, [pc, #140]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c92:	2201      	movs	r2, #1
 8000c94:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c96:	4b22      	ldr	r3, [pc, #136]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000c98:	2200      	movs	r2, #0
 8000c9a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c9e:	4b20      	ldr	r3, [pc, #128]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000ca4:	4b1e      	ldr	r3, [pc, #120]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000ca6:	2200      	movs	r2, #0
 8000ca8:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000caa:	4b1d      	ldr	r3, [pc, #116]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000cac:	2200      	movs	r2, #0
 8000cae:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000cb2:	4b1b      	ldr	r3, [pc, #108]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000cb8:	4b19      	ldr	r3, [pc, #100]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000cba:	2200      	movs	r2, #0
 8000cbc:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000cc0:	4817      	ldr	r0, [pc, #92]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000cc2:	f001 f84b 	bl	8001d5c <HAL_ADC_Init>
 8000cc6:	4603      	mov	r3, r0
 8000cc8:	2b00      	cmp	r3, #0
 8000cca:	d001      	beq.n	8000cd0 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000ccc:	f000 faee 	bl	80012ac <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000cd0:	2300      	movs	r3, #0
 8000cd2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000cd4:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4811      	ldr	r0, [pc, #68]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000cdc:	f002 fcbe 	bl	800365c <HAL_ADCEx_MultiModeConfigChannel>
 8000ce0:	4603      	mov	r3, r0
 8000ce2:	2b00      	cmp	r3, #0
 8000ce4:	d001      	beq.n	8000cea <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 8000ce6:	f000 fae1 	bl	80012ac <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_1;
 8000cea:	4b0e      	ldr	r3, [pc, #56]	@ (8000d24 <MX_ADC1_Init+0xec>)
 8000cec:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000cee:	2306      	movs	r3, #6
 8000cf0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 8000cf2:	2300      	movs	r3, #0
 8000cf4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000cf6:	237f      	movs	r3, #127	@ 0x7f
 8000cf8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000cfa:	2304      	movs	r3, #4
 8000cfc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000cfe:	2300      	movs	r3, #0
 8000d00:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000d02:	1d3b      	adds	r3, r7, #4
 8000d04:	4619      	mov	r1, r3
 8000d06:	4806      	ldr	r0, [pc, #24]	@ (8000d20 <MX_ADC1_Init+0xe8>)
 8000d08:	f001 fe32 	bl	8002970 <HAL_ADC_ConfigChannel>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000d12:	f000 facb 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000d16:	bf00      	nop
 8000d18:	3730      	adds	r7, #48	@ 0x30
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	20000194 	.word	0x20000194
 8000d24:	04300002 	.word	0x04300002

08000d28 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000d28:	b580      	push	{r7, lr}
 8000d2a:	b09a      	sub	sp, #104	@ 0x68
 8000d2c:	af00      	add	r7, sp, #0
 8000d2e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d30:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000d34:	2200      	movs	r2, #0
 8000d36:	601a      	str	r2, [r3, #0]
 8000d38:	605a      	str	r2, [r3, #4]
 8000d3a:	609a      	str	r2, [r3, #8]
 8000d3c:	60da      	str	r2, [r3, #12]
 8000d3e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000d40:	f107 0310 	add.w	r3, r7, #16
 8000d44:	2244      	movs	r2, #68	@ 0x44
 8000d46:	2100      	movs	r1, #0
 8000d48:	4618      	mov	r0, r3
 8000d4a:	f00a fa71 	bl	800b230 <memset>
  if(adcHandle->Instance==ADC1)
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8000d56:	d167      	bne.n	8000e28 <HAL_ADC_MspInit+0x100>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8000d58:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8000d5c:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8000d5e:	f04f 5300 	mov.w	r3, #536870912	@ 0x20000000
 8000d62:	64fb      	str	r3, [r7, #76]	@ 0x4c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000d64:	f107 0310 	add.w	r3, r7, #16
 8000d68:	4618      	mov	r0, r3
 8000d6a:	f005 f94f 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 8000d74:	f000 fa9a 	bl	80012ac <Error_Handler>
    }

    /* ADC1 clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000d78:	4b2d      	ldr	r3, [pc, #180]	@ (8000e30 <HAL_ADC_MspInit+0x108>)
 8000d7a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d7c:	4a2c      	ldr	r2, [pc, #176]	@ (8000e30 <HAL_ADC_MspInit+0x108>)
 8000d7e:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8000d82:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d84:	4b2a      	ldr	r3, [pc, #168]	@ (8000e30 <HAL_ADC_MspInit+0x108>)
 8000d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d88:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8000d8c:	60fb      	str	r3, [r7, #12]
 8000d8e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d90:	4b27      	ldr	r3, [pc, #156]	@ (8000e30 <HAL_ADC_MspInit+0x108>)
 8000d92:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000d94:	4a26      	ldr	r2, [pc, #152]	@ (8000e30 <HAL_ADC_MspInit+0x108>)
 8000d96:	f043 0301 	orr.w	r3, r3, #1
 8000d9a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000d9c:	4b24      	ldr	r3, [pc, #144]	@ (8000e30 <HAL_ADC_MspInit+0x108>)
 8000d9e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000da0:	f003 0301 	and.w	r3, r3, #1
 8000da4:	60bb      	str	r3, [r7, #8]
 8000da6:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8000da8:	2301      	movs	r3, #1
 8000daa:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dac:	2303      	movs	r3, #3
 8000dae:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db0:	2300      	movs	r3, #0
 8000db2:	65fb      	str	r3, [r7, #92]	@ 0x5c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8000db8:	4619      	mov	r1, r3
 8000dba:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000dbe:	f003 fcdf 	bl	8004780 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 8000dc2:	4b1c      	ldr	r3, [pc, #112]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000dc4:	4a1c      	ldr	r2, [pc, #112]	@ (8000e38 <HAL_ADC_MspInit+0x110>)
 8000dc6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000dca:	2205      	movs	r2, #5
 8000dcc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000dce:	4b19      	ldr	r3, [pc, #100]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8000dd4:	4b17      	ldr	r3, [pc, #92]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8000dda:	4b16      	ldr	r3, [pc, #88]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000ddc:	2280      	movs	r2, #128	@ 0x80
 8000dde:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8000de0:	4b14      	ldr	r3, [pc, #80]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000de2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8000de6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8000de8:	4b12      	ldr	r3, [pc, #72]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000dea:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000dee:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8000df0:	4b10      	ldr	r3, [pc, #64]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000df2:	2220      	movs	r2, #32
 8000df4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8000df6:	4b0f      	ldr	r3, [pc, #60]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000df8:	2200      	movs	r2, #0
 8000dfa:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8000dfc:	480d      	ldr	r0, [pc, #52]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000dfe:	f003 f971 	bl	80040e4 <HAL_DMA_Init>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <HAL_ADC_MspInit+0xe4>
    {
      Error_Handler();
 8000e08:	f000 fa50 	bl	80012ac <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 8000e0c:	687b      	ldr	r3, [r7, #4]
 8000e0e:	4a09      	ldr	r2, [pc, #36]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000e10:	655a      	str	r2, [r3, #84]	@ 0x54
 8000e12:	4a08      	ldr	r2, [pc, #32]	@ (8000e34 <HAL_ADC_MspInit+0x10c>)
 8000e14:	687b      	ldr	r3, [r7, #4]
 8000e16:	6293      	str	r3, [r2, #40]	@ 0x28

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC1_2_IRQn, 5, 0);
 8000e18:	2200      	movs	r2, #0
 8000e1a:	2105      	movs	r1, #5
 8000e1c:	2012      	movs	r0, #18
 8000e1e:	f002 fe2d 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC1_2_IRQn);
 8000e22:	2012      	movs	r0, #18
 8000e24:	f002 fe54 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8000e28:	bf00      	nop
 8000e2a:	3768      	adds	r7, #104	@ 0x68
 8000e2c:	46bd      	mov	sp, r7
 8000e2e:	bd80      	pop	{r7, pc}
 8000e30:	40021000 	.word	0x40021000
 8000e34:	20000200 	.word	0x20000200
 8000e38:	40020008 	.word	0x40020008

08000e3c <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8000e3c:	b5b0      	push	{r4, r5, r7, lr}
 8000e3e:	b086      	sub	sp, #24
 8000e40:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Init */
  CLI_Init();
 8000e42:	f7ff fc69 	bl	8000718 <CLI_Init>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, CLI_Task, osPriorityNormal, 0, 128);
 8000e46:	4b09      	ldr	r3, [pc, #36]	@ (8000e6c <MX_FREERTOS_Init+0x30>)
 8000e48:	1d3c      	adds	r4, r7, #4
 8000e4a:	461d      	mov	r5, r3
 8000e4c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000e4e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000e50:	682b      	ldr	r3, [r5, #0]
 8000e52:	6023      	str	r3, [r4, #0]
  CLI_TaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000e54:	1d3b      	adds	r3, r7, #4
 8000e56:	2100      	movs	r1, #0
 8000e58:	4618      	mov	r0, r3
 8000e5a:	f008 fe2c 	bl	8009ab6 <osThreadCreate>
 8000e5e:	4603      	mov	r3, r0
 8000e60:	4a03      	ldr	r2, [pc, #12]	@ (8000e70 <MX_FREERTOS_Init+0x34>)
 8000e62:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000e64:	bf00      	nop
 8000e66:	3718      	adds	r7, #24
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bdb0      	pop	{r4, r5, r7, pc}
 8000e6c:	0800c174 	.word	0x0800c174
 8000e70:	20000260 	.word	0x20000260

08000e74 <CLI_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void CLI_Task(void const * argument)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    if (cli.rx_done == CLI_READY) {
 8000e7c:	4b07      	ldr	r3, [pc, #28]	@ (8000e9c <CLI_Task+0x28>)
 8000e7e:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8000e82:	2b01      	cmp	r3, #1
 8000e84:	d106      	bne.n	8000e94 <CLI_Task+0x20>
        cli.rx_done = CLI_CLEAR;
 8000e86:	4b05      	ldr	r3, [pc, #20]	@ (8000e9c <CLI_Task+0x28>)
 8000e88:	2200      	movs	r2, #0
 8000e8a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        parser((char *)&cli.buffer[0]);
 8000e8e:	4803      	ldr	r0, [pc, #12]	@ (8000e9c <CLI_Task+0x28>)
 8000e90:	f7ff fc6a 	bl	8000768 <parser>
    }
    osDelay(1);
 8000e94:	2001      	movs	r0, #1
 8000e96:	f008 fe35 	bl	8009b04 <osDelay>
    if (cli.rx_done == CLI_READY) {
 8000e9a:	e7ef      	b.n	8000e7c <CLI_Task+0x8>
 8000e9c:	2000008c 	.word	0x2000008c

08000ea0 <MX_DAC1_Init>:

DAC_HandleTypeDef hdac1;

/* DAC1 init function */
void MX_DAC1_Init(void)
{
 8000ea0:	b580      	push	{r7, lr}
 8000ea2:	b08c      	sub	sp, #48	@ 0x30
 8000ea4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC1_Init 0 */

  /* USER CODE END DAC1_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	2230      	movs	r2, #48	@ 0x30
 8000eaa:	2100      	movs	r1, #0
 8000eac:	4618      	mov	r0, r3
 8000eae:	f00a f9bf 	bl	800b230 <memset>

  /* USER CODE END DAC1_Init 1 */

  /** DAC Initialization
  */
  hdac1.Instance = DAC1;
 8000eb2:	4b16      	ldr	r3, [pc, #88]	@ (8000f0c <MX_DAC1_Init+0x6c>)
 8000eb4:	4a16      	ldr	r2, [pc, #88]	@ (8000f10 <MX_DAC1_Init+0x70>)
 8000eb6:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac1) != HAL_OK)
 8000eb8:	4814      	ldr	r0, [pc, #80]	@ (8000f0c <MX_DAC1_Init+0x6c>)
 8000eba:	f002 fe25 	bl	8003b08 <HAL_DAC_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_DAC1_Init+0x28>
  {
    Error_Handler();
 8000ec4:	f000 f9f2 	bl	80012ac <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_HighFrequency = DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC;
 8000ec8:	2302      	movs	r3, #2
 8000eca:	603b      	str	r3, [r7, #0]
  sConfig.DAC_DMADoubleDataMode = DISABLE;
 8000ecc:	2300      	movs	r3, #0
 8000ece:	713b      	strb	r3, [r7, #4]
  sConfig.DAC_SignedFormat = DISABLE;
 8000ed0:	2300      	movs	r3, #0
 8000ed2:	717b      	strb	r3, [r7, #5]
  sConfig.DAC_SampleAndHold = DAC_SAMPLEANDHOLD_DISABLE;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	60bb      	str	r3, [r7, #8]
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	60fb      	str	r3, [r7, #12]
  sConfig.DAC_Trigger2 = DAC_TRIGGER_NONE;
 8000edc:	2300      	movs	r3, #0
 8000ede:	613b      	str	r3, [r7, #16]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000ee0:	2300      	movs	r3, #0
 8000ee2:	617b      	str	r3, [r7, #20]
  sConfig.DAC_ConnectOnChipPeripheral = DAC_CHIPCONNECT_EXTERNAL;
 8000ee4:	2301      	movs	r3, #1
 8000ee6:	61bb      	str	r3, [r7, #24]
  sConfig.DAC_UserTrimming = DAC_TRIMMING_FACTORY;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	61fb      	str	r3, [r7, #28]
  if (HAL_DAC_ConfigChannel(&hdac1, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000eec:	463b      	mov	r3, r7
 8000eee:	2200      	movs	r2, #0
 8000ef0:	4619      	mov	r1, r3
 8000ef2:	4806      	ldr	r0, [pc, #24]	@ (8000f0c <MX_DAC1_Init+0x6c>)
 8000ef4:	f002 fe40 	bl	8003b78 <HAL_DAC_ConfigChannel>
 8000ef8:	4603      	mov	r3, r0
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d001      	beq.n	8000f02 <MX_DAC1_Init+0x62>
  {
    Error_Handler();
 8000efe:	f000 f9d5 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN DAC1_Init 2 */

  /* USER CODE END DAC1_Init 2 */

}
 8000f02:	bf00      	nop
 8000f04:	3730      	adds	r7, #48	@ 0x30
 8000f06:	46bd      	mov	sp, r7
 8000f08:	bd80      	pop	{r7, pc}
 8000f0a:	bf00      	nop
 8000f0c:	20000264 	.word	0x20000264
 8000f10:	50000800 	.word	0x50000800

08000f14 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08a      	sub	sp, #40	@ 0x28
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f1c:	f107 0314 	add.w	r3, r7, #20
 8000f20:	2200      	movs	r2, #0
 8000f22:	601a      	str	r2, [r3, #0]
 8000f24:	605a      	str	r2, [r3, #4]
 8000f26:	609a      	str	r2, [r3, #8]
 8000f28:	60da      	str	r2, [r3, #12]
 8000f2a:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC1)
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	4a15      	ldr	r2, [pc, #84]	@ (8000f88 <HAL_DAC_MspInit+0x74>)
 8000f32:	4293      	cmp	r3, r2
 8000f34:	d124      	bne.n	8000f80 <HAL_DAC_MspInit+0x6c>
  {
  /* USER CODE BEGIN DAC1_MspInit 0 */

  /* USER CODE END DAC1_MspInit 0 */
    /* DAC1 clock enable */
    __HAL_RCC_DAC1_CLK_ENABLE();
 8000f36:	4b15      	ldr	r3, [pc, #84]	@ (8000f8c <HAL_DAC_MspInit+0x78>)
 8000f38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f3a:	4a14      	ldr	r2, [pc, #80]	@ (8000f8c <HAL_DAC_MspInit+0x78>)
 8000f3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f40:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f42:	4b12      	ldr	r3, [pc, #72]	@ (8000f8c <HAL_DAC_MspInit+0x78>)
 8000f44:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f46:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000f4a:	613b      	str	r3, [r7, #16]
 8000f4c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f4e:	4b0f      	ldr	r3, [pc, #60]	@ (8000f8c <HAL_DAC_MspInit+0x78>)
 8000f50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f52:	4a0e      	ldr	r2, [pc, #56]	@ (8000f8c <HAL_DAC_MspInit+0x78>)
 8000f54:	f043 0301 	orr.w	r3, r3, #1
 8000f58:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8000f5a:	4b0c      	ldr	r3, [pc, #48]	@ (8000f8c <HAL_DAC_MspInit+0x78>)
 8000f5c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000f5e:	f003 0301 	and.w	r3, r3, #1
 8000f62:	60fb      	str	r3, [r7, #12]
 8000f64:	68fb      	ldr	r3, [r7, #12]
    /**DAC1 GPIO Configuration
    PA4     ------> DAC1_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000f66:	2310      	movs	r3, #16
 8000f68:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000f6a:	2303      	movs	r3, #3
 8000f6c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f72:	f107 0314 	add.w	r3, r7, #20
 8000f76:	4619      	mov	r1, r3
 8000f78:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8000f7c:	f003 fc00 	bl	8004780 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC1_MspInit 1 */

  /* USER CODE END DAC1_MspInit 1 */
  }
}
 8000f80:	bf00      	nop
 8000f82:	3728      	adds	r7, #40	@ 0x28
 8000f84:	46bd      	mov	sp, r7
 8000f86:	bd80      	pop	{r7, pc}
 8000f88:	50000800 	.word	0x50000800
 8000f8c:	40021000 	.word	0x40021000

08000f90 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000f90:	b580      	push	{r7, lr}
 8000f92:	b082      	sub	sp, #8
 8000f94:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8000f96:	4b12      	ldr	r3, [pc, #72]	@ (8000fe0 <MX_DMA_Init+0x50>)
 8000f98:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f9a:	4a11      	ldr	r2, [pc, #68]	@ (8000fe0 <MX_DMA_Init+0x50>)
 8000f9c:	f043 0304 	orr.w	r3, r3, #4
 8000fa0:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fa2:	4b0f      	ldr	r3, [pc, #60]	@ (8000fe0 <MX_DMA_Init+0x50>)
 8000fa4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fa6:	f003 0304 	and.w	r3, r3, #4
 8000faa:	607b      	str	r3, [r7, #4]
 8000fac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000fae:	4b0c      	ldr	r3, [pc, #48]	@ (8000fe0 <MX_DMA_Init+0x50>)
 8000fb0:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fb2:	4a0b      	ldr	r2, [pc, #44]	@ (8000fe0 <MX_DMA_Init+0x50>)
 8000fb4:	f043 0301 	orr.w	r3, r3, #1
 8000fb8:	6493      	str	r3, [r2, #72]	@ 0x48
 8000fba:	4b09      	ldr	r3, [pc, #36]	@ (8000fe0 <MX_DMA_Init+0x50>)
 8000fbc:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000fbe:	f003 0301 	and.w	r3, r3, #1
 8000fc2:	603b      	str	r3, [r7, #0]
 8000fc4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 5, 0);
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	2105      	movs	r1, #5
 8000fca:	200b      	movs	r0, #11
 8000fcc:	f002 fd56 	bl	8003a7c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000fd0:	200b      	movs	r0, #11
 8000fd2:	f002 fd7d 	bl	8003ad0 <HAL_NVIC_EnableIRQ>

}
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	40021000 	.word	0x40021000

08000fe4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08a      	sub	sp, #40	@ 0x28
 8000fe8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fea:	f107 0314 	add.w	r3, r7, #20
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
 8000ff8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ffa:	4b21      	ldr	r3, [pc, #132]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8000ffc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000ffe:	4a20      	ldr	r2, [pc, #128]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001000:	f043 0304 	orr.w	r3, r3, #4
 8001004:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001006:	4b1e      	ldr	r3, [pc, #120]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001008:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800100a:	f003 0304 	and.w	r3, r3, #4
 800100e:	613b      	str	r3, [r7, #16]
 8001010:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001012:	4b1b      	ldr	r3, [pc, #108]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001014:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001016:	4a1a      	ldr	r2, [pc, #104]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001018:	f043 0320 	orr.w	r3, r3, #32
 800101c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800101e:	4b18      	ldr	r3, [pc, #96]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001020:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001022:	f003 0320 	and.w	r3, r3, #32
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800102a:	4b15      	ldr	r3, [pc, #84]	@ (8001080 <MX_GPIO_Init+0x9c>)
 800102c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800102e:	4a14      	ldr	r2, [pc, #80]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001030:	f043 0301 	orr.w	r3, r3, #1
 8001034:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001036:	4b12      	ldr	r3, [pc, #72]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001038:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800103a:	f003 0301 	and.w	r3, r3, #1
 800103e:	60bb      	str	r3, [r7, #8]
 8001040:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001042:	4b0f      	ldr	r3, [pc, #60]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001044:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001046:	4a0e      	ldr	r2, [pc, #56]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001048:	f043 0302 	orr.w	r3, r3, #2
 800104c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800104e:	4b0c      	ldr	r3, [pc, #48]	@ (8001080 <MX_GPIO_Init+0x9c>)
 8001050:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001052:	f003 0302 	and.w	r3, r3, #2
 8001056:	607b      	str	r3, [r7, #4]
 8001058:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800105a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800105e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001060:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001064:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001066:	2300      	movs	r3, #0
 8001068:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800106a:	f107 0314 	add.w	r3, r7, #20
 800106e:	4619      	mov	r1, r3
 8001070:	4804      	ldr	r0, [pc, #16]	@ (8001084 <MX_GPIO_Init+0xa0>)
 8001072:	f003 fb85 	bl	8004780 <HAL_GPIO_Init>

}
 8001076:	bf00      	nop
 8001078:	3728      	adds	r7, #40	@ 0x28
 800107a:	46bd      	mov	sp, r7
 800107c:	bd80      	pop	{r7, pc}
 800107e:	bf00      	nop
 8001080:	40021000 	.word	0x40021000
 8001084:	48000800 	.word	0x48000800

08001088 <MX_I2C1_Init>:

I2C_HandleTypeDef hi2c1;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800108c:	4b1b      	ldr	r3, [pc, #108]	@ (80010fc <MX_I2C1_Init+0x74>)
 800108e:	4a1c      	ldr	r2, [pc, #112]	@ (8001100 <MX_I2C1_Init+0x78>)
 8001090:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x30A0A7FB;
 8001092:	4b1a      	ldr	r3, [pc, #104]	@ (80010fc <MX_I2C1_Init+0x74>)
 8001094:	4a1b      	ldr	r2, [pc, #108]	@ (8001104 <MX_I2C1_Init+0x7c>)
 8001096:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8001098:	4b18      	ldr	r3, [pc, #96]	@ (80010fc <MX_I2C1_Init+0x74>)
 800109a:	2200      	movs	r2, #0
 800109c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800109e:	4b17      	ldr	r3, [pc, #92]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010a0:	2201      	movs	r2, #1
 80010a2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80010a4:	4b15      	ldr	r3, [pc, #84]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80010aa:	4b14      	ldr	r3, [pc, #80]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010b0:	4b12      	ldr	r3, [pc, #72]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010b2:	2200      	movs	r2, #0
 80010b4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010b6:	4b11      	ldr	r3, [pc, #68]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010bc:	4b0f      	ldr	r3, [pc, #60]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010be:	2200      	movs	r2, #0
 80010c0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80010c2:	480e      	ldr	r0, [pc, #56]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010c4:	f003 fdb0 	bl	8004c28 <HAL_I2C_Init>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d001      	beq.n	80010d2 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 80010ce:	f000 f8ed 	bl	80012ac <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010d2:	2100      	movs	r1, #0
 80010d4:	4809      	ldr	r0, [pc, #36]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010d6:	f003 fecd 	bl	8004e74 <HAL_I2CEx_ConfigAnalogFilter>
 80010da:	4603      	mov	r3, r0
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 80010e0:	f000 f8e4 	bl	80012ac <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 80010e4:	2100      	movs	r1, #0
 80010e6:	4805      	ldr	r0, [pc, #20]	@ (80010fc <MX_I2C1_Init+0x74>)
 80010e8:	f003 ff34 	bl	8004f54 <HAL_I2CEx_ConfigDigitalFilter>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 80010f2:	f000 f8db 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80010f6:	bf00      	nop
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	bf00      	nop
 80010fc:	20000278 	.word	0x20000278
 8001100:	40005400 	.word	0x40005400
 8001104:	30a0a7fb 	.word	0x30a0a7fb

08001108 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b09a      	sub	sp, #104	@ 0x68
 800110c:	af00      	add	r7, sp, #0
 800110e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001110:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001114:	2200      	movs	r2, #0
 8001116:	601a      	str	r2, [r3, #0]
 8001118:	605a      	str	r2, [r3, #4]
 800111a:	609a      	str	r2, [r3, #8]
 800111c:	60da      	str	r2, [r3, #12]
 800111e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001120:	f107 0310 	add.w	r3, r7, #16
 8001124:	2244      	movs	r2, #68	@ 0x44
 8001126:	2100      	movs	r1, #0
 8001128:	4618      	mov	r0, r3
 800112a:	f00a f881 	bl	800b230 <memset>
  if(i2cHandle->Instance==I2C1)
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	681b      	ldr	r3, [r3, #0]
 8001132:	4a1f      	ldr	r2, [pc, #124]	@ (80011b0 <HAL_I2C_MspInit+0xa8>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d136      	bne.n	80011a6 <HAL_I2C_MspInit+0x9e>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001138:	2340      	movs	r3, #64	@ 0x40
 800113a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 800113c:	2300      	movs	r3, #0
 800113e:	62bb      	str	r3, [r7, #40]	@ 0x28
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001140:	f107 0310 	add.w	r3, r7, #16
 8001144:	4618      	mov	r0, r3
 8001146:	f004 ff61 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 800114a:	4603      	mov	r3, r0
 800114c:	2b00      	cmp	r3, #0
 800114e:	d001      	beq.n	8001154 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001150:	f000 f8ac 	bl	80012ac <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001154:	4b17      	ldr	r3, [pc, #92]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001156:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001158:	4a16      	ldr	r2, [pc, #88]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 800115a:	f043 0302 	orr.w	r3, r3, #2
 800115e:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001160:	4b14      	ldr	r3, [pc, #80]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001162:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001164:	f003 0302 	and.w	r3, r3, #2
 8001168:	60fb      	str	r3, [r7, #12]
 800116a:	68fb      	ldr	r3, [r7, #12]
    /**I2C1 GPIO Configuration
    PB8-BOOT0     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800116c:	f44f 7340 	mov.w	r3, #768	@ 0x300
 8001170:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001172:	2312      	movs	r3, #18
 8001174:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001176:	2300      	movs	r3, #0
 8001178:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800117a:	2300      	movs	r3, #0
 800117c:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800117e:	2304      	movs	r3, #4
 8001180:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001182:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001186:	4619      	mov	r1, r3
 8001188:	480b      	ldr	r0, [pc, #44]	@ (80011b8 <HAL_I2C_MspInit+0xb0>)
 800118a:	f003 faf9 	bl	8004780 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800118e:	4b09      	ldr	r3, [pc, #36]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001190:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001192:	4a08      	ldr	r2, [pc, #32]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 8001194:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001198:	6593      	str	r3, [r2, #88]	@ 0x58
 800119a:	4b06      	ldr	r3, [pc, #24]	@ (80011b4 <HAL_I2C_MspInit+0xac>)
 800119c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800119e:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80011a2:	60bb      	str	r3, [r7, #8]
 80011a4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }
}
 80011a6:	bf00      	nop
 80011a8:	3768      	adds	r7, #104	@ 0x68
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	40005400 	.word	0x40005400
 80011b4:	40021000 	.word	0x40021000
 80011b8:	48000400 	.word	0x48000400

080011bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80011bc:	b580      	push	{r7, lr}
 80011be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80011c0:	f000 fb6f 	bl	80018a2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80011c4:	f000 f814 	bl	80011f0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80011c8:	f7ff ff0c 	bl	8000fe4 <MX_GPIO_Init>
  MX_DMA_Init();
 80011cc:	f7ff fee0 	bl	8000f90 <MX_DMA_Init>
  MX_ADC1_Init();
 80011d0:	f7ff fd32 	bl	8000c38 <MX_ADC1_Init>
  MX_I2C1_Init();
 80011d4:	f7ff ff58 	bl	8001088 <MX_I2C1_Init>
  MX_LPUART1_UART_Init();
 80011d8:	f000 fa90 	bl	80016fc <MX_LPUART1_UART_Init>
  MX_SPI1_Init();
 80011dc:	f000 f878 	bl	80012d0 <MX_SPI1_Init>
  MX_DAC1_Init();
 80011e0:	f7ff fe5e 	bl	8000ea0 <MX_DAC1_Init>
  /* USER CODE BEGIN 2 */

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 80011e4:	f7ff fe2a 	bl	8000e3c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 80011e8:	f008 fc5e 	bl	8009aa8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80011ec:	bf00      	nop
 80011ee:	e7fd      	b.n	80011ec <main+0x30>

080011f0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b094      	sub	sp, #80	@ 0x50
 80011f4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80011f6:	f107 0318 	add.w	r3, r7, #24
 80011fa:	2238      	movs	r2, #56	@ 0x38
 80011fc:	2100      	movs	r1, #0
 80011fe:	4618      	mov	r0, r3
 8001200:	f00a f816 	bl	800b230 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001204:	1d3b      	adds	r3, r7, #4
 8001206:	2200      	movs	r2, #0
 8001208:	601a      	str	r2, [r3, #0]
 800120a:	605a      	str	r2, [r3, #4]
 800120c:	609a      	str	r2, [r3, #8]
 800120e:	60da      	str	r2, [r3, #12]
 8001210:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001212:	2000      	movs	r0, #0
 8001214:	f003 ff0a 	bl	800502c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001218:	2302      	movs	r3, #2
 800121a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800121c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001220:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001222:	2340      	movs	r3, #64	@ 0x40
 8001224:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001226:	2302      	movs	r3, #2
 8001228:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 800122a:	2302      	movs	r3, #2
 800122c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 800122e:	2304      	movs	r3, #4
 8001230:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001232:	2355      	movs	r3, #85	@ 0x55
 8001234:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001236:	2302      	movs	r3, #2
 8001238:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800123a:	2302      	movs	r3, #2
 800123c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800123e:	2302      	movs	r3, #2
 8001240:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001242:	f107 0318 	add.w	r3, r7, #24
 8001246:	4618      	mov	r0, r3
 8001248:	f003 ffb4 	bl	80051b4 <HAL_RCC_OscConfig>
 800124c:	4603      	mov	r3, r0
 800124e:	2b00      	cmp	r3, #0
 8001250:	d001      	beq.n	8001256 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001252:	f000 f82b 	bl	80012ac <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001256:	230f      	movs	r3, #15
 8001258:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800125a:	2303      	movs	r3, #3
 800125c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800125e:	2300      	movs	r3, #0
 8001260:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001262:	2300      	movs	r3, #0
 8001264:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001266:	2300      	movs	r3, #0
 8001268:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 800126a:	1d3b      	adds	r3, r7, #4
 800126c:	2104      	movs	r1, #4
 800126e:	4618      	mov	r0, r3
 8001270:	f004 fbac 	bl	80059cc <HAL_RCC_ClockConfig>
 8001274:	4603      	mov	r3, r0
 8001276:	2b00      	cmp	r3, #0
 8001278:	d001      	beq.n	800127e <SystemClock_Config+0x8e>
  {
    Error_Handler();
 800127a:	f000 f817 	bl	80012ac <Error_Handler>
  }
}
 800127e:	bf00      	nop
 8001280:	3750      	adds	r7, #80	@ 0x50
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}
	...

08001288 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	681b      	ldr	r3, [r3, #0]
 8001294:	4a04      	ldr	r2, [pc, #16]	@ (80012a8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001296:	4293      	cmp	r3, r2
 8001298:	d101      	bne.n	800129e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800129a:	f000 fb1b 	bl	80018d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800129e:	bf00      	nop
 80012a0:	3708      	adds	r7, #8
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40012c00 	.word	0x40012c00

080012ac <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012ac:	b480      	push	{r7}
 80012ae:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012b0:	b672      	cpsid	i
}
 80012b2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012b4:	bf00      	nop
 80012b6:	e7fd      	b.n	80012b4 <Error_Handler+0x8>

080012b8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80012b8:	b480      	push	{r7}
 80012ba:	b083      	sub	sp, #12
 80012bc:	af00      	add	r7, sp, #0
 80012be:	6078      	str	r0, [r7, #4]
 80012c0:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 80012c2:	bf00      	nop
 80012c4:	370c      	adds	r7, #12
 80012c6:	46bd      	mov	sp, r7
 80012c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012cc:	4770      	bx	lr
	...

080012d0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80012d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012d6:	4a1c      	ldr	r2, [pc, #112]	@ (8001348 <MX_SPI1_Init+0x78>)
 80012d8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012da:	4b1a      	ldr	r3, [pc, #104]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012dc:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012e0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012e2:	4b18      	ldr	r3, [pc, #96]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012e8:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012ea:	f44f 62e0 	mov.w	r2, #1792	@ 0x700
 80012ee:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f0:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f6:	4b13      	ldr	r3, [pc, #76]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80012fc:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_SPI1_Init+0x74>)
 80012fe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001302:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_4;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001306:	2208      	movs	r2, #8
 8001308:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_SPI1_Init+0x74>)
 800130c:	2200      	movs	r2, #0
 800130e:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001310:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001312:	2200      	movs	r2, #0
 8001314:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001316:	4b0b      	ldr	r3, [pc, #44]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001318:	2200      	movs	r2, #0
 800131a:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 7;
 800131c:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_SPI1_Init+0x74>)
 800131e:	2207      	movs	r2, #7
 8001320:	62da      	str	r2, [r3, #44]	@ 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001322:	4b08      	ldr	r3, [pc, #32]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001324:	2200      	movs	r2, #0
 8001326:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001328:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_SPI1_Init+0x74>)
 800132a:	2208      	movs	r2, #8
 800132c:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 800132e:	4805      	ldr	r0, [pc, #20]	@ (8001344 <MX_SPI1_Init+0x74>)
 8001330:	f005 fa0c 	bl	800674c <HAL_SPI_Init>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_SPI1_Init+0x6e>
  {
    Error_Handler();
 800133a:	f7ff ffb7 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	200002cc 	.word	0x200002cc
 8001348:	40013000 	.word	0x40013000

0800134c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b08a      	sub	sp, #40	@ 0x28
 8001350:	af00      	add	r7, sp, #0
 8001352:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001354:	f107 0314 	add.w	r3, r7, #20
 8001358:	2200      	movs	r2, #0
 800135a:	601a      	str	r2, [r3, #0]
 800135c:	605a      	str	r2, [r3, #4]
 800135e:	609a      	str	r2, [r3, #8]
 8001360:	60da      	str	r2, [r3, #12]
 8001362:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001364:	687b      	ldr	r3, [r7, #4]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	4a17      	ldr	r2, [pc, #92]	@ (80013c8 <HAL_SPI_MspInit+0x7c>)
 800136a:	4293      	cmp	r3, r2
 800136c:	d128      	bne.n	80013c0 <HAL_SPI_MspInit+0x74>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800136e:	4b17      	ldr	r3, [pc, #92]	@ (80013cc <HAL_SPI_MspInit+0x80>)
 8001370:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001372:	4a16      	ldr	r2, [pc, #88]	@ (80013cc <HAL_SPI_MspInit+0x80>)
 8001374:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001378:	6613      	str	r3, [r2, #96]	@ 0x60
 800137a:	4b14      	ldr	r3, [pc, #80]	@ (80013cc <HAL_SPI_MspInit+0x80>)
 800137c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800137e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001386:	4b11      	ldr	r3, [pc, #68]	@ (80013cc <HAL_SPI_MspInit+0x80>)
 8001388:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800138a:	4a10      	ldr	r2, [pc, #64]	@ (80013cc <HAL_SPI_MspInit+0x80>)
 800138c:	f043 0301 	orr.w	r3, r3, #1
 8001390:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001392:	4b0e      	ldr	r3, [pc, #56]	@ (80013cc <HAL_SPI_MspInit+0x80>)
 8001394:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001396:	f003 0301 	and.w	r3, r3, #1
 800139a:	60fb      	str	r3, [r7, #12]
 800139c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800139e:	23e0      	movs	r3, #224	@ 0xe0
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013aa:	2300      	movs	r3, #0
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80013ae:	2305      	movs	r3, #5
 80013b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 80013bc:	f003 f9e0 	bl	8004780 <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80013c0:	bf00      	nop
 80013c2:	3728      	adds	r7, #40	@ 0x28
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bd80      	pop	{r7, pc}
 80013c8:	40013000 	.word	0x40013000
 80013cc:	40021000 	.word	0x40021000

080013d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80013d6:	4b12      	ldr	r3, [pc, #72]	@ (8001420 <HAL_MspInit+0x50>)
 80013d8:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013da:	4a11      	ldr	r2, [pc, #68]	@ (8001420 <HAL_MspInit+0x50>)
 80013dc:	f043 0301 	orr.w	r3, r3, #1
 80013e0:	6613      	str	r3, [r2, #96]	@ 0x60
 80013e2:	4b0f      	ldr	r3, [pc, #60]	@ (8001420 <HAL_MspInit+0x50>)
 80013e4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80013e6:	f003 0301 	and.w	r3, r3, #1
 80013ea:	607b      	str	r3, [r7, #4]
 80013ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80013ee:	4b0c      	ldr	r3, [pc, #48]	@ (8001420 <HAL_MspInit+0x50>)
 80013f0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013f2:	4a0b      	ldr	r2, [pc, #44]	@ (8001420 <HAL_MspInit+0x50>)
 80013f4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013f8:	6593      	str	r3, [r2, #88]	@ 0x58
 80013fa:	4b09      	ldr	r3, [pc, #36]	@ (8001420 <HAL_MspInit+0x50>)
 80013fc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80013fe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001402:	603b      	str	r3, [r7, #0]
 8001404:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001406:	2200      	movs	r2, #0
 8001408:	210f      	movs	r1, #15
 800140a:	f06f 0001 	mvn.w	r0, #1
 800140e:	f002 fb35 	bl	8003a7c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001412:	f003 febf 	bl	8005194 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001416:	bf00      	nop
 8001418:	3708      	adds	r7, #8
 800141a:	46bd      	mov	sp, r7
 800141c:	bd80      	pop	{r7, pc}
 800141e:	bf00      	nop
 8001420:	40021000 	.word	0x40021000

08001424 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	b08c      	sub	sp, #48	@ 0x30
 8001428:	af00      	add	r7, sp, #0
 800142a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800142c:	2300      	movs	r3, #0
 800142e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001430:	2300      	movs	r3, #0
 8001432:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001434:	4b2c      	ldr	r3, [pc, #176]	@ (80014e8 <HAL_InitTick+0xc4>)
 8001436:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001438:	4a2b      	ldr	r2, [pc, #172]	@ (80014e8 <HAL_InitTick+0xc4>)
 800143a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800143e:	6613      	str	r3, [r2, #96]	@ 0x60
 8001440:	4b29      	ldr	r3, [pc, #164]	@ (80014e8 <HAL_InitTick+0xc4>)
 8001442:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001444:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001448:	60bb      	str	r3, [r7, #8]
 800144a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 800144c:	f107 020c 	add.w	r2, r7, #12
 8001450:	f107 0310 	add.w	r3, r7, #16
 8001454:	4611      	mov	r1, r2
 8001456:	4618      	mov	r0, r3
 8001458:	f004 fd50 	bl	8005efc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 800145c:	f004 fd38 	bl	8005ed0 <HAL_RCC_GetPCLK2Freq>
 8001460:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001462:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001464:	4a21      	ldr	r2, [pc, #132]	@ (80014ec <HAL_InitTick+0xc8>)
 8001466:	fba2 2303 	umull	r2, r3, r2, r3
 800146a:	0c9b      	lsrs	r3, r3, #18
 800146c:	3b01      	subs	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001470:	4b1f      	ldr	r3, [pc, #124]	@ (80014f0 <HAL_InitTick+0xcc>)
 8001472:	4a20      	ldr	r2, [pc, #128]	@ (80014f4 <HAL_InitTick+0xd0>)
 8001474:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001476:	4b1e      	ldr	r3, [pc, #120]	@ (80014f0 <HAL_InitTick+0xcc>)
 8001478:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800147c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800147e:	4a1c      	ldr	r2, [pc, #112]	@ (80014f0 <HAL_InitTick+0xcc>)
 8001480:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001482:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001484:	4b1a      	ldr	r3, [pc, #104]	@ (80014f0 <HAL_InitTick+0xcc>)
 8001486:	2200      	movs	r2, #0
 8001488:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800148a:	4b19      	ldr	r3, [pc, #100]	@ (80014f0 <HAL_InitTick+0xcc>)
 800148c:	2200      	movs	r2, #0
 800148e:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001490:	4817      	ldr	r0, [pc, #92]	@ (80014f0 <HAL_InitTick+0xcc>)
 8001492:	f005 fb51 	bl	8006b38 <HAL_TIM_Base_Init>
 8001496:	4603      	mov	r3, r0
 8001498:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800149c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d11b      	bne.n	80014dc <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80014a4:	4812      	ldr	r0, [pc, #72]	@ (80014f0 <HAL_InitTick+0xcc>)
 80014a6:	f005 fc4f 	bl	8006d48 <HAL_TIM_Base_Start_IT>
 80014aa:	4603      	mov	r3, r0
 80014ac:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80014b0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d111      	bne.n	80014dc <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80014b8:	2019      	movs	r0, #25
 80014ba:	f002 fb09 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80014be:	687b      	ldr	r3, [r7, #4]
 80014c0:	2b0f      	cmp	r3, #15
 80014c2:	d808      	bhi.n	80014d6 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 80014c4:	2200      	movs	r2, #0
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	2019      	movs	r0, #25
 80014ca:	f002 fad7 	bl	8003a7c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80014ce:	4a0a      	ldr	r2, [pc, #40]	@ (80014f8 <HAL_InitTick+0xd4>)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	6013      	str	r3, [r2, #0]
 80014d4:	e002      	b.n	80014dc <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 80014d6:	2301      	movs	r3, #1
 80014d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80014dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80014e0:	4618      	mov	r0, r3
 80014e2:	3730      	adds	r7, #48	@ 0x30
 80014e4:	46bd      	mov	sp, r7
 80014e6:	bd80      	pop	{r7, pc}
 80014e8:	40021000 	.word	0x40021000
 80014ec:	431bde83 	.word	0x431bde83
 80014f0:	20000330 	.word	0x20000330
 80014f4:	40012c00 	.word	0x40012c00
 80014f8:	20000004 	.word	0x20000004

080014fc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80014fc:	b480      	push	{r7}
 80014fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001500:	bf00      	nop
 8001502:	e7fd      	b.n	8001500 <NMI_Handler+0x4>

08001504 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001504:	b480      	push	{r7}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001508:	bf00      	nop
 800150a:	e7fd      	b.n	8001508 <HardFault_Handler+0x4>

0800150c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800150c:	b480      	push	{r7}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001510:	bf00      	nop
 8001512:	e7fd      	b.n	8001510 <MemManage_Handler+0x4>

08001514 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001514:	b480      	push	{r7}
 8001516:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001518:	bf00      	nop
 800151a:	e7fd      	b.n	8001518 <BusFault_Handler+0x4>

0800151c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800151c:	b480      	push	{r7}
 800151e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001520:	bf00      	nop
 8001522:	e7fd      	b.n	8001520 <UsageFault_Handler+0x4>

08001524 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001524:	b480      	push	{r7}
 8001526:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001528:	bf00      	nop
 800152a:	46bd      	mov	sp, r7
 800152c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001530:	4770      	bx	lr
	...

08001534 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001538:	4802      	ldr	r0, [pc, #8]	@ (8001544 <DMA1_Channel1_IRQHandler+0x10>)
 800153a:	f003 f80f 	bl	800455c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800153e:	bf00      	nop
 8001540:	bd80      	pop	{r7, pc}
 8001542:	bf00      	nop
 8001544:	20000200 	.word	0x20000200

08001548 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 800154c:	4802      	ldr	r0, [pc, #8]	@ (8001558 <ADC1_2_IRQHandler+0x10>)
 800154e:	f000 ffb9 	bl	80024c4 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	20000194 	.word	0x20000194

0800155c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001560:	4802      	ldr	r0, [pc, #8]	@ (800156c <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001562:	f005 fc99 	bl	8006e98 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 8001566:	bf00      	nop
 8001568:	bd80      	pop	{r7, pc}
 800156a:	bf00      	nop
 800156c:	20000330 	.word	0x20000330

08001570 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 8001574:	4802      	ldr	r0, [pc, #8]	@ (8001580 <LPUART1_IRQHandler+0x10>)
 8001576:	f006 f861 	bl	800763c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 800157a:	bf00      	nop
 800157c:	bd80      	pop	{r7, pc}
 800157e:	bf00      	nop
 8001580:	20000380 	.word	0x20000380

08001584 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001584:	b480      	push	{r7}
 8001586:	af00      	add	r7, sp, #0
  return 1;
 8001588:	2301      	movs	r3, #1
}
 800158a:	4618      	mov	r0, r3
 800158c:	46bd      	mov	sp, r7
 800158e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001592:	4770      	bx	lr

08001594 <_kill>:

int _kill(int pid, int sig)
{
 8001594:	b580      	push	{r7, lr}
 8001596:	b082      	sub	sp, #8
 8001598:	af00      	add	r7, sp, #0
 800159a:	6078      	str	r0, [r7, #4]
 800159c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800159e:	f009 ff01 	bl	800b3a4 <__errno>
 80015a2:	4603      	mov	r3, r0
 80015a4:	2216      	movs	r2, #22
 80015a6:	601a      	str	r2, [r3, #0]
  return -1;
 80015a8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80015ac:	4618      	mov	r0, r3
 80015ae:	3708      	adds	r7, #8
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}

080015b4 <_exit>:

void _exit (int status)
{
 80015b4:	b580      	push	{r7, lr}
 80015b6:	b082      	sub	sp, #8
 80015b8:	af00      	add	r7, sp, #0
 80015ba:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80015bc:	f04f 31ff 	mov.w	r1, #4294967295
 80015c0:	6878      	ldr	r0, [r7, #4]
 80015c2:	f7ff ffe7 	bl	8001594 <_kill>
  while (1) {}    /* Make sure we hang here */
 80015c6:	bf00      	nop
 80015c8:	e7fd      	b.n	80015c6 <_exit+0x12>

080015ca <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80015ca:	b580      	push	{r7, lr}
 80015cc:	b086      	sub	sp, #24
 80015ce:	af00      	add	r7, sp, #0
 80015d0:	60f8      	str	r0, [r7, #12]
 80015d2:	60b9      	str	r1, [r7, #8]
 80015d4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015d6:	2300      	movs	r3, #0
 80015d8:	617b      	str	r3, [r7, #20]
 80015da:	e00a      	b.n	80015f2 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80015dc:	f3af 8000 	nop.w
 80015e0:	4601      	mov	r1, r0
 80015e2:	68bb      	ldr	r3, [r7, #8]
 80015e4:	1c5a      	adds	r2, r3, #1
 80015e6:	60ba      	str	r2, [r7, #8]
 80015e8:	b2ca      	uxtb	r2, r1
 80015ea:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80015ec:	697b      	ldr	r3, [r7, #20]
 80015ee:	3301      	adds	r3, #1
 80015f0:	617b      	str	r3, [r7, #20]
 80015f2:	697a      	ldr	r2, [r7, #20]
 80015f4:	687b      	ldr	r3, [r7, #4]
 80015f6:	429a      	cmp	r2, r3
 80015f8:	dbf0      	blt.n	80015dc <_read+0x12>
  }

  return len;
 80015fa:	687b      	ldr	r3, [r7, #4]
}
 80015fc:	4618      	mov	r0, r3
 80015fe:	3718      	adds	r7, #24
 8001600:	46bd      	mov	sp, r7
 8001602:	bd80      	pop	{r7, pc}

08001604 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800161a:	4770      	bx	lr

0800161c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800161c:	b480      	push	{r7}
 800161e:	b083      	sub	sp, #12
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
 8001624:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001626:	683b      	ldr	r3, [r7, #0]
 8001628:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800162c:	605a      	str	r2, [r3, #4]
  return 0;
 800162e:	2300      	movs	r3, #0
}
 8001630:	4618      	mov	r0, r3
 8001632:	370c      	adds	r7, #12
 8001634:	46bd      	mov	sp, r7
 8001636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800163a:	4770      	bx	lr

0800163c <_isatty>:

int _isatty(int file)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001644:	2301      	movs	r3, #1
}
 8001646:	4618      	mov	r0, r3
 8001648:	370c      	adds	r7, #12
 800164a:	46bd      	mov	sp, r7
 800164c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001650:	4770      	bx	lr

08001652 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001652:	b480      	push	{r7}
 8001654:	b085      	sub	sp, #20
 8001656:	af00      	add	r7, sp, #0
 8001658:	60f8      	str	r0, [r7, #12]
 800165a:	60b9      	str	r1, [r7, #8]
 800165c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800165e:	2300      	movs	r3, #0
}
 8001660:	4618      	mov	r0, r3
 8001662:	3714      	adds	r7, #20
 8001664:	46bd      	mov	sp, r7
 8001666:	f85d 7b04 	ldr.w	r7, [sp], #4
 800166a:	4770      	bx	lr

0800166c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001674:	4a14      	ldr	r2, [pc, #80]	@ (80016c8 <_sbrk+0x5c>)
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <_sbrk+0x60>)
 8001678:	1ad3      	subs	r3, r2, r3
 800167a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800167c:	697b      	ldr	r3, [r7, #20]
 800167e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001680:	4b13      	ldr	r3, [pc, #76]	@ (80016d0 <_sbrk+0x64>)
 8001682:	681b      	ldr	r3, [r3, #0]
 8001684:	2b00      	cmp	r3, #0
 8001686:	d102      	bne.n	800168e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001688:	4b11      	ldr	r3, [pc, #68]	@ (80016d0 <_sbrk+0x64>)
 800168a:	4a12      	ldr	r2, [pc, #72]	@ (80016d4 <_sbrk+0x68>)
 800168c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800168e:	4b10      	ldr	r3, [pc, #64]	@ (80016d0 <_sbrk+0x64>)
 8001690:	681a      	ldr	r2, [r3, #0]
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	4413      	add	r3, r2
 8001696:	693a      	ldr	r2, [r7, #16]
 8001698:	429a      	cmp	r2, r3
 800169a:	d207      	bcs.n	80016ac <_sbrk+0x40>
  {
    errno = ENOMEM;
 800169c:	f009 fe82 	bl	800b3a4 <__errno>
 80016a0:	4603      	mov	r3, r0
 80016a2:	220c      	movs	r2, #12
 80016a4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80016a6:	f04f 33ff 	mov.w	r3, #4294967295
 80016aa:	e009      	b.n	80016c0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80016ac:	4b08      	ldr	r3, [pc, #32]	@ (80016d0 <_sbrk+0x64>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80016b2:	4b07      	ldr	r3, [pc, #28]	@ (80016d0 <_sbrk+0x64>)
 80016b4:	681a      	ldr	r2, [r3, #0]
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	4413      	add	r3, r2
 80016ba:	4a05      	ldr	r2, [pc, #20]	@ (80016d0 <_sbrk+0x64>)
 80016bc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80016be:	68fb      	ldr	r3, [r7, #12]
}
 80016c0:	4618      	mov	r0, r3
 80016c2:	3718      	adds	r7, #24
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20008000 	.word	0x20008000
 80016cc:	00000400 	.word	0x00000400
 80016d0:	2000037c 	.word	0x2000037c
 80016d4:	20000698 	.word	0x20000698

080016d8 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 80016dc:	4b06      	ldr	r3, [pc, #24]	@ (80016f8 <SystemInit+0x20>)
 80016de:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80016e2:	4a05      	ldr	r2, [pc, #20]	@ (80016f8 <SystemInit+0x20>)
 80016e4:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80016e8:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80016ec:	bf00      	nop
 80016ee:	46bd      	mov	sp, r7
 80016f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016f4:	4770      	bx	lr
 80016f6:	bf00      	nop
 80016f8:	e000ed00 	.word	0xe000ed00

080016fc <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 80016fc:	b580      	push	{r7, lr}
 80016fe:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8001700:	4b21      	ldr	r3, [pc, #132]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001702:	4a22      	ldr	r2, [pc, #136]	@ (800178c <MX_LPUART1_UART_Init+0x90>)
 8001704:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8001706:	4b20      	ldr	r3, [pc, #128]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001708:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 800170c:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800170e:	4b1e      	ldr	r3, [pc, #120]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001710:	2200      	movs	r2, #0
 8001712:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8001714:	4b1c      	ldr	r3, [pc, #112]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001716:	2200      	movs	r2, #0
 8001718:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800171a:	4b1b      	ldr	r3, [pc, #108]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 800171c:	2200      	movs	r2, #0
 800171e:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8001720:	4b19      	ldr	r3, [pc, #100]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001722:	220c      	movs	r2, #12
 8001724:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001726:	4b18      	ldr	r3, [pc, #96]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001728:	2200      	movs	r2, #0
 800172a:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800172c:	4b16      	ldr	r3, [pc, #88]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 800172e:	2200      	movs	r2, #0
 8001730:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001732:	4b15      	ldr	r3, [pc, #84]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001734:	2200      	movs	r2, #0
 8001736:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001738:	4b13      	ldr	r3, [pc, #76]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 800173a:	2200      	movs	r2, #0
 800173c:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800173e:	4812      	ldr	r0, [pc, #72]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001740:	f005 fe04 	bl	800734c <HAL_UART_Init>
 8001744:	4603      	mov	r3, r0
 8001746:	2b00      	cmp	r3, #0
 8001748:	d001      	beq.n	800174e <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 800174a:	f7ff fdaf 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800174e:	2100      	movs	r1, #0
 8001750:	480d      	ldr	r0, [pc, #52]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001752:	f008 f83b 	bl	80097cc <HAL_UARTEx_SetTxFifoThreshold>
 8001756:	4603      	mov	r3, r0
 8001758:	2b00      	cmp	r3, #0
 800175a:	d001      	beq.n	8001760 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 800175c:	f7ff fda6 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001760:	2100      	movs	r1, #0
 8001762:	4809      	ldr	r0, [pc, #36]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001764:	f008 f8b6 	bl	80098d4 <HAL_UARTEx_SetRxFifoThreshold>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 800176e:	f7ff fd9d 	bl	80012ac <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 8001772:	4805      	ldr	r0, [pc, #20]	@ (8001788 <MX_LPUART1_UART_Init+0x8c>)
 8001774:	f007 ffc8 	bl	8009708 <HAL_UARTEx_DisableFifoMode>
 8001778:	4603      	mov	r3, r0
 800177a:	2b00      	cmp	r3, #0
 800177c:	d001      	beq.n	8001782 <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 800177e:	f7ff fd95 	bl	80012ac <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	20000380 	.word	0x20000380
 800178c:	40008000 	.word	0x40008000

08001790 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b09a      	sub	sp, #104	@ 0x68
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001798:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 800179c:	2200      	movs	r2, #0
 800179e:	601a      	str	r2, [r3, #0]
 80017a0:	605a      	str	r2, [r3, #4]
 80017a2:	609a      	str	r2, [r3, #8]
 80017a4:	60da      	str	r2, [r3, #12]
 80017a6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80017a8:	f107 0310 	add.w	r3, r7, #16
 80017ac:	2244      	movs	r2, #68	@ 0x44
 80017ae:	2100      	movs	r1, #0
 80017b0:	4618      	mov	r0, r3
 80017b2:	f009 fd3d 	bl	800b230 <memset>
  if(uartHandle->Instance==LPUART1)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4a23      	ldr	r2, [pc, #140]	@ (8001848 <HAL_UART_MspInit+0xb8>)
 80017bc:	4293      	cmp	r3, r2
 80017be:	d13e      	bne.n	800183e <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 80017c0:	2320      	movs	r3, #32
 80017c2:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80017c8:	f107 0310 	add.w	r3, r7, #16
 80017cc:	4618      	mov	r0, r3
 80017ce:	f004 fc1d 	bl	800600c <HAL_RCCEx_PeriphCLKConfig>
 80017d2:	4603      	mov	r3, r0
 80017d4:	2b00      	cmp	r3, #0
 80017d6:	d001      	beq.n	80017dc <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80017d8:	f7ff fd68 	bl	80012ac <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 80017dc:	4b1b      	ldr	r3, [pc, #108]	@ (800184c <HAL_UART_MspInit+0xbc>)
 80017de:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017e0:	4a1a      	ldr	r2, [pc, #104]	@ (800184c <HAL_UART_MspInit+0xbc>)
 80017e2:	f043 0301 	orr.w	r3, r3, #1
 80017e6:	65d3      	str	r3, [r2, #92]	@ 0x5c
 80017e8:	4b18      	ldr	r3, [pc, #96]	@ (800184c <HAL_UART_MspInit+0xbc>)
 80017ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80017ec:	f003 0301 	and.w	r3, r3, #1
 80017f0:	60fb      	str	r3, [r7, #12]
 80017f2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017f4:	4b15      	ldr	r3, [pc, #84]	@ (800184c <HAL_UART_MspInit+0xbc>)
 80017f6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80017f8:	4a14      	ldr	r2, [pc, #80]	@ (800184c <HAL_UART_MspInit+0xbc>)
 80017fa:	f043 0301 	orr.w	r3, r3, #1
 80017fe:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001800:	4b12      	ldr	r3, [pc, #72]	@ (800184c <HAL_UART_MspInit+0xbc>)
 8001802:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001804:	f003 0301 	and.w	r3, r3, #1
 8001808:	60bb      	str	r3, [r7, #8]
 800180a:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 800180c:	230c      	movs	r3, #12
 800180e:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001810:	2302      	movs	r3, #2
 8001812:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001814:	2300      	movs	r3, #0
 8001816:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2300      	movs	r3, #0
 800181a:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 800181c:	230c      	movs	r3, #12
 800181e:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001820:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8001824:	4619      	mov	r1, r3
 8001826:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 800182a:	f002 ffa9 	bl	8004780 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800182e:	2200      	movs	r2, #0
 8001830:	2105      	movs	r1, #5
 8001832:	205b      	movs	r0, #91	@ 0x5b
 8001834:	f002 f922 	bl	8003a7c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001838:	205b      	movs	r0, #91	@ 0x5b
 800183a:	f002 f949 	bl	8003ad0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800183e:	bf00      	nop
 8001840:	3768      	adds	r7, #104	@ 0x68
 8001842:	46bd      	mov	sp, r7
 8001844:	bd80      	pop	{r7, pc}
 8001846:	bf00      	nop
 8001848:	40008000 	.word	0x40008000
 800184c:	40021000 	.word	0x40021000

08001850 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001850:	480d      	ldr	r0, [pc, #52]	@ (8001888 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8001852:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 8001854:	f7ff ff40 	bl	80016d8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001858:	480c      	ldr	r0, [pc, #48]	@ (800188c <LoopForever+0x6>)
  ldr r1, =_edata
 800185a:	490d      	ldr	r1, [pc, #52]	@ (8001890 <LoopForever+0xa>)
  ldr r2, =_sidata
 800185c:	4a0d      	ldr	r2, [pc, #52]	@ (8001894 <LoopForever+0xe>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001860:	e002      	b.n	8001868 <LoopCopyDataInit>

08001862 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001862:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001864:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001866:	3304      	adds	r3, #4

08001868 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001868:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800186a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800186c:	d3f9      	bcc.n	8001862 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800186e:	4a0a      	ldr	r2, [pc, #40]	@ (8001898 <LoopForever+0x12>)
  ldr r4, =_ebss
 8001870:	4c0a      	ldr	r4, [pc, #40]	@ (800189c <LoopForever+0x16>)
  movs r3, #0
 8001872:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001874:	e001      	b.n	800187a <LoopFillZerobss>

08001876 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001876:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001878:	3204      	adds	r2, #4

0800187a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800187a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800187c:	d3fb      	bcc.n	8001876 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 800187e:	f009 fd97 	bl	800b3b0 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001882:	f7ff fc9b 	bl	80011bc <main>

08001886 <LoopForever>:

LoopForever:
    b LoopForever
 8001886:	e7fe      	b.n	8001886 <LoopForever>
  ldr   r0, =_estack
 8001888:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 800188c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001890:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001894:	0800c7e0 	.word	0x0800c7e0
  ldr r2, =_sbss
 8001898:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800189c:	20000698 	.word	0x20000698

080018a0 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018a0:	e7fe      	b.n	80018a0 <COMP1_2_3_IRQHandler>

080018a2 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018a2:	b580      	push	{r7, lr}
 80018a4:	b082      	sub	sp, #8
 80018a6:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018a8:	2300      	movs	r3, #0
 80018aa:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f002 f8c5 	bl	8003a3c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018b2:	200f      	movs	r0, #15
 80018b4:	f7ff fdb6 	bl	8001424 <HAL_InitTick>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d002      	beq.n	80018c4 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	71fb      	strb	r3, [r7, #7]
 80018c2:	e001      	b.n	80018c8 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018c4:	f7ff fd84 	bl	80013d0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80018c8:	79fb      	ldrb	r3, [r7, #7]

}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3708      	adds	r7, #8
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
	...

080018d4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b05      	ldr	r3, [pc, #20]	@ (80018f0 <HAL_IncTick+0x1c>)
 80018da:	681a      	ldr	r2, [r3, #0]
 80018dc:	4b05      	ldr	r3, [pc, #20]	@ (80018f4 <HAL_IncTick+0x20>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4413      	add	r3, r2
 80018e2:	4a03      	ldr	r2, [pc, #12]	@ (80018f0 <HAL_IncTick+0x1c>)
 80018e4:	6013      	str	r3, [r2, #0]
}
 80018e6:	bf00      	nop
 80018e8:	46bd      	mov	sp, r7
 80018ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ee:	4770      	bx	lr
 80018f0:	20000414 	.word	0x20000414
 80018f4:	20000008 	.word	0x20000008

080018f8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018f8:	b480      	push	{r7}
 80018fa:	af00      	add	r7, sp, #0
  return uwTick;
 80018fc:	4b03      	ldr	r3, [pc, #12]	@ (800190c <HAL_GetTick+0x14>)
 80018fe:	681b      	ldr	r3, [r3, #0]
}
 8001900:	4618      	mov	r0, r3
 8001902:	46bd      	mov	sp, r7
 8001904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001908:	4770      	bx	lr
 800190a:	bf00      	nop
 800190c:	20000414 	.word	0x20000414

08001910 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001910:	b480      	push	{r7}
 8001912:	b083      	sub	sp, #12
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
 8001918:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800191a:	687b      	ldr	r3, [r7, #4]
 800191c:	689b      	ldr	r3, [r3, #8]
 800191e:	f423 127c 	bic.w	r2, r3, #4128768	@ 0x3f0000
 8001922:	683b      	ldr	r3, [r7, #0]
 8001924:	431a      	orrs	r2, r3
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	609a      	str	r2, [r3, #8]
}
 800192a:	bf00      	nop
 800192c:	370c      	adds	r7, #12
 800192e:	46bd      	mov	sp, r7
 8001930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001934:	4770      	bx	lr

08001936 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001936:	b480      	push	{r7}
 8001938:	b083      	sub	sp, #12
 800193a:	af00      	add	r7, sp, #0
 800193c:	6078      	str	r0, [r7, #4]
 800193e:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	f023 72e0 	bic.w	r2, r3, #29360128	@ 0x1c00000
 8001948:	683b      	ldr	r3, [r7, #0]
 800194a:	431a      	orrs	r2, r3
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	609a      	str	r2, [r3, #8]
}
 8001950:	bf00      	nop
 8001952:	370c      	adds	r7, #12
 8001954:	46bd      	mov	sp, r7
 8001956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800195a:	4770      	bx	lr

0800195c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800195c:	b480      	push	{r7}
 800195e:	b083      	sub	sp, #12
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	689b      	ldr	r3, [r3, #8]
 8001968:	f003 73e0 	and.w	r3, r3, #29360128	@ 0x1c00000
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <LL_ADC_GetResolution>:
  *         @arg @ref LL_ADC_RESOLUTION_10B
  *         @arg @ref LL_ADC_RESOLUTION_8B
  *         @arg @ref LL_ADC_RESOLUTION_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetResolution(const ADC_TypeDef *ADCx)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCx->CFGR, ADC_CFGR_RES));
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	68db      	ldr	r3, [r3, #12]
 8001984:	f003 0318 	and.w	r3, r3, #24
}
 8001988:	4618      	mov	r0, r3
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_SetOffset>:
  *             (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 8001994:	b480      	push	{r7}
 8001996:	b087      	sub	sp, #28
 8001998:	af00      	add	r7, sp, #0
 800199a:	60f8      	str	r0, [r7, #12]
 800199c:	60b9      	str	r1, [r7, #8]
 800199e:	607a      	str	r2, [r7, #4]
 80019a0:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019a2:	68fb      	ldr	r3, [r7, #12]
 80019a4:	3360      	adds	r3, #96	@ 0x60
 80019a6:	461a      	mov	r2, r3
 80019a8:	68bb      	ldr	r3, [r7, #8]
 80019aa:	009b      	lsls	r3, r3, #2
 80019ac:	4413      	add	r3, r2
 80019ae:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019b0:	697b      	ldr	r3, [r7, #20]
 80019b2:	681a      	ldr	r2, [r3, #0]
 80019b4:	4b08      	ldr	r3, [pc, #32]	@ (80019d8 <LL_ADC_SetOffset+0x44>)
 80019b6:	4013      	ands	r3, r2
 80019b8:	687a      	ldr	r2, [r7, #4]
 80019ba:	f002 41f8 	and.w	r1, r2, #2080374784	@ 0x7c000000
 80019be:	683a      	ldr	r2, [r7, #0]
 80019c0:	430a      	orrs	r2, r1
 80019c2:	4313      	orrs	r3, r2
 80019c4:	f043 4200 	orr.w	r2, r3, #2147483648	@ 0x80000000
 80019c8:	697b      	ldr	r3, [r7, #20]
 80019ca:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019cc:	bf00      	nop
 80019ce:	371c      	adds	r7, #28
 80019d0:	46bd      	mov	sp, r7
 80019d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019d6:	4770      	bx	lr
 80019d8:	03fff000 	.word	0x03fff000

080019dc <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(const ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019dc:	b480      	push	{r7}
 80019de:	b085      	sub	sp, #20
 80019e0:	af00      	add	r7, sp, #0
 80019e2:	6078      	str	r0, [r7, #4]
 80019e4:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3360      	adds	r3, #96	@ 0x60
 80019ea:	461a      	mov	r2, r3
 80019ec:	683b      	ldr	r3, [r7, #0]
 80019ee:	009b      	lsls	r3, r3, #2
 80019f0:	4413      	add	r3, r2
 80019f2:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f003 43f8 	and.w	r3, r3, #2080374784	@ 0x7c000000
}
 80019fc:	4618      	mov	r0, r3
 80019fe:	3714      	adds	r7, #20
 8001a00:	46bd      	mov	sp, r7
 8001a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a06:	4770      	bx	lr

08001a08 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b087      	sub	sp, #28
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	3360      	adds	r3, #96	@ 0x60
 8001a18:	461a      	mov	r2, r3
 8001a1a:	68bb      	ldr	r3, [r7, #8]
 8001a1c:	009b      	lsls	r3, r3, #2
 8001a1e:	4413      	add	r3, r2
 8001a20:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a22:	697b      	ldr	r3, [r7, #20]
 8001a24:	681b      	ldr	r3, [r3, #0]
 8001a26:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	431a      	orrs	r2, r3
 8001a2e:	697b      	ldr	r3, [r7, #20]
 8001a30:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b087      	sub	sp, #28
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	60f8      	str	r0, [r7, #12]
 8001a46:	60b9      	str	r1, [r7, #8]
 8001a48:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a4a:	68fb      	ldr	r3, [r7, #12]
 8001a4c:	3360      	adds	r3, #96	@ 0x60
 8001a4e:	461a      	mov	r2, r3
 8001a50:	68bb      	ldr	r3, [r7, #8]
 8001a52:	009b      	lsls	r3, r3, #2
 8001a54:	4413      	add	r3, r2
 8001a56:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	f023 7280 	bic.w	r2, r3, #16777216	@ 0x1000000
 8001a60:	687b      	ldr	r3, [r7, #4]
 8001a62:	431a      	orrs	r2, r3
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a68:	bf00      	nop
 8001a6a:	371c      	adds	r7, #28
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b087      	sub	sp, #28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a80:	68fb      	ldr	r3, [r7, #12]
 8001a82:	3360      	adds	r3, #96	@ 0x60
 8001a84:	461a      	mov	r2, r3
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	009b      	lsls	r3, r3, #2
 8001a8a:	4413      	add	r3, r2
 8001a8c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a8e:	697b      	ldr	r3, [r7, #20]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f023 7200 	bic.w	r2, r3, #33554432	@ 0x2000000
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	431a      	orrs	r2, r3
 8001a9a:	697b      	ldr	r3, [r7, #20]
 8001a9c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001a9e:	bf00      	nop
 8001aa0:	371c      	adds	r7, #28
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr

08001aaa <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001aaa:	b480      	push	{r7}
 8001aac:	b083      	sub	sp, #12
 8001aae:	af00      	add	r7, sp, #0
 8001ab0:	6078      	str	r0, [r7, #4]
 8001ab2:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	695b      	ldr	r3, [r3, #20]
 8001ab8:	f023 4200 	bic.w	r2, r3, #2147483648	@ 0x80000000
 8001abc:	683b      	ldr	r3, [r7, #0]
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	615a      	str	r2, [r3, #20]
}
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr

08001ad0 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001ad0:	b480      	push	{r7}
 8001ad2:	b083      	sub	sp, #12
 8001ad4:	af00      	add	r7, sp, #0
 8001ad6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	68db      	ldr	r3, [r3, #12]
 8001adc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d101      	bne.n	8001ae8 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001ae4:	2301      	movs	r3, #1
 8001ae6:	e000      	b.n	8001aea <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001ae8:	2300      	movs	r3, #0
}
 8001aea:	4618      	mov	r0, r3
 8001aec:	370c      	adds	r7, #12
 8001aee:	46bd      	mov	sp, r7
 8001af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001af4:	4770      	bx	lr

08001af6 <LL_ADC_REG_SetSequencerRanks>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles
  *             (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001af6:	b480      	push	{r7}
 8001af8:	b087      	sub	sp, #28
 8001afa:	af00      	add	r7, sp, #0
 8001afc:	60f8      	str	r0, [r7, #12]
 8001afe:	60b9      	str	r1, [r7, #8]
 8001b00:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1,
 8001b02:	68fb      	ldr	r3, [r7, #12]
 8001b04:	3330      	adds	r3, #48	@ 0x30
 8001b06:	461a      	mov	r2, r3
 8001b08:	68bb      	ldr	r3, [r7, #8]
 8001b0a:	0a1b      	lsrs	r3, r3, #8
 8001b0c:	009b      	lsls	r3, r3, #2
 8001b0e:	f003 030c 	and.w	r3, r3, #12
 8001b12:	4413      	add	r3, r2
 8001b14:	617b      	str	r3, [r7, #20]
                                             ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b16:	697b      	ldr	r3, [r7, #20]
 8001b18:	681a      	ldr	r2, [r3, #0]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
 8001b1c:	f003 031f 	and.w	r3, r3, #31
 8001b20:	211f      	movs	r1, #31
 8001b22:	fa01 f303 	lsl.w	r3, r1, r3
 8001b26:	43db      	mvns	r3, r3
 8001b28:	401a      	ands	r2, r3
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	0e9b      	lsrs	r3, r3, #26
 8001b2e:	f003 011f 	and.w	r1, r3, #31
 8001b32:	68bb      	ldr	r3, [r7, #8]
 8001b34:	f003 031f 	and.w	r3, r3, #31
 8001b38:	fa01 f303 	lsl.w	r3, r1, r3
 8001b3c:	431a      	orrs	r2, r3
 8001b3e:	697b      	ldr	r3, [r7, #20]
 8001b40:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b42:	bf00      	nop
 8001b44:	371c      	adds	r7, #28
 8001b46:	46bd      	mov	sp, r7
 8001b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b4c:	4770      	bx	lr

08001b4e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8001b4e:	b480      	push	{r7}
 8001b50:	b083      	sub	sp, #12
 8001b52:	af00      	add	r7, sp, #0
 8001b54:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8001b56:	687b      	ldr	r3, [r7, #4]
 8001b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001b5a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8001b5e:	2b00      	cmp	r3, #0
 8001b60:	d101      	bne.n	8001b66 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8001b62:	2301      	movs	r3, #1
 8001b64:	e000      	b.n	8001b68 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8001b66:	2300      	movs	r3, #0
}
 8001b68:	4618      	mov	r0, r3
 8001b6a:	370c      	adds	r7, #12
 8001b6c:	46bd      	mov	sp, r7
 8001b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b72:	4770      	bx	lr

08001b74 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b087      	sub	sp, #28
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	60f8      	str	r0, [r7, #12]
 8001b7c:	60b9      	str	r1, [r7, #8]
 8001b7e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1,
 8001b80:	68fb      	ldr	r3, [r7, #12]
 8001b82:	3314      	adds	r3, #20
 8001b84:	461a      	mov	r2, r3
 8001b86:	68bb      	ldr	r3, [r7, #8]
 8001b88:	0e5b      	lsrs	r3, r3, #25
 8001b8a:	009b      	lsls	r3, r3, #2
 8001b8c:	f003 0304 	and.w	r3, r3, #4
 8001b90:	4413      	add	r3, r2
 8001b92:	617b      	str	r3, [r7, #20]
                                             ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));

  MODIFY_REG(*preg,
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	681a      	ldr	r2, [r3, #0]
 8001b98:	68bb      	ldr	r3, [r7, #8]
 8001b9a:	0d1b      	lsrs	r3, r3, #20
 8001b9c:	f003 031f 	and.w	r3, r3, #31
 8001ba0:	2107      	movs	r1, #7
 8001ba2:	fa01 f303 	lsl.w	r3, r1, r3
 8001ba6:	43db      	mvns	r3, r3
 8001ba8:	401a      	ands	r2, r3
 8001baa:	68bb      	ldr	r3, [r7, #8]
 8001bac:	0d1b      	lsrs	r3, r3, #20
 8001bae:	f003 031f 	and.w	r3, r3, #31
 8001bb2:	6879      	ldr	r1, [r7, #4]
 8001bb4:	fa01 f303 	lsl.w	r3, r1, r3
 8001bb8:	431a      	orrs	r2, r3
 8001bba:	697b      	ldr	r3, [r7, #20]
 8001bbc:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001bbe:	bf00      	nop
 8001bc0:	371c      	adds	r7, #28
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc8:	4770      	bx	lr
	...

08001bcc <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001bcc:	b480      	push	{r7}
 8001bce:	b085      	sub	sp, #20
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	60f8      	str	r0, [r7, #12]
 8001bd4:	60b9      	str	r1, [r7, #8]
 8001bd6:	607a      	str	r2, [r7, #4]
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	f8d3 20b0 	ldr.w	r2, [r3, #176]	@ 0xb0
 8001bde:	68bb      	ldr	r3, [r7, #8]
 8001be0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001be4:	43db      	mvns	r3, r3
 8001be6:	401a      	ands	r2, r3
 8001be8:	687b      	ldr	r3, [r7, #4]
 8001bea:	f003 0318 	and.w	r3, r3, #24
 8001bee:	4908      	ldr	r1, [pc, #32]	@ (8001c10 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001bf0:	40d9      	lsrs	r1, r3
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	400b      	ands	r3, r1
 8001bf6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bfa:	431a      	orrs	r2, r3
 8001bfc:	68fb      	ldr	r3, [r7, #12]
 8001bfe:	f8c3 20b0 	str.w	r2, [r3, #176]	@ 0xb0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK)
             & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
}
 8001c02:	bf00      	nop
 8001c04:	3714      	adds	r7, #20
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	0007ffff 	.word	0x0007ffff

08001c14 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c14:	b480      	push	{r7}
 8001c16:	b083      	sub	sp, #12
 8001c18:	af00      	add	r7, sp, #0
 8001c1a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8001c1c:	687b      	ldr	r3, [r7, #4]
 8001c1e:	689b      	ldr	r3, [r3, #8]
 8001c20:	f003 031f 	and.w	r3, r3, #31
}
 8001c24:	4618      	mov	r0, r3
 8001c26:	370c      	adds	r7, #12
 8001c28:	46bd      	mov	sp, r7
 8001c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c2e:	4770      	bx	lr

08001c30 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001c30:	b480      	push	{r7}
 8001c32:	b083      	sub	sp, #12
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 8001c38:	687b      	ldr	r3, [r7, #4]
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	b083      	sub	sp, #12
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001c54:	687b      	ldr	r3, [r7, #4]
 8001c56:	689b      	ldr	r3, [r3, #8]
 8001c58:	f023 4320 	bic.w	r3, r3, #2684354560	@ 0xa0000000
 8001c5c:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001c60:	687a      	ldr	r2, [r7, #4]
 8001c62:	6093      	str	r3, [r2, #8]
}
 8001c64:	bf00      	nop
 8001c66:	370c      	adds	r7, #12
 8001c68:	46bd      	mov	sp, r7
 8001c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c6e:	4770      	bx	lr

08001c70 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(const ADC_TypeDef *ADCx)
{
 8001c70:	b480      	push	{r7}
 8001c72:	b083      	sub	sp, #12
 8001c74:	af00      	add	r7, sp, #0
 8001c76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	689b      	ldr	r3, [r3, #8]
 8001c7c:	f003 5300 	and.w	r3, r3, #536870912	@ 0x20000000
 8001c80:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8001c84:	d101      	bne.n	8001c8a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c86:	2301      	movs	r3, #1
 8001c88:	e000      	b.n	8001c8c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c8a:	2300      	movs	r3, #0
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	370c      	adds	r7, #12
 8001c90:	46bd      	mov	sp, r7
 8001c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c96:	4770      	bx	lr

08001c98 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c98:	b480      	push	{r7}
 8001c9a:	b083      	sub	sp, #12
 8001c9c:	af00      	add	r7, sp, #0
 8001c9e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	689b      	ldr	r3, [r3, #8]
 8001ca4:	f023 4310 	bic.w	r3, r3, #2415919104	@ 0x90000000
 8001ca8:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 8001cac:	f043 5280 	orr.w	r2, r3, #268435456	@ 0x10000000
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001cb4:	bf00      	nop
 8001cb6:	370c      	adds	r7, #12
 8001cb8:	46bd      	mov	sp, r7
 8001cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbe:	4770      	bx	lr

08001cc0 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	b083      	sub	sp, #12
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	689b      	ldr	r3, [r3, #8]
 8001ccc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cd0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8001cd4:	d101      	bne.n	8001cda <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001cd6:	2301      	movs	r3, #1
 8001cd8:	e000      	b.n	8001cdc <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001cda:	2300      	movs	r3, #0
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	370c      	adds	r7, #12
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	b083      	sub	sp, #12
 8001cec:	af00      	add	r7, sp, #0
 8001cee:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	689b      	ldr	r3, [r3, #8]
 8001cf4:	f003 0301 	and.w	r3, r3, #1
 8001cf8:	2b01      	cmp	r3, #1
 8001cfa:	d101      	bne.n	8001d00 <LL_ADC_IsEnabled+0x18>
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <LL_ADC_IsEnabled+0x1a>
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr

08001d0e <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d0e:	b480      	push	{r7}
 8001d10:	b083      	sub	sp, #12
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	689b      	ldr	r3, [r3, #8]
 8001d1a:	f003 0304 	and.w	r3, r3, #4
 8001d1e:	2b04      	cmp	r3, #4
 8001d20:	d101      	bne.n	8001d26 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001d22:	2301      	movs	r3, #1
 8001d24:	e000      	b.n	8001d28 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001d26:	2300      	movs	r3, #0
}
 8001d28:	4618      	mov	r0, r3
 8001d2a:	370c      	adds	r7, #12
 8001d2c:	46bd      	mov	sp, r7
 8001d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d32:	4770      	bx	lr

08001d34 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001d34:	b480      	push	{r7}
 8001d36:	b083      	sub	sp, #12
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001d3c:	687b      	ldr	r3, [r7, #4]
 8001d3e:	689b      	ldr	r3, [r3, #8]
 8001d40:	f003 0308 	and.w	r3, r3, #8
 8001d44:	2b08      	cmp	r3, #8
 8001d46:	d101      	bne.n	8001d4c <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001d48:	2301      	movs	r3, #1
 8001d4a:	e000      	b.n	8001d4e <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001d4c:	2300      	movs	r3, #0
}
 8001d4e:	4618      	mov	r0, r3
 8001d50:	370c      	adds	r7, #12
 8001d52:	46bd      	mov	sp, r7
 8001d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d58:	4770      	bx	lr
	...

08001d5c <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001d5c:	b590      	push	{r4, r7, lr}
 8001d5e:	b089      	sub	sp, #36	@ 0x24
 8001d60:	af00      	add	r7, sp, #0
 8001d62:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d64:	2300      	movs	r3, #0
 8001d66:	77fb      	strb	r3, [r7, #31]
  uint32_t tmp_cfgr;
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;
  __IO uint32_t wait_loop_index = 0UL;
 8001d68:	2300      	movs	r3, #0
 8001d6a:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d101      	bne.n	8001d76 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d72:	2301      	movs	r3, #1
 8001d74:	e3a1      	b.n	80024ba <HAL_ADC_Init+0x75e>
  }

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8001d7e:	d009      	beq.n	8001d94 <HAL_ADC_Init+0x38>
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	4a8d      	ldr	r2, [pc, #564]	@ (8001fbc <HAL_ADC_Init+0x260>)
 8001d86:	4293      	cmp	r3, r2
 8001d88:	d004      	beq.n	8001d94 <HAL_ADC_Init+0x38>
 8001d8a:	f240 119b 	movw	r1, #411	@ 0x19b
 8001d8e:	488c      	ldr	r0, [pc, #560]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001d90:	f7ff fa92 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_CLOCKPRESCALER(hadc->Init.ClockPrescaler));
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	685b      	ldr	r3, [r3, #4]
 8001d98:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001d9c:	d049      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	685b      	ldr	r3, [r3, #4]
 8001da2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8001da6:	d044      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	685b      	ldr	r3, [r3, #4]
 8001dac:	f5b3 3f40 	cmp.w	r3, #196608	@ 0x30000
 8001db0:	d03f      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	685b      	ldr	r3, [r3, #4]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d03b      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8001dc2:	d036      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	685b      	ldr	r3, [r3, #4]
 8001dc8:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8001dcc:	d031      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	685b      	ldr	r3, [r3, #4]
 8001dd2:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8001dd6:	d02c      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	685b      	ldr	r3, [r3, #4]
 8001ddc:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8001de0:	d027      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	f5b3 1fa0 	cmp.w	r3, #1310720	@ 0x140000
 8001dea:	d022      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	685b      	ldr	r3, [r3, #4]
 8001df0:	f5b3 1fc0 	cmp.w	r3, #1572864	@ 0x180000
 8001df4:	d01d      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	685b      	ldr	r3, [r3, #4]
 8001dfa:	f5b3 1fe0 	cmp.w	r3, #1835008	@ 0x1c0000
 8001dfe:	d018      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	685b      	ldr	r3, [r3, #4]
 8001e04:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8001e08:	d013      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	685b      	ldr	r3, [r3, #4]
 8001e0e:	f5b3 1f10 	cmp.w	r3, #2359296	@ 0x240000
 8001e12:	d00e      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	685b      	ldr	r3, [r3, #4]
 8001e18:	f5b3 1f20 	cmp.w	r3, #2621440	@ 0x280000
 8001e1c:	d009      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	685b      	ldr	r3, [r3, #4]
 8001e22:	f5b3 1f30 	cmp.w	r3, #2883584	@ 0x2c0000
 8001e26:	d004      	beq.n	8001e32 <HAL_ADC_Init+0xd6>
 8001e28:	f44f 71ce 	mov.w	r1, #412	@ 0x19c
 8001e2c:	4864      	ldr	r0, [pc, #400]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001e2e:	f7ff fa43 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_RESOLUTION(hadc->Init.Resolution));
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d010      	beq.n	8001e5c <HAL_ADC_Init+0x100>
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	689b      	ldr	r3, [r3, #8]
 8001e3e:	2b08      	cmp	r3, #8
 8001e40:	d00c      	beq.n	8001e5c <HAL_ADC_Init+0x100>
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	689b      	ldr	r3, [r3, #8]
 8001e46:	2b10      	cmp	r3, #16
 8001e48:	d008      	beq.n	8001e5c <HAL_ADC_Init+0x100>
 8001e4a:	687b      	ldr	r3, [r7, #4]
 8001e4c:	689b      	ldr	r3, [r3, #8]
 8001e4e:	2b18      	cmp	r3, #24
 8001e50:	d004      	beq.n	8001e5c <HAL_ADC_Init+0x100>
 8001e52:	f240 119d 	movw	r1, #413	@ 0x19d
 8001e56:	485a      	ldr	r0, [pc, #360]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001e58:	f7ff fa2e 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d009      	beq.n	8001e78 <HAL_ADC_Init+0x11c>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	68db      	ldr	r3, [r3, #12]
 8001e68:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8001e6c:	d004      	beq.n	8001e78 <HAL_ADC_Init+0x11c>
 8001e6e:	f44f 71cf 	mov.w	r1, #414	@ 0x19e
 8001e72:	4853      	ldr	r0, [pc, #332]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001e74:	f7ff fa20 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_GAIN_COMPENSATION(hadc->Init.GainCompensation));
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	691b      	ldr	r3, [r3, #16]
 8001e7c:	f244 0209 	movw	r2, #16393	@ 0x4009
 8001e80:	4293      	cmp	r3, r2
 8001e82:	d904      	bls.n	8001e8e <HAL_ADC_Init+0x132>
 8001e84:	f240 119f 	movw	r1, #415	@ 0x19f
 8001e88:	484d      	ldr	r0, [pc, #308]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001e8a:	f7ff fa15 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	695b      	ldr	r3, [r3, #20]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d008      	beq.n	8001ea8 <HAL_ADC_Init+0x14c>
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	695b      	ldr	r3, [r3, #20]
 8001e9a:	2b01      	cmp	r3, #1
 8001e9c:	d004      	beq.n	8001ea8 <HAL_ADC_Init+0x14c>
 8001e9e:	f44f 71d0 	mov.w	r1, #416	@ 0x1a0
 8001ea2:	4847      	ldr	r0, [pc, #284]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001ea4:	f7ff fa08 	bl	80012b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	7f5b      	ldrb	r3, [r3, #29]
 8001eac:	2b00      	cmp	r3, #0
 8001eae:	d008      	beq.n	8001ec2 <HAL_ADC_Init+0x166>
 8001eb0:	687b      	ldr	r3, [r7, #4]
 8001eb2:	7f5b      	ldrb	r3, [r3, #29]
 8001eb4:	2b01      	cmp	r3, #1
 8001eb6:	d004      	beq.n	8001ec2 <HAL_ADC_Init+0x166>
 8001eb8:	f240 11a1 	movw	r1, #417	@ 0x1a1
 8001ebc:	4840      	ldr	r0, [pc, #256]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001ebe:	f7ff f9fb 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	d013      	beq.n	8001ef2 <HAL_ADC_Init+0x196>
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ece:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001ed2:	d00e      	beq.n	8001ef2 <HAL_ADC_Init+0x196>
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ed8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8001edc:	d009      	beq.n	8001ef2 <HAL_ADC_Init+0x196>
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ee2:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8001ee6:	d004      	beq.n	8001ef2 <HAL_ADC_Init+0x196>
 8001ee8:	f44f 71d1 	mov.w	r1, #418	@ 0x1a2
 8001eec:	4834      	ldr	r0, [pc, #208]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001eee:	f7ff f9e3 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_EXTTRIG(hadc, hadc->Init.ExternalTrigConv));
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001ef6:	f5b3 6fa4 	cmp.w	r3, #1312	@ 0x520
 8001efa:	d063      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f00:	f5b3 6fa8 	cmp.w	r3, #1344	@ 0x540
 8001f04:	d05e      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f06:	687b      	ldr	r3, [r7, #4]
 8001f08:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f0a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8001f0e:	d059      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f14:	f5b3 6f84 	cmp.w	r3, #1056	@ 0x420
 8001f18:	d054      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f1e:	f5b3 6f88 	cmp.w	r3, #1088	@ 0x440
 8001f22:	d04f      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f28:	f5b3 6fac 	cmp.w	r3, #1376	@ 0x560
 8001f2c:	d04a      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f32:	f5b3 6f8c 	cmp.w	r3, #1120	@ 0x460
 8001f36:	d045      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f3c:	f5b3 6f90 	cmp.w	r3, #1152	@ 0x480
 8001f40:	d040      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f46:	f5b3 6fbc 	cmp.w	r3, #1504	@ 0x5e0
 8001f4a:	d03b      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f4c:	687b      	ldr	r3, [r7, #4]
 8001f4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f50:	f5b3 6fb0 	cmp.w	r3, #1408	@ 0x580
 8001f54:	d036      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f5a:	f5b3 6f94 	cmp.w	r3, #1184	@ 0x4a0
 8001f5e:	d031      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f64:	f5b3 6fb4 	cmp.w	r3, #1440	@ 0x5a0
 8001f68:	d02c      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f6e:	f5b3 6ff8 	cmp.w	r3, #1984	@ 0x7c0
 8001f72:	d027      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f78:	f5b3 6f9c 	cmp.w	r3, #1248	@ 0x4e0
 8001f7c:	d022      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f7e:	687b      	ldr	r3, [r7, #4]
 8001f80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f82:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8001f86:	d01d      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f8c:	f5b3 6fb8 	cmp.w	r3, #1472	@ 0x5c0
 8001f90:	d018      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001f96:	f5b3 6ff4 	cmp.w	r3, #1952	@ 0x7a0
 8001f9a:	d013      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001fa0:	f5b3 6f98 	cmp.w	r3, #1216	@ 0x4c0
 8001fa4:	d00e      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001fa6:	687b      	ldr	r3, [r7, #4]
 8001fa8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d00a      	beq.n	8001fc4 <HAL_ADC_Init+0x268>
 8001fae:	f240 11a3 	movw	r1, #419	@ 0x1a3
 8001fb2:	4803      	ldr	r0, [pc, #12]	@ (8001fc0 <HAL_ADC_Init+0x264>)
 8001fb4:	f7ff f980 	bl	80012b8 <assert_failed>
 8001fb8:	e004      	b.n	8001fc4 <HAL_ADC_Init+0x268>
 8001fba:	bf00      	nop
 8001fbc:	50000100 	.word	0x50000100
 8001fc0:	0800c188 	.word	0x0800c188
  assert_param(IS_ADC_SAMPLINGMODE(hadc->Init.SamplingMode));
 8001fc4:	687b      	ldr	r3, [r7, #4]
 8001fc6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fc8:	2b00      	cmp	r3, #0
 8001fca:	d00e      	beq.n	8001fea <HAL_ADC_Init+0x28e>
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fd0:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8001fd4:	d009      	beq.n	8001fea <HAL_ADC_Init+0x28e>
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001fda:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8001fde:	d004      	beq.n	8001fea <HAL_ADC_Init+0x28e>
 8001fe0:	f44f 71d2 	mov.w	r1, #420	@ 0x1a4
 8001fe4:	485d      	ldr	r0, [pc, #372]	@ (800215c <HAL_ADC_Init+0x400>)
 8001fe6:	f7ff f967 	bl	80012b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DMAContinuousRequests));
 8001fea:	687b      	ldr	r3, [r7, #4]
 8001fec:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ff0:	2b00      	cmp	r3, #0
 8001ff2:	d009      	beq.n	8002008 <HAL_ADC_Init+0x2ac>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ffa:	2b01      	cmp	r3, #1
 8001ffc:	d004      	beq.n	8002008 <HAL_ADC_Init+0x2ac>
 8001ffe:	f240 11a5 	movw	r1, #421	@ 0x1a5
 8002002:	4856      	ldr	r0, [pc, #344]	@ (800215c <HAL_ADC_Init+0x400>)
 8002004:	f7ff f958 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	699b      	ldr	r3, [r3, #24]
 800200c:	2b04      	cmp	r3, #4
 800200e:	d008      	beq.n	8002022 <HAL_ADC_Init+0x2c6>
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	699b      	ldr	r3, [r3, #24]
 8002014:	2b08      	cmp	r3, #8
 8002016:	d004      	beq.n	8002022 <HAL_ADC_Init+0x2c6>
 8002018:	f44f 71d3 	mov.w	r1, #422	@ 0x1a6
 800201c:	484f      	ldr	r0, [pc, #316]	@ (800215c <HAL_ADC_Init+0x400>)
 800201e:	f7ff f94b 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002026:	2b00      	cmp	r3, #0
 8002028:	d009      	beq.n	800203e <HAL_ADC_Init+0x2e2>
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800202e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002032:	d004      	beq.n	800203e <HAL_ADC_Init+0x2e2>
 8002034:	f240 11a7 	movw	r1, #423	@ 0x1a7
 8002038:	4848      	ldr	r0, [pc, #288]	@ (800215c <HAL_ADC_Init+0x400>)
 800203a:	f7ff f93d 	bl	80012b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	7f1b      	ldrb	r3, [r3, #28]
 8002042:	2b00      	cmp	r3, #0
 8002044:	d008      	beq.n	8002058 <HAL_ADC_Init+0x2fc>
 8002046:	687b      	ldr	r3, [r7, #4]
 8002048:	7f1b      	ldrb	r3, [r3, #28]
 800204a:	2b01      	cmp	r3, #1
 800204c:	d004      	beq.n	8002058 <HAL_ADC_Init+0x2fc>
 800204e:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8002052:	4842      	ldr	r0, [pc, #264]	@ (800215c <HAL_ADC_Init+0x400>)
 8002054:	f7ff f930 	bl	80012b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 800205e:	2b00      	cmp	r3, #0
 8002060:	d009      	beq.n	8002076 <HAL_ADC_Init+0x31a>
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002068:	2b01      	cmp	r3, #1
 800206a:	d004      	beq.n	8002076 <HAL_ADC_Init+0x31a>
 800206c:	f240 11a9 	movw	r1, #425	@ 0x1a9
 8002070:	483a      	ldr	r0, [pc, #232]	@ (800215c <HAL_ADC_Init+0x400>)
 8002072:	f7ff f921 	bl	80012b8 <assert_failed>

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	695b      	ldr	r3, [r3, #20]
 800207a:	2b00      	cmp	r3, #0
 800207c:	d02d      	beq.n	80020da <HAL_ADC_Init+0x37e>
  {
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	6a1b      	ldr	r3, [r3, #32]
 8002082:	2b00      	cmp	r3, #0
 8002084:	d003      	beq.n	800208e <HAL_ADC_Init+0x332>
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	2b10      	cmp	r3, #16
 800208c:	d904      	bls.n	8002098 <HAL_ADC_Init+0x33c>
 800208e:	f240 11ad 	movw	r1, #429	@ 0x1ad
 8002092:	4832      	ldr	r0, [pc, #200]	@ (800215c <HAL_ADC_Init+0x400>)
 8002094:	f7ff f910 	bl	80012b8 <assert_failed>
    assert_param(IS_FUNCTIONAL_STATE(hadc->Init.DiscontinuousConvMode));
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d009      	beq.n	80020b6 <HAL_ADC_Init+0x35a>
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d004      	beq.n	80020b6 <HAL_ADC_Init+0x35a>
 80020ac:	f44f 71d7 	mov.w	r1, #430	@ 0x1ae
 80020b0:	482a      	ldr	r0, [pc, #168]	@ (800215c <HAL_ADC_Init+0x400>)
 80020b2:	f7ff f901 	bl	80012b8 <assert_failed>

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d10c      	bne.n	80020da <HAL_ADC_Init+0x37e>
    {
      assert_param(IS_ADC_REGULAR_DISCONT_NUMBER(hadc->Init.NbrOfDiscConversion));
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	d003      	beq.n	80020d0 <HAL_ADC_Init+0x374>
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80020cc:	2b08      	cmp	r3, #8
 80020ce:	d904      	bls.n	80020da <HAL_ADC_Init+0x37e>
 80020d0:	f44f 71d9 	mov.w	r1, #434	@ 0x1b2
 80020d4:	4821      	ldr	r0, [pc, #132]	@ (800215c <HAL_ADC_Init+0x400>)
 80020d6:	f7ff f8ef 	bl	80012b8 <assert_failed>
    }
  }

  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 80020e0:	2b01      	cmp	r3, #1
 80020e2:	d108      	bne.n	80020f6 <HAL_ADC_Init+0x39a>
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	7f5b      	ldrb	r3, [r3, #29]
 80020e8:	2b01      	cmp	r3, #1
 80020ea:	d104      	bne.n	80020f6 <HAL_ADC_Init+0x39a>
 80020ec:	f240 11b7 	movw	r1, #439	@ 0x1b7
 80020f0:	481a      	ldr	r0, [pc, #104]	@ (800215c <HAL_ADC_Init+0x400>)
 80020f2:	f7ff f8e1 	bl	80012b8 <assert_failed>

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d109      	bne.n	8002112 <HAL_ADC_Init+0x3b6>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f7fe fe12 	bl	8000d28 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2200      	movs	r2, #0
 8002108:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f7ff fdaa 	bl	8001c70 <LL_ADC_IsDeepPowerDownEnabled>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d004      	beq.n	800212c <HAL_ADC_Init+0x3d0>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4618      	mov	r0, r3
 8002128:	f7ff fd90 	bl	8001c4c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	4618      	mov	r0, r3
 8002132:	f7ff fdc5 	bl	8001cc0 <LL_ADC_IsInternalRegulatorEnabled>
 8002136:	4603      	mov	r3, r0
 8002138:	2b00      	cmp	r3, #0
 800213a:	d11b      	bne.n	8002174 <HAL_ADC_Init+0x418>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	4618      	mov	r0, r3
 8002142:	f7ff fda9 	bl	8001c98 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002146:	4b06      	ldr	r3, [pc, #24]	@ (8002160 <HAL_ADC_Init+0x404>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	099b      	lsrs	r3, r3, #6
 800214c:	4a05      	ldr	r2, [pc, #20]	@ (8002164 <HAL_ADC_Init+0x408>)
 800214e:	fba2 2303 	umull	r2, r3, r2, r3
 8002152:	099b      	lsrs	r3, r3, #6
 8002154:	3301      	adds	r3, #1
 8002156:	005b      	lsls	r3, r3, #1
 8002158:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800215a:	e008      	b.n	800216e <HAL_ADC_Init+0x412>
 800215c:	0800c188 	.word	0x0800c188
 8002160:	20000000 	.word	0x20000000
 8002164:	053e2d63 	.word	0x053e2d63
    {
      wait_loop_index--;
 8002168:	68fb      	ldr	r3, [r7, #12]
 800216a:	3b01      	subs	r3, #1
 800216c:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1f9      	bne.n	8002168 <HAL_ADC_Init+0x40c>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4618      	mov	r0, r3
 800217a:	f7ff fda1 	bl	8001cc0 <LL_ADC_IsInternalRegulatorEnabled>
 800217e:	4603      	mov	r3, r0
 8002180:	2b00      	cmp	r3, #0
 8002182:	d10d      	bne.n	80021a0 <HAL_ADC_Init+0x444>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002188:	f043 0210 	orr.w	r2, r3, #16
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002194:	f043 0201 	orr.w	r2, r3, #1
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	661a      	str	r2, [r3, #96]	@ 0x60

    tmp_hal_status = HAL_ERROR;
 800219c:	2301      	movs	r3, #1
 800219e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4618      	mov	r0, r3
 80021a6:	f7ff fdb2 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 80021aa:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021b0:	f003 0310 	and.w	r3, r3, #16
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	f040 8177 	bne.w	80024a8 <HAL_ADC_Init+0x74c>
      && (tmp_adc_is_conversion_on_going_regular == 0UL)
 80021ba:	697b      	ldr	r3, [r7, #20]
 80021bc:	2b00      	cmp	r3, #0
 80021be:	f040 8173 	bne.w	80024a8 <HAL_ADC_Init+0x74c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80021c6:	f423 7381 	bic.w	r3, r3, #258	@ 0x102
 80021ca:	f043 0202 	orr.w	r2, r3, #2
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	65da      	str	r2, [r3, #92]	@ 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fd86 	bl	8001ce8 <LL_ADC_IsEnabled>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d111      	bne.n	8002206 <HAL_ADC_Init+0x4aa>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80021e2:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 80021e6:	f7ff fd7f 	bl	8001ce8 <LL_ADC_IsEnabled>
 80021ea:	4604      	mov	r4, r0
 80021ec:	4895      	ldr	r0, [pc, #596]	@ (8002444 <HAL_ADC_Init+0x6e8>)
 80021ee:	f7ff fd7b 	bl	8001ce8 <LL_ADC_IsEnabled>
 80021f2:	4603      	mov	r3, r0
 80021f4:	4323      	orrs	r3, r4
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d105      	bne.n	8002206 <HAL_ADC_Init+0x4aa>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	685b      	ldr	r3, [r3, #4]
 80021fe:	4619      	mov	r1, r3
 8002200:	4891      	ldr	r0, [pc, #580]	@ (8002448 <HAL_ADC_Init+0x6ec>)
 8002202:	f7ff fb85 	bl	8001910 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002206:	687b      	ldr	r3, [r7, #4]
 8002208:	7f5b      	ldrb	r3, [r3, #29]
 800220a:	035a      	lsls	r2, r3, #13
                 hadc->Init.Overrun                                                     |
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002210:	431a      	orrs	r2, r3
                 hadc->Init.DataAlign                                                   |
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	68db      	ldr	r3, [r3, #12]
                 hadc->Init.Overrun                                                     |
 8002216:	431a      	orrs	r2, r3
                 hadc->Init.Resolution                                                  |
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	689b      	ldr	r3, [r3, #8]
                 hadc->Init.DataAlign                                                   |
 800221c:	431a      	orrs	r2, r3
                 ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002224:	041b      	lsls	r3, r3, #16
    tmp_cfgr  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002226:	4313      	orrs	r3, r2
 8002228:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8002230:	2b01      	cmp	r3, #1
 8002232:	d106      	bne.n	8002242 <HAL_ADC_Init+0x4e6>
    {
      tmp_cfgr |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002238:	3b01      	subs	r3, #1
 800223a:	045b      	lsls	r3, r3, #17
 800223c:	69ba      	ldr	r2, [r7, #24]
 800223e:	4313      	orrs	r3, r2
 8002240:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002246:	2b00      	cmp	r3, #0
 8002248:	d009      	beq.n	800225e <HAL_ADC_Init+0x502>
    {
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800224e:	f403 7278 	and.w	r2, r3, #992	@ 0x3e0
                   | hadc->Init.ExternalTrigConvEdge
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002256:	4313      	orrs	r3, r2
      tmp_cfgr |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
                  );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmp_cfgr);
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	68da      	ldr	r2, [r3, #12]
 8002264:	4b79      	ldr	r3, [pc, #484]	@ (800244c <HAL_ADC_Init+0x6f0>)
 8002266:	4013      	ands	r3, r2
 8002268:	687a      	ldr	r2, [r7, #4]
 800226a:	6812      	ldr	r2, [r2, #0]
 800226c:	69b9      	ldr	r1, [r7, #24]
 800226e:	430b      	orrs	r3, r1
 8002270:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	691b      	ldr	r3, [r3, #16]
 8002278:	f023 6140 	bic.w	r1, r3, #201326592	@ 0xc000000
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	430a      	orrs	r2, r1
 8002286:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4618      	mov	r0, r3
 800228e:	f7ff fd51 	bl	8001d34 <LL_ADC_INJ_IsConversionOngoing>
 8002292:	6138      	str	r0, [r7, #16]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002294:	697b      	ldr	r3, [r7, #20]
 8002296:	2b00      	cmp	r3, #0
 8002298:	f040 80e4 	bne.w	8002464 <HAL_ADC_Init+0x708>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800229c:	693b      	ldr	r3, [r7, #16]
 800229e:	2b00      	cmp	r3, #0
 80022a0:	f040 80e0 	bne.w	8002464 <HAL_ADC_Init+0x708>
       )
    {
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
                   ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	7f1b      	ldrb	r3, [r3, #28]
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022a8:	039a      	lsls	r2, r3, #14
                   ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 80022b0:	005b      	lsls	r3, r3, #1
      tmp_cfgr = (ADC_CFGR_DFSDM(hadc)                                            |
 80022b2:	4313      	orrs	r3, r2
 80022b4:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmp_cfgr);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	68db      	ldr	r3, [r3, #12]
 80022bc:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80022c0:	f023 0302 	bic.w	r3, r3, #2
 80022c4:	687a      	ldr	r2, [r7, #4]
 80022c6:	6812      	ldr	r2, [r2, #0]
 80022c8:	69b9      	ldr	r1, [r7, #24]
 80022ca:	430b      	orrs	r3, r1
 80022cc:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	691b      	ldr	r3, [r3, #16]
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d017      	beq.n	8002306 <HAL_ADC_Init+0x5aa>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	691a      	ldr	r2, [r3, #16]
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	681b      	ldr	r3, [r3, #0]
 80022e0:	f442 3280 	orr.w	r2, r2, #65536	@ 0x10000
 80022e4:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 80022ee:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80022f2:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 80022f6:	687a      	ldr	r2, [r7, #4]
 80022f8:	6911      	ldr	r1, [r2, #16]
 80022fa:	687a      	ldr	r2, [r7, #4]
 80022fc:	6812      	ldr	r2, [r2, #0]
 80022fe:	430b      	orrs	r3, r1
 8002300:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
 8002304:	e013      	b.n	800232e <HAL_ADC_Init+0x5d2>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	691a      	ldr	r2, [r3, #16]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f422 3280 	bic.w	r2, r2, #65536	@ 0x10000
 8002314:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	f8d3 30c0 	ldr.w	r3, [r3, #192]	@ 0xc0
 800231e:	687a      	ldr	r2, [r7, #4]
 8002320:	6812      	ldr	r2, [r2, #0]
 8002322:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 8002326:	f023 033f 	bic.w	r3, r3, #63	@ 0x3f
 800232a:	f8c2 30c0 	str.w	r3, [r2, #192]	@ 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002334:	2b01      	cmp	r3, #1
 8002336:	f040 808d 	bne.w	8002454 <HAL_ADC_Init+0x6f8>
      {
        assert_param(IS_ADC_OVERSAMPLING_RATIO(hadc->Init.Oversampling.Ratio));
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800233e:	2b00      	cmp	r3, #0
 8002340:	d020      	beq.n	8002384 <HAL_ADC_Init+0x628>
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	2b04      	cmp	r3, #4
 8002348:	d01c      	beq.n	8002384 <HAL_ADC_Init+0x628>
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800234e:	2b08      	cmp	r3, #8
 8002350:	d018      	beq.n	8002384 <HAL_ADC_Init+0x628>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002356:	2b0c      	cmp	r3, #12
 8002358:	d014      	beq.n	8002384 <HAL_ADC_Init+0x628>
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800235e:	2b10      	cmp	r3, #16
 8002360:	d010      	beq.n	8002384 <HAL_ADC_Init+0x628>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002366:	2b14      	cmp	r3, #20
 8002368:	d00c      	beq.n	8002384 <HAL_ADC_Init+0x628>
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	2b18      	cmp	r3, #24
 8002370:	d008      	beq.n	8002384 <HAL_ADC_Init+0x628>
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002376:	2b1c      	cmp	r3, #28
 8002378:	d004      	beq.n	8002384 <HAL_ADC_Init+0x628>
 800237a:	f240 2176 	movw	r1, #630	@ 0x276
 800237e:	4834      	ldr	r0, [pc, #208]	@ (8002450 <HAL_ADC_Init+0x6f4>)
 8002380:	f7fe ff9a 	bl	80012b8 <assert_failed>
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002388:	2b00      	cmp	r3, #0
 800238a:	d025      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002390:	2b20      	cmp	r3, #32
 8002392:	d021      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002398:	2b40      	cmp	r3, #64	@ 0x40
 800239a:	d01d      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a0:	2b60      	cmp	r3, #96	@ 0x60
 80023a2:	d019      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023a8:	2b80      	cmp	r3, #128	@ 0x80
 80023aa:	d015      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b0:	2ba0      	cmp	r3, #160	@ 0xa0
 80023b2:	d011      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023b8:	2bc0      	cmp	r3, #192	@ 0xc0
 80023ba:	d00d      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c0:	2be0      	cmp	r3, #224	@ 0xe0
 80023c2:	d009      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80023c8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80023cc:	d004      	beq.n	80023d8 <HAL_ADC_Init+0x67c>
 80023ce:	f240 2177 	movw	r1, #631	@ 0x277
 80023d2:	481f      	ldr	r0, [pc, #124]	@ (8002450 <HAL_ADC_Init+0x6f4>)
 80023d4:	f7fe ff70 	bl	80012b8 <assert_failed>
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d009      	beq.n	80023f4 <HAL_ADC_Init+0x698>
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80023e4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80023e8:	d004      	beq.n	80023f4 <HAL_ADC_Init+0x698>
 80023ea:	f44f 711e 	mov.w	r1, #632	@ 0x278
 80023ee:	4818      	ldr	r0, [pc, #96]	@ (8002450 <HAL_ADC_Init+0x6f4>)
 80023f0:	f7fe ff62 	bl	80012b8 <assert_failed>
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80023f8:	2b01      	cmp	r3, #1
 80023fa:	d00a      	beq.n	8002412 <HAL_ADC_Init+0x6b6>
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002400:	f240 4201 	movw	r2, #1025	@ 0x401
 8002404:	4293      	cmp	r3, r2
 8002406:	d004      	beq.n	8002412 <HAL_ADC_Init+0x6b6>
 8002408:	f240 2179 	movw	r1, #633	@ 0x279
 800240c:	4810      	ldr	r0, [pc, #64]	@ (8002450 <HAL_ADC_Init+0x6f4>)
 800240e:	f7fe ff53 	bl	80012b8 <assert_failed>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	691b      	ldr	r3, [r3, #16]
 8002418:	f423 63ff 	bic.w	r3, r3, #2040	@ 0x7f8
 800241c:	f023 0304 	bic.w	r3, r3, #4
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	6c51      	ldr	r1, [r2, #68]	@ 0x44
 8002424:	687a      	ldr	r2, [r7, #4]
 8002426:	6c92      	ldr	r2, [r2, #72]	@ 0x48
 8002428:	4311      	orrs	r1, r2
 800242a:	687a      	ldr	r2, [r7, #4]
 800242c:	6cd2      	ldr	r2, [r2, #76]	@ 0x4c
 800242e:	4311      	orrs	r1, r2
 8002430:	687a      	ldr	r2, [r7, #4]
 8002432:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002434:	430a      	orrs	r2, r1
 8002436:	431a      	orrs	r2, r3
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f042 0201 	orr.w	r2, r2, #1
 8002440:	611a      	str	r2, [r3, #16]
 8002442:	e00f      	b.n	8002464 <HAL_ADC_Init+0x708>
 8002444:	50000100 	.word	0x50000100
 8002448:	50000300 	.word	0x50000300
 800244c:	fff04007 	.word	0xfff04007
 8002450:	0800c188 	.word	0x0800c188
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	691a      	ldr	r2, [r3, #16]
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f022 0201 	bic.w	r2, r2, #1
 8002462:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	695b      	ldr	r3, [r3, #20]
 8002468:	2b01      	cmp	r3, #1
 800246a:	d10c      	bne.n	8002486 <HAL_ADC_Init+0x72a>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002472:	f023 010f 	bic.w	r1, r3, #15
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	6a1b      	ldr	r3, [r3, #32]
 800247a:	1e5a      	subs	r2, r3, #1
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	430a      	orrs	r2, r1
 8002482:	631a      	str	r2, [r3, #48]	@ 0x30
 8002484:	e007      	b.n	8002496 <HAL_ADC_Init+0x73a>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	f022 020f 	bic.w	r2, r2, #15
 8002494:	631a      	str	r2, [r3, #48]	@ 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800249a:	f023 0303 	bic.w	r3, r3, #3
 800249e:	f043 0201 	orr.w	r2, r3, #1
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	65da      	str	r2, [r3, #92]	@ 0x5c
 80024a6:	e007      	b.n	80024b8 <HAL_ADC_Init+0x75c>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80024ac:	f043 0210 	orr.w	r2, r3, #16
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 80024b4:	2301      	movs	r3, #1
 80024b6:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 80024b8:	7ffb      	ldrb	r3, [r7, #31]
}
 80024ba:	4618      	mov	r0, r3
 80024bc:	3724      	adds	r7, #36	@ 0x24
 80024be:	46bd      	mov	sp, r7
 80024c0:	bd90      	pop	{r4, r7, pc}
 80024c2:	bf00      	nop

080024c4 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08a      	sub	sp, #40	@ 0x28
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 80024cc:	2300      	movs	r3, #0
 80024ce:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 80024d0:	687b      	ldr	r3, [r7, #4]
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	681b      	ldr	r3, [r3, #0]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80024e0:	4891      	ldr	r0, [pc, #580]	@ (8002728 <HAL_ADC_IRQHandler+0x264>)
 80024e2:	f7ff fb97 	bl	8001c14 <LL_ADC_GetMultimode>
 80024e6:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80024f0:	d009      	beq.n	8002506 <HAL_ADC_IRQHandler+0x42>
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a8d      	ldr	r2, [pc, #564]	@ (800272c <HAL_ADC_IRQHandler+0x268>)
 80024f8:	4293      	cmp	r3, r2
 80024fa:	d004      	beq.n	8002506 <HAL_ADC_IRQHandler+0x42>
 80024fc:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8002500:	488b      	ldr	r0, [pc, #556]	@ (8002730 <HAL_ADC_IRQHandler+0x26c>)
 8002502:	f7fe fed9 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	2b04      	cmp	r3, #4
 800250c:	d008      	beq.n	8002520 <HAL_ADC_IRQHandler+0x5c>
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	699b      	ldr	r3, [r3, #24]
 8002512:	2b08      	cmp	r3, #8
 8002514:	d004      	beq.n	8002520 <HAL_ADC_IRQHandler+0x5c>
 8002516:	f640 1101 	movw	r1, #2305	@ 0x901
 800251a:	4885      	ldr	r0, [pc, #532]	@ (8002730 <HAL_ADC_IRQHandler+0x26c>)
 800251c:	f7fe fecc 	bl	80012b8 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002520:	69fb      	ldr	r3, [r7, #28]
 8002522:	f003 0302 	and.w	r3, r3, #2
 8002526:	2b00      	cmp	r3, #0
 8002528:	d017      	beq.n	800255a <HAL_ADC_IRQHandler+0x96>
 800252a:	69bb      	ldr	r3, [r7, #24]
 800252c:	f003 0302 	and.w	r3, r3, #2
 8002530:	2b00      	cmp	r3, #0
 8002532:	d012      	beq.n	800255a <HAL_ADC_IRQHandler+0x96>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002534:	687b      	ldr	r3, [r7, #4]
 8002536:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002538:	f003 0310 	and.w	r3, r3, #16
 800253c:	2b00      	cmp	r3, #0
 800253e:	d105      	bne.n	800254c <HAL_ADC_IRQHandler+0x88>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002544:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 800254c:	6878      	ldr	r0, [r7, #4]
 800254e:	f001 f87b 	bl	8003648 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	2202      	movs	r2, #2
 8002558:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 800255a:	69fb      	ldr	r3, [r7, #28]
 800255c:	f003 0304 	and.w	r3, r3, #4
 8002560:	2b00      	cmp	r3, #0
 8002562:	d004      	beq.n	800256e <HAL_ADC_IRQHandler+0xaa>
 8002564:	69bb      	ldr	r3, [r7, #24]
 8002566:	f003 0304 	and.w	r3, r3, #4
 800256a:	2b00      	cmp	r3, #0
 800256c:	d10a      	bne.n	8002584 <HAL_ADC_IRQHandler+0xc0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8002574:	2b00      	cmp	r3, #0
 8002576:	f000 8085 	beq.w	8002684 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 800257a:	69bb      	ldr	r3, [r7, #24]
 800257c:	f003 0308 	and.w	r3, r3, #8
 8002580:	2b00      	cmp	r3, #0
 8002582:	d07f      	beq.n	8002684 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002588:	f003 0310 	and.w	r3, r3, #16
 800258c:	2b00      	cmp	r3, #0
 800258e:	d105      	bne.n	800259c <HAL_ADC_IRQHandler+0xd8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002594:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	4618      	mov	r0, r3
 80025a2:	f7ff fa95 	bl	8001ad0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80025a6:	4603      	mov	r3, r0
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d064      	beq.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a5e      	ldr	r2, [pc, #376]	@ (800272c <HAL_ADC_IRQHandler+0x268>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d002      	beq.n	80025bc <HAL_ADC_IRQHandler+0xf8>
 80025b6:	687b      	ldr	r3, [r7, #4]
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	e001      	b.n	80025c0 <HAL_ADC_IRQHandler+0xfc>
 80025bc:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025c0:	687a      	ldr	r2, [r7, #4]
 80025c2:	6812      	ldr	r2, [r2, #0]
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d008      	beq.n	80025da <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025c8:	697b      	ldr	r3, [r7, #20]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d005      	beq.n	80025da <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	2b05      	cmp	r3, #5
 80025d2:	d002      	beq.n	80025da <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80025d4:	697b      	ldr	r3, [r7, #20]
 80025d6:	2b09      	cmp	r3, #9
 80025d8:	d104      	bne.n	80025e4 <HAL_ADC_IRQHandler+0x120>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	68db      	ldr	r3, [r3, #12]
 80025e0:	623b      	str	r3, [r7, #32]
 80025e2:	e00d      	b.n	8002600 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4a50      	ldr	r2, [pc, #320]	@ (800272c <HAL_ADC_IRQHandler+0x268>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d002      	beq.n	80025f4 <HAL_ADC_IRQHandler+0x130>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	e001      	b.n	80025f8 <HAL_ADC_IRQHandler+0x134>
 80025f4:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80025f8:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80025fa:	693b      	ldr	r3, [r7, #16]
 80025fc:	68db      	ldr	r3, [r3, #12]
 80025fe:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002600:	6a3b      	ldr	r3, [r7, #32]
 8002602:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8002606:	2b00      	cmp	r3, #0
 8002608:	d135      	bne.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	681b      	ldr	r3, [r3, #0]
 800260e:	681b      	ldr	r3, [r3, #0]
 8002610:	f003 0308 	and.w	r3, r3, #8
 8002614:	2b08      	cmp	r3, #8
 8002616:	d12e      	bne.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fb76 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 8002622:	4603      	mov	r3, r0
 8002624:	2b00      	cmp	r3, #0
 8002626:	d11a      	bne.n	800265e <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	681b      	ldr	r3, [r3, #0]
 800262c:	685a      	ldr	r2, [r3, #4]
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	f022 020c 	bic.w	r2, r2, #12
 8002636:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800263c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002648:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800264c:	2b00      	cmp	r3, #0
 800264e:	d112      	bne.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002654:	f043 0201 	orr.w	r2, r3, #1
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	65da      	str	r2, [r3, #92]	@ 0x5c
 800265c:	e00b      	b.n	8002676 <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002662:	f043 0210 	orr.w	r2, r3, #16
 8002666:	687b      	ldr	r3, [r7, #4]
 8002668:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800266e:	f043 0201 	orr.w	r2, r3, #1
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f000 f95c 	bl	8002934 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800267c:	687b      	ldr	r3, [r7, #4]
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	220c      	movs	r2, #12
 8002682:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002684:	69fb      	ldr	r3, [r7, #28]
 8002686:	f003 0320 	and.w	r3, r3, #32
 800268a:	2b00      	cmp	r3, #0
 800268c:	d004      	beq.n	8002698 <HAL_ADC_IRQHandler+0x1d4>
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	f003 0320 	and.w	r3, r3, #32
 8002694:	2b00      	cmp	r3, #0
 8002696:	d10b      	bne.n	80026b0 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002698:	69fb      	ldr	r3, [r7, #28]
 800269a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 800269e:	2b00      	cmp	r3, #0
 80026a0:	f000 80a0 	beq.w	80027e4 <HAL_ADC_IRQHandler+0x320>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80026a4:	69bb      	ldr	r3, [r7, #24]
 80026a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80026aa:	2b00      	cmp	r3, #0
 80026ac:	f000 809a 	beq.w	80027e4 <HAL_ADC_IRQHandler+0x320>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b4:	f003 0310 	and.w	r3, r3, #16
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d105      	bne.n	80026c8 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026c0:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7ff fa3e 	bl	8001b4e <LL_ADC_INJ_IsTriggerSourceSWStart>
 80026d2:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	4618      	mov	r0, r3
 80026da:	f7ff f9f9 	bl	8001ad0 <LL_ADC_REG_IsTriggerSourceSWStart>
 80026de:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	681b      	ldr	r3, [r3, #0]
 80026e4:	4a11      	ldr	r2, [pc, #68]	@ (800272c <HAL_ADC_IRQHandler+0x268>)
 80026e6:	4293      	cmp	r3, r2
 80026e8:	d002      	beq.n	80026f0 <HAL_ADC_IRQHandler+0x22c>
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	681b      	ldr	r3, [r3, #0]
 80026ee:	e001      	b.n	80026f4 <HAL_ADC_IRQHandler+0x230>
 80026f0:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80026f4:	687a      	ldr	r2, [r7, #4]
 80026f6:	6812      	ldr	r2, [r2, #0]
 80026f8:	4293      	cmp	r3, r2
 80026fa:	d008      	beq.n	800270e <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80026fc:	697b      	ldr	r3, [r7, #20]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d005      	beq.n	800270e <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8002702:	697b      	ldr	r3, [r7, #20]
 8002704:	2b06      	cmp	r3, #6
 8002706:	d002      	beq.n	800270e <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	2b07      	cmp	r3, #7
 800270c:	d104      	bne.n	8002718 <HAL_ADC_IRQHandler+0x254>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68db      	ldr	r3, [r3, #12]
 8002714:	623b      	str	r3, [r7, #32]
 8002716:	e013      	b.n	8002740 <HAL_ADC_IRQHandler+0x27c>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	4a03      	ldr	r2, [pc, #12]	@ (800272c <HAL_ADC_IRQHandler+0x268>)
 800271e:	4293      	cmp	r3, r2
 8002720:	d008      	beq.n	8002734 <HAL_ADC_IRQHandler+0x270>
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	e007      	b.n	8002738 <HAL_ADC_IRQHandler+0x274>
 8002728:	50000300 	.word	0x50000300
 800272c:	50000100 	.word	0x50000100
 8002730:	0800c188 	.word	0x0800c188
 8002734:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002738:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 800273a:	693b      	ldr	r3, [r7, #16]
 800273c:	68db      	ldr	r3, [r3, #12]
 800273e:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2b00      	cmp	r3, #0
 8002744:	d047      	beq.n	80027d6 <HAL_ADC_IRQHandler+0x312>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8002746:	6a3b      	ldr	r3, [r7, #32]
 8002748:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274c:	2b00      	cmp	r3, #0
 800274e:	d007      	beq.n	8002760 <HAL_ADC_IRQHandler+0x29c>
 8002750:	68bb      	ldr	r3, [r7, #8]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d03f      	beq.n	80027d6 <HAL_ADC_IRQHandler+0x312>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8002756:	6a3b      	ldr	r3, [r7, #32]
 8002758:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d13a      	bne.n	80027d6 <HAL_ADC_IRQHandler+0x312>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800276a:	2b40      	cmp	r3, #64	@ 0x40
 800276c:	d133      	bne.n	80027d6 <HAL_ADC_IRQHandler+0x312>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 800276e:	6a3b      	ldr	r3, [r7, #32]
 8002770:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002774:	2b00      	cmp	r3, #0
 8002776:	d12e      	bne.n	80027d6 <HAL_ADC_IRQHandler+0x312>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4618      	mov	r0, r3
 800277e:	f7ff fad9 	bl	8001d34 <LL_ADC_INJ_IsConversionOngoing>
 8002782:	4603      	mov	r3, r0
 8002784:	2b00      	cmp	r3, #0
 8002786:	d11a      	bne.n	80027be <HAL_ADC_IRQHandler+0x2fa>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	685a      	ldr	r2, [r3, #4]
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 8002796:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800279c:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027a8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80027ac:	2b00      	cmp	r3, #0
 80027ae:	d112      	bne.n	80027d6 <HAL_ADC_IRQHandler+0x312>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027b4:	f043 0201 	orr.w	r2, r3, #1
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	65da      	str	r2, [r3, #92]	@ 0x5c
 80027bc:	e00b      	b.n	80027d6 <HAL_ADC_IRQHandler+0x312>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027c2:	f043 0210 	orr.w	r2, r3, #16
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80027ce:	f043 0201 	orr.w	r2, r3, #1
 80027d2:	687b      	ldr	r3, [r7, #4]
 80027d4:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 ff0e 	bl	80035f8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 80027dc:	687b      	ldr	r3, [r7, #4]
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	2260      	movs	r2, #96	@ 0x60
 80027e2:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d011      	beq.n	8002812 <HAL_ADC_IRQHandler+0x34e>
 80027ee:	69bb      	ldr	r3, [r7, #24]
 80027f0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d00c      	beq.n	8002812 <HAL_ADC_IRQHandler+0x34e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80027fc:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8002804:	6878      	ldr	r0, [r7, #4]
 8002806:	f000 f89f 	bl	8002948 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	2280      	movs	r2, #128	@ 0x80
 8002810:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8002812:	69fb      	ldr	r3, [r7, #28]
 8002814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002818:	2b00      	cmp	r3, #0
 800281a:	d012      	beq.n	8002842 <HAL_ADC_IRQHandler+0x37e>
 800281c:	69bb      	ldr	r3, [r7, #24]
 800281e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002822:	2b00      	cmp	r3, #0
 8002824:	d00d      	beq.n	8002842 <HAL_ADC_IRQHandler+0x37e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8002832:	6878      	ldr	r0, [r7, #4]
 8002834:	f000 fef4 	bl	8003620 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8002842:	69fb      	ldr	r3, [r7, #28]
 8002844:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002848:	2b00      	cmp	r3, #0
 800284a:	d012      	beq.n	8002872 <HAL_ADC_IRQHandler+0x3ae>
 800284c:	69bb      	ldr	r3, [r7, #24]
 800284e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <HAL_ADC_IRQHandler+0x3ae>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800285a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800285e:	687b      	ldr	r3, [r7, #4]
 8002860:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8002862:	6878      	ldr	r0, [r7, #4]
 8002864:	f000 fee6 	bl	8003634 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002870:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8002872:	69fb      	ldr	r3, [r7, #28]
 8002874:	f003 0310 	and.w	r3, r3, #16
 8002878:	2b00      	cmp	r3, #0
 800287a:	d036      	beq.n	80028ea <HAL_ADC_IRQHandler+0x426>
 800287c:	69bb      	ldr	r3, [r7, #24]
 800287e:	f003 0310 	and.w	r3, r3, #16
 8002882:	2b00      	cmp	r3, #0
 8002884:	d031      	beq.n	80028ea <HAL_ADC_IRQHandler+0x426>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8002886:	687b      	ldr	r3, [r7, #4]
 8002888:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800288a:	2b00      	cmp	r3, #0
 800288c:	d102      	bne.n	8002894 <HAL_ADC_IRQHandler+0x3d0>
    {
      overrun_error = 1UL;
 800288e:	2301      	movs	r3, #1
 8002890:	627b      	str	r3, [r7, #36]	@ 0x24
 8002892:	e014      	b.n	80028be <HAL_ADC_IRQHandler+0x3fa>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8002894:	697b      	ldr	r3, [r7, #20]
 8002896:	2b00      	cmp	r3, #0
 8002898:	d008      	beq.n	80028ac <HAL_ADC_IRQHandler+0x3e8>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 800289a:	4825      	ldr	r0, [pc, #148]	@ (8002930 <HAL_ADC_IRQHandler+0x46c>)
 800289c:	f7ff f9c8 	bl	8001c30 <LL_ADC_GetMultiDMATransfer>
 80028a0:	4603      	mov	r3, r0
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d00b      	beq.n	80028be <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 80028a6:	2301      	movs	r3, #1
 80028a8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028aa:	e008      	b.n	80028be <HAL_ADC_IRQHandler+0x3fa>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	681b      	ldr	r3, [r3, #0]
 80028b0:	68db      	ldr	r3, [r3, #12]
 80028b2:	f003 0301 	and.w	r3, r3, #1
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 80028ba:	2301      	movs	r3, #1
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	2b01      	cmp	r3, #1
 80028c2:	d10e      	bne.n	80028e2 <HAL_ADC_IRQHandler+0x41e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 80028c4:	687b      	ldr	r3, [r7, #4]
 80028c6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c8:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80028d4:	f043 0202 	orr.w	r2, r3, #2
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 80028dc:	6878      	ldr	r0, [r7, #4]
 80028de:	f000 f83d 	bl	800295c <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	2210      	movs	r2, #16
 80028e8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 80028ea:	69fb      	ldr	r3, [r7, #28]
 80028ec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d018      	beq.n	8002926 <HAL_ADC_IRQHandler+0x462>
 80028f4:	69bb      	ldr	r3, [r7, #24]
 80028f6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d013      	beq.n	8002926 <HAL_ADC_IRQHandler+0x462>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002902:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800290e:	f043 0208 	orr.w	r2, r3, #8
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	681b      	ldr	r3, [r3, #0]
 800291a:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 800291e:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002920:	6878      	ldr	r0, [r7, #4]
 8002922:	f000 fe73 	bl	800360c <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8002926:	bf00      	nop
 8002928:	3728      	adds	r7, #40	@ 0x28
 800292a:	46bd      	mov	sp, r7
 800292c:	bd80      	pop	{r7, pc}
 800292e:	bf00      	nop
 8002930:	50000300 	.word	0x50000300

08002934 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8002950:	bf00      	nop
 8002952:	370c      	adds	r7, #12
 8002954:	46bd      	mov	sp, r7
 8002956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295a:	4770      	bx	lr

0800295c <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8002964:	bf00      	nop
 8002966:	370c      	adds	r7, #12
 8002968:	46bd      	mov	sp, r7
 800296a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800296e:	4770      	bx	lr

08002970 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8002970:	b590      	push	{r4, r7, lr}
 8002972:	b0b7      	sub	sp, #220	@ 0xdc
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
 8002978:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002980:	2300      	movs	r3, #0
 8002982:	60fb      	str	r3, [r7, #12]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800298c:	d009      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x32>
 800298e:	687b      	ldr	r3, [r7, #4]
 8002990:	681b      	ldr	r3, [r3, #0]
 8002992:	4a94      	ldr	r2, [pc, #592]	@ (8002be4 <HAL_ADC_ConfigChannel+0x274>)
 8002994:	4293      	cmp	r3, r2
 8002996:	d004      	beq.n	80029a2 <HAL_ADC_ConfigChannel+0x32>
 8002998:	f640 21d2 	movw	r1, #2770	@ 0xad2
 800299c:	4892      	ldr	r0, [pc, #584]	@ (8002be8 <HAL_ADC_ConfigChannel+0x278>)
 800299e:	f7fe fc8b 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
 80029a2:	683b      	ldr	r3, [r7, #0]
 80029a4:	685b      	ldr	r3, [r3, #4]
 80029a6:	2b06      	cmp	r3, #6
 80029a8:	d04f      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	685b      	ldr	r3, [r3, #4]
 80029ae:	2b0c      	cmp	r3, #12
 80029b0:	d04b      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685b      	ldr	r3, [r3, #4]
 80029b6:	2b12      	cmp	r3, #18
 80029b8:	d047      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029ba:	683b      	ldr	r3, [r7, #0]
 80029bc:	685b      	ldr	r3, [r3, #4]
 80029be:	2b18      	cmp	r3, #24
 80029c0:	d043      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	685b      	ldr	r3, [r3, #4]
 80029c6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80029ca:	d03e      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	f5b3 7f83 	cmp.w	r3, #262	@ 0x106
 80029d4:	d039      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029d6:	683b      	ldr	r3, [r7, #0]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	f5b3 7f86 	cmp.w	r3, #268	@ 0x10c
 80029de:	d034      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029e0:	683b      	ldr	r3, [r7, #0]
 80029e2:	685b      	ldr	r3, [r3, #4]
 80029e4:	f5b3 7f89 	cmp.w	r3, #274	@ 0x112
 80029e8:	d02f      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	685b      	ldr	r3, [r3, #4]
 80029ee:	f5b3 7f8c 	cmp.w	r3, #280	@ 0x118
 80029f2:	d02a      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80029fc:	d025      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 80029fe:	683b      	ldr	r3, [r7, #0]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	f240 2206 	movw	r2, #518	@ 0x206
 8002a06:	4293      	cmp	r3, r2
 8002a08:	d01f      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	685b      	ldr	r3, [r3, #4]
 8002a0e:	f5b3 7f03 	cmp.w	r3, #524	@ 0x20c
 8002a12:	d01a      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 8002a14:	683b      	ldr	r3, [r7, #0]
 8002a16:	685b      	ldr	r3, [r3, #4]
 8002a18:	f240 2212 	movw	r2, #530	@ 0x212
 8002a1c:	4293      	cmp	r3, r2
 8002a1e:	d014      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 8002a20:	683b      	ldr	r3, [r7, #0]
 8002a22:	685b      	ldr	r3, [r3, #4]
 8002a24:	f5b3 7f06 	cmp.w	r3, #536	@ 0x218
 8002a28:	d00f      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 8002a2a:	683b      	ldr	r3, [r7, #0]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8002a32:	d00a      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 8002a34:	683b      	ldr	r3, [r7, #0]
 8002a36:	685b      	ldr	r3, [r3, #4]
 8002a38:	f240 3206 	movw	r2, #774	@ 0x306
 8002a3c:	4293      	cmp	r3, r2
 8002a3e:	d004      	beq.n	8002a4a <HAL_ADC_ConfigChannel+0xda>
 8002a40:	f640 21d3 	movw	r1, #2771	@ 0xad3
 8002a44:	4868      	ldr	r0, [pc, #416]	@ (8002be8 <HAL_ADC_ConfigChannel+0x278>)
 8002a46:	f7fe fc37 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_SAMPLE_TIME(pConfig->SamplingTime));
 8002a4a:	683b      	ldr	r3, [r7, #0]
 8002a4c:	689b      	ldr	r3, [r3, #8]
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d025      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	689b      	ldr	r3, [r3, #8]
 8002a56:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002a5a:	d020      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a5c:	683b      	ldr	r3, [r7, #0]
 8002a5e:	689b      	ldr	r3, [r3, #8]
 8002a60:	2b01      	cmp	r3, #1
 8002a62:	d01c      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a64:	683b      	ldr	r3, [r7, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	2b02      	cmp	r3, #2
 8002a6a:	d018      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a6c:	683b      	ldr	r3, [r7, #0]
 8002a6e:	689b      	ldr	r3, [r3, #8]
 8002a70:	2b03      	cmp	r3, #3
 8002a72:	d014      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b04      	cmp	r3, #4
 8002a7a:	d010      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	689b      	ldr	r3, [r3, #8]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d00c      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a84:	683b      	ldr	r3, [r7, #0]
 8002a86:	689b      	ldr	r3, [r3, #8]
 8002a88:	2b06      	cmp	r3, #6
 8002a8a:	d008      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a8c:	683b      	ldr	r3, [r7, #0]
 8002a8e:	689b      	ldr	r3, [r3, #8]
 8002a90:	2b07      	cmp	r3, #7
 8002a92:	d004      	beq.n	8002a9e <HAL_ADC_ConfigChannel+0x12e>
 8002a94:	f640 21d4 	movw	r1, #2772	@ 0xad4
 8002a98:	4853      	ldr	r0, [pc, #332]	@ (8002be8 <HAL_ADC_ConfigChannel+0x278>)
 8002a9a:	f7fe fc0d 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(pConfig->SingleDiff));
 8002a9e:	683b      	ldr	r3, [r7, #0]
 8002aa0:	68db      	ldr	r3, [r3, #12]
 8002aa2:	2b7f      	cmp	r3, #127	@ 0x7f
 8002aa4:	d009      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x14a>
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	68db      	ldr	r3, [r3, #12]
 8002aaa:	4a50      	ldr	r2, [pc, #320]	@ (8002bec <HAL_ADC_ConfigChannel+0x27c>)
 8002aac:	4293      	cmp	r3, r2
 8002aae:	d004      	beq.n	8002aba <HAL_ADC_ConfigChannel+0x14a>
 8002ab0:	f640 21d5 	movw	r1, #2773	@ 0xad5
 8002ab4:	484c      	ldr	r0, [pc, #304]	@ (8002be8 <HAL_ADC_ConfigChannel+0x278>)
 8002ab6:	f7fe fbff 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_OFFSET_NUMBER(pConfig->OffsetNumber));
 8002aba:	683b      	ldr	r3, [r7, #0]
 8002abc:	691b      	ldr	r3, [r3, #16]
 8002abe:	2b04      	cmp	r3, #4
 8002ac0:	d014      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x17c>
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	691b      	ldr	r3, [r3, #16]
 8002ac6:	2b00      	cmp	r3, #0
 8002ac8:	d010      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x17c>
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	691b      	ldr	r3, [r3, #16]
 8002ace:	2b01      	cmp	r3, #1
 8002ad0:	d00c      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x17c>
 8002ad2:	683b      	ldr	r3, [r7, #0]
 8002ad4:	691b      	ldr	r3, [r3, #16]
 8002ad6:	2b02      	cmp	r3, #2
 8002ad8:	d008      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x17c>
 8002ada:	683b      	ldr	r3, [r7, #0]
 8002adc:	691b      	ldr	r3, [r3, #16]
 8002ade:	2b03      	cmp	r3, #3
 8002ae0:	d004      	beq.n	8002aec <HAL_ADC_ConfigChannel+0x17c>
 8002ae2:	f640 21d6 	movw	r1, #2774	@ 0xad6
 8002ae6:	4840      	ldr	r0, [pc, #256]	@ (8002be8 <HAL_ADC_ConfigChannel+0x278>)
 8002ae8:	f7fe fbe6 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_RANGE(ADC_GET_RESOLUTION(hadc), pConfig->Offset));
 8002aec:	683b      	ldr	r3, [r7, #0]
 8002aee:	695c      	ldr	r4, [r3, #20]
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f7fe ff3f 	bl	8001978 <LL_ADC_GetResolution>
 8002afa:	4603      	mov	r3, r0
 8002afc:	089b      	lsrs	r3, r3, #2
 8002afe:	f640 72ff 	movw	r2, #4095	@ 0xfff
 8002b02:	fa22 f303 	lsr.w	r3, r2, r3
 8002b06:	429c      	cmp	r4, r3
 8002b08:	d904      	bls.n	8002b14 <HAL_ADC_ConfigChannel+0x1a4>
 8002b0a:	f640 21d7 	movw	r1, #2775	@ 0xad7
 8002b0e:	4836      	ldr	r0, [pc, #216]	@ (8002be8 <HAL_ADC_ConfigChannel+0x278>)
 8002b10:	f7fe fbd2 	bl	80012b8 <assert_failed>

  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((pConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	691b      	ldr	r3, [r3, #16]
 8002b18:	2b04      	cmp	r3, #4
 8002b1a:	d009      	beq.n	8002b30 <HAL_ADC_ConfigChannel+0x1c0>
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b22:	2b01      	cmp	r3, #1
 8002b24:	d104      	bne.n	8002b30 <HAL_ADC_ConfigChannel+0x1c0>
 8002b26:	f640 21db 	movw	r1, #2779	@ 0xadb
 8002b2a:	482f      	ldr	r0, [pc, #188]	@ (8002be8 <HAL_ADC_ConfigChannel+0x278>)
 8002b2c:	f7fe fbc4 	bl	80012b8 <assert_failed>

  /* Verification of channel number */
  if (pConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8002b30:	683b      	ldr	r3, [r7, #0]
 8002b32:	68db      	ldr	r3, [r3, #12]
 8002b34:	4a2d      	ldr	r2, [pc, #180]	@ (8002bec <HAL_ADC_ConfigChannel+0x27c>)
 8002b36:	4293      	cmp	r3, r2
 8002b38:	f000 80b2 	beq.w	8002ca0 <HAL_ADC_ConfigChannel+0x330>
  {
    assert_param(IS_ADC_CHANNEL(hadc, pConfig->Channel));
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	2b01      	cmp	r3, #1
 8002b42:	f000 80fd 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a29      	ldr	r2, [pc, #164]	@ (8002bf0 <HAL_ADC_ConfigChannel+0x280>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	f000 80f7 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	4a27      	ldr	r2, [pc, #156]	@ (8002bf4 <HAL_ADC_ConfigChannel+0x284>)
 8002b58:	4293      	cmp	r3, r2
 8002b5a:	f000 80f1 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	4a25      	ldr	r2, [pc, #148]	@ (8002bf8 <HAL_ADC_ConfigChannel+0x288>)
 8002b64:	4293      	cmp	r3, r2
 8002b66:	f000 80eb 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b6a:	683b      	ldr	r3, [r7, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	4a23      	ldr	r2, [pc, #140]	@ (8002bfc <HAL_ADC_ConfigChannel+0x28c>)
 8002b70:	4293      	cmp	r3, r2
 8002b72:	f000 80e5 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	4a21      	ldr	r2, [pc, #132]	@ (8002c00 <HAL_ADC_ConfigChannel+0x290>)
 8002b7c:	4293      	cmp	r3, r2
 8002b7e:	f000 80df 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b82:	683b      	ldr	r3, [r7, #0]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a1f      	ldr	r2, [pc, #124]	@ (8002c04 <HAL_ADC_ConfigChannel+0x294>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	f000 80d9 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1d      	ldr	r2, [pc, #116]	@ (8002c08 <HAL_ADC_ConfigChannel+0x298>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	f000 80d3 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002b9a:	683b      	ldr	r3, [r7, #0]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	4a1b      	ldr	r2, [pc, #108]	@ (8002c0c <HAL_ADC_ConfigChannel+0x29c>)
 8002ba0:	4293      	cmp	r3, r2
 8002ba2:	f000 80cd 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002ba6:	683b      	ldr	r3, [r7, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a19      	ldr	r2, [pc, #100]	@ (8002c10 <HAL_ADC_ConfigChannel+0x2a0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	f000 80c7 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a17      	ldr	r2, [pc, #92]	@ (8002c14 <HAL_ADC_ConfigChannel+0x2a4>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	f000 80c1 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002bbe:	683b      	ldr	r3, [r7, #0]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a15      	ldr	r2, [pc, #84]	@ (8002c18 <HAL_ADC_ConfigChannel+0x2a8>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	f000 80bb 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002bca:	683b      	ldr	r3, [r7, #0]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	4a13      	ldr	r2, [pc, #76]	@ (8002c1c <HAL_ADC_ConfigChannel+0x2ac>)
 8002bd0:	4293      	cmp	r3, r2
 8002bd2:	f000 80b5 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002bd6:	683b      	ldr	r3, [r7, #0]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	4a11      	ldr	r2, [pc, #68]	@ (8002c20 <HAL_ADC_ConfigChannel+0x2b0>)
 8002bdc:	4293      	cmp	r3, r2
 8002bde:	f000 80af 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002be2:	e01f      	b.n	8002c24 <HAL_ADC_ConfigChannel+0x2b4>
 8002be4:	50000100 	.word	0x50000100
 8002be8:	0800c188 	.word	0x0800c188
 8002bec:	407f0000 	.word	0x407f0000
 8002bf0:	04300002 	.word	0x04300002
 8002bf4:	08600004 	.word	0x08600004
 8002bf8:	0c900008 	.word	0x0c900008
 8002bfc:	10c00010 	.word	0x10c00010
 8002c00:	14f00020 	.word	0x14f00020
 8002c04:	19200040 	.word	0x19200040
 8002c08:	1d500080 	.word	0x1d500080
 8002c0c:	21800100 	.word	0x21800100
 8002c10:	25b00200 	.word	0x25b00200
 8002c14:	2a000400 	.word	0x2a000400
 8002c18:	2e300800 	.word	0x2e300800
 8002c1c:	32601000 	.word	0x32601000
 8002c20:	3ac04000 	.word	0x3ac04000
 8002c24:	683b      	ldr	r3, [r7, #0]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	4a6b      	ldr	r2, [pc, #428]	@ (8002dd8 <HAL_ADC_ConfigChannel+0x468>)
 8002c2a:	4293      	cmp	r3, r2
 8002c2c:	f000 8088 	beq.w	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002c38:	d113      	bne.n	8002c62 <HAL_ADC_ConfigChannel+0x2f2>
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	4a67      	ldr	r2, [pc, #412]	@ (8002ddc <HAL_ADC_ConfigChannel+0x46c>)
 8002c40:	4293      	cmp	r3, r2
 8002c42:	d07d      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	4a65      	ldr	r2, [pc, #404]	@ (8002de0 <HAL_ADC_ConfigChannel+0x470>)
 8002c4a:	4293      	cmp	r3, r2
 8002c4c:	d078      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c4e:	683b      	ldr	r3, [r7, #0]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	4a64      	ldr	r2, [pc, #400]	@ (8002de4 <HAL_ADC_ConfigChannel+0x474>)
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d073      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c58:	683b      	ldr	r3, [r7, #0]
 8002c5a:	681b      	ldr	r3, [r3, #0]
 8002c5c:	4a62      	ldr	r2, [pc, #392]	@ (8002de8 <HAL_ADC_ConfigChannel+0x478>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d06e      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	4a61      	ldr	r2, [pc, #388]	@ (8002dec <HAL_ADC_ConfigChannel+0x47c>)
 8002c68:	4293      	cmp	r3, r2
 8002c6a:	d113      	bne.n	8002c94 <HAL_ADC_ConfigChannel+0x324>
 8002c6c:	683b      	ldr	r3, [r7, #0]
 8002c6e:	681b      	ldr	r3, [r3, #0]
 8002c70:	4a5f      	ldr	r2, [pc, #380]	@ (8002df0 <HAL_ADC_ConfigChannel+0x480>)
 8002c72:	4293      	cmp	r3, r2
 8002c74:	d064      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	4a5e      	ldr	r2, [pc, #376]	@ (8002df4 <HAL_ADC_ConfigChannel+0x484>)
 8002c7c:	4293      	cmp	r3, r2
 8002c7e:	d05f      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4a5c      	ldr	r2, [pc, #368]	@ (8002df8 <HAL_ADC_ConfigChannel+0x488>)
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d05a      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	4a5b      	ldr	r2, [pc, #364]	@ (8002dfc <HAL_ADC_ConfigChannel+0x48c>)
 8002c90:	4293      	cmp	r3, r2
 8002c92:	d055      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002c94:	f44f 612e 	mov.w	r1, #2784	@ 0xae0
 8002c98:	4859      	ldr	r0, [pc, #356]	@ (8002e00 <HAL_ADC_ConfigChannel+0x490>)
 8002c9a:	f7fe fb0d 	bl	80012b8 <assert_failed>
 8002c9e:	e04f      	b.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
  }
  else
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, pConfig->Channel));
 8002ca0:	683b      	ldr	r3, [r7, #0]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	4a57      	ldr	r2, [pc, #348]	@ (8002e04 <HAL_ADC_ConfigChannel+0x494>)
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	d04a      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4a56      	ldr	r2, [pc, #344]	@ (8002e08 <HAL_ADC_ConfigChannel+0x498>)
 8002cb0:	4293      	cmp	r3, r2
 8002cb2:	d045      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002cb4:	683b      	ldr	r3, [r7, #0]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	4a54      	ldr	r2, [pc, #336]	@ (8002e0c <HAL_ADC_ConfigChannel+0x49c>)
 8002cba:	4293      	cmp	r3, r2
 8002cbc:	d040      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	4a53      	ldr	r2, [pc, #332]	@ (8002e10 <HAL_ADC_ConfigChannel+0x4a0>)
 8002cc4:	4293      	cmp	r3, r2
 8002cc6:	d03b      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002cc8:	683b      	ldr	r3, [r7, #0]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	4a51      	ldr	r2, [pc, #324]	@ (8002e14 <HAL_ADC_ConfigChannel+0x4a4>)
 8002cce:	4293      	cmp	r3, r2
 8002cd0:	d036      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002cd2:	683b      	ldr	r3, [r7, #0]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a50      	ldr	r2, [pc, #320]	@ (8002e18 <HAL_ADC_ConfigChannel+0x4a8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d031      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002cdc:	683b      	ldr	r3, [r7, #0]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	4a4e      	ldr	r2, [pc, #312]	@ (8002e1c <HAL_ADC_ConfigChannel+0x4ac>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d02c      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4a4d      	ldr	r2, [pc, #308]	@ (8002e20 <HAL_ADC_ConfigChannel+0x4b0>)
 8002cec:	4293      	cmp	r3, r2
 8002cee:	d027      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	4a4b      	ldr	r2, [pc, #300]	@ (8002e24 <HAL_ADC_ConfigChannel+0x4b4>)
 8002cf6:	4293      	cmp	r3, r2
 8002cf8:	d022      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002cfa:	683b      	ldr	r3, [r7, #0]
 8002cfc:	681b      	ldr	r3, [r3, #0]
 8002cfe:	4a4a      	ldr	r2, [pc, #296]	@ (8002e28 <HAL_ADC_ConfigChannel+0x4b8>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d01d      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002d04:	683b      	ldr	r3, [r7, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	4a48      	ldr	r2, [pc, #288]	@ (8002e2c <HAL_ADC_ConfigChannel+0x4bc>)
 8002d0a:	4293      	cmp	r3, r2
 8002d0c:	d018      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002d0e:	683b      	ldr	r3, [r7, #0]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	4a47      	ldr	r2, [pc, #284]	@ (8002e30 <HAL_ADC_ConfigChannel+0x4c0>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d013      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	4a33      	ldr	r2, [pc, #204]	@ (8002dec <HAL_ADC_ConfigChannel+0x47c>)
 8002d1e:	4293      	cmp	r3, r2
 8002d20:	d109      	bne.n	8002d36 <HAL_ADC_ConfigChannel+0x3c6>
 8002d22:	683b      	ldr	r3, [r7, #0]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a43      	ldr	r2, [pc, #268]	@ (8002e34 <HAL_ADC_ConfigChannel+0x4c4>)
 8002d28:	4293      	cmp	r3, r2
 8002d2a:	d009      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	4a2f      	ldr	r2, [pc, #188]	@ (8002df0 <HAL_ADC_ConfigChannel+0x480>)
 8002d32:	4293      	cmp	r3, r2
 8002d34:	d004      	beq.n	8002d40 <HAL_ADC_ConfigChannel+0x3d0>
 8002d36:	f640 21e4 	movw	r1, #2788	@ 0xae4
 8002d3a:	4831      	ldr	r0, [pc, #196]	@ (8002e00 <HAL_ADC_ConfigChannel+0x490>)
 8002d3c:	f7fe fabc 	bl	80012b8 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 8002d46:	2b01      	cmp	r3, #1
 8002d48:	d102      	bne.n	8002d50 <HAL_ADC_ConfigChannel+0x3e0>
 8002d4a:	2302      	movs	r3, #2
 8002d4c:	f000 bc18 	b.w	8003580 <HAL_ADC_ConfigChannel+0xc10>
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	681b      	ldr	r3, [r3, #0]
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe ffd6 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 8002d62:	4603      	mov	r3, r0
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	f040 83fc 	bne.w	8003562 <HAL_ADC_ConfigChannel+0xbf2>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6818      	ldr	r0, [r3, #0]
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	6859      	ldr	r1, [r3, #4]
 8002d72:	683b      	ldr	r3, [r7, #0]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	461a      	mov	r2, r3
 8002d78:	f7fe febd 	bl	8001af6 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	4618      	mov	r0, r3
 8002d82:	f7fe ffc4 	bl	8001d0e <LL_ADC_REG_IsConversionOngoing>
 8002d86:	f8c7 00d0 	str.w	r0, [r7, #208]	@ 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f7fe ffd0 	bl	8001d34 <LL_ADC_INJ_IsConversionOngoing>
 8002d94:	f8c7 00cc 	str.w	r0, [r7, #204]	@ 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002d98:	f8d7 30d0 	ldr.w	r3, [r7, #208]	@ 0xd0
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	f040 8228 	bne.w	80031f2 <HAL_ADC_ConfigChannel+0x882>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002da2:	f8d7 30cc 	ldr.w	r3, [r7, #204]	@ 0xcc
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	f040 8223 	bne.w	80031f2 <HAL_ADC_ConfigChannel+0x882>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (pConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	689b      	ldr	r3, [r3, #8]
 8002db0:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8002db4:	d140      	bne.n	8002e38 <HAL_ADC_ConfigChannel+0x4c8>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	6818      	ldr	r0, [r3, #0]
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	2200      	movs	r2, #0
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f7fe fed7 	bl	8001b74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f04f 4100 	mov.w	r1, #2147483648	@ 0x80000000
 8002dce:	4618      	mov	r0, r3
 8002dd0:	f7fe fe6b 	bl	8001aaa <LL_ADC_SetSamplingTimeCommonConfig>
 8002dd4:	e03f      	b.n	8002e56 <HAL_ADC_ConfigChannel+0x4e6>
 8002dd6:	bf00      	nop
 8002dd8:	3ef08000 	.word	0x3ef08000
 8002ddc:	b6902000 	.word	0xb6902000
 8002de0:	c3210000 	.word	0xc3210000
 8002de4:	c7520000 	.word	0xc7520000
 8002de8:	cb840000 	.word	0xcb840000
 8002dec:	50000100 	.word	0x50000100
 8002df0:	36902000 	.word	0x36902000
 8002df4:	c3290000 	.word	0xc3290000
 8002df8:	47520000 	.word	0x47520000
 8002dfc:	cb8c0000 	.word	0xcb8c0000
 8002e00:	0800c188 	.word	0x0800c188
 8002e04:	04300002 	.word	0x04300002
 8002e08:	08600004 	.word	0x08600004
 8002e0c:	0c900008 	.word	0x0c900008
 8002e10:	10c00010 	.word	0x10c00010
 8002e14:	14f00020 	.word	0x14f00020
 8002e18:	19200040 	.word	0x19200040
 8002e1c:	1d500080 	.word	0x1d500080
 8002e20:	21800100 	.word	0x21800100
 8002e24:	25b00200 	.word	0x25b00200
 8002e28:	2a000400 	.word	0x2a000400
 8002e2c:	2e300800 	.word	0x2e300800
 8002e30:	3ac04000 	.word	0x3ac04000
 8002e34:	32601000 	.word	0x32601000
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	6818      	ldr	r0, [r3, #0]
 8002e3c:	683b      	ldr	r3, [r7, #0]
 8002e3e:	6819      	ldr	r1, [r3, #0]
 8002e40:	683b      	ldr	r3, [r7, #0]
 8002e42:	689b      	ldr	r3, [r3, #8]
 8002e44:	461a      	mov	r2, r3
 8002e46:	f7fe fe95 	bl	8001b74 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	681b      	ldr	r3, [r3, #0]
 8002e4e:	2100      	movs	r1, #0
 8002e50:	4618      	mov	r0, r3
 8002e52:	f7fe fe2a 	bl	8001aaa <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)pConfig->Offset);
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	695a      	ldr	r2, [r3, #20]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	08db      	lsrs	r3, r3, #3
 8002e62:	f003 0303 	and.w	r3, r3, #3
 8002e66:	005b      	lsls	r3, r3, #1
 8002e68:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6c:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8

      if (pConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002e70:	683b      	ldr	r3, [r7, #0]
 8002e72:	691b      	ldr	r3, [r3, #16]
 8002e74:	2b04      	cmp	r3, #4
 8002e76:	d03d      	beq.n	8002ef4 <HAL_ADC_ConfigChannel+0x584>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, pConfig->OffsetNumber, pConfig->Channel, tmpOffsetShifted);
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6818      	ldr	r0, [r3, #0]
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	6919      	ldr	r1, [r3, #16]
 8002e80:	683b      	ldr	r3, [r7, #0]
 8002e82:	681a      	ldr	r2, [r3, #0]
 8002e84:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8002e88:	f7fe fd84 	bl	8001994 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(pConfig->OffsetSign));
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	699b      	ldr	r3, [r3, #24]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d009      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x538>
 8002e94:	683b      	ldr	r3, [r7, #0]
 8002e96:	699b      	ldr	r3, [r3, #24]
 8002e98:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002e9c:	d004      	beq.n	8002ea8 <HAL_ADC_ConfigChannel+0x538>
 8002e9e:	f640 311c 	movw	r1, #2844	@ 0xb1c
 8002ea2:	48b3      	ldr	r0, [pc, #716]	@ (8003170 <HAL_ADC_ConfigChannel+0x800>)
 8002ea4:	f7fe fa08 	bl	80012b8 <assert_failed>
        assert_param(IS_FUNCTIONAL_STATE(pConfig->OffsetSaturation));
 8002ea8:	683b      	ldr	r3, [r7, #0]
 8002eaa:	7f1b      	ldrb	r3, [r3, #28]
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d008      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x552>
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	7f1b      	ldrb	r3, [r3, #28]
 8002eb4:	2b01      	cmp	r3, #1
 8002eb6:	d004      	beq.n	8002ec2 <HAL_ADC_ConfigChannel+0x552>
 8002eb8:	f640 311d 	movw	r1, #2845	@ 0xb1d
 8002ebc:	48ac      	ldr	r0, [pc, #688]	@ (8003170 <HAL_ADC_ConfigChannel+0x800>)
 8002ebe:	f7fe f9fb 	bl	80012b8 <assert_failed>
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, pConfig->OffsetNumber, pConfig->OffsetSign);
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	6818      	ldr	r0, [r3, #0]
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	6919      	ldr	r1, [r3, #16]
 8002eca:	683b      	ldr	r3, [r7, #0]
 8002ecc:	699b      	ldr	r3, [r3, #24]
 8002ece:	461a      	mov	r2, r3
 8002ed0:	f7fe fdb5 	bl	8001a3e <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	6818      	ldr	r0, [r3, #0]
 8002ed8:	683b      	ldr	r3, [r7, #0]
 8002eda:	6919      	ldr	r1, [r3, #16]
                                   (pConfig->OffsetSaturation == ENABLE) ?
 8002edc:	683b      	ldr	r3, [r7, #0]
 8002ede:	7f1b      	ldrb	r3, [r3, #28]
        LL_ADC_SetOffsetSaturation(hadc->Instance, pConfig->OffsetNumber,
 8002ee0:	2b01      	cmp	r3, #1
 8002ee2:	d102      	bne.n	8002eea <HAL_ADC_ConfigChannel+0x57a>
 8002ee4:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 8002ee8:	e000      	b.n	8002eec <HAL_ADC_ConfigChannel+0x57c>
 8002eea:	2300      	movs	r3, #0
 8002eec:	461a      	mov	r2, r3
 8002eee:	f7fe fdc1 	bl	8001a74 <LL_ADC_SetOffsetSaturation>
 8002ef2:	e17e      	b.n	80031f2 <HAL_ADC_ConfigChannel+0x882>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	2100      	movs	r1, #0
 8002efa:	4618      	mov	r0, r3
 8002efc:	f7fe fd6e 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8002f00:	4603      	mov	r3, r0
 8002f02:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d10a      	bne.n	8002f20 <HAL_ADC_ConfigChannel+0x5b0>
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	2100      	movs	r1, #0
 8002f10:	4618      	mov	r0, r3
 8002f12:	f7fe fd63 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8002f16:	4603      	mov	r3, r0
 8002f18:	0e9b      	lsrs	r3, r3, #26
 8002f1a:	f003 021f 	and.w	r2, r3, #31
 8002f1e:	e01e      	b.n	8002f5e <HAL_ADC_ConfigChannel+0x5ee>
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	2100      	movs	r1, #0
 8002f26:	4618      	mov	r0, r3
 8002f28:	f7fe fd58 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	f8c7 30bc 	str.w	r3, [r7, #188]	@ 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f32:	f8d7 30bc 	ldr.w	r3, [r7, #188]	@ 0xbc
 8002f36:	fa93 f3a3 	rbit	r3, r3
 8002f3a:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8002f3e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8002f42:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002f46:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d101      	bne.n	8002f52 <HAL_ADC_ConfigChannel+0x5e2>
  {
    return 32U;
 8002f4e:	2320      	movs	r3, #32
 8002f50:	e004      	b.n	8002f5c <HAL_ADC_ConfigChannel+0x5ec>
  }
  return __builtin_clz(value);
 8002f52:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002f56:	fab3 f383 	clz	r3, r3
 8002f5a:	b2db      	uxtb	r3, r3
 8002f5c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d105      	bne.n	8002f76 <HAL_ADC_ConfigChannel+0x606>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	0e9b      	lsrs	r3, r3, #26
 8002f70:	f003 031f 	and.w	r3, r3, #31
 8002f74:	e018      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x638>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002f7e:	f8d7 30b0 	ldr.w	r3, [r7, #176]	@ 0xb0
 8002f82:	fa93 f3a3 	rbit	r3, r3
 8002f86:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  return result;
 8002f8a:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8002f8e:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  if (value == 0U)
 8002f92:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d101      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x62e>
    return 32U;
 8002f9a:	2320      	movs	r3, #32
 8002f9c:	e004      	b.n	8002fa8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8002f9e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8002fa2:	fab3 f383 	clz	r3, r3
 8002fa6:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002fa8:	429a      	cmp	r2, r3
 8002faa:	d106      	bne.n	8002fba <HAL_ADC_ConfigChannel+0x64a>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	2100      	movs	r1, #0
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7fe fd27 	bl	8001a08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	2101      	movs	r1, #1
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fe fd0b 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8002fc6:	4603      	mov	r3, r0
 8002fc8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d10a      	bne.n	8002fe6 <HAL_ADC_ConfigChannel+0x676>
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	2101      	movs	r1, #1
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	f7fe fd00 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8002fdc:	4603      	mov	r3, r0
 8002fde:	0e9b      	lsrs	r3, r3, #26
 8002fe0:	f003 021f 	and.w	r2, r3, #31
 8002fe4:	e01e      	b.n	8003024 <HAL_ADC_ConfigChannel+0x6b4>
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	2101      	movs	r1, #1
 8002fec:	4618      	mov	r0, r3
 8002fee:	f7fe fcf5 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8002ff2:	4603      	mov	r3, r0
 8002ff4:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002ff8:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 8002ffc:	fa93 f3a3 	rbit	r3, r3
 8003000:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
  return result;
 8003004:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8003008:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
  if (value == 0U)
 800300c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8003010:	2b00      	cmp	r3, #0
 8003012:	d101      	bne.n	8003018 <HAL_ADC_ConfigChannel+0x6a8>
    return 32U;
 8003014:	2320      	movs	r3, #32
 8003016:	e004      	b.n	8003022 <HAL_ADC_ConfigChannel+0x6b2>
  return __builtin_clz(value);
 8003018:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 800301c:	fab3 f383 	clz	r3, r3
 8003020:	b2db      	uxtb	r3, r3
 8003022:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 8003024:	683b      	ldr	r3, [r7, #0]
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800302c:	2b00      	cmp	r3, #0
 800302e:	d105      	bne.n	800303c <HAL_ADC_ConfigChannel+0x6cc>
 8003030:	683b      	ldr	r3, [r7, #0]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	0e9b      	lsrs	r3, r3, #26
 8003036:	f003 031f 	and.w	r3, r3, #31
 800303a:	e018      	b.n	800306e <HAL_ADC_ConfigChannel+0x6fe>
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003044:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8003048:	fa93 f3a3 	rbit	r3, r3
 800304c:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
  return result;
 8003050:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8003054:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
  if (value == 0U)
 8003058:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 800305c:	2b00      	cmp	r3, #0
 800305e:	d101      	bne.n	8003064 <HAL_ADC_ConfigChannel+0x6f4>
    return 32U;
 8003060:	2320      	movs	r3, #32
 8003062:	e004      	b.n	800306e <HAL_ADC_ConfigChannel+0x6fe>
  return __builtin_clz(value);
 8003064:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8003068:	fab3 f383 	clz	r3, r3
 800306c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800306e:	429a      	cmp	r2, r3
 8003070:	d106      	bne.n	8003080 <HAL_ADC_ConfigChannel+0x710>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	2200      	movs	r2, #0
 8003078:	2101      	movs	r1, #1
 800307a:	4618      	mov	r0, r3
 800307c:	f7fe fcc4 	bl	8001a08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2102      	movs	r1, #2
 8003086:	4618      	mov	r0, r3
 8003088:	f7fe fca8 	bl	80019dc <LL_ADC_GetOffsetChannel>
 800308c:	4603      	mov	r3, r0
 800308e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10a      	bne.n	80030ac <HAL_ADC_ConfigChannel+0x73c>
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	2102      	movs	r1, #2
 800309c:	4618      	mov	r0, r3
 800309e:	f7fe fc9d 	bl	80019dc <LL_ADC_GetOffsetChannel>
 80030a2:	4603      	mov	r3, r0
 80030a4:	0e9b      	lsrs	r3, r3, #26
 80030a6:	f003 021f 	and.w	r2, r3, #31
 80030aa:	e01e      	b.n	80030ea <HAL_ADC_ConfigChannel+0x77a>
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	681b      	ldr	r3, [r3, #0]
 80030b0:	2102      	movs	r1, #2
 80030b2:	4618      	mov	r0, r3
 80030b4:	f7fe fc92 	bl	80019dc <LL_ADC_GetOffsetChannel>
 80030b8:	4603      	mov	r3, r0
 80030ba:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80030be:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80030c2:	fa93 f3a3 	rbit	r3, r3
 80030c6:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
  return result;
 80030ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80030ce:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
  if (value == 0U)
 80030d2:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030d6:	2b00      	cmp	r3, #0
 80030d8:	d101      	bne.n	80030de <HAL_ADC_ConfigChannel+0x76e>
    return 32U;
 80030da:	2320      	movs	r3, #32
 80030dc:	e004      	b.n	80030e8 <HAL_ADC_ConfigChannel+0x778>
  return __builtin_clz(value);
 80030de:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80030e2:	fab3 f383 	clz	r3, r3
 80030e6:	b2db      	uxtb	r3, r3
 80030e8:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d105      	bne.n	8003102 <HAL_ADC_ConfigChannel+0x792>
 80030f6:	683b      	ldr	r3, [r7, #0]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	0e9b      	lsrs	r3, r3, #26
 80030fc:	f003 031f 	and.w	r3, r3, #31
 8003100:	e016      	b.n	8003130 <HAL_ADC_ConfigChannel+0x7c0>
 8003102:	683b      	ldr	r3, [r7, #0]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800310a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800310e:	fa93 f3a3 	rbit	r3, r3
 8003112:	67fb      	str	r3, [r7, #124]	@ 0x7c
  return result;
 8003114:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8003116:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
  if (value == 0U)
 800311a:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <HAL_ADC_ConfigChannel+0x7b6>
    return 32U;
 8003122:	2320      	movs	r3, #32
 8003124:	e004      	b.n	8003130 <HAL_ADC_ConfigChannel+0x7c0>
  return __builtin_clz(value);
 8003126:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800312a:	fab3 f383 	clz	r3, r3
 800312e:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003130:	429a      	cmp	r2, r3
 8003132:	d106      	bne.n	8003142 <HAL_ADC_ConfigChannel+0x7d2>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	2200      	movs	r2, #0
 800313a:	2102      	movs	r1, #2
 800313c:	4618      	mov	r0, r3
 800313e:	f7fe fc63 	bl	8001a08 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	681b      	ldr	r3, [r3, #0]
 8003146:	2103      	movs	r1, #3
 8003148:	4618      	mov	r0, r3
 800314a:	f7fe fc47 	bl	80019dc <LL_ADC_GetOffsetChannel>
 800314e:	4603      	mov	r3, r0
 8003150:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003154:	2b00      	cmp	r3, #0
 8003156:	d10d      	bne.n	8003174 <HAL_ADC_ConfigChannel+0x804>
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2103      	movs	r1, #3
 800315e:	4618      	mov	r0, r3
 8003160:	f7fe fc3c 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8003164:	4603      	mov	r3, r0
 8003166:	0e9b      	lsrs	r3, r3, #26
 8003168:	f003 021f 	and.w	r2, r3, #31
 800316c:	e01a      	b.n	80031a4 <HAL_ADC_ConfigChannel+0x834>
 800316e:	bf00      	nop
 8003170:	0800c188 	.word	0x0800c188
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	681b      	ldr	r3, [r3, #0]
 8003178:	2103      	movs	r1, #3
 800317a:	4618      	mov	r0, r3
 800317c:	f7fe fc2e 	bl	80019dc <LL_ADC_GetOffsetChannel>
 8003180:	4603      	mov	r3, r0
 8003182:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003186:	fa93 f3a3 	rbit	r3, r3
 800318a:	673b      	str	r3, [r7, #112]	@ 0x70
  return result;
 800318c:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800318e:	67bb      	str	r3, [r7, #120]	@ 0x78
  if (value == 0U)
 8003190:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8003192:	2b00      	cmp	r3, #0
 8003194:	d101      	bne.n	800319a <HAL_ADC_ConfigChannel+0x82a>
    return 32U;
 8003196:	2320      	movs	r3, #32
 8003198:	e003      	b.n	80031a2 <HAL_ADC_ConfigChannel+0x832>
  return __builtin_clz(value);
 800319a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800319c:	fab3 f383 	clz	r3, r3
 80031a0:	b2db      	uxtb	r3, r3
 80031a2:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(pConfig->Channel))
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80031ac:	2b00      	cmp	r3, #0
 80031ae:	d105      	bne.n	80031bc <HAL_ADC_ConfigChannel+0x84c>
 80031b0:	683b      	ldr	r3, [r7, #0]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	0e9b      	lsrs	r3, r3, #26
 80031b6:	f003 031f 	and.w	r3, r3, #31
 80031ba:	e011      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x870>
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80031c2:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80031c4:	fa93 f3a3 	rbit	r3, r3
 80031c8:	667b      	str	r3, [r7, #100]	@ 0x64
  return result;
 80031ca:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80031cc:	66fb      	str	r3, [r7, #108]	@ 0x6c
  if (value == 0U)
 80031ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031d0:	2b00      	cmp	r3, #0
 80031d2:	d101      	bne.n	80031d8 <HAL_ADC_ConfigChannel+0x868>
    return 32U;
 80031d4:	2320      	movs	r3, #32
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_ConfigChannel+0x870>
  return __builtin_clz(value);
 80031d8:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80031da:	fab3 f383 	clz	r3, r3
 80031de:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80031e0:	429a      	cmp	r2, r3
 80031e2:	d106      	bne.n	80031f2 <HAL_ADC_ConfigChannel+0x882>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	2200      	movs	r2, #0
 80031ea:	2103      	movs	r1, #3
 80031ec:	4618      	mov	r0, r3
 80031ee:	f7fe fc0b 	bl	8001a08 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	4618      	mov	r0, r3
 80031f8:	f7fe fd76 	bl	8001ce8 <LL_ADC_IsEnabled>
 80031fc:	4603      	mov	r3, r0
 80031fe:	2b00      	cmp	r3, #0
 8003200:	f040 8140 	bne.w	8003484 <HAL_ADC_ConfigChannel+0xb14>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, pConfig->Channel, pConfig->SingleDiff);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	6818      	ldr	r0, [r3, #0]
 8003208:	683b      	ldr	r3, [r7, #0]
 800320a:	6819      	ldr	r1, [r3, #0]
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	68db      	ldr	r3, [r3, #12]
 8003210:	461a      	mov	r2, r3
 8003212:	f7fe fcdb 	bl	8001bcc <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (pConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003216:	683b      	ldr	r3, [r7, #0]
 8003218:	68db      	ldr	r3, [r3, #12]
 800321a:	4a8f      	ldr	r2, [pc, #572]	@ (8003458 <HAL_ADC_ConfigChannel+0xae8>)
 800321c:	4293      	cmp	r3, r2
 800321e:	f040 8131 	bne.w	8003484 <HAL_ADC_ConfigChannel+0xb14>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800322e:	2b00      	cmp	r3, #0
 8003230:	d10b      	bne.n	800324a <HAL_ADC_ConfigChannel+0x8da>
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	0e9b      	lsrs	r3, r3, #26
 8003238:	3301      	adds	r3, #1
 800323a:	f003 031f 	and.w	r3, r3, #31
 800323e:	2b09      	cmp	r3, #9
 8003240:	bf94      	ite	ls
 8003242:	2301      	movls	r3, #1
 8003244:	2300      	movhi	r3, #0
 8003246:	b2db      	uxtb	r3, r3
 8003248:	e019      	b.n	800327e <HAL_ADC_ConfigChannel+0x90e>
 800324a:	683b      	ldr	r3, [r7, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003250:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8003252:	fa93 f3a3 	rbit	r3, r3
 8003256:	65bb      	str	r3, [r7, #88]	@ 0x58
  return result;
 8003258:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800325a:	663b      	str	r3, [r7, #96]	@ 0x60
  if (value == 0U)
 800325c:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 800325e:	2b00      	cmp	r3, #0
 8003260:	d101      	bne.n	8003266 <HAL_ADC_ConfigChannel+0x8f6>
    return 32U;
 8003262:	2320      	movs	r3, #32
 8003264:	e003      	b.n	800326e <HAL_ADC_ConfigChannel+0x8fe>
  return __builtin_clz(value);
 8003266:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8003268:	fab3 f383 	clz	r3, r3
 800326c:	b2db      	uxtb	r3, r3
 800326e:	3301      	adds	r3, #1
 8003270:	f003 031f 	and.w	r3, r3, #31
 8003274:	2b09      	cmp	r3, #9
 8003276:	bf94      	ite	ls
 8003278:	2301      	movls	r3, #1
 800327a:	2300      	movhi	r3, #0
 800327c:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800327e:	2b00      	cmp	r3, #0
 8003280:	d079      	beq.n	8003376 <HAL_ADC_ConfigChannel+0xa06>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	681b      	ldr	r3, [r3, #0]
 8003286:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800328a:	2b00      	cmp	r3, #0
 800328c:	d107      	bne.n	800329e <HAL_ADC_ConfigChannel+0x92e>
 800328e:	683b      	ldr	r3, [r7, #0]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	0e9b      	lsrs	r3, r3, #26
 8003294:	3301      	adds	r3, #1
 8003296:	069b      	lsls	r3, r3, #26
 8003298:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 800329c:	e015      	b.n	80032ca <HAL_ADC_ConfigChannel+0x95a>
 800329e:	683b      	ldr	r3, [r7, #0]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032a4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80032a6:	fa93 f3a3 	rbit	r3, r3
 80032aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  return result;
 80032ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80032ae:	657b      	str	r3, [r7, #84]	@ 0x54
  if (value == 0U)
 80032b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032b2:	2b00      	cmp	r3, #0
 80032b4:	d101      	bne.n	80032ba <HAL_ADC_ConfigChannel+0x94a>
    return 32U;
 80032b6:	2320      	movs	r3, #32
 80032b8:	e003      	b.n	80032c2 <HAL_ADC_ConfigChannel+0x952>
  return __builtin_clz(value);
 80032ba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80032bc:	fab3 f383 	clz	r3, r3
 80032c0:	b2db      	uxtb	r3, r3
 80032c2:	3301      	adds	r3, #1
 80032c4:	069b      	lsls	r3, r3, #26
 80032c6:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80032ca:	683b      	ldr	r3, [r7, #0]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d109      	bne.n	80032ea <HAL_ADC_ConfigChannel+0x97a>
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	0e9b      	lsrs	r3, r3, #26
 80032dc:	3301      	adds	r3, #1
 80032de:	f003 031f 	and.w	r3, r3, #31
 80032e2:	2101      	movs	r1, #1
 80032e4:	fa01 f303 	lsl.w	r3, r1, r3
 80032e8:	e017      	b.n	800331a <HAL_ADC_ConfigChannel+0x9aa>
 80032ea:	683b      	ldr	r3, [r7, #0]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032f0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032f2:	fa93 f3a3 	rbit	r3, r3
 80032f6:	643b      	str	r3, [r7, #64]	@ 0x40
  return result;
 80032f8:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80032fa:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (value == 0U)
 80032fc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d101      	bne.n	8003306 <HAL_ADC_ConfigChannel+0x996>
    return 32U;
 8003302:	2320      	movs	r3, #32
 8003304:	e003      	b.n	800330e <HAL_ADC_ConfigChannel+0x99e>
  return __builtin_clz(value);
 8003306:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8003308:	fab3 f383 	clz	r3, r3
 800330c:	b2db      	uxtb	r3, r3
 800330e:	3301      	adds	r3, #1
 8003310:	f003 031f 	and.w	r3, r3, #31
 8003314:	2101      	movs	r1, #1
 8003316:	fa01 f303 	lsl.w	r3, r1, r3
 800331a:	ea42 0103 	orr.w	r1, r2, r3
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003326:	2b00      	cmp	r3, #0
 8003328:	d10a      	bne.n	8003340 <HAL_ADC_ConfigChannel+0x9d0>
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	0e9b      	lsrs	r3, r3, #26
 8003330:	3301      	adds	r3, #1
 8003332:	f003 021f 	and.w	r2, r3, #31
 8003336:	4613      	mov	r3, r2
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	4413      	add	r3, r2
 800333c:	051b      	lsls	r3, r3, #20
 800333e:	e018      	b.n	8003372 <HAL_ADC_ConfigChannel+0xa02>
 8003340:	683b      	ldr	r3, [r7, #0]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003346:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003348:	fa93 f3a3 	rbit	r3, r3
 800334c:	637b      	str	r3, [r7, #52]	@ 0x34
  return result;
 800334e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8003350:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (value == 0U)
 8003352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8003354:	2b00      	cmp	r3, #0
 8003356:	d101      	bne.n	800335c <HAL_ADC_ConfigChannel+0x9ec>
    return 32U;
 8003358:	2320      	movs	r3, #32
 800335a:	e003      	b.n	8003364 <HAL_ADC_ConfigChannel+0x9f4>
  return __builtin_clz(value);
 800335c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800335e:	fab3 f383 	clz	r3, r3
 8003362:	b2db      	uxtb	r3, r3
 8003364:	3301      	adds	r3, #1
 8003366:	f003 021f 	and.w	r2, r3, #31
 800336a:	4613      	mov	r3, r2
 800336c:	005b      	lsls	r3, r3, #1
 800336e:	4413      	add	r3, r2
 8003370:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003372:	430b      	orrs	r3, r1
 8003374:	e081      	b.n	800347a <HAL_ADC_ConfigChannel+0xb0a>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL(
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800337e:	2b00      	cmp	r3, #0
 8003380:	d107      	bne.n	8003392 <HAL_ADC_ConfigChannel+0xa22>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	0e9b      	lsrs	r3, r3, #26
 8003388:	3301      	adds	r3, #1
 800338a:	069b      	lsls	r3, r3, #26
 800338c:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 8003390:	e015      	b.n	80033be <HAL_ADC_ConfigChannel+0xa4e>
 8003392:	683b      	ldr	r3, [r7, #0]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003398:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800339a:	fa93 f3a3 	rbit	r3, r3
 800339e:	62bb      	str	r3, [r7, #40]	@ 0x28
  return result;
 80033a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80033a2:	633b      	str	r3, [r7, #48]	@ 0x30
  if (value == 0U)
 80033a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d101      	bne.n	80033ae <HAL_ADC_ConfigChannel+0xa3e>
    return 32U;
 80033aa:	2320      	movs	r3, #32
 80033ac:	e003      	b.n	80033b6 <HAL_ADC_ConfigChannel+0xa46>
  return __builtin_clz(value);
 80033ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80033b0:	fab3 f383 	clz	r3, r3
 80033b4:	b2db      	uxtb	r3, r3
 80033b6:	3301      	adds	r3, #1
 80033b8:	069b      	lsls	r3, r3, #26
 80033ba:	f003 42f8 	and.w	r2, r3, #2080374784	@ 0x7c000000
 80033be:	683b      	ldr	r3, [r7, #0]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d109      	bne.n	80033de <HAL_ADC_ConfigChannel+0xa6e>
 80033ca:	683b      	ldr	r3, [r7, #0]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	0e9b      	lsrs	r3, r3, #26
 80033d0:	3301      	adds	r3, #1
 80033d2:	f003 031f 	and.w	r3, r3, #31
 80033d6:	2101      	movs	r1, #1
 80033d8:	fa01 f303 	lsl.w	r3, r1, r3
 80033dc:	e017      	b.n	800340e <HAL_ADC_ConfigChannel+0xa9e>
 80033de:	683b      	ldr	r3, [r7, #0]
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80033e4:	6a3b      	ldr	r3, [r7, #32]
 80033e6:	fa93 f3a3 	rbit	r3, r3
 80033ea:	61fb      	str	r3, [r7, #28]
  return result;
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	627b      	str	r3, [r7, #36]	@ 0x24
  if (value == 0U)
 80033f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d101      	bne.n	80033fa <HAL_ADC_ConfigChannel+0xa8a>
    return 32U;
 80033f6:	2320      	movs	r3, #32
 80033f8:	e003      	b.n	8003402 <HAL_ADC_ConfigChannel+0xa92>
  return __builtin_clz(value);
 80033fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033fc:	fab3 f383 	clz	r3, r3
 8003400:	b2db      	uxtb	r3, r3
 8003402:	3301      	adds	r3, #1
 8003404:	f003 031f 	and.w	r3, r3, #31
 8003408:	2101      	movs	r1, #1
 800340a:	fa01 f303 	lsl.w	r3, r1, r3
 800340e:	ea42 0103 	orr.w	r1, r2, r3
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800341a:	2b00      	cmp	r3, #0
 800341c:	d10d      	bne.n	800343a <HAL_ADC_ConfigChannel+0xaca>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	0e9b      	lsrs	r3, r3, #26
 8003424:	3301      	adds	r3, #1
 8003426:	f003 021f 	and.w	r2, r3, #31
 800342a:	4613      	mov	r3, r2
 800342c:	005b      	lsls	r3, r3, #1
 800342e:	4413      	add	r3, r2
 8003430:	3b1e      	subs	r3, #30
 8003432:	051b      	lsls	r3, r3, #20
 8003434:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8003438:	e01e      	b.n	8003478 <HAL_ADC_ConfigChannel+0xb08>
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003440:	697b      	ldr	r3, [r7, #20]
 8003442:	fa93 f3a3 	rbit	r3, r3
 8003446:	613b      	str	r3, [r7, #16]
  return result;
 8003448:	693b      	ldr	r3, [r7, #16]
 800344a:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800344c:	69bb      	ldr	r3, [r7, #24]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d104      	bne.n	800345c <HAL_ADC_ConfigChannel+0xaec>
    return 32U;
 8003452:	2320      	movs	r3, #32
 8003454:	e006      	b.n	8003464 <HAL_ADC_ConfigChannel+0xaf4>
 8003456:	bf00      	nop
 8003458:	407f0000 	.word	0x407f0000
  return __builtin_clz(value);
 800345c:	69bb      	ldr	r3, [r7, #24]
 800345e:	fab3 f383 	clz	r3, r3
 8003462:	b2db      	uxtb	r3, r3
 8003464:	3301      	adds	r3, #1
 8003466:	f003 021f 	and.w	r2, r3, #31
 800346a:	4613      	mov	r3, r2
 800346c:	005b      	lsls	r3, r3, #1
 800346e:	4413      	add	r3, r2
 8003470:	3b1e      	subs	r3, #30
 8003472:	051b      	lsls	r3, r3, #20
 8003474:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003478:	430b      	orrs	r3, r1
                                                   (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)pConfig->Channel)
                                                    + 1UL) & 0x1FUL)),
                                      pConfig->SamplingTime);
 800347a:	683a      	ldr	r2, [r7, #0]
 800347c:	6892      	ldr	r2, [r2, #8]
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800347e:	4619      	mov	r1, r3
 8003480:	f7fe fb78 	bl	8001b74 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	681a      	ldr	r2, [r3, #0]
 8003488:	4b3f      	ldr	r3, [pc, #252]	@ (8003588 <HAL_ADC_ConfigChannel+0xc18>)
 800348a:	4013      	ands	r3, r2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d071      	beq.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003490:	483e      	ldr	r0, [pc, #248]	@ (800358c <HAL_ADC_ConfigChannel+0xc1c>)
 8003492:	f7fe fa63 	bl	800195c <LL_ADC_GetCommonPathInternalCh>
 8003496:	f8c7 00c4 	str.w	r0, [r7, #196]	@ 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 800349a:	683b      	ldr	r3, [r7, #0]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	4a3c      	ldr	r2, [pc, #240]	@ (8003590 <HAL_ADC_ConfigChannel+0xc20>)
 80034a0:	4293      	cmp	r3, r2
 80034a2:	d004      	beq.n	80034ae <HAL_ADC_ConfigChannel+0xb3e>
 80034a4:	683b      	ldr	r3, [r7, #0]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a3a      	ldr	r2, [pc, #232]	@ (8003594 <HAL_ADC_ConfigChannel+0xc24>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d127      	bne.n	80034fe <HAL_ADC_ConfigChannel+0xb8e>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80034ae:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034b2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80034b6:	2b00      	cmp	r3, #0
 80034b8:	d121      	bne.n	80034fe <HAL_ADC_ConfigChannel+0xb8e>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 80034c2:	d157      	bne.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80034c4:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 80034c8:	f443 0300 	orr.w	r3, r3, #8388608	@ 0x800000
 80034cc:	4619      	mov	r1, r3
 80034ce:	482f      	ldr	r0, [pc, #188]	@ (800358c <HAL_ADC_ConfigChannel+0xc1c>)
 80034d0:	f7fe fa31 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80034d4:	4b30      	ldr	r3, [pc, #192]	@ (8003598 <HAL_ADC_ConfigChannel+0xc28>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	099b      	lsrs	r3, r3, #6
 80034da:	4a30      	ldr	r2, [pc, #192]	@ (800359c <HAL_ADC_ConfigChannel+0xc2c>)
 80034dc:	fba2 2303 	umull	r2, r3, r2, r3
 80034e0:	099b      	lsrs	r3, r3, #6
 80034e2:	1c5a      	adds	r2, r3, #1
 80034e4:	4613      	mov	r3, r2
 80034e6:	005b      	lsls	r3, r3, #1
 80034e8:	4413      	add	r3, r2
 80034ea:	009b      	lsls	r3, r3, #2
 80034ec:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034ee:	e002      	b.n	80034f6 <HAL_ADC_ConfigChannel+0xb86>
          {
            wait_loop_index--;
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	3b01      	subs	r3, #1
 80034f4:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	2b00      	cmp	r3, #0
 80034fa:	d1f9      	bne.n	80034f0 <HAL_ADC_ConfigChannel+0xb80>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80034fc:	e03a      	b.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
          }
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	4a27      	ldr	r2, [pc, #156]	@ (80035a0 <HAL_ADC_ConfigChannel+0xc30>)
 8003504:	4293      	cmp	r3, r2
 8003506:	d113      	bne.n	8003530 <HAL_ADC_ConfigChannel+0xbc0>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003508:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800350c:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8003510:	2b00      	cmp	r3, #0
 8003512:	d10d      	bne.n	8003530 <HAL_ADC_ConfigChannel+0xbc0>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	4a22      	ldr	r2, [pc, #136]	@ (80035a4 <HAL_ADC_ConfigChannel+0xc34>)
 800351a:	4293      	cmp	r3, r2
 800351c:	d02a      	beq.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800351e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003522:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 8003526:	4619      	mov	r1, r3
 8003528:	4818      	ldr	r0, [pc, #96]	@ (800358c <HAL_ADC_ConfigChannel+0xc1c>)
 800352a:	f7fe fa04 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800352e:	e021      	b.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((pConfig->Channel == ADC_CHANNEL_VREFINT)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	4a1c      	ldr	r2, [pc, #112]	@ (80035a8 <HAL_ADC_ConfigChannel+0xc38>)
 8003536:	4293      	cmp	r3, r2
 8003538:	d11c      	bne.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 800353a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 800353e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003542:	2b00      	cmp	r3, #0
 8003544:	d116      	bne.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	4a16      	ldr	r2, [pc, #88]	@ (80035a4 <HAL_ADC_ConfigChannel+0xc34>)
 800354c:	4293      	cmp	r3, r2
 800354e:	d011      	beq.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003550:	f8d7 30c4 	ldr.w	r3, [r7, #196]	@ 0xc4
 8003554:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8003558:	4619      	mov	r1, r3
 800355a:	480c      	ldr	r0, [pc, #48]	@ (800358c <HAL_ADC_ConfigChannel+0xc1c>)
 800355c:	f7fe f9eb 	bl	8001936 <LL_ADC_SetCommonPathInternalCh>
 8003560:	e008      	b.n	8003574 <HAL_ADC_ConfigChannel+0xc04>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003566:	f043 0220 	orr.w	r2, r3, #32
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 800356e:	2301      	movs	r3, #1
 8003570:	f887 30d7 	strb.w	r3, [r7, #215]	@ 0xd7
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	2200      	movs	r2, #0
 8003578:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800357c:	f897 30d7 	ldrb.w	r3, [r7, #215]	@ 0xd7
}
 8003580:	4618      	mov	r0, r3
 8003582:	37dc      	adds	r7, #220	@ 0xdc
 8003584:	46bd      	mov	sp, r7
 8003586:	bd90      	pop	{r4, r7, pc}
 8003588:	80080000 	.word	0x80080000
 800358c:	50000300 	.word	0x50000300
 8003590:	c3210000 	.word	0xc3210000
 8003594:	90c00010 	.word	0x90c00010
 8003598:	20000000 	.word	0x20000000
 800359c:	053e2d63 	.word	0x053e2d63
 80035a0:	c7520000 	.word	0xc7520000
 80035a4:	50000100 	.word	0x50000100
 80035a8:	cb840000 	.word	0xcb840000

080035ac <LL_ADC_IsEnabled>:
{
 80035ac:	b480      	push	{r7}
 80035ae:	b083      	sub	sp, #12
 80035b0:	af00      	add	r7, sp, #0
 80035b2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	689b      	ldr	r3, [r3, #8]
 80035b8:	f003 0301 	and.w	r3, r3, #1
 80035bc:	2b01      	cmp	r3, #1
 80035be:	d101      	bne.n	80035c4 <LL_ADC_IsEnabled+0x18>
 80035c0:	2301      	movs	r3, #1
 80035c2:	e000      	b.n	80035c6 <LL_ADC_IsEnabled+0x1a>
 80035c4:	2300      	movs	r3, #0
}
 80035c6:	4618      	mov	r0, r3
 80035c8:	370c      	adds	r7, #12
 80035ca:	46bd      	mov	sp, r7
 80035cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d0:	4770      	bx	lr

080035d2 <LL_ADC_REG_IsConversionOngoing>:
{
 80035d2:	b480      	push	{r7}
 80035d4:	b083      	sub	sp, #12
 80035d6:	af00      	add	r7, sp, #0
 80035d8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	f003 0304 	and.w	r3, r3, #4
 80035e2:	2b04      	cmp	r3, #4
 80035e4:	d101      	bne.n	80035ea <LL_ADC_REG_IsConversionOngoing+0x18>
 80035e6:	2301      	movs	r3, #1
 80035e8:	e000      	b.n	80035ec <LL_ADC_REG_IsConversionOngoing+0x1a>
 80035ea:	2300      	movs	r3, #0
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	370c      	adds	r7, #12
 80035f0:	46bd      	mov	sp, r7
 80035f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f6:	4770      	bx	lr

080035f8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80035f8:	b480      	push	{r7}
 80035fa:	b083      	sub	sp, #12
 80035fc:	af00      	add	r7, sp, #0
 80035fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8003600:	bf00      	nop
 8003602:	370c      	adds	r7, #12
 8003604:	46bd      	mov	sp, r7
 8003606:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360a:	4770      	bx	lr

0800360c <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 800360c:	b480      	push	{r7}
 800360e:	b083      	sub	sp, #12
 8003610:	af00      	add	r7, sp, #0
 8003612:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8003614:	bf00      	nop
 8003616:	370c      	adds	r7, #12
 8003618:	46bd      	mov	sp, r7
 800361a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800361e:	4770      	bx	lr

08003620 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8003620:	b480      	push	{r7}
 8003622:	b083      	sub	sp, #12
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8003628:	bf00      	nop
 800362a:	370c      	adds	r7, #12
 800362c:	46bd      	mov	sp, r7
 800362e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003632:	4770      	bx	lr

08003634 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8003634:	b480      	push	{r7}
 8003636:	b083      	sub	sp, #12
 8003638:	af00      	add	r7, sp, #0
 800363a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 800363c:	bf00      	nop
 800363e:	370c      	adds	r7, #12
 8003640:	46bd      	mov	sp, r7
 8003642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003646:	4770      	bx	lr

08003648 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8003648:	b480      	push	{r7}
 800364a:	b083      	sub	sp, #12
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8003650:	bf00      	nop
 8003652:	370c      	adds	r7, #12
 8003654:	46bd      	mov	sp, r7
 8003656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800365a:	4770      	bx	lr

0800365c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param pMultimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, const ADC_MultiModeTypeDef *pMultimode)
{
 800365c:	b590      	push	{r4, r7, lr}
 800365e:	b0a1      	sub	sp, #132	@ 0x84
 8003660:	af00      	add	r7, sp, #0
 8003662:	6078      	str	r0, [r7, #4]
 8003664:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003666:	2300      	movs	r3, #0
 8003668:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
  ADC_Common_TypeDef *tmpADC_Common;
  ADC_HandleTypeDef tmp_hadc_slave;
  uint32_t tmp_hadc_slave_conversion_on_going;

  /* Check the parameters */
  assert_param(IS_ADC_MULTIMODE_MASTER_INSTANCE(hadc->Instance));
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8003674:	d004      	beq.n	8003680 <HAL_ADCEx_MultiModeConfigChannel+0x24>
 8003676:	f640 014c 	movw	r1, #2124	@ 0x84c
 800367a:	488b      	ldr	r0, [pc, #556]	@ (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 800367c:	f7fd fe1c 	bl	80012b8 <assert_failed>
  assert_param(IS_ADC_MULTIMODE(pMultimode->Mode));
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d020      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003688:	683b      	ldr	r3, [r7, #0]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	2b01      	cmp	r3, #1
 800368e:	d01c      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003690:	683b      	ldr	r3, [r7, #0]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b02      	cmp	r3, #2
 8003696:	d018      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 8003698:	683b      	ldr	r3, [r7, #0]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	2b03      	cmp	r3, #3
 800369e:	d014      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80036a0:	683b      	ldr	r3, [r7, #0]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	2b05      	cmp	r3, #5
 80036a6:	d010      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	2b06      	cmp	r3, #6
 80036ae:	d00c      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	2b07      	cmp	r3, #7
 80036b6:	d008      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80036b8:	683b      	ldr	r3, [r7, #0]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	2b09      	cmp	r3, #9
 80036be:	d004      	beq.n	80036ca <HAL_ADCEx_MultiModeConfigChannel+0x6e>
 80036c0:	f640 014d 	movw	r1, #2125	@ 0x84d
 80036c4:	4878      	ldr	r0, [pc, #480]	@ (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 80036c6:	f7fd fdf7 	bl	80012b8 <assert_failed>
  if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80036ca:	683b      	ldr	r3, [r7, #0]
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d052      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
  {
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(pMultimode->DMAAccessMode));
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	685b      	ldr	r3, [r3, #4]
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d00e      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80036da:	683b      	ldr	r3, [r7, #0]
 80036dc:	685b      	ldr	r3, [r3, #4]
 80036de:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80036e2:	d009      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	685b      	ldr	r3, [r3, #4]
 80036e8:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 80036ec:	d004      	beq.n	80036f8 <HAL_ADCEx_MultiModeConfigChannel+0x9c>
 80036ee:	f44f 6105 	mov.w	r1, #2128	@ 0x850
 80036f2:	486d      	ldr	r0, [pc, #436]	@ (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 80036f4:	f7fd fde0 	bl	80012b8 <assert_failed>
    assert_param(IS_ADC_SAMPLING_DELAY(pMultimode->TwoSamplingDelay));
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d03b      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003700:	683b      	ldr	r3, [r7, #0]
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003708:	d036      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003712:	d031      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800371c:	d02c      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800371e:	683b      	ldr	r3, [r7, #0]
 8003720:	689b      	ldr	r3, [r3, #8]
 8003722:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003726:	d027      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003728:	683b      	ldr	r3, [r7, #0]
 800372a:	689b      	ldr	r3, [r3, #8]
 800372c:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8003730:	d022      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800373a:	d01d      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800373c:	683b      	ldr	r3, [r7, #0]
 800373e:	689b      	ldr	r3, [r3, #8]
 8003740:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8003744:	d018      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003746:	683b      	ldr	r3, [r7, #0]
 8003748:	689b      	ldr	r3, [r3, #8]
 800374a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800374e:	d013      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	689b      	ldr	r3, [r3, #8]
 8003754:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 8003758:	d00e      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800375a:	683b      	ldr	r3, [r7, #0]
 800375c:	689b      	ldr	r3, [r3, #8]
 800375e:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8003762:	d009      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	689b      	ldr	r3, [r3, #8]
 8003768:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 800376c:	d004      	beq.n	8003778 <HAL_ADCEx_MultiModeConfigChannel+0x11c>
 800376e:	f640 0151 	movw	r1, #2129	@ 0x851
 8003772:	484d      	ldr	r0, [pc, #308]	@ (80038a8 <HAL_ADCEx_MultiModeConfigChannel+0x24c>)
 8003774:	f7fd fda0 	bl	80012b8 <assert_failed>
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	f893 3058 	ldrb.w	r3, [r3, #88]	@ 0x58
 800377e:	2b01      	cmp	r3, #1
 8003780:	d101      	bne.n	8003786 <HAL_ADCEx_MultiModeConfigChannel+0x12a>
 8003782:	2302      	movs	r3, #2
 8003784:	e08b      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x242>
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2201      	movs	r2, #1
 800378a:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmp_hadc_slave);
 800378e:	2300      	movs	r3, #0
 8003790:	667b      	str	r3, [r7, #100]	@ 0x64
  ADC_CLEAR_ERRORCODE(&tmp_hadc_slave);
 8003792:	2300      	movs	r3, #0
 8003794:	66bb      	str	r3, [r7, #104]	@ 0x68

  ADC_MULTI_SLAVE(hadc, &tmp_hadc_slave);
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	681b      	ldr	r3, [r3, #0]
 800379a:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 800379e:	d102      	bne.n	80037a6 <HAL_ADCEx_MultiModeConfigChannel+0x14a>
 80037a0:	4b42      	ldr	r3, [pc, #264]	@ (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	e001      	b.n	80037aa <HAL_ADCEx_MultiModeConfigChannel+0x14e>
 80037a6:	2300      	movs	r3, #0
 80037a8:	60bb      	str	r3, [r7, #8]

  if (tmp_hadc_slave.Instance == NULL)
 80037aa:	68bb      	ldr	r3, [r7, #8]
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d10b      	bne.n	80037c8 <HAL_ADCEx_MultiModeConfigChannel+0x16c>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80037b4:	f043 0220 	orr.w	r2, r3, #32
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2200      	movs	r2, #0
 80037c0:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

    return HAL_ERROR;
 80037c4:	2301      	movs	r3, #1
 80037c6:	e06a      	b.n	800389e <HAL_ADCEx_MultiModeConfigChannel+0x242>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmp_hadc_slave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmp_hadc_slave)->Instance);
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	4618      	mov	r0, r3
 80037cc:	f7ff ff01 	bl	80035d2 <LL_ADC_REG_IsConversionOngoing>
 80037d0:	67b8      	str	r0, [r7, #120]	@ 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4618      	mov	r0, r3
 80037d8:	f7ff fefb 	bl	80035d2 <LL_ADC_REG_IsConversionOngoing>
 80037dc:	4603      	mov	r3, r0
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d14c      	bne.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x220>
      && (tmp_hadc_slave_conversion_on_going == 0UL))
 80037e2:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80037e4:	2b00      	cmp	r3, #0
 80037e6:	d149      	bne.n	800387c <HAL_ADCEx_MultiModeConfigChannel+0x220>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80037e8:	4b31      	ldr	r3, [pc, #196]	@ (80038b0 <HAL_ADCEx_MultiModeConfigChannel+0x254>)
 80037ea:	677b      	str	r3, [r7, #116]	@ 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 80037ec:	683b      	ldr	r3, [r7, #0]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	2b00      	cmp	r3, #0
 80037f2:	d028      	beq.n	8003846 <HAL_ADCEx_MultiModeConfigChannel+0x1ea>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 80037f4:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	6859      	ldr	r1, [r3, #4]
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8003806:	035b      	lsls	r3, r3, #13
 8003808:	430b      	orrs	r3, r1
 800380a:	431a      	orrs	r2, r3
 800380c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800380e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003810:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003814:	f7ff feca 	bl	80035ac <LL_ADC_IsEnabled>
 8003818:	4604      	mov	r4, r0
 800381a:	4824      	ldr	r0, [pc, #144]	@ (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 800381c:	f7ff fec6 	bl	80035ac <LL_ADC_IsEnabled>
 8003820:	4603      	mov	r3, r0
 8003822:	4323      	orrs	r3, r4
 8003824:	2b00      	cmp	r3, #0
 8003826:	d133      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x234>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003828:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800382a:	689b      	ldr	r3, [r3, #8]
 800382c:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003830:	f023 030f 	bic.w	r3, r3, #15
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	6811      	ldr	r1, [r2, #0]
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	6892      	ldr	r2, [r2, #8]
 800383c:	430a      	orrs	r2, r1
 800383e:	431a      	orrs	r2, r3
 8003840:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003842:	609a      	str	r2, [r3, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003844:	e024      	b.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x234>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003846:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003848:	689b      	ldr	r3, [r3, #8]
 800384a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800384e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8003850:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003852:	f04f 40a0 	mov.w	r0, #1342177280	@ 0x50000000
 8003856:	f7ff fea9 	bl	80035ac <LL_ADC_IsEnabled>
 800385a:	4604      	mov	r4, r0
 800385c:	4813      	ldr	r0, [pc, #76]	@ (80038ac <HAL_ADCEx_MultiModeConfigChannel+0x250>)
 800385e:	f7ff fea5 	bl	80035ac <LL_ADC_IsEnabled>
 8003862:	4603      	mov	r3, r0
 8003864:	4323      	orrs	r3, r4
 8003866:	2b00      	cmp	r3, #0
 8003868:	d112      	bne.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x234>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 800386a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800386c:	689b      	ldr	r3, [r3, #8]
 800386e:	f423 6371 	bic.w	r3, r3, #3856	@ 0xf10
 8003872:	f023 030f 	bic.w	r3, r3, #15
 8003876:	6f7a      	ldr	r2, [r7, #116]	@ 0x74
 8003878:	6093      	str	r3, [r2, #8]
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 800387a:	e009      	b.n	8003890 <HAL_ADCEx_MultiModeConfigChannel+0x234>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003880:	f043 0220 	orr.w	r2, r3, #32
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	65da      	str	r2, [r3, #92]	@ 0x5c

    tmp_hal_status = HAL_ERROR;
 8003888:	2301      	movs	r3, #1
 800388a:	f887 307f 	strb.w	r3, [r7, #127]	@ 0x7f
 800388e:	e000      	b.n	8003892 <HAL_ADCEx_MultiModeConfigChannel+0x236>
    if (pMultimode->Mode != ADC_MODE_INDEPENDENT)
 8003890:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	2200      	movs	r2, #0
 8003896:	f883 2058 	strb.w	r2, [r3, #88]	@ 0x58

  /* Return function status */
  return tmp_hal_status;
 800389a:	f897 307f 	ldrb.w	r3, [r7, #127]	@ 0x7f
}
 800389e:	4618      	mov	r0, r3
 80038a0:	3784      	adds	r7, #132	@ 0x84
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd90      	pop	{r4, r7, pc}
 80038a6:	bf00      	nop
 80038a8:	0800c1c0 	.word	0x0800c1c0
 80038ac:	50000100 	.word	0x50000100
 80038b0:	50000300 	.word	0x50000300

080038b4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80038b4:	b480      	push	{r7}
 80038b6:	b085      	sub	sp, #20
 80038b8:	af00      	add	r7, sp, #0
 80038ba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f003 0307 	and.w	r3, r3, #7
 80038c2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80038c4:	4b0c      	ldr	r3, [pc, #48]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038c6:	68db      	ldr	r3, [r3, #12]
 80038c8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80038ca:	68ba      	ldr	r2, [r7, #8]
 80038cc:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80038d0:	4013      	ands	r3, r2
 80038d2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80038d8:	68bb      	ldr	r3, [r7, #8]
 80038da:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80038dc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80038e0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80038e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80038e6:	4a04      	ldr	r2, [pc, #16]	@ (80038f8 <__NVIC_SetPriorityGrouping+0x44>)
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	60d3      	str	r3, [r2, #12]
}
 80038ec:	bf00      	nop
 80038ee:	3714      	adds	r7, #20
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr
 80038f8:	e000ed00 	.word	0xe000ed00

080038fc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80038fc:	b480      	push	{r7}
 80038fe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003900:	4b04      	ldr	r3, [pc, #16]	@ (8003914 <__NVIC_GetPriorityGrouping+0x18>)
 8003902:	68db      	ldr	r3, [r3, #12]
 8003904:	0a1b      	lsrs	r3, r3, #8
 8003906:	f003 0307 	and.w	r3, r3, #7
}
 800390a:	4618      	mov	r0, r3
 800390c:	46bd      	mov	sp, r7
 800390e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003912:	4770      	bx	lr
 8003914:	e000ed00 	.word	0xe000ed00

08003918 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003918:	b480      	push	{r7}
 800391a:	b083      	sub	sp, #12
 800391c:	af00      	add	r7, sp, #0
 800391e:	4603      	mov	r3, r0
 8003920:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003922:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003926:	2b00      	cmp	r3, #0
 8003928:	db0b      	blt.n	8003942 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800392a:	79fb      	ldrb	r3, [r7, #7]
 800392c:	f003 021f 	and.w	r2, r3, #31
 8003930:	4907      	ldr	r1, [pc, #28]	@ (8003950 <__NVIC_EnableIRQ+0x38>)
 8003932:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003936:	095b      	lsrs	r3, r3, #5
 8003938:	2001      	movs	r0, #1
 800393a:	fa00 f202 	lsl.w	r2, r0, r2
 800393e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003942:	bf00      	nop
 8003944:	370c      	adds	r7, #12
 8003946:	46bd      	mov	sp, r7
 8003948:	f85d 7b04 	ldr.w	r7, [sp], #4
 800394c:	4770      	bx	lr
 800394e:	bf00      	nop
 8003950:	e000e100 	.word	0xe000e100

08003954 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003954:	b480      	push	{r7}
 8003956:	b083      	sub	sp, #12
 8003958:	af00      	add	r7, sp, #0
 800395a:	4603      	mov	r3, r0
 800395c:	6039      	str	r1, [r7, #0]
 800395e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003960:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003964:	2b00      	cmp	r3, #0
 8003966:	db0a      	blt.n	800397e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	b2da      	uxtb	r2, r3
 800396c:	490c      	ldr	r1, [pc, #48]	@ (80039a0 <__NVIC_SetPriority+0x4c>)
 800396e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003972:	0112      	lsls	r2, r2, #4
 8003974:	b2d2      	uxtb	r2, r2
 8003976:	440b      	add	r3, r1
 8003978:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800397c:	e00a      	b.n	8003994 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800397e:	683b      	ldr	r3, [r7, #0]
 8003980:	b2da      	uxtb	r2, r3
 8003982:	4908      	ldr	r1, [pc, #32]	@ (80039a4 <__NVIC_SetPriority+0x50>)
 8003984:	79fb      	ldrb	r3, [r7, #7]
 8003986:	f003 030f 	and.w	r3, r3, #15
 800398a:	3b04      	subs	r3, #4
 800398c:	0112      	lsls	r2, r2, #4
 800398e:	b2d2      	uxtb	r2, r2
 8003990:	440b      	add	r3, r1
 8003992:	761a      	strb	r2, [r3, #24]
}
 8003994:	bf00      	nop
 8003996:	370c      	adds	r7, #12
 8003998:	46bd      	mov	sp, r7
 800399a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399e:	4770      	bx	lr
 80039a0:	e000e100 	.word	0xe000e100
 80039a4:	e000ed00 	.word	0xe000ed00

080039a8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b089      	sub	sp, #36	@ 0x24
 80039ac:	af00      	add	r7, sp, #0
 80039ae:	60f8      	str	r0, [r7, #12]
 80039b0:	60b9      	str	r1, [r7, #8]
 80039b2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	f003 0307 	and.w	r3, r3, #7
 80039ba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80039bc:	69fb      	ldr	r3, [r7, #28]
 80039be:	f1c3 0307 	rsb	r3, r3, #7
 80039c2:	2b04      	cmp	r3, #4
 80039c4:	bf28      	it	cs
 80039c6:	2304      	movcs	r3, #4
 80039c8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80039ca:	69fb      	ldr	r3, [r7, #28]
 80039cc:	3304      	adds	r3, #4
 80039ce:	2b06      	cmp	r3, #6
 80039d0:	d902      	bls.n	80039d8 <NVIC_EncodePriority+0x30>
 80039d2:	69fb      	ldr	r3, [r7, #28]
 80039d4:	3b03      	subs	r3, #3
 80039d6:	e000      	b.n	80039da <NVIC_EncodePriority+0x32>
 80039d8:	2300      	movs	r3, #0
 80039da:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80039dc:	f04f 32ff 	mov.w	r2, #4294967295
 80039e0:	69bb      	ldr	r3, [r7, #24]
 80039e2:	fa02 f303 	lsl.w	r3, r2, r3
 80039e6:	43da      	mvns	r2, r3
 80039e8:	68bb      	ldr	r3, [r7, #8]
 80039ea:	401a      	ands	r2, r3
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80039f0:	f04f 31ff 	mov.w	r1, #4294967295
 80039f4:	697b      	ldr	r3, [r7, #20]
 80039f6:	fa01 f303 	lsl.w	r3, r1, r3
 80039fa:	43d9      	mvns	r1, r3
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a00:	4313      	orrs	r3, r2
         );
}
 8003a02:	4618      	mov	r0, r3
 8003a04:	3724      	adds	r7, #36	@ 0x24
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr
	...

08003a10 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8003a10:	b480      	push	{r7}
 8003a12:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8003a14:	f3bf 8f4f 	dsb	sy
}
 8003a18:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8003a1a:	4b06      	ldr	r3, [pc, #24]	@ (8003a34 <__NVIC_SystemReset+0x24>)
 8003a1c:	68db      	ldr	r3, [r3, #12]
 8003a1e:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8003a22:	4904      	ldr	r1, [pc, #16]	@ (8003a34 <__NVIC_SystemReset+0x24>)
 8003a24:	4b04      	ldr	r3, [pc, #16]	@ (8003a38 <__NVIC_SystemReset+0x28>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8003a2a:	f3bf 8f4f 	dsb	sy
}
 8003a2e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8003a30:	bf00      	nop
 8003a32:	e7fd      	b.n	8003a30 <__NVIC_SystemReset+0x20>
 8003a34:	e000ed00 	.word	0xe000ed00
 8003a38:	05fa0004 	.word	0x05fa0004

08003a3c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a3c:	b580      	push	{r7, lr}
 8003a3e:	b082      	sub	sp, #8
 8003a40:	af00      	add	r7, sp, #0
 8003a42:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	2b07      	cmp	r3, #7
 8003a48:	d00f      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b06      	cmp	r3, #6
 8003a4e:	d00c      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	2b05      	cmp	r3, #5
 8003a54:	d009      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	2b04      	cmp	r3, #4
 8003a5a:	d006      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2b03      	cmp	r3, #3
 8003a60:	d003      	beq.n	8003a6a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8003a62:	21a6      	movs	r1, #166	@ 0xa6
 8003a64:	4804      	ldr	r0, [pc, #16]	@ (8003a78 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8003a66:	f7fd fc27 	bl	80012b8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a6a:	6878      	ldr	r0, [r7, #4]
 8003a6c:	f7ff ff22 	bl	80038b4 <__NVIC_SetPriorityGrouping>
}
 8003a70:	bf00      	nop
 8003a72:	3708      	adds	r7, #8
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bd80      	pop	{r7, pc}
 8003a78:	0800c1fc 	.word	0x0800c1fc

08003a7c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	4603      	mov	r3, r0
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
 8003a88:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	2b0f      	cmp	r3, #15
 8003a8e:	d903      	bls.n	8003a98 <HAL_NVIC_SetPriority+0x1c>
 8003a90:	21be      	movs	r1, #190	@ 0xbe
 8003a92:	480e      	ldr	r0, [pc, #56]	@ (8003acc <HAL_NVIC_SetPriority+0x50>)
 8003a94:	f7fd fc10 	bl	80012b8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8003a98:	68bb      	ldr	r3, [r7, #8]
 8003a9a:	2b0f      	cmp	r3, #15
 8003a9c:	d903      	bls.n	8003aa6 <HAL_NVIC_SetPriority+0x2a>
 8003a9e:	21bf      	movs	r1, #191	@ 0xbf
 8003aa0:	480a      	ldr	r0, [pc, #40]	@ (8003acc <HAL_NVIC_SetPriority+0x50>)
 8003aa2:	f7fd fc09 	bl	80012b8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8003aa6:	f7ff ff29 	bl	80038fc <__NVIC_GetPriorityGrouping>
 8003aaa:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	68b9      	ldr	r1, [r7, #8]
 8003ab0:	6978      	ldr	r0, [r7, #20]
 8003ab2:	f7ff ff79 	bl	80039a8 <NVIC_EncodePriority>
 8003ab6:	4602      	mov	r2, r0
 8003ab8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003abc:	4611      	mov	r1, r2
 8003abe:	4618      	mov	r0, r3
 8003ac0:	f7ff ff48 	bl	8003954 <__NVIC_SetPriority>
}
 8003ac4:	bf00      	nop
 8003ac6:	3718      	adds	r7, #24
 8003ac8:	46bd      	mov	sp, r7
 8003aca:	bd80      	pop	{r7, pc}
 8003acc:	0800c1fc 	.word	0x0800c1fc

08003ad0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ad0:	b580      	push	{r7, lr}
 8003ad2:	b082      	sub	sp, #8
 8003ad4:	af00      	add	r7, sp, #0
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8003ada:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	da03      	bge.n	8003aea <HAL_NVIC_EnableIRQ+0x1a>
 8003ae2:	21d2      	movs	r1, #210	@ 0xd2
 8003ae4:	4805      	ldr	r0, [pc, #20]	@ (8003afc <HAL_NVIC_EnableIRQ+0x2c>)
 8003ae6:	f7fd fbe7 	bl	80012b8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003aee:	4618      	mov	r0, r3
 8003af0:	f7ff ff12 	bl	8003918 <__NVIC_EnableIRQ>
}
 8003af4:	bf00      	nop
 8003af6:	3708      	adds	r7, #8
 8003af8:	46bd      	mov	sp, r7
 8003afa:	bd80      	pop	{r7, pc}
 8003afc:	0800c1fc 	.word	0x0800c1fc

08003b00 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8003b04:	f7ff ff84 	bl	8003a10 <__NVIC_SystemReset>

08003b08 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b08:	b580      	push	{r7, lr}
 8003b0a:	b082      	sub	sp, #8
 8003b0c:	af00      	add	r7, sp, #0
 8003b0e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2b00      	cmp	r3, #0
 8003b14:	d101      	bne.n	8003b1a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b16:	2301      	movs	r3, #1
 8003b18:	e023      	b.n	8003b62 <HAL_DAC_Init+0x5a>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	4a13      	ldr	r2, [pc, #76]	@ (8003b6c <HAL_DAC_Init+0x64>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d009      	beq.n	8003b38 <HAL_DAC_Init+0x30>
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	4a11      	ldr	r2, [pc, #68]	@ (8003b70 <HAL_DAC_Init+0x68>)
 8003b2a:	4293      	cmp	r3, r2
 8003b2c:	d004      	beq.n	8003b38 <HAL_DAC_Init+0x30>
 8003b2e:	f240 119d 	movw	r1, #413	@ 0x19d
 8003b32:	4810      	ldr	r0, [pc, #64]	@ (8003b74 <HAL_DAC_Init+0x6c>)
 8003b34:	f7fd fbc0 	bl	80012b8 <assert_failed>

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	791b      	ldrb	r3, [r3, #4]
 8003b3c:	b2db      	uxtb	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d105      	bne.n	8003b4e <HAL_DAC_Init+0x46>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	2200      	movs	r2, #0
 8003b46:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b48:	6878      	ldr	r0, [r7, #4]
 8003b4a:	f7fd f9e3 	bl	8000f14 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2202      	movs	r2, #2
 8003b52:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	2200      	movs	r2, #0
 8003b58:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2201      	movs	r2, #1
 8003b5e:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b60:	2300      	movs	r3, #0
}
 8003b62:	4618      	mov	r0, r3
 8003b64:	3708      	adds	r7, #8
 8003b66:	46bd      	mov	sp, r7
 8003b68:	bd80      	pop	{r7, pc}
 8003b6a:	bf00      	nop
 8003b6c:	50000800 	.word	0x50000800
 8003b70:	50001000 	.word	0x50001000
 8003b74:	0800c238 	.word	0x0800c238

08003b78 <HAL_DAC_ConfigChannel>:
  *             Refer to device datasheet for channels availability.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b08a      	sub	sp, #40	@ 0x28
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	60f8      	str	r0, [r7, #12]
 8003b80:	60b9      	str	r1, [r7, #8]
 8003b82:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b84:	2300      	movs	r3, #0
 8003b86:	77fb      	strb	r3, [r7, #31]
  uint32_t tickstart;
  uint32_t hclkfreq;
  uint32_t connectOnChip;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d002      	beq.n	8003b94 <HAL_DAC_ConfigChannel+0x1c>
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	2b00      	cmp	r3, #0
 8003b92:	d101      	bne.n	8003b98 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003b94:	2301      	movs	r3, #1
 8003b96:	e29c      	b.n	80040d2 <HAL_DAC_ConfigChannel+0x55a>
  }

  /* Check the DAC parameters */
  assert_param(IS_DAC_HIGH_FREQUENCY_MODE(sConfig->DAC_HighFrequency));
 8003b98:	68bb      	ldr	r3, [r7, #8]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d012      	beq.n	8003bc6 <HAL_DAC_ConfigChannel+0x4e>
 8003ba0:	68bb      	ldr	r3, [r7, #8]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003ba8:	d00d      	beq.n	8003bc6 <HAL_DAC_ConfigChannel+0x4e>
 8003baa:	68bb      	ldr	r3, [r7, #8]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003bb2:	d008      	beq.n	8003bc6 <HAL_DAC_ConfigChannel+0x4e>
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	2b02      	cmp	r3, #2
 8003bba:	d004      	beq.n	8003bc6 <HAL_DAC_ConfigChannel+0x4e>
 8003bbc:	f240 4189 	movw	r1, #1161	@ 0x489
 8003bc0:	488b      	ldr	r0, [pc, #556]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003bc2:	f7fd fb79 	bl	80012b8 <assert_failed>
  assert_param(IS_DAC_TRIGGER(hdac->Instance, sConfig->DAC_Trigger));
 8003bc6:	68bb      	ldr	r3, [r7, #8]
 8003bc8:	68db      	ldr	r3, [r3, #12]
 8003bca:	2b00      	cmp	r3, #0
 8003bcc:	d028      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003bce:	68bb      	ldr	r3, [r7, #8]
 8003bd0:	68db      	ldr	r3, [r3, #12]
 8003bd2:	2b02      	cmp	r3, #2
 8003bd4:	d024      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003bd6:	68bb      	ldr	r3, [r7, #8]
 8003bd8:	68db      	ldr	r3, [r3, #12]
 8003bda:	2b0a      	cmp	r3, #10
 8003bdc:	d020      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003bde:	68bb      	ldr	r3, [r7, #8]
 8003be0:	68db      	ldr	r3, [r3, #12]
 8003be2:	2b0e      	cmp	r3, #14
 8003be4:	d01c      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003be6:	68bb      	ldr	r3, [r7, #8]
 8003be8:	68db      	ldr	r3, [r3, #12]
 8003bea:	2b12      	cmp	r3, #18
 8003bec:	d018      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003bee:	68bb      	ldr	r3, [r7, #8]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	2b16      	cmp	r3, #22
 8003bf4:	d014      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003bf6:	68bb      	ldr	r3, [r7, #8]
 8003bf8:	68db      	ldr	r3, [r3, #12]
 8003bfa:	2b1a      	cmp	r3, #26
 8003bfc:	d010      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003bfe:	68bb      	ldr	r3, [r7, #8]
 8003c00:	68db      	ldr	r3, [r3, #12]
 8003c02:	2b1e      	cmp	r3, #30
 8003c04:	d00c      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003c06:	68bb      	ldr	r3, [r7, #8]
 8003c08:	68db      	ldr	r3, [r3, #12]
 8003c0a:	2b22      	cmp	r3, #34	@ 0x22
 8003c0c:	d008      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	68db      	ldr	r3, [r3, #12]
 8003c12:	2b06      	cmp	r3, #6
 8003c14:	d004      	beq.n	8003c20 <HAL_DAC_ConfigChannel+0xa8>
 8003c16:	f240 418a 	movw	r1, #1162	@ 0x48a
 8003c1a:	4875      	ldr	r0, [pc, #468]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003c1c:	f7fd fb4c 	bl	80012b8 <assert_failed>
  assert_param(IS_DAC_TRIGGER2(hdac->Instance, sConfig->DAC_Trigger2));
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	691b      	ldr	r3, [r3, #16]
 8003c24:	2b00      	cmp	r3, #0
 8003c26:	d028      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c28:	68bb      	ldr	r3, [r7, #8]
 8003c2a:	691b      	ldr	r3, [r3, #16]
 8003c2c:	2b02      	cmp	r3, #2
 8003c2e:	d024      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c30:	68bb      	ldr	r3, [r7, #8]
 8003c32:	691b      	ldr	r3, [r3, #16]
 8003c34:	2b0a      	cmp	r3, #10
 8003c36:	d020      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	691b      	ldr	r3, [r3, #16]
 8003c3c:	2b0e      	cmp	r3, #14
 8003c3e:	d01c      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c40:	68bb      	ldr	r3, [r7, #8]
 8003c42:	691b      	ldr	r3, [r3, #16]
 8003c44:	2b12      	cmp	r3, #18
 8003c46:	d018      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c48:	68bb      	ldr	r3, [r7, #8]
 8003c4a:	691b      	ldr	r3, [r3, #16]
 8003c4c:	2b16      	cmp	r3, #22
 8003c4e:	d014      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c50:	68bb      	ldr	r3, [r7, #8]
 8003c52:	691b      	ldr	r3, [r3, #16]
 8003c54:	2b1a      	cmp	r3, #26
 8003c56:	d010      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	691b      	ldr	r3, [r3, #16]
 8003c5c:	2b1e      	cmp	r3, #30
 8003c5e:	d00c      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	691b      	ldr	r3, [r3, #16]
 8003c64:	2b22      	cmp	r3, #34	@ 0x22
 8003c66:	d008      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c68:	68bb      	ldr	r3, [r7, #8]
 8003c6a:	691b      	ldr	r3, [r3, #16]
 8003c6c:	2b06      	cmp	r3, #6
 8003c6e:	d004      	beq.n	8003c7a <HAL_DAC_ConfigChannel+0x102>
 8003c70:	f240 418b 	movw	r1, #1163	@ 0x48b
 8003c74:	485e      	ldr	r0, [pc, #376]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003c76:	f7fd fb1f 	bl	80012b8 <assert_failed>
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
 8003c7a:	68bb      	ldr	r3, [r7, #8]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d008      	beq.n	8003c94 <HAL_DAC_ConfigChannel+0x11c>
 8003c82:	68bb      	ldr	r3, [r7, #8]
 8003c84:	695b      	ldr	r3, [r3, #20]
 8003c86:	2b02      	cmp	r3, #2
 8003c88:	d004      	beq.n	8003c94 <HAL_DAC_ConfigChannel+0x11c>
 8003c8a:	f240 418c 	movw	r1, #1164	@ 0x48c
 8003c8e:	4858      	ldr	r0, [pc, #352]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003c90:	f7fd fb12 	bl	80012b8 <assert_failed>
  assert_param(IS_DAC_CHIP_CONNECTION(sConfig->DAC_ConnectOnChipPeripheral));
 8003c94:	68bb      	ldr	r3, [r7, #8]
 8003c96:	699b      	ldr	r3, [r3, #24]
 8003c98:	2b01      	cmp	r3, #1
 8003c9a:	d00c      	beq.n	8003cb6 <HAL_DAC_ConfigChannel+0x13e>
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	699b      	ldr	r3, [r3, #24]
 8003ca0:	2b02      	cmp	r3, #2
 8003ca2:	d008      	beq.n	8003cb6 <HAL_DAC_ConfigChannel+0x13e>
 8003ca4:	68bb      	ldr	r3, [r7, #8]
 8003ca6:	699b      	ldr	r3, [r3, #24]
 8003ca8:	2b04      	cmp	r3, #4
 8003caa:	d004      	beq.n	8003cb6 <HAL_DAC_ConfigChannel+0x13e>
 8003cac:	f240 418d 	movw	r1, #1165	@ 0x48d
 8003cb0:	484f      	ldr	r0, [pc, #316]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003cb2:	f7fd fb01 	bl	80012b8 <assert_failed>
  assert_param(IS_DAC_TRIMMING(sConfig->DAC_UserTrimming));
 8003cb6:	68bb      	ldr	r3, [r7, #8]
 8003cb8:	69db      	ldr	r3, [r3, #28]
 8003cba:	2b00      	cmp	r3, #0
 8003cbc:	d008      	beq.n	8003cd0 <HAL_DAC_ConfigChannel+0x158>
 8003cbe:	68bb      	ldr	r3, [r7, #8]
 8003cc0:	69db      	ldr	r3, [r3, #28]
 8003cc2:	2b01      	cmp	r3, #1
 8003cc4:	d004      	beq.n	8003cd0 <HAL_DAC_ConfigChannel+0x158>
 8003cc6:	f240 418e 	movw	r1, #1166	@ 0x48e
 8003cca:	4849      	ldr	r0, [pc, #292]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003ccc:	f7fd faf4 	bl	80012b8 <assert_failed>
  if ((sConfig->DAC_UserTrimming) == DAC_TRIMMING_USER)
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	69db      	ldr	r3, [r3, #28]
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d108      	bne.n	8003cea <HAL_DAC_ConfigChannel+0x172>
  {
    assert_param(IS_DAC_TRIMMINGVALUE(sConfig->DAC_TrimmingValue));
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	6a1b      	ldr	r3, [r3, #32]
 8003cdc:	2b1f      	cmp	r3, #31
 8003cde:	d904      	bls.n	8003cea <HAL_DAC_ConfigChannel+0x172>
 8003ce0:	f240 4191 	movw	r1, #1169	@ 0x491
 8003ce4:	4842      	ldr	r0, [pc, #264]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003ce6:	f7fd fae7 	bl	80012b8 <assert_failed>
  }
  assert_param(IS_DAC_SAMPLEANDHOLD(sConfig->DAC_SampleAndHold));
 8003cea:	68bb      	ldr	r3, [r7, #8]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	2b00      	cmp	r3, #0
 8003cf0:	d008      	beq.n	8003d04 <HAL_DAC_ConfigChannel+0x18c>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	689b      	ldr	r3, [r3, #8]
 8003cf6:	2b04      	cmp	r3, #4
 8003cf8:	d004      	beq.n	8003d04 <HAL_DAC_ConfigChannel+0x18c>
 8003cfa:	f240 4193 	movw	r1, #1171	@ 0x493
 8003cfe:	483c      	ldr	r0, [pc, #240]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003d00:	f7fd fada 	bl	80012b8 <assert_failed>
  if ((sConfig->DAC_SampleAndHold) == DAC_SAMPLEANDHOLD_ENABLE)
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	689b      	ldr	r3, [r3, #8]
 8003d08:	2b04      	cmp	r3, #4
 8003d0a:	d11c      	bne.n	8003d46 <HAL_DAC_ConfigChannel+0x1ce>
  {
    assert_param(IS_DAC_SAMPLETIME(sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime));
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d10:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d14:	d304      	bcc.n	8003d20 <HAL_DAC_ConfigChannel+0x1a8>
 8003d16:	f240 4196 	movw	r1, #1174	@ 0x496
 8003d1a:	4835      	ldr	r0, [pc, #212]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003d1c:	f7fd facc 	bl	80012b8 <assert_failed>
    assert_param(IS_DAC_HOLDTIME(sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime));
 8003d20:	68bb      	ldr	r3, [r7, #8]
 8003d22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003d24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d28:	d304      	bcc.n	8003d34 <HAL_DAC_ConfigChannel+0x1bc>
 8003d2a:	f240 4197 	movw	r1, #1175	@ 0x497
 8003d2e:	4830      	ldr	r0, [pc, #192]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003d30:	f7fd fac2 	bl	80012b8 <assert_failed>
    assert_param(IS_DAC_REFRESHTIME(sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime));
 8003d34:	68bb      	ldr	r3, [r7, #8]
 8003d36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003d38:	2bff      	cmp	r3, #255	@ 0xff
 8003d3a:	d904      	bls.n	8003d46 <HAL_DAC_ConfigChannel+0x1ce>
 8003d3c:	f44f 6193 	mov.w	r1, #1176	@ 0x498
 8003d40:	482b      	ldr	r0, [pc, #172]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003d42:	f7fd fab9 	bl	80012b8 <assert_failed>
  }
  assert_param(IS_DAC_CHANNEL(hdac->Instance, Channel));
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d007      	beq.n	8003d5c <HAL_DAC_ConfigChannel+0x1e4>
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2b10      	cmp	r3, #16
 8003d50:	d004      	beq.n	8003d5c <HAL_DAC_ConfigChannel+0x1e4>
 8003d52:	f240 419a 	movw	r1, #1178	@ 0x49a
 8003d56:	4826      	ldr	r0, [pc, #152]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003d58:	f7fd faae 	bl	80012b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_DMADoubleDataMode));
 8003d5c:	68bb      	ldr	r3, [r7, #8]
 8003d5e:	791b      	ldrb	r3, [r3, #4]
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d008      	beq.n	8003d76 <HAL_DAC_ConfigChannel+0x1fe>
 8003d64:	68bb      	ldr	r3, [r7, #8]
 8003d66:	791b      	ldrb	r3, [r3, #4]
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d004      	beq.n	8003d76 <HAL_DAC_ConfigChannel+0x1fe>
 8003d6c:	f240 419b 	movw	r1, #1179	@ 0x49b
 8003d70:	481f      	ldr	r0, [pc, #124]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003d72:	f7fd faa1 	bl	80012b8 <assert_failed>
  assert_param(IS_FUNCTIONAL_STATE(sConfig->DAC_SignedFormat));
 8003d76:	68bb      	ldr	r3, [r7, #8]
 8003d78:	795b      	ldrb	r3, [r3, #5]
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	d008      	beq.n	8003d90 <HAL_DAC_ConfigChannel+0x218>
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	795b      	ldrb	r3, [r3, #5]
 8003d82:	2b01      	cmp	r3, #1
 8003d84:	d004      	beq.n	8003d90 <HAL_DAC_ConfigChannel+0x218>
 8003d86:	f240 419c 	movw	r1, #1180	@ 0x49c
 8003d8a:	4819      	ldr	r0, [pc, #100]	@ (8003df0 <HAL_DAC_ConfigChannel+0x278>)
 8003d8c:	f7fd fa94 	bl	80012b8 <assert_failed>

  /* Process locked */
  __HAL_LOCK(hdac);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	795b      	ldrb	r3, [r3, #5]
 8003d94:	2b01      	cmp	r3, #1
 8003d96:	d101      	bne.n	8003d9c <HAL_DAC_ConfigChannel+0x224>
 8003d98:	2302      	movs	r3, #2
 8003d9a:	e19a      	b.n	80040d2 <HAL_DAC_ConfigChannel+0x55a>
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	2202      	movs	r2, #2
 8003da6:	711a      	strb	r2, [r3, #4]

  /* Sample and hold configuration */
  if (sConfig->DAC_SampleAndHold == DAC_SAMPLEANDHOLD_ENABLE)
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	689b      	ldr	r3, [r3, #8]
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d17c      	bne.n	8003eaa <HAL_DAC_ConfigChannel+0x332>
  {
    /* Get timeout */
    tickstart = HAL_GetTick();
 8003db0:	f7fd fda2 	bl	80018f8 <HAL_GetTick>
 8003db4:	61b8      	str	r0, [r7, #24]

    if (Channel == DAC_CHANNEL_1)
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d13f      	bne.n	8003e3c <HAL_DAC_ConfigChannel+0x2c4>
    {
      /* SHSR1 can be written when BWST1 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dbc:	e01a      	b.n	8003df4 <HAL_DAC_ConfigChannel+0x27c>
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003dbe:	f7fd fd9b 	bl	80018f8 <HAL_GetTick>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	69bb      	ldr	r3, [r7, #24]
 8003dc6:	1ad3      	subs	r3, r2, r3
 8003dc8:	2b01      	cmp	r3, #1
 8003dca:	d913      	bls.n	8003df4 <HAL_DAC_ConfigChannel+0x27c>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dd2:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d00c      	beq.n	8003df4 <HAL_DAC_ConfigChannel+0x27c>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f043 0208 	orr.w	r2, r3, #8
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	2203      	movs	r2, #3
 8003dea:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003dec:	2303      	movs	r3, #3
 8003dee:	e170      	b.n	80040d2 <HAL_DAC_ConfigChannel+0x55a>
 8003df0:	0800c238 	.word	0x0800c238
      while (((hdac->Instance->SR) & DAC_SR_BWST1) != 0UL)
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003dfa:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d1dd      	bne.n	8003dbe <HAL_DAC_ConfigChannel+0x246>
          }
        }
      }
      hdac->Instance->SHSR1 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e0a:	641a      	str	r2, [r3, #64]	@ 0x40
 8003e0c:	e020      	b.n	8003e50 <HAL_DAC_ConfigChannel+0x2d8>
    {
      /* SHSR2 can be written when BWST2 is cleared */
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
      {
        /* Check for the Timeout */
        if ((HAL_GetTick() - tickstart) > TIMEOUT_DAC_CALIBCONFIG)
 8003e0e:	f7fd fd73 	bl	80018f8 <HAL_GetTick>
 8003e12:	4602      	mov	r2, r0
 8003e14:	69bb      	ldr	r3, [r7, #24]
 8003e16:	1ad3      	subs	r3, r2, r3
 8003e18:	2b01      	cmp	r3, #1
 8003e1a:	d90f      	bls.n	8003e3c <HAL_DAC_ConfigChannel+0x2c4>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	da0a      	bge.n	8003e3c <HAL_DAC_ConfigChannel+0x2c4>
          {
            /* Update error code */
            SET_BIT(hdac->ErrorCode, HAL_DAC_ERROR_TIMEOUT);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	691b      	ldr	r3, [r3, #16]
 8003e2a:	f043 0208 	orr.w	r2, r3, #8
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	611a      	str	r2, [r3, #16]

            /* Change the DMA state */
            hdac->State = HAL_DAC_STATE_TIMEOUT;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	2203      	movs	r2, #3
 8003e36:	711a      	strb	r2, [r3, #4]

            return HAL_TIMEOUT;
 8003e38:	2303      	movs	r3, #3
 8003e3a:	e14a      	b.n	80040d2 <HAL_DAC_ConfigChannel+0x55a>
      while (((hdac->Instance->SR) & DAC_SR_BWST2) != 0UL)
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	dbe3      	blt.n	8003e0e <HAL_DAC_ConfigChannel+0x296>
          }
        }
      }
      hdac->Instance->SHSR2 = sConfig->DAC_SampleAndHoldConfig.DAC_SampleTime;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68ba      	ldr	r2, [r7, #8]
 8003e4c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003e4e:	645a      	str	r2, [r3, #68]	@ 0x44
    }


    /* HoldTime */
    MODIFY_REG(hdac->Instance->SHHR, DAC_SHHR_THOLD1 << (Channel & 0x10UL),
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	f003 0310 	and.w	r3, r3, #16
 8003e5c:	f240 31ff 	movw	r1, #1023	@ 0x3ff
 8003e60:	fa01 f303 	lsl.w	r3, r1, r3
 8003e64:	43db      	mvns	r3, r3
 8003e66:	ea02 0103 	and.w	r1, r2, r3
 8003e6a:	68bb      	ldr	r3, [r7, #8]
 8003e6c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	f003 0310 	and.w	r3, r3, #16
 8003e74:	409a      	lsls	r2, r3
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	649a      	str	r2, [r3, #72]	@ 0x48
               (sConfig->DAC_SampleAndHoldConfig.DAC_HoldTime) << (Channel & 0x10UL));
    /* RefreshTime */
    MODIFY_REG(hdac->Instance->SHRR, DAC_SHRR_TREFRESH1 << (Channel & 0x10UL),
 8003e7e:	68fb      	ldr	r3, [r7, #12]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	f003 0310 	and.w	r3, r3, #16
 8003e8a:	21ff      	movs	r1, #255	@ 0xff
 8003e8c:	fa01 f303 	lsl.w	r3, r1, r3
 8003e90:	43db      	mvns	r3, r3
 8003e92:	ea02 0103 	and.w	r1, r2, r3
 8003e96:	68bb      	ldr	r3, [r7, #8]
 8003e98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	f003 0310 	and.w	r3, r3, #16
 8003ea0:	409a      	lsls	r2, r3
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	430a      	orrs	r2, r1
 8003ea8:	64da      	str	r2, [r3, #76]	@ 0x4c
               (sConfig->DAC_SampleAndHoldConfig.DAC_RefreshTime) << (Channel & 0x10UL));
  }

  if (sConfig->DAC_UserTrimming == DAC_TRIMMING_USER)
 8003eaa:	68bb      	ldr	r3, [r7, #8]
 8003eac:	69db      	ldr	r3, [r3, #28]
 8003eae:	2b01      	cmp	r3, #1
 8003eb0:	d11d      	bne.n	8003eee <HAL_DAC_ConfigChannel+0x376>
    /* USER TRIMMING */
  {
    /* Get the DAC CCR value */
    tmpreg1 = hdac->Instance->CCR;
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	681b      	ldr	r3, [r3, #0]
 8003eb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003eb8:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Clear trimming value */
    tmpreg1 &= ~(((uint32_t)(DAC_CCR_OTRIM1)) << (Channel & 0x10UL));
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	f003 0310 	and.w	r3, r3, #16
 8003ec0:	221f      	movs	r2, #31
 8003ec2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ec6:	43db      	mvns	r3, r3
 8003ec8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eca:	4013      	ands	r3, r2
 8003ecc:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Configure for the selected trimming offset */
    tmpreg2 = sConfig->DAC_TrimmingValue;
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	617b      	str	r3, [r7, #20]
    /* Calculate CCR register value depending on DAC_Channel */
    tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	f003 0310 	and.w	r3, r3, #16
 8003eda:	697a      	ldr	r2, [r7, #20]
 8003edc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ee2:	4313      	orrs	r3, r2
 8003ee4:	627b      	str	r3, [r7, #36]	@ 0x24
    /* Write to DAC CCR */
    hdac->Instance->CCR = tmpreg1;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003eec:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  /* else factory trimming is used (factory setting are available at reset)*/
  /* SW Nothing has nothing to do */

  /* Get the DAC MCR value */
  tmpreg1 = hdac->Instance->MCR;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003ef4:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear DAC_MCR_MODEx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_MODE1)) << (Channel & 0x10UL));
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	f003 0310 	and.w	r3, r3, #16
 8003efc:	2207      	movs	r2, #7
 8003efe:	fa02 f303 	lsl.w	r3, r2, r3
 8003f02:	43db      	mvns	r3, r3
 8003f04:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f06:	4013      	ands	r3, r2
 8003f08:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: mode, buffer output & on chip peripheral connect */


  if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_EXTERNAL)
 8003f0a:	68bb      	ldr	r3, [r7, #8]
 8003f0c:	699b      	ldr	r3, [r3, #24]
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d102      	bne.n	8003f18 <HAL_DAC_ConfigChannel+0x3a0>
  {
    connectOnChip = 0x00000000UL;
 8003f12:	2300      	movs	r3, #0
 8003f14:	623b      	str	r3, [r7, #32]
 8003f16:	e00f      	b.n	8003f38 <HAL_DAC_ConfigChannel+0x3c0>
  }
  else if (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_INTERNAL)
 8003f18:	68bb      	ldr	r3, [r7, #8]
 8003f1a:	699b      	ldr	r3, [r3, #24]
 8003f1c:	2b02      	cmp	r3, #2
 8003f1e:	d102      	bne.n	8003f26 <HAL_DAC_ConfigChannel+0x3ae>
  {
    connectOnChip = DAC_MCR_MODE1_0;
 8003f20:	2301      	movs	r3, #1
 8003f22:	623b      	str	r3, [r7, #32]
 8003f24:	e008      	b.n	8003f38 <HAL_DAC_ConfigChannel+0x3c0>
  }
  else /* (sConfig->DAC_ConnectOnChipPeripheral == DAC_CHIPCONNECT_BOTH) */
  {
    if (sConfig->DAC_OutputBuffer == DAC_OUTPUTBUFFER_ENABLE)
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	695b      	ldr	r3, [r3, #20]
 8003f2a:	2b00      	cmp	r3, #0
 8003f2c:	d102      	bne.n	8003f34 <HAL_DAC_ConfigChannel+0x3bc>
    {
      connectOnChip = DAC_MCR_MODE1_0;
 8003f2e:	2301      	movs	r3, #1
 8003f30:	623b      	str	r3, [r7, #32]
 8003f32:	e001      	b.n	8003f38 <HAL_DAC_ConfigChannel+0x3c0>
    }
    else
    {
      connectOnChip = 0x00000000UL;
 8003f34:	2300      	movs	r3, #0
 8003f36:	623b      	str	r3, [r7, #32]
    }
  }
  tmpreg2 = (sConfig->DAC_SampleAndHold | sConfig->DAC_OutputBuffer | connectOnChip);
 8003f38:	68bb      	ldr	r3, [r7, #8]
 8003f3a:	689a      	ldr	r2, [r3, #8]
 8003f3c:	68bb      	ldr	r3, [r7, #8]
 8003f3e:	695b      	ldr	r3, [r3, #20]
 8003f40:	4313      	orrs	r3, r2
 8003f42:	6a3a      	ldr	r2, [r7, #32]
 8003f44:	4313      	orrs	r3, r2
 8003f46:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_DMADOUBLEx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_DMADOUBLE1)) << (Channel & 0x10UL));
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	f003 0310 	and.w	r3, r3, #16
 8003f4e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8003f52:	fa02 f303 	lsl.w	r3, r2, r3
 8003f56:	43db      	mvns	r3, r3
 8003f58:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f5a:	4013      	ands	r3, r2
 8003f5c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: DMA double data mode */
  tmpreg2 |= (sConfig->DAC_DMADoubleDataMode == ENABLE) ? DAC_MCR_DMADOUBLE1 : 0UL;
 8003f5e:	68bb      	ldr	r3, [r7, #8]
 8003f60:	791b      	ldrb	r3, [r3, #4]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d102      	bne.n	8003f6c <HAL_DAC_ConfigChannel+0x3f4>
 8003f66:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003f6a:	e000      	b.n	8003f6e <HAL_DAC_ConfigChannel+0x3f6>
 8003f6c:	2300      	movs	r3, #0
 8003f6e:	697a      	ldr	r2, [r7, #20]
 8003f70:	4313      	orrs	r3, r2
 8003f72:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_SINFORMATx */
  tmpreg1 &= ~(((uint32_t)(DAC_MCR_SINFORMAT1)) << (Channel & 0x10UL));
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	f003 0310 	and.w	r3, r3, #16
 8003f7a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8003f82:	43db      	mvns	r3, r3
 8003f84:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f86:	4013      	ands	r3, r2
 8003f88:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: Signed format */
  tmpreg2 |= (sConfig->DAC_SignedFormat == ENABLE) ? DAC_MCR_SINFORMAT1 : 0UL;
 8003f8a:	68bb      	ldr	r3, [r7, #8]
 8003f8c:	795b      	ldrb	r3, [r3, #5]
 8003f8e:	2b01      	cmp	r3, #1
 8003f90:	d102      	bne.n	8003f98 <HAL_DAC_ConfigChannel+0x420>
 8003f92:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8003f96:	e000      	b.n	8003f9a <HAL_DAC_ConfigChannel+0x422>
 8003f98:	2300      	movs	r3, #0
 8003f9a:	697a      	ldr	r2, [r7, #20]
 8003f9c:	4313      	orrs	r3, r2
 8003f9e:	617b      	str	r3, [r7, #20]
  /* Clear DAC_MCR_HFSEL bits */
  tmpreg1 &= ~(DAC_MCR_HFSEL);
 8003fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fa2:	f423 4340 	bic.w	r3, r3, #49152	@ 0xc000
 8003fa6:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for both DAC channels: high frequency mode */
  if (DAC_HIGH_FREQUENCY_INTERFACE_MODE_AUTOMATIC == sConfig->DAC_HighFrequency)
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	2b02      	cmp	r3, #2
 8003fae:	d114      	bne.n	8003fda <HAL_DAC_ConfigChannel+0x462>
  {
    hclkfreq = HAL_RCC_GetHCLKFreq();
 8003fb0:	f001 ff6c 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8003fb4:	6138      	str	r0, [r7, #16]
    if (hclkfreq > HFSEL_ENABLE_THRESHOLD_160MHZ)
 8003fb6:	693b      	ldr	r3, [r7, #16]
 8003fb8:	4a48      	ldr	r2, [pc, #288]	@ (80040dc <HAL_DAC_ConfigChannel+0x564>)
 8003fba:	4293      	cmp	r3, r2
 8003fbc:	d904      	bls.n	8003fc8 <HAL_DAC_ConfigChannel+0x450>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_160MHZ;
 8003fbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fc0:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003fc4:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fc6:	e00f      	b.n	8003fe8 <HAL_DAC_ConfigChannel+0x470>
    }
    else if (hclkfreq > HFSEL_ENABLE_THRESHOLD_80MHZ)
 8003fc8:	693b      	ldr	r3, [r7, #16]
 8003fca:	4a45      	ldr	r2, [pc, #276]	@ (80040e0 <HAL_DAC_ConfigChannel+0x568>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d90a      	bls.n	8003fe6 <HAL_DAC_ConfigChannel+0x46e>
    {
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_ABOVE_80MHZ;
 8003fd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fd2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003fd6:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fd8:	e006      	b.n	8003fe8 <HAL_DAC_ConfigChannel+0x470>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
    }
  }
  else
  {
    tmpreg1 |= sConfig->DAC_HighFrequency;
 8003fda:	68bb      	ldr	r3, [r7, #8]
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	627b      	str	r3, [r7, #36]	@ 0x24
 8003fe4:	e000      	b.n	8003fe8 <HAL_DAC_ConfigChannel+0x470>
      tmpreg1 |= DAC_HIGH_FREQUENCY_INTERFACE_MODE_DISABLE;
 8003fe6:	bf00      	nop
  }
  /* Calculate MCR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	f003 0310 	and.w	r3, r3, #16
 8003fee:	697a      	ldr	r2, [r7, #20]
 8003ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8003ff4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ff6:	4313      	orrs	r3, r2
 8003ff8:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC MCR */
  hdac->Instance->MCR = tmpreg1;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004000:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* DAC in normal operating mode hence clear DAC_CR_CENx bit */
  CLEAR_BIT(hdac->Instance->CR, DAC_CR_CEN1 << (Channel & 0x10UL));
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	681b      	ldr	r3, [r3, #0]
 8004006:	6819      	ldr	r1, [r3, #0]
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	f003 0310 	and.w	r3, r3, #16
 800400e:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8004012:	fa02 f303 	lsl.w	r3, r2, r3
 8004016:	43da      	mvns	r2, r3
 8004018:	68fb      	ldr	r3, [r7, #12]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	400a      	ands	r2, r1
 800401e:	601a      	str	r2, [r3, #0]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Clear TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1)) << (Channel & 0x10UL));
 8004028:	687b      	ldr	r3, [r7, #4]
 800402a:	f003 0310 	and.w	r3, r3, #16
 800402e:	f640 72fe 	movw	r2, #4094	@ 0xffe
 8004032:	fa02 f303 	lsl.w	r3, r2, r3
 8004036:	43db      	mvns	r3, r3
 8004038:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800403a:	4013      	ands	r3, r2
 800403c:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Configure for the selected DAC channel: trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  tmpreg2 = sConfig->DAC_Trigger;
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	68db      	ldr	r3, [r3, #12]
 8004042:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	697a      	ldr	r2, [r7, #20]
 800404c:	fa02 f303 	lsl.w	r3, r2, r3
 8004050:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004052:	4313      	orrs	r3, r2
 8004054:	627b      	str	r3, [r7, #36]	@ 0x24
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800405c:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	6819      	ldr	r1, [r3, #0]
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	f003 0310 	and.w	r3, r3, #16
 800406a:	22c0      	movs	r2, #192	@ 0xc0
 800406c:	fa02 f303 	lsl.w	r3, r2, r3
 8004070:	43da      	mvns	r2, r3
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	400a      	ands	r2, r1
 8004078:	601a      	str	r2, [r3, #0]

  /* Set STRSTTRIGSELx and STINCTRIGSELx bits according to DAC_Trigger & DAC_Trigger2 values */
  tmpreg2 = ((sConfig->DAC_Trigger & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STRSTTRIGSEL1_Pos;
 800407a:	68bb      	ldr	r3, [r7, #8]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	089b      	lsrs	r3, r3, #2
 8004080:	f003 030f 	and.w	r3, r3, #15
 8004084:	617b      	str	r3, [r7, #20]
  tmpreg2 |= ((sConfig->DAC_Trigger2 & DAC_CR_TSEL1) >> DAC_CR_TSEL1_Pos) << DAC_STMODR_STINCTRIGSEL1_Pos;
 8004086:	68bb      	ldr	r3, [r7, #8]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	089b      	lsrs	r3, r3, #2
 800408c:	021b      	lsls	r3, r3, #8
 800408e:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8004092:	697a      	ldr	r2, [r7, #20]
 8004094:	4313      	orrs	r3, r2
 8004096:	617b      	str	r3, [r7, #20]
  /* Modify STMODR register value depending on DAC_Channel */
  MODIFY_REG(hdac->Instance->STMODR, (DAC_STMODR_STINCTRIGSEL1 | DAC_STMODR_STRSTTRIGSEL1)
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	6e1a      	ldr	r2, [r3, #96]	@ 0x60
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	f003 0310 	and.w	r3, r3, #16
 80040a4:	f640 710f 	movw	r1, #3855	@ 0xf0f
 80040a8:	fa01 f303 	lsl.w	r3, r1, r3
 80040ac:	43db      	mvns	r3, r3
 80040ae:	ea02 0103 	and.w	r1, r2, r3
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	f003 0310 	and.w	r3, r3, #16
 80040b8:	697a      	ldr	r2, [r7, #20]
 80040ba:	409a      	lsls	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	430a      	orrs	r2, r1
 80040c2:	661a      	str	r2, [r3, #96]	@ 0x60
             << (Channel & 0x10UL), tmpreg2 << (Channel & 0x10UL));
  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	2201      	movs	r2, #1
 80040c8:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2200      	movs	r2, #0
 80040ce:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80040d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80040d2:	4618      	mov	r0, r3
 80040d4:	3728      	adds	r7, #40	@ 0x28
 80040d6:	46bd      	mov	sp, r7
 80040d8:	bd80      	pop	{r7, pc}
 80040da:	bf00      	nop
 80040dc:	09896800 	.word	0x09896800
 80040e0:	04c4b400 	.word	0x04c4b400

080040e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80040e4:	b580      	push	{r7, lr}
 80040e6:	b084      	sub	sp, #16
 80040e8:	af00      	add	r7, sp, #0
 80040ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d101      	bne.n	80040f6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 80040f2:	2301      	movs	r3, #1
 80040f4:	e168      	b.n	80043c8 <HAL_DMA_Init+0x2e4>
  }

  /* Check the parameters */
  assert_param(IS_DMA_ALL_INSTANCE(hdma->Instance));
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	4a66      	ldr	r2, [pc, #408]	@ (8004294 <HAL_DMA_Init+0x1b0>)
 80040fc:	4293      	cmp	r3, r2
 80040fe:	d03a      	beq.n	8004176 <HAL_DMA_Init+0x92>
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	4a64      	ldr	r2, [pc, #400]	@ (8004298 <HAL_DMA_Init+0x1b4>)
 8004106:	4293      	cmp	r3, r2
 8004108:	d035      	beq.n	8004176 <HAL_DMA_Init+0x92>
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	4a63      	ldr	r2, [pc, #396]	@ (800429c <HAL_DMA_Init+0x1b8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d030      	beq.n	8004176 <HAL_DMA_Init+0x92>
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	4a61      	ldr	r2, [pc, #388]	@ (80042a0 <HAL_DMA_Init+0x1bc>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02b      	beq.n	8004176 <HAL_DMA_Init+0x92>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4a60      	ldr	r2, [pc, #384]	@ (80042a4 <HAL_DMA_Init+0x1c0>)
 8004124:	4293      	cmp	r3, r2
 8004126:	d026      	beq.n	8004176 <HAL_DMA_Init+0x92>
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4a5e      	ldr	r2, [pc, #376]	@ (80042a8 <HAL_DMA_Init+0x1c4>)
 800412e:	4293      	cmp	r3, r2
 8004130:	d021      	beq.n	8004176 <HAL_DMA_Init+0x92>
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	681b      	ldr	r3, [r3, #0]
 8004136:	4a5d      	ldr	r2, [pc, #372]	@ (80042ac <HAL_DMA_Init+0x1c8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d01c      	beq.n	8004176 <HAL_DMA_Init+0x92>
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	4a5b      	ldr	r2, [pc, #364]	@ (80042b0 <HAL_DMA_Init+0x1cc>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <HAL_DMA_Init+0x92>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	4a5a      	ldr	r2, [pc, #360]	@ (80042b4 <HAL_DMA_Init+0x1d0>)
 800414c:	4293      	cmp	r3, r2
 800414e:	d012      	beq.n	8004176 <HAL_DMA_Init+0x92>
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	4a58      	ldr	r2, [pc, #352]	@ (80042b8 <HAL_DMA_Init+0x1d4>)
 8004156:	4293      	cmp	r3, r2
 8004158:	d00d      	beq.n	8004176 <HAL_DMA_Init+0x92>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	681b      	ldr	r3, [r3, #0]
 800415e:	4a57      	ldr	r2, [pc, #348]	@ (80042bc <HAL_DMA_Init+0x1d8>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d008      	beq.n	8004176 <HAL_DMA_Init+0x92>
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	4a55      	ldr	r2, [pc, #340]	@ (80042c0 <HAL_DMA_Init+0x1dc>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <HAL_DMA_Init+0x92>
 800416e:	21a3      	movs	r1, #163	@ 0xa3
 8004170:	4854      	ldr	r0, [pc, #336]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 8004172:	f7fd f8a1 	bl	80012b8 <assert_failed>
  assert_param(IS_DMA_DIRECTION(hdma->Init.Direction));
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	689b      	ldr	r3, [r3, #8]
 800417a:	2b00      	cmp	r3, #0
 800417c:	d00c      	beq.n	8004198 <HAL_DMA_Init+0xb4>
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	2b10      	cmp	r3, #16
 8004184:	d008      	beq.n	8004198 <HAL_DMA_Init+0xb4>
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	689b      	ldr	r3, [r3, #8]
 800418a:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800418e:	d003      	beq.n	8004198 <HAL_DMA_Init+0xb4>
 8004190:	21a4      	movs	r1, #164	@ 0xa4
 8004192:	484c      	ldr	r0, [pc, #304]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 8004194:	f7fd f890 	bl	80012b8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_INC_STATE(hdma->Init.PeriphInc));
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	68db      	ldr	r3, [r3, #12]
 800419c:	2b40      	cmp	r3, #64	@ 0x40
 800419e:	d007      	beq.n	80041b0 <HAL_DMA_Init+0xcc>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	68db      	ldr	r3, [r3, #12]
 80041a4:	2b00      	cmp	r3, #0
 80041a6:	d003      	beq.n	80041b0 <HAL_DMA_Init+0xcc>
 80041a8:	21a5      	movs	r1, #165	@ 0xa5
 80041aa:	4846      	ldr	r0, [pc, #280]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 80041ac:	f7fd f884 	bl	80012b8 <assert_failed>
  assert_param(IS_DMA_MEMORY_INC_STATE(hdma->Init.MemInc));
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	691b      	ldr	r3, [r3, #16]
 80041b4:	2b80      	cmp	r3, #128	@ 0x80
 80041b6:	d007      	beq.n	80041c8 <HAL_DMA_Init+0xe4>
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d003      	beq.n	80041c8 <HAL_DMA_Init+0xe4>
 80041c0:	21a6      	movs	r1, #166	@ 0xa6
 80041c2:	4840      	ldr	r0, [pc, #256]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 80041c4:	f7fd f878 	bl	80012b8 <assert_failed>
  assert_param(IS_DMA_PERIPHERAL_DATA_SIZE(hdma->Init.PeriphDataAlignment));
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	695b      	ldr	r3, [r3, #20]
 80041cc:	2b00      	cmp	r3, #0
 80041ce:	d00d      	beq.n	80041ec <HAL_DMA_Init+0x108>
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	695b      	ldr	r3, [r3, #20]
 80041d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041d8:	d008      	beq.n	80041ec <HAL_DMA_Init+0x108>
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	695b      	ldr	r3, [r3, #20]
 80041de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80041e2:	d003      	beq.n	80041ec <HAL_DMA_Init+0x108>
 80041e4:	21a7      	movs	r1, #167	@ 0xa7
 80041e6:	4837      	ldr	r0, [pc, #220]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 80041e8:	f7fd f866 	bl	80012b8 <assert_failed>
  assert_param(IS_DMA_MEMORY_DATA_SIZE(hdma->Init.MemDataAlignment));
 80041ec:	687b      	ldr	r3, [r7, #4]
 80041ee:	699b      	ldr	r3, [r3, #24]
 80041f0:	2b00      	cmp	r3, #0
 80041f2:	d00d      	beq.n	8004210 <HAL_DMA_Init+0x12c>
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	699b      	ldr	r3, [r3, #24]
 80041f8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80041fc:	d008      	beq.n	8004210 <HAL_DMA_Init+0x12c>
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	699b      	ldr	r3, [r3, #24]
 8004202:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004206:	d003      	beq.n	8004210 <HAL_DMA_Init+0x12c>
 8004208:	21a8      	movs	r1, #168	@ 0xa8
 800420a:	482e      	ldr	r0, [pc, #184]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 800420c:	f7fd f854 	bl	80012b8 <assert_failed>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	69db      	ldr	r3, [r3, #28]
 8004214:	2b00      	cmp	r3, #0
 8004216:	d007      	beq.n	8004228 <HAL_DMA_Init+0x144>
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	69db      	ldr	r3, [r3, #28]
 800421c:	2b20      	cmp	r3, #32
 800421e:	d003      	beq.n	8004228 <HAL_DMA_Init+0x144>
 8004220:	21a9      	movs	r1, #169	@ 0xa9
 8004222:	4828      	ldr	r0, [pc, #160]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 8004224:	f7fd f848 	bl	80012b8 <assert_failed>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	6a1b      	ldr	r3, [r3, #32]
 800422c:	2b00      	cmp	r3, #0
 800422e:	d012      	beq.n	8004256 <HAL_DMA_Init+0x172>
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	6a1b      	ldr	r3, [r3, #32]
 8004234:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004238:	d00d      	beq.n	8004256 <HAL_DMA_Init+0x172>
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	6a1b      	ldr	r3, [r3, #32]
 800423e:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004242:	d008      	beq.n	8004256 <HAL_DMA_Init+0x172>
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	6a1b      	ldr	r3, [r3, #32]
 8004248:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 800424c:	d003      	beq.n	8004256 <HAL_DMA_Init+0x172>
 800424e:	21aa      	movs	r1, #170	@ 0xaa
 8004250:	481c      	ldr	r0, [pc, #112]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 8004252:	f7fd f831 	bl	80012b8 <assert_failed>

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	685b      	ldr	r3, [r3, #4]
 800425a:	2b73      	cmp	r3, #115	@ 0x73
 800425c:	d903      	bls.n	8004266 <HAL_DMA_Init+0x182>
 800425e:	21ac      	movs	r1, #172	@ 0xac
 8004260:	4818      	ldr	r0, [pc, #96]	@ (80042c4 <HAL_DMA_Init+0x1e0>)
 8004262:	f7fd f829 	bl	80012b8 <assert_failed>

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	461a      	mov	r2, r3
 800426c:	4b16      	ldr	r3, [pc, #88]	@ (80042c8 <HAL_DMA_Init+0x1e4>)
 800426e:	429a      	cmp	r2, r3
 8004270:	d832      	bhi.n	80042d8 <HAL_DMA_Init+0x1f4>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	4b14      	ldr	r3, [pc, #80]	@ (80042cc <HAL_DMA_Init+0x1e8>)
 800427a:	4413      	add	r3, r2
 800427c:	4a14      	ldr	r2, [pc, #80]	@ (80042d0 <HAL_DMA_Init+0x1ec>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	091b      	lsrs	r3, r3, #4
 8004284:	009a      	lsls	r2, r3, #2
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA1;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	4a11      	ldr	r2, [pc, #68]	@ (80042d4 <HAL_DMA_Init+0x1f0>)
 800428e:	641a      	str	r2, [r3, #64]	@ 0x40
 8004290:	e031      	b.n	80042f6 <HAL_DMA_Init+0x212>
 8004292:	bf00      	nop
 8004294:	40020008 	.word	0x40020008
 8004298:	4002001c 	.word	0x4002001c
 800429c:	40020030 	.word	0x40020030
 80042a0:	40020044 	.word	0x40020044
 80042a4:	40020058 	.word	0x40020058
 80042a8:	4002006c 	.word	0x4002006c
 80042ac:	40020408 	.word	0x40020408
 80042b0:	4002041c 	.word	0x4002041c
 80042b4:	40020430 	.word	0x40020430
 80042b8:	40020444 	.word	0x40020444
 80042bc:	40020458 	.word	0x40020458
 80042c0:	4002046c 	.word	0x4002046c
 80042c4:	0800c270 	.word	0x0800c270
 80042c8:	40020407 	.word	0x40020407
 80042cc:	bffdfff8 	.word	0xbffdfff8
 80042d0:	cccccccd 	.word	0xcccccccd
 80042d4:	40020000 	.word	0x40020000
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	461a      	mov	r2, r3
 80042de:	4b3c      	ldr	r3, [pc, #240]	@ (80043d0 <HAL_DMA_Init+0x2ec>)
 80042e0:	4413      	add	r3, r2
 80042e2:	4a3c      	ldr	r2, [pc, #240]	@ (80043d4 <HAL_DMA_Init+0x2f0>)
 80042e4:	fba2 2303 	umull	r2, r3, r2, r3
 80042e8:	091b      	lsrs	r3, r3, #4
 80042ea:	009a      	lsls	r2, r3, #2
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	645a      	str	r2, [r3, #68]	@ 0x44
    hdma->DmaBaseAddress = DMA2;
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	4a39      	ldr	r2, [pc, #228]	@ (80043d8 <HAL_DMA_Init+0x2f4>)
 80042f4:	641a      	str	r2, [r3, #64]	@ 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	2202      	movs	r2, #2
 80042fa:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	681b      	ldr	r3, [r3, #0]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	f423 43ff 	bic.w	r3, r3, #32640	@ 0x7f80
 800430c:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004310:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800431a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	691b      	ldr	r3, [r3, #16]
 8004320:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004326:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	699b      	ldr	r3, [r3, #24]
 800432c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004332:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6a1b      	ldr	r3, [r3, #32]
 8004338:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800433a:	68fa      	ldr	r2, [r7, #12]
 800433c:	4313      	orrs	r3, r2
 800433e:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68fa      	ldr	r2, [r7, #12]
 8004346:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 8004348:	6878      	ldr	r0, [r7, #4]
 800434a:	f000 f9b7 	bl	80046bc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004356:	d102      	bne.n	800435e <HAL_DMA_Init+0x27a>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2200      	movs	r2, #0
 800435c:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	685a      	ldr	r2, [r3, #4]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004366:	b2d2      	uxtb	r2, r2
 8004368:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800436e:	687a      	ldr	r2, [r7, #4]
 8004370:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8004372:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d010      	beq.n	800439e <HAL_DMA_Init+0x2ba>
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	685b      	ldr	r3, [r3, #4]
 8004380:	2b04      	cmp	r3, #4
 8004382:	d80c      	bhi.n	800439e <HAL_DMA_Init+0x2ba>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004384:	6878      	ldr	r0, [r7, #4]
 8004386:	f000 f9d7 	bl	8004738 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438e:	2200      	movs	r2, #0
 8004390:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004396:	687a      	ldr	r2, [r7, #4]
 8004398:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800439a:	605a      	str	r2, [r3, #4]
 800439c:	e008      	b.n	80043b0 <HAL_DMA_Init+0x2cc>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	655a      	str	r2, [r3, #84]	@ 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	2200      	movs	r2, #0
 80043a8:	659a      	str	r2, [r3, #88]	@ 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	2200      	movs	r2, #0
 80043ae:	65da      	str	r2, [r3, #92]	@ 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	2201      	movs	r2, #1
 80043ba:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	2200      	movs	r2, #0
 80043c2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return HAL_OK;
 80043c6:	2300      	movs	r3, #0
}
 80043c8:	4618      	mov	r0, r3
 80043ca:	3710      	adds	r7, #16
 80043cc:	46bd      	mov	sp, r7
 80043ce:	bd80      	pop	{r7, pc}
 80043d0:	bffdfbf8 	.word	0xbffdfbf8
 80043d4:	cccccccd 	.word	0xcccccccd
 80043d8:	40020400 	.word	0x40020400

080043dc <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043e4:	2300      	movs	r3, #0
 80043e6:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80043ee:	b2db      	uxtb	r3, r3
 80043f0:	2b02      	cmp	r3, #2
 80043f2:	d005      	beq.n	8004400 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2204      	movs	r2, #4
 80043f8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 80043fa:	2301      	movs	r3, #1
 80043fc:	73fb      	strb	r3, [r7, #15]
 80043fe:	e037      	b.n	8004470 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f022 020e 	bic.w	r2, r2, #14
 800440e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004414:	681a      	ldr	r2, [r3, #0]
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800441a:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800441e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	681a      	ldr	r2, [r3, #0]
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	f022 0201 	bic.w	r2, r2, #1
 800442e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004434:	f003 021f 	and.w	r2, r3, #31
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800443c:	2101      	movs	r1, #1
 800443e:	fa01 f202 	lsl.w	r2, r1, r2
 8004442:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004448:	687a      	ldr	r2, [r7, #4]
 800444a:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800444c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004452:	2b00      	cmp	r3, #0
 8004454:	d00c      	beq.n	8004470 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800445a:	681a      	ldr	r2, [r3, #0]
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004460:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004464:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800446a:	687a      	ldr	r2, [r7, #4]
 800446c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 800446e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	2201      	movs	r2, #1
 8004474:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2200      	movs	r2, #0
 800447c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8004480:	7bfb      	ldrb	r3, [r7, #15]
}
 8004482:	4618      	mov	r0, r3
 8004484:	3714      	adds	r7, #20
 8004486:	46bd      	mov	sp, r7
 8004488:	f85d 7b04 	ldr.w	r7, [sp], #4
 800448c:	4770      	bx	lr

0800448e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800448e:	b580      	push	{r7, lr}
 8004490:	b084      	sub	sp, #16
 8004492:	af00      	add	r7, sp, #0
 8004494:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004496:	2300      	movs	r3, #0
 8004498:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 80044a0:	b2db      	uxtb	r3, r3
 80044a2:	2b02      	cmp	r3, #2
 80044a4:	d00d      	beq.n	80044c2 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	2204      	movs	r2, #4
 80044aa:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2201      	movs	r2, #1
 80044b0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2200      	movs	r2, #0
 80044b8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 80044bc:	2301      	movs	r3, #1
 80044be:	73fb      	strb	r3, [r7, #15]
 80044c0:	e047      	b.n	8004552 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	681a      	ldr	r2, [r3, #0]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f022 020e 	bic.w	r2, r2, #14
 80044d0:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	681b      	ldr	r3, [r3, #0]
 80044d6:	681a      	ldr	r2, [r3, #0]
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	681b      	ldr	r3, [r3, #0]
 80044dc:	f022 0201 	bic.w	r2, r2, #1
 80044e0:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80044ec:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80044f0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80044f6:	f003 021f 	and.w	r2, r3, #31
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044fe:	2101      	movs	r1, #1
 8004500:	fa01 f202 	lsl.w	r2, r1, r2
 8004504:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800450a:	687a      	ldr	r2, [r7, #4]
 800450c:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800450e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004514:	2b00      	cmp	r3, #0
 8004516:	d00c      	beq.n	8004532 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004522:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004526:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800452c:	687a      	ldr	r2, [r7, #4]
 800452e:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8004530:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	2201      	movs	r2, #1
 8004536:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	2200      	movs	r2, #0
 800453e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004546:	2b00      	cmp	r3, #0
 8004548:	d003      	beq.n	8004552 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	4798      	blx	r3
    }
  }
  return status;
 8004552:	7bfb      	ldrb	r3, [r7, #15]
}
 8004554:	4618      	mov	r0, r3
 8004556:	3710      	adds	r7, #16
 8004558:	46bd      	mov	sp, r7
 800455a:	bd80      	pop	{r7, pc}

0800455c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8004574:	687b      	ldr	r3, [r7, #4]
 8004576:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004578:	f003 031f 	and.w	r3, r3, #31
 800457c:	2204      	movs	r2, #4
 800457e:	409a      	lsls	r2, r3
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	4013      	ands	r3, r2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d026      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x7a>
 8004588:	68bb      	ldr	r3, [r7, #8]
 800458a:	f003 0304 	and.w	r3, r3, #4
 800458e:	2b00      	cmp	r3, #0
 8004590:	d021      	beq.n	80045d6 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	f003 0320 	and.w	r3, r3, #32
 800459c:	2b00      	cmp	r3, #0
 800459e:	d107      	bne.n	80045b0 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	681a      	ldr	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f022 0204 	bic.w	r2, r2, #4
 80045ae:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045b4:	f003 021f 	and.w	r2, r3, #31
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045bc:	2104      	movs	r1, #4
 80045be:	fa01 f202 	lsl.w	r2, r1, r2
 80045c2:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045c8:	2b00      	cmp	r3, #0
 80045ca:	d071      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045d0:	6878      	ldr	r0, [r7, #4]
 80045d2:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045d4:	e06c      	b.n	80046b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80045da:	f003 031f 	and.w	r3, r3, #31
 80045de:	2202      	movs	r2, #2
 80045e0:	409a      	lsls	r2, r3
 80045e2:	68fb      	ldr	r3, [r7, #12]
 80045e4:	4013      	ands	r3, r2
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02e      	beq.n	8004648 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045ea:	68bb      	ldr	r3, [r7, #8]
 80045ec:	f003 0302 	and.w	r3, r3, #2
 80045f0:	2b00      	cmp	r3, #0
 80045f2:	d029      	beq.n	8004648 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	681b      	ldr	r3, [r3, #0]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	f003 0320 	and.w	r3, r3, #32
 80045fe:	2b00      	cmp	r3, #0
 8004600:	d10b      	bne.n	800461a <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 020a 	bic.w	r2, r2, #10
 8004610:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2201      	movs	r2, #1
 8004616:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800461e:	f003 021f 	and.w	r2, r3, #31
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004626:	2102      	movs	r1, #2
 8004628:	fa01 f202 	lsl.w	r2, r1, r2
 800462c:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	2200      	movs	r2, #0
 8004632:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800463a:	2b00      	cmp	r3, #0
 800463c:	d038      	beq.n	80046b0 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004642:	6878      	ldr	r0, [r7, #4]
 8004644:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004646:	e033      	b.n	80046b0 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800464c:	f003 031f 	and.w	r3, r3, #31
 8004650:	2208      	movs	r2, #8
 8004652:	409a      	lsls	r2, r3
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	4013      	ands	r3, r2
 8004658:	2b00      	cmp	r3, #0
 800465a:	d02a      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 800465c:	68bb      	ldr	r3, [r7, #8]
 800465e:	f003 0308 	and.w	r3, r3, #8
 8004662:	2b00      	cmp	r3, #0
 8004664:	d025      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004666:	687b      	ldr	r3, [r7, #4]
 8004668:	681b      	ldr	r3, [r3, #0]
 800466a:	681a      	ldr	r2, [r3, #0]
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f022 020e 	bic.w	r2, r2, #14
 8004674:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800467a:	f003 021f 	and.w	r2, r3, #31
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004682:	2101      	movs	r1, #1
 8004684:	fa01 f202 	lsl.w	r2, r1, r2
 8004688:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	2201      	movs	r2, #1
 800468e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	2201      	movs	r2, #1
 8004694:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	2200      	movs	r2, #0
 800469c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d004      	beq.n	80046b2 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80046ac:	6878      	ldr	r0, [r7, #4]
 80046ae:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 80046b0:	bf00      	nop
 80046b2:	bf00      	nop
}
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
	...

080046bc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80046bc:	b480      	push	{r7}
 80046be:	b087      	sub	sp, #28
 80046c0:	af00      	add	r7, sp, #0
 80046c2:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	461a      	mov	r2, r3
 80046ca:	4b16      	ldr	r3, [pc, #88]	@ (8004724 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 80046cc:	429a      	cmp	r2, r3
 80046ce:	d802      	bhi.n	80046d6 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 80046d0:	4b15      	ldr	r3, [pc, #84]	@ (8004728 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	e001      	b.n	80046da <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
#elif defined (STM32G431xx) || defined (STM32G441xx) || defined (STM32GBK1CB)
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
 80046d6:	4b15      	ldr	r3, [pc, #84]	@ (800472c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 80046d8:	617b      	str	r3, [r7, #20]
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 80046da:	697b      	ldr	r3, [r7, #20]
 80046dc:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	b2db      	uxtb	r3, r3
 80046e4:	3b08      	subs	r3, #8
 80046e6:	4a12      	ldr	r2, [pc, #72]	@ (8004730 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 80046e8:	fba2 2303 	umull	r2, r3, r2, r3
 80046ec:	091b      	lsrs	r3, r3, #4
 80046ee:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80046f4:	089b      	lsrs	r3, r3, #2
 80046f6:	009a      	lsls	r2, r3, #2
 80046f8:	693b      	ldr	r3, [r7, #16]
 80046fa:	4413      	add	r3, r2
 80046fc:	461a      	mov	r2, r3
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	649a      	str	r2, [r3, #72]	@ 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a0b      	ldr	r2, [pc, #44]	@ (8004734 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004706:	64da      	str	r2, [r3, #76]	@ 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	f003 031f 	and.w	r3, r3, #31
 800470e:	2201      	movs	r2, #1
 8004710:	409a      	lsls	r2, r3
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	651a      	str	r2, [r3, #80]	@ 0x50
}
 8004716:	bf00      	nop
 8004718:	371c      	adds	r7, #28
 800471a:	46bd      	mov	sp, r7
 800471c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004720:	4770      	bx	lr
 8004722:	bf00      	nop
 8004724:	40020407 	.word	0x40020407
 8004728:	40020800 	.word	0x40020800
 800472c:	40020820 	.word	0x40020820
 8004730:	cccccccd 	.word	0xcccccccd
 8004734:	40020880 	.word	0x40020880

08004738 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004738:	b480      	push	{r7}
 800473a:	b085      	sub	sp, #20
 800473c:	af00      	add	r7, sp, #0
 800473e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	685b      	ldr	r3, [r3, #4]
 8004744:	b2db      	uxtb	r3, r3
 8004746:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800474c:	4413      	add	r3, r2
 800474e:	009b      	lsls	r3, r3, #2
 8004750:	461a      	mov	r2, r3
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	655a      	str	r2, [r3, #84]	@ 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	4a08      	ldr	r2, [pc, #32]	@ (800477c <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800475a:	659a      	str	r2, [r3, #88]	@ 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	3b01      	subs	r3, #1
 8004760:	f003 031f 	and.w	r3, r3, #31
 8004764:	2201      	movs	r2, #1
 8004766:	409a      	lsls	r2, r3
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	65da      	str	r2, [r3, #92]	@ 0x5c
}
 800476c:	bf00      	nop
 800476e:	3714      	adds	r7, #20
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr
 8004778:	1000823f 	.word	0x1000823f
 800477c:	40020940 	.word	0x40020940

08004780 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004780:	b580      	push	{r7, lr}
 8004782:	b086      	sub	sp, #24
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800478a:	2300      	movs	r3, #0
 800478c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004794:	d01b      	beq.n	80047ce <HAL_GPIO_Init+0x4e>
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	4a37      	ldr	r2, [pc, #220]	@ (8004878 <HAL_GPIO_Init+0xf8>)
 800479a:	4293      	cmp	r3, r2
 800479c:	d017      	beq.n	80047ce <HAL_GPIO_Init+0x4e>
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	4a36      	ldr	r2, [pc, #216]	@ (800487c <HAL_GPIO_Init+0xfc>)
 80047a2:	4293      	cmp	r3, r2
 80047a4:	d013      	beq.n	80047ce <HAL_GPIO_Init+0x4e>
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	4a35      	ldr	r2, [pc, #212]	@ (8004880 <HAL_GPIO_Init+0x100>)
 80047aa:	4293      	cmp	r3, r2
 80047ac:	d00f      	beq.n	80047ce <HAL_GPIO_Init+0x4e>
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	4a34      	ldr	r2, [pc, #208]	@ (8004884 <HAL_GPIO_Init+0x104>)
 80047b2:	4293      	cmp	r3, r2
 80047b4:	d00b      	beq.n	80047ce <HAL_GPIO_Init+0x4e>
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	4a33      	ldr	r2, [pc, #204]	@ (8004888 <HAL_GPIO_Init+0x108>)
 80047ba:	4293      	cmp	r3, r2
 80047bc:	d007      	beq.n	80047ce <HAL_GPIO_Init+0x4e>
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	4a32      	ldr	r2, [pc, #200]	@ (800488c <HAL_GPIO_Init+0x10c>)
 80047c2:	4293      	cmp	r3, r2
 80047c4:	d003      	beq.n	80047ce <HAL_GPIO_Init+0x4e>
 80047c6:	21a9      	movs	r1, #169	@ 0xa9
 80047c8:	4831      	ldr	r0, [pc, #196]	@ (8004890 <HAL_GPIO_Init+0x110>)
 80047ca:	f7fc fd75 	bl	80012b8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 80047ce:	683b      	ldr	r3, [r7, #0]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	b29b      	uxth	r3, r3
 80047d4:	2b00      	cmp	r3, #0
 80047d6:	d004      	beq.n	80047e2 <HAL_GPIO_Init+0x62>
 80047d8:	683b      	ldr	r3, [r7, #0]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80047e0:	d303      	bcc.n	80047ea <HAL_GPIO_Init+0x6a>
 80047e2:	21aa      	movs	r1, #170	@ 0xaa
 80047e4:	482a      	ldr	r0, [pc, #168]	@ (8004890 <HAL_GPIO_Init+0x110>)
 80047e6:	f7fc fd67 	bl	80012b8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 80047ea:	683b      	ldr	r3, [r7, #0]
 80047ec:	685b      	ldr	r3, [r3, #4]
 80047ee:	2b00      	cmp	r3, #0
 80047f0:	f000 8209 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	f000 8204 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 80047fe:	683b      	ldr	r3, [r7, #0]
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2b11      	cmp	r3, #17
 8004804:	f000 81ff 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	685b      	ldr	r3, [r3, #4]
 800480c:	2b02      	cmp	r3, #2
 800480e:	f000 81fa 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 8004812:	683b      	ldr	r3, [r7, #0]
 8004814:	685b      	ldr	r3, [r3, #4]
 8004816:	2b12      	cmp	r3, #18
 8004818:	f000 81f5 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 800481c:	683b      	ldr	r3, [r7, #0]
 800481e:	685b      	ldr	r3, [r3, #4]
 8004820:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8004824:	f000 81ef 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	685b      	ldr	r3, [r3, #4]
 800482c:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8004830:	f000 81e9 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 800483c:	f000 81e3 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 8004840:	683b      	ldr	r3, [r7, #0]
 8004842:	685b      	ldr	r3, [r3, #4]
 8004844:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 8004848:	f000 81dd 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8004854:	f000 81d7 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 8004858:	683b      	ldr	r3, [r7, #0]
 800485a:	685b      	ldr	r3, [r3, #4]
 800485c:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8004860:	f000 81d1 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	685b      	ldr	r3, [r3, #4]
 8004868:	2b03      	cmp	r3, #3
 800486a:	f000 81cc 	beq.w	8004c06 <HAL_GPIO_Init+0x486>
 800486e:	21ab      	movs	r1, #171	@ 0xab
 8004870:	4807      	ldr	r0, [pc, #28]	@ (8004890 <HAL_GPIO_Init+0x110>)
 8004872:	f7fc fd21 	bl	80012b8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004876:	e1c6      	b.n	8004c06 <HAL_GPIO_Init+0x486>
 8004878:	48000400 	.word	0x48000400
 800487c:	48000800 	.word	0x48000800
 8004880:	48000c00 	.word	0x48000c00
 8004884:	48001000 	.word	0x48001000
 8004888:	48001400 	.word	0x48001400
 800488c:	48001800 	.word	0x48001800
 8004890:	0800c2a8 	.word	0x0800c2a8
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	2101      	movs	r1, #1
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	fa01 f303 	lsl.w	r3, r1, r3
 80048a0:	4013      	ands	r3, r2
 80048a2:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	f000 81aa 	beq.w	8004c00 <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	f003 0303 	and.w	r3, r3, #3
 80048b4:	2b01      	cmp	r3, #1
 80048b6:	d005      	beq.n	80048c4 <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80048c0:	2b02      	cmp	r3, #2
 80048c2:	d144      	bne.n	800494e <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80048c4:	683b      	ldr	r3, [r7, #0]
 80048c6:	68db      	ldr	r3, [r3, #12]
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00f      	beq.n	80048ec <HAL_GPIO_Init+0x16c>
 80048cc:	683b      	ldr	r3, [r7, #0]
 80048ce:	68db      	ldr	r3, [r3, #12]
 80048d0:	2b01      	cmp	r3, #1
 80048d2:	d00b      	beq.n	80048ec <HAL_GPIO_Init+0x16c>
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	2b02      	cmp	r3, #2
 80048da:	d007      	beq.n	80048ec <HAL_GPIO_Init+0x16c>
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	68db      	ldr	r3, [r3, #12]
 80048e0:	2b03      	cmp	r3, #3
 80048e2:	d003      	beq.n	80048ec <HAL_GPIO_Init+0x16c>
 80048e4:	21bb      	movs	r1, #187	@ 0xbb
 80048e6:	488b      	ldr	r0, [pc, #556]	@ (8004b14 <HAL_GPIO_Init+0x394>)
 80048e8:	f7fc fce6 	bl	80012b8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	689b      	ldr	r3, [r3, #8]
 80048f0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 80048f2:	697b      	ldr	r3, [r7, #20]
 80048f4:	005b      	lsls	r3, r3, #1
 80048f6:	2203      	movs	r2, #3
 80048f8:	fa02 f303 	lsl.w	r3, r2, r3
 80048fc:	43db      	mvns	r3, r3
 80048fe:	693a      	ldr	r2, [r7, #16]
 8004900:	4013      	ands	r3, r2
 8004902:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	68da      	ldr	r2, [r3, #12]
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	005b      	lsls	r3, r3, #1
 800490c:	fa02 f303 	lsl.w	r3, r2, r3
 8004910:	693a      	ldr	r2, [r7, #16]
 8004912:	4313      	orrs	r3, r2
 8004914:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	693a      	ldr	r2, [r7, #16]
 800491a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004922:	2201      	movs	r2, #1
 8004924:	697b      	ldr	r3, [r7, #20]
 8004926:	fa02 f303 	lsl.w	r3, r2, r3
 800492a:	43db      	mvns	r3, r3
 800492c:	693a      	ldr	r2, [r7, #16]
 800492e:	4013      	ands	r3, r2
 8004930:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	091b      	lsrs	r3, r3, #4
 8004938:	f003 0201 	and.w	r2, r3, #1
 800493c:	697b      	ldr	r3, [r7, #20]
 800493e:	fa02 f303 	lsl.w	r3, r2, r3
 8004942:	693a      	ldr	r2, [r7, #16]
 8004944:	4313      	orrs	r3, r2
 8004946:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	693a      	ldr	r2, [r7, #16]
 800494c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800494e:	683b      	ldr	r3, [r7, #0]
 8004950:	685b      	ldr	r3, [r3, #4]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b03      	cmp	r3, #3
 8004958:	d027      	beq.n	80049aa <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 800495a:	683b      	ldr	r3, [r7, #0]
 800495c:	689b      	ldr	r3, [r3, #8]
 800495e:	2b00      	cmp	r3, #0
 8004960:	d00b      	beq.n	800497a <HAL_GPIO_Init+0x1fa>
 8004962:	683b      	ldr	r3, [r7, #0]
 8004964:	689b      	ldr	r3, [r3, #8]
 8004966:	2b01      	cmp	r3, #1
 8004968:	d007      	beq.n	800497a <HAL_GPIO_Init+0x1fa>
 800496a:	683b      	ldr	r3, [r7, #0]
 800496c:	689b      	ldr	r3, [r3, #8]
 800496e:	2b02      	cmp	r3, #2
 8004970:	d003      	beq.n	800497a <HAL_GPIO_Init+0x1fa>
 8004972:	21cc      	movs	r1, #204	@ 0xcc
 8004974:	4867      	ldr	r0, [pc, #412]	@ (8004b14 <HAL_GPIO_Init+0x394>)
 8004976:	f7fc fc9f 	bl	80012b8 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	68db      	ldr	r3, [r3, #12]
 800497e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004980:	697b      	ldr	r3, [r7, #20]
 8004982:	005b      	lsls	r3, r3, #1
 8004984:	2203      	movs	r2, #3
 8004986:	fa02 f303 	lsl.w	r3, r2, r3
 800498a:	43db      	mvns	r3, r3
 800498c:	693a      	ldr	r2, [r7, #16]
 800498e:	4013      	ands	r3, r2
 8004990:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	689a      	ldr	r2, [r3, #8]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	005b      	lsls	r3, r3, #1
 800499a:	fa02 f303 	lsl.w	r3, r2, r3
 800499e:	693a      	ldr	r2, [r7, #16]
 80049a0:	4313      	orrs	r3, r2
 80049a2:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	693a      	ldr	r2, [r7, #16]
 80049a8:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	f003 0303 	and.w	r3, r3, #3
 80049b2:	2b02      	cmp	r3, #2
 80049b4:	d14b      	bne.n	8004a4e <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80049bc:	d01b      	beq.n	80049f6 <HAL_GPIO_Init+0x276>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a55      	ldr	r2, [pc, #340]	@ (8004b18 <HAL_GPIO_Init+0x398>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d017      	beq.n	80049f6 <HAL_GPIO_Init+0x276>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a54      	ldr	r2, [pc, #336]	@ (8004b1c <HAL_GPIO_Init+0x39c>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d013      	beq.n	80049f6 <HAL_GPIO_Init+0x276>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a53      	ldr	r2, [pc, #332]	@ (8004b20 <HAL_GPIO_Init+0x3a0>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d00f      	beq.n	80049f6 <HAL_GPIO_Init+0x276>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a52      	ldr	r2, [pc, #328]	@ (8004b24 <HAL_GPIO_Init+0x3a4>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d00b      	beq.n	80049f6 <HAL_GPIO_Init+0x276>
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	4a51      	ldr	r2, [pc, #324]	@ (8004b28 <HAL_GPIO_Init+0x3a8>)
 80049e2:	4293      	cmp	r3, r2
 80049e4:	d007      	beq.n	80049f6 <HAL_GPIO_Init+0x276>
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	4a50      	ldr	r2, [pc, #320]	@ (8004b2c <HAL_GPIO_Init+0x3ac>)
 80049ea:	4293      	cmp	r3, r2
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x276>
 80049ee:	21d9      	movs	r1, #217	@ 0xd9
 80049f0:	4848      	ldr	r0, [pc, #288]	@ (8004b14 <HAL_GPIO_Init+0x394>)
 80049f2:	f7fc fc61 	bl	80012b8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	691b      	ldr	r3, [r3, #16]
 80049fa:	2b0f      	cmp	r3, #15
 80049fc:	d903      	bls.n	8004a06 <HAL_GPIO_Init+0x286>
 80049fe:	21da      	movs	r1, #218	@ 0xda
 8004a00:	4844      	ldr	r0, [pc, #272]	@ (8004b14 <HAL_GPIO_Init+0x394>)
 8004a02:	f7fc fc59 	bl	80012b8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	08da      	lsrs	r2, r3, #3
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	3208      	adds	r2, #8
 8004a0e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a12:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004a14:	697b      	ldr	r3, [r7, #20]
 8004a16:	f003 0307 	and.w	r3, r3, #7
 8004a1a:	009b      	lsls	r3, r3, #2
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a22:	43db      	mvns	r3, r3
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4013      	ands	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004a2a:	683b      	ldr	r3, [r7, #0]
 8004a2c:	691a      	ldr	r2, [r3, #16]
 8004a2e:	697b      	ldr	r3, [r7, #20]
 8004a30:	f003 0307 	and.w	r3, r3, #7
 8004a34:	009b      	lsls	r3, r3, #2
 8004a36:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3a:	693a      	ldr	r2, [r7, #16]
 8004a3c:	4313      	orrs	r3, r2
 8004a3e:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004a40:	697b      	ldr	r3, [r7, #20]
 8004a42:	08da      	lsrs	r2, r3, #3
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	3208      	adds	r2, #8
 8004a48:	6939      	ldr	r1, [r7, #16]
 8004a4a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	681b      	ldr	r3, [r3, #0]
 8004a52:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	005b      	lsls	r3, r3, #1
 8004a58:	2203      	movs	r2, #3
 8004a5a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a5e:	43db      	mvns	r3, r3
 8004a60:	693a      	ldr	r2, [r7, #16]
 8004a62:	4013      	ands	r3, r2
 8004a64:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004a66:	683b      	ldr	r3, [r7, #0]
 8004a68:	685b      	ldr	r3, [r3, #4]
 8004a6a:	f003 0203 	and.w	r2, r3, #3
 8004a6e:	697b      	ldr	r3, [r7, #20]
 8004a70:	005b      	lsls	r3, r3, #1
 8004a72:	fa02 f303 	lsl.w	r3, r2, r3
 8004a76:	693a      	ldr	r2, [r7, #16]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	693a      	ldr	r2, [r7, #16]
 8004a80:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	685b      	ldr	r3, [r3, #4]
 8004a86:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	f000 80b8 	beq.w	8004c00 <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004a90:	4b27      	ldr	r3, [pc, #156]	@ (8004b30 <HAL_GPIO_Init+0x3b0>)
 8004a92:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004a94:	4a26      	ldr	r2, [pc, #152]	@ (8004b30 <HAL_GPIO_Init+0x3b0>)
 8004a96:	f043 0301 	orr.w	r3, r3, #1
 8004a9a:	6613      	str	r3, [r2, #96]	@ 0x60
 8004a9c:	4b24      	ldr	r3, [pc, #144]	@ (8004b30 <HAL_GPIO_Init+0x3b0>)
 8004a9e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8004aa0:	f003 0301 	and.w	r3, r3, #1
 8004aa4:	60bb      	str	r3, [r7, #8]
 8004aa6:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004aa8:	4a22      	ldr	r2, [pc, #136]	@ (8004b34 <HAL_GPIO_Init+0x3b4>)
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	089b      	lsrs	r3, r3, #2
 8004aae:	3302      	adds	r3, #2
 8004ab0:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004ab4:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	f003 0303 	and.w	r3, r3, #3
 8004abc:	009b      	lsls	r3, r3, #2
 8004abe:	220f      	movs	r2, #15
 8004ac0:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac4:	43db      	mvns	r3, r3
 8004ac6:	693a      	ldr	r2, [r7, #16]
 8004ac8:	4013      	ands	r3, r2
 8004aca:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8004ad2:	d031      	beq.n	8004b38 <HAL_GPIO_Init+0x3b8>
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	4a10      	ldr	r2, [pc, #64]	@ (8004b18 <HAL_GPIO_Init+0x398>)
 8004ad8:	4293      	cmp	r3, r2
 8004ada:	d019      	beq.n	8004b10 <HAL_GPIO_Init+0x390>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	4a0f      	ldr	r2, [pc, #60]	@ (8004b1c <HAL_GPIO_Init+0x39c>)
 8004ae0:	4293      	cmp	r3, r2
 8004ae2:	d013      	beq.n	8004b0c <HAL_GPIO_Init+0x38c>
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	4a0e      	ldr	r2, [pc, #56]	@ (8004b20 <HAL_GPIO_Init+0x3a0>)
 8004ae8:	4293      	cmp	r3, r2
 8004aea:	d00d      	beq.n	8004b08 <HAL_GPIO_Init+0x388>
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	4a0d      	ldr	r2, [pc, #52]	@ (8004b24 <HAL_GPIO_Init+0x3a4>)
 8004af0:	4293      	cmp	r3, r2
 8004af2:	d007      	beq.n	8004b04 <HAL_GPIO_Init+0x384>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	4a0c      	ldr	r2, [pc, #48]	@ (8004b28 <HAL_GPIO_Init+0x3a8>)
 8004af8:	4293      	cmp	r3, r2
 8004afa:	d101      	bne.n	8004b00 <HAL_GPIO_Init+0x380>
 8004afc:	2305      	movs	r3, #5
 8004afe:	e01c      	b.n	8004b3a <HAL_GPIO_Init+0x3ba>
 8004b00:	2306      	movs	r3, #6
 8004b02:	e01a      	b.n	8004b3a <HAL_GPIO_Init+0x3ba>
 8004b04:	2304      	movs	r3, #4
 8004b06:	e018      	b.n	8004b3a <HAL_GPIO_Init+0x3ba>
 8004b08:	2303      	movs	r3, #3
 8004b0a:	e016      	b.n	8004b3a <HAL_GPIO_Init+0x3ba>
 8004b0c:	2302      	movs	r3, #2
 8004b0e:	e014      	b.n	8004b3a <HAL_GPIO_Init+0x3ba>
 8004b10:	2301      	movs	r3, #1
 8004b12:	e012      	b.n	8004b3a <HAL_GPIO_Init+0x3ba>
 8004b14:	0800c2a8 	.word	0x0800c2a8
 8004b18:	48000400 	.word	0x48000400
 8004b1c:	48000800 	.word	0x48000800
 8004b20:	48000c00 	.word	0x48000c00
 8004b24:	48001000 	.word	0x48001000
 8004b28:	48001400 	.word	0x48001400
 8004b2c:	48001800 	.word	0x48001800
 8004b30:	40021000 	.word	0x40021000
 8004b34:	40010000 	.word	0x40010000
 8004b38:	2300      	movs	r3, #0
 8004b3a:	697a      	ldr	r2, [r7, #20]
 8004b3c:	f002 0203 	and.w	r2, r2, #3
 8004b40:	0092      	lsls	r2, r2, #2
 8004b42:	4093      	lsls	r3, r2
 8004b44:	693a      	ldr	r2, [r7, #16]
 8004b46:	4313      	orrs	r3, r2
 8004b48:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004b4a:	4935      	ldr	r1, [pc, #212]	@ (8004c20 <HAL_GPIO_Init+0x4a0>)
 8004b4c:	697b      	ldr	r3, [r7, #20]
 8004b4e:	089b      	lsrs	r3, r3, #2
 8004b50:	3302      	adds	r3, #2
 8004b52:	693a      	ldr	r2, [r7, #16]
 8004b54:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004b58:	4b32      	ldr	r3, [pc, #200]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004b5a:	689b      	ldr	r3, [r3, #8]
 8004b5c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	43db      	mvns	r3, r3
 8004b62:	693a      	ldr	r2, [r7, #16]
 8004b64:	4013      	ands	r3, r2
 8004b66:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004b68:	683b      	ldr	r3, [r7, #0]
 8004b6a:	685b      	ldr	r3, [r3, #4]
 8004b6c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d003      	beq.n	8004b7c <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 8004b74:	693a      	ldr	r2, [r7, #16]
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	4313      	orrs	r3, r2
 8004b7a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004b7c:	4a29      	ldr	r2, [pc, #164]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004b7e:	693b      	ldr	r3, [r7, #16]
 8004b80:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004b82:	4b28      	ldr	r3, [pc, #160]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004b88:	68fb      	ldr	r3, [r7, #12]
 8004b8a:	43db      	mvns	r3, r3
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4013      	ands	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004b92:	683b      	ldr	r3, [r7, #0]
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d003      	beq.n	8004ba6 <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 8004b9e:	693a      	ldr	r2, [r7, #16]
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	4313      	orrs	r3, r2
 8004ba4:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004ba6:	4a1f      	ldr	r2, [pc, #124]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004ba8:	693b      	ldr	r3, [r7, #16]
 8004baa:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004bac:	4b1d      	ldr	r3, [pc, #116]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bb2:	68fb      	ldr	r3, [r7, #12]
 8004bb4:	43db      	mvns	r3, r3
 8004bb6:	693a      	ldr	r2, [r7, #16]
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004bbc:	683b      	ldr	r3, [r7, #0]
 8004bbe:	685b      	ldr	r3, [r3, #4]
 8004bc0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d003      	beq.n	8004bd0 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	4313      	orrs	r3, r2
 8004bce:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004bd0:	4a14      	ldr	r2, [pc, #80]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004bd2:	693b      	ldr	r3, [r7, #16]
 8004bd4:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004bd6:	4b13      	ldr	r3, [pc, #76]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	43db      	mvns	r3, r3
 8004be0:	693a      	ldr	r2, [r7, #16]
 8004be2:	4013      	ands	r3, r2
 8004be4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	685b      	ldr	r3, [r3, #4]
 8004bea:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8004bee:	2b00      	cmp	r3, #0
 8004bf0:	d003      	beq.n	8004bfa <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 8004bf2:	693a      	ldr	r2, [r7, #16]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4313      	orrs	r3, r2
 8004bf8:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8004c24 <HAL_GPIO_Init+0x4a4>)
 8004bfc:	693b      	ldr	r3, [r7, #16]
 8004bfe:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c00:	697b      	ldr	r3, [r7, #20]
 8004c02:	3301      	adds	r3, #1
 8004c04:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	681a      	ldr	r2, [r3, #0]
 8004c0a:	697b      	ldr	r3, [r7, #20]
 8004c0c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f47f ae3f 	bne.w	8004894 <HAL_GPIO_Init+0x114>
  }
}
 8004c16:	bf00      	nop
 8004c18:	bf00      	nop
 8004c1a:	3718      	adds	r7, #24
 8004c1c:	46bd      	mov	sp, r7
 8004c1e:	bd80      	pop	{r7, pc}
 8004c20:	40010000 	.word	0x40010000
 8004c24:	40010400 	.word	0x40010400

08004c28 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004c28:	b580      	push	{r7, lr}
 8004c2a:	b082      	sub	sp, #8
 8004c2c:	af00      	add	r7, sp, #0
 8004c2e:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	d101      	bne.n	8004c3a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e110      	b.n	8004e5c <HAL_I2C_Init+0x234>
  }

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4a89      	ldr	r2, [pc, #548]	@ (8004e64 <HAL_I2C_Init+0x23c>)
 8004c40:	4293      	cmp	r3, r2
 8004c42:	d00e      	beq.n	8004c62 <HAL_I2C_Init+0x3a>
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	681b      	ldr	r3, [r3, #0]
 8004c48:	4a87      	ldr	r2, [pc, #540]	@ (8004e68 <HAL_I2C_Init+0x240>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d009      	beq.n	8004c62 <HAL_I2C_Init+0x3a>
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a86      	ldr	r2, [pc, #536]	@ (8004e6c <HAL_I2C_Init+0x244>)
 8004c54:	4293      	cmp	r3, r2
 8004c56:	d004      	beq.n	8004c62 <HAL_I2C_Init+0x3a>
 8004c58:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8004c5c:	4884      	ldr	r0, [pc, #528]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004c5e:	f7fc fb2b 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS1(hi2c->Init.OwnAddress1));
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	689b      	ldr	r3, [r3, #8]
 8004c66:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004c6a:	d304      	bcc.n	8004c76 <HAL_I2C_Init+0x4e>
 8004c6c:	f240 2121 	movw	r1, #545	@ 0x221
 8004c70:	487f      	ldr	r0, [pc, #508]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004c72:	f7fc fb21 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_ADDRESSING_MODE(hi2c->Init.AddressingMode));
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	68db      	ldr	r3, [r3, #12]
 8004c7a:	2b01      	cmp	r3, #1
 8004c7c:	d008      	beq.n	8004c90 <HAL_I2C_Init+0x68>
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	68db      	ldr	r3, [r3, #12]
 8004c82:	2b02      	cmp	r3, #2
 8004c84:	d004      	beq.n	8004c90 <HAL_I2C_Init+0x68>
 8004c86:	f240 2122 	movw	r1, #546	@ 0x222
 8004c8a:	4879      	ldr	r0, [pc, #484]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004c8c:	f7fc fb14 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	691b      	ldr	r3, [r3, #16]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d009      	beq.n	8004cac <HAL_I2C_Init+0x84>
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	691b      	ldr	r3, [r3, #16]
 8004c9c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004ca0:	d004      	beq.n	8004cac <HAL_I2C_Init+0x84>
 8004ca2:	f240 2123 	movw	r1, #547	@ 0x223
 8004ca6:	4872      	ldr	r0, [pc, #456]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004ca8:	f7fc fb06 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	695b      	ldr	r3, [r3, #20]
 8004cb0:	2bff      	cmp	r3, #255	@ 0xff
 8004cb2:	d904      	bls.n	8004cbe <HAL_I2C_Init+0x96>
 8004cb4:	f44f 7109 	mov.w	r1, #548	@ 0x224
 8004cb8:	486d      	ldr	r0, [pc, #436]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004cba:	f7fc fafd 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	699b      	ldr	r3, [r3, #24]
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d020      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	699b      	ldr	r3, [r3, #24]
 8004cca:	2b01      	cmp	r3, #1
 8004ccc:	d01c      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	699b      	ldr	r3, [r3, #24]
 8004cd2:	2b02      	cmp	r3, #2
 8004cd4:	d018      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	699b      	ldr	r3, [r3, #24]
 8004cda:	2b03      	cmp	r3, #3
 8004cdc:	d014      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	699b      	ldr	r3, [r3, #24]
 8004ce2:	2b04      	cmp	r3, #4
 8004ce4:	d010      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	699b      	ldr	r3, [r3, #24]
 8004cea:	2b05      	cmp	r3, #5
 8004cec:	d00c      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	699b      	ldr	r3, [r3, #24]
 8004cf2:	2b06      	cmp	r3, #6
 8004cf4:	d008      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	2b07      	cmp	r3, #7
 8004cfc:	d004      	beq.n	8004d08 <HAL_I2C_Init+0xe0>
 8004cfe:	f240 2125 	movw	r1, #549	@ 0x225
 8004d02:	485b      	ldr	r0, [pc, #364]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004d04:	f7fc fad8 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	69db      	ldr	r3, [r3, #28]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d009      	beq.n	8004d24 <HAL_I2C_Init+0xfc>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	69db      	ldr	r3, [r3, #28]
 8004d14:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004d18:	d004      	beq.n	8004d24 <HAL_I2C_Init+0xfc>
 8004d1a:	f240 2126 	movw	r1, #550	@ 0x226
 8004d1e:	4854      	ldr	r0, [pc, #336]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004d20:	f7fc faca 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a1b      	ldr	r3, [r3, #32]
 8004d28:	2b00      	cmp	r3, #0
 8004d2a:	d009      	beq.n	8004d40 <HAL_I2C_Init+0x118>
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	6a1b      	ldr	r3, [r3, #32]
 8004d30:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004d34:	d004      	beq.n	8004d40 <HAL_I2C_Init+0x118>
 8004d36:	f240 2127 	movw	r1, #551	@ 0x227
 8004d3a:	484d      	ldr	r0, [pc, #308]	@ (8004e70 <HAL_I2C_Init+0x248>)
 8004d3c:	f7fc fabc 	bl	80012b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004d46:	b2db      	uxtb	r3, r3
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d106      	bne.n	8004d5a <HAL_I2C_Init+0x132>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	2200      	movs	r2, #0
 8004d50:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8004d54:	6878      	ldr	r0, [r7, #4]
 8004d56:	f7fc f9d7 	bl	8001108 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2224      	movs	r2, #36	@ 0x24
 8004d5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681a      	ldr	r2, [r3, #0]
 8004d68:	687b      	ldr	r3, [r7, #4]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f022 0201 	bic.w	r2, r2, #1
 8004d70:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	685a      	ldr	r2, [r3, #4]
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8004d7e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689a      	ldr	r2, [r3, #8]
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004d8e:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	68db      	ldr	r3, [r3, #12]
 8004d94:	2b01      	cmp	r3, #1
 8004d96:	d107      	bne.n	8004da8 <HAL_I2C_Init+0x180>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	689a      	ldr	r2, [r3, #8]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004da4:	609a      	str	r2, [r3, #8]
 8004da6:	e006      	b.n	8004db6 <HAL_I2C_Init+0x18e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	689a      	ldr	r2, [r3, #8]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 4204 	orr.w	r2, r2, #33792	@ 0x8400
 8004db4:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8004db6:	687b      	ldr	r3, [r7, #4]
 8004db8:	68db      	ldr	r3, [r3, #12]
 8004dba:	2b02      	cmp	r3, #2
 8004dbc:	d108      	bne.n	8004dd0 <HAL_I2C_Init+0x1a8>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	685a      	ldr	r2, [r3, #4]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004dcc:	605a      	str	r2, [r3, #4]
 8004dce:	e007      	b.n	8004de0 <HAL_I2C_Init+0x1b8>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004dde:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	687a      	ldr	r2, [r7, #4]
 8004de8:	6812      	ldr	r2, [r2, #0]
 8004dea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8004dee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8004df2:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	68da      	ldr	r2, [r3, #12]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8004e02:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	691a      	ldr	r2, [r3, #16]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	695b      	ldr	r3, [r3, #20]
 8004e0c:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	430a      	orrs	r2, r1
 8004e1c:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8004e1e:	687b      	ldr	r3, [r7, #4]
 8004e20:	69d9      	ldr	r1, [r3, #28]
 8004e22:	687b      	ldr	r3, [r7, #4]
 8004e24:	6a1a      	ldr	r2, [r3, #32]
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	681b      	ldr	r3, [r3, #0]
 8004e2a:	430a      	orrs	r2, r1
 8004e2c:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	681a      	ldr	r2, [r3, #0]
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	f042 0201 	orr.w	r2, r2, #1
 8004e3c:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2220      	movs	r2, #32
 8004e48:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2200      	movs	r2, #0
 8004e50:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2200      	movs	r2, #0
 8004e56:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  return HAL_OK;
 8004e5a:	2300      	movs	r3, #0
}
 8004e5c:	4618      	mov	r0, r3
 8004e5e:	3708      	adds	r7, #8
 8004e60:	46bd      	mov	sp, r7
 8004e62:	bd80      	pop	{r7, pc}
 8004e64:	40005400 	.word	0x40005400
 8004e68:	40005800 	.word	0x40005800
 8004e6c:	40007800 	.word	0x40007800
 8004e70:	0800c2e4 	.word	0x0800c2e4

08004e74 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8004e74:	b580      	push	{r7, lr}
 8004e76:	b082      	sub	sp, #8
 8004e78:	af00      	add	r7, sp, #0
 8004e7a:	6078      	str	r0, [r7, #4]
 8004e7c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	4a30      	ldr	r2, [pc, #192]	@ (8004f44 <HAL_I2CEx_ConfigAnalogFilter+0xd0>)
 8004e84:	4293      	cmp	r3, r2
 8004e86:	d00d      	beq.n	8004ea4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	4a2e      	ldr	r2, [pc, #184]	@ (8004f48 <HAL_I2CEx_ConfigAnalogFilter+0xd4>)
 8004e8e:	4293      	cmp	r3, r2
 8004e90:	d008      	beq.n	8004ea4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004e92:	687b      	ldr	r3, [r7, #4]
 8004e94:	681b      	ldr	r3, [r3, #0]
 8004e96:	4a2d      	ldr	r2, [pc, #180]	@ (8004f4c <HAL_I2CEx_ConfigAnalogFilter+0xd8>)
 8004e98:	4293      	cmp	r3, r2
 8004e9a:	d003      	beq.n	8004ea4 <HAL_I2CEx_ConfigAnalogFilter+0x30>
 8004e9c:	2163      	movs	r1, #99	@ 0x63
 8004e9e:	482c      	ldr	r0, [pc, #176]	@ (8004f50 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004ea0:	f7fc fa0a 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));
 8004ea4:	683b      	ldr	r3, [r7, #0]
 8004ea6:	2b00      	cmp	r3, #0
 8004ea8:	d007      	beq.n	8004eba <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004eb0:	d003      	beq.n	8004eba <HAL_I2CEx_ConfigAnalogFilter+0x46>
 8004eb2:	2164      	movs	r1, #100	@ 0x64
 8004eb4:	4826      	ldr	r0, [pc, #152]	@ (8004f50 <HAL_I2CEx_ConfigAnalogFilter+0xdc>)
 8004eb6:	f7fc f9ff 	bl	80012b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b20      	cmp	r3, #32
 8004ec4:	d138      	bne.n	8004f38 <HAL_I2CEx_ConfigAnalogFilter+0xc4>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004ecc:	2b01      	cmp	r3, #1
 8004ece:	d101      	bne.n	8004ed4 <HAL_I2CEx_ConfigAnalogFilter+0x60>
 8004ed0:	2302      	movs	r3, #2
 8004ed2:	e032      	b.n	8004f3a <HAL_I2CEx_ConfigAnalogFilter+0xc6>
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	2201      	movs	r2, #1
 8004ed8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	2224      	movs	r2, #36	@ 0x24
 8004ee0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	681a      	ldr	r2, [r3, #0]
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	681b      	ldr	r3, [r3, #0]
 8004eee:	f022 0201 	bic.w	r2, r2, #1
 8004ef2:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	681a      	ldr	r2, [r3, #0]
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f422 5280 	bic.w	r2, r2, #4096	@ 0x1000
 8004f02:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	6819      	ldr	r1, [r3, #0]
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	683a      	ldr	r2, [r7, #0]
 8004f10:	430a      	orrs	r2, r1
 8004f12:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	681a      	ldr	r2, [r3, #0]
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f042 0201 	orr.w	r2, r2, #1
 8004f22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2220      	movs	r2, #32
 8004f28:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	2200      	movs	r2, #0
 8004f30:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e000      	b.n	8004f3a <HAL_I2CEx_ConfigAnalogFilter+0xc6>
  }
  else
  {
    return HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	3708      	adds	r7, #8
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	bd80      	pop	{r7, pc}
 8004f42:	bf00      	nop
 8004f44:	40005400 	.word	0x40005400
 8004f48:	40005800 	.word	0x40005800
 8004f4c:	40007800 	.word	0x40007800
 8004f50:	0800c31c 	.word	0x0800c31c

08004f54 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b084      	sub	sp, #16
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
 8004f5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg;

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	4a2e      	ldr	r2, [pc, #184]	@ (800501c <HAL_I2CEx_ConfigDigitalFilter+0xc8>)
 8004f64:	4293      	cmp	r3, r2
 8004f66:	d00d      	beq.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a2c      	ldr	r2, [pc, #176]	@ (8005020 <HAL_I2CEx_ConfigDigitalFilter+0xcc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d008      	beq.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	4a2b      	ldr	r2, [pc, #172]	@ (8005024 <HAL_I2CEx_ConfigDigitalFilter+0xd0>)
 8004f78:	4293      	cmp	r3, r2
 8004f7a:	d003      	beq.n	8004f84 <HAL_I2CEx_ConfigDigitalFilter+0x30>
 8004f7c:	2191      	movs	r1, #145	@ 0x91
 8004f7e:	482a      	ldr	r0, [pc, #168]	@ (8005028 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004f80:	f7fc f99a 	bl	80012b8 <assert_failed>
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));
 8004f84:	683b      	ldr	r3, [r7, #0]
 8004f86:	2b0f      	cmp	r3, #15
 8004f88:	d903      	bls.n	8004f92 <HAL_I2CEx_ConfigDigitalFilter+0x3e>
 8004f8a:	2192      	movs	r1, #146	@ 0x92
 8004f8c:	4826      	ldr	r0, [pc, #152]	@ (8005028 <HAL_I2CEx_ConfigDigitalFilter+0xd4>)
 8004f8e:	f7fc f993 	bl	80012b8 <assert_failed>

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f98:	b2db      	uxtb	r3, r3
 8004f9a:	2b20      	cmp	r3, #32
 8004f9c:	d139      	bne.n	8005012 <HAL_I2CEx_ConfigDigitalFilter+0xbe>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004fa4:	2b01      	cmp	r3, #1
 8004fa6:	d101      	bne.n	8004fac <HAL_I2CEx_ConfigDigitalFilter+0x58>
 8004fa8:	2302      	movs	r3, #2
 8004faa:	e033      	b.n	8005014 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	2201      	movs	r2, #1
 8004fb0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2224      	movs	r2, #36	@ 0x24
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f022 0201 	bic.w	r2, r2, #1
 8004fca:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8004fcc:	687b      	ldr	r3, [r7, #4]
 8004fce:	681b      	ldr	r3, [r3, #0]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8004fda:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8004fdc:	683b      	ldr	r3, [r7, #0]
 8004fde:	021b      	lsls	r3, r3, #8
 8004fe0:	68fa      	ldr	r2, [r7, #12]
 8004fe2:	4313      	orrs	r3, r2
 8004fe4:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	68fa      	ldr	r2, [r7, #12]
 8004fec:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681a      	ldr	r2, [r3, #0]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f042 0201 	orr.w	r2, r2, #1
 8004ffc:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	2200      	movs	r2, #0
 800500a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    return HAL_OK;
 800500e:	2300      	movs	r3, #0
 8005010:	e000      	b.n	8005014 <HAL_I2CEx_ConfigDigitalFilter+0xc0>
  }
  else
  {
    return HAL_BUSY;
 8005012:	2302      	movs	r3, #2
  }
}
 8005014:	4618      	mov	r0, r3
 8005016:	3710      	adds	r7, #16
 8005018:	46bd      	mov	sp, r7
 800501a:	bd80      	pop	{r7, pc}
 800501c:	40005400 	.word	0x40005400
 8005020:	40005800 	.word	0x40005800
 8005024:	40007800 	.word	0x40007800
 8005028:	0800c31c 	.word	0x0800c31c

0800502c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d00b      	beq.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x26>
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005040:	d007      	beq.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x26>
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005048:	d003      	beq.n	8005052 <HAL_PWREx_ControlVoltageScaling+0x26>
 800504a:	219d      	movs	r1, #157	@ 0x9d
 800504c:	484d      	ldr	r0, [pc, #308]	@ (8005184 <HAL_PWREx_ControlVoltageScaling+0x158>)
 800504e:	f7fc f933 	bl	80012b8 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2b00      	cmp	r3, #0
 8005056:	d141      	bne.n	80050dc <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8005058:	4b4b      	ldr	r3, [pc, #300]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8005060:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005064:	d131      	bne.n	80050ca <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005066:	4b48      	ldr	r3, [pc, #288]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005068:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800506c:	4a46      	ldr	r2, [pc, #280]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800506e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005072:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005076:	4b44      	ldr	r3, [pc, #272]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800507e:	4a42      	ldr	r2, [pc, #264]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005080:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005084:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005086:	4b41      	ldr	r3, [pc, #260]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	2232      	movs	r2, #50	@ 0x32
 800508c:	fb02 f303 	mul.w	r3, r2, r3
 8005090:	4a3f      	ldr	r2, [pc, #252]	@ (8005190 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8005092:	fba2 2303 	umull	r2, r3, r2, r3
 8005096:	0c9b      	lsrs	r3, r3, #18
 8005098:	3301      	adds	r3, #1
 800509a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800509c:	e002      	b.n	80050a4 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	3b01      	subs	r3, #1
 80050a2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80050a4:	4b38      	ldr	r3, [pc, #224]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050ac:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050b0:	d102      	bne.n	80050b8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2b00      	cmp	r3, #0
 80050b6:	d1f2      	bne.n	800509e <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80050b8:	4b33      	ldr	r3, [pc, #204]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80050ba:	695b      	ldr	r3, [r3, #20]
 80050bc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80050c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050c4:	d158      	bne.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 80050c6:	2303      	movs	r3, #3
 80050c8:	e057      	b.n	800517a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050ca:	4b2f      	ldr	r3, [pc, #188]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80050cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050d0:	4a2d      	ldr	r2, [pc, #180]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80050d2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80050d6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 80050da:	e04d      	b.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80050e2:	d141      	bne.n	8005168 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80050e4:	4b28      	ldr	r3, [pc, #160]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80050e6:	681b      	ldr	r3, [r3, #0]
 80050e8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 80050ec:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80050f0:	d131      	bne.n	8005156 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80050f2:	4b25      	ldr	r3, [pc, #148]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80050f4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80050f8:	4a23      	ldr	r2, [pc, #140]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 80050fa:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80050fe:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8005102:	4b21      	ldr	r3, [pc, #132]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 800510a:	4a1f      	ldr	r2, [pc, #124]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800510c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8005110:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8005112:	4b1e      	ldr	r3, [pc, #120]	@ (800518c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2232      	movs	r2, #50	@ 0x32
 8005118:	fb02 f303 	mul.w	r3, r2, r3
 800511c:	4a1c      	ldr	r2, [pc, #112]	@ (8005190 <HAL_PWREx_ControlVoltageScaling+0x164>)
 800511e:	fba2 2303 	umull	r2, r3, r2, r3
 8005122:	0c9b      	lsrs	r3, r3, #18
 8005124:	3301      	adds	r3, #1
 8005126:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005128:	e002      	b.n	8005130 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	3b01      	subs	r3, #1
 800512e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8005130:	4b15      	ldr	r3, [pc, #84]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005132:	695b      	ldr	r3, [r3, #20]
 8005134:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005138:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800513c:	d102      	bne.n	8005144 <HAL_PWREx_ControlVoltageScaling+0x118>
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	2b00      	cmp	r3, #0
 8005142:	d1f2      	bne.n	800512a <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8005144:	4b10      	ldr	r3, [pc, #64]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005146:	695b      	ldr	r3, [r3, #20]
 8005148:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800514c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005150:	d112      	bne.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8005152:	2303      	movs	r3, #3
 8005154:	e011      	b.n	800517a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8005156:	4b0c      	ldr	r3, [pc, #48]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005158:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800515c:	4a0a      	ldr	r2, [pc, #40]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800515e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005162:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8005166:	e007      	b.n	8005178 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8005168:	4b07      	ldr	r3, [pc, #28]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8005170:	4a05      	ldr	r2, [pc, #20]	@ (8005188 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8005172:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8005176:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8005178:	2300      	movs	r3, #0
}
 800517a:	4618      	mov	r0, r3
 800517c:	3710      	adds	r7, #16
 800517e:	46bd      	mov	sp, r7
 8005180:	bd80      	pop	{r7, pc}
 8005182:	bf00      	nop
 8005184:	0800c358 	.word	0x0800c358
 8005188:	40007000 	.word	0x40007000
 800518c:	20000000 	.word	0x20000000
 8005190:	431bde83 	.word	0x431bde83

08005194 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8005194:	b480      	push	{r7}
 8005196:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8005198:	4b05      	ldr	r3, [pc, #20]	@ (80051b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800519a:	689b      	ldr	r3, [r3, #8]
 800519c:	4a04      	ldr	r2, [pc, #16]	@ (80051b0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800519e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80051a2:	6093      	str	r3, [r2, #8]
}
 80051a4:	bf00      	nop
 80051a6:	46bd      	mov	sp, r7
 80051a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051ac:	4770      	bx	lr
 80051ae:	bf00      	nop
 80051b0:	40007000 	.word	0x40007000

080051b4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b088      	sub	sp, #32
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d101      	bne.n	80051c6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80051c2:	2301      	movs	r3, #1
 80051c4:	e3fc      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d022      	beq.n	8005214 <HAL_RCC_OscConfig+0x60>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	681b      	ldr	r3, [r3, #0]
 80051d2:	f003 0301 	and.w	r3, r3, #1
 80051d6:	2b00      	cmp	r3, #0
 80051d8:	d11c      	bne.n	8005214 <HAL_RCC_OscConfig+0x60>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	f003 0302 	and.w	r3, r3, #2
 80051e2:	2b00      	cmp	r3, #0
 80051e4:	d116      	bne.n	8005214 <HAL_RCC_OscConfig+0x60>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f003 0320 	and.w	r3, r3, #32
 80051ee:	2b00      	cmp	r3, #0
 80051f0:	d110      	bne.n	8005214 <HAL_RCC_OscConfig+0x60>
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	f003 0308 	and.w	r3, r3, #8
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d10a      	bne.n	8005214 <HAL_RCC_OscConfig+0x60>
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	f003 0304 	and.w	r3, r3, #4
 8005206:	2b00      	cmp	r3, #0
 8005208:	d104      	bne.n	8005214 <HAL_RCC_OscConfig+0x60>
 800520a:	f240 1145 	movw	r1, #325	@ 0x145
 800520e:	4893      	ldr	r0, [pc, #588]	@ (800545c <HAL_RCC_OscConfig+0x2a8>)
 8005210:	f7fc f852 	bl	80012b8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f003 0301 	and.w	r3, r3, #1
 800521c:	2b00      	cmp	r3, #0
 800521e:	f000 8089 	beq.w	8005334 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	2b00      	cmp	r3, #0
 8005228:	d00e      	beq.n	8005248 <HAL_RCC_OscConfig+0x94>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	685b      	ldr	r3, [r3, #4]
 800522e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8005232:	d009      	beq.n	8005248 <HAL_RCC_OscConfig+0x94>
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	685b      	ldr	r3, [r3, #4]
 8005238:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800523c:	d004      	beq.n	8005248 <HAL_RCC_OscConfig+0x94>
 800523e:	f240 114b 	movw	r1, #331	@ 0x14b
 8005242:	4886      	ldr	r0, [pc, #536]	@ (800545c <HAL_RCC_OscConfig+0x2a8>)
 8005244:	f7fc f838 	bl	80012b8 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005248:	4b85      	ldr	r3, [pc, #532]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800524a:	689b      	ldr	r3, [r3, #8]
 800524c:	f003 030c 	and.w	r3, r3, #12
 8005250:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8005252:	4b83      	ldr	r3, [pc, #524]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005254:	68db      	ldr	r3, [r3, #12]
 8005256:	f003 0303 	and.w	r3, r3, #3
 800525a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 800525c:	69bb      	ldr	r3, [r7, #24]
 800525e:	2b0c      	cmp	r3, #12
 8005260:	d102      	bne.n	8005268 <HAL_RCC_OscConfig+0xb4>
 8005262:	697b      	ldr	r3, [r7, #20]
 8005264:	2b03      	cmp	r3, #3
 8005266:	d002      	beq.n	800526e <HAL_RCC_OscConfig+0xba>
 8005268:	69bb      	ldr	r3, [r7, #24]
 800526a:	2b08      	cmp	r3, #8
 800526c:	d10b      	bne.n	8005286 <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800526e:	4b7c      	ldr	r3, [pc, #496]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005276:	2b00      	cmp	r3, #0
 8005278:	d05b      	beq.n	8005332 <HAL_RCC_OscConfig+0x17e>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	685b      	ldr	r3, [r3, #4]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d157      	bne.n	8005332 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8005282:	2301      	movs	r3, #1
 8005284:	e39c      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	685b      	ldr	r3, [r3, #4]
 800528a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800528e:	d106      	bne.n	800529e <HAL_RCC_OscConfig+0xea>
 8005290:	4b73      	ldr	r3, [pc, #460]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a72      	ldr	r2, [pc, #456]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005296:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800529a:	6013      	str	r3, [r2, #0]
 800529c:	e01d      	b.n	80052da <HAL_RCC_OscConfig+0x126>
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	685b      	ldr	r3, [r3, #4]
 80052a2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80052a6:	d10c      	bne.n	80052c2 <HAL_RCC_OscConfig+0x10e>
 80052a8:	4b6d      	ldr	r3, [pc, #436]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052aa:	681b      	ldr	r3, [r3, #0]
 80052ac:	4a6c      	ldr	r2, [pc, #432]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052ae:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80052b2:	6013      	str	r3, [r2, #0]
 80052b4:	4b6a      	ldr	r3, [pc, #424]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	4a69      	ldr	r2, [pc, #420]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052ba:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	e00b      	b.n	80052da <HAL_RCC_OscConfig+0x126>
 80052c2:	4b67      	ldr	r3, [pc, #412]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	4a66      	ldr	r2, [pc, #408]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052c8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80052cc:	6013      	str	r3, [r2, #0]
 80052ce:	4b64      	ldr	r3, [pc, #400]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	4a63      	ldr	r2, [pc, #396]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052d4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80052d8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	685b      	ldr	r3, [r3, #4]
 80052de:	2b00      	cmp	r3, #0
 80052e0:	d013      	beq.n	800530a <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052e2:	f7fc fb09 	bl	80018f8 <HAL_GetTick>
 80052e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052e8:	e008      	b.n	80052fc <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80052ea:	f7fc fb05 	bl	80018f8 <HAL_GetTick>
 80052ee:	4602      	mov	r2, r0
 80052f0:	693b      	ldr	r3, [r7, #16]
 80052f2:	1ad3      	subs	r3, r2, r3
 80052f4:	2b64      	cmp	r3, #100	@ 0x64
 80052f6:	d901      	bls.n	80052fc <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 80052f8:	2303      	movs	r3, #3
 80052fa:	e361      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80052fc:	4b58      	ldr	r3, [pc, #352]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80052fe:	681b      	ldr	r3, [r3, #0]
 8005300:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005304:	2b00      	cmp	r3, #0
 8005306:	d0f0      	beq.n	80052ea <HAL_RCC_OscConfig+0x136>
 8005308:	e014      	b.n	8005334 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530a:	f7fc faf5 	bl	80018f8 <HAL_GetTick>
 800530e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005310:	e008      	b.n	8005324 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005312:	f7fc faf1 	bl	80018f8 <HAL_GetTick>
 8005316:	4602      	mov	r2, r0
 8005318:	693b      	ldr	r3, [r7, #16]
 800531a:	1ad3      	subs	r3, r2, r3
 800531c:	2b64      	cmp	r3, #100	@ 0x64
 800531e:	d901      	bls.n	8005324 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 8005320:	2303      	movs	r3, #3
 8005322:	e34d      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8005324:	4b4e      	ldr	r3, [pc, #312]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005326:	681b      	ldr	r3, [r3, #0]
 8005328:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800532c:	2b00      	cmp	r3, #0
 800532e:	d1f0      	bne.n	8005312 <HAL_RCC_OscConfig+0x15e>
 8005330:	e000      	b.n	8005334 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005332:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	681b      	ldr	r3, [r3, #0]
 8005338:	f003 0302 	and.w	r3, r3, #2
 800533c:	2b00      	cmp	r3, #0
 800533e:	f000 8094 	beq.w	800546a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	68db      	ldr	r3, [r3, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d009      	beq.n	800535e <HAL_RCC_OscConfig+0x1aa>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	68db      	ldr	r3, [r3, #12]
 800534e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005352:	d004      	beq.n	800535e <HAL_RCC_OscConfig+0x1aa>
 8005354:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8005358:	4840      	ldr	r0, [pc, #256]	@ (800545c <HAL_RCC_OscConfig+0x2a8>)
 800535a:	f7fb ffad 	bl	80012b8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	691b      	ldr	r3, [r3, #16]
 8005362:	2b7f      	cmp	r3, #127	@ 0x7f
 8005364:	d904      	bls.n	8005370 <HAL_RCC_OscConfig+0x1bc>
 8005366:	f240 1181 	movw	r1, #385	@ 0x181
 800536a:	483c      	ldr	r0, [pc, #240]	@ (800545c <HAL_RCC_OscConfig+0x2a8>)
 800536c:	f7fb ffa4 	bl	80012b8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8005370:	4b3b      	ldr	r3, [pc, #236]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005372:	689b      	ldr	r3, [r3, #8]
 8005374:	f003 030c 	and.w	r3, r3, #12
 8005378:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 800537a:	4b39      	ldr	r3, [pc, #228]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800537c:	68db      	ldr	r3, [r3, #12]
 800537e:	f003 0303 	and.w	r3, r3, #3
 8005382:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8005384:	69bb      	ldr	r3, [r7, #24]
 8005386:	2b0c      	cmp	r3, #12
 8005388:	d102      	bne.n	8005390 <HAL_RCC_OscConfig+0x1dc>
 800538a:	697b      	ldr	r3, [r7, #20]
 800538c:	2b02      	cmp	r3, #2
 800538e:	d002      	beq.n	8005396 <HAL_RCC_OscConfig+0x1e2>
 8005390:	69bb      	ldr	r3, [r7, #24]
 8005392:	2b04      	cmp	r3, #4
 8005394:	d11f      	bne.n	80053d6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005396:	4b32      	ldr	r3, [pc, #200]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d005      	beq.n	80053ae <HAL_RCC_OscConfig+0x1fa>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	68db      	ldr	r3, [r3, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d101      	bne.n	80053ae <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 80053aa:	2301      	movs	r3, #1
 80053ac:	e308      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80053ae:	4b2c      	ldr	r3, [pc, #176]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80053b0:	685b      	ldr	r3, [r3, #4]
 80053b2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	691b      	ldr	r3, [r3, #16]
 80053ba:	061b      	lsls	r3, r3, #24
 80053bc:	4928      	ldr	r1, [pc, #160]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80053be:	4313      	orrs	r3, r2
 80053c0:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80053c2:	4b28      	ldr	r3, [pc, #160]	@ (8005464 <HAL_RCC_OscConfig+0x2b0>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	4618      	mov	r0, r3
 80053c8:	f7fc f82c 	bl	8001424 <HAL_InitTick>
 80053cc:	4603      	mov	r3, r0
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	d04a      	beq.n	8005468 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e2f4      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	68db      	ldr	r3, [r3, #12]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d023      	beq.n	8005426 <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80053de:	4b20      	ldr	r3, [pc, #128]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	4a1f      	ldr	r2, [pc, #124]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 80053e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80053e8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053ea:	f7fc fa85 	bl	80018f8 <HAL_GetTick>
 80053ee:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053f0:	e008      	b.n	8005404 <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80053f2:	f7fc fa81 	bl	80018f8 <HAL_GetTick>
 80053f6:	4602      	mov	r2, r0
 80053f8:	693b      	ldr	r3, [r7, #16]
 80053fa:	1ad3      	subs	r3, r2, r3
 80053fc:	2b02      	cmp	r3, #2
 80053fe:	d901      	bls.n	8005404 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8005400:	2303      	movs	r3, #3
 8005402:	e2dd      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005404:	4b16      	ldr	r3, [pc, #88]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005406:	681b      	ldr	r3, [r3, #0]
 8005408:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800540c:	2b00      	cmp	r3, #0
 800540e:	d0f0      	beq.n	80053f2 <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005410:	4b13      	ldr	r3, [pc, #76]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005412:	685b      	ldr	r3, [r3, #4]
 8005414:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	691b      	ldr	r3, [r3, #16]
 800541c:	061b      	lsls	r3, r3, #24
 800541e:	4910      	ldr	r1, [pc, #64]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005420:	4313      	orrs	r3, r2
 8005422:	604b      	str	r3, [r1, #4]
 8005424:	e021      	b.n	800546a <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005426:	4b0e      	ldr	r3, [pc, #56]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	4a0d      	ldr	r2, [pc, #52]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800542c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8005430:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005432:	f7fc fa61 	bl	80018f8 <HAL_GetTick>
 8005436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005438:	e008      	b.n	800544c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800543a:	f7fc fa5d 	bl	80018f8 <HAL_GetTick>
 800543e:	4602      	mov	r2, r0
 8005440:	693b      	ldr	r3, [r7, #16]
 8005442:	1ad3      	subs	r3, r2, r3
 8005444:	2b02      	cmp	r3, #2
 8005446:	d901      	bls.n	800544c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8005448:	2303      	movs	r3, #3
 800544a:	e2b9      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800544c:	4b04      	ldr	r3, [pc, #16]	@ (8005460 <HAL_RCC_OscConfig+0x2ac>)
 800544e:	681b      	ldr	r3, [r3, #0]
 8005450:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1f0      	bne.n	800543a <HAL_RCC_OscConfig+0x286>
 8005458:	e007      	b.n	800546a <HAL_RCC_OscConfig+0x2b6>
 800545a:	bf00      	nop
 800545c:	0800c394 	.word	0x0800c394
 8005460:	40021000 	.word	0x40021000
 8005464:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8005468:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	f003 0308 	and.w	r3, r3, #8
 8005472:	2b00      	cmp	r3, #0
 8005474:	d049      	beq.n	800550a <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	695b      	ldr	r3, [r3, #20]
 800547a:	2b00      	cmp	r3, #0
 800547c:	d008      	beq.n	8005490 <HAL_RCC_OscConfig+0x2dc>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	695b      	ldr	r3, [r3, #20]
 8005482:	2b01      	cmp	r3, #1
 8005484:	d004      	beq.n	8005490 <HAL_RCC_OscConfig+0x2dc>
 8005486:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 800548a:	48a3      	ldr	r0, [pc, #652]	@ (8005718 <HAL_RCC_OscConfig+0x564>)
 800548c:	f7fb ff14 	bl	80012b8 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8005490:	687b      	ldr	r3, [r7, #4]
 8005492:	695b      	ldr	r3, [r3, #20]
 8005494:	2b00      	cmp	r3, #0
 8005496:	d01c      	beq.n	80054d2 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005498:	4ba0      	ldr	r3, [pc, #640]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 800549a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 800549e:	4a9f      	ldr	r2, [pc, #636]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80054a0:	f043 0301 	orr.w	r3, r3, #1
 80054a4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054a8:	f7fc fa26 	bl	80018f8 <HAL_GetTick>
 80054ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054ae:	e008      	b.n	80054c2 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054b0:	f7fc fa22 	bl	80018f8 <HAL_GetTick>
 80054b4:	4602      	mov	r2, r0
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	1ad3      	subs	r3, r2, r3
 80054ba:	2b02      	cmp	r3, #2
 80054bc:	d901      	bls.n	80054c2 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80054be:	2303      	movs	r3, #3
 80054c0:	e27e      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80054c2:	4b96      	ldr	r3, [pc, #600]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80054c4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054c8:	f003 0302 	and.w	r3, r3, #2
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d0ef      	beq.n	80054b0 <HAL_RCC_OscConfig+0x2fc>
 80054d0:	e01b      	b.n	800550a <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80054d2:	4b92      	ldr	r3, [pc, #584]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80054d4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80054d8:	4a90      	ldr	r2, [pc, #576]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80054da:	f023 0301 	bic.w	r3, r3, #1
 80054de:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80054e2:	f7fc fa09 	bl	80018f8 <HAL_GetTick>
 80054e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054e8:	e008      	b.n	80054fc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80054ea:	f7fc fa05 	bl	80018f8 <HAL_GetTick>
 80054ee:	4602      	mov	r2, r0
 80054f0:	693b      	ldr	r3, [r7, #16]
 80054f2:	1ad3      	subs	r3, r2, r3
 80054f4:	2b02      	cmp	r3, #2
 80054f6:	d901      	bls.n	80054fc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 80054f8:	2303      	movs	r3, #3
 80054fa:	e261      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80054fc:	4b87      	ldr	r3, [pc, #540]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80054fe:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8005502:	f003 0302 	and.w	r3, r3, #2
 8005506:	2b00      	cmp	r3, #0
 8005508:	d1ef      	bne.n	80054ea <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 0304 	and.w	r3, r3, #4
 8005512:	2b00      	cmp	r3, #0
 8005514:	f000 80b7 	beq.w	8005686 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005518:	2300      	movs	r3, #0
 800551a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	689b      	ldr	r3, [r3, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d00c      	beq.n	800553e <HAL_RCC_OscConfig+0x38a>
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b01      	cmp	r3, #1
 800552a:	d008      	beq.n	800553e <HAL_RCC_OscConfig+0x38a>
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	689b      	ldr	r3, [r3, #8]
 8005530:	2b05      	cmp	r3, #5
 8005532:	d004      	beq.n	800553e <HAL_RCC_OscConfig+0x38a>
 8005534:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8005538:	4877      	ldr	r0, [pc, #476]	@ (8005718 <HAL_RCC_OscConfig+0x564>)
 800553a:	f7fb febd 	bl	80012b8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800553e:	4b77      	ldr	r3, [pc, #476]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 8005540:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005542:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005546:	2b00      	cmp	r3, #0
 8005548:	d101      	bne.n	800554e <HAL_RCC_OscConfig+0x39a>
 800554a:	2301      	movs	r3, #1
 800554c:	e000      	b.n	8005550 <HAL_RCC_OscConfig+0x39c>
 800554e:	2300      	movs	r3, #0
 8005550:	2b00      	cmp	r3, #0
 8005552:	d00d      	beq.n	8005570 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005554:	4b71      	ldr	r3, [pc, #452]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 8005556:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005558:	4a70      	ldr	r2, [pc, #448]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 800555a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800555e:	6593      	str	r3, [r2, #88]	@ 0x58
 8005560:	4b6e      	ldr	r3, [pc, #440]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 8005562:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8005564:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005568:	60fb      	str	r3, [r7, #12]
 800556a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800556c:	2301      	movs	r3, #1
 800556e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005570:	4b6b      	ldr	r3, [pc, #428]	@ (8005720 <HAL_RCC_OscConfig+0x56c>)
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005578:	2b00      	cmp	r3, #0
 800557a:	d118      	bne.n	80055ae <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800557c:	4b68      	ldr	r3, [pc, #416]	@ (8005720 <HAL_RCC_OscConfig+0x56c>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	4a67      	ldr	r2, [pc, #412]	@ (8005720 <HAL_RCC_OscConfig+0x56c>)
 8005582:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005586:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005588:	f7fc f9b6 	bl	80018f8 <HAL_GetTick>
 800558c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800558e:	e008      	b.n	80055a2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005590:	f7fc f9b2 	bl	80018f8 <HAL_GetTick>
 8005594:	4602      	mov	r2, r0
 8005596:	693b      	ldr	r3, [r7, #16]
 8005598:	1ad3      	subs	r3, r2, r3
 800559a:	2b02      	cmp	r3, #2
 800559c:	d901      	bls.n	80055a2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800559e:	2303      	movs	r3, #3
 80055a0:	e20e      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80055a2:	4b5f      	ldr	r3, [pc, #380]	@ (8005720 <HAL_RCC_OscConfig+0x56c>)
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d0f0      	beq.n	8005590 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	2b01      	cmp	r3, #1
 80055b4:	d108      	bne.n	80055c8 <HAL_RCC_OscConfig+0x414>
 80055b6:	4b59      	ldr	r3, [pc, #356]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055bc:	4a57      	ldr	r2, [pc, #348]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055be:	f043 0301 	orr.w	r3, r3, #1
 80055c2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055c6:	e024      	b.n	8005612 <HAL_RCC_OscConfig+0x45e>
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	689b      	ldr	r3, [r3, #8]
 80055cc:	2b05      	cmp	r3, #5
 80055ce:	d110      	bne.n	80055f2 <HAL_RCC_OscConfig+0x43e>
 80055d0:	4b52      	ldr	r3, [pc, #328]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055d6:	4a51      	ldr	r2, [pc, #324]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055d8:	f043 0304 	orr.w	r3, r3, #4
 80055dc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055e0:	4b4e      	ldr	r3, [pc, #312]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055e2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055e6:	4a4d      	ldr	r2, [pc, #308]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055e8:	f043 0301 	orr.w	r3, r3, #1
 80055ec:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80055f0:	e00f      	b.n	8005612 <HAL_RCC_OscConfig+0x45e>
 80055f2:	4b4a      	ldr	r3, [pc, #296]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80055f8:	4a48      	ldr	r2, [pc, #288]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80055fa:	f023 0301 	bic.w	r3, r3, #1
 80055fe:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8005602:	4b46      	ldr	r3, [pc, #280]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 8005604:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005608:	4a44      	ldr	r2, [pc, #272]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 800560a:	f023 0304 	bic.w	r3, r3, #4
 800560e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	689b      	ldr	r3, [r3, #8]
 8005616:	2b00      	cmp	r3, #0
 8005618:	d016      	beq.n	8005648 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800561a:	f7fc f96d 	bl	80018f8 <HAL_GetTick>
 800561e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005620:	e00a      	b.n	8005638 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005622:	f7fc f969 	bl	80018f8 <HAL_GetTick>
 8005626:	4602      	mov	r2, r0
 8005628:	693b      	ldr	r3, [r7, #16]
 800562a:	1ad3      	subs	r3, r2, r3
 800562c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005630:	4293      	cmp	r3, r2
 8005632:	d901      	bls.n	8005638 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8005634:	2303      	movs	r3, #3
 8005636:	e1c3      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005638:	4b38      	ldr	r3, [pc, #224]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 800563a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800563e:	f003 0302 	and.w	r3, r3, #2
 8005642:	2b00      	cmp	r3, #0
 8005644:	d0ed      	beq.n	8005622 <HAL_RCC_OscConfig+0x46e>
 8005646:	e015      	b.n	8005674 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005648:	f7fc f956 	bl	80018f8 <HAL_GetTick>
 800564c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800564e:	e00a      	b.n	8005666 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005650:	f7fc f952 	bl	80018f8 <HAL_GetTick>
 8005654:	4602      	mov	r2, r0
 8005656:	693b      	ldr	r3, [r7, #16]
 8005658:	1ad3      	subs	r3, r2, r3
 800565a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800565e:	4293      	cmp	r3, r2
 8005660:	d901      	bls.n	8005666 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8005662:	2303      	movs	r3, #3
 8005664:	e1ac      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005666:	4b2d      	ldr	r3, [pc, #180]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 8005668:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800566c:	f003 0302 	and.w	r3, r3, #2
 8005670:	2b00      	cmp	r3, #0
 8005672:	d1ed      	bne.n	8005650 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8005674:	7ffb      	ldrb	r3, [r7, #31]
 8005676:	2b01      	cmp	r3, #1
 8005678:	d105      	bne.n	8005686 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800567a:	4b28      	ldr	r3, [pc, #160]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 800567c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800567e:	4a27      	ldr	r2, [pc, #156]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 8005680:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8005684:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f003 0320 	and.w	r3, r3, #32
 800568e:	2b00      	cmp	r3, #0
 8005690:	d04f      	beq.n	8005732 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	699b      	ldr	r3, [r3, #24]
 8005696:	2b00      	cmp	r3, #0
 8005698:	d008      	beq.n	80056ac <HAL_RCC_OscConfig+0x4f8>
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	699b      	ldr	r3, [r3, #24]
 800569e:	2b01      	cmp	r3, #1
 80056a0:	d004      	beq.n	80056ac <HAL_RCC_OscConfig+0x4f8>
 80056a2:	f240 213b 	movw	r1, #571	@ 0x23b
 80056a6:	481c      	ldr	r0, [pc, #112]	@ (8005718 <HAL_RCC_OscConfig+0x564>)
 80056a8:	f7fb fe06 	bl	80012b8 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	699b      	ldr	r3, [r3, #24]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d01c      	beq.n	80056ee <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80056b4:	4b19      	ldr	r3, [pc, #100]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80056b6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056ba:	4a18      	ldr	r2, [pc, #96]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80056bc:	f043 0301 	orr.w	r3, r3, #1
 80056c0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056c4:	f7fc f918 	bl	80018f8 <HAL_GetTick>
 80056c8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056ca:	e008      	b.n	80056de <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80056cc:	f7fc f914 	bl	80018f8 <HAL_GetTick>
 80056d0:	4602      	mov	r2, r0
 80056d2:	693b      	ldr	r3, [r7, #16]
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	2b02      	cmp	r3, #2
 80056d8:	d901      	bls.n	80056de <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 80056da:	2303      	movs	r3, #3
 80056dc:	e170      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80056de:	4b0f      	ldr	r3, [pc, #60]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80056e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056e4:	f003 0302 	and.w	r3, r3, #2
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d0ef      	beq.n	80056cc <HAL_RCC_OscConfig+0x518>
 80056ec:	e021      	b.n	8005732 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80056ee:	4b0b      	ldr	r3, [pc, #44]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80056f0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80056f4:	4a09      	ldr	r2, [pc, #36]	@ (800571c <HAL_RCC_OscConfig+0x568>)
 80056f6:	f023 0301 	bic.w	r3, r3, #1
 80056fa:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056fe:	f7fc f8fb 	bl	80018f8 <HAL_GetTick>
 8005702:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005704:	e00e      	b.n	8005724 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8005706:	f7fc f8f7 	bl	80018f8 <HAL_GetTick>
 800570a:	4602      	mov	r2, r0
 800570c:	693b      	ldr	r3, [r7, #16]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	2b02      	cmp	r3, #2
 8005712:	d907      	bls.n	8005724 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8005714:	2303      	movs	r3, #3
 8005716:	e153      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
 8005718:	0800c394 	.word	0x0800c394
 800571c:	40021000 	.word	0x40021000
 8005720:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005724:	4b85      	ldr	r3, [pc, #532]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 8005726:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800572a:	f003 0302 	and.w	r3, r3, #2
 800572e:	2b00      	cmp	r3, #0
 8005730:	d1e9      	bne.n	8005706 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	69db      	ldr	r3, [r3, #28]
 8005736:	2b00      	cmp	r3, #0
 8005738:	d00c      	beq.n	8005754 <HAL_RCC_OscConfig+0x5a0>
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	69db      	ldr	r3, [r3, #28]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d008      	beq.n	8005754 <HAL_RCC_OscConfig+0x5a0>
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	69db      	ldr	r3, [r3, #28]
 8005746:	2b02      	cmp	r3, #2
 8005748:	d004      	beq.n	8005754 <HAL_RCC_OscConfig+0x5a0>
 800574a:	f44f 7119 	mov.w	r1, #612	@ 0x264
 800574e:	487c      	ldr	r0, [pc, #496]	@ (8005940 <HAL_RCC_OscConfig+0x78c>)
 8005750:	f7fb fdb2 	bl	80012b8 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	69db      	ldr	r3, [r3, #28]
 8005758:	2b00      	cmp	r3, #0
 800575a:	f000 8130 	beq.w	80059be <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800575e:	4b77      	ldr	r3, [pc, #476]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 8005760:	689b      	ldr	r3, [r3, #8]
 8005762:	f003 030c 	and.w	r3, r3, #12
 8005766:	2b0c      	cmp	r3, #12
 8005768:	f000 80e2 	beq.w	8005930 <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	2b02      	cmp	r3, #2
 8005772:	f040 80bd 	bne.w	80058f0 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	6a1b      	ldr	r3, [r3, #32]
 800577a:	2b00      	cmp	r3, #0
 800577c:	d00c      	beq.n	8005798 <HAL_RCC_OscConfig+0x5e4>
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	6a1b      	ldr	r3, [r3, #32]
 8005782:	2b02      	cmp	r3, #2
 8005784:	d008      	beq.n	8005798 <HAL_RCC_OscConfig+0x5e4>
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	6a1b      	ldr	r3, [r3, #32]
 800578a:	2b03      	cmp	r3, #3
 800578c:	d004      	beq.n	8005798 <HAL_RCC_OscConfig+0x5e4>
 800578e:	f240 216e 	movw	r1, #622	@ 0x26e
 8005792:	486b      	ldr	r0, [pc, #428]	@ (8005940 <HAL_RCC_OscConfig+0x78c>)
 8005794:	f7fb fd90 	bl	80012b8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800579c:	2b00      	cmp	r3, #0
 800579e:	d003      	beq.n	80057a8 <HAL_RCC_OscConfig+0x5f4>
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057a4:	2b10      	cmp	r3, #16
 80057a6:	d904      	bls.n	80057b2 <HAL_RCC_OscConfig+0x5fe>
 80057a8:	f240 216f 	movw	r1, #623	@ 0x26f
 80057ac:	4864      	ldr	r0, [pc, #400]	@ (8005940 <HAL_RCC_OscConfig+0x78c>)
 80057ae:	f7fb fd83 	bl	80012b8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057b6:	2b07      	cmp	r3, #7
 80057b8:	d903      	bls.n	80057c2 <HAL_RCC_OscConfig+0x60e>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80057be:	2b7f      	cmp	r3, #127	@ 0x7f
 80057c0:	d904      	bls.n	80057cc <HAL_RCC_OscConfig+0x618>
 80057c2:	f44f 711c 	mov.w	r1, #624	@ 0x270
 80057c6:	485e      	ldr	r0, [pc, #376]	@ (8005940 <HAL_RCC_OscConfig+0x78c>)
 80057c8:	f7fb fd76 	bl	80012b8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d0:	2b01      	cmp	r3, #1
 80057d2:	d903      	bls.n	80057dc <HAL_RCC_OscConfig+0x628>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80057d8:	2b1f      	cmp	r3, #31
 80057da:	d904      	bls.n	80057e6 <HAL_RCC_OscConfig+0x632>
 80057dc:	f240 2171 	movw	r1, #625	@ 0x271
 80057e0:	4857      	ldr	r0, [pc, #348]	@ (8005940 <HAL_RCC_OscConfig+0x78c>)
 80057e2:	f7fb fd69 	bl	80012b8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057ea:	2b02      	cmp	r3, #2
 80057ec:	d010      	beq.n	8005810 <HAL_RCC_OscConfig+0x65c>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057f2:	2b04      	cmp	r3, #4
 80057f4:	d00c      	beq.n	8005810 <HAL_RCC_OscConfig+0x65c>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80057fa:	2b06      	cmp	r3, #6
 80057fc:	d008      	beq.n	8005810 <HAL_RCC_OscConfig+0x65c>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005802:	2b08      	cmp	r3, #8
 8005804:	d004      	beq.n	8005810 <HAL_RCC_OscConfig+0x65c>
 8005806:	f240 2172 	movw	r1, #626	@ 0x272
 800580a:	484d      	ldr	r0, [pc, #308]	@ (8005940 <HAL_RCC_OscConfig+0x78c>)
 800580c:	f7fb fd54 	bl	80012b8 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005814:	2b02      	cmp	r3, #2
 8005816:	d010      	beq.n	800583a <HAL_RCC_OscConfig+0x686>
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800581c:	2b04      	cmp	r3, #4
 800581e:	d00c      	beq.n	800583a <HAL_RCC_OscConfig+0x686>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005824:	2b06      	cmp	r3, #6
 8005826:	d008      	beq.n	800583a <HAL_RCC_OscConfig+0x686>
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800582c:	2b08      	cmp	r3, #8
 800582e:	d004      	beq.n	800583a <HAL_RCC_OscConfig+0x686>
 8005830:	f240 2173 	movw	r1, #627	@ 0x273
 8005834:	4842      	ldr	r0, [pc, #264]	@ (8005940 <HAL_RCC_OscConfig+0x78c>)
 8005836:	f7fb fd3f 	bl	80012b8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800583a:	4b40      	ldr	r3, [pc, #256]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	4a3f      	ldr	r2, [pc, #252]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 8005840:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8005844:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005846:	f7fc f857 	bl	80018f8 <HAL_GetTick>
 800584a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800584c:	e008      	b.n	8005860 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800584e:	f7fc f853 	bl	80018f8 <HAL_GetTick>
 8005852:	4602      	mov	r2, r0
 8005854:	693b      	ldr	r3, [r7, #16]
 8005856:	1ad3      	subs	r3, r2, r3
 8005858:	2b02      	cmp	r3, #2
 800585a:	d901      	bls.n	8005860 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 800585c:	2303      	movs	r3, #3
 800585e:	e0af      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005860:	4b36      	ldr	r3, [pc, #216]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1f0      	bne.n	800584e <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800586c:	4b33      	ldr	r3, [pc, #204]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 800586e:	68da      	ldr	r2, [r3, #12]
 8005870:	4b34      	ldr	r3, [pc, #208]	@ (8005944 <HAL_RCC_OscConfig+0x790>)
 8005872:	4013      	ands	r3, r2
 8005874:	687a      	ldr	r2, [r7, #4]
 8005876:	6a11      	ldr	r1, [r2, #32]
 8005878:	687a      	ldr	r2, [r7, #4]
 800587a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800587c:	3a01      	subs	r2, #1
 800587e:	0112      	lsls	r2, r2, #4
 8005880:	4311      	orrs	r1, r2
 8005882:	687a      	ldr	r2, [r7, #4]
 8005884:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8005886:	0212      	lsls	r2, r2, #8
 8005888:	4311      	orrs	r1, r2
 800588a:	687a      	ldr	r2, [r7, #4]
 800588c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800588e:	0852      	lsrs	r2, r2, #1
 8005890:	3a01      	subs	r2, #1
 8005892:	0552      	lsls	r2, r2, #21
 8005894:	4311      	orrs	r1, r2
 8005896:	687a      	ldr	r2, [r7, #4]
 8005898:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800589a:	0852      	lsrs	r2, r2, #1
 800589c:	3a01      	subs	r2, #1
 800589e:	0652      	lsls	r2, r2, #25
 80058a0:	4311      	orrs	r1, r2
 80058a2:	687a      	ldr	r2, [r7, #4]
 80058a4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80058a6:	06d2      	lsls	r2, r2, #27
 80058a8:	430a      	orrs	r2, r1
 80058aa:	4924      	ldr	r1, [pc, #144]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058ac:	4313      	orrs	r3, r2
 80058ae:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80058b0:	4b22      	ldr	r3, [pc, #136]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	4a21      	ldr	r2, [pc, #132]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058b6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058ba:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80058bc:	4b1f      	ldr	r3, [pc, #124]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058be:	68db      	ldr	r3, [r3, #12]
 80058c0:	4a1e      	ldr	r2, [pc, #120]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058c2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80058c6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058c8:	f7fc f816 	bl	80018f8 <HAL_GetTick>
 80058cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058ce:	e008      	b.n	80058e2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80058d0:	f7fc f812 	bl	80018f8 <HAL_GetTick>
 80058d4:	4602      	mov	r2, r0
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	1ad3      	subs	r3, r2, r3
 80058da:	2b02      	cmp	r3, #2
 80058dc:	d901      	bls.n	80058e2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80058de:	2303      	movs	r3, #3
 80058e0:	e06e      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80058e2:	4b16      	ldr	r3, [pc, #88]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d0f0      	beq.n	80058d0 <HAL_RCC_OscConfig+0x71c>
 80058ee:	e066      	b.n	80059be <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80058f0:	4b12      	ldr	r3, [pc, #72]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	4a11      	ldr	r2, [pc, #68]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 80058f6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80058fa:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80058fc:	f7fb fffc 	bl	80018f8 <HAL_GetTick>
 8005900:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005902:	e008      	b.n	8005916 <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005904:	f7fb fff8 	bl	80018f8 <HAL_GetTick>
 8005908:	4602      	mov	r2, r0
 800590a:	693b      	ldr	r3, [r7, #16]
 800590c:	1ad3      	subs	r3, r2, r3
 800590e:	2b02      	cmp	r3, #2
 8005910:	d901      	bls.n	8005916 <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 8005912:	2303      	movs	r3, #3
 8005914:	e054      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005916:	4b09      	ldr	r3, [pc, #36]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800591e:	2b00      	cmp	r3, #0
 8005920:	d1f0      	bne.n	8005904 <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005922:	4b06      	ldr	r3, [pc, #24]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 8005924:	68da      	ldr	r2, [r3, #12]
 8005926:	4905      	ldr	r1, [pc, #20]	@ (800593c <HAL_RCC_OscConfig+0x788>)
 8005928:	4b07      	ldr	r3, [pc, #28]	@ (8005948 <HAL_RCC_OscConfig+0x794>)
 800592a:	4013      	ands	r3, r2
 800592c:	60cb      	str	r3, [r1, #12]
 800592e:	e046      	b.n	80059be <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	69db      	ldr	r3, [r3, #28]
 8005934:	2b01      	cmp	r3, #1
 8005936:	d109      	bne.n	800594c <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8005938:	2301      	movs	r3, #1
 800593a:	e041      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
 800593c:	40021000 	.word	0x40021000
 8005940:	0800c394 	.word	0x0800c394
 8005944:	019f800c 	.word	0x019f800c
 8005948:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800594c:	4b1e      	ldr	r3, [pc, #120]	@ (80059c8 <HAL_RCC_OscConfig+0x814>)
 800594e:	68db      	ldr	r3, [r3, #12]
 8005950:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	f003 0203 	and.w	r2, r3, #3
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6a1b      	ldr	r3, [r3, #32]
 800595c:	429a      	cmp	r2, r3
 800595e:	d12c      	bne.n	80059ba <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005960:	697b      	ldr	r3, [r7, #20]
 8005962:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800596a:	3b01      	subs	r3, #1
 800596c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800596e:	429a      	cmp	r2, r3
 8005970:	d123      	bne.n	80059ba <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005972:	697b      	ldr	r3, [r7, #20]
 8005974:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800597c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800597e:	429a      	cmp	r2, r3
 8005980:	d11b      	bne.n	80059ba <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005982:	697b      	ldr	r3, [r7, #20]
 8005984:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800598c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800598e:	429a      	cmp	r2, r3
 8005990:	d113      	bne.n	80059ba <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005992:	697b      	ldr	r3, [r7, #20]
 8005994:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800599c:	085b      	lsrs	r3, r3, #1
 800599e:	3b01      	subs	r3, #1
 80059a0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80059a2:	429a      	cmp	r2, r3
 80059a4:	d109      	bne.n	80059ba <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80059a6:	697b      	ldr	r3, [r7, #20]
 80059a8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80059b0:	085b      	lsrs	r3, r3, #1
 80059b2:	3b01      	subs	r3, #1
 80059b4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80059b6:	429a      	cmp	r2, r3
 80059b8:	d001      	beq.n	80059be <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 80059ba:	2301      	movs	r3, #1
 80059bc:	e000      	b.n	80059c0 <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 80059be:	2300      	movs	r3, #0
}
 80059c0:	4618      	mov	r0, r3
 80059c2:	3720      	adds	r7, #32
 80059c4:	46bd      	mov	sp, r7
 80059c6:	bd80      	pop	{r7, pc}
 80059c8:	40021000 	.word	0x40021000

080059cc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80059cc:	b580      	push	{r7, lr}
 80059ce:	b086      	sub	sp, #24
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80059d6:	2300      	movs	r3, #0
 80059d8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d101      	bne.n	80059e4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80059e0:	2301      	movs	r3, #1
 80059e2:	e1e0      	b.n	8005da6 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	f003 030f 	and.w	r3, r3, #15
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_RCC_ClockConfig+0x2c>
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	2b0f      	cmp	r3, #15
 80059f6:	d904      	bls.n	8005a02 <HAL_RCC_ClockConfig+0x36>
 80059f8:	f240 310b 	movw	r1, #779	@ 0x30b
 80059fc:	4869      	ldr	r0, [pc, #420]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1d8>)
 80059fe:	f7fb fc5b 	bl	80012b8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8005a02:	683b      	ldr	r3, [r7, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d031      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	2b01      	cmp	r3, #1
 8005a0c:	d02e      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a0e:	683b      	ldr	r3, [r7, #0]
 8005a10:	2b02      	cmp	r3, #2
 8005a12:	d02b      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	2b03      	cmp	r3, #3
 8005a18:	d028      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	2b04      	cmp	r3, #4
 8005a1e:	d025      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	2b05      	cmp	r3, #5
 8005a24:	d022      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a26:	683b      	ldr	r3, [r7, #0]
 8005a28:	2b06      	cmp	r3, #6
 8005a2a:	d01f      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	2b07      	cmp	r3, #7
 8005a30:	d01c      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a32:	683b      	ldr	r3, [r7, #0]
 8005a34:	2b08      	cmp	r3, #8
 8005a36:	d019      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a38:	683b      	ldr	r3, [r7, #0]
 8005a3a:	2b09      	cmp	r3, #9
 8005a3c:	d016      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	2b0a      	cmp	r3, #10
 8005a42:	d013      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a44:	683b      	ldr	r3, [r7, #0]
 8005a46:	2b0b      	cmp	r3, #11
 8005a48:	d010      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	2b0c      	cmp	r3, #12
 8005a4e:	d00d      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a50:	683b      	ldr	r3, [r7, #0]
 8005a52:	2b0d      	cmp	r3, #13
 8005a54:	d00a      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a56:	683b      	ldr	r3, [r7, #0]
 8005a58:	2b0e      	cmp	r3, #14
 8005a5a:	d007      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a5c:	683b      	ldr	r3, [r7, #0]
 8005a5e:	2b0f      	cmp	r3, #15
 8005a60:	d004      	beq.n	8005a6c <HAL_RCC_ClockConfig+0xa0>
 8005a62:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8005a66:	484f      	ldr	r0, [pc, #316]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1d8>)
 8005a68:	f7fb fc26 	bl	80012b8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005a6c:	4b4e      	ldr	r3, [pc, #312]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	f003 030f 	and.w	r3, r3, #15
 8005a74:	683a      	ldr	r2, [r7, #0]
 8005a76:	429a      	cmp	r2, r3
 8005a78:	d910      	bls.n	8005a9c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005a7a:	4b4b      	ldr	r3, [pc, #300]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f023 020f 	bic.w	r2, r3, #15
 8005a82:	4949      	ldr	r1, [pc, #292]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a84:	683b      	ldr	r3, [r7, #0]
 8005a86:	4313      	orrs	r3, r2
 8005a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005a8a:	4b47      	ldr	r3, [pc, #284]	@ (8005ba8 <HAL_RCC_ClockConfig+0x1dc>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 030f 	and.w	r3, r3, #15
 8005a92:	683a      	ldr	r2, [r7, #0]
 8005a94:	429a      	cmp	r2, r3
 8005a96:	d001      	beq.n	8005a9c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8005a98:	2301      	movs	r3, #1
 8005a9a:	e184      	b.n	8005da6 <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	f003 0301 	and.w	r3, r3, #1
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	f000 808e 	beq.w	8005bc6 <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	685b      	ldr	r3, [r3, #4]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d00c      	beq.n	8005acc <HAL_RCC_ClockConfig+0x100>
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	685b      	ldr	r3, [r3, #4]
 8005ab6:	2b02      	cmp	r3, #2
 8005ab8:	d008      	beq.n	8005acc <HAL_RCC_ClockConfig+0x100>
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	685b      	ldr	r3, [r3, #4]
 8005abe:	2b03      	cmp	r3, #3
 8005ac0:	d004      	beq.n	8005acc <HAL_RCC_ClockConfig+0x100>
 8005ac2:	f240 3123 	movw	r1, #803	@ 0x323
 8005ac6:	4837      	ldr	r0, [pc, #220]	@ (8005ba4 <HAL_RCC_ClockConfig+0x1d8>)
 8005ac8:	f7fb fbf6 	bl	80012b8 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	685b      	ldr	r3, [r3, #4]
 8005ad0:	2b03      	cmp	r3, #3
 8005ad2:	d129      	bne.n	8005b28 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005ad4:	4b35      	ldr	r3, [pc, #212]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005adc:	2b00      	cmp	r3, #0
 8005ade:	d101      	bne.n	8005ae4 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 8005ae0:	2301      	movs	r3, #1
 8005ae2:	e160      	b.n	8005da6 <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005ae4:	f000 fa4c 	bl	8005f80 <RCC_GetSysClockFreqFromPLLSource>
 8005ae8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005aea:	693b      	ldr	r3, [r7, #16]
 8005aec:	4a30      	ldr	r2, [pc, #192]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1e4>)
 8005aee:	4293      	cmp	r3, r2
 8005af0:	d93f      	bls.n	8005b72 <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005af2:	4b2e      	ldr	r3, [pc, #184]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005af4:	689b      	ldr	r3, [r3, #8]
 8005af6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d009      	beq.n	8005b12 <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d033      	beq.n	8005b72 <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d12f      	bne.n	8005b72 <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b12:	4b26      	ldr	r3, [pc, #152]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b14:	689b      	ldr	r3, [r3, #8]
 8005b16:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b1a:	4a24      	ldr	r2, [pc, #144]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b1c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b20:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8005b22:	2380      	movs	r3, #128	@ 0x80
 8005b24:	617b      	str	r3, [r7, #20]
 8005b26:	e024      	b.n	8005b72 <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	685b      	ldr	r3, [r3, #4]
 8005b2c:	2b02      	cmp	r3, #2
 8005b2e:	d107      	bne.n	8005b40 <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8005b30:	4b1e      	ldr	r3, [pc, #120]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d109      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8005b3c:	2301      	movs	r3, #1
 8005b3e:	e132      	b.n	8005da6 <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8005b40:	4b1a      	ldr	r3, [pc, #104]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d101      	bne.n	8005b50 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 8005b4c:	2301      	movs	r3, #1
 8005b4e:	e12a      	b.n	8005da6 <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8005b50:	f000 f93a 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 8005b54:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8005b56:	693b      	ldr	r3, [r7, #16]
 8005b58:	4a15      	ldr	r2, [pc, #84]	@ (8005bb0 <HAL_RCC_ClockConfig+0x1e4>)
 8005b5a:	4293      	cmp	r3, r2
 8005b5c:	d909      	bls.n	8005b72 <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005b5e:	4b13      	ldr	r3, [pc, #76]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b60:	689b      	ldr	r3, [r3, #8]
 8005b62:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005b66:	4a11      	ldr	r2, [pc, #68]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b68:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8005b6c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8005b6e:	2380      	movs	r3, #128	@ 0x80
 8005b70:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8005b72:	4b0e      	ldr	r3, [pc, #56]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b74:	689b      	ldr	r3, [r3, #8]
 8005b76:	f023 0203 	bic.w	r2, r3, #3
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	685b      	ldr	r3, [r3, #4]
 8005b7e:	490b      	ldr	r1, [pc, #44]	@ (8005bac <HAL_RCC_ClockConfig+0x1e0>)
 8005b80:	4313      	orrs	r3, r2
 8005b82:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005b84:	f7fb feb8 	bl	80018f8 <HAL_GetTick>
 8005b88:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005b8a:	e013      	b.n	8005bb4 <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005b8c:	f7fb feb4 	bl	80018f8 <HAL_GetTick>
 8005b90:	4602      	mov	r2, r0
 8005b92:	68fb      	ldr	r3, [r7, #12]
 8005b94:	1ad3      	subs	r3, r2, r3
 8005b96:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d90a      	bls.n	8005bb4 <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 8005b9e:	2303      	movs	r3, #3
 8005ba0:	e101      	b.n	8005da6 <HAL_RCC_ClockConfig+0x3da>
 8005ba2:	bf00      	nop
 8005ba4:	0800c394 	.word	0x0800c394
 8005ba8:	40022000 	.word	0x40022000
 8005bac:	40021000 	.word	0x40021000
 8005bb0:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005bb4:	4b7e      	ldr	r3, [pc, #504]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005bb6:	689b      	ldr	r3, [r3, #8]
 8005bb8:	f003 020c 	and.w	r2, r3, #12
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	685b      	ldr	r3, [r3, #4]
 8005bc0:	009b      	lsls	r3, r3, #2
 8005bc2:	429a      	cmp	r2, r3
 8005bc4:	d1e2      	bne.n	8005b8c <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	f003 0302 	and.w	r3, r3, #2
 8005bce:	2b00      	cmp	r3, #0
 8005bd0:	d04c      	beq.n	8005c6c <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f003 0304 	and.w	r3, r3, #4
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d005      	beq.n	8005bea <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005bde:	4b74      	ldr	r3, [pc, #464]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005be0:	689b      	ldr	r3, [r3, #8]
 8005be2:	4a73      	ldr	r2, [pc, #460]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005be4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005be8:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	681b      	ldr	r3, [r3, #0]
 8005bee:	f003 0308 	and.w	r3, r3, #8
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	d007      	beq.n	8005c06 <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005bf6:	4b6e      	ldr	r3, [pc, #440]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005bf8:	689b      	ldr	r3, [r3, #8]
 8005bfa:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 8005bfe:	4a6c      	ldr	r2, [pc, #432]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005c00:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8005c04:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	689b      	ldr	r3, [r3, #8]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d024      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	689b      	ldr	r3, [r3, #8]
 8005c12:	2b80      	cmp	r3, #128	@ 0x80
 8005c14:	d020      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	689b      	ldr	r3, [r3, #8]
 8005c1a:	2b90      	cmp	r3, #144	@ 0x90
 8005c1c:	d01c      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	689b      	ldr	r3, [r3, #8]
 8005c22:	2ba0      	cmp	r3, #160	@ 0xa0
 8005c24:	d018      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	689b      	ldr	r3, [r3, #8]
 8005c2a:	2bb0      	cmp	r3, #176	@ 0xb0
 8005c2c:	d014      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	689b      	ldr	r3, [r3, #8]
 8005c32:	2bc0      	cmp	r3, #192	@ 0xc0
 8005c34:	d010      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c36:	687b      	ldr	r3, [r7, #4]
 8005c38:	689b      	ldr	r3, [r3, #8]
 8005c3a:	2bd0      	cmp	r3, #208	@ 0xd0
 8005c3c:	d00c      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	689b      	ldr	r3, [r3, #8]
 8005c42:	2be0      	cmp	r3, #224	@ 0xe0
 8005c44:	d008      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	689b      	ldr	r3, [r3, #8]
 8005c4a:	2bf0      	cmp	r3, #240	@ 0xf0
 8005c4c:	d004      	beq.n	8005c58 <HAL_RCC_ClockConfig+0x28c>
 8005c4e:	f240 317a 	movw	r1, #890	@ 0x37a
 8005c52:	4858      	ldr	r0, [pc, #352]	@ (8005db4 <HAL_RCC_ClockConfig+0x3e8>)
 8005c54:	f7fb fb30 	bl	80012b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005c58:	4b55      	ldr	r3, [pc, #340]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005c5a:	689b      	ldr	r3, [r3, #8]
 8005c5c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	689b      	ldr	r3, [r3, #8]
 8005c64:	4952      	ldr	r1, [pc, #328]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005c66:	4313      	orrs	r3, r2
 8005c68:	608b      	str	r3, [r1, #8]
 8005c6a:	e008      	b.n	8005c7e <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	2b80      	cmp	r3, #128	@ 0x80
 8005c70:	d105      	bne.n	8005c7e <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8005c72:	4b4f      	ldr	r3, [pc, #316]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	4a4e      	ldr	r2, [pc, #312]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005c78:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c7c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005c7e:	4b4e      	ldr	r3, [pc, #312]	@ (8005db8 <HAL_RCC_ClockConfig+0x3ec>)
 8005c80:	681b      	ldr	r3, [r3, #0]
 8005c82:	f003 030f 	and.w	r3, r3, #15
 8005c86:	683a      	ldr	r2, [r7, #0]
 8005c88:	429a      	cmp	r2, r3
 8005c8a:	d21d      	bcs.n	8005cc8 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005c8c:	4b4a      	ldr	r3, [pc, #296]	@ (8005db8 <HAL_RCC_ClockConfig+0x3ec>)
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f023 020f 	bic.w	r2, r3, #15
 8005c94:	4948      	ldr	r1, [pc, #288]	@ (8005db8 <HAL_RCC_ClockConfig+0x3ec>)
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	4313      	orrs	r3, r2
 8005c9a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005c9c:	f7fb fe2c 	bl	80018f8 <HAL_GetTick>
 8005ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005ca2:	e00a      	b.n	8005cba <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005ca4:	f7fb fe28 	bl	80018f8 <HAL_GetTick>
 8005ca8:	4602      	mov	r2, r0
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	1ad3      	subs	r3, r2, r3
 8005cae:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005cb2:	4293      	cmp	r3, r2
 8005cb4:	d901      	bls.n	8005cba <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8005cb6:	2303      	movs	r3, #3
 8005cb8:	e075      	b.n	8005da6 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8005cba:	4b3f      	ldr	r3, [pc, #252]	@ (8005db8 <HAL_RCC_ClockConfig+0x3ec>)
 8005cbc:	681b      	ldr	r3, [r3, #0]
 8005cbe:	f003 030f 	and.w	r3, r3, #15
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	429a      	cmp	r2, r3
 8005cc6:	d1ed      	bne.n	8005ca4 <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005cc8:	687b      	ldr	r3, [r7, #4]
 8005cca:	681b      	ldr	r3, [r3, #0]
 8005ccc:	f003 0304 	and.w	r3, r3, #4
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d025      	beq.n	8005d20 <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	68db      	ldr	r3, [r3, #12]
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d018      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x342>
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	68db      	ldr	r3, [r3, #12]
 8005ce0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005ce4:	d013      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x342>
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	68db      	ldr	r3, [r3, #12]
 8005cea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005cee:	d00e      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x342>
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	68db      	ldr	r3, [r3, #12]
 8005cf4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005cf8:	d009      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x342>
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68db      	ldr	r3, [r3, #12]
 8005cfe:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d02:	d004      	beq.n	8005d0e <HAL_RCC_ClockConfig+0x342>
 8005d04:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8005d08:	482a      	ldr	r0, [pc, #168]	@ (8005db4 <HAL_RCC_ClockConfig+0x3e8>)
 8005d0a:	f7fb fad5 	bl	80012b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005d0e:	4b28      	ldr	r3, [pc, #160]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	68db      	ldr	r3, [r3, #12]
 8005d1a:	4925      	ldr	r1, [pc, #148]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005d1c:	4313      	orrs	r3, r2
 8005d1e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	681b      	ldr	r3, [r3, #0]
 8005d24:	f003 0308 	and.w	r3, r3, #8
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d026      	beq.n	8005d7a <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	691b      	ldr	r3, [r3, #16]
 8005d30:	2b00      	cmp	r3, #0
 8005d32:	d018      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x39a>
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	691b      	ldr	r3, [r3, #16]
 8005d38:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8005d3c:	d013      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x39a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	691b      	ldr	r3, [r3, #16]
 8005d42:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8005d46:	d00e      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x39a>
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8005d50:	d009      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x39a>
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	691b      	ldr	r3, [r3, #16]
 8005d56:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8005d5a:	d004      	beq.n	8005d66 <HAL_RCC_ClockConfig+0x39a>
 8005d5c:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8005d60:	4814      	ldr	r0, [pc, #80]	@ (8005db4 <HAL_RCC_ClockConfig+0x3e8>)
 8005d62:	f7fb faa9 	bl	80012b8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005d66:	4b12      	ldr	r3, [pc, #72]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005d68:	689b      	ldr	r3, [r3, #8]
 8005d6a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	691b      	ldr	r3, [r3, #16]
 8005d72:	00db      	lsls	r3, r3, #3
 8005d74:	490e      	ldr	r1, [pc, #56]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005d76:	4313      	orrs	r3, r2
 8005d78:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005d7a:	f000 f825 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 8005d7e:	4602      	mov	r2, r0
 8005d80:	4b0b      	ldr	r3, [pc, #44]	@ (8005db0 <HAL_RCC_ClockConfig+0x3e4>)
 8005d82:	689b      	ldr	r3, [r3, #8]
 8005d84:	091b      	lsrs	r3, r3, #4
 8005d86:	f003 030f 	and.w	r3, r3, #15
 8005d8a:	490c      	ldr	r1, [pc, #48]	@ (8005dbc <HAL_RCC_ClockConfig+0x3f0>)
 8005d8c:	5ccb      	ldrb	r3, [r1, r3]
 8005d8e:	f003 031f 	and.w	r3, r3, #31
 8005d92:	fa22 f303 	lsr.w	r3, r2, r3
 8005d96:	4a0a      	ldr	r2, [pc, #40]	@ (8005dc0 <HAL_RCC_ClockConfig+0x3f4>)
 8005d98:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005d9a:	4b0a      	ldr	r3, [pc, #40]	@ (8005dc4 <HAL_RCC_ClockConfig+0x3f8>)
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	4618      	mov	r0, r3
 8005da0:	f7fb fb40 	bl	8001424 <HAL_InitTick>
 8005da4:	4603      	mov	r3, r0
}
 8005da6:	4618      	mov	r0, r3
 8005da8:	3718      	adds	r7, #24
 8005daa:	46bd      	mov	sp, r7
 8005dac:	bd80      	pop	{r7, pc}
 8005dae:	bf00      	nop
 8005db0:	40021000 	.word	0x40021000
 8005db4:	0800c394 	.word	0x0800c394
 8005db8:	40022000 	.word	0x40022000
 8005dbc:	0800c5ac 	.word	0x0800c5ac
 8005dc0:	20000000 	.word	0x20000000
 8005dc4:	20000004 	.word	0x20000004

08005dc8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005dc8:	b480      	push	{r7}
 8005dca:	b087      	sub	sp, #28
 8005dcc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005dce:	4b2c      	ldr	r3, [pc, #176]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005dd0:	689b      	ldr	r3, [r3, #8]
 8005dd2:	f003 030c 	and.w	r3, r3, #12
 8005dd6:	2b04      	cmp	r3, #4
 8005dd8:	d102      	bne.n	8005de0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005dda:	4b2a      	ldr	r3, [pc, #168]	@ (8005e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005ddc:	613b      	str	r3, [r7, #16]
 8005dde:	e047      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005de0:	4b27      	ldr	r3, [pc, #156]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005de2:	689b      	ldr	r3, [r3, #8]
 8005de4:	f003 030c 	and.w	r3, r3, #12
 8005de8:	2b08      	cmp	r3, #8
 8005dea:	d102      	bne.n	8005df2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005dec:	4b26      	ldr	r3, [pc, #152]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005dee:	613b      	str	r3, [r7, #16]
 8005df0:	e03e      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005df2:	4b23      	ldr	r3, [pc, #140]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005df4:	689b      	ldr	r3, [r3, #8]
 8005df6:	f003 030c 	and.w	r3, r3, #12
 8005dfa:	2b0c      	cmp	r3, #12
 8005dfc:	d136      	bne.n	8005e6c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005dfe:	4b20      	ldr	r3, [pc, #128]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e00:	68db      	ldr	r3, [r3, #12]
 8005e02:	f003 0303 	and.w	r3, r3, #3
 8005e06:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005e08:	4b1d      	ldr	r3, [pc, #116]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e0a:	68db      	ldr	r3, [r3, #12]
 8005e0c:	091b      	lsrs	r3, r3, #4
 8005e0e:	f003 030f 	and.w	r3, r3, #15
 8005e12:	3301      	adds	r3, #1
 8005e14:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	2b03      	cmp	r3, #3
 8005e1a:	d10c      	bne.n	8005e36 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e1c:	4a1a      	ldr	r2, [pc, #104]	@ (8005e88 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005e1e:	68bb      	ldr	r3, [r7, #8]
 8005e20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e24:	4a16      	ldr	r2, [pc, #88]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e26:	68d2      	ldr	r2, [r2, #12]
 8005e28:	0a12      	lsrs	r2, r2, #8
 8005e2a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e2e:	fb02 f303 	mul.w	r3, r2, r3
 8005e32:	617b      	str	r3, [r7, #20]
      break;
 8005e34:	e00c      	b.n	8005e50 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005e36:	4a13      	ldr	r2, [pc, #76]	@ (8005e84 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005e38:	68bb      	ldr	r3, [r7, #8]
 8005e3a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e3e:	4a10      	ldr	r2, [pc, #64]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e40:	68d2      	ldr	r2, [r2, #12]
 8005e42:	0a12      	lsrs	r2, r2, #8
 8005e44:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005e48:	fb02 f303 	mul.w	r3, r2, r3
 8005e4c:	617b      	str	r3, [r7, #20]
      break;
 8005e4e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005e50:	4b0b      	ldr	r3, [pc, #44]	@ (8005e80 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	0e5b      	lsrs	r3, r3, #25
 8005e56:	f003 0303 	and.w	r3, r3, #3
 8005e5a:	3301      	adds	r3, #1
 8005e5c:	005b      	lsls	r3, r3, #1
 8005e5e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005e60:	697a      	ldr	r2, [r7, #20]
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	fbb2 f3f3 	udiv	r3, r2, r3
 8005e68:	613b      	str	r3, [r7, #16]
 8005e6a:	e001      	b.n	8005e70 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005e70:	693b      	ldr	r3, [r7, #16]
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	371c      	adds	r7, #28
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
 8005e7e:	bf00      	nop
 8005e80:	40021000 	.word	0x40021000
 8005e84:	00f42400 	.word	0x00f42400
 8005e88:	016e3600 	.word	0x016e3600

08005e8c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005e90:	4b03      	ldr	r3, [pc, #12]	@ (8005ea0 <HAL_RCC_GetHCLKFreq+0x14>)
 8005e92:	681b      	ldr	r3, [r3, #0]
}
 8005e94:	4618      	mov	r0, r3
 8005e96:	46bd      	mov	sp, r7
 8005e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e9c:	4770      	bx	lr
 8005e9e:	bf00      	nop
 8005ea0:	20000000 	.word	0x20000000

08005ea4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005ea4:	b580      	push	{r7, lr}
 8005ea6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005ea8:	f7ff fff0 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005eac:	4602      	mov	r2, r0
 8005eae:	4b06      	ldr	r3, [pc, #24]	@ (8005ec8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005eb0:	689b      	ldr	r3, [r3, #8]
 8005eb2:	0a1b      	lsrs	r3, r3, #8
 8005eb4:	f003 0307 	and.w	r3, r3, #7
 8005eb8:	4904      	ldr	r1, [pc, #16]	@ (8005ecc <HAL_RCC_GetPCLK1Freq+0x28>)
 8005eba:	5ccb      	ldrb	r3, [r1, r3]
 8005ebc:	f003 031f 	and.w	r3, r3, #31
 8005ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ec4:	4618      	mov	r0, r3
 8005ec6:	bd80      	pop	{r7, pc}
 8005ec8:	40021000 	.word	0x40021000
 8005ecc:	0800c5bc 	.word	0x0800c5bc

08005ed0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005ed0:	b580      	push	{r7, lr}
 8005ed2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005ed4:	f7ff ffda 	bl	8005e8c <HAL_RCC_GetHCLKFreq>
 8005ed8:	4602      	mov	r2, r0
 8005eda:	4b06      	ldr	r3, [pc, #24]	@ (8005ef4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005edc:	689b      	ldr	r3, [r3, #8]
 8005ede:	0adb      	lsrs	r3, r3, #11
 8005ee0:	f003 0307 	and.w	r3, r3, #7
 8005ee4:	4904      	ldr	r1, [pc, #16]	@ (8005ef8 <HAL_RCC_GetPCLK2Freq+0x28>)
 8005ee6:	5ccb      	ldrb	r3, [r1, r3]
 8005ee8:	f003 031f 	and.w	r3, r3, #31
 8005eec:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ef0:	4618      	mov	r0, r3
 8005ef2:	bd80      	pop	{r7, pc}
 8005ef4:	40021000 	.word	0x40021000
 8005ef8:	0800c5bc 	.word	0x0800c5bc

08005efc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005efc:	b580      	push	{r7, lr}
 8005efe:	b082      	sub	sp, #8
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
 8005f04:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d104      	bne.n	8005f16 <HAL_RCC_GetClockConfig+0x1a>
 8005f0c:	f240 41e3 	movw	r1, #1251	@ 0x4e3
 8005f10:	4818      	ldr	r0, [pc, #96]	@ (8005f74 <HAL_RCC_GetClockConfig+0x78>)
 8005f12:	f7fb f9d1 	bl	80012b8 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8005f16:	683b      	ldr	r3, [r7, #0]
 8005f18:	2b00      	cmp	r3, #0
 8005f1a:	d104      	bne.n	8005f26 <HAL_RCC_GetClockConfig+0x2a>
 8005f1c:	f240 41e4 	movw	r1, #1252	@ 0x4e4
 8005f20:	4814      	ldr	r0, [pc, #80]	@ (8005f74 <HAL_RCC_GetClockConfig+0x78>)
 8005f22:	f7fb f9c9 	bl	80012b8 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8005f26:	687b      	ldr	r3, [r7, #4]
 8005f28:	220f      	movs	r2, #15
 8005f2a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005f2c:	4b12      	ldr	r3, [pc, #72]	@ (8005f78 <HAL_RCC_GetClockConfig+0x7c>)
 8005f2e:	689b      	ldr	r3, [r3, #8]
 8005f30:	f003 0203 	and.w	r2, r3, #3
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8005f38:	4b0f      	ldr	r3, [pc, #60]	@ (8005f78 <HAL_RCC_GetClockConfig+0x7c>)
 8005f3a:	689b      	ldr	r3, [r3, #8]
 8005f3c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8005f44:	4b0c      	ldr	r3, [pc, #48]	@ (8005f78 <HAL_RCC_GetClockConfig+0x7c>)
 8005f46:	689b      	ldr	r3, [r3, #8]
 8005f48:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8005f50:	4b09      	ldr	r3, [pc, #36]	@ (8005f78 <HAL_RCC_GetClockConfig+0x7c>)
 8005f52:	689b      	ldr	r3, [r3, #8]
 8005f54:	08db      	lsrs	r3, r3, #3
 8005f56:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8005f5e:	4b07      	ldr	r3, [pc, #28]	@ (8005f7c <HAL_RCC_GetClockConfig+0x80>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f003 020f 	and.w	r2, r3, #15
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	601a      	str	r2, [r3, #0]
}
 8005f6a:	bf00      	nop
 8005f6c:	3708      	adds	r7, #8
 8005f6e:	46bd      	mov	sp, r7
 8005f70:	bd80      	pop	{r7, pc}
 8005f72:	bf00      	nop
 8005f74:	0800c394 	.word	0x0800c394
 8005f78:	40021000 	.word	0x40021000
 8005f7c:	40022000 	.word	0x40022000

08005f80 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005f80:	b480      	push	{r7}
 8005f82:	b087      	sub	sp, #28
 8005f84:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005f86:	4b1e      	ldr	r3, [pc, #120]	@ (8006000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f88:	68db      	ldr	r3, [r3, #12]
 8005f8a:	f003 0303 	and.w	r3, r3, #3
 8005f8e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005f90:	4b1b      	ldr	r3, [pc, #108]	@ (8006000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	091b      	lsrs	r3, r3, #4
 8005f96:	f003 030f 	and.w	r3, r3, #15
 8005f9a:	3301      	adds	r3, #1
 8005f9c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005f9e:	693b      	ldr	r3, [r7, #16]
 8005fa0:	2b03      	cmp	r3, #3
 8005fa2:	d10c      	bne.n	8005fbe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fa4:	4a17      	ldr	r2, [pc, #92]	@ (8006004 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8005fa6:	68fb      	ldr	r3, [r7, #12]
 8005fa8:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fac:	4a14      	ldr	r2, [pc, #80]	@ (8006000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fae:	68d2      	ldr	r2, [r2, #12]
 8005fb0:	0a12      	lsrs	r2, r2, #8
 8005fb2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fb6:	fb02 f303 	mul.w	r3, r2, r3
 8005fba:	617b      	str	r3, [r7, #20]
    break;
 8005fbc:	e00c      	b.n	8005fd8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005fbe:	4a12      	ldr	r2, [pc, #72]	@ (8006008 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	fbb2 f3f3 	udiv	r3, r2, r3
 8005fc6:	4a0e      	ldr	r2, [pc, #56]	@ (8006000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fc8:	68d2      	ldr	r2, [r2, #12]
 8005fca:	0a12      	lsrs	r2, r2, #8
 8005fcc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8005fd0:	fb02 f303 	mul.w	r3, r2, r3
 8005fd4:	617b      	str	r3, [r7, #20]
    break;
 8005fd6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005fd8:	4b09      	ldr	r3, [pc, #36]	@ (8006000 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005fda:	68db      	ldr	r3, [r3, #12]
 8005fdc:	0e5b      	lsrs	r3, r3, #25
 8005fde:	f003 0303 	and.w	r3, r3, #3
 8005fe2:	3301      	adds	r3, #1
 8005fe4:	005b      	lsls	r3, r3, #1
 8005fe6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005fe8:	697a      	ldr	r2, [r7, #20]
 8005fea:	68bb      	ldr	r3, [r7, #8]
 8005fec:	fbb2 f3f3 	udiv	r3, r2, r3
 8005ff0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005ff2:	687b      	ldr	r3, [r7, #4]
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	371c      	adds	r7, #28
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ffe:	4770      	bx	lr
 8006000:	40021000 	.word	0x40021000
 8006004:	016e3600 	.word	0x016e3600
 8006008:	00f42400 	.word	0x00f42400

0800600c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800600c:	b580      	push	{r7, lr}
 800600e:	b086      	sub	sp, #24
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8006014:	2300      	movs	r3, #0
 8006016:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8006018:	2300      	movs	r3, #0
 800601a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	f003 0301 	and.w	r3, r3, #1
 8006024:	2b00      	cmp	r3, #0
 8006026:	d15d      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	f003 0302 	and.w	r3, r3, #2
 8006030:	2b00      	cmp	r3, #0
 8006032:	d157      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	f003 0304 	and.w	r3, r3, #4
 800603c:	2b00      	cmp	r3, #0
 800603e:	d151      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f003 0308 	and.w	r3, r3, #8
 8006048:	2b00      	cmp	r3, #0
 800604a:	d14b      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	f003 0320 	and.w	r3, r3, #32
 8006054:	2b00      	cmp	r3, #0
 8006056:	d145      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006060:	2b00      	cmp	r3, #0
 8006062:	d13f      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	681b      	ldr	r3, [r3, #0]
 8006068:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800606c:	2b00      	cmp	r3, #0
 800606e:	d139      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	681b      	ldr	r3, [r3, #0]
 8006074:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006078:	2b00      	cmp	r3, #0
 800607a:	d133      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006084:	2b00      	cmp	r3, #0
 8006086:	d12d      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8006090:	2b00      	cmp	r3, #0
 8006092:	d127      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800609c:	2b00      	cmp	r3, #0
 800609e:	d121      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d11b      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	681b      	ldr	r3, [r3, #0]
 80060b0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d115      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80060b8:	687b      	ldr	r3, [r7, #4]
 80060ba:	681b      	ldr	r3, [r3, #0]
 80060bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	d10f      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d109      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060d8:	2b00      	cmp	r3, #0
 80060da:	d103      	bne.n	80060e4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 80060dc:	2183      	movs	r1, #131	@ 0x83
 80060de:	4855      	ldr	r0, [pc, #340]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 80060e0:	f7fb f8ea 	bl	80012b8 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	f000 80b2 	beq.w	8006256 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80060f2:	2300      	movs	r3, #0
 80060f4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d012      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x118>
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006102:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006106:	d00d      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800610c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006110:	d008      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006116:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800611a:	d003      	beq.n	8006124 <HAL_RCCEx_PeriphCLKConfig+0x118>
 800611c:	218b      	movs	r1, #139	@ 0x8b
 800611e:	4845      	ldr	r0, [pc, #276]	@ (8006234 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8006120:	f7fb f8ca 	bl	80012b8 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006124:	4b44      	ldr	r3, [pc, #272]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006126:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006128:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800612c:	2b00      	cmp	r3, #0
 800612e:	d10d      	bne.n	800614c <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006130:	4b41      	ldr	r3, [pc, #260]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006132:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006134:	4a40      	ldr	r2, [pc, #256]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006136:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800613a:	6593      	str	r3, [r2, #88]	@ 0x58
 800613c:	4b3e      	ldr	r3, [pc, #248]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 800613e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8006140:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8006144:	60bb      	str	r3, [r7, #8]
 8006146:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006148:	2301      	movs	r3, #1
 800614a:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800614c:	4b3b      	ldr	r3, [pc, #236]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a3a      	ldr	r2, [pc, #232]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006152:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8006156:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8006158:	f7fb fbce 	bl	80018f8 <HAL_GetTick>
 800615c:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800615e:	e009      	b.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006160:	f7fb fbca 	bl	80018f8 <HAL_GetTick>
 8006164:	4602      	mov	r2, r0
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	1ad3      	subs	r3, r2, r3
 800616a:	2b02      	cmp	r3, #2
 800616c:	d902      	bls.n	8006174 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 800616e:	2303      	movs	r3, #3
 8006170:	74fb      	strb	r3, [r7, #19]
        break;
 8006172:	e005      	b.n	8006180 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8006174:	4b31      	ldr	r3, [pc, #196]	@ (800623c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800617c:	2b00      	cmp	r3, #0
 800617e:	d0ef      	beq.n	8006160 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8006180:	7cfb      	ldrb	r3, [r7, #19]
 8006182:	2b00      	cmp	r3, #0
 8006184:	d15c      	bne.n	8006240 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8006186:	4b2c      	ldr	r3, [pc, #176]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006188:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800618c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006190:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8006192:	697b      	ldr	r3, [r7, #20]
 8006194:	2b00      	cmp	r3, #0
 8006196:	d01e      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800619c:	697a      	ldr	r2, [r7, #20]
 800619e:	429a      	cmp	r2, r3
 80061a0:	d019      	beq.n	80061d6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 80061a2:	4b25      	ldr	r3, [pc, #148]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80061a4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061a8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80061ac:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 80061ae:	4b22      	ldr	r3, [pc, #136]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80061b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061b4:	4a20      	ldr	r2, [pc, #128]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80061b6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80061ba:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 80061be:	4b1e      	ldr	r3, [pc, #120]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80061c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80061c4:	4a1c      	ldr	r2, [pc, #112]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80061c6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80061ca:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 80061ce:	4a1a      	ldr	r2, [pc, #104]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 80061d0:	697b      	ldr	r3, [r7, #20]
 80061d2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 80061d6:	697b      	ldr	r3, [r7, #20]
 80061d8:	f003 0301 	and.w	r3, r3, #1
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d016      	beq.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80061e0:	f7fb fb8a 	bl	80018f8 <HAL_GetTick>
 80061e4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80061e6:	e00b      	b.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80061e8:	f7fb fb86 	bl	80018f8 <HAL_GetTick>
 80061ec:	4602      	mov	r2, r0
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	1ad3      	subs	r3, r2, r3
 80061f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d902      	bls.n	8006200 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 80061fa:	2303      	movs	r3, #3
 80061fc:	74fb      	strb	r3, [r7, #19]
            break;
 80061fe:	e006      	b.n	800620e <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8006200:	4b0d      	ldr	r3, [pc, #52]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8006206:	f003 0302 	and.w	r3, r3, #2
 800620a:	2b00      	cmp	r3, #0
 800620c:	d0ec      	beq.n	80061e8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 800620e:	7cfb      	ldrb	r3, [r7, #19]
 8006210:	2b00      	cmp	r3, #0
 8006212:	d10b      	bne.n	800622c <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8006214:	4b08      	ldr	r3, [pc, #32]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006216:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800621a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	4905      	ldr	r1, [pc, #20]	@ (8006238 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8006224:	4313      	orrs	r3, r2
 8006226:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 800622a:	e00b      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800622c:	7cfb      	ldrb	r3, [r7, #19]
 800622e:	74bb      	strb	r3, [r7, #18]
 8006230:	e008      	b.n	8006244 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8006232:	bf00      	nop
 8006234:	0800c3cc 	.word	0x0800c3cc
 8006238:	40021000 	.word	0x40021000
 800623c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8006240:	7cfb      	ldrb	r3, [r7, #19]
 8006242:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006244:	7c7b      	ldrb	r3, [r7, #17]
 8006246:	2b01      	cmp	r3, #1
 8006248:	d105      	bne.n	8006256 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800624a:	4b98      	ldr	r3, [pc, #608]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800624c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800624e:	4a97      	ldr	r2, [pc, #604]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006250:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006254:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f003 0301 	and.w	r3, r3, #1
 800625e:	2b00      	cmp	r3, #0
 8006260:	d01e      	beq.n	80062a0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00f      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2b01      	cmp	r3, #1
 8006270:	d00b      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	685b      	ldr	r3, [r3, #4]
 8006276:	2b03      	cmp	r3, #3
 8006278:	d007      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	685b      	ldr	r3, [r3, #4]
 800627e:	2b02      	cmp	r3, #2
 8006280:	d003      	beq.n	800628a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8006282:	21e0      	movs	r1, #224	@ 0xe0
 8006284:	488a      	ldr	r0, [pc, #552]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006286:	f7fb f817 	bl	80012b8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800628a:	4b88      	ldr	r3, [pc, #544]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800628c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006290:	f023 0203 	bic.w	r2, r3, #3
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	685b      	ldr	r3, [r3, #4]
 8006298:	4984      	ldr	r1, [pc, #528]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800629a:	4313      	orrs	r3, r2
 800629c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	f003 0302 	and.w	r3, r3, #2
 80062a8:	2b00      	cmp	r3, #0
 80062aa:	d01e      	beq.n	80062ea <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	689b      	ldr	r3, [r3, #8]
 80062b0:	2b00      	cmp	r3, #0
 80062b2:	d00f      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	689b      	ldr	r3, [r3, #8]
 80062b8:	2b04      	cmp	r3, #4
 80062ba:	d00b      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	689b      	ldr	r3, [r3, #8]
 80062c0:	2b0c      	cmp	r3, #12
 80062c2:	d007      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80062c4:	687b      	ldr	r3, [r7, #4]
 80062c6:	689b      	ldr	r3, [r3, #8]
 80062c8:	2b08      	cmp	r3, #8
 80062ca:	d003      	beq.n	80062d4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 80062cc:	21ea      	movs	r1, #234	@ 0xea
 80062ce:	4878      	ldr	r0, [pc, #480]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80062d0:	f7fa fff2 	bl	80012b8 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80062d4:	4b75      	ldr	r3, [pc, #468]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062d6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80062da:	f023 020c 	bic.w	r2, r3, #12
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	4972      	ldr	r1, [pc, #456]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80062e4:	4313      	orrs	r3, r2
 80062e6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	f003 0304 	and.w	r3, r3, #4
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d01e      	beq.n	8006334 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	68db      	ldr	r3, [r3, #12]
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d00f      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x312>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	68db      	ldr	r3, [r3, #12]
 8006302:	2b10      	cmp	r3, #16
 8006304:	d00b      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	68db      	ldr	r3, [r3, #12]
 800630a:	2b30      	cmp	r3, #48	@ 0x30
 800630c:	d007      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x312>
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	68db      	ldr	r3, [r3, #12]
 8006312:	2b20      	cmp	r3, #32
 8006314:	d003      	beq.n	800631e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8006316:	21f4      	movs	r1, #244	@ 0xf4
 8006318:	4865      	ldr	r0, [pc, #404]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800631a:	f7fa ffcd 	bl	80012b8 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800631e:	4b63      	ldr	r3, [pc, #396]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006320:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006324:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	68db      	ldr	r3, [r3, #12]
 800632c:	495f      	ldr	r1, [pc, #380]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800632e:	4313      	orrs	r3, r2
 8006330:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f003 0308 	and.w	r3, r3, #8
 800633c:	2b00      	cmp	r3, #0
 800633e:	d01e      	beq.n	800637e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	691b      	ldr	r3, [r3, #16]
 8006344:	2b00      	cmp	r3, #0
 8006346:	d00f      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	2b40      	cmp	r3, #64	@ 0x40
 800634e:	d00b      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	691b      	ldr	r3, [r3, #16]
 8006354:	2bc0      	cmp	r3, #192	@ 0xc0
 8006356:	d007      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	691b      	ldr	r3, [r3, #16]
 800635c:	2b80      	cmp	r3, #128	@ 0x80
 800635e:	d003      	beq.n	8006368 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8006360:	21ff      	movs	r1, #255	@ 0xff
 8006362:	4853      	ldr	r0, [pc, #332]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006364:	f7fa ffa8 	bl	80012b8 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8006368:	4b50      	ldr	r3, [pc, #320]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800636a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800636e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	691b      	ldr	r3, [r3, #16]
 8006376:	494d      	ldr	r1, [pc, #308]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006378:	4313      	orrs	r3, r2
 800637a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800637e:	687b      	ldr	r3, [r7, #4]
 8006380:	681b      	ldr	r3, [r3, #0]
 8006382:	f003 0320 	and.w	r3, r3, #32
 8006386:	2b00      	cmp	r3, #0
 8006388:	d022      	beq.n	80063d0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	695b      	ldr	r3, [r3, #20]
 800638e:	2b00      	cmp	r3, #0
 8006390:	d013      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8006392:	687b      	ldr	r3, [r7, #4]
 8006394:	695b      	ldr	r3, [r3, #20]
 8006396:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800639a:	d00e      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	695b      	ldr	r3, [r3, #20]
 80063a0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80063a4:	d009      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	695b      	ldr	r3, [r3, #20]
 80063aa:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80063ae:	d004      	beq.n	80063ba <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 80063b0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 80063b4:	483e      	ldr	r0, [pc, #248]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063b6:	f7fa ff7f 	bl	80012b8 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80063ba:	4b3c      	ldr	r3, [pc, #240]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80063c0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	695b      	ldr	r3, [r3, #20]
 80063c8:	4938      	ldr	r1, [pc, #224]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80063ca:	4313      	orrs	r3, r2
 80063cc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d01d      	beq.n	8006418 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	699b      	ldr	r3, [r3, #24]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d00e      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	699b      	ldr	r3, [r3, #24]
 80063e8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063ec:	d009      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	699b      	ldr	r3, [r3, #24]
 80063f2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80063f6:	d004      	beq.n	8006402 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 80063f8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80063fc:	482c      	ldr	r0, [pc, #176]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80063fe:	f7fa ff5b 	bl	80012b8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8006402:	4b2a      	ldr	r3, [pc, #168]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006404:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006408:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	699b      	ldr	r3, [r3, #24]
 8006410:	4926      	ldr	r1, [pc, #152]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006412:	4313      	orrs	r3, r2
 8006414:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006420:	2b00      	cmp	r3, #0
 8006422:	d01d      	beq.n	8006460 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	69db      	ldr	r3, [r3, #28]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d00e      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	69db      	ldr	r3, [r3, #28]
 8006430:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8006434:	d009      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	69db      	ldr	r3, [r3, #28]
 800643a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800643e:	d004      	beq.n	800644a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8006440:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8006444:	481a      	ldr	r0, [pc, #104]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8006446:	f7fa ff37 	bl	80012b8 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800644a:	4b18      	ldr	r3, [pc, #96]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800644c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006450:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	69db      	ldr	r3, [r3, #28]
 8006458:	4914      	ldr	r1, [pc, #80]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 800645a:	4313      	orrs	r3, r2
 800645c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8006468:	2b00      	cmp	r3, #0
 800646a:	d023      	beq.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	6a1b      	ldr	r3, [r3, #32]
 8006470:	2b00      	cmp	r3, #0
 8006472:	d00e      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	6a1b      	ldr	r3, [r3, #32]
 8006478:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800647c:	d009      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x486>
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	6a1b      	ldr	r3, [r3, #32]
 8006482:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006486:	d004      	beq.n	8006492 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8006488:	f44f 719b 	mov.w	r1, #310	@ 0x136
 800648c:	4808      	ldr	r0, [pc, #32]	@ (80064b0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800648e:	f7fa ff13 	bl	80012b8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8006492:	4b06      	ldr	r3, [pc, #24]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8006494:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006498:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	4902      	ldr	r1, [pc, #8]	@ (80064ac <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80064a2:	4313      	orrs	r3, r2
 80064a4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80064a8:	e004      	b.n	80064b4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80064aa:	bf00      	nop
 80064ac:	40021000 	.word	0x40021000
 80064b0:	0800c3cc 	.word	0x0800c3cc
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	681b      	ldr	r3, [r3, #0]
 80064b8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d022      	beq.n	8006506 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064c4:	2b00      	cmp	r3, #0
 80064c6:	d013      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064cc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80064d0:	d00e      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064d6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80064da:	d009      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064e0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 80064e4:	d004      	beq.n	80064f0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80064e6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 80064ea:	4896      	ldr	r0, [pc, #600]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80064ec:	f7fa fee4 	bl	80012b8 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80064f0:	4b95      	ldr	r3, [pc, #596]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80064f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80064f6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80064fe:	4992      	ldr	r1, [pc, #584]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006500:	4313      	orrs	r3, r2
 8006502:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800650e:	2b00      	cmp	r3, #0
 8006510:	d02d      	beq.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006516:	2b00      	cmp	r3, #0
 8006518:	d013      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800651e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006522:	d00e      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006528:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800652c:	d009      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006532:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8006536:	d004      	beq.n	8006542 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8006538:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 800653c:	4881      	ldr	r0, [pc, #516]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800653e:	f7fa febb 	bl	80012b8 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8006542:	4b81      	ldr	r3, [pc, #516]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006544:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006548:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006550:	497d      	ldr	r1, [pc, #500]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006552:	4313      	orrs	r3, r2
 8006554:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800655c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006560:	d105      	bne.n	800656e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006562:	4b79      	ldr	r3, [pc, #484]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006564:	68db      	ldr	r3, [r3, #12]
 8006566:	4a78      	ldr	r2, [pc, #480]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006568:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800656c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006576:	2b00      	cmp	r3, #0
 8006578:	d02d      	beq.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657e:	2b00      	cmp	r3, #0
 8006580:	d013      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006586:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800658a:	d00e      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006590:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8006594:	d009      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800659a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800659e:	d004      	beq.n	80065aa <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80065a0:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80065a4:	4867      	ldr	r0, [pc, #412]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80065a6:	f7fa fe87 	bl	80012b8 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80065aa:	4b67      	ldr	r3, [pc, #412]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80065ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80065b0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80065b4:	687b      	ldr	r3, [r7, #4]
 80065b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b8:	4963      	ldr	r1, [pc, #396]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80065ba:	4313      	orrs	r3, r2
 80065bc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80065c0:	687b      	ldr	r3, [r7, #4]
 80065c2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065c4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80065c8:	d105      	bne.n	80065d6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80065ca:	4b5f      	ldr	r3, [pc, #380]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80065cc:	68db      	ldr	r3, [r3, #12]
 80065ce:	4a5e      	ldr	r2, [pc, #376]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80065d0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80065d4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d028      	beq.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065e6:	2b00      	cmp	r3, #0
 80065e8:	d00e      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065ee:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80065f2:	d009      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80065fc:	d004      	beq.n	8006608 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80065fe:	f240 1179 	movw	r1, #377	@ 0x179
 8006602:	4850      	ldr	r0, [pc, #320]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006604:	f7fa fe58 	bl	80012b8 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8006608:	4b4f      	ldr	r3, [pc, #316]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800660a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800660e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006616:	494c      	ldr	r1, [pc, #304]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006618:	4313      	orrs	r3, r2
 800661a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006622:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8006626:	d105      	bne.n	8006634 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8006628:	4b47      	ldr	r3, [pc, #284]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800662a:	68db      	ldr	r3, [r3, #12]
 800662c:	4a46      	ldr	r2, [pc, #280]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800662e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006632:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800663c:	2b00      	cmp	r3, #0
 800663e:	d023      	beq.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006644:	2b00      	cmp	r3, #0
 8006646:	d009      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800664c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8006650:	d004      	beq.n	800665c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8006652:	f240 118b 	movw	r1, #395	@ 0x18b
 8006656:	483b      	ldr	r0, [pc, #236]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8006658:	f7fa fe2e 	bl	80012b8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800665c:	4b3a      	ldr	r3, [pc, #232]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800665e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006662:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8006666:	687b      	ldr	r3, [r7, #4]
 8006668:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800666a:	4937      	ldr	r1, [pc, #220]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800666c:	4313      	orrs	r3, r2
 800666e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006676:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800667a:	d105      	bne.n	8006688 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800667c:	4b32      	ldr	r3, [pc, #200]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800667e:	68db      	ldr	r3, [r3, #12]
 8006680:	4a31      	ldr	r2, [pc, #196]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006682:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8006686:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8006690:	2b00      	cmp	r3, #0
 8006692:	d023      	beq.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006698:	2b00      	cmp	r3, #0
 800669a:	d009      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800669c:	687b      	ldr	r3, [r7, #4]
 800669e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066a0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066a4:	d004      	beq.n	80066b0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80066a6:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 80066aa:	4826      	ldr	r0, [pc, #152]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80066ac:	f7fa fe04 	bl	80012b8 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80066b0:	4b25      	ldr	r3, [pc, #148]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80066b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80066b6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066be:	4922      	ldr	r1, [pc, #136]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80066c0:	4313      	orrs	r3, r2
 80066c2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80066c6:	687b      	ldr	r3, [r7, #4]
 80066c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80066ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80066ce:	d105      	bne.n	80066dc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80066d0:	4b1d      	ldr	r3, [pc, #116]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80066d2:	68db      	ldr	r3, [r3, #12]
 80066d4:	4a1c      	ldr	r2, [pc, #112]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80066d6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80066da:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80066e4:	2b00      	cmp	r3, #0
 80066e6:	d028      	beq.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d00e      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x702>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066f4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80066f8:	d009      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x702>
 80066fa:	687b      	ldr	r3, [r7, #4]
 80066fc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80066fe:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8006702:	d004      	beq.n	800670e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8006704:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8006708:	480e      	ldr	r0, [pc, #56]	@ (8006744 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800670a:	f7fa fdd5 	bl	80012b8 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800670e:	4b0e      	ldr	r3, [pc, #56]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006710:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006714:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800671c:	490a      	ldr	r1, [pc, #40]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800671e:	4313      	orrs	r3, r2
 8006720:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006728:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800672c:	d105      	bne.n	800673a <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800672e:	4b06      	ldr	r3, [pc, #24]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006730:	68db      	ldr	r3, [r3, #12]
 8006732:	4a05      	ldr	r2, [pc, #20]	@ (8006748 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8006734:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8006738:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800673a:	7cbb      	ldrb	r3, [r7, #18]
}
 800673c:	4618      	mov	r0, r3
 800673e:	3718      	adds	r7, #24
 8006740:	46bd      	mov	sp, r7
 8006742:	bd80      	pop	{r7, pc}
 8006744:	0800c3cc 	.word	0x0800c3cc
 8006748:	40021000 	.word	0x40021000

0800674c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800674c:	b580      	push	{r7, lr}
 800674e:	b084      	sub	sp, #16
 8006750:	af00      	add	r7, sp, #0
 8006752:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	2b00      	cmp	r3, #0
 8006758:	d101      	bne.n	800675e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800675a:	2301      	movs	r3, #1
 800675c:	e1e5      	b.n	8006b2a <HAL_SPI_Init+0x3de>
  }

  /* Check the parameters */
  assert_param(IS_SPI_ALL_INSTANCE(hspi->Instance));
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4a7b      	ldr	r2, [pc, #492]	@ (8006950 <HAL_SPI_Init+0x204>)
 8006764:	4293      	cmp	r3, r2
 8006766:	d00e      	beq.n	8006786 <HAL_SPI_Init+0x3a>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a79      	ldr	r2, [pc, #484]	@ (8006954 <HAL_SPI_Init+0x208>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d009      	beq.n	8006786 <HAL_SPI_Init+0x3a>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	4a78      	ldr	r2, [pc, #480]	@ (8006958 <HAL_SPI_Init+0x20c>)
 8006778:	4293      	cmp	r3, r2
 800677a:	d004      	beq.n	8006786 <HAL_SPI_Init+0x3a>
 800677c:	f240 1145 	movw	r1, #325	@ 0x145
 8006780:	4876      	ldr	r0, [pc, #472]	@ (800695c <HAL_SPI_Init+0x210>)
 8006782:	f7fa fd99 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_MODE(hspi->Init.Mode));
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	685b      	ldr	r3, [r3, #4]
 800678a:	2b00      	cmp	r3, #0
 800678c:	d009      	beq.n	80067a2 <HAL_SPI_Init+0x56>
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	685b      	ldr	r3, [r3, #4]
 8006792:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006796:	d004      	beq.n	80067a2 <HAL_SPI_Init+0x56>
 8006798:	f44f 71a3 	mov.w	r1, #326	@ 0x146
 800679c:	486f      	ldr	r0, [pc, #444]	@ (800695c <HAL_SPI_Init+0x210>)
 800679e:	f7fa fd8b 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_DIRECTION(hspi->Init.Direction));
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	689b      	ldr	r3, [r3, #8]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d00e      	beq.n	80067c8 <HAL_SPI_Init+0x7c>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067b2:	d009      	beq.n	80067c8 <HAL_SPI_Init+0x7c>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	689b      	ldr	r3, [r3, #8]
 80067b8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80067bc:	d004      	beq.n	80067c8 <HAL_SPI_Init+0x7c>
 80067be:	f240 1147 	movw	r1, #327	@ 0x147
 80067c2:	4866      	ldr	r0, [pc, #408]	@ (800695c <HAL_SPI_Init+0x210>)
 80067c4:	f7fa fd78 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	68db      	ldr	r3, [r3, #12]
 80067cc:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 80067d0:	d040      	beq.n	8006854 <HAL_SPI_Init+0x108>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	68db      	ldr	r3, [r3, #12]
 80067d6:	f5b3 6f60 	cmp.w	r3, #3584	@ 0xe00
 80067da:	d03b      	beq.n	8006854 <HAL_SPI_Init+0x108>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	f5b3 6f50 	cmp.w	r3, #3328	@ 0xd00
 80067e4:	d036      	beq.n	8006854 <HAL_SPI_Init+0x108>
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	68db      	ldr	r3, [r3, #12]
 80067ea:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067ee:	d031      	beq.n	8006854 <HAL_SPI_Init+0x108>
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	f5b3 6f30 	cmp.w	r3, #2816	@ 0xb00
 80067f8:	d02c      	beq.n	8006854 <HAL_SPI_Init+0x108>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	68db      	ldr	r3, [r3, #12]
 80067fe:	f5b3 6f20 	cmp.w	r3, #2560	@ 0xa00
 8006802:	d027      	beq.n	8006854 <HAL_SPI_Init+0x108>
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	68db      	ldr	r3, [r3, #12]
 8006808:	f5b3 6f10 	cmp.w	r3, #2304	@ 0x900
 800680c:	d022      	beq.n	8006854 <HAL_SPI_Init+0x108>
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006816:	d01d      	beq.n	8006854 <HAL_SPI_Init+0x108>
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	68db      	ldr	r3, [r3, #12]
 800681c:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006820:	d018      	beq.n	8006854 <HAL_SPI_Init+0x108>
 8006822:	687b      	ldr	r3, [r7, #4]
 8006824:	68db      	ldr	r3, [r3, #12]
 8006826:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800682a:	d013      	beq.n	8006854 <HAL_SPI_Init+0x108>
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	68db      	ldr	r3, [r3, #12]
 8006830:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8006834:	d00e      	beq.n	8006854 <HAL_SPI_Init+0x108>
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	68db      	ldr	r3, [r3, #12]
 800683a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800683e:	d009      	beq.n	8006854 <HAL_SPI_Init+0x108>
 8006840:	687b      	ldr	r3, [r7, #4]
 8006842:	68db      	ldr	r3, [r3, #12]
 8006844:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006848:	d004      	beq.n	8006854 <HAL_SPI_Init+0x108>
 800684a:	f44f 71a4 	mov.w	r1, #328	@ 0x148
 800684e:	4843      	ldr	r0, [pc, #268]	@ (800695c <HAL_SPI_Init+0x210>)
 8006850:	f7fa fd32 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	699b      	ldr	r3, [r3, #24]
 8006858:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800685c:	d00d      	beq.n	800687a <HAL_SPI_Init+0x12e>
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	699b      	ldr	r3, [r3, #24]
 8006862:	2b00      	cmp	r3, #0
 8006864:	d009      	beq.n	800687a <HAL_SPI_Init+0x12e>
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	699b      	ldr	r3, [r3, #24]
 800686a:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 800686e:	d004      	beq.n	800687a <HAL_SPI_Init+0x12e>
 8006870:	f240 1149 	movw	r1, #329	@ 0x149
 8006874:	4839      	ldr	r0, [pc, #228]	@ (800695c <HAL_SPI_Init+0x210>)
 8006876:	f7fa fd1f 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800687e:	2b08      	cmp	r3, #8
 8006880:	d008      	beq.n	8006894 <HAL_SPI_Init+0x148>
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006886:	2b00      	cmp	r3, #0
 8006888:	d004      	beq.n	8006894 <HAL_SPI_Init+0x148>
 800688a:	f44f 71a5 	mov.w	r1, #330	@ 0x14a
 800688e:	4833      	ldr	r0, [pc, #204]	@ (800695c <HAL_SPI_Init+0x210>)
 8006890:	f7fa fd12 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	69db      	ldr	r3, [r3, #28]
 8006898:	2b00      	cmp	r3, #0
 800689a:	d020      	beq.n	80068de <HAL_SPI_Init+0x192>
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	69db      	ldr	r3, [r3, #28]
 80068a0:	2b08      	cmp	r3, #8
 80068a2:	d01c      	beq.n	80068de <HAL_SPI_Init+0x192>
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	69db      	ldr	r3, [r3, #28]
 80068a8:	2b10      	cmp	r3, #16
 80068aa:	d018      	beq.n	80068de <HAL_SPI_Init+0x192>
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	69db      	ldr	r3, [r3, #28]
 80068b0:	2b18      	cmp	r3, #24
 80068b2:	d014      	beq.n	80068de <HAL_SPI_Init+0x192>
 80068b4:	687b      	ldr	r3, [r7, #4]
 80068b6:	69db      	ldr	r3, [r3, #28]
 80068b8:	2b20      	cmp	r3, #32
 80068ba:	d010      	beq.n	80068de <HAL_SPI_Init+0x192>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	69db      	ldr	r3, [r3, #28]
 80068c0:	2b28      	cmp	r3, #40	@ 0x28
 80068c2:	d00c      	beq.n	80068de <HAL_SPI_Init+0x192>
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	69db      	ldr	r3, [r3, #28]
 80068c8:	2b30      	cmp	r3, #48	@ 0x30
 80068ca:	d008      	beq.n	80068de <HAL_SPI_Init+0x192>
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	69db      	ldr	r3, [r3, #28]
 80068d0:	2b38      	cmp	r3, #56	@ 0x38
 80068d2:	d004      	beq.n	80068de <HAL_SPI_Init+0x192>
 80068d4:	f240 114b 	movw	r1, #331	@ 0x14b
 80068d8:	4820      	ldr	r0, [pc, #128]	@ (800695c <HAL_SPI_Init+0x210>)
 80068da:	f7fa fced 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	6a1b      	ldr	r3, [r3, #32]
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d008      	beq.n	80068f8 <HAL_SPI_Init+0x1ac>
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	6a1b      	ldr	r3, [r3, #32]
 80068ea:	2b80      	cmp	r3, #128	@ 0x80
 80068ec:	d004      	beq.n	80068f8 <HAL_SPI_Init+0x1ac>
 80068ee:	f44f 71a6 	mov.w	r1, #332	@ 0x14c
 80068f2:	481a      	ldr	r0, [pc, #104]	@ (800695c <HAL_SPI_Init+0x210>)
 80068f4:	f7fa fce0 	bl	80012b8 <assert_failed>
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
 80068f8:	687b      	ldr	r3, [r7, #4]
 80068fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d008      	beq.n	8006912 <HAL_SPI_Init+0x1c6>
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006904:	2b10      	cmp	r3, #16
 8006906:	d004      	beq.n	8006912 <HAL_SPI_Init+0x1c6>
 8006908:	f240 114d 	movw	r1, #333	@ 0x14d
 800690c:	4813      	ldr	r0, [pc, #76]	@ (800695c <HAL_SPI_Init+0x210>)
 800690e:	f7fa fcd3 	bl	80012b8 <assert_failed>
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006916:	2b00      	cmp	r3, #0
 8006918:	d151      	bne.n	80069be <HAL_SPI_Init+0x272>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
 800691a:	687b      	ldr	r3, [r7, #4]
 800691c:	691b      	ldr	r3, [r3, #16]
 800691e:	2b00      	cmp	r3, #0
 8006920:	d008      	beq.n	8006934 <HAL_SPI_Init+0x1e8>
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	2b02      	cmp	r3, #2
 8006928:	d004      	beq.n	8006934 <HAL_SPI_Init+0x1e8>
 800692a:	f44f 71a8 	mov.w	r1, #336	@ 0x150
 800692e:	480b      	ldr	r0, [pc, #44]	@ (800695c <HAL_SPI_Init+0x210>)
 8006930:	f7fa fcc2 	bl	80012b8 <assert_failed>
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	2b00      	cmp	r3, #0
 800693a:	d011      	beq.n	8006960 <HAL_SPI_Init+0x214>
 800693c:	687b      	ldr	r3, [r7, #4]
 800693e:	695b      	ldr	r3, [r3, #20]
 8006940:	2b01      	cmp	r3, #1
 8006942:	d00d      	beq.n	8006960 <HAL_SPI_Init+0x214>
 8006944:	f240 1151 	movw	r1, #337	@ 0x151
 8006948:	4804      	ldr	r0, [pc, #16]	@ (800695c <HAL_SPI_Init+0x210>)
 800694a:	f7fa fcb5 	bl	80012b8 <assert_failed>
 800694e:	e007      	b.n	8006960 <HAL_SPI_Init+0x214>
 8006950:	40013000 	.word	0x40013000
 8006954:	40003800 	.word	0x40003800
 8006958:	40003c00 	.word	0x40003c00
 800695c:	0800c408 	.word	0x0800c408

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8006960:	687b      	ldr	r3, [r7, #4]
 8006962:	685b      	ldr	r3, [r3, #4]
 8006964:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8006968:	d125      	bne.n	80069b6 <HAL_SPI_Init+0x26a>
    {
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	69db      	ldr	r3, [r3, #28]
 800696e:	2b00      	cmp	r3, #0
 8006970:	d050      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	69db      	ldr	r3, [r3, #28]
 8006976:	2b08      	cmp	r3, #8
 8006978:	d04c      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	69db      	ldr	r3, [r3, #28]
 800697e:	2b10      	cmp	r3, #16
 8006980:	d048      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	69db      	ldr	r3, [r3, #28]
 8006986:	2b18      	cmp	r3, #24
 8006988:	d044      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	69db      	ldr	r3, [r3, #28]
 800698e:	2b20      	cmp	r3, #32
 8006990:	d040      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 8006992:	687b      	ldr	r3, [r7, #4]
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	2b28      	cmp	r3, #40	@ 0x28
 8006998:	d03c      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 800699a:	687b      	ldr	r3, [r7, #4]
 800699c:	69db      	ldr	r3, [r3, #28]
 800699e:	2b30      	cmp	r3, #48	@ 0x30
 80069a0:	d038      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 80069a2:	687b      	ldr	r3, [r7, #4]
 80069a4:	69db      	ldr	r3, [r3, #28]
 80069a6:	2b38      	cmp	r3, #56	@ 0x38
 80069a8:	d034      	beq.n	8006a14 <HAL_SPI_Init+0x2c8>
 80069aa:	f240 1155 	movw	r1, #341	@ 0x155
 80069ae:	4861      	ldr	r0, [pc, #388]	@ (8006b34 <HAL_SPI_Init+0x3e8>)
 80069b0:	f7fa fc82 	bl	80012b8 <assert_failed>
 80069b4:	e02e      	b.n	8006a14 <HAL_SPI_Init+0x2c8>
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	2200      	movs	r2, #0
 80069ba:	61da      	str	r2, [r3, #28]
 80069bc:	e02a      	b.n	8006a14 <HAL_SPI_Init+0x2c8>
    }
  }
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d020      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	69db      	ldr	r3, [r3, #28]
 80069ca:	2b08      	cmp	r3, #8
 80069cc:	d01c      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	69db      	ldr	r3, [r3, #28]
 80069d2:	2b10      	cmp	r3, #16
 80069d4:	d018      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	69db      	ldr	r3, [r3, #28]
 80069da:	2b18      	cmp	r3, #24
 80069dc:	d014      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	69db      	ldr	r3, [r3, #28]
 80069e2:	2b20      	cmp	r3, #32
 80069e4:	d010      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	69db      	ldr	r3, [r3, #28]
 80069ea:	2b28      	cmp	r3, #40	@ 0x28
 80069ec:	d00c      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069ee:	687b      	ldr	r3, [r7, #4]
 80069f0:	69db      	ldr	r3, [r3, #28]
 80069f2:	2b30      	cmp	r3, #48	@ 0x30
 80069f4:	d008      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	69db      	ldr	r3, [r3, #28]
 80069fa:	2b38      	cmp	r3, #56	@ 0x38
 80069fc:	d004      	beq.n	8006a08 <HAL_SPI_Init+0x2bc>
 80069fe:	f240 115f 	movw	r1, #351	@ 0x15f
 8006a02:	484c      	ldr	r0, [pc, #304]	@ (8006b34 <HAL_SPI_Init+0x3e8>)
 8006a04:	f7fa fc58 	bl	80012b8 <assert_failed>

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2200      	movs	r2, #0
 8006a0c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	2200      	movs	r2, #0
 8006a12:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2200      	movs	r2, #0
 8006a18:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	f893 305d 	ldrb.w	r3, [r3, #93]	@ 0x5d
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	d106      	bne.n	8006a34 <HAL_SPI_Init+0x2e8>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	2200      	movs	r2, #0
 8006a2a:	f883 205c 	strb.w	r2, [r3, #92]	@ 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8006a2e:	6878      	ldr	r0, [r7, #4]
 8006a30:	f7fa fc8c 	bl	800134c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8006a34:	687b      	ldr	r3, [r7, #4]
 8006a36:	2202      	movs	r2, #2
 8006a38:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	681a      	ldr	r2, [r3, #0]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8006a4a:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	68db      	ldr	r3, [r3, #12]
 8006a50:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a54:	d902      	bls.n	8006a5c <HAL_SPI_Init+0x310>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8006a56:	2300      	movs	r3, #0
 8006a58:	60fb      	str	r3, [r7, #12]
 8006a5a:	e002      	b.n	8006a62 <HAL_SPI_Init+0x316>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8006a5c:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8006a60:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8006a62:	687b      	ldr	r3, [r7, #4]
 8006a64:	68db      	ldr	r3, [r3, #12]
 8006a66:	f5b3 6f70 	cmp.w	r3, #3840	@ 0xf00
 8006a6a:	d007      	beq.n	8006a7c <HAL_SPI_Init+0x330>
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	68db      	ldr	r3, [r3, #12]
 8006a70:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8006a74:	d002      	beq.n	8006a7c <HAL_SPI_Init+0x330>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	2200      	movs	r2, #0
 8006a7a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	685b      	ldr	r3, [r3, #4]
 8006a80:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	689b      	ldr	r3, [r3, #8]
 8006a88:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8006a8c:	431a      	orrs	r2, r3
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	691b      	ldr	r3, [r3, #16]
 8006a92:	f003 0302 	and.w	r3, r3, #2
 8006a96:	431a      	orrs	r2, r3
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	695b      	ldr	r3, [r3, #20]
 8006a9c:	f003 0301 	and.w	r3, r3, #1
 8006aa0:	431a      	orrs	r2, r3
 8006aa2:	687b      	ldr	r3, [r7, #4]
 8006aa4:	699b      	ldr	r3, [r3, #24]
 8006aa6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8006aaa:	431a      	orrs	r2, r3
 8006aac:	687b      	ldr	r3, [r7, #4]
 8006aae:	69db      	ldr	r3, [r3, #28]
 8006ab0:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	6a1b      	ldr	r3, [r3, #32]
 8006aba:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006abe:	ea42 0103 	orr.w	r1, r2, r3
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ac6:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	430a      	orrs	r2, r1
 8006ad0:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	699b      	ldr	r3, [r3, #24]
 8006ad6:	0c1b      	lsrs	r3, r3, #16
 8006ad8:	f003 0204 	and.w	r2, r3, #4
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006ae0:	f003 0310 	and.w	r3, r3, #16
 8006ae4:	431a      	orrs	r2, r3
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006aea:	f003 0308 	and.w	r3, r3, #8
 8006aee:	431a      	orrs	r2, r3
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	f403 6370 	and.w	r3, r3, #3840	@ 0xf00
 8006af8:	ea42 0103 	orr.w	r1, r2, r3
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	f403 5280 	and.w	r2, r3, #4096	@ 0x1000
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	681b      	ldr	r3, [r3, #0]
 8006b06:	430a      	orrs	r2, r1
 8006b08:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	69da      	ldr	r2, [r3, #28]
 8006b10:	687b      	ldr	r3, [r7, #4]
 8006b12:	681b      	ldr	r3, [r3, #0]
 8006b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8006b18:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2200      	movs	r2, #0
 8006b1e:	661a      	str	r2, [r3, #96]	@ 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	2201      	movs	r2, #1
 8006b24:	f883 205d 	strb.w	r2, [r3, #93]	@ 0x5d

  return HAL_OK;
 8006b28:	2300      	movs	r3, #0
}
 8006b2a:	4618      	mov	r0, r3
 8006b2c:	3710      	adds	r7, #16
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	bd80      	pop	{r7, pc}
 8006b32:	bf00      	nop
 8006b34:	0800c408 	.word	0x0800c408

08006b38 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006b38:	b580      	push	{r7, lr}
 8006b3a:	b082      	sub	sp, #8
 8006b3c:	af00      	add	r7, sp, #0
 8006b3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	2b00      	cmp	r3, #0
 8006b44:	d101      	bne.n	8006b4a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006b46:	2301      	movs	r3, #1
 8006b48:	e0dc      	b.n	8006d04 <HAL_TIM_Base_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	4a6f      	ldr	r2, [pc, #444]	@ (8006d0c <HAL_TIM_Base_Init+0x1d4>)
 8006b50:	4293      	cmp	r3, r2
 8006b52:	d031      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006b5c:	d02c      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	681b      	ldr	r3, [r3, #0]
 8006b62:	4a6b      	ldr	r2, [pc, #428]	@ (8006d10 <HAL_TIM_Base_Init+0x1d8>)
 8006b64:	4293      	cmp	r3, r2
 8006b66:	d027      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	4a69      	ldr	r2, [pc, #420]	@ (8006d14 <HAL_TIM_Base_Init+0x1dc>)
 8006b6e:	4293      	cmp	r3, r2
 8006b70:	d022      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	681b      	ldr	r3, [r3, #0]
 8006b76:	4a68      	ldr	r2, [pc, #416]	@ (8006d18 <HAL_TIM_Base_Init+0x1e0>)
 8006b78:	4293      	cmp	r3, r2
 8006b7a:	d01d      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	681b      	ldr	r3, [r3, #0]
 8006b80:	4a66      	ldr	r2, [pc, #408]	@ (8006d1c <HAL_TIM_Base_Init+0x1e4>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d018      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b86:	687b      	ldr	r3, [r7, #4]
 8006b88:	681b      	ldr	r3, [r3, #0]
 8006b8a:	4a65      	ldr	r2, [pc, #404]	@ (8006d20 <HAL_TIM_Base_Init+0x1e8>)
 8006b8c:	4293      	cmp	r3, r2
 8006b8e:	d013      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	4a63      	ldr	r2, [pc, #396]	@ (8006d24 <HAL_TIM_Base_Init+0x1ec>)
 8006b96:	4293      	cmp	r3, r2
 8006b98:	d00e      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	4a62      	ldr	r2, [pc, #392]	@ (8006d28 <HAL_TIM_Base_Init+0x1f0>)
 8006ba0:	4293      	cmp	r3, r2
 8006ba2:	d009      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	681b      	ldr	r3, [r3, #0]
 8006ba8:	4a60      	ldr	r2, [pc, #384]	@ (8006d2c <HAL_TIM_Base_Init+0x1f4>)
 8006baa:	4293      	cmp	r3, r2
 8006bac:	d004      	beq.n	8006bb8 <HAL_TIM_Base_Init+0x80>
 8006bae:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8006bb2:	485f      	ldr	r0, [pc, #380]	@ (8006d30 <HAL_TIM_Base_Init+0x1f8>)
 8006bb4:	f7fa fb80 	bl	80012b8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	689b      	ldr	r3, [r3, #8]
 8006bbc:	2b00      	cmp	r3, #0
 8006bbe:	d014      	beq.n	8006bea <HAL_TIM_Base_Init+0xb2>
 8006bc0:	687b      	ldr	r3, [r7, #4]
 8006bc2:	689b      	ldr	r3, [r3, #8]
 8006bc4:	2b10      	cmp	r3, #16
 8006bc6:	d010      	beq.n	8006bea <HAL_TIM_Base_Init+0xb2>
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	689b      	ldr	r3, [r3, #8]
 8006bcc:	2b20      	cmp	r3, #32
 8006bce:	d00c      	beq.n	8006bea <HAL_TIM_Base_Init+0xb2>
 8006bd0:	687b      	ldr	r3, [r7, #4]
 8006bd2:	689b      	ldr	r3, [r3, #8]
 8006bd4:	2b40      	cmp	r3, #64	@ 0x40
 8006bd6:	d008      	beq.n	8006bea <HAL_TIM_Base_Init+0xb2>
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	689b      	ldr	r3, [r3, #8]
 8006bdc:	2b60      	cmp	r3, #96	@ 0x60
 8006bde:	d004      	beq.n	8006bea <HAL_TIM_Base_Init+0xb2>
 8006be0:	f240 1123 	movw	r1, #291	@ 0x123
 8006be4:	4852      	ldr	r0, [pc, #328]	@ (8006d30 <HAL_TIM_Base_Init+0x1f8>)
 8006be6:	f7fa fb67 	bl	80012b8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	691b      	ldr	r3, [r3, #16]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d00e      	beq.n	8006c10 <HAL_TIM_Base_Init+0xd8>
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006bfa:	d009      	beq.n	8006c10 <HAL_TIM_Base_Init+0xd8>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	691b      	ldr	r3, [r3, #16]
 8006c00:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006c04:	d004      	beq.n	8006c10 <HAL_TIM_Base_Init+0xd8>
 8006c06:	f44f 7192 	mov.w	r1, #292	@ 0x124
 8006c0a:	4849      	ldr	r0, [pc, #292]	@ (8006d30 <HAL_TIM_Base_Init+0x1f8>)
 8006c0c:	f7fa fb54 	bl	80012b8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006c18:	d00f      	beq.n	8006c3a <HAL_TIM_Base_Init+0x102>
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	68db      	ldr	r3, [r3, #12]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d006      	beq.n	8006c30 <HAL_TIM_Base_Init+0xf8>
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006c2a:	d201      	bcs.n	8006c30 <HAL_TIM_Base_Init+0xf8>
 8006c2c:	2301      	movs	r3, #1
 8006c2e:	e000      	b.n	8006c32 <HAL_TIM_Base_Init+0xfa>
 8006c30:	2300      	movs	r3, #0
 8006c32:	f003 0301 	and.w	r3, r3, #1
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	e006      	b.n	8006c48 <HAL_TIM_Base_Init+0x110>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	68db      	ldr	r3, [r3, #12]
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	bf14      	ite	ne
 8006c42:	2301      	movne	r3, #1
 8006c44:	2300      	moveq	r3, #0
 8006c46:	b2db      	uxtb	r3, r3
 8006c48:	2b00      	cmp	r3, #0
 8006c4a:	d104      	bne.n	8006c56 <HAL_TIM_Base_Init+0x11e>
 8006c4c:	f240 1125 	movw	r1, #293	@ 0x125
 8006c50:	4837      	ldr	r0, [pc, #220]	@ (8006d30 <HAL_TIM_Base_Init+0x1f8>)
 8006c52:	f7fa fb31 	bl	80012b8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	699b      	ldr	r3, [r3, #24]
 8006c5a:	2b00      	cmp	r3, #0
 8006c5c:	d008      	beq.n	8006c70 <HAL_TIM_Base_Init+0x138>
 8006c5e:	687b      	ldr	r3, [r7, #4]
 8006c60:	699b      	ldr	r3, [r3, #24]
 8006c62:	2b80      	cmp	r3, #128	@ 0x80
 8006c64:	d004      	beq.n	8006c70 <HAL_TIM_Base_Init+0x138>
 8006c66:	f44f 7193 	mov.w	r1, #294	@ 0x126
 8006c6a:	4831      	ldr	r0, [pc, #196]	@ (8006d30 <HAL_TIM_Base_Init+0x1f8>)
 8006c6c:	f7fa fb24 	bl	80012b8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006c76:	b2db      	uxtb	r3, r3
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d106      	bne.n	8006c8a <HAL_TIM_Base_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006c7c:	687b      	ldr	r3, [r7, #4]
 8006c7e:	2200      	movs	r2, #0
 8006c80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006c84:	6878      	ldr	r0, [r7, #4]
 8006c86:	f000 f855 	bl	8006d34 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006c8a:	687b      	ldr	r3, [r7, #4]
 8006c8c:	2202      	movs	r2, #2
 8006c8e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	681a      	ldr	r2, [r3, #0]
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	3304      	adds	r3, #4
 8006c9a:	4619      	mov	r1, r3
 8006c9c:	4610      	mov	r0, r2
 8006c9e:	f000 fa73 	bl	8007188 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2201      	movs	r2, #1
 8006ca6:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2201      	movs	r2, #1
 8006cae:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8006cb2:	687b      	ldr	r3, [r7, #4]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	2201      	movs	r2, #1
 8006cbe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	2201      	movs	r2, #1
 8006cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 8006cca:	687b      	ldr	r3, [r7, #4]
 8006ccc:	2201      	movs	r2, #1
 8006cce:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	2201      	movs	r2, #1
 8006cd6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006cda:	687b      	ldr	r3, [r7, #4]
 8006cdc:	2201      	movs	r2, #1
 8006cde:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	2201      	movs	r2, #1
 8006ce6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	2201      	movs	r2, #1
 8006cee:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	2201      	movs	r2, #1
 8006cfe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8006d02:	2300      	movs	r3, #0
}
 8006d04:	4618      	mov	r0, r3
 8006d06:	3708      	adds	r7, #8
 8006d08:	46bd      	mov	sp, r7
 8006d0a:	bd80      	pop	{r7, pc}
 8006d0c:	40012c00 	.word	0x40012c00
 8006d10:	40000400 	.word	0x40000400
 8006d14:	40000800 	.word	0x40000800
 8006d18:	40001000 	.word	0x40001000
 8006d1c:	40001400 	.word	0x40001400
 8006d20:	40013400 	.word	0x40013400
 8006d24:	40014000 	.word	0x40014000
 8006d28:	40014400 	.word	0x40014400
 8006d2c:	40014800 	.word	0x40014800
 8006d30:	0800c440 	.word	0x0800c440

08006d34 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8006d34:	b480      	push	{r7}
 8006d36:	b083      	sub	sp, #12
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8006d3c:	bf00      	nop
 8006d3e:	370c      	adds	r7, #12
 8006d40:	46bd      	mov	sp, r7
 8006d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d46:	4770      	bx	lr

08006d48 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006d48:	b580      	push	{r7, lr}
 8006d4a:	b084      	sub	sp, #16
 8006d4c:	af00      	add	r7, sp, #0
 8006d4e:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	681b      	ldr	r3, [r3, #0]
 8006d54:	4a45      	ldr	r2, [pc, #276]	@ (8006e6c <HAL_TIM_Base_Start_IT+0x124>)
 8006d56:	4293      	cmp	r3, r2
 8006d58:	d031      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006d62:	d02c      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	4a41      	ldr	r2, [pc, #260]	@ (8006e70 <HAL_TIM_Base_Start_IT+0x128>)
 8006d6a:	4293      	cmp	r3, r2
 8006d6c:	d027      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	4a40      	ldr	r2, [pc, #256]	@ (8006e74 <HAL_TIM_Base_Start_IT+0x12c>)
 8006d74:	4293      	cmp	r3, r2
 8006d76:	d022      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	4a3e      	ldr	r2, [pc, #248]	@ (8006e78 <HAL_TIM_Base_Start_IT+0x130>)
 8006d7e:	4293      	cmp	r3, r2
 8006d80:	d01d      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	4a3d      	ldr	r2, [pc, #244]	@ (8006e7c <HAL_TIM_Base_Start_IT+0x134>)
 8006d88:	4293      	cmp	r3, r2
 8006d8a:	d018      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	681b      	ldr	r3, [r3, #0]
 8006d90:	4a3b      	ldr	r2, [pc, #236]	@ (8006e80 <HAL_TIM_Base_Start_IT+0x138>)
 8006d92:	4293      	cmp	r3, r2
 8006d94:	d013      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	4a3a      	ldr	r2, [pc, #232]	@ (8006e84 <HAL_TIM_Base_Start_IT+0x13c>)
 8006d9c:	4293      	cmp	r3, r2
 8006d9e:	d00e      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	4a38      	ldr	r2, [pc, #224]	@ (8006e88 <HAL_TIM_Base_Start_IT+0x140>)
 8006da6:	4293      	cmp	r3, r2
 8006da8:	d009      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	4a37      	ldr	r2, [pc, #220]	@ (8006e8c <HAL_TIM_Base_Start_IT+0x144>)
 8006db0:	4293      	cmp	r3, r2
 8006db2:	d004      	beq.n	8006dbe <HAL_TIM_Base_Start_IT+0x76>
 8006db4:	f240 11df 	movw	r1, #479	@ 0x1df
 8006db8:	4835      	ldr	r0, [pc, #212]	@ (8006e90 <HAL_TIM_Base_Start_IT+0x148>)
 8006dba:	f7fa fa7d 	bl	80012b8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8006dc4:	b2db      	uxtb	r3, r3
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d001      	beq.n	8006dce <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	e04a      	b.n	8006e64 <HAL_TIM_Base_Start_IT+0x11c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2202      	movs	r2, #2
 8006dd2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	68da      	ldr	r2, [r3, #12]
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0201 	orr.w	r2, r2, #1
 8006de4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	4a20      	ldr	r2, [pc, #128]	@ (8006e6c <HAL_TIM_Base_Start_IT+0x124>)
 8006dec:	4293      	cmp	r3, r2
 8006dee:	d018      	beq.n	8006e22 <HAL_TIM_Base_Start_IT+0xda>
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8006df8:	d013      	beq.n	8006e22 <HAL_TIM_Base_Start_IT+0xda>
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	681b      	ldr	r3, [r3, #0]
 8006dfe:	4a1c      	ldr	r2, [pc, #112]	@ (8006e70 <HAL_TIM_Base_Start_IT+0x128>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d00e      	beq.n	8006e22 <HAL_TIM_Base_Start_IT+0xda>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	4a1a      	ldr	r2, [pc, #104]	@ (8006e74 <HAL_TIM_Base_Start_IT+0x12c>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d009      	beq.n	8006e22 <HAL_TIM_Base_Start_IT+0xda>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	681b      	ldr	r3, [r3, #0]
 8006e12:	4a1b      	ldr	r2, [pc, #108]	@ (8006e80 <HAL_TIM_Base_Start_IT+0x138>)
 8006e14:	4293      	cmp	r3, r2
 8006e16:	d004      	beq.n	8006e22 <HAL_TIM_Base_Start_IT+0xda>
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	4a19      	ldr	r2, [pc, #100]	@ (8006e84 <HAL_TIM_Base_Start_IT+0x13c>)
 8006e1e:	4293      	cmp	r3, r2
 8006e20:	d115      	bne.n	8006e4e <HAL_TIM_Base_Start_IT+0x106>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	681b      	ldr	r3, [r3, #0]
 8006e26:	689a      	ldr	r2, [r3, #8]
 8006e28:	4b1a      	ldr	r3, [pc, #104]	@ (8006e94 <HAL_TIM_Base_Start_IT+0x14c>)
 8006e2a:	4013      	ands	r3, r2
 8006e2c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	2b06      	cmp	r3, #6
 8006e32:	d015      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x118>
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006e3a:	d011      	beq.n	8006e60 <HAL_TIM_Base_Start_IT+0x118>
    {
      __HAL_TIM_ENABLE(htim);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	681a      	ldr	r2, [r3, #0]
 8006e42:	687b      	ldr	r3, [r7, #4]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f042 0201 	orr.w	r2, r2, #1
 8006e4a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e4c:	e008      	b.n	8006e60 <HAL_TIM_Base_Start_IT+0x118>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	681a      	ldr	r2, [r3, #0]
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	f042 0201 	orr.w	r2, r2, #1
 8006e5c:	601a      	str	r2, [r3, #0]
 8006e5e:	e000      	b.n	8006e62 <HAL_TIM_Base_Start_IT+0x11a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006e60:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006e62:	2300      	movs	r3, #0
}
 8006e64:	4618      	mov	r0, r3
 8006e66:	3710      	adds	r7, #16
 8006e68:	46bd      	mov	sp, r7
 8006e6a:	bd80      	pop	{r7, pc}
 8006e6c:	40012c00 	.word	0x40012c00
 8006e70:	40000400 	.word	0x40000400
 8006e74:	40000800 	.word	0x40000800
 8006e78:	40001000 	.word	0x40001000
 8006e7c:	40001400 	.word	0x40001400
 8006e80:	40013400 	.word	0x40013400
 8006e84:	40014000 	.word	0x40014000
 8006e88:	40014400 	.word	0x40014400
 8006e8c:	40014800 	.word	0x40014800
 8006e90:	0800c440 	.word	0x0800c440
 8006e94:	00010007 	.word	0x00010007

08006e98 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68db      	ldr	r3, [r3, #12]
 8006ea6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	691b      	ldr	r3, [r3, #16]
 8006eae:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8006eb0:	68bb      	ldr	r3, [r7, #8]
 8006eb2:	f003 0302 	and.w	r3, r3, #2
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d020      	beq.n	8006efc <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8006eba:	68fb      	ldr	r3, [r7, #12]
 8006ebc:	f003 0302 	and.w	r3, r3, #2
 8006ec0:	2b00      	cmp	r3, #0
 8006ec2:	d01b      	beq.n	8006efc <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f06f 0202 	mvn.w	r2, #2
 8006ecc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	2201      	movs	r2, #1
 8006ed2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	699b      	ldr	r3, [r3, #24]
 8006eda:	f003 0303 	and.w	r3, r3, #3
 8006ede:	2b00      	cmp	r3, #0
 8006ee0:	d003      	beq.n	8006eea <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006ee2:	6878      	ldr	r0, [r7, #4]
 8006ee4:	f000 f931 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006ee8:	e005      	b.n	8006ef6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006eea:	6878      	ldr	r0, [r7, #4]
 8006eec:	f000 f923 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ef0:	6878      	ldr	r0, [r7, #4]
 8006ef2:	f000 f934 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2200      	movs	r2, #0
 8006efa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8006efc:	68bb      	ldr	r3, [r7, #8]
 8006efe:	f003 0304 	and.w	r3, r3, #4
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d020      	beq.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8006f06:	68fb      	ldr	r3, [r7, #12]
 8006f08:	f003 0304 	and.w	r3, r3, #4
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	d01b      	beq.n	8006f48 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	f06f 0204 	mvn.w	r2, #4
 8006f18:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	2202      	movs	r2, #2
 8006f1e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006f20:	687b      	ldr	r3, [r7, #4]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	699b      	ldr	r3, [r3, #24]
 8006f26:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d003      	beq.n	8006f36 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f2e:	6878      	ldr	r0, [r7, #4]
 8006f30:	f000 f90b 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006f34:	e005      	b.n	8006f42 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f36:	6878      	ldr	r0, [r7, #4]
 8006f38:	f000 f8fd 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f3c:	6878      	ldr	r0, [r7, #4]
 8006f3e:	f000 f90e 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f42:	687b      	ldr	r3, [r7, #4]
 8006f44:	2200      	movs	r2, #0
 8006f46:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f003 0308 	and.w	r3, r3, #8
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d020      	beq.n	8006f94 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	f003 0308 	and.w	r3, r3, #8
 8006f58:	2b00      	cmp	r3, #0
 8006f5a:	d01b      	beq.n	8006f94 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	681b      	ldr	r3, [r3, #0]
 8006f60:	f06f 0208 	mvn.w	r2, #8
 8006f64:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	2204      	movs	r2, #4
 8006f6a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	681b      	ldr	r3, [r3, #0]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	f003 0303 	and.w	r3, r3, #3
 8006f76:	2b00      	cmp	r3, #0
 8006f78:	d003      	beq.n	8006f82 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f000 f8e5 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006f80:	e005      	b.n	8006f8e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006f82:	6878      	ldr	r0, [r7, #4]
 8006f84:	f000 f8d7 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006f88:	6878      	ldr	r0, [r7, #4]
 8006f8a:	f000 f8e8 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	2200      	movs	r2, #0
 8006f92:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	f003 0310 	and.w	r3, r3, #16
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d020      	beq.n	8006fe0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	f003 0310 	and.w	r3, r3, #16
 8006fa4:	2b00      	cmp	r3, #0
 8006fa6:	d01b      	beq.n	8006fe0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	681b      	ldr	r3, [r3, #0]
 8006fac:	f06f 0210 	mvn.w	r2, #16
 8006fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	2208      	movs	r2, #8
 8006fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	69db      	ldr	r3, [r3, #28]
 8006fbe:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8006fc2:	2b00      	cmp	r3, #0
 8006fc4:	d003      	beq.n	8006fce <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006fc6:	6878      	ldr	r0, [r7, #4]
 8006fc8:	f000 f8bf 	bl	800714a <HAL_TIM_IC_CaptureCallback>
 8006fcc:	e005      	b.n	8006fda <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006fce:	6878      	ldr	r0, [r7, #4]
 8006fd0:	f000 f8b1 	bl	8007136 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006fd4:	6878      	ldr	r0, [r7, #4]
 8006fd6:	f000 f8c2 	bl	800715e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	2200      	movs	r2, #0
 8006fde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8006fe0:	68bb      	ldr	r3, [r7, #8]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d00c      	beq.n	8007004 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8006fea:	68fb      	ldr	r3, [r7, #12]
 8006fec:	f003 0301 	and.w	r3, r3, #1
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d007      	beq.n	8007004 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	f06f 0201 	mvn.w	r2, #1
 8006ffc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006ffe:	6878      	ldr	r0, [r7, #4]
 8007000:	f7fa f942 	bl	8001288 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007004:	68bb      	ldr	r3, [r7, #8]
 8007006:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800700a:	2b00      	cmp	r3, #0
 800700c:	d104      	bne.n	8007018 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800700e:	68bb      	ldr	r3, [r7, #8]
 8007010:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8007014:	2b00      	cmp	r3, #0
 8007016:	d00c      	beq.n	8007032 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800701e:	2b00      	cmp	r3, #0
 8007020:	d007      	beq.n	8007032 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8007022:	687b      	ldr	r3, [r7, #4]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800702a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800702c:	6878      	ldr	r0, [r7, #4]
 800702e:	f000 f951 	bl	80072d4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8007032:	68bb      	ldr	r3, [r7, #8]
 8007034:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007038:	2b00      	cmp	r3, #0
 800703a:	d00c      	beq.n	8007056 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007042:	2b00      	cmp	r3, #0
 8007044:	d007      	beq.n	8007056 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 800704e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8007050:	6878      	ldr	r0, [r7, #4]
 8007052:	f000 f949 	bl	80072e8 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8007056:	68bb      	ldr	r3, [r7, #8]
 8007058:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800705c:	2b00      	cmp	r3, #0
 800705e:	d00c      	beq.n	800707a <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007066:	2b00      	cmp	r3, #0
 8007068:	d007      	beq.n	800707a <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8007072:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007074:	6878      	ldr	r0, [r7, #4]
 8007076:	f000 f87c 	bl	8007172 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800707a:	68bb      	ldr	r3, [r7, #8]
 800707c:	f003 0320 	and.w	r3, r3, #32
 8007080:	2b00      	cmp	r3, #0
 8007082:	d00c      	beq.n	800709e <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	f003 0320 	and.w	r3, r3, #32
 800708a:	2b00      	cmp	r3, #0
 800708c:	d007      	beq.n	800709e <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800708e:	687b      	ldr	r3, [r7, #4]
 8007090:	681b      	ldr	r3, [r3, #0]
 8007092:	f06f 0220 	mvn.w	r2, #32
 8007096:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007098:	6878      	ldr	r0, [r7, #4]
 800709a:	f000 f911 	bl	80072c0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 800709e:	68bb      	ldr	r3, [r7, #8]
 80070a0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d00c      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80070ae:	2b00      	cmp	r3, #0
 80070b0:	d007      	beq.n	80070c2 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80070ba:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80070bc:	6878      	ldr	r0, [r7, #4]
 80070be:	f000 f91d 	bl	80072fc <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80070c2:	68bb      	ldr	r3, [r7, #8]
 80070c4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070c8:	2b00      	cmp	r3, #0
 80070ca:	d00c      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d007      	beq.n	80070e6 <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80070d6:	687b      	ldr	r3, [r7, #4]
 80070d8:	681b      	ldr	r3, [r3, #0]
 80070da:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80070de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f000 f915 	bl	8007310 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80070e6:	68bb      	ldr	r3, [r7, #8]
 80070e8:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d00c      	beq.n	800710a <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d007      	beq.n	800710a <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80070fa:	687b      	ldr	r3, [r7, #4]
 80070fc:	681b      	ldr	r3, [r3, #0]
 80070fe:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8007102:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8007104:	6878      	ldr	r0, [r7, #4]
 8007106:	f000 f90d 	bl	8007324 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 800710a:	68bb      	ldr	r3, [r7, #8]
 800710c:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007110:	2b00      	cmp	r3, #0
 8007112:	d00c      	beq.n	800712e <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800711a:	2b00      	cmp	r3, #0
 800711c:	d007      	beq.n	800712e <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 8007126:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8007128:	6878      	ldr	r0, [r7, #4]
 800712a:	f000 f905 	bl	8007338 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800712e:	bf00      	nop
 8007130:	3710      	adds	r7, #16
 8007132:	46bd      	mov	sp, r7
 8007134:	bd80      	pop	{r7, pc}

08007136 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007136:	b480      	push	{r7}
 8007138:	b083      	sub	sp, #12
 800713a:	af00      	add	r7, sp, #0
 800713c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800713e:	bf00      	nop
 8007140:	370c      	adds	r7, #12
 8007142:	46bd      	mov	sp, r7
 8007144:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007148:	4770      	bx	lr

0800714a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800714a:	b480      	push	{r7}
 800714c:	b083      	sub	sp, #12
 800714e:	af00      	add	r7, sp, #0
 8007150:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007152:	bf00      	nop
 8007154:	370c      	adds	r7, #12
 8007156:	46bd      	mov	sp, r7
 8007158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800715c:	4770      	bx	lr

0800715e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800715e:	b480      	push	{r7}
 8007160:	b083      	sub	sp, #12
 8007162:	af00      	add	r7, sp, #0
 8007164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007166:	bf00      	nop
 8007168:	370c      	adds	r7, #12
 800716a:	46bd      	mov	sp, r7
 800716c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007170:	4770      	bx	lr

08007172 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007172:	b480      	push	{r7}
 8007174:	b083      	sub	sp, #12
 8007176:	af00      	add	r7, sp, #0
 8007178:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800717a:	bf00      	nop
 800717c:	370c      	adds	r7, #12
 800717e:	46bd      	mov	sp, r7
 8007180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007184:	4770      	bx	lr
	...

08007188 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8007188:	b480      	push	{r7}
 800718a:	b085      	sub	sp, #20
 800718c:	af00      	add	r7, sp, #0
 800718e:	6078      	str	r0, [r7, #4]
 8007190:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007198:	687b      	ldr	r3, [r7, #4]
 800719a:	4a42      	ldr	r2, [pc, #264]	@ (80072a4 <TIM_Base_SetConfig+0x11c>)
 800719c:	4293      	cmp	r3, r2
 800719e:	d00f      	beq.n	80071c0 <TIM_Base_SetConfig+0x38>
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071a6:	d00b      	beq.n	80071c0 <TIM_Base_SetConfig+0x38>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a3f      	ldr	r2, [pc, #252]	@ (80072a8 <TIM_Base_SetConfig+0x120>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d007      	beq.n	80071c0 <TIM_Base_SetConfig+0x38>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a3e      	ldr	r2, [pc, #248]	@ (80072ac <TIM_Base_SetConfig+0x124>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d003      	beq.n	80071c0 <TIM_Base_SetConfig+0x38>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a3d      	ldr	r2, [pc, #244]	@ (80072b0 <TIM_Base_SetConfig+0x128>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d108      	bne.n	80071d2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c0:	68fb      	ldr	r3, [r7, #12]
 80071c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80071c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071c8:	683b      	ldr	r3, [r7, #0]
 80071ca:	685b      	ldr	r3, [r3, #4]
 80071cc:	68fa      	ldr	r2, [r7, #12]
 80071ce:	4313      	orrs	r3, r2
 80071d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a33      	ldr	r2, [pc, #204]	@ (80072a4 <TIM_Base_SetConfig+0x11c>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d01b      	beq.n	8007212 <TIM_Base_SetConfig+0x8a>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80071e0:	d017      	beq.n	8007212 <TIM_Base_SetConfig+0x8a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	4a30      	ldr	r2, [pc, #192]	@ (80072a8 <TIM_Base_SetConfig+0x120>)
 80071e6:	4293      	cmp	r3, r2
 80071e8:	d013      	beq.n	8007212 <TIM_Base_SetConfig+0x8a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a2f      	ldr	r2, [pc, #188]	@ (80072ac <TIM_Base_SetConfig+0x124>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d00f      	beq.n	8007212 <TIM_Base_SetConfig+0x8a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a2e      	ldr	r2, [pc, #184]	@ (80072b0 <TIM_Base_SetConfig+0x128>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00b      	beq.n	8007212 <TIM_Base_SetConfig+0x8a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a2d      	ldr	r2, [pc, #180]	@ (80072b4 <TIM_Base_SetConfig+0x12c>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d007      	beq.n	8007212 <TIM_Base_SetConfig+0x8a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a2c      	ldr	r2, [pc, #176]	@ (80072b8 <TIM_Base_SetConfig+0x130>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d003      	beq.n	8007212 <TIM_Base_SetConfig+0x8a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a2b      	ldr	r2, [pc, #172]	@ (80072bc <TIM_Base_SetConfig+0x134>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d108      	bne.n	8007224 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007212:	68fb      	ldr	r3, [r7, #12]
 8007214:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8007218:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800721a:	683b      	ldr	r3, [r7, #0]
 800721c:	68db      	ldr	r3, [r3, #12]
 800721e:	68fa      	ldr	r2, [r7, #12]
 8007220:	4313      	orrs	r3, r2
 8007222:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007224:	68fb      	ldr	r3, [r7, #12]
 8007226:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800722a:	683b      	ldr	r3, [r7, #0]
 800722c:	695b      	ldr	r3, [r3, #20]
 800722e:	4313      	orrs	r3, r2
 8007230:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007232:	687b      	ldr	r3, [r7, #4]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	689a      	ldr	r2, [r3, #8]
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	681a      	ldr	r2, [r3, #0]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	4a16      	ldr	r2, [pc, #88]	@ (80072a4 <TIM_Base_SetConfig+0x11c>)
 800724c:	4293      	cmp	r3, r2
 800724e:	d00f      	beq.n	8007270 <TIM_Base_SetConfig+0xe8>
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a17      	ldr	r2, [pc, #92]	@ (80072b0 <TIM_Base_SetConfig+0x128>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d00b      	beq.n	8007270 <TIM_Base_SetConfig+0xe8>
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	4a16      	ldr	r2, [pc, #88]	@ (80072b4 <TIM_Base_SetConfig+0x12c>)
 800725c:	4293      	cmp	r3, r2
 800725e:	d007      	beq.n	8007270 <TIM_Base_SetConfig+0xe8>
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	4a15      	ldr	r2, [pc, #84]	@ (80072b8 <TIM_Base_SetConfig+0x130>)
 8007264:	4293      	cmp	r3, r2
 8007266:	d003      	beq.n	8007270 <TIM_Base_SetConfig+0xe8>
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	4a14      	ldr	r2, [pc, #80]	@ (80072bc <TIM_Base_SetConfig+0x134>)
 800726c:	4293      	cmp	r3, r2
 800726e:	d103      	bne.n	8007278 <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007270:	683b      	ldr	r3, [r7, #0]
 8007272:	691a      	ldr	r2, [r3, #16]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	2201      	movs	r2, #1
 800727c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	691b      	ldr	r3, [r3, #16]
 8007282:	f003 0301 	and.w	r3, r3, #1
 8007286:	2b01      	cmp	r3, #1
 8007288:	d105      	bne.n	8007296 <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800728a:	687b      	ldr	r3, [r7, #4]
 800728c:	691b      	ldr	r3, [r3, #16]
 800728e:	f023 0201 	bic.w	r2, r3, #1
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	611a      	str	r2, [r3, #16]
  }
}
 8007296:	bf00      	nop
 8007298:	3714      	adds	r7, #20
 800729a:	46bd      	mov	sp, r7
 800729c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072a0:	4770      	bx	lr
 80072a2:	bf00      	nop
 80072a4:	40012c00 	.word	0x40012c00
 80072a8:	40000400 	.word	0x40000400
 80072ac:	40000800 	.word	0x40000800
 80072b0:	40013400 	.word	0x40013400
 80072b4:	40014000 	.word	0x40014000
 80072b8:	40014400 	.word	0x40014400
 80072bc:	40014800 	.word	0x40014800

080072c0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80072c0:	b480      	push	{r7}
 80072c2:	b083      	sub	sp, #12
 80072c4:	af00      	add	r7, sp, #0
 80072c6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80072c8:	bf00      	nop
 80072ca:	370c      	adds	r7, #12
 80072cc:	46bd      	mov	sp, r7
 80072ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072d2:	4770      	bx	lr

080072d4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80072d4:	b480      	push	{r7}
 80072d6:	b083      	sub	sp, #12
 80072d8:	af00      	add	r7, sp, #0
 80072da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80072dc:	bf00      	nop
 80072de:	370c      	adds	r7, #12
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr

080072e8 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80072e8:	b480      	push	{r7}
 80072ea:	b083      	sub	sp, #12
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80072f0:	bf00      	nop
 80072f2:	370c      	adds	r7, #12
 80072f4:	46bd      	mov	sp, r7
 80072f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072fa:	4770      	bx	lr

080072fc <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b083      	sub	sp, #12
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007304:	bf00      	nop
 8007306:	370c      	adds	r7, #12
 8007308:	46bd      	mov	sp, r7
 800730a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730e:	4770      	bx	lr

08007310 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007310:	b480      	push	{r7}
 8007312:	b083      	sub	sp, #12
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007318:	bf00      	nop
 800731a:	370c      	adds	r7, #12
 800731c:	46bd      	mov	sp, r7
 800731e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007322:	4770      	bx	lr

08007324 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007324:	b480      	push	{r7}
 8007326:	b083      	sub	sp, #12
 8007328:	af00      	add	r7, sp, #0
 800732a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 800732c:	bf00      	nop
 800732e:	370c      	adds	r7, #12
 8007330:	46bd      	mov	sp, r7
 8007332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007336:	4770      	bx	lr

08007338 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007338:	b480      	push	{r7}
 800733a:	b083      	sub	sp, #12
 800733c:	af00      	add	r7, sp, #0
 800733e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007340:	bf00      	nop
 8007342:	370c      	adds	r7, #12
 8007344:	46bd      	mov	sp, r7
 8007346:	f85d 7b04 	ldr.w	r7, [sp], #4
 800734a:	4770      	bx	lr

0800734c <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800734c:	b580      	push	{r7, lr}
 800734e:	b082      	sub	sp, #8
 8007350:	af00      	add	r7, sp, #0
 8007352:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	2b00      	cmp	r3, #0
 8007358:	d101      	bne.n	800735e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800735a:	2301      	movs	r3, #1
 800735c:	e083      	b.n	8007466 <HAL_UART_Init+0x11a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	699b      	ldr	r3, [r3, #24]
 8007362:	2b00      	cmp	r3, #0
 8007364:	d01e      	beq.n	80073a4 <HAL_UART_Init+0x58>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	681b      	ldr	r3, [r3, #0]
 800736a:	4a41      	ldr	r2, [pc, #260]	@ (8007470 <HAL_UART_Init+0x124>)
 800736c:	4293      	cmp	r3, r2
 800736e:	d037      	beq.n	80073e0 <HAL_UART_Init+0x94>
 8007370:	687b      	ldr	r3, [r7, #4]
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	4a3f      	ldr	r2, [pc, #252]	@ (8007474 <HAL_UART_Init+0x128>)
 8007376:	4293      	cmp	r3, r2
 8007378:	d032      	beq.n	80073e0 <HAL_UART_Init+0x94>
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	4a3e      	ldr	r2, [pc, #248]	@ (8007478 <HAL_UART_Init+0x12c>)
 8007380:	4293      	cmp	r3, r2
 8007382:	d02d      	beq.n	80073e0 <HAL_UART_Init+0x94>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a3c      	ldr	r2, [pc, #240]	@ (800747c <HAL_UART_Init+0x130>)
 800738a:	4293      	cmp	r3, r2
 800738c:	d028      	beq.n	80073e0 <HAL_UART_Init+0x94>
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	4a3b      	ldr	r2, [pc, #236]	@ (8007480 <HAL_UART_Init+0x134>)
 8007394:	4293      	cmp	r3, r2
 8007396:	d023      	beq.n	80073e0 <HAL_UART_Init+0x94>
 8007398:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 800739c:	4839      	ldr	r0, [pc, #228]	@ (8007484 <HAL_UART_Init+0x138>)
 800739e:	f7f9 ff8b 	bl	80012b8 <assert_failed>
 80073a2:	e01d      	b.n	80073e0 <HAL_UART_Init+0x94>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	4a31      	ldr	r2, [pc, #196]	@ (8007470 <HAL_UART_Init+0x124>)
 80073aa:	4293      	cmp	r3, r2
 80073ac:	d018      	beq.n	80073e0 <HAL_UART_Init+0x94>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	4a30      	ldr	r2, [pc, #192]	@ (8007474 <HAL_UART_Init+0x128>)
 80073b4:	4293      	cmp	r3, r2
 80073b6:	d013      	beq.n	80073e0 <HAL_UART_Init+0x94>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a2e      	ldr	r2, [pc, #184]	@ (8007478 <HAL_UART_Init+0x12c>)
 80073be:	4293      	cmp	r3, r2
 80073c0:	d00e      	beq.n	80073e0 <HAL_UART_Init+0x94>
 80073c2:	687b      	ldr	r3, [r7, #4]
 80073c4:	681b      	ldr	r3, [r3, #0]
 80073c6:	4a2d      	ldr	r2, [pc, #180]	@ (800747c <HAL_UART_Init+0x130>)
 80073c8:	4293      	cmp	r3, r2
 80073ca:	d009      	beq.n	80073e0 <HAL_UART_Init+0x94>
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a2b      	ldr	r2, [pc, #172]	@ (8007480 <HAL_UART_Init+0x134>)
 80073d2:	4293      	cmp	r3, r2
 80073d4:	d004      	beq.n	80073e0 <HAL_UART_Init+0x94>
 80073d6:	f240 1143 	movw	r1, #323	@ 0x143
 80073da:	482a      	ldr	r0, [pc, #168]	@ (8007484 <HAL_UART_Init+0x138>)
 80073dc:	f7f9 ff6c 	bl	80012b8 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d106      	bne.n	80073f8 <HAL_UART_Init+0xac>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	2200      	movs	r2, #0
 80073ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80073f2:	6878      	ldr	r0, [r7, #4]
 80073f4:	f7fa f9cc 	bl	8001790 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	2224      	movs	r2, #36	@ 0x24
 80073fc:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	681b      	ldr	r3, [r3, #0]
 8007404:	681a      	ldr	r2, [r3, #0]
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	f022 0201 	bic.w	r2, r2, #1
 800740e:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007410:	687b      	ldr	r3, [r7, #4]
 8007412:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007414:	2b00      	cmp	r3, #0
 8007416:	d002      	beq.n	800741e <HAL_UART_Init+0xd2>
  {
    UART_AdvFeatureConfig(huart);
 8007418:	6878      	ldr	r0, [r7, #4]
 800741a:	f001 f801 	bl	8008420 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800741e:	6878      	ldr	r0, [r7, #4]
 8007420:	f000 fc50 	bl	8007cc4 <UART_SetConfig>
 8007424:	4603      	mov	r3, r0
 8007426:	2b01      	cmp	r3, #1
 8007428:	d101      	bne.n	800742e <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
 800742a:	2301      	movs	r3, #1
 800742c:	e01b      	b.n	8007466 <HAL_UART_Init+0x11a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	681b      	ldr	r3, [r3, #0]
 8007432:	685a      	ldr	r2, [r3, #4]
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	681b      	ldr	r3, [r3, #0]
 8007438:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800743c:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	689a      	ldr	r2, [r3, #8]
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800744c:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	681a      	ldr	r2, [r3, #0]
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	f042 0201 	orr.w	r2, r2, #1
 800745c:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800745e:	6878      	ldr	r0, [r7, #4]
 8007460:	f001 f936 	bl	80086d0 <UART_CheckIdleState>
 8007464:	4603      	mov	r3, r0
}
 8007466:	4618      	mov	r0, r3
 8007468:	3708      	adds	r7, #8
 800746a:	46bd      	mov	sp, r7
 800746c:	bd80      	pop	{r7, pc}
 800746e:	bf00      	nop
 8007470:	40013800 	.word	0x40013800
 8007474:	40004400 	.word	0x40004400
 8007478:	40004800 	.word	0x40004800
 800747c:	40004c00 	.word	0x40004c00
 8007480:	40008000 	.word	0x40008000
 8007484:	0800c478 	.word	0x0800c478

08007488 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	@ 0x28
 800748c:	af02      	add	r7, sp, #8
 800748e:	60f8      	str	r0, [r7, #12]
 8007490:	60b9      	str	r1, [r7, #8]
 8007492:	603b      	str	r3, [r7, #0]
 8007494:	4613      	mov	r3, r2
 8007496:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007498:	68fb      	ldr	r3, [r7, #12]
 800749a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800749e:	2b20      	cmp	r3, #32
 80074a0:	d17b      	bne.n	800759a <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 80074a2:	68bb      	ldr	r3, [r7, #8]
 80074a4:	2b00      	cmp	r3, #0
 80074a6:	d002      	beq.n	80074ae <HAL_UART_Transmit+0x26>
 80074a8:	88fb      	ldrh	r3, [r7, #6]
 80074aa:	2b00      	cmp	r3, #0
 80074ac:	d101      	bne.n	80074b2 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 80074ae:	2301      	movs	r3, #1
 80074b0:	e074      	b.n	800759c <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80074b2:	68fb      	ldr	r3, [r7, #12]
 80074b4:	2200      	movs	r2, #0
 80074b6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	2221      	movs	r2, #33	@ 0x21
 80074be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80074c2:	f7fa fa19 	bl	80018f8 <HAL_GetTick>
 80074c6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 80074c8:	68fb      	ldr	r3, [r7, #12]
 80074ca:	88fa      	ldrh	r2, [r7, #6]
 80074cc:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	88fa      	ldrh	r2, [r7, #6]
 80074d4:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80074d8:	68fb      	ldr	r3, [r7, #12]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80074e0:	d108      	bne.n	80074f4 <HAL_UART_Transmit+0x6c>
 80074e2:	68fb      	ldr	r3, [r7, #12]
 80074e4:	691b      	ldr	r3, [r3, #16]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d104      	bne.n	80074f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80074ea:	2300      	movs	r3, #0
 80074ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80074ee:	68bb      	ldr	r3, [r7, #8]
 80074f0:	61bb      	str	r3, [r7, #24]
 80074f2:	e003      	b.n	80074fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80074f4:	68bb      	ldr	r3, [r7, #8]
 80074f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80074f8:	2300      	movs	r3, #0
 80074fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80074fc:	e030      	b.n	8007560 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80074fe:	683b      	ldr	r3, [r7, #0]
 8007500:	9300      	str	r3, [sp, #0]
 8007502:	697b      	ldr	r3, [r7, #20]
 8007504:	2200      	movs	r2, #0
 8007506:	2180      	movs	r1, #128	@ 0x80
 8007508:	68f8      	ldr	r0, [r7, #12]
 800750a:	f001 f98b 	bl	8008824 <UART_WaitOnFlagUntilTimeout>
 800750e:	4603      	mov	r3, r0
 8007510:	2b00      	cmp	r3, #0
 8007512:	d005      	beq.n	8007520 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8007514:	68fb      	ldr	r3, [r7, #12]
 8007516:	2220      	movs	r2, #32
 8007518:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 800751c:	2303      	movs	r3, #3
 800751e:	e03d      	b.n	800759c <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8007520:	69fb      	ldr	r3, [r7, #28]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d10b      	bne.n	800753e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007526:	69bb      	ldr	r3, [r7, #24]
 8007528:	881b      	ldrh	r3, [r3, #0]
 800752a:	461a      	mov	r2, r3
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007534:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8007536:	69bb      	ldr	r3, [r7, #24]
 8007538:	3302      	adds	r3, #2
 800753a:	61bb      	str	r3, [r7, #24]
 800753c:	e007      	b.n	800754e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 800753e:	69fb      	ldr	r3, [r7, #28]
 8007540:	781a      	ldrb	r2, [r3, #0]
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	681b      	ldr	r3, [r3, #0]
 8007546:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8007548:	69fb      	ldr	r3, [r7, #28]
 800754a:	3301      	adds	r3, #1
 800754c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007554:	b29b      	uxth	r3, r3
 8007556:	3b01      	subs	r3, #1
 8007558:	b29a      	uxth	r2, r3
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8007566:	b29b      	uxth	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	d1c8      	bne.n	80074fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800756c:	683b      	ldr	r3, [r7, #0]
 800756e:	9300      	str	r3, [sp, #0]
 8007570:	697b      	ldr	r3, [r7, #20]
 8007572:	2200      	movs	r2, #0
 8007574:	2140      	movs	r1, #64	@ 0x40
 8007576:	68f8      	ldr	r0, [r7, #12]
 8007578:	f001 f954 	bl	8008824 <UART_WaitOnFlagUntilTimeout>
 800757c:	4603      	mov	r3, r0
 800757e:	2b00      	cmp	r3, #0
 8007580:	d005      	beq.n	800758e <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	2220      	movs	r2, #32
 8007586:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 800758a:	2303      	movs	r3, #3
 800758c:	e006      	b.n	800759c <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2220      	movs	r2, #32
 8007592:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8007596:	2300      	movs	r3, #0
 8007598:	e000      	b.n	800759c <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 800759a:	2302      	movs	r3, #2
  }
}
 800759c:	4618      	mov	r0, r3
 800759e:	3720      	adds	r7, #32
 80075a0:	46bd      	mov	sp, r7
 80075a2:	bd80      	pop	{r7, pc}

080075a4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80075a4:	b580      	push	{r7, lr}
 80075a6:	b08a      	sub	sp, #40	@ 0x28
 80075a8:	af00      	add	r7, sp, #0
 80075aa:	60f8      	str	r0, [r7, #12]
 80075ac:	60b9      	str	r1, [r7, #8]
 80075ae:	4613      	mov	r3, r2
 80075b0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80075b2:	68fb      	ldr	r3, [r7, #12]
 80075b4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80075b8:	2b20      	cmp	r3, #32
 80075ba:	d137      	bne.n	800762c <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 80075bc:	68bb      	ldr	r3, [r7, #8]
 80075be:	2b00      	cmp	r3, #0
 80075c0:	d002      	beq.n	80075c8 <HAL_UART_Receive_IT+0x24>
 80075c2:	88fb      	ldrh	r3, [r7, #6]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d101      	bne.n	80075cc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 80075c8:	2301      	movs	r3, #1
 80075ca:	e030      	b.n	800762e <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	2200      	movs	r2, #0
 80075d0:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	681b      	ldr	r3, [r3, #0]
 80075d6:	4a18      	ldr	r2, [pc, #96]	@ (8007638 <HAL_UART_Receive_IT+0x94>)
 80075d8:	4293      	cmp	r3, r2
 80075da:	d01f      	beq.n	800761c <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80075dc:	68fb      	ldr	r3, [r7, #12]
 80075de:	681b      	ldr	r3, [r3, #0]
 80075e0:	685b      	ldr	r3, [r3, #4]
 80075e2:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d018      	beq.n	800761c <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80075ea:	68fb      	ldr	r3, [r7, #12]
 80075ec:	681b      	ldr	r3, [r3, #0]
 80075ee:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075f0:	697b      	ldr	r3, [r7, #20]
 80075f2:	e853 3f00 	ldrex	r3, [r3]
 80075f6:	613b      	str	r3, [r7, #16]
   return(result);
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80075fe:	627b      	str	r3, [r7, #36]	@ 0x24
 8007600:	68fb      	ldr	r3, [r7, #12]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	461a      	mov	r2, r3
 8007606:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007608:	623b      	str	r3, [r7, #32]
 800760a:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800760c:	69f9      	ldr	r1, [r7, #28]
 800760e:	6a3a      	ldr	r2, [r7, #32]
 8007610:	e841 2300 	strex	r3, r2, [r1]
 8007614:	61bb      	str	r3, [r7, #24]
   return(result);
 8007616:	69bb      	ldr	r3, [r7, #24]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d1e6      	bne.n	80075ea <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800761c:	88fb      	ldrh	r3, [r7, #6]
 800761e:	461a      	mov	r2, r3
 8007620:	68b9      	ldr	r1, [r7, #8]
 8007622:	68f8      	ldr	r0, [r7, #12]
 8007624:	f001 f96c 	bl	8008900 <UART_Start_Receive_IT>
 8007628:	4603      	mov	r3, r0
 800762a:	e000      	b.n	800762e <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800762c:	2302      	movs	r3, #2
  }
}
 800762e:	4618      	mov	r0, r3
 8007630:	3728      	adds	r7, #40	@ 0x28
 8007632:	46bd      	mov	sp, r7
 8007634:	bd80      	pop	{r7, pc}
 8007636:	bf00      	nop
 8007638:	40008000 	.word	0x40008000

0800763c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800763c:	b580      	push	{r7, lr}
 800763e:	b0ba      	sub	sp, #232	@ 0xe8
 8007640:	af00      	add	r7, sp, #0
 8007642:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007644:	687b      	ldr	r3, [r7, #4]
 8007646:	681b      	ldr	r3, [r3, #0]
 8007648:	69db      	ldr	r3, [r3, #28]
 800764a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007662:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8007666:	f640 030f 	movw	r3, #2063	@ 0x80f
 800766a:	4013      	ands	r3, r2
 800766c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8007670:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8007674:	2b00      	cmp	r3, #0
 8007676:	d11b      	bne.n	80076b0 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007678:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800767c:	f003 0320 	and.w	r3, r3, #32
 8007680:	2b00      	cmp	r3, #0
 8007682:	d015      	beq.n	80076b0 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007684:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007688:	f003 0320 	and.w	r3, r3, #32
 800768c:	2b00      	cmp	r3, #0
 800768e:	d105      	bne.n	800769c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007690:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007694:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8007698:	2b00      	cmp	r3, #0
 800769a:	d009      	beq.n	80076b0 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	f000 82e3 	beq.w	8007c6c <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	4798      	blx	r3
      }
      return;
 80076ae:	e2dd      	b.n	8007c6c <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 80076b0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	f000 8123 	beq.w	8007900 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 80076ba:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 80076be:	4b8d      	ldr	r3, [pc, #564]	@ (80078f4 <HAL_UART_IRQHandler+0x2b8>)
 80076c0:	4013      	ands	r3, r2
 80076c2:	2b00      	cmp	r3, #0
 80076c4:	d106      	bne.n	80076d4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 80076c6:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 80076ca:	4b8b      	ldr	r3, [pc, #556]	@ (80078f8 <HAL_UART_IRQHandler+0x2bc>)
 80076cc:	4013      	ands	r3, r2
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	f000 8116 	beq.w	8007900 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80076d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80076d8:	f003 0301 	and.w	r3, r3, #1
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d011      	beq.n	8007704 <HAL_UART_IRQHandler+0xc8>
 80076e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80076e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d00b      	beq.n	8007704 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80076ec:	687b      	ldr	r3, [r7, #4]
 80076ee:	681b      	ldr	r3, [r3, #0]
 80076f0:	2201      	movs	r2, #1
 80076f2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80076fa:	f043 0201 	orr.w	r2, r3, #1
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007704:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007708:	f003 0302 	and.w	r3, r3, #2
 800770c:	2b00      	cmp	r3, #0
 800770e:	d011      	beq.n	8007734 <HAL_UART_IRQHandler+0xf8>
 8007710:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007714:	f003 0301 	and.w	r3, r3, #1
 8007718:	2b00      	cmp	r3, #0
 800771a:	d00b      	beq.n	8007734 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800771c:	687b      	ldr	r3, [r7, #4]
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	2202      	movs	r2, #2
 8007722:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800772a:	f043 0204 	orr.w	r2, r3, #4
 800772e:	687b      	ldr	r3, [r7, #4]
 8007730:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007734:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007738:	f003 0304 	and.w	r3, r3, #4
 800773c:	2b00      	cmp	r3, #0
 800773e:	d011      	beq.n	8007764 <HAL_UART_IRQHandler+0x128>
 8007740:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007744:	f003 0301 	and.w	r3, r3, #1
 8007748:	2b00      	cmp	r3, #0
 800774a:	d00b      	beq.n	8007764 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800774c:	687b      	ldr	r3, [r7, #4]
 800774e:	681b      	ldr	r3, [r3, #0]
 8007750:	2204      	movs	r2, #4
 8007752:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800775a:	f043 0202 	orr.w	r2, r3, #2
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007764:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007768:	f003 0308 	and.w	r3, r3, #8
 800776c:	2b00      	cmp	r3, #0
 800776e:	d017      	beq.n	80077a0 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007770:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007774:	f003 0320 	and.w	r3, r3, #32
 8007778:	2b00      	cmp	r3, #0
 800777a:	d105      	bne.n	8007788 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800777c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8007780:	4b5c      	ldr	r3, [pc, #368]	@ (80078f4 <HAL_UART_IRQHandler+0x2b8>)
 8007782:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007784:	2b00      	cmp	r3, #0
 8007786:	d00b      	beq.n	80077a0 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	681b      	ldr	r3, [r3, #0]
 800778c:	2208      	movs	r2, #8
 800778e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007796:	f043 0208 	orr.w	r2, r3, #8
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80077a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d012      	beq.n	80077d2 <HAL_UART_IRQHandler+0x196>
 80077ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077b0:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d00c      	beq.n	80077d2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80077c0:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077c8:	f043 0220 	orr.w	r2, r3, #32
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077d8:	2b00      	cmp	r3, #0
 80077da:	f000 8249 	beq.w	8007c70 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80077de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80077e2:	f003 0320 	and.w	r3, r3, #32
 80077e6:	2b00      	cmp	r3, #0
 80077e8:	d013      	beq.n	8007812 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80077ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80077ee:	f003 0320 	and.w	r3, r3, #32
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	d105      	bne.n	8007802 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80077f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80077fa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d007      	beq.n	8007812 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8007806:	2b00      	cmp	r3, #0
 8007808:	d003      	beq.n	8007812 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007818:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	689b      	ldr	r3, [r3, #8]
 8007822:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007826:	2b40      	cmp	r3, #64	@ 0x40
 8007828:	d005      	beq.n	8007836 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800782a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800782e:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007832:	2b00      	cmp	r3, #0
 8007834:	d054      	beq.n	80078e0 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007836:	6878      	ldr	r0, [r7, #4]
 8007838:	f001 f984 	bl	8008b44 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800783c:	687b      	ldr	r3, [r7, #4]
 800783e:	681b      	ldr	r3, [r3, #0]
 8007840:	689b      	ldr	r3, [r3, #8]
 8007842:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007846:	2b40      	cmp	r3, #64	@ 0x40
 8007848:	d146      	bne.n	80078d8 <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	3308      	adds	r3, #8
 8007850:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007854:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007858:	e853 3f00 	ldrex	r3, [r3]
 800785c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8007860:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8007864:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007868:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	3308      	adds	r3, #8
 8007872:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8007876:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800787a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800787e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8007882:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8007886:	e841 2300 	strex	r3, r2, [r1]
 800788a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800788e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007892:	2b00      	cmp	r3, #0
 8007894:	d1d9      	bne.n	800784a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800789c:	2b00      	cmp	r3, #0
 800789e:	d017      	beq.n	80078d0 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078a6:	4a15      	ldr	r2, [pc, #84]	@ (80078fc <HAL_UART_IRQHandler+0x2c0>)
 80078a8:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078b0:	4618      	mov	r0, r3
 80078b2:	f7fc fdec 	bl	800448e <HAL_DMA_Abort_IT>
 80078b6:	4603      	mov	r3, r0
 80078b8:	2b00      	cmp	r3, #0
 80078ba:	d019      	beq.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80078bc:	687b      	ldr	r3, [r7, #4]
 80078be:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80078c2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80078c4:	687a      	ldr	r2, [r7, #4]
 80078c6:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 80078ca:	4610      	mov	r0, r2
 80078cc:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078ce:	e00f      	b.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f9e1 	bl	8007c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078d6:	e00b      	b.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078d8:	6878      	ldr	r0, [r7, #4]
 80078da:	f000 f9dd 	bl	8007c98 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078de:	e007      	b.n	80078f0 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 f9d9 	bl	8007c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 80078ee:	e1bf      	b.n	8007c70 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80078f0:	bf00      	nop
    return;
 80078f2:	e1bd      	b.n	8007c70 <HAL_UART_IRQHandler+0x634>
 80078f4:	10000001 	.word	0x10000001
 80078f8:	04000120 	.word	0x04000120
 80078fc:	08008c11 	.word	0x08008c11

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007904:	2b01      	cmp	r3, #1
 8007906:	f040 8153 	bne.w	8007bb0 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800790a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800790e:	f003 0310 	and.w	r3, r3, #16
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 814c 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007918:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800791c:	f003 0310 	and.w	r3, r3, #16
 8007920:	2b00      	cmp	r3, #0
 8007922:	f000 8145 	beq.w	8007bb0 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	2210      	movs	r2, #16
 800792c:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	689b      	ldr	r3, [r3, #8]
 8007934:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007938:	2b40      	cmp	r3, #64	@ 0x40
 800793a:	f040 80bb 	bne.w	8007ab4 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800793e:	687b      	ldr	r3, [r7, #4]
 8007940:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	685b      	ldr	r3, [r3, #4]
 8007948:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800794c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8007950:	2b00      	cmp	r3, #0
 8007952:	f000 818f 	beq.w	8007c74 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800795c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8007960:	429a      	cmp	r2, r3
 8007962:	f080 8187 	bcs.w	8007c74 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800796c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007976:	681b      	ldr	r3, [r3, #0]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	f003 0320 	and.w	r3, r3, #32
 800797e:	2b00      	cmp	r3, #0
 8007980:	f040 8087 	bne.w	8007a92 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	681b      	ldr	r3, [r3, #0]
 8007988:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800798c:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8007990:	e853 3f00 	ldrex	r3, [r3]
 8007994:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8007998:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 800799c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80079a0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	461a      	mov	r2, r3
 80079aa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80079ae:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80079b2:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b6:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80079ba:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80079be:	e841 2300 	strex	r3, r2, [r1]
 80079c2:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80079c6:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80079ca:	2b00      	cmp	r3, #0
 80079cc:	d1da      	bne.n	8007984 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	3308      	adds	r3, #8
 80079d4:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079d6:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80079d8:	e853 3f00 	ldrex	r3, [r3]
 80079dc:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80079de:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80079e0:	f023 0301 	bic.w	r3, r3, #1
 80079e4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	3308      	adds	r3, #8
 80079ee:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80079f2:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80079f6:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079f8:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80079fa:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80079fe:	e841 2300 	strex	r3, r2, [r1]
 8007a02:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007a04:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d1e1      	bne.n	80079ce <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007a0a:	687b      	ldr	r3, [r7, #4]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	3308      	adds	r3, #8
 8007a10:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a12:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007a14:	e853 3f00 	ldrex	r3, [r3]
 8007a18:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007a1a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007a1c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8007a20:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8007a2e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007a30:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a32:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007a34:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007a36:	e841 2300 	strex	r3, r2, [r1]
 8007a3a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007a3c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007a3e:	2b00      	cmp	r3, #0
 8007a40:	d1e3      	bne.n	8007a0a <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007a42:	687b      	ldr	r3, [r7, #4]
 8007a44:	2220      	movs	r2, #32
 8007a46:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	2200      	movs	r2, #0
 8007a4e:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a56:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007a58:	e853 3f00 	ldrex	r3, [r3]
 8007a5c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007a5e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007a60:	f023 0310 	bic.w	r3, r3, #16
 8007a64:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8007a68:	687b      	ldr	r3, [r7, #4]
 8007a6a:	681b      	ldr	r3, [r3, #0]
 8007a6c:	461a      	mov	r2, r3
 8007a6e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007a72:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007a74:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a76:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007a78:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007a7a:	e841 2300 	strex	r3, r2, [r1]
 8007a7e:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007a80:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007a82:	2b00      	cmp	r3, #0
 8007a84:	d1e4      	bne.n	8007a50 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007a86:	687b      	ldr	r3, [r7, #4]
 8007a88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	f7fc fca5 	bl	80043dc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	2202      	movs	r2, #2
 8007a96:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007aa4:	b29b      	uxth	r3, r3
 8007aa6:	1ad3      	subs	r3, r2, r3
 8007aa8:	b29b      	uxth	r3, r3
 8007aaa:	4619      	mov	r1, r3
 8007aac:	6878      	ldr	r0, [r7, #4]
 8007aae:	f000 f8fd 	bl	8007cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007ab2:	e0df      	b.n	8007c74 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ac0:	b29b      	uxth	r3, r3
 8007ac2:	1ad3      	subs	r3, r2, r3
 8007ac4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8007ac8:	687b      	ldr	r3, [r7, #4]
 8007aca:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ace:	b29b      	uxth	r3, r3
 8007ad0:	2b00      	cmp	r3, #0
 8007ad2:	f000 80d1 	beq.w	8007c78 <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 8007ad6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ada:	2b00      	cmp	r3, #0
 8007adc:	f000 80cc 	beq.w	8007c78 <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ae6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007ae8:	e853 3f00 	ldrex	r3, [r3]
 8007aec:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007aee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007af0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007af4:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	461a      	mov	r2, r3
 8007afe:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8007b02:	647b      	str	r3, [r7, #68]	@ 0x44
 8007b04:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b06:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007b08:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007b0a:	e841 2300 	strex	r3, r2, [r1]
 8007b0e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007b10:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007b12:	2b00      	cmp	r3, #0
 8007b14:	d1e4      	bne.n	8007ae0 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	3308      	adds	r3, #8
 8007b1c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007b20:	e853 3f00 	ldrex	r3, [r3]
 8007b24:	623b      	str	r3, [r7, #32]
   return(result);
 8007b26:	6a3b      	ldr	r3, [r7, #32]
 8007b28:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007b2c:	f023 0301 	bic.w	r3, r3, #1
 8007b30:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	3308      	adds	r3, #8
 8007b3a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8007b3e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b42:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007b44:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007b46:	e841 2300 	strex	r3, r2, [r1]
 8007b4a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1e1      	bne.n	8007b16 <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	2220      	movs	r2, #32
 8007b56:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	2200      	movs	r2, #0
 8007b5e:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	2200      	movs	r2, #0
 8007b64:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007b6c:	693b      	ldr	r3, [r7, #16]
 8007b6e:	e853 3f00 	ldrex	r3, [r3]
 8007b72:	60fb      	str	r3, [r7, #12]
   return(result);
 8007b74:	68fb      	ldr	r3, [r7, #12]
 8007b76:	f023 0310 	bic.w	r3, r3, #16
 8007b7a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	461a      	mov	r2, r3
 8007b84:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8007b88:	61fb      	str	r3, [r7, #28]
 8007b8a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007b8c:	69b9      	ldr	r1, [r7, #24]
 8007b8e:	69fa      	ldr	r2, [r7, #28]
 8007b90:	e841 2300 	strex	r3, r2, [r1]
 8007b94:	617b      	str	r3, [r7, #20]
   return(result);
 8007b96:	697b      	ldr	r3, [r7, #20]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d1e4      	bne.n	8007b66 <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	2202      	movs	r2, #2
 8007ba0:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007ba2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8007ba6:	4619      	mov	r1, r3
 8007ba8:	6878      	ldr	r0, [r7, #4]
 8007baa:	f000 f87f 	bl	8007cac <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007bae:	e063      	b.n	8007c78 <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007bb0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bb4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d00e      	beq.n	8007bda <HAL_UART_IRQHandler+0x59e>
 8007bbc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bc0:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d008      	beq.n	8007bda <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	681b      	ldr	r3, [r3, #0]
 8007bcc:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8007bd0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007bd2:	6878      	ldr	r0, [r7, #4]
 8007bd4:	f001 fd7a 	bl	80096cc <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007bd8:	e051      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007bda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007bde:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d014      	beq.n	8007c10 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007be6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007bea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007bee:	2b00      	cmp	r3, #0
 8007bf0:	d105      	bne.n	8007bfe <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007bf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8007bf6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007bfa:	2b00      	cmp	r3, #0
 8007bfc:	d008      	beq.n	8007c10 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c02:	2b00      	cmp	r3, #0
 8007c04:	d03a      	beq.n	8007c7c <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8007c0a:	6878      	ldr	r0, [r7, #4]
 8007c0c:	4798      	blx	r3
    }
    return;
 8007c0e:	e035      	b.n	8007c7c <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007c10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c14:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c18:	2b00      	cmp	r3, #0
 8007c1a:	d009      	beq.n	8007c30 <HAL_UART_IRQHandler+0x5f4>
 8007c1c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c20:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8007c24:	2b00      	cmp	r3, #0
 8007c26:	d003      	beq.n	8007c30 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 8007c28:	6878      	ldr	r0, [r7, #4]
 8007c2a:	f001 f807 	bl	8008c3c <UART_EndTransmit_IT>
    return;
 8007c2e:	e026      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007c30:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c34:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c38:	2b00      	cmp	r3, #0
 8007c3a:	d009      	beq.n	8007c50 <HAL_UART_IRQHandler+0x614>
 8007c3c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c40:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d003      	beq.n	8007c50 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007c48:	6878      	ldr	r0, [r7, #4]
 8007c4a:	f001 fd53 	bl	80096f4 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c4e:	e016      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007c50:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8007c54:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 8007c58:	2b00      	cmp	r3, #0
 8007c5a:	d010      	beq.n	8007c7e <HAL_UART_IRQHandler+0x642>
 8007c5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	da0c      	bge.n	8007c7e <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007c64:	6878      	ldr	r0, [r7, #4]
 8007c66:	f001 fd3b 	bl	80096e0 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007c6a:	e008      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
      return;
 8007c6c:	bf00      	nop
 8007c6e:	e006      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
    return;
 8007c70:	bf00      	nop
 8007c72:	e004      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
      return;
 8007c74:	bf00      	nop
 8007c76:	e002      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
      return;
 8007c78:	bf00      	nop
 8007c7a:	e000      	b.n	8007c7e <HAL_UART_IRQHandler+0x642>
    return;
 8007c7c:	bf00      	nop
  }
}
 8007c7e:	37e8      	adds	r7, #232	@ 0xe8
 8007c80:	46bd      	mov	sp, r7
 8007c82:	bd80      	pop	{r7, pc}

08007c84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007c84:	b480      	push	{r7}
 8007c86:	b083      	sub	sp, #12
 8007c88:	af00      	add	r7, sp, #0
 8007c8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007c8c:	bf00      	nop
 8007c8e:	370c      	adds	r7, #12
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr

08007c98 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007c98:	b480      	push	{r7}
 8007c9a:	b083      	sub	sp, #12
 8007c9c:	af00      	add	r7, sp, #0
 8007c9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8007ca0:	bf00      	nop
 8007ca2:	370c      	adds	r7, #12
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007caa:	4770      	bx	lr

08007cac <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007cac:	b480      	push	{r7}
 8007cae:	b083      	sub	sp, #12
 8007cb0:	af00      	add	r7, sp, #0
 8007cb2:	6078      	str	r0, [r7, #4]
 8007cb4:	460b      	mov	r3, r1
 8007cb6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007cb8:	bf00      	nop
 8007cba:	370c      	adds	r7, #12
 8007cbc:	46bd      	mov	sp, r7
 8007cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc2:	4770      	bx	lr

08007cc4 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007cc4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007cc8:	b08c      	sub	sp, #48	@ 0x30
 8007cca:	af00      	add	r7, sp, #0
 8007ccc:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8007cce:	2300      	movs	r3, #0
 8007cd0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8007cd4:	697b      	ldr	r3, [r7, #20]
 8007cd6:	685b      	ldr	r3, [r3, #4]
 8007cd8:	4a17      	ldr	r2, [pc, #92]	@ (8007d38 <UART_SetConfig+0x74>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d904      	bls.n	8007ce8 <UART_SetConfig+0x24>
 8007cde:	f640 31c7 	movw	r1, #3015	@ 0xbc7
 8007ce2:	4816      	ldr	r0, [pc, #88]	@ (8007d3c <UART_SetConfig+0x78>)
 8007ce4:	f7f9 fae8 	bl	80012b8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 8007ce8:	697b      	ldr	r3, [r7, #20]
 8007cea:	689b      	ldr	r3, [r3, #8]
 8007cec:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007cf0:	d00d      	beq.n	8007d0e <UART_SetConfig+0x4a>
 8007cf2:	697b      	ldr	r3, [r7, #20]
 8007cf4:	689b      	ldr	r3, [r3, #8]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d009      	beq.n	8007d0e <UART_SetConfig+0x4a>
 8007cfa:	697b      	ldr	r3, [r7, #20]
 8007cfc:	689b      	ldr	r3, [r3, #8]
 8007cfe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d02:	d004      	beq.n	8007d0e <UART_SetConfig+0x4a>
 8007d04:	f640 31c8 	movw	r1, #3016	@ 0xbc8
 8007d08:	480c      	ldr	r0, [pc, #48]	@ (8007d3c <UART_SetConfig+0x78>)
 8007d0a:	f7f9 fad5 	bl	80012b8 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8007d0e:	697b      	ldr	r3, [r7, #20]
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	4a0b      	ldr	r2, [pc, #44]	@ (8007d40 <UART_SetConfig+0x7c>)
 8007d14:	4293      	cmp	r3, r2
 8007d16:	d115      	bne.n	8007d44 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 8007d18:	697b      	ldr	r3, [r7, #20]
 8007d1a:	68db      	ldr	r3, [r3, #12]
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d037      	beq.n	8007d90 <UART_SetConfig+0xcc>
 8007d20:	697b      	ldr	r3, [r7, #20]
 8007d22:	68db      	ldr	r3, [r3, #12]
 8007d24:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d28:	d032      	beq.n	8007d90 <UART_SetConfig+0xcc>
 8007d2a:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 8007d2e:	4803      	ldr	r0, [pc, #12]	@ (8007d3c <UART_SetConfig+0x78>)
 8007d30:	f7f9 fac2 	bl	80012b8 <assert_failed>
 8007d34:	e02c      	b.n	8007d90 <UART_SetConfig+0xcc>
 8007d36:	bf00      	nop
 8007d38:	011e1a30 	.word	0x011e1a30
 8007d3c:	0800c478 	.word	0x0800c478
 8007d40:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8007d44:	697b      	ldr	r3, [r7, #20]
 8007d46:	68db      	ldr	r3, [r3, #12]
 8007d48:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007d4c:	d012      	beq.n	8007d74 <UART_SetConfig+0xb0>
 8007d4e:	697b      	ldr	r3, [r7, #20]
 8007d50:	68db      	ldr	r3, [r3, #12]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00e      	beq.n	8007d74 <UART_SetConfig+0xb0>
 8007d56:	697b      	ldr	r3, [r7, #20]
 8007d58:	68db      	ldr	r3, [r3, #12]
 8007d5a:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8007d5e:	d009      	beq.n	8007d74 <UART_SetConfig+0xb0>
 8007d60:	697b      	ldr	r3, [r7, #20]
 8007d62:	68db      	ldr	r3, [r3, #12]
 8007d64:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8007d68:	d004      	beq.n	8007d74 <UART_SetConfig+0xb0>
 8007d6a:	f640 31cf 	movw	r1, #3023	@ 0xbcf
 8007d6e:	489e      	ldr	r0, [pc, #632]	@ (8007fe8 <UART_SetConfig+0x324>)
 8007d70:	f7f9 faa2 	bl	80012b8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8007d74:	697b      	ldr	r3, [r7, #20]
 8007d76:	6a1b      	ldr	r3, [r3, #32]
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d009      	beq.n	8007d90 <UART_SetConfig+0xcc>
 8007d7c:	697b      	ldr	r3, [r7, #20]
 8007d7e:	6a1b      	ldr	r3, [r3, #32]
 8007d80:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8007d84:	d004      	beq.n	8007d90 <UART_SetConfig+0xcc>
 8007d86:	f44f 613d 	mov.w	r1, #3024	@ 0xbd0
 8007d8a:	4897      	ldr	r0, [pc, #604]	@ (8007fe8 <UART_SetConfig+0x324>)
 8007d8c:	f7f9 fa94 	bl	80012b8 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8007d90:	697b      	ldr	r3, [r7, #20]
 8007d92:	691b      	ldr	r3, [r3, #16]
 8007d94:	2b00      	cmp	r3, #0
 8007d96:	d00e      	beq.n	8007db6 <UART_SetConfig+0xf2>
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	691b      	ldr	r3, [r3, #16]
 8007d9c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007da0:	d009      	beq.n	8007db6 <UART_SetConfig+0xf2>
 8007da2:	697b      	ldr	r3, [r7, #20]
 8007da4:	691b      	ldr	r3, [r3, #16]
 8007da6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8007daa:	d004      	beq.n	8007db6 <UART_SetConfig+0xf2>
 8007dac:	f640 31d3 	movw	r1, #3027	@ 0xbd3
 8007db0:	488d      	ldr	r0, [pc, #564]	@ (8007fe8 <UART_SetConfig+0x324>)
 8007db2:	f7f9 fa81 	bl	80012b8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 8007db6:	697b      	ldr	r3, [r7, #20]
 8007db8:	695b      	ldr	r3, [r3, #20]
 8007dba:	f023 030c 	bic.w	r3, r3, #12
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d103      	bne.n	8007dca <UART_SetConfig+0x106>
 8007dc2:	697b      	ldr	r3, [r7, #20]
 8007dc4:	695b      	ldr	r3, [r3, #20]
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d104      	bne.n	8007dd4 <UART_SetConfig+0x110>
 8007dca:	f640 31d4 	movw	r1, #3028	@ 0xbd4
 8007dce:	4886      	ldr	r0, [pc, #536]	@ (8007fe8 <UART_SetConfig+0x324>)
 8007dd0:	f7f9 fa72 	bl	80012b8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8007dd4:	697b      	ldr	r3, [r7, #20]
 8007dd6:	699b      	ldr	r3, [r3, #24]
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d013      	beq.n	8007e04 <UART_SetConfig+0x140>
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	699b      	ldr	r3, [r3, #24]
 8007de0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8007de4:	d00e      	beq.n	8007e04 <UART_SetConfig+0x140>
 8007de6:	697b      	ldr	r3, [r7, #20]
 8007de8:	699b      	ldr	r3, [r3, #24]
 8007dea:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007dee:	d009      	beq.n	8007e04 <UART_SetConfig+0x140>
 8007df0:	697b      	ldr	r3, [r7, #20]
 8007df2:	699b      	ldr	r3, [r3, #24]
 8007df4:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8007df8:	d004      	beq.n	8007e04 <UART_SetConfig+0x140>
 8007dfa:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 8007dfe:	487a      	ldr	r0, [pc, #488]	@ (8007fe8 <UART_SetConfig+0x324>)
 8007e00:	f7f9 fa5a 	bl	80012b8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8007e04:	697b      	ldr	r3, [r7, #20]
 8007e06:	69db      	ldr	r3, [r3, #28]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d009      	beq.n	8007e20 <UART_SetConfig+0x15c>
 8007e0c:	697b      	ldr	r3, [r7, #20]
 8007e0e:	69db      	ldr	r3, [r3, #28]
 8007e10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8007e14:	d004      	beq.n	8007e20 <UART_SetConfig+0x15c>
 8007e16:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 8007e1a:	4873      	ldr	r0, [pc, #460]	@ (8007fe8 <UART_SetConfig+0x324>)
 8007e1c:	f7f9 fa4c 	bl	80012b8 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8007e20:	697b      	ldr	r3, [r7, #20]
 8007e22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d030      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e28:	697b      	ldr	r3, [r7, #20]
 8007e2a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e2c:	2b01      	cmp	r3, #1
 8007e2e:	d02c      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e30:	697b      	ldr	r3, [r7, #20]
 8007e32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e34:	2b02      	cmp	r3, #2
 8007e36:	d028      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e38:	697b      	ldr	r3, [r7, #20]
 8007e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e3c:	2b03      	cmp	r3, #3
 8007e3e:	d024      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e40:	697b      	ldr	r3, [r7, #20]
 8007e42:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e44:	2b04      	cmp	r3, #4
 8007e46:	d020      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e48:	697b      	ldr	r3, [r7, #20]
 8007e4a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e4c:	2b05      	cmp	r3, #5
 8007e4e:	d01c      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e50:	697b      	ldr	r3, [r7, #20]
 8007e52:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e54:	2b06      	cmp	r3, #6
 8007e56:	d018      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e58:	697b      	ldr	r3, [r7, #20]
 8007e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e5c:	2b07      	cmp	r3, #7
 8007e5e:	d014      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e60:	697b      	ldr	r3, [r7, #20]
 8007e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e64:	2b08      	cmp	r3, #8
 8007e66:	d010      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e68:	697b      	ldr	r3, [r7, #20]
 8007e6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e6c:	2b09      	cmp	r3, #9
 8007e6e:	d00c      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e70:	697b      	ldr	r3, [r7, #20]
 8007e72:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e74:	2b0a      	cmp	r3, #10
 8007e76:	d008      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e78:	697b      	ldr	r3, [r7, #20]
 8007e7a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007e7c:	2b0b      	cmp	r3, #11
 8007e7e:	d004      	beq.n	8007e8a <UART_SetConfig+0x1c6>
 8007e80:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 8007e84:	4858      	ldr	r0, [pc, #352]	@ (8007fe8 <UART_SetConfig+0x324>)
 8007e86:	f7f9 fa17 	bl	80012b8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8007e8a:	697b      	ldr	r3, [r7, #20]
 8007e8c:	689a      	ldr	r2, [r3, #8]
 8007e8e:	697b      	ldr	r3, [r7, #20]
 8007e90:	691b      	ldr	r3, [r3, #16]
 8007e92:	431a      	orrs	r2, r3
 8007e94:	697b      	ldr	r3, [r7, #20]
 8007e96:	695b      	ldr	r3, [r3, #20]
 8007e98:	431a      	orrs	r2, r3
 8007e9a:	697b      	ldr	r3, [r7, #20]
 8007e9c:	69db      	ldr	r3, [r3, #28]
 8007e9e:	4313      	orrs	r3, r2
 8007ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8007ea2:	697b      	ldr	r3, [r7, #20]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	681a      	ldr	r2, [r3, #0]
 8007ea8:	4b50      	ldr	r3, [pc, #320]	@ (8007fec <UART_SetConfig+0x328>)
 8007eaa:	4013      	ands	r3, r2
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	6812      	ldr	r2, [r2, #0]
 8007eb0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007eb2:	430b      	orrs	r3, r1
 8007eb4:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007eb6:	697b      	ldr	r3, [r7, #20]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	685b      	ldr	r3, [r3, #4]
 8007ebc:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8007ec0:	697b      	ldr	r3, [r7, #20]
 8007ec2:	68da      	ldr	r2, [r3, #12]
 8007ec4:	697b      	ldr	r3, [r7, #20]
 8007ec6:	681b      	ldr	r3, [r3, #0]
 8007ec8:	430a      	orrs	r2, r1
 8007eca:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8007ecc:	697b      	ldr	r3, [r7, #20]
 8007ece:	699b      	ldr	r3, [r3, #24]
 8007ed0:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8007ed2:	697b      	ldr	r3, [r7, #20]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	4a46      	ldr	r2, [pc, #280]	@ (8007ff0 <UART_SetConfig+0x32c>)
 8007ed8:	4293      	cmp	r3, r2
 8007eda:	d004      	beq.n	8007ee6 <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8007edc:	697b      	ldr	r3, [r7, #20]
 8007ede:	6a1b      	ldr	r3, [r3, #32]
 8007ee0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007ee2:	4313      	orrs	r3, r2
 8007ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8007ee6:	697b      	ldr	r3, [r7, #20]
 8007ee8:	681b      	ldr	r3, [r3, #0]
 8007eea:	689b      	ldr	r3, [r3, #8]
 8007eec:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8007ef0:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8007ef4:	697a      	ldr	r2, [r7, #20]
 8007ef6:	6812      	ldr	r2, [r2, #0]
 8007ef8:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007efa:	430b      	orrs	r3, r1
 8007efc:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8007efe:	697b      	ldr	r3, [r7, #20]
 8007f00:	681b      	ldr	r3, [r3, #0]
 8007f02:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007f04:	f023 010f 	bic.w	r1, r3, #15
 8007f08:	697b      	ldr	r3, [r7, #20]
 8007f0a:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8007f0c:	697b      	ldr	r3, [r7, #20]
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	430a      	orrs	r2, r1
 8007f12:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8007f14:	697b      	ldr	r3, [r7, #20]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	4a36      	ldr	r2, [pc, #216]	@ (8007ff4 <UART_SetConfig+0x330>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d126      	bne.n	8007f6c <UART_SetConfig+0x2a8>
 8007f1e:	4b36      	ldr	r3, [pc, #216]	@ (8007ff8 <UART_SetConfig+0x334>)
 8007f20:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f24:	f003 0303 	and.w	r3, r3, #3
 8007f28:	2b03      	cmp	r3, #3
 8007f2a:	d81b      	bhi.n	8007f64 <UART_SetConfig+0x2a0>
 8007f2c:	a201      	add	r2, pc, #4	@ (adr r2, 8007f34 <UART_SetConfig+0x270>)
 8007f2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f32:	bf00      	nop
 8007f34:	08007f45 	.word	0x08007f45
 8007f38:	08007f55 	.word	0x08007f55
 8007f3c:	08007f4d 	.word	0x08007f4d
 8007f40:	08007f5d 	.word	0x08007f5d
 8007f44:	2301      	movs	r3, #1
 8007f46:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f4a:	e0e2      	b.n	8008112 <UART_SetConfig+0x44e>
 8007f4c:	2302      	movs	r3, #2
 8007f4e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f52:	e0de      	b.n	8008112 <UART_SetConfig+0x44e>
 8007f54:	2304      	movs	r3, #4
 8007f56:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f5a:	e0da      	b.n	8008112 <UART_SetConfig+0x44e>
 8007f5c:	2308      	movs	r3, #8
 8007f5e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f62:	e0d6      	b.n	8008112 <UART_SetConfig+0x44e>
 8007f64:	2310      	movs	r3, #16
 8007f66:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007f6a:	e0d2      	b.n	8008112 <UART_SetConfig+0x44e>
 8007f6c:	697b      	ldr	r3, [r7, #20]
 8007f6e:	681b      	ldr	r3, [r3, #0]
 8007f70:	4a22      	ldr	r2, [pc, #136]	@ (8007ffc <UART_SetConfig+0x338>)
 8007f72:	4293      	cmp	r3, r2
 8007f74:	d144      	bne.n	8008000 <UART_SetConfig+0x33c>
 8007f76:	4b20      	ldr	r3, [pc, #128]	@ (8007ff8 <UART_SetConfig+0x334>)
 8007f78:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8007f7c:	f003 030c 	and.w	r3, r3, #12
 8007f80:	2b0c      	cmp	r3, #12
 8007f82:	d82d      	bhi.n	8007fe0 <UART_SetConfig+0x31c>
 8007f84:	a201      	add	r2, pc, #4	@ (adr r2, 8007f8c <UART_SetConfig+0x2c8>)
 8007f86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007f8a:	bf00      	nop
 8007f8c:	08007fc1 	.word	0x08007fc1
 8007f90:	08007fe1 	.word	0x08007fe1
 8007f94:	08007fe1 	.word	0x08007fe1
 8007f98:	08007fe1 	.word	0x08007fe1
 8007f9c:	08007fd1 	.word	0x08007fd1
 8007fa0:	08007fe1 	.word	0x08007fe1
 8007fa4:	08007fe1 	.word	0x08007fe1
 8007fa8:	08007fe1 	.word	0x08007fe1
 8007fac:	08007fc9 	.word	0x08007fc9
 8007fb0:	08007fe1 	.word	0x08007fe1
 8007fb4:	08007fe1 	.word	0x08007fe1
 8007fb8:	08007fe1 	.word	0x08007fe1
 8007fbc:	08007fd9 	.word	0x08007fd9
 8007fc0:	2300      	movs	r3, #0
 8007fc2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fc6:	e0a4      	b.n	8008112 <UART_SetConfig+0x44e>
 8007fc8:	2302      	movs	r3, #2
 8007fca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fce:	e0a0      	b.n	8008112 <UART_SetConfig+0x44e>
 8007fd0:	2304      	movs	r3, #4
 8007fd2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fd6:	e09c      	b.n	8008112 <UART_SetConfig+0x44e>
 8007fd8:	2308      	movs	r3, #8
 8007fda:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fde:	e098      	b.n	8008112 <UART_SetConfig+0x44e>
 8007fe0:	2310      	movs	r3, #16
 8007fe2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8007fe6:	e094      	b.n	8008112 <UART_SetConfig+0x44e>
 8007fe8:	0800c478 	.word	0x0800c478
 8007fec:	cfff69f3 	.word	0xcfff69f3
 8007ff0:	40008000 	.word	0x40008000
 8007ff4:	40013800 	.word	0x40013800
 8007ff8:	40021000 	.word	0x40021000
 8007ffc:	40004400 	.word	0x40004400
 8008000:	697b      	ldr	r3, [r7, #20]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	4aaa      	ldr	r2, [pc, #680]	@ (80082b0 <UART_SetConfig+0x5ec>)
 8008006:	4293      	cmp	r3, r2
 8008008:	d125      	bne.n	8008056 <UART_SetConfig+0x392>
 800800a:	4baa      	ldr	r3, [pc, #680]	@ (80082b4 <UART_SetConfig+0x5f0>)
 800800c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008010:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8008014:	2b30      	cmp	r3, #48	@ 0x30
 8008016:	d016      	beq.n	8008046 <UART_SetConfig+0x382>
 8008018:	2b30      	cmp	r3, #48	@ 0x30
 800801a:	d818      	bhi.n	800804e <UART_SetConfig+0x38a>
 800801c:	2b20      	cmp	r3, #32
 800801e:	d00a      	beq.n	8008036 <UART_SetConfig+0x372>
 8008020:	2b20      	cmp	r3, #32
 8008022:	d814      	bhi.n	800804e <UART_SetConfig+0x38a>
 8008024:	2b00      	cmp	r3, #0
 8008026:	d002      	beq.n	800802e <UART_SetConfig+0x36a>
 8008028:	2b10      	cmp	r3, #16
 800802a:	d008      	beq.n	800803e <UART_SetConfig+0x37a>
 800802c:	e00f      	b.n	800804e <UART_SetConfig+0x38a>
 800802e:	2300      	movs	r3, #0
 8008030:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008034:	e06d      	b.n	8008112 <UART_SetConfig+0x44e>
 8008036:	2302      	movs	r3, #2
 8008038:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800803c:	e069      	b.n	8008112 <UART_SetConfig+0x44e>
 800803e:	2304      	movs	r3, #4
 8008040:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008044:	e065      	b.n	8008112 <UART_SetConfig+0x44e>
 8008046:	2308      	movs	r3, #8
 8008048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800804c:	e061      	b.n	8008112 <UART_SetConfig+0x44e>
 800804e:	2310      	movs	r3, #16
 8008050:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008054:	e05d      	b.n	8008112 <UART_SetConfig+0x44e>
 8008056:	697b      	ldr	r3, [r7, #20]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	4a97      	ldr	r2, [pc, #604]	@ (80082b8 <UART_SetConfig+0x5f4>)
 800805c:	4293      	cmp	r3, r2
 800805e:	d125      	bne.n	80080ac <UART_SetConfig+0x3e8>
 8008060:	4b94      	ldr	r3, [pc, #592]	@ (80082b4 <UART_SetConfig+0x5f0>)
 8008062:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8008066:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800806a:	2bc0      	cmp	r3, #192	@ 0xc0
 800806c:	d016      	beq.n	800809c <UART_SetConfig+0x3d8>
 800806e:	2bc0      	cmp	r3, #192	@ 0xc0
 8008070:	d818      	bhi.n	80080a4 <UART_SetConfig+0x3e0>
 8008072:	2b80      	cmp	r3, #128	@ 0x80
 8008074:	d00a      	beq.n	800808c <UART_SetConfig+0x3c8>
 8008076:	2b80      	cmp	r3, #128	@ 0x80
 8008078:	d814      	bhi.n	80080a4 <UART_SetConfig+0x3e0>
 800807a:	2b00      	cmp	r3, #0
 800807c:	d002      	beq.n	8008084 <UART_SetConfig+0x3c0>
 800807e:	2b40      	cmp	r3, #64	@ 0x40
 8008080:	d008      	beq.n	8008094 <UART_SetConfig+0x3d0>
 8008082:	e00f      	b.n	80080a4 <UART_SetConfig+0x3e0>
 8008084:	2300      	movs	r3, #0
 8008086:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800808a:	e042      	b.n	8008112 <UART_SetConfig+0x44e>
 800808c:	2302      	movs	r3, #2
 800808e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008092:	e03e      	b.n	8008112 <UART_SetConfig+0x44e>
 8008094:	2304      	movs	r3, #4
 8008096:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800809a:	e03a      	b.n	8008112 <UART_SetConfig+0x44e>
 800809c:	2308      	movs	r3, #8
 800809e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080a2:	e036      	b.n	8008112 <UART_SetConfig+0x44e>
 80080a4:	2310      	movs	r3, #16
 80080a6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080aa:	e032      	b.n	8008112 <UART_SetConfig+0x44e>
 80080ac:	697b      	ldr	r3, [r7, #20]
 80080ae:	681b      	ldr	r3, [r3, #0]
 80080b0:	4a82      	ldr	r2, [pc, #520]	@ (80082bc <UART_SetConfig+0x5f8>)
 80080b2:	4293      	cmp	r3, r2
 80080b4:	d12a      	bne.n	800810c <UART_SetConfig+0x448>
 80080b6:	4b7f      	ldr	r3, [pc, #508]	@ (80082b4 <UART_SetConfig+0x5f0>)
 80080b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80080bc:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80080c0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080c4:	d01a      	beq.n	80080fc <UART_SetConfig+0x438>
 80080c6:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80080ca:	d81b      	bhi.n	8008104 <UART_SetConfig+0x440>
 80080cc:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080d0:	d00c      	beq.n	80080ec <UART_SetConfig+0x428>
 80080d2:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80080d6:	d815      	bhi.n	8008104 <UART_SetConfig+0x440>
 80080d8:	2b00      	cmp	r3, #0
 80080da:	d003      	beq.n	80080e4 <UART_SetConfig+0x420>
 80080dc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80080e0:	d008      	beq.n	80080f4 <UART_SetConfig+0x430>
 80080e2:	e00f      	b.n	8008104 <UART_SetConfig+0x440>
 80080e4:	2300      	movs	r3, #0
 80080e6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080ea:	e012      	b.n	8008112 <UART_SetConfig+0x44e>
 80080ec:	2302      	movs	r3, #2
 80080ee:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080f2:	e00e      	b.n	8008112 <UART_SetConfig+0x44e>
 80080f4:	2304      	movs	r3, #4
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80080fa:	e00a      	b.n	8008112 <UART_SetConfig+0x44e>
 80080fc:	2308      	movs	r3, #8
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8008102:	e006      	b.n	8008112 <UART_SetConfig+0x44e>
 8008104:	2310      	movs	r3, #16
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800810a:	e002      	b.n	8008112 <UART_SetConfig+0x44e>
 800810c:	2310      	movs	r3, #16
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8008112:	697b      	ldr	r3, [r7, #20]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	4a69      	ldr	r2, [pc, #420]	@ (80082bc <UART_SetConfig+0x5f8>)
 8008118:	4293      	cmp	r3, r2
 800811a:	f040 8097 	bne.w	800824c <UART_SetConfig+0x588>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800811e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008122:	2b08      	cmp	r3, #8
 8008124:	d823      	bhi.n	800816e <UART_SetConfig+0x4aa>
 8008126:	a201      	add	r2, pc, #4	@ (adr r2, 800812c <UART_SetConfig+0x468>)
 8008128:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800812c:	08008151 	.word	0x08008151
 8008130:	0800816f 	.word	0x0800816f
 8008134:	08008159 	.word	0x08008159
 8008138:	0800816f 	.word	0x0800816f
 800813c:	0800815f 	.word	0x0800815f
 8008140:	0800816f 	.word	0x0800816f
 8008144:	0800816f 	.word	0x0800816f
 8008148:	0800816f 	.word	0x0800816f
 800814c:	08008167 	.word	0x08008167
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008150:	f7fd fea8 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 8008154:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008156:	e010      	b.n	800817a <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008158:	4b59      	ldr	r3, [pc, #356]	@ (80082c0 <UART_SetConfig+0x5fc>)
 800815a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800815c:	e00d      	b.n	800817a <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800815e:	f7fd fe33 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 8008162:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008164:	e009      	b.n	800817a <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008166:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800816a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800816c:	e005      	b.n	800817a <UART_SetConfig+0x4b6>
      default:
        pclk = 0U;
 800816e:	2300      	movs	r3, #0
 8008170:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8008172:	2301      	movs	r3, #1
 8008174:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8008178:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800817a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800817c:	2b00      	cmp	r3, #0
 800817e:	f000 8135 	beq.w	80083ec <UART_SetConfig+0x728>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8008182:	697b      	ldr	r3, [r7, #20]
 8008184:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008186:	4a4f      	ldr	r2, [pc, #316]	@ (80082c4 <UART_SetConfig+0x600>)
 8008188:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800818c:	461a      	mov	r2, r3
 800818e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008190:	fbb3 f3f2 	udiv	r3, r3, r2
 8008194:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008196:	697b      	ldr	r3, [r7, #20]
 8008198:	685a      	ldr	r2, [r3, #4]
 800819a:	4613      	mov	r3, r2
 800819c:	005b      	lsls	r3, r3, #1
 800819e:	4413      	add	r3, r2
 80081a0:	69ba      	ldr	r2, [r7, #24]
 80081a2:	429a      	cmp	r2, r3
 80081a4:	d305      	bcc.n	80081b2 <UART_SetConfig+0x4ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80081a6:	697b      	ldr	r3, [r7, #20]
 80081a8:	685b      	ldr	r3, [r3, #4]
 80081aa:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	429a      	cmp	r2, r3
 80081b0:	d903      	bls.n	80081ba <UART_SetConfig+0x4f6>
      {
        ret = HAL_ERROR;
 80081b2:	2301      	movs	r3, #1
 80081b4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80081b8:	e118      	b.n	80083ec <UART_SetConfig+0x728>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80081ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80081bc:	2200      	movs	r2, #0
 80081be:	60bb      	str	r3, [r7, #8]
 80081c0:	60fa      	str	r2, [r7, #12]
 80081c2:	697b      	ldr	r3, [r7, #20]
 80081c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80081c6:	4a3f      	ldr	r2, [pc, #252]	@ (80082c4 <UART_SetConfig+0x600>)
 80081c8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80081cc:	b29b      	uxth	r3, r3
 80081ce:	2200      	movs	r2, #0
 80081d0:	603b      	str	r3, [r7, #0]
 80081d2:	607a      	str	r2, [r7, #4]
 80081d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081d8:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80081dc:	f7f8 f888 	bl	80002f0 <__aeabi_uldivmod>
 80081e0:	4602      	mov	r2, r0
 80081e2:	460b      	mov	r3, r1
 80081e4:	4610      	mov	r0, r2
 80081e6:	4619      	mov	r1, r3
 80081e8:	f04f 0200 	mov.w	r2, #0
 80081ec:	f04f 0300 	mov.w	r3, #0
 80081f0:	020b      	lsls	r3, r1, #8
 80081f2:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80081f6:	0202      	lsls	r2, r0, #8
 80081f8:	6979      	ldr	r1, [r7, #20]
 80081fa:	6849      	ldr	r1, [r1, #4]
 80081fc:	0849      	lsrs	r1, r1, #1
 80081fe:	2000      	movs	r0, #0
 8008200:	460c      	mov	r4, r1
 8008202:	4605      	mov	r5, r0
 8008204:	eb12 0804 	adds.w	r8, r2, r4
 8008208:	eb43 0905 	adc.w	r9, r3, r5
 800820c:	697b      	ldr	r3, [r7, #20]
 800820e:	685b      	ldr	r3, [r3, #4]
 8008210:	2200      	movs	r2, #0
 8008212:	469a      	mov	sl, r3
 8008214:	4693      	mov	fp, r2
 8008216:	4652      	mov	r2, sl
 8008218:	465b      	mov	r3, fp
 800821a:	4640      	mov	r0, r8
 800821c:	4649      	mov	r1, r9
 800821e:	f7f8 f867 	bl	80002f0 <__aeabi_uldivmod>
 8008222:	4602      	mov	r2, r0
 8008224:	460b      	mov	r3, r1
 8008226:	4613      	mov	r3, r2
 8008228:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800822a:	6a3b      	ldr	r3, [r7, #32]
 800822c:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8008230:	d308      	bcc.n	8008244 <UART_SetConfig+0x580>
 8008232:	6a3b      	ldr	r3, [r7, #32]
 8008234:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008238:	d204      	bcs.n	8008244 <UART_SetConfig+0x580>
        {
          huart->Instance->BRR = usartdiv;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	6a3a      	ldr	r2, [r7, #32]
 8008240:	60da      	str	r2, [r3, #12]
 8008242:	e0d3      	b.n	80083ec <UART_SetConfig+0x728>
        }
        else
        {
          ret = HAL_ERROR;
 8008244:	2301      	movs	r3, #1
 8008246:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800824a:	e0cf      	b.n	80083ec <UART_SetConfig+0x728>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800824c:	697b      	ldr	r3, [r7, #20]
 800824e:	69db      	ldr	r3, [r3, #28]
 8008250:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008254:	d173      	bne.n	800833e <UART_SetConfig+0x67a>
  {
    switch (clocksource)
 8008256:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800825a:	2b08      	cmp	r3, #8
 800825c:	d834      	bhi.n	80082c8 <UART_SetConfig+0x604>
 800825e:	a201      	add	r2, pc, #4	@ (adr r2, 8008264 <UART_SetConfig+0x5a0>)
 8008260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008264:	08008289 	.word	0x08008289
 8008268:	08008291 	.word	0x08008291
 800826c:	08008299 	.word	0x08008299
 8008270:	080082c9 	.word	0x080082c9
 8008274:	0800829f 	.word	0x0800829f
 8008278:	080082c9 	.word	0x080082c9
 800827c:	080082c9 	.word	0x080082c9
 8008280:	080082c9 	.word	0x080082c9
 8008284:	080082a7 	.word	0x080082a7
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008288:	f7fd fe0c 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 800828c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800828e:	e021      	b.n	80082d4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008290:	f7fd fe1e 	bl	8005ed0 <HAL_RCC_GetPCLK2Freq>
 8008294:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008296:	e01d      	b.n	80082d4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008298:	4b09      	ldr	r3, [pc, #36]	@ (80082c0 <UART_SetConfig+0x5fc>)
 800829a:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 800829c:	e01a      	b.n	80082d4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800829e:	f7fd fd93 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 80082a2:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80082a4:	e016      	b.n	80082d4 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80082a6:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80082aa:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80082ac:	e012      	b.n	80082d4 <UART_SetConfig+0x610>
 80082ae:	bf00      	nop
 80082b0:	40004800 	.word	0x40004800
 80082b4:	40021000 	.word	0x40021000
 80082b8:	40004c00 	.word	0x40004c00
 80082bc:	40008000 	.word	0x40008000
 80082c0:	00f42400 	.word	0x00f42400
 80082c4:	0800c5c4 	.word	0x0800c5c4
      default:
        pclk = 0U;
 80082c8:	2300      	movs	r3, #0
 80082ca:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80082cc:	2301      	movs	r3, #1
 80082ce:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80082d2:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80082d4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082d6:	2b00      	cmp	r3, #0
 80082d8:	f000 8088 	beq.w	80083ec <UART_SetConfig+0x728>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80082dc:	697b      	ldr	r3, [r7, #20]
 80082de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80082e0:	4a4d      	ldr	r2, [pc, #308]	@ (8008418 <UART_SetConfig+0x754>)
 80082e2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80082e6:	461a      	mov	r2, r3
 80082e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80082ea:	fbb3 f3f2 	udiv	r3, r3, r2
 80082ee:	005a      	lsls	r2, r3, #1
 80082f0:	697b      	ldr	r3, [r7, #20]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	085b      	lsrs	r3, r3, #1
 80082f6:	441a      	add	r2, r3
 80082f8:	697b      	ldr	r3, [r7, #20]
 80082fa:	685b      	ldr	r3, [r3, #4]
 80082fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8008300:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008302:	6a3b      	ldr	r3, [r7, #32]
 8008304:	2b0f      	cmp	r3, #15
 8008306:	d916      	bls.n	8008336 <UART_SetConfig+0x672>
 8008308:	6a3b      	ldr	r3, [r7, #32]
 800830a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800830e:	d212      	bcs.n	8008336 <UART_SetConfig+0x672>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008310:	6a3b      	ldr	r3, [r7, #32]
 8008312:	b29b      	uxth	r3, r3
 8008314:	f023 030f 	bic.w	r3, r3, #15
 8008318:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800831a:	6a3b      	ldr	r3, [r7, #32]
 800831c:	085b      	lsrs	r3, r3, #1
 800831e:	b29b      	uxth	r3, r3
 8008320:	f003 0307 	and.w	r3, r3, #7
 8008324:	b29a      	uxth	r2, r3
 8008326:	8bfb      	ldrh	r3, [r7, #30]
 8008328:	4313      	orrs	r3, r2
 800832a:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800832c:	697b      	ldr	r3, [r7, #20]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	8bfa      	ldrh	r2, [r7, #30]
 8008332:	60da      	str	r2, [r3, #12]
 8008334:	e05a      	b.n	80083ec <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 8008336:	2301      	movs	r3, #1
 8008338:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800833c:	e056      	b.n	80083ec <UART_SetConfig+0x728>
      }
    }
  }
  else
  {
    switch (clocksource)
 800833e:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8008342:	2b08      	cmp	r3, #8
 8008344:	d827      	bhi.n	8008396 <UART_SetConfig+0x6d2>
 8008346:	a201      	add	r2, pc, #4	@ (adr r2, 800834c <UART_SetConfig+0x688>)
 8008348:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800834c:	08008371 	.word	0x08008371
 8008350:	08008379 	.word	0x08008379
 8008354:	08008381 	.word	0x08008381
 8008358:	08008397 	.word	0x08008397
 800835c:	08008387 	.word	0x08008387
 8008360:	08008397 	.word	0x08008397
 8008364:	08008397 	.word	0x08008397
 8008368:	08008397 	.word	0x08008397
 800836c:	0800838f 	.word	0x0800838f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008370:	f7fd fd98 	bl	8005ea4 <HAL_RCC_GetPCLK1Freq>
 8008374:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8008376:	e014      	b.n	80083a2 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008378:	f7fd fdaa 	bl	8005ed0 <HAL_RCC_GetPCLK2Freq>
 800837c:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800837e:	e010      	b.n	80083a2 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008380:	4b26      	ldr	r3, [pc, #152]	@ (800841c <UART_SetConfig+0x758>)
 8008382:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008384:	e00d      	b.n	80083a2 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008386:	f7fd fd1f 	bl	8005dc8 <HAL_RCC_GetSysClockFreq>
 800838a:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800838c:	e009      	b.n	80083a2 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800838e:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8008392:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8008394:	e005      	b.n	80083a2 <UART_SetConfig+0x6de>
      default:
        pclk = 0U;
 8008396:	2300      	movs	r3, #0
 8008398:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 800839a:	2301      	movs	r3, #1
 800839c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80083a0:	bf00      	nop
    }

    if (pclk != 0U)
 80083a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083a4:	2b00      	cmp	r3, #0
 80083a6:	d021      	beq.n	80083ec <UART_SetConfig+0x728>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083a8:	697b      	ldr	r3, [r7, #20]
 80083aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80083ac:	4a1a      	ldr	r2, [pc, #104]	@ (8008418 <UART_SetConfig+0x754>)
 80083ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083b2:	461a      	mov	r2, r3
 80083b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80083b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80083ba:	697b      	ldr	r3, [r7, #20]
 80083bc:	685b      	ldr	r3, [r3, #4]
 80083be:	085b      	lsrs	r3, r3, #1
 80083c0:	441a      	add	r2, r3
 80083c2:	697b      	ldr	r3, [r7, #20]
 80083c4:	685b      	ldr	r3, [r3, #4]
 80083c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80083ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80083cc:	6a3b      	ldr	r3, [r7, #32]
 80083ce:	2b0f      	cmp	r3, #15
 80083d0:	d909      	bls.n	80083e6 <UART_SetConfig+0x722>
 80083d2:	6a3b      	ldr	r3, [r7, #32]
 80083d4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80083d8:	d205      	bcs.n	80083e6 <UART_SetConfig+0x722>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80083da:	6a3b      	ldr	r3, [r7, #32]
 80083dc:	b29a      	uxth	r2, r3
 80083de:	697b      	ldr	r3, [r7, #20]
 80083e0:	681b      	ldr	r3, [r3, #0]
 80083e2:	60da      	str	r2, [r3, #12]
 80083e4:	e002      	b.n	80083ec <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 80083e6:	2301      	movs	r3, #1
 80083e8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80083ec:	697b      	ldr	r3, [r7, #20]
 80083ee:	2201      	movs	r2, #1
 80083f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 80083f4:	697b      	ldr	r3, [r7, #20]
 80083f6:	2201      	movs	r2, #1
 80083f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80083fc:	697b      	ldr	r3, [r7, #20]
 80083fe:	2200      	movs	r2, #0
 8008400:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8008402:	697b      	ldr	r3, [r7, #20]
 8008404:	2200      	movs	r2, #0
 8008406:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8008408:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 800840c:	4618      	mov	r0, r3
 800840e:	3730      	adds	r7, #48	@ 0x30
 8008410:	46bd      	mov	sp, r7
 8008412:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008416:	bf00      	nop
 8008418:	0800c5c4 	.word	0x0800c5c4
 800841c:	00f42400 	.word	0x00f42400

08008420 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008420:	b580      	push	{r7, lr}
 8008422:	b082      	sub	sp, #8
 8008424:	af00      	add	r7, sp, #0
 8008426:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800842c:	2bff      	cmp	r3, #255	@ 0xff
 800842e:	d904      	bls.n	800843a <UART_AdvFeatureConfig+0x1a>
 8008430:	f640 4198 	movw	r1, #3224	@ 0xc98
 8008434:	488e      	ldr	r0, [pc, #568]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 8008436:	f7f8 ff3f 	bl	80012b8 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800843e:	f003 0308 	and.w	r3, r3, #8
 8008442:	2b00      	cmp	r3, #0
 8008444:	d018      	beq.n	8008478 <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800844a:	2b00      	cmp	r3, #0
 800844c:	d009      	beq.n	8008462 <UART_AdvFeatureConfig+0x42>
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008452:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8008456:	d004      	beq.n	8008462 <UART_AdvFeatureConfig+0x42>
 8008458:	f640 419d 	movw	r1, #3229	@ 0xc9d
 800845c:	4884      	ldr	r0, [pc, #528]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 800845e:	f7f8 ff2b 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	681b      	ldr	r3, [r3, #0]
 8008466:	685b      	ldr	r3, [r3, #4]
 8008468:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	430a      	orrs	r2, r1
 8008476:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008478:	687b      	ldr	r3, [r7, #4]
 800847a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b00      	cmp	r3, #0
 8008482:	d018      	beq.n	80084b6 <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008488:	2b00      	cmp	r3, #0
 800848a:	d009      	beq.n	80084a0 <UART_AdvFeatureConfig+0x80>
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008490:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8008494:	d004      	beq.n	80084a0 <UART_AdvFeatureConfig+0x80>
 8008496:	f640 41a4 	movw	r1, #3236	@ 0xca4
 800849a:	4875      	ldr	r0, [pc, #468]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 800849c:	f7f8 ff0c 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	681b      	ldr	r3, [r3, #0]
 80084a4:	685b      	ldr	r3, [r3, #4]
 80084a6:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 80084aa:	687b      	ldr	r3, [r7, #4]
 80084ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	681b      	ldr	r3, [r3, #0]
 80084b2:	430a      	orrs	r2, r1
 80084b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084ba:	f003 0302 	and.w	r3, r3, #2
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d018      	beq.n	80084f4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d009      	beq.n	80084de <UART_AdvFeatureConfig+0xbe>
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80084ce:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80084d2:	d004      	beq.n	80084de <UART_AdvFeatureConfig+0xbe>
 80084d4:	f640 41ab 	movw	r1, #3243	@ 0xcab
 80084d8:	4865      	ldr	r0, [pc, #404]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 80084da:	f7f8 feed 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	685b      	ldr	r3, [r3, #4]
 80084e4:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 80084e8:	687b      	ldr	r3, [r7, #4]
 80084ea:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	430a      	orrs	r2, r1
 80084f2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80084f8:	f003 0304 	and.w	r3, r3, #4
 80084fc:	2b00      	cmp	r3, #0
 80084fe:	d018      	beq.n	8008532 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008504:	2b00      	cmp	r3, #0
 8008506:	d009      	beq.n	800851c <UART_AdvFeatureConfig+0xfc>
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800850c:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8008510:	d004      	beq.n	800851c <UART_AdvFeatureConfig+0xfc>
 8008512:	f640 41b2 	movw	r1, #3250	@ 0xcb2
 8008516:	4856      	ldr	r0, [pc, #344]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 8008518:	f7f8 fece 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800851c:	687b      	ldr	r3, [r7, #4]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	685b      	ldr	r3, [r3, #4]
 8008522:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8008526:	687b      	ldr	r3, [r7, #4]
 8008528:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	430a      	orrs	r2, r1
 8008530:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008532:	687b      	ldr	r3, [r7, #4]
 8008534:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008536:	f003 0310 	and.w	r3, r3, #16
 800853a:	2b00      	cmp	r3, #0
 800853c:	d018      	beq.n	8008570 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 800853e:	687b      	ldr	r3, [r7, #4]
 8008540:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8008542:	2b00      	cmp	r3, #0
 8008544:	d009      	beq.n	800855a <UART_AdvFeatureConfig+0x13a>
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800854a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800854e:	d004      	beq.n	800855a <UART_AdvFeatureConfig+0x13a>
 8008550:	f640 41b9 	movw	r1, #3257	@ 0xcb9
 8008554:	4846      	ldr	r0, [pc, #280]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 8008556:	f7f8 feaf 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	681b      	ldr	r3, [r3, #0]
 800855e:	689b      	ldr	r3, [r3, #8]
 8008560:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8008564:	687b      	ldr	r3, [r7, #4]
 8008566:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	681b      	ldr	r3, [r3, #0]
 800856c:	430a      	orrs	r2, r1
 800856e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008574:	f003 0320 	and.w	r3, r3, #32
 8008578:	2b00      	cmp	r3, #0
 800857a:	d018      	beq.n	80085ae <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 800857c:	687b      	ldr	r3, [r7, #4]
 800857e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008580:	2b00      	cmp	r3, #0
 8008582:	d009      	beq.n	8008598 <UART_AdvFeatureConfig+0x178>
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008588:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800858c:	d004      	beq.n	8008598 <UART_AdvFeatureConfig+0x178>
 800858e:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8008592:	4837      	ldr	r0, [pc, #220]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 8008594:	f7f8 fe90 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008598:	687b      	ldr	r3, [r7, #4]
 800859a:	681b      	ldr	r3, [r3, #0]
 800859c:	689b      	ldr	r3, [r3, #8]
 800859e:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 80085a2:	687b      	ldr	r3, [r7, #4]
 80085a4:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	430a      	orrs	r2, r1
 80085ac:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80085ae:	687b      	ldr	r3, [r7, #4]
 80085b0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80085b2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80085b6:	2b00      	cmp	r3, #0
 80085b8:	d064      	beq.n	8008684 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 80085ba:	687b      	ldr	r3, [r7, #4]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	4a2d      	ldr	r2, [pc, #180]	@ (8008674 <UART_AdvFeatureConfig+0x254>)
 80085c0:	4293      	cmp	r3, r2
 80085c2:	d013      	beq.n	80085ec <UART_AdvFeatureConfig+0x1cc>
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	681b      	ldr	r3, [r3, #0]
 80085c8:	4a2b      	ldr	r2, [pc, #172]	@ (8008678 <UART_AdvFeatureConfig+0x258>)
 80085ca:	4293      	cmp	r3, r2
 80085cc:	d00e      	beq.n	80085ec <UART_AdvFeatureConfig+0x1cc>
 80085ce:	687b      	ldr	r3, [r7, #4]
 80085d0:	681b      	ldr	r3, [r3, #0]
 80085d2:	4a2a      	ldr	r2, [pc, #168]	@ (800867c <UART_AdvFeatureConfig+0x25c>)
 80085d4:	4293      	cmp	r3, r2
 80085d6:	d009      	beq.n	80085ec <UART_AdvFeatureConfig+0x1cc>
 80085d8:	687b      	ldr	r3, [r7, #4]
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a28      	ldr	r2, [pc, #160]	@ (8008680 <UART_AdvFeatureConfig+0x260>)
 80085de:	4293      	cmp	r3, r2
 80085e0:	d004      	beq.n	80085ec <UART_AdvFeatureConfig+0x1cc>
 80085e2:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 80085e6:	4822      	ldr	r0, [pc, #136]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 80085e8:	f7f8 fe66 	bl	80012b8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d009      	beq.n	8008608 <UART_AdvFeatureConfig+0x1e8>
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80085f8:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 80085fc:	d004      	beq.n	8008608 <UART_AdvFeatureConfig+0x1e8>
 80085fe:	f640 41c8 	movw	r1, #3272	@ 0xcc8
 8008602:	481b      	ldr	r0, [pc, #108]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 8008604:	f7f8 fe58 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	685b      	ldr	r3, [r3, #4]
 800860e:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8008612:	687b      	ldr	r3, [r7, #4]
 8008614:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	430a      	orrs	r2, r1
 800861c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800861e:	687b      	ldr	r3, [r7, #4]
 8008620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8008622:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8008626:	d12d      	bne.n	8008684 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800862c:	2b00      	cmp	r3, #0
 800862e:	d013      	beq.n	8008658 <UART_AdvFeatureConfig+0x238>
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008634:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8008638:	d00e      	beq.n	8008658 <UART_AdvFeatureConfig+0x238>
 800863a:	687b      	ldr	r3, [r7, #4]
 800863c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800863e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8008642:	d009      	beq.n	8008658 <UART_AdvFeatureConfig+0x238>
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8008648:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 800864c:	d004      	beq.n	8008658 <UART_AdvFeatureConfig+0x238>
 800864e:	f640 41cd 	movw	r1, #3277	@ 0xccd
 8008652:	4807      	ldr	r0, [pc, #28]	@ (8008670 <UART_AdvFeatureConfig+0x250>)
 8008654:	f7f8 fe30 	bl	80012b8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008658:	687b      	ldr	r3, [r7, #4]
 800865a:	681b      	ldr	r3, [r3, #0]
 800865c:	685b      	ldr	r3, [r3, #4]
 800865e:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	430a      	orrs	r2, r1
 800866c:	605a      	str	r2, [r3, #4]
 800866e:	e009      	b.n	8008684 <UART_AdvFeatureConfig+0x264>
 8008670:	0800c478 	.word	0x0800c478
 8008674:	40013800 	.word	0x40013800
 8008678:	40004400 	.word	0x40004400
 800867c:	40004800 	.word	0x40004800
 8008680:	40004c00 	.word	0x40004c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008688:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800868c:	2b00      	cmp	r3, #0
 800868e:	d018      	beq.n	80086c2 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8008690:	687b      	ldr	r3, [r7, #4]
 8008692:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8008694:	2b00      	cmp	r3, #0
 8008696:	d009      	beq.n	80086ac <UART_AdvFeatureConfig+0x28c>
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800869c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80086a0:	d004      	beq.n	80086ac <UART_AdvFeatureConfig+0x28c>
 80086a2:	f640 41d5 	movw	r1, #3285	@ 0xcd5
 80086a6:	4809      	ldr	r0, [pc, #36]	@ (80086cc <UART_AdvFeatureConfig+0x2ac>)
 80086a8:	f7f8 fe06 	bl	80012b8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	685b      	ldr	r3, [r3, #4]
 80086b2:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 80086b6:	687b      	ldr	r3, [r7, #4]
 80086b8:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80086ba:	687b      	ldr	r3, [r7, #4]
 80086bc:	681b      	ldr	r3, [r3, #0]
 80086be:	430a      	orrs	r2, r1
 80086c0:	605a      	str	r2, [r3, #4]
  }
}
 80086c2:	bf00      	nop
 80086c4:	3708      	adds	r7, #8
 80086c6:	46bd      	mov	sp, r7
 80086c8:	bd80      	pop	{r7, pc}
 80086ca:	bf00      	nop
 80086cc:	0800c478 	.word	0x0800c478

080086d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b098      	sub	sp, #96	@ 0x60
 80086d4:	af02      	add	r7, sp, #8
 80086d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086d8:	687b      	ldr	r3, [r7, #4]
 80086da:	2200      	movs	r2, #0
 80086dc:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80086e0:	f7f9 f90a 	bl	80018f8 <HAL_GetTick>
 80086e4:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80086e6:	687b      	ldr	r3, [r7, #4]
 80086e8:	681b      	ldr	r3, [r3, #0]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	f003 0308 	and.w	r3, r3, #8
 80086f0:	2b08      	cmp	r3, #8
 80086f2:	d12f      	bne.n	8008754 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80086f4:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 80086f8:	9300      	str	r3, [sp, #0]
 80086fa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80086fc:	2200      	movs	r2, #0
 80086fe:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8008702:	6878      	ldr	r0, [r7, #4]
 8008704:	f000 f88e 	bl	8008824 <UART_WaitOnFlagUntilTimeout>
 8008708:	4603      	mov	r3, r0
 800870a:	2b00      	cmp	r3, #0
 800870c:	d022      	beq.n	8008754 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008714:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008716:	e853 3f00 	ldrex	r3, [r3]
 800871a:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800871c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800871e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8008722:	653b      	str	r3, [r7, #80]	@ 0x50
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	461a      	mov	r2, r3
 800872a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800872c:	647b      	str	r3, [r7, #68]	@ 0x44
 800872e:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008730:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008732:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008734:	e841 2300 	strex	r3, r2, [r1]
 8008738:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 800873a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800873c:	2b00      	cmp	r3, #0
 800873e:	d1e6      	bne.n	800870e <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	2220      	movs	r2, #32
 8008744:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	2200      	movs	r2, #0
 800874c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008750:	2303      	movs	r3, #3
 8008752:	e063      	b.n	800881c <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	681b      	ldr	r3, [r3, #0]
 800875a:	f003 0304 	and.w	r3, r3, #4
 800875e:	2b04      	cmp	r3, #4
 8008760:	d149      	bne.n	80087f6 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008762:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8008766:	9300      	str	r3, [sp, #0]
 8008768:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 800876a:	2200      	movs	r2, #0
 800876c:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8008770:	6878      	ldr	r0, [r7, #4]
 8008772:	f000 f857 	bl	8008824 <UART_WaitOnFlagUntilTimeout>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d03c      	beq.n	80087f6 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008782:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008784:	e853 3f00 	ldrex	r3, [r3]
 8008788:	623b      	str	r3, [r7, #32]
   return(result);
 800878a:	6a3b      	ldr	r3, [r7, #32]
 800878c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008790:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	461a      	mov	r2, r3
 8008798:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800879a:	633b      	str	r3, [r7, #48]	@ 0x30
 800879c:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800879e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80087a0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80087a2:	e841 2300 	strex	r3, r2, [r1]
 80087a6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80087a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80087aa:	2b00      	cmp	r3, #0
 80087ac:	d1e6      	bne.n	800877c <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ae:	687b      	ldr	r3, [r7, #4]
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	3308      	adds	r3, #8
 80087b4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80087b6:	693b      	ldr	r3, [r7, #16]
 80087b8:	e853 3f00 	ldrex	r3, [r3]
 80087bc:	60fb      	str	r3, [r7, #12]
   return(result);
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	f023 0301 	bic.w	r3, r3, #1
 80087c4:	64bb      	str	r3, [r7, #72]	@ 0x48
 80087c6:	687b      	ldr	r3, [r7, #4]
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	3308      	adds	r3, #8
 80087cc:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80087ce:	61fa      	str	r2, [r7, #28]
 80087d0:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80087d2:	69b9      	ldr	r1, [r7, #24]
 80087d4:	69fa      	ldr	r2, [r7, #28]
 80087d6:	e841 2300 	strex	r3, r2, [r1]
 80087da:	617b      	str	r3, [r7, #20]
   return(result);
 80087dc:	697b      	ldr	r3, [r7, #20]
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d1e5      	bne.n	80087ae <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 80087e2:	687b      	ldr	r3, [r7, #4]
 80087e4:	2220      	movs	r2, #32
 80087e6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 80087ea:	687b      	ldr	r3, [r7, #4]
 80087ec:	2200      	movs	r2, #0
 80087ee:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087f2:	2303      	movs	r3, #3
 80087f4:	e012      	b.n	800881c <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087f6:	687b      	ldr	r3, [r7, #4]
 80087f8:	2220      	movs	r2, #32
 80087fa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 80087fe:	687b      	ldr	r3, [r7, #4]
 8008800:	2220      	movs	r2, #32
 8008802:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008806:	687b      	ldr	r3, [r7, #4]
 8008808:	2200      	movs	r2, #0
 800880a:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800880c:	687b      	ldr	r3, [r7, #4]
 800880e:	2200      	movs	r2, #0
 8008810:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	2200      	movs	r2, #0
 8008816:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 800881a:	2300      	movs	r3, #0
}
 800881c:	4618      	mov	r0, r3
 800881e:	3758      	adds	r7, #88	@ 0x58
 8008820:	46bd      	mov	sp, r7
 8008822:	bd80      	pop	{r7, pc}

08008824 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008824:	b580      	push	{r7, lr}
 8008826:	b084      	sub	sp, #16
 8008828:	af00      	add	r7, sp, #0
 800882a:	60f8      	str	r0, [r7, #12]
 800882c:	60b9      	str	r1, [r7, #8]
 800882e:	603b      	str	r3, [r7, #0]
 8008830:	4613      	mov	r3, r2
 8008832:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008834:	e04f      	b.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008836:	69bb      	ldr	r3, [r7, #24]
 8008838:	f1b3 3fff 	cmp.w	r3, #4294967295
 800883c:	d04b      	beq.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800883e:	f7f9 f85b 	bl	80018f8 <HAL_GetTick>
 8008842:	4602      	mov	r2, r0
 8008844:	683b      	ldr	r3, [r7, #0]
 8008846:	1ad3      	subs	r3, r2, r3
 8008848:	69ba      	ldr	r2, [r7, #24]
 800884a:	429a      	cmp	r2, r3
 800884c:	d302      	bcc.n	8008854 <UART_WaitOnFlagUntilTimeout+0x30>
 800884e:	69bb      	ldr	r3, [r7, #24]
 8008850:	2b00      	cmp	r3, #0
 8008852:	d101      	bne.n	8008858 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8008854:	2303      	movs	r3, #3
 8008856:	e04e      	b.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8008858:	68fb      	ldr	r3, [r7, #12]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	681b      	ldr	r3, [r3, #0]
 800885e:	f003 0304 	and.w	r3, r3, #4
 8008862:	2b00      	cmp	r3, #0
 8008864:	d037      	beq.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 8008866:	68bb      	ldr	r3, [r7, #8]
 8008868:	2b80      	cmp	r3, #128	@ 0x80
 800886a:	d034      	beq.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xb2>
 800886c:	68bb      	ldr	r3, [r7, #8]
 800886e:	2b40      	cmp	r3, #64	@ 0x40
 8008870:	d031      	beq.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8008872:	68fb      	ldr	r3, [r7, #12]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	69db      	ldr	r3, [r3, #28]
 8008878:	f003 0308 	and.w	r3, r3, #8
 800887c:	2b08      	cmp	r3, #8
 800887e:	d110      	bne.n	80088a2 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	2208      	movs	r2, #8
 8008886:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8008888:	68f8      	ldr	r0, [r7, #12]
 800888a:	f000 f95b 	bl	8008b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800888e:	68fb      	ldr	r3, [r7, #12]
 8008890:	2208      	movs	r2, #8
 8008892:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2200      	movs	r2, #0
 800889a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 800889e:	2301      	movs	r3, #1
 80088a0:	e029      	b.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	69db      	ldr	r3, [r3, #28]
 80088a8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80088ac:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80088b0:	d111      	bne.n	80088d6 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80088ba:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80088bc:	68f8      	ldr	r0, [r7, #12]
 80088be:	f000 f941 	bl	8008b44 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80088c2:	68fb      	ldr	r3, [r7, #12]
 80088c4:	2220      	movs	r2, #32
 80088c6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80088ca:	68fb      	ldr	r3, [r7, #12]
 80088cc:	2200      	movs	r2, #0
 80088ce:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 80088d2:	2303      	movs	r3, #3
 80088d4:	e00f      	b.n	80088f6 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80088d6:	68fb      	ldr	r3, [r7, #12]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	69da      	ldr	r2, [r3, #28]
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4013      	ands	r3, r2
 80088e0:	68ba      	ldr	r2, [r7, #8]
 80088e2:	429a      	cmp	r2, r3
 80088e4:	bf0c      	ite	eq
 80088e6:	2301      	moveq	r3, #1
 80088e8:	2300      	movne	r3, #0
 80088ea:	b2db      	uxtb	r3, r3
 80088ec:	461a      	mov	r2, r3
 80088ee:	79fb      	ldrb	r3, [r7, #7]
 80088f0:	429a      	cmp	r2, r3
 80088f2:	d0a0      	beq.n	8008836 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80088f4:	2300      	movs	r3, #0
}
 80088f6:	4618      	mov	r0, r3
 80088f8:	3710      	adds	r7, #16
 80088fa:	46bd      	mov	sp, r7
 80088fc:	bd80      	pop	{r7, pc}
	...

08008900 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008900:	b480      	push	{r7}
 8008902:	b0a3      	sub	sp, #140	@ 0x8c
 8008904:	af00      	add	r7, sp, #0
 8008906:	60f8      	str	r0, [r7, #12]
 8008908:	60b9      	str	r1, [r7, #8]
 800890a:	4613      	mov	r3, r2
 800890c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800890e:	68fb      	ldr	r3, [r7, #12]
 8008910:	68ba      	ldr	r2, [r7, #8]
 8008912:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	88fa      	ldrh	r2, [r7, #6]
 8008918:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 800891c:	68fb      	ldr	r3, [r7, #12]
 800891e:	88fa      	ldrh	r2, [r7, #6]
 8008920:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	2200      	movs	r2, #0
 8008928:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800892a:	68fb      	ldr	r3, [r7, #12]
 800892c:	689b      	ldr	r3, [r3, #8]
 800892e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008932:	d10e      	bne.n	8008952 <UART_Start_Receive_IT+0x52>
 8008934:	68fb      	ldr	r3, [r7, #12]
 8008936:	691b      	ldr	r3, [r3, #16]
 8008938:	2b00      	cmp	r3, #0
 800893a:	d105      	bne.n	8008948 <UART_Start_Receive_IT+0x48>
 800893c:	68fb      	ldr	r3, [r7, #12]
 800893e:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8008942:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008946:	e02d      	b.n	80089a4 <UART_Start_Receive_IT+0xa4>
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	22ff      	movs	r2, #255	@ 0xff
 800894c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008950:	e028      	b.n	80089a4 <UART_Start_Receive_IT+0xa4>
 8008952:	68fb      	ldr	r3, [r7, #12]
 8008954:	689b      	ldr	r3, [r3, #8]
 8008956:	2b00      	cmp	r3, #0
 8008958:	d10d      	bne.n	8008976 <UART_Start_Receive_IT+0x76>
 800895a:	68fb      	ldr	r3, [r7, #12]
 800895c:	691b      	ldr	r3, [r3, #16]
 800895e:	2b00      	cmp	r3, #0
 8008960:	d104      	bne.n	800896c <UART_Start_Receive_IT+0x6c>
 8008962:	68fb      	ldr	r3, [r7, #12]
 8008964:	22ff      	movs	r2, #255	@ 0xff
 8008966:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800896a:	e01b      	b.n	80089a4 <UART_Start_Receive_IT+0xa4>
 800896c:	68fb      	ldr	r3, [r7, #12]
 800896e:	227f      	movs	r2, #127	@ 0x7f
 8008970:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008974:	e016      	b.n	80089a4 <UART_Start_Receive_IT+0xa4>
 8008976:	68fb      	ldr	r3, [r7, #12]
 8008978:	689b      	ldr	r3, [r3, #8]
 800897a:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800897e:	d10d      	bne.n	800899c <UART_Start_Receive_IT+0x9c>
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	691b      	ldr	r3, [r3, #16]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d104      	bne.n	8008992 <UART_Start_Receive_IT+0x92>
 8008988:	68fb      	ldr	r3, [r7, #12]
 800898a:	227f      	movs	r2, #127	@ 0x7f
 800898c:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8008990:	e008      	b.n	80089a4 <UART_Start_Receive_IT+0xa4>
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	223f      	movs	r2, #63	@ 0x3f
 8008996:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800899a:	e003      	b.n	80089a4 <UART_Start_Receive_IT+0xa4>
 800899c:	68fb      	ldr	r3, [r7, #12]
 800899e:	2200      	movs	r2, #0
 80089a0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	2200      	movs	r2, #0
 80089a8:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	2222      	movs	r2, #34	@ 0x22
 80089b0:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	681b      	ldr	r3, [r3, #0]
 80089b8:	3308      	adds	r3, #8
 80089ba:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089bc:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80089be:	e853 3f00 	ldrex	r3, [r3]
 80089c2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80089c4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80089c6:	f043 0301 	orr.w	r3, r3, #1
 80089ca:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	681b      	ldr	r3, [r3, #0]
 80089d2:	3308      	adds	r3, #8
 80089d4:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80089d8:	673a      	str	r2, [r7, #112]	@ 0x70
 80089da:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80089dc:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80089de:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80089e0:	e841 2300 	strex	r3, r2, [r1]
 80089e4:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80089e6:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80089e8:	2b00      	cmp	r3, #0
 80089ea:	d1e3      	bne.n	80089b4 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80089ec:	68fb      	ldr	r3, [r7, #12]
 80089ee:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80089f0:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80089f4:	d14f      	bne.n	8008a96 <UART_Start_Receive_IT+0x196>
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80089fc:	88fa      	ldrh	r2, [r7, #6]
 80089fe:	429a      	cmp	r2, r3
 8008a00:	d349      	bcc.n	8008a96 <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	689b      	ldr	r3, [r3, #8]
 8008a06:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a0a:	d107      	bne.n	8008a1c <UART_Start_Receive_IT+0x11c>
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	691b      	ldr	r3, [r3, #16]
 8008a10:	2b00      	cmp	r3, #0
 8008a12:	d103      	bne.n	8008a1c <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008a14:	68fb      	ldr	r3, [r7, #12]
 8008a16:	4a47      	ldr	r2, [pc, #284]	@ (8008b34 <UART_Start_Receive_IT+0x234>)
 8008a18:	675a      	str	r2, [r3, #116]	@ 0x74
 8008a1a:	e002      	b.n	8008a22 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	4a46      	ldr	r2, [pc, #280]	@ (8008b38 <UART_Start_Receive_IT+0x238>)
 8008a20:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	691b      	ldr	r3, [r3, #16]
 8008a26:	2b00      	cmp	r3, #0
 8008a28:	d01a      	beq.n	8008a60 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	681b      	ldr	r3, [r3, #0]
 8008a2e:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a30:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008a32:	e853 3f00 	ldrex	r3, [r3]
 8008a36:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008a38:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008a3a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8008a3e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	461a      	mov	r2, r3
 8008a48:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8008a4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008a4e:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a50:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8008a52:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8008a54:	e841 2300 	strex	r3, r2, [r1]
 8008a58:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 8008a5a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d1e4      	bne.n	8008a2a <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008a60:	68fb      	ldr	r3, [r7, #12]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	3308      	adds	r3, #8
 8008a66:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a68:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008a6a:	e853 3f00 	ldrex	r3, [r3]
 8008a6e:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008a70:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008a72:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8008a76:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8008a78:	68fb      	ldr	r3, [r7, #12]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	3308      	adds	r3, #8
 8008a7e:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8008a80:	64ba      	str	r2, [r7, #72]	@ 0x48
 8008a82:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a84:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 8008a86:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008a88:	e841 2300 	strex	r3, r2, [r1]
 8008a8c:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8008a8e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8008a90:	2b00      	cmp	r3, #0
 8008a92:	d1e5      	bne.n	8008a60 <UART_Start_Receive_IT+0x160>
 8008a94:	e046      	b.n	8008b24 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	689b      	ldr	r3, [r3, #8]
 8008a9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8008a9e:	d107      	bne.n	8008ab0 <UART_Start_Receive_IT+0x1b0>
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	691b      	ldr	r3, [r3, #16]
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d103      	bne.n	8008ab0 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	4a24      	ldr	r2, [pc, #144]	@ (8008b3c <UART_Start_Receive_IT+0x23c>)
 8008aac:	675a      	str	r2, [r3, #116]	@ 0x74
 8008aae:	e002      	b.n	8008ab6 <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	4a23      	ldr	r2, [pc, #140]	@ (8008b40 <UART_Start_Receive_IT+0x240>)
 8008ab4:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008ab6:	68fb      	ldr	r3, [r7, #12]
 8008ab8:	691b      	ldr	r3, [r3, #16]
 8008aba:	2b00      	cmp	r3, #0
 8008abc:	d019      	beq.n	8008af2 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008abe:	68fb      	ldr	r3, [r7, #12]
 8008ac0:	681b      	ldr	r3, [r3, #0]
 8008ac2:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008ac6:	e853 3f00 	ldrex	r3, [r3]
 8008aca:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008acc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008ace:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8008ad2:	677b      	str	r3, [r7, #116]	@ 0x74
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	461a      	mov	r2, r3
 8008ada:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8008adc:	637b      	str	r3, [r7, #52]	@ 0x34
 8008ade:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae0:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8008ae2:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8008ae4:	e841 2300 	strex	r3, r2, [r1]
 8008ae8:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 8008aea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008aec:	2b00      	cmp	r3, #0
 8008aee:	d1e6      	bne.n	8008abe <UART_Start_Receive_IT+0x1be>
 8008af0:	e018      	b.n	8008b24 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008af2:	68fb      	ldr	r3, [r7, #12]
 8008af4:	681b      	ldr	r3, [r3, #0]
 8008af6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	e853 3f00 	ldrex	r3, [r3]
 8008afe:	613b      	str	r3, [r7, #16]
   return(result);
 8008b00:	693b      	ldr	r3, [r7, #16]
 8008b02:	f043 0320 	orr.w	r3, r3, #32
 8008b06:	67bb      	str	r3, [r7, #120]	@ 0x78
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	461a      	mov	r2, r3
 8008b0e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8008b10:	623b      	str	r3, [r7, #32]
 8008b12:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b14:	69f9      	ldr	r1, [r7, #28]
 8008b16:	6a3a      	ldr	r2, [r7, #32]
 8008b18:	e841 2300 	strex	r3, r2, [r1]
 8008b1c:	61bb      	str	r3, [r7, #24]
   return(result);
 8008b1e:	69bb      	ldr	r3, [r7, #24]
 8008b20:	2b00      	cmp	r3, #0
 8008b22:	d1e6      	bne.n	8008af2 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8008b24:	2300      	movs	r3, #0
}
 8008b26:	4618      	mov	r0, r3
 8008b28:	378c      	adds	r7, #140	@ 0x8c
 8008b2a:	46bd      	mov	sp, r7
 8008b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b30:	4770      	bx	lr
 8008b32:	bf00      	nop
 8008b34:	08009365 	.word	0x08009365
 8008b38:	08009005 	.word	0x08009005
 8008b3c:	08008e4d 	.word	0x08008e4d
 8008b40:	08008c95 	.word	0x08008c95

08008b44 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b44:	b480      	push	{r7}
 8008b46:	b095      	sub	sp, #84	@ 0x54
 8008b48:	af00      	add	r7, sp, #0
 8008b4a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b52:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008b54:	e853 3f00 	ldrex	r3, [r3]
 8008b58:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008b5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008b5c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008b60:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	681b      	ldr	r3, [r3, #0]
 8008b66:	461a      	mov	r2, r3
 8008b68:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008b6a:	643b      	str	r3, [r7, #64]	@ 0x40
 8008b6c:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b6e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008b70:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008b72:	e841 2300 	strex	r3, r2, [r1]
 8008b76:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008b78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008b7a:	2b00      	cmp	r3, #0
 8008b7c:	d1e6      	bne.n	8008b4c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008b7e:	687b      	ldr	r3, [r7, #4]
 8008b80:	681b      	ldr	r3, [r3, #0]
 8008b82:	3308      	adds	r3, #8
 8008b84:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b86:	6a3b      	ldr	r3, [r7, #32]
 8008b88:	e853 3f00 	ldrex	r3, [r3]
 8008b8c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008b8e:	69fb      	ldr	r3, [r7, #28]
 8008b90:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8008b94:	f023 0301 	bic.w	r3, r3, #1
 8008b98:	64bb      	str	r3, [r7, #72]	@ 0x48
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	3308      	adds	r3, #8
 8008ba0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8008ba2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8008ba4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ba6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008ba8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008baa:	e841 2300 	strex	r3, r2, [r1]
 8008bae:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008bb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008bb2:	2b00      	cmp	r3, #0
 8008bb4:	d1e3      	bne.n	8008b7e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d118      	bne.n	8008bf0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bbe:	687b      	ldr	r3, [r7, #4]
 8008bc0:	681b      	ldr	r3, [r3, #0]
 8008bc2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	e853 3f00 	ldrex	r3, [r3]
 8008bca:	60bb      	str	r3, [r7, #8]
   return(result);
 8008bcc:	68bb      	ldr	r3, [r7, #8]
 8008bce:	f023 0310 	bic.w	r3, r3, #16
 8008bd2:	647b      	str	r3, [r7, #68]	@ 0x44
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	461a      	mov	r2, r3
 8008bda:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008bdc:	61bb      	str	r3, [r7, #24]
 8008bde:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008be0:	6979      	ldr	r1, [r7, #20]
 8008be2:	69ba      	ldr	r2, [r7, #24]
 8008be4:	e841 2300 	strex	r3, r2, [r1]
 8008be8:	613b      	str	r3, [r7, #16]
   return(result);
 8008bea:	693b      	ldr	r3, [r7, #16]
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	d1e6      	bne.n	8008bbe <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bf0:	687b      	ldr	r3, [r7, #4]
 8008bf2:	2220      	movs	r2, #32
 8008bf4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	2200      	movs	r2, #0
 8008bfc:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	2200      	movs	r2, #0
 8008c02:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8008c04:	bf00      	nop
 8008c06:	3754      	adds	r7, #84	@ 0x54
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008c10:	b580      	push	{r7, lr}
 8008c12:	b084      	sub	sp, #16
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008c18:	687b      	ldr	r3, [r7, #4]
 8008c1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008c1c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	2200      	movs	r2, #0
 8008c22:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	2200      	movs	r2, #0
 8008c2a:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008c2e:	68f8      	ldr	r0, [r7, #12]
 8008c30:	f7ff f832 	bl	8007c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c34:	bf00      	nop
 8008c36:	3710      	adds	r7, #16
 8008c38:	46bd      	mov	sp, r7
 8008c3a:	bd80      	pop	{r7, pc}

08008c3c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c3c:	b580      	push	{r7, lr}
 8008c3e:	b088      	sub	sp, #32
 8008c40:	af00      	add	r7, sp, #0
 8008c42:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	681b      	ldr	r3, [r3, #0]
 8008c48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	e853 3f00 	ldrex	r3, [r3]
 8008c50:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c52:	68bb      	ldr	r3, [r7, #8]
 8008c54:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8008c58:	61fb      	str	r3, [r7, #28]
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	681b      	ldr	r3, [r3, #0]
 8008c5e:	461a      	mov	r2, r3
 8008c60:	69fb      	ldr	r3, [r7, #28]
 8008c62:	61bb      	str	r3, [r7, #24]
 8008c64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c66:	6979      	ldr	r1, [r7, #20]
 8008c68:	69ba      	ldr	r2, [r7, #24]
 8008c6a:	e841 2300 	strex	r3, r2, [r1]
 8008c6e:	613b      	str	r3, [r7, #16]
   return(result);
 8008c70:	693b      	ldr	r3, [r7, #16]
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1e6      	bne.n	8008c44 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c76:	687b      	ldr	r3, [r7, #4]
 8008c78:	2220      	movs	r2, #32
 8008c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	2200      	movs	r2, #0
 8008c82:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008c84:	6878      	ldr	r0, [r7, #4]
 8008c86:	f7fe fffd 	bl	8007c84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008c8a:	bf00      	nop
 8008c8c:	3720      	adds	r7, #32
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	bd80      	pop	{r7, pc}
	...

08008c94 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b09c      	sub	sp, #112	@ 0x70
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008c9c:	687b      	ldr	r3, [r7, #4]
 8008c9e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008ca2:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ca6:	687b      	ldr	r3, [r7, #4]
 8008ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008cac:	2b22      	cmp	r3, #34	@ 0x22
 8008cae:	f040 80be 	bne.w	8008e2e <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008cb8:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008cbc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8008cc0:	b2d9      	uxtb	r1, r3
 8008cc2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008cc6:	b2da      	uxtb	r2, r3
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008ccc:	400a      	ands	r2, r1
 8008cce:	b2d2      	uxtb	r2, r2
 8008cd0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008cd6:	1c5a      	adds	r2, r3, #1
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	3b01      	subs	r3, #1
 8008ce6:	b29a      	uxth	r2, r3
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008cf4:	b29b      	uxth	r3, r3
 8008cf6:	2b00      	cmp	r3, #0
 8008cf8:	f040 80a1 	bne.w	8008e3e <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d02:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008d04:	e853 3f00 	ldrex	r3, [r3]
 8008d08:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8008d0a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008d0c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008d10:	66bb      	str	r3, [r7, #104]	@ 0x68
 8008d12:	687b      	ldr	r3, [r7, #4]
 8008d14:	681b      	ldr	r3, [r3, #0]
 8008d16:	461a      	mov	r2, r3
 8008d18:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008d1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008d1c:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d1e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8008d20:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8008d22:	e841 2300 	strex	r3, r2, [r1]
 8008d26:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8008d28:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d1e6      	bne.n	8008cfc <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	3308      	adds	r3, #8
 8008d34:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d36:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008d38:	e853 3f00 	ldrex	r3, [r3]
 8008d3c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8008d3e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008d40:	f023 0301 	bic.w	r3, r3, #1
 8008d44:	667b      	str	r3, [r7, #100]	@ 0x64
 8008d46:	687b      	ldr	r3, [r7, #4]
 8008d48:	681b      	ldr	r3, [r3, #0]
 8008d4a:	3308      	adds	r3, #8
 8008d4c:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8008d4e:	647a      	str	r2, [r7, #68]	@ 0x44
 8008d50:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d52:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8008d54:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8008d56:	e841 2300 	strex	r3, r2, [r1]
 8008d5a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8008d5c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8008d5e:	2b00      	cmp	r3, #0
 8008d60:	d1e5      	bne.n	8008d2e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008d62:	687b      	ldr	r3, [r7, #4]
 8008d64:	2220      	movs	r2, #32
 8008d66:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	2200      	movs	r2, #0
 8008d74:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	4a33      	ldr	r2, [pc, #204]	@ (8008e48 <UART_RxISR_8BIT+0x1b4>)
 8008d7c:	4293      	cmp	r3, r2
 8008d7e:	d01f      	beq.n	8008dc0 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008d80:	687b      	ldr	r3, [r7, #4]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d018      	beq.n	8008dc0 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008d96:	e853 3f00 	ldrex	r3, [r3]
 8008d9a:	623b      	str	r3, [r7, #32]
   return(result);
 8008d9c:	6a3b      	ldr	r3, [r7, #32]
 8008d9e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008da2:	663b      	str	r3, [r7, #96]	@ 0x60
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	681b      	ldr	r3, [r3, #0]
 8008da8:	461a      	mov	r2, r3
 8008daa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8008dac:	633b      	str	r3, [r7, #48]	@ 0x30
 8008dae:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008db0:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8008db2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008db4:	e841 2300 	strex	r3, r2, [r1]
 8008db8:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8008dba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8008dbc:	2b00      	cmp	r3, #0
 8008dbe:	d1e6      	bne.n	8008d8e <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008dc0:	687b      	ldr	r3, [r7, #4]
 8008dc2:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008dc4:	2b01      	cmp	r3, #1
 8008dc6:	d12e      	bne.n	8008e26 <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	2200      	movs	r2, #0
 8008dcc:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008dce:	687b      	ldr	r3, [r7, #4]
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd4:	693b      	ldr	r3, [r7, #16]
 8008dd6:	e853 3f00 	ldrex	r3, [r3]
 8008dda:	60fb      	str	r3, [r7, #12]
   return(result);
 8008ddc:	68fb      	ldr	r3, [r7, #12]
 8008dde:	f023 0310 	bic.w	r3, r3, #16
 8008de2:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008de4:	687b      	ldr	r3, [r7, #4]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	461a      	mov	r2, r3
 8008dea:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008dec:	61fb      	str	r3, [r7, #28]
 8008dee:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008df0:	69b9      	ldr	r1, [r7, #24]
 8008df2:	69fa      	ldr	r2, [r7, #28]
 8008df4:	e841 2300 	strex	r3, r2, [r1]
 8008df8:	617b      	str	r3, [r7, #20]
   return(result);
 8008dfa:	697b      	ldr	r3, [r7, #20]
 8008dfc:	2b00      	cmp	r3, #0
 8008dfe:	d1e6      	bne.n	8008dce <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	681b      	ldr	r3, [r3, #0]
 8008e04:	69db      	ldr	r3, [r3, #28]
 8008e06:	f003 0310 	and.w	r3, r3, #16
 8008e0a:	2b10      	cmp	r3, #16
 8008e0c:	d103      	bne.n	8008e16 <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	681b      	ldr	r3, [r3, #0]
 8008e12:	2210      	movs	r2, #16
 8008e14:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e16:	687b      	ldr	r3, [r7, #4]
 8008e18:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008e1c:	4619      	mov	r1, r3
 8008e1e:	6878      	ldr	r0, [r7, #4]
 8008e20:	f7fe ff44 	bl	8007cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e24:	e00b      	b.n	8008e3e <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008e26:	6878      	ldr	r0, [r7, #4]
 8008e28:	f7f7 fc0c 	bl	8000644 <HAL_UART_RxCpltCallback>
}
 8008e2c:	e007      	b.n	8008e3e <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	699a      	ldr	r2, [r3, #24]
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	681b      	ldr	r3, [r3, #0]
 8008e38:	f042 0208 	orr.w	r2, r2, #8
 8008e3c:	619a      	str	r2, [r3, #24]
}
 8008e3e:	bf00      	nop
 8008e40:	3770      	adds	r7, #112	@ 0x70
 8008e42:	46bd      	mov	sp, r7
 8008e44:	bd80      	pop	{r7, pc}
 8008e46:	bf00      	nop
 8008e48:	40008000 	.word	0x40008000

08008e4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e4c:	b580      	push	{r7, lr}
 8008e4e:	b09c      	sub	sp, #112	@ 0x70
 8008e50:	af00      	add	r7, sp, #0
 8008e52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8008e5a:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8008e64:	2b22      	cmp	r3, #34	@ 0x22
 8008e66:	f040 80be 	bne.w	8008fe6 <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8008e70:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e78:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 8008e7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8008e7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8008e82:	4013      	ands	r3, r2
 8008e84:	b29a      	uxth	r2, r3
 8008e86:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8008e88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8008e8e:	1c9a      	adds	r2, r3, #2
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008e9a:	b29b      	uxth	r3, r3
 8008e9c:	3b01      	subs	r3, #1
 8008e9e:	b29a      	uxth	r2, r3
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8008ea6:	687b      	ldr	r3, [r7, #4]
 8008ea8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8008eac:	b29b      	uxth	r3, r3
 8008eae:	2b00      	cmp	r3, #0
 8008eb0:	f040 80a1 	bne.w	8008ff6 <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008eb4:	687b      	ldr	r3, [r7, #4]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eba:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8008ebc:	e853 3f00 	ldrex	r3, [r3]
 8008ec0:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8008ec2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8008ec4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8008ec8:	667b      	str	r3, [r7, #100]	@ 0x64
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	461a      	mov	r2, r3
 8008ed0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8008ed2:	657b      	str	r3, [r7, #84]	@ 0x54
 8008ed4:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ed6:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8008ed8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8008eda:	e841 2300 	strex	r3, r2, [r1]
 8008ede:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8008ee0:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d1e6      	bne.n	8008eb4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	3308      	adds	r3, #8
 8008eec:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8008ef0:	e853 3f00 	ldrex	r3, [r3]
 8008ef4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8008ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008ef8:	f023 0301 	bic.w	r3, r3, #1
 8008efc:	663b      	str	r3, [r7, #96]	@ 0x60
 8008efe:	687b      	ldr	r3, [r7, #4]
 8008f00:	681b      	ldr	r3, [r3, #0]
 8008f02:	3308      	adds	r3, #8
 8008f04:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 8008f06:	643a      	str	r2, [r7, #64]	@ 0x40
 8008f08:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f0a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8008f0c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8008f0e:	e841 2300 	strex	r3, r2, [r1]
 8008f12:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8008f14:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8008f16:	2b00      	cmp	r3, #0
 8008f18:	d1e5      	bne.n	8008ee6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f1a:	687b      	ldr	r3, [r7, #4]
 8008f1c:	2220      	movs	r2, #32
 8008f1e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	2200      	movs	r2, #0
 8008f26:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	2200      	movs	r2, #0
 8008f2c:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8008f2e:	687b      	ldr	r3, [r7, #4]
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	4a33      	ldr	r2, [pc, #204]	@ (8009000 <UART_RxISR_16BIT+0x1b4>)
 8008f34:	4293      	cmp	r3, r2
 8008f36:	d01f      	beq.n	8008f78 <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8008f38:	687b      	ldr	r3, [r7, #4]
 8008f3a:	681b      	ldr	r3, [r3, #0]
 8008f3c:	685b      	ldr	r3, [r3, #4]
 8008f3e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d018      	beq.n	8008f78 <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f4c:	6a3b      	ldr	r3, [r7, #32]
 8008f4e:	e853 3f00 	ldrex	r3, [r3]
 8008f52:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f54:	69fb      	ldr	r3, [r7, #28]
 8008f56:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8008f5a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8008f5c:	687b      	ldr	r3, [r7, #4]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	461a      	mov	r2, r3
 8008f62:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8008f64:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8008f66:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008f6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8008f6c:	e841 2300 	strex	r3, r2, [r1]
 8008f70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8008f72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008f74:	2b00      	cmp	r3, #0
 8008f76:	d1e6      	bne.n	8008f46 <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008f7c:	2b01      	cmp	r3, #1
 8008f7e:	d12e      	bne.n	8008fde <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	2200      	movs	r2, #0
 8008f84:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	e853 3f00 	ldrex	r3, [r3]
 8008f92:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f94:	68bb      	ldr	r3, [r7, #8]
 8008f96:	f023 0310 	bic.w	r3, r3, #16
 8008f9a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	461a      	mov	r2, r3
 8008fa2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8008fa4:	61bb      	str	r3, [r7, #24]
 8008fa6:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa8:	6979      	ldr	r1, [r7, #20]
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	e841 2300 	strex	r3, r2, [r1]
 8008fb0:	613b      	str	r3, [r7, #16]
   return(result);
 8008fb2:	693b      	ldr	r3, [r7, #16]
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1e6      	bne.n	8008f86 <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	69db      	ldr	r3, [r3, #28]
 8008fbe:	f003 0310 	and.w	r3, r3, #16
 8008fc2:	2b10      	cmp	r3, #16
 8008fc4:	d103      	bne.n	8008fce <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	2210      	movs	r2, #16
 8008fcc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fce:	687b      	ldr	r3, [r7, #4]
 8008fd0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8008fd4:	4619      	mov	r1, r3
 8008fd6:	6878      	ldr	r0, [r7, #4]
 8008fd8:	f7fe fe68 	bl	8007cac <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fdc:	e00b      	b.n	8008ff6 <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8008fde:	6878      	ldr	r0, [r7, #4]
 8008fe0:	f7f7 fb30 	bl	8000644 <HAL_UART_RxCpltCallback>
}
 8008fe4:	e007      	b.n	8008ff6 <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fe6:	687b      	ldr	r3, [r7, #4]
 8008fe8:	681b      	ldr	r3, [r3, #0]
 8008fea:	699a      	ldr	r2, [r3, #24]
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	681b      	ldr	r3, [r3, #0]
 8008ff0:	f042 0208 	orr.w	r2, r2, #8
 8008ff4:	619a      	str	r2, [r3, #24]
}
 8008ff6:	bf00      	nop
 8008ff8:	3770      	adds	r7, #112	@ 0x70
 8008ffa:	46bd      	mov	sp, r7
 8008ffc:	bd80      	pop	{r7, pc}
 8008ffe:	bf00      	nop
 8009000:	40008000 	.word	0x40008000

08009004 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009004:	b580      	push	{r7, lr}
 8009006:	b0ac      	sub	sp, #176	@ 0xb0
 8009008:	af00      	add	r7, sp, #0
 800900a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009012:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009016:	687b      	ldr	r3, [r7, #4]
 8009018:	681b      	ldr	r3, [r3, #0]
 800901a:	69db      	ldr	r3, [r3, #28]
 800901c:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009020:	687b      	ldr	r3, [r7, #4]
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	681b      	ldr	r3, [r3, #0]
 8009026:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800903a:	2b22      	cmp	r3, #34	@ 0x22
 800903c:	f040 8182 	bne.w	8009344 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009040:	687b      	ldr	r3, [r7, #4]
 8009042:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8009046:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800904a:	e125      	b.n	8009298 <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	681b      	ldr	r3, [r3, #0]
 8009050:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8009052:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009056:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800905a:	b2d9      	uxtb	r1, r3
 800905c:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8009060:	b2da      	uxtb	r2, r3
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009066:	400a      	ands	r2, r1
 8009068:	b2d2      	uxtb	r2, r2
 800906a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800906c:	687b      	ldr	r3, [r7, #4]
 800906e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8009070:	1c5a      	adds	r2, r3, #1
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800907c:	b29b      	uxth	r3, r3
 800907e:	3b01      	subs	r3, #1
 8009080:	b29a      	uxth	r2, r3
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	69db      	ldr	r3, [r3, #28]
 800908e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009092:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009096:	f003 0307 	and.w	r3, r3, #7
 800909a:	2b00      	cmp	r3, #0
 800909c:	d053      	beq.n	8009146 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800909e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090a2:	f003 0301 	and.w	r3, r3, #1
 80090a6:	2b00      	cmp	r3, #0
 80090a8:	d011      	beq.n	80090ce <UART_RxISR_8BIT_FIFOEN+0xca>
 80090aa:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80090ae:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d00b      	beq.n	80090ce <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090b6:	687b      	ldr	r3, [r7, #4]
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	2201      	movs	r2, #1
 80090bc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090c4:	f043 0201 	orr.w	r2, r3, #1
 80090c8:	687b      	ldr	r3, [r7, #4]
 80090ca:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ce:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80090d2:	f003 0302 	and.w	r3, r3, #2
 80090d6:	2b00      	cmp	r3, #0
 80090d8:	d011      	beq.n	80090fe <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090da:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80090de:	f003 0301 	and.w	r3, r3, #1
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	d00b      	beq.n	80090fe <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090e6:	687b      	ldr	r3, [r7, #4]
 80090e8:	681b      	ldr	r3, [r3, #0]
 80090ea:	2202      	movs	r2, #2
 80090ec:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80090f4:	f043 0204 	orr.w	r2, r3, #4
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090fe:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009102:	f003 0304 	and.w	r3, r3, #4
 8009106:	2b00      	cmp	r3, #0
 8009108:	d011      	beq.n	800912e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800910a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800910e:	f003 0301 	and.w	r3, r3, #1
 8009112:	2b00      	cmp	r3, #0
 8009114:	d00b      	beq.n	800912e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	2204      	movs	r2, #4
 800911c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009124:	f043 0202 	orr.w	r2, r3, #2
 8009128:	687b      	ldr	r3, [r7, #4]
 800912a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009134:	2b00      	cmp	r3, #0
 8009136:	d006      	beq.n	8009146 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009138:	6878      	ldr	r0, [r7, #4]
 800913a:	f7fe fdad 	bl	8007c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	2200      	movs	r2, #0
 8009142:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800914c:	b29b      	uxth	r3, r3
 800914e:	2b00      	cmp	r3, #0
 8009150:	f040 80a2 	bne.w	8009298 <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009154:	687b      	ldr	r3, [r7, #4]
 8009156:	681b      	ldr	r3, [r3, #0]
 8009158:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800915a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800915c:	e853 3f00 	ldrex	r3, [r3]
 8009160:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8009162:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009164:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8009168:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800916c:	687b      	ldr	r3, [r7, #4]
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	461a      	mov	r2, r3
 8009172:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8009176:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8009178:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 800917c:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 800917e:	e841 2300 	strex	r3, r2, [r1]
 8009182:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8009184:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009186:	2b00      	cmp	r3, #0
 8009188:	d1e4      	bne.n	8009154 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009192:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009194:	e853 3f00 	ldrex	r3, [r3]
 8009198:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800919a:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 800919c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80091a0:	f023 0301 	bic.w	r3, r3, #1
 80091a4:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	3308      	adds	r3, #8
 80091ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80091b2:	66ba      	str	r2, [r7, #104]	@ 0x68
 80091b4:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091b6:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80091b8:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80091ba:	e841 2300 	strex	r3, r2, [r1]
 80091be:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80091c0:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80091c2:	2b00      	cmp	r3, #0
 80091c4:	d1e1      	bne.n	800918a <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2220      	movs	r2, #32
 80091ca:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	2200      	movs	r2, #0
 80091d2:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80091d4:	687b      	ldr	r3, [r7, #4]
 80091d6:	2200      	movs	r2, #0
 80091d8:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80091da:	687b      	ldr	r3, [r7, #4]
 80091dc:	681b      	ldr	r3, [r3, #0]
 80091de:	4a5f      	ldr	r2, [pc, #380]	@ (800935c <UART_RxISR_8BIT_FIFOEN+0x358>)
 80091e0:	4293      	cmp	r3, r2
 80091e2:	d021      	beq.n	8009228 <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	685b      	ldr	r3, [r3, #4]
 80091ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d01a      	beq.n	8009228 <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	681b      	ldr	r3, [r3, #0]
 80091f6:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091f8:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80091fa:	e853 3f00 	ldrex	r3, [r3]
 80091fe:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8009200:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8009202:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8009206:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800920a:	687b      	ldr	r3, [r7, #4]
 800920c:	681b      	ldr	r3, [r3, #0]
 800920e:	461a      	mov	r2, r3
 8009210:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8009214:	657b      	str	r3, [r7, #84]	@ 0x54
 8009216:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009218:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800921a:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 800921c:	e841 2300 	strex	r3, r2, [r1]
 8009220:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8009222:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009224:	2b00      	cmp	r3, #0
 8009226:	d1e4      	bne.n	80091f2 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 800922c:	2b01      	cmp	r3, #1
 800922e:	d130      	bne.n	8009292 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	2200      	movs	r2, #0
 8009234:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009236:	687b      	ldr	r3, [r7, #4]
 8009238:	681b      	ldr	r3, [r3, #0]
 800923a:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800923e:	e853 3f00 	ldrex	r3, [r3]
 8009242:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8009244:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009246:	f023 0310 	bic.w	r3, r3, #16
 800924a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 800924e:	687b      	ldr	r3, [r7, #4]
 8009250:	681b      	ldr	r3, [r3, #0]
 8009252:	461a      	mov	r2, r3
 8009254:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8009258:	643b      	str	r3, [r7, #64]	@ 0x40
 800925a:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800925c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800925e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8009260:	e841 2300 	strex	r3, r2, [r1]
 8009264:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8009266:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8009268:	2b00      	cmp	r3, #0
 800926a:	d1e4      	bne.n	8009236 <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	681b      	ldr	r3, [r3, #0]
 8009270:	69db      	ldr	r3, [r3, #28]
 8009272:	f003 0310 	and.w	r3, r3, #16
 8009276:	2b10      	cmp	r3, #16
 8009278:	d103      	bne.n	8009282 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	2210      	movs	r2, #16
 8009280:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009282:	687b      	ldr	r3, [r7, #4]
 8009284:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8009288:	4619      	mov	r1, r3
 800928a:	6878      	ldr	r0, [r7, #4]
 800928c:	f7fe fd0e 	bl	8007cac <HAL_UARTEx_RxEventCallback>
 8009290:	e002      	b.n	8009298 <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009292:	6878      	ldr	r0, [r7, #4]
 8009294:	f7f7 f9d6 	bl	8000644 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009298:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 800929c:	2b00      	cmp	r3, #0
 800929e:	d006      	beq.n	80092ae <UART_RxISR_8BIT_FIFOEN+0x2aa>
 80092a0:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80092a4:	f003 0320 	and.w	r3, r3, #32
 80092a8:	2b00      	cmp	r3, #0
 80092aa:	f47f aecf 	bne.w	800904c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80092b4:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80092b8:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d049      	beq.n	8009354 <UART_RxISR_8BIT_FIFOEN+0x350>
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80092c6:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80092ca:	429a      	cmp	r2, r3
 80092cc:	d242      	bcs.n	8009354 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	3308      	adds	r3, #8
 80092d4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092d6:	6a3b      	ldr	r3, [r7, #32]
 80092d8:	e853 3f00 	ldrex	r3, [r3]
 80092dc:	61fb      	str	r3, [r7, #28]
   return(result);
 80092de:	69fb      	ldr	r3, [r7, #28]
 80092e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80092e4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	3308      	adds	r3, #8
 80092ee:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80092f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80092f4:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092f6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80092f8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80092fa:	e841 2300 	strex	r3, r2, [r1]
 80092fe:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8009300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009302:	2b00      	cmp	r3, #0
 8009304:	d1e3      	bne.n	80092ce <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	4a15      	ldr	r2, [pc, #84]	@ (8009360 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 800930a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	e853 3f00 	ldrex	r3, [r3]
 8009318:	60bb      	str	r3, [r7, #8]
   return(result);
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	f043 0320 	orr.w	r3, r3, #32
 8009320:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8009324:	687b      	ldr	r3, [r7, #4]
 8009326:	681b      	ldr	r3, [r3, #0]
 8009328:	461a      	mov	r2, r3
 800932a:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 800932e:	61bb      	str	r3, [r7, #24]
 8009330:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009332:	6979      	ldr	r1, [r7, #20]
 8009334:	69ba      	ldr	r2, [r7, #24]
 8009336:	e841 2300 	strex	r3, r2, [r1]
 800933a:	613b      	str	r3, [r7, #16]
   return(result);
 800933c:	693b      	ldr	r3, [r7, #16]
 800933e:	2b00      	cmp	r3, #0
 8009340:	d1e4      	bne.n	800930c <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009342:	e007      	b.n	8009354 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	681b      	ldr	r3, [r3, #0]
 8009348:	699a      	ldr	r2, [r3, #24]
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f042 0208 	orr.w	r2, r2, #8
 8009352:	619a      	str	r2, [r3, #24]
}
 8009354:	bf00      	nop
 8009356:	37b0      	adds	r7, #176	@ 0xb0
 8009358:	46bd      	mov	sp, r7
 800935a:	bd80      	pop	{r7, pc}
 800935c:	40008000 	.word	0x40008000
 8009360:	08008c95 	.word	0x08008c95

08009364 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009364:	b580      	push	{r7, lr}
 8009366:	b0ae      	sub	sp, #184	@ 0xb8
 8009368:	af00      	add	r7, sp, #0
 800936a:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 800936c:	687b      	ldr	r3, [r7, #4]
 800936e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8009372:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009376:	687b      	ldr	r3, [r7, #4]
 8009378:	681b      	ldr	r3, [r3, #0]
 800937a:	69db      	ldr	r3, [r3, #28]
 800937c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	681b      	ldr	r3, [r3, #0]
 8009386:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	681b      	ldr	r3, [r3, #0]
 800938e:	689b      	ldr	r3, [r3, #8]
 8009390:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800939a:	2b22      	cmp	r3, #34	@ 0x22
 800939c:	f040 8186 	bne.w	80096ac <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80093a0:	687b      	ldr	r3, [r7, #4]
 80093a2:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80093a6:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80093aa:	e129      	b.n	8009600 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80093ac:	687b      	ldr	r3, [r7, #4]
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80093b2:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 80093b6:	687b      	ldr	r3, [r7, #4]
 80093b8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093ba:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 80093be:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 80093c2:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 80093c6:	4013      	ands	r3, r2
 80093c8:	b29a      	uxth	r2, r3
 80093ca:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80093ce:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80093d4:	1c9a      	adds	r2, r3, #2
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80093e0:	b29b      	uxth	r3, r3
 80093e2:	3b01      	subs	r3, #1
 80093e4:	b29a      	uxth	r2, r3
 80093e6:	687b      	ldr	r3, [r7, #4]
 80093e8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	69db      	ldr	r3, [r3, #28]
 80093f2:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80093f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 80093fa:	f003 0307 	and.w	r3, r3, #7
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d053      	beq.n	80094aa <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8009402:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009406:	f003 0301 	and.w	r3, r3, #1
 800940a:	2b00      	cmp	r3, #0
 800940c:	d011      	beq.n	8009432 <UART_RxISR_16BIT_FIFOEN+0xce>
 800940e:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8009412:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8009416:	2b00      	cmp	r3, #0
 8009418:	d00b      	beq.n	8009432 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	681b      	ldr	r3, [r3, #0]
 800941e:	2201      	movs	r2, #1
 8009420:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009428:	f043 0201 	orr.w	r2, r3, #1
 800942c:	687b      	ldr	r3, [r7, #4]
 800942e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009432:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009436:	f003 0302 	and.w	r3, r3, #2
 800943a:	2b00      	cmp	r3, #0
 800943c:	d011      	beq.n	8009462 <UART_RxISR_16BIT_FIFOEN+0xfe>
 800943e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009442:	f003 0301 	and.w	r3, r3, #1
 8009446:	2b00      	cmp	r3, #0
 8009448:	d00b      	beq.n	8009462 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800944a:	687b      	ldr	r3, [r7, #4]
 800944c:	681b      	ldr	r3, [r3, #0]
 800944e:	2202      	movs	r2, #2
 8009450:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009452:	687b      	ldr	r3, [r7, #4]
 8009454:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009458:	f043 0204 	orr.w	r2, r3, #4
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8009462:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8009466:	f003 0304 	and.w	r3, r3, #4
 800946a:	2b00      	cmp	r3, #0
 800946c:	d011      	beq.n	8009492 <UART_RxISR_16BIT_FIFOEN+0x12e>
 800946e:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8009472:	f003 0301 	and.w	r3, r3, #1
 8009476:	2b00      	cmp	r3, #0
 8009478:	d00b      	beq.n	8009492 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	2204      	movs	r2, #4
 8009480:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009488:	f043 0202 	orr.w	r2, r3, #2
 800948c:	687b      	ldr	r3, [r7, #4]
 800948e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8009498:	2b00      	cmp	r3, #0
 800949a:	d006      	beq.n	80094aa <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800949c:	6878      	ldr	r0, [r7, #4]
 800949e:	f7fe fbfb 	bl	8007c98 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80094a2:	687b      	ldr	r3, [r7, #4]
 80094a4:	2200      	movs	r2, #0
 80094a6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 80094aa:	687b      	ldr	r3, [r7, #4]
 80094ac:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80094b0:	b29b      	uxth	r3, r3
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	f040 80a4 	bne.w	8009600 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	681b      	ldr	r3, [r3, #0]
 80094bc:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094be:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80094c0:	e853 3f00 	ldrex	r3, [r3]
 80094c4:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80094c6:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80094c8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80094cc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	461a      	mov	r2, r3
 80094d6:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80094da:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80094de:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094e0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80094e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80094e6:	e841 2300 	strex	r3, r2, [r1]
 80094ea:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80094ec:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80094ee:	2b00      	cmp	r3, #0
 80094f0:	d1e2      	bne.n	80094b8 <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	681b      	ldr	r3, [r3, #0]
 80094f6:	3308      	adds	r3, #8
 80094f8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094fa:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80094fc:	e853 3f00 	ldrex	r3, [r3]
 8009500:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8009502:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8009504:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8009508:	f023 0301 	bic.w	r3, r3, #1
 800950c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8009510:	687b      	ldr	r3, [r7, #4]
 8009512:	681b      	ldr	r3, [r3, #0]
 8009514:	3308      	adds	r3, #8
 8009516:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 800951a:	66fa      	str	r2, [r7, #108]	@ 0x6c
 800951c:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800951e:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8009520:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009522:	e841 2300 	strex	r3, r2, [r1]
 8009526:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8009528:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 800952a:	2b00      	cmp	r3, #0
 800952c:	d1e1      	bne.n	80094f2 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800952e:	687b      	ldr	r3, [r7, #4]
 8009530:	2220      	movs	r2, #32
 8009532:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009536:	687b      	ldr	r3, [r7, #4]
 8009538:	2200      	movs	r2, #0
 800953a:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2200      	movs	r2, #0
 8009540:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8009542:	687b      	ldr	r3, [r7, #4]
 8009544:	681b      	ldr	r3, [r3, #0]
 8009546:	4a5f      	ldr	r2, [pc, #380]	@ (80096c4 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8009548:	4293      	cmp	r3, r2
 800954a:	d021      	beq.n	8009590 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	681b      	ldr	r3, [r3, #0]
 8009550:	685b      	ldr	r3, [r3, #4]
 8009552:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8009556:	2b00      	cmp	r3, #0
 8009558:	d01a      	beq.n	8009590 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800955a:	687b      	ldr	r3, [r7, #4]
 800955c:	681b      	ldr	r3, [r3, #0]
 800955e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009560:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8009562:	e853 3f00 	ldrex	r3, [r3]
 8009566:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8009568:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800956a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800956e:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	461a      	mov	r2, r3
 8009578:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 800957c:	65bb      	str	r3, [r7, #88]	@ 0x58
 800957e:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009580:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8009582:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8009584:	e841 2300 	strex	r3, r2, [r1]
 8009588:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800958a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800958c:	2b00      	cmp	r3, #0
 800958e:	d1e4      	bne.n	800955a <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8009594:	2b01      	cmp	r3, #1
 8009596:	d130      	bne.n	80095fa <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	2200      	movs	r2, #0
 800959c:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	681b      	ldr	r3, [r3, #0]
 80095a2:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80095a6:	e853 3f00 	ldrex	r3, [r3]
 80095aa:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80095ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80095ae:	f023 0310 	bic.w	r3, r3, #16
 80095b2:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	681b      	ldr	r3, [r3, #0]
 80095ba:	461a      	mov	r2, r3
 80095bc:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 80095c0:	647b      	str	r3, [r7, #68]	@ 0x44
 80095c2:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095c4:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80095c6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80095c8:	e841 2300 	strex	r3, r2, [r1]
 80095cc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80095ce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80095d0:	2b00      	cmp	r3, #0
 80095d2:	d1e4      	bne.n	800959e <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	69db      	ldr	r3, [r3, #28]
 80095da:	f003 0310 	and.w	r3, r3, #16
 80095de:	2b10      	cmp	r3, #16
 80095e0:	d103      	bne.n	80095ea <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	681b      	ldr	r3, [r3, #0]
 80095e6:	2210      	movs	r2, #16
 80095e8:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80095f0:	4619      	mov	r1, r3
 80095f2:	6878      	ldr	r0, [r7, #4]
 80095f4:	f7fe fb5a 	bl	8007cac <HAL_UARTEx_RxEventCallback>
 80095f8:	e002      	b.n	8009600 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80095fa:	6878      	ldr	r0, [r7, #4]
 80095fc:	f7f7 f822 	bl	8000644 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009600:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8009604:	2b00      	cmp	r3, #0
 8009606:	d006      	beq.n	8009616 <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8009608:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 800960c:	f003 0320 	and.w	r3, r3, #32
 8009610:	2b00      	cmp	r3, #0
 8009612:	f47f aecb 	bne.w	80093ac <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800961c:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009620:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8009624:	2b00      	cmp	r3, #0
 8009626:	d049      	beq.n	80096bc <UART_RxISR_16BIT_FIFOEN+0x358>
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800962e:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8009632:	429a      	cmp	r2, r3
 8009634:	d242      	bcs.n	80096bc <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	3308      	adds	r3, #8
 800963c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800963e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009640:	e853 3f00 	ldrex	r3, [r3]
 8009644:	623b      	str	r3, [r7, #32]
   return(result);
 8009646:	6a3b      	ldr	r3, [r7, #32]
 8009648:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800964c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	3308      	adds	r3, #8
 8009656:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 800965a:	633a      	str	r2, [r7, #48]	@ 0x30
 800965c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800965e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8009660:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009662:	e841 2300 	strex	r3, r2, [r1]
 8009666:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8009668:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800966a:	2b00      	cmp	r3, #0
 800966c:	d1e3      	bne.n	8009636 <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	4a15      	ldr	r2, [pc, #84]	@ (80096c8 <UART_RxISR_16BIT_FIFOEN+0x364>)
 8009672:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800967a:	693b      	ldr	r3, [r7, #16]
 800967c:	e853 3f00 	ldrex	r3, [r3]
 8009680:	60fb      	str	r3, [r7, #12]
   return(result);
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	f043 0320 	orr.w	r3, r3, #32
 8009688:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	681b      	ldr	r3, [r3, #0]
 8009690:	461a      	mov	r2, r3
 8009692:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8009696:	61fb      	str	r3, [r7, #28]
 8009698:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800969a:	69b9      	ldr	r1, [r7, #24]
 800969c:	69fa      	ldr	r2, [r7, #28]
 800969e:	e841 2300 	strex	r3, r2, [r1]
 80096a2:	617b      	str	r3, [r7, #20]
   return(result);
 80096a4:	697b      	ldr	r3, [r7, #20]
 80096a6:	2b00      	cmp	r3, #0
 80096a8:	d1e4      	bne.n	8009674 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80096aa:	e007      	b.n	80096bc <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80096ac:	687b      	ldr	r3, [r7, #4]
 80096ae:	681b      	ldr	r3, [r3, #0]
 80096b0:	699a      	ldr	r2, [r3, #24]
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	681b      	ldr	r3, [r3, #0]
 80096b6:	f042 0208 	orr.w	r2, r2, #8
 80096ba:	619a      	str	r2, [r3, #24]
}
 80096bc:	bf00      	nop
 80096be:	37b8      	adds	r7, #184	@ 0xb8
 80096c0:	46bd      	mov	sp, r7
 80096c2:	bd80      	pop	{r7, pc}
 80096c4:	40008000 	.word	0x40008000
 80096c8:	08008e4d 	.word	0x08008e4d

080096cc <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80096cc:	b480      	push	{r7}
 80096ce:	b083      	sub	sp, #12
 80096d0:	af00      	add	r7, sp, #0
 80096d2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80096d4:	bf00      	nop
 80096d6:	370c      	adds	r7, #12
 80096d8:	46bd      	mov	sp, r7
 80096da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096de:	4770      	bx	lr

080096e0 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 80096e0:	b480      	push	{r7}
 80096e2:	b083      	sub	sp, #12
 80096e4:	af00      	add	r7, sp, #0
 80096e6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 80096e8:	bf00      	nop
 80096ea:	370c      	adds	r7, #12
 80096ec:	46bd      	mov	sp, r7
 80096ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096f2:	4770      	bx	lr

080096f4 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 80096f4:	b480      	push	{r7}
 80096f6:	b083      	sub	sp, #12
 80096f8:	af00      	add	r7, sp, #0
 80096fa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 80096fc:	bf00      	nop
 80096fe:	370c      	adds	r7, #12
 8009700:	46bd      	mov	sp, r7
 8009702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009706:	4770      	bx	lr

08009708 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009708:	b580      	push	{r7, lr}
 800970a:	b084      	sub	sp, #16
 800970c:	af00      	add	r7, sp, #0
 800970e:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	681b      	ldr	r3, [r3, #0]
 8009714:	4a27      	ldr	r2, [pc, #156]	@ (80097b4 <HAL_UARTEx_DisableFifoMode+0xac>)
 8009716:	4293      	cmp	r3, r2
 8009718:	d018      	beq.n	800974c <HAL_UARTEx_DisableFifoMode+0x44>
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	681b      	ldr	r3, [r3, #0]
 800971e:	4a26      	ldr	r2, [pc, #152]	@ (80097b8 <HAL_UARTEx_DisableFifoMode+0xb0>)
 8009720:	4293      	cmp	r3, r2
 8009722:	d013      	beq.n	800974c <HAL_UARTEx_DisableFifoMode+0x44>
 8009724:	687b      	ldr	r3, [r7, #4]
 8009726:	681b      	ldr	r3, [r3, #0]
 8009728:	4a24      	ldr	r2, [pc, #144]	@ (80097bc <HAL_UARTEx_DisableFifoMode+0xb4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00e      	beq.n	800974c <HAL_UARTEx_DisableFifoMode+0x44>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	681b      	ldr	r3, [r3, #0]
 8009732:	4a23      	ldr	r2, [pc, #140]	@ (80097c0 <HAL_UARTEx_DisableFifoMode+0xb8>)
 8009734:	4293      	cmp	r3, r2
 8009736:	d009      	beq.n	800974c <HAL_UARTEx_DisableFifoMode+0x44>
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	681b      	ldr	r3, [r3, #0]
 800973c:	4a21      	ldr	r2, [pc, #132]	@ (80097c4 <HAL_UARTEx_DisableFifoMode+0xbc>)
 800973e:	4293      	cmp	r3, r2
 8009740:	d004      	beq.n	800974c <HAL_UARTEx_DisableFifoMode+0x44>
 8009742:	f240 2136 	movw	r1, #566	@ 0x236
 8009746:	4820      	ldr	r0, [pc, #128]	@ (80097c8 <HAL_UARTEx_DisableFifoMode+0xc0>)
 8009748:	f7f7 fdb6 	bl	80012b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009752:	2b01      	cmp	r3, #1
 8009754:	d101      	bne.n	800975a <HAL_UARTEx_DisableFifoMode+0x52>
 8009756:	2302      	movs	r3, #2
 8009758:	e027      	b.n	80097aa <HAL_UARTEx_DisableFifoMode+0xa2>
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	2201      	movs	r2, #1
 800975e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	2224      	movs	r2, #36	@ 0x24
 8009766:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	681b      	ldr	r3, [r3, #0]
 800976e:	681b      	ldr	r3, [r3, #0]
 8009770:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009772:	687b      	ldr	r3, [r7, #4]
 8009774:	681b      	ldr	r3, [r3, #0]
 8009776:	681a      	ldr	r2, [r3, #0]
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	681b      	ldr	r3, [r3, #0]
 800977c:	f022 0201 	bic.w	r2, r2, #1
 8009780:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009782:	68fb      	ldr	r3, [r7, #12]
 8009784:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8009788:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800978a:	687b      	ldr	r3, [r7, #4]
 800978c:	2200      	movs	r2, #0
 800978e:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	681b      	ldr	r3, [r3, #0]
 8009794:	68fa      	ldr	r2, [r7, #12]
 8009796:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80097a8:	2300      	movs	r3, #0
}
 80097aa:	4618      	mov	r0, r3
 80097ac:	3710      	adds	r7, #16
 80097ae:	46bd      	mov	sp, r7
 80097b0:	bd80      	pop	{r7, pc}
 80097b2:	bf00      	nop
 80097b4:	40013800 	.word	0x40013800
 80097b8:	40004400 	.word	0x40004400
 80097bc:	40004800 	.word	0x40004800
 80097c0:	40004c00 	.word	0x40004c00
 80097c4:	40008000 	.word	0x40008000
 80097c8:	0800c4b4 	.word	0x0800c4b4

080097cc <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80097cc:	b580      	push	{r7, lr}
 80097ce:	b084      	sub	sp, #16
 80097d0:	af00      	add	r7, sp, #0
 80097d2:	6078      	str	r0, [r7, #4]
 80097d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	4a38      	ldr	r2, [pc, #224]	@ (80098bc <HAL_UARTEx_SetTxFifoThreshold+0xf0>)
 80097dc:	4293      	cmp	r3, r2
 80097de:	d018      	beq.n	8009812 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80097e0:	687b      	ldr	r3, [r7, #4]
 80097e2:	681b      	ldr	r3, [r3, #0]
 80097e4:	4a36      	ldr	r2, [pc, #216]	@ (80098c0 <HAL_UARTEx_SetTxFifoThreshold+0xf4>)
 80097e6:	4293      	cmp	r3, r2
 80097e8:	d013      	beq.n	8009812 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	4a35      	ldr	r2, [pc, #212]	@ (80098c4 <HAL_UARTEx_SetTxFifoThreshold+0xf8>)
 80097f0:	4293      	cmp	r3, r2
 80097f2:	d00e      	beq.n	8009812 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80097f4:	687b      	ldr	r3, [r7, #4]
 80097f6:	681b      	ldr	r3, [r3, #0]
 80097f8:	4a33      	ldr	r2, [pc, #204]	@ (80098c8 <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 80097fa:	4293      	cmp	r3, r2
 80097fc:	d009      	beq.n	8009812 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 80097fe:	687b      	ldr	r3, [r7, #4]
 8009800:	681b      	ldr	r3, [r3, #0]
 8009802:	4a32      	ldr	r2, [pc, #200]	@ (80098cc <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 8009804:	4293      	cmp	r3, r2
 8009806:	d004      	beq.n	8009812 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8009808:	f44f 7119 	mov.w	r1, #612	@ 0x264
 800980c:	4830      	ldr	r0, [pc, #192]	@ (80098d0 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 800980e:	f7f7 fd53 	bl	80012b8 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8009812:	683b      	ldr	r3, [r7, #0]
 8009814:	2b00      	cmp	r3, #0
 8009816:	d018      	beq.n	800984a <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8009818:	683b      	ldr	r3, [r7, #0]
 800981a:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 800981e:	d014      	beq.n	800984a <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8009820:	683b      	ldr	r3, [r7, #0]
 8009822:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009826:	d010      	beq.n	800984a <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8009828:	683b      	ldr	r3, [r7, #0]
 800982a:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 800982e:	d00c      	beq.n	800984a <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8009830:	683b      	ldr	r3, [r7, #0]
 8009832:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8009836:	d008      	beq.n	800984a <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8009838:	683b      	ldr	r3, [r7, #0]
 800983a:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 800983e:	d004      	beq.n	800984a <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8009840:	f240 2165 	movw	r1, #613	@ 0x265
 8009844:	4822      	ldr	r0, [pc, #136]	@ (80098d0 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8009846:	f7f7 fd37 	bl	80012b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 800984a:	687b      	ldr	r3, [r7, #4]
 800984c:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009850:	2b01      	cmp	r3, #1
 8009852:	d101      	bne.n	8009858 <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8009854:	2302      	movs	r3, #2
 8009856:	e02d      	b.n	80098b4 <HAL_UARTEx_SetTxFifoThreshold+0xe8>
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	2201      	movs	r2, #1
 800985c:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009860:	687b      	ldr	r3, [r7, #4]
 8009862:	2224      	movs	r2, #36	@ 0x24
 8009864:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009868:	687b      	ldr	r3, [r7, #4]
 800986a:	681b      	ldr	r3, [r3, #0]
 800986c:	681b      	ldr	r3, [r3, #0]
 800986e:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	681b      	ldr	r3, [r3, #0]
 8009874:	681a      	ldr	r2, [r3, #0]
 8009876:	687b      	ldr	r3, [r7, #4]
 8009878:	681b      	ldr	r3, [r3, #0]
 800987a:	f022 0201 	bic.w	r2, r2, #1
 800987e:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009880:	687b      	ldr	r3, [r7, #4]
 8009882:	681b      	ldr	r3, [r3, #0]
 8009884:	689b      	ldr	r3, [r3, #8]
 8009886:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 800988a:	687b      	ldr	r3, [r7, #4]
 800988c:	681b      	ldr	r3, [r3, #0]
 800988e:	683a      	ldr	r2, [r7, #0]
 8009890:	430a      	orrs	r2, r1
 8009892:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009894:	6878      	ldr	r0, [r7, #4]
 8009896:	f000 f8a1 	bl	80099dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	681b      	ldr	r3, [r3, #0]
 800989e:	68fa      	ldr	r2, [r7, #12]
 80098a0:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80098a2:	687b      	ldr	r3, [r7, #4]
 80098a4:	2220      	movs	r2, #32
 80098a6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80098aa:	687b      	ldr	r3, [r7, #4]
 80098ac:	2200      	movs	r2, #0
 80098ae:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80098b2:	2300      	movs	r3, #0
}
 80098b4:	4618      	mov	r0, r3
 80098b6:	3710      	adds	r7, #16
 80098b8:	46bd      	mov	sp, r7
 80098ba:	bd80      	pop	{r7, pc}
 80098bc:	40013800 	.word	0x40013800
 80098c0:	40004400 	.word	0x40004400
 80098c4:	40004800 	.word	0x40004800
 80098c8:	40004c00 	.word	0x40004c00
 80098cc:	40008000 	.word	0x40008000
 80098d0:	0800c4b4 	.word	0x0800c4b4

080098d4 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80098d4:	b580      	push	{r7, lr}
 80098d6:	b084      	sub	sp, #16
 80098d8:	af00      	add	r7, sp, #0
 80098da:	6078      	str	r0, [r7, #4]
 80098dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 80098de:	687b      	ldr	r3, [r7, #4]
 80098e0:	681b      	ldr	r3, [r3, #0]
 80098e2:	4a38      	ldr	r2, [pc, #224]	@ (80099c4 <HAL_UARTEx_SetRxFifoThreshold+0xf0>)
 80098e4:	4293      	cmp	r3, r2
 80098e6:	d018      	beq.n	800991a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	681b      	ldr	r3, [r3, #0]
 80098ec:	4a36      	ldr	r2, [pc, #216]	@ (80099c8 <HAL_UARTEx_SetRxFifoThreshold+0xf4>)
 80098ee:	4293      	cmp	r3, r2
 80098f0:	d013      	beq.n	800991a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	4a35      	ldr	r2, [pc, #212]	@ (80099cc <HAL_UARTEx_SetRxFifoThreshold+0xf8>)
 80098f8:	4293      	cmp	r3, r2
 80098fa:	d00e      	beq.n	800991a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 80098fc:	687b      	ldr	r3, [r7, #4]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	4a33      	ldr	r2, [pc, #204]	@ (80099d0 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8009902:	4293      	cmp	r3, r2
 8009904:	d009      	beq.n	800991a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	4a32      	ldr	r2, [pc, #200]	@ (80099d4 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 800990c:	4293      	cmp	r3, r2
 800990e:	d004      	beq.n	800991a <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8009910:	f240 2195 	movw	r1, #661	@ 0x295
 8009914:	4830      	ldr	r0, [pc, #192]	@ (80099d8 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8009916:	f7f7 fccf 	bl	80012b8 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800991a:	683b      	ldr	r3, [r7, #0]
 800991c:	2b00      	cmp	r3, #0
 800991e:	d018      	beq.n	8009952 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8009920:	683b      	ldr	r3, [r7, #0]
 8009922:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 8009926:	d014      	beq.n	8009952 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8009928:	683b      	ldr	r3, [r7, #0]
 800992a:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 800992e:	d010      	beq.n	8009952 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8009930:	683b      	ldr	r3, [r7, #0]
 8009932:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 8009936:	d00c      	beq.n	8009952 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8009938:	683b      	ldr	r3, [r7, #0]
 800993a:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800993e:	d008      	beq.n	8009952 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8009940:	683b      	ldr	r3, [r7, #0]
 8009942:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 8009946:	d004      	beq.n	8009952 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8009948:	f240 2196 	movw	r1, #662	@ 0x296
 800994c:	4822      	ldr	r0, [pc, #136]	@ (80099d8 <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800994e:	f7f7 fcb3 	bl	80012b8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8009958:	2b01      	cmp	r3, #1
 800995a:	d101      	bne.n	8009960 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 800995c:	2302      	movs	r3, #2
 800995e:	e02d      	b.n	80099bc <HAL_UARTEx_SetRxFifoThreshold+0xe8>
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	2201      	movs	r2, #1
 8009964:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	2224      	movs	r2, #36	@ 0x24
 800996c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	681b      	ldr	r3, [r3, #0]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	681b      	ldr	r3, [r3, #0]
 800997c:	681a      	ldr	r2, [r3, #0]
 800997e:	687b      	ldr	r3, [r7, #4]
 8009980:	681b      	ldr	r3, [r3, #0]
 8009982:	f022 0201 	bic.w	r2, r2, #1
 8009986:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009988:	687b      	ldr	r3, [r7, #4]
 800998a:	681b      	ldr	r3, [r3, #0]
 800998c:	689b      	ldr	r3, [r3, #8]
 800998e:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	683a      	ldr	r2, [r7, #0]
 8009998:	430a      	orrs	r2, r1
 800999a:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800999c:	6878      	ldr	r0, [r7, #4]
 800999e:	f000 f81d 	bl	80099dc <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	68fa      	ldr	r2, [r7, #12]
 80099a8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80099aa:	687b      	ldr	r3, [r7, #4]
 80099ac:	2220      	movs	r2, #32
 80099ae:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80099b2:	687b      	ldr	r3, [r7, #4]
 80099b4:	2200      	movs	r2, #0
 80099b6:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80099ba:	2300      	movs	r3, #0
}
 80099bc:	4618      	mov	r0, r3
 80099be:	3710      	adds	r7, #16
 80099c0:	46bd      	mov	sp, r7
 80099c2:	bd80      	pop	{r7, pc}
 80099c4:	40013800 	.word	0x40013800
 80099c8:	40004400 	.word	0x40004400
 80099cc:	40004800 	.word	0x40004800
 80099d0:	40004c00 	.word	0x40004c00
 80099d4:	40008000 	.word	0x40008000
 80099d8:	0800c4b4 	.word	0x0800c4b4

080099dc <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80099dc:	b480      	push	{r7}
 80099de:	b085      	sub	sp, #20
 80099e0:	af00      	add	r7, sp, #0
 80099e2:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80099e4:	687b      	ldr	r3, [r7, #4]
 80099e6:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80099e8:	2b00      	cmp	r3, #0
 80099ea:	d108      	bne.n	80099fe <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80099ec:	687b      	ldr	r3, [r7, #4]
 80099ee:	2201      	movs	r2, #1
 80099f0:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80099f4:	687b      	ldr	r3, [r7, #4]
 80099f6:	2201      	movs	r2, #1
 80099f8:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80099fc:	e031      	b.n	8009a62 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80099fe:	2308      	movs	r3, #8
 8009a00:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009a02:	2308      	movs	r3, #8
 8009a04:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	681b      	ldr	r3, [r3, #0]
 8009a0a:	689b      	ldr	r3, [r3, #8]
 8009a0c:	0e5b      	lsrs	r3, r3, #25
 8009a0e:	b2db      	uxtb	r3, r3
 8009a10:	f003 0307 	and.w	r3, r3, #7
 8009a14:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	689b      	ldr	r3, [r3, #8]
 8009a1c:	0f5b      	lsrs	r3, r3, #29
 8009a1e:	b2db      	uxtb	r3, r3
 8009a20:	f003 0307 	and.w	r3, r3, #7
 8009a24:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a26:	7bbb      	ldrb	r3, [r7, #14]
 8009a28:	7b3a      	ldrb	r2, [r7, #12]
 8009a2a:	4911      	ldr	r1, [pc, #68]	@ (8009a70 <UARTEx_SetNbDataToProcess+0x94>)
 8009a2c:	5c8a      	ldrb	r2, [r1, r2]
 8009a2e:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009a32:	7b3a      	ldrb	r2, [r7, #12]
 8009a34:	490f      	ldr	r1, [pc, #60]	@ (8009a74 <UARTEx_SetNbDataToProcess+0x98>)
 8009a36:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009a38:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a3c:	b29a      	uxth	r2, r3
 8009a3e:	687b      	ldr	r3, [r7, #4]
 8009a40:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a44:	7bfb      	ldrb	r3, [r7, #15]
 8009a46:	7b7a      	ldrb	r2, [r7, #13]
 8009a48:	4909      	ldr	r1, [pc, #36]	@ (8009a70 <UARTEx_SetNbDataToProcess+0x94>)
 8009a4a:	5c8a      	ldrb	r2, [r1, r2]
 8009a4c:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009a50:	7b7a      	ldrb	r2, [r7, #13]
 8009a52:	4908      	ldr	r1, [pc, #32]	@ (8009a74 <UARTEx_SetNbDataToProcess+0x98>)
 8009a54:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009a56:	fb93 f3f2 	sdiv	r3, r3, r2
 8009a5a:	b29a      	uxth	r2, r3
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8009a62:	bf00      	nop
 8009a64:	3714      	adds	r7, #20
 8009a66:	46bd      	mov	sp, r7
 8009a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6c:	4770      	bx	lr
 8009a6e:	bf00      	nop
 8009a70:	0800c5dc 	.word	0x0800c5dc
 8009a74:	0800c5e4 	.word	0x0800c5e4

08009a78 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 8009a78:	b480      	push	{r7}
 8009a7a:	b085      	sub	sp, #20
 8009a7c:	af00      	add	r7, sp, #0
 8009a7e:	4603      	mov	r3, r0
 8009a80:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8009a82:	2300      	movs	r3, #0
 8009a84:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 8009a86:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8009a8a:	2b84      	cmp	r3, #132	@ 0x84
 8009a8c:	d005      	beq.n	8009a9a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8009a8e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	4413      	add	r3, r2
 8009a96:	3303      	adds	r3, #3
 8009a98:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 8009a9a:	68fb      	ldr	r3, [r7, #12]
}
 8009a9c:	4618      	mov	r0, r3
 8009a9e:	3714      	adds	r7, #20
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009aa6:	4770      	bx	lr

08009aa8 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 8009aac:	f000 fa5c 	bl	8009f68 <vTaskStartScheduler>
  
  return osOK;
 8009ab0:	2300      	movs	r3, #0
}
 8009ab2:	4618      	mov	r0, r3
 8009ab4:	bd80      	pop	{r7, pc}

08009ab6 <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 8009ab6:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009ab8:	b087      	sub	sp, #28
 8009aba:	af02      	add	r7, sp, #8
 8009abc:	6078      	str	r0, [r7, #4]
 8009abe:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	685c      	ldr	r4, [r3, #4]
 8009ac4:	687b      	ldr	r3, [r7, #4]
 8009ac6:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009acc:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8009ace:	687b      	ldr	r3, [r7, #4]
 8009ad0:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8009ad4:	4618      	mov	r0, r3
 8009ad6:	f7ff ffcf 	bl	8009a78 <makeFreeRtosPriority>
 8009ada:	4602      	mov	r2, r0
 8009adc:	f107 030c 	add.w	r3, r7, #12
 8009ae0:	9301      	str	r3, [sp, #4]
 8009ae2:	9200      	str	r2, [sp, #0]
 8009ae4:	683b      	ldr	r3, [r7, #0]
 8009ae6:	4632      	mov	r2, r6
 8009ae8:	4629      	mov	r1, r5
 8009aea:	4620      	mov	r0, r4
 8009aec:	f000 f8d2 	bl	8009c94 <xTaskCreate>
 8009af0:	4603      	mov	r3, r0
 8009af2:	2b01      	cmp	r3, #1
 8009af4:	d001      	beq.n	8009afa <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 8009af6:	2300      	movs	r3, #0
 8009af8:	e000      	b.n	8009afc <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 8009afa:	68fb      	ldr	r3, [r7, #12]
}
 8009afc:	4618      	mov	r0, r3
 8009afe:	3714      	adds	r7, #20
 8009b00:	46bd      	mov	sp, r7
 8009b02:	bdf0      	pop	{r4, r5, r6, r7, pc}

08009b04 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8009b04:	b580      	push	{r7, lr}
 8009b06:	b084      	sub	sp, #16
 8009b08:	af00      	add	r7, sp, #0
 8009b0a:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8009b10:	68fb      	ldr	r3, [r7, #12]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d001      	beq.n	8009b1a <osDelay+0x16>
 8009b16:	68fb      	ldr	r3, [r7, #12]
 8009b18:	e000      	b.n	8009b1c <osDelay+0x18>
 8009b1a:	2301      	movs	r3, #1
 8009b1c:	4618      	mov	r0, r3
 8009b1e:	f000 f9ed 	bl	8009efc <vTaskDelay>
  
  return osOK;
 8009b22:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8009b24:	4618      	mov	r0, r3
 8009b26:	3710      	adds	r7, #16
 8009b28:	46bd      	mov	sp, r7
 8009b2a:	bd80      	pop	{r7, pc}

08009b2c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8009b2c:	b480      	push	{r7}
 8009b2e:	b083      	sub	sp, #12
 8009b30:	af00      	add	r7, sp, #0
 8009b32:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	f103 0208 	add.w	r2, r3, #8
 8009b3a:	687b      	ldr	r3, [r7, #4]
 8009b3c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8009b3e:	687b      	ldr	r3, [r7, #4]
 8009b40:	f04f 32ff 	mov.w	r2, #4294967295
 8009b44:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b46:	687b      	ldr	r3, [r7, #4]
 8009b48:	f103 0208 	add.w	r2, r3, #8
 8009b4c:	687b      	ldr	r3, [r7, #4]
 8009b4e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8009b50:	687b      	ldr	r3, [r7, #4]
 8009b52:	f103 0208 	add.w	r2, r3, #8
 8009b56:	687b      	ldr	r3, [r7, #4]
 8009b58:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8009b5a:	687b      	ldr	r3, [r7, #4]
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8009b60:	bf00      	nop
 8009b62:	370c      	adds	r7, #12
 8009b64:	46bd      	mov	sp, r7
 8009b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b6a:	4770      	bx	lr

08009b6c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8009b6c:	b480      	push	{r7}
 8009b6e:	b083      	sub	sp, #12
 8009b70:	af00      	add	r7, sp, #0
 8009b72:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8009b74:	687b      	ldr	r3, [r7, #4]
 8009b76:	2200      	movs	r2, #0
 8009b78:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8009b7a:	bf00      	nop
 8009b7c:	370c      	adds	r7, #12
 8009b7e:	46bd      	mov	sp, r7
 8009b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b84:	4770      	bx	lr

08009b86 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009b86:	b480      	push	{r7}
 8009b88:	b085      	sub	sp, #20
 8009b8a:	af00      	add	r7, sp, #0
 8009b8c:	6078      	str	r0, [r7, #4]
 8009b8e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8009b90:	687b      	ldr	r3, [r7, #4]
 8009b92:	685b      	ldr	r3, [r3, #4]
 8009b94:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8009b96:	683b      	ldr	r3, [r7, #0]
 8009b98:	68fa      	ldr	r2, [r7, #12]
 8009b9a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	689a      	ldr	r2, [r3, #8]
 8009ba0:	683b      	ldr	r3, [r7, #0]
 8009ba2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8009ba4:	68fb      	ldr	r3, [r7, #12]
 8009ba6:	689b      	ldr	r3, [r3, #8]
 8009ba8:	683a      	ldr	r2, [r7, #0]
 8009baa:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8009bac:	68fb      	ldr	r3, [r7, #12]
 8009bae:	683a      	ldr	r2, [r7, #0]
 8009bb0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8009bb2:	683b      	ldr	r3, [r7, #0]
 8009bb4:	687a      	ldr	r2, [r7, #4]
 8009bb6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	1c5a      	adds	r2, r3, #1
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	601a      	str	r2, [r3, #0]
}
 8009bc2:	bf00      	nop
 8009bc4:	3714      	adds	r7, #20
 8009bc6:	46bd      	mov	sp, r7
 8009bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bcc:	4770      	bx	lr

08009bce <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8009bce:	b480      	push	{r7}
 8009bd0:	b085      	sub	sp, #20
 8009bd2:	af00      	add	r7, sp, #0
 8009bd4:	6078      	str	r0, [r7, #4]
 8009bd6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8009bd8:	683b      	ldr	r3, [r7, #0]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8009bde:	68bb      	ldr	r3, [r7, #8]
 8009be0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009be4:	d103      	bne.n	8009bee <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8009be6:	687b      	ldr	r3, [r7, #4]
 8009be8:	691b      	ldr	r3, [r3, #16]
 8009bea:	60fb      	str	r3, [r7, #12]
 8009bec:	e00c      	b.n	8009c08 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8009bee:	687b      	ldr	r3, [r7, #4]
 8009bf0:	3308      	adds	r3, #8
 8009bf2:	60fb      	str	r3, [r7, #12]
 8009bf4:	e002      	b.n	8009bfc <vListInsert+0x2e>
 8009bf6:	68fb      	ldr	r3, [r7, #12]
 8009bf8:	685b      	ldr	r3, [r3, #4]
 8009bfa:	60fb      	str	r3, [r7, #12]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	685b      	ldr	r3, [r3, #4]
 8009c00:	681b      	ldr	r3, [r3, #0]
 8009c02:	68ba      	ldr	r2, [r7, #8]
 8009c04:	429a      	cmp	r2, r3
 8009c06:	d2f6      	bcs.n	8009bf6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8009c08:	68fb      	ldr	r3, [r7, #12]
 8009c0a:	685a      	ldr	r2, [r3, #4]
 8009c0c:	683b      	ldr	r3, [r7, #0]
 8009c0e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8009c10:	683b      	ldr	r3, [r7, #0]
 8009c12:	685b      	ldr	r3, [r3, #4]
 8009c14:	683a      	ldr	r2, [r7, #0]
 8009c16:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8009c18:	683b      	ldr	r3, [r7, #0]
 8009c1a:	68fa      	ldr	r2, [r7, #12]
 8009c1c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	683a      	ldr	r2, [r7, #0]
 8009c22:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8009c24:	683b      	ldr	r3, [r7, #0]
 8009c26:	687a      	ldr	r2, [r7, #4]
 8009c28:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	1c5a      	adds	r2, r3, #1
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	601a      	str	r2, [r3, #0]
}
 8009c34:	bf00      	nop
 8009c36:	3714      	adds	r7, #20
 8009c38:	46bd      	mov	sp, r7
 8009c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c3e:	4770      	bx	lr

08009c40 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8009c40:	b480      	push	{r7}
 8009c42:	b085      	sub	sp, #20
 8009c44:	af00      	add	r7, sp, #0
 8009c46:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8009c48:	687b      	ldr	r3, [r7, #4]
 8009c4a:	691b      	ldr	r3, [r3, #16]
 8009c4c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8009c4e:	687b      	ldr	r3, [r7, #4]
 8009c50:	685b      	ldr	r3, [r3, #4]
 8009c52:	687a      	ldr	r2, [r7, #4]
 8009c54:	6892      	ldr	r2, [r2, #8]
 8009c56:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	689b      	ldr	r3, [r3, #8]
 8009c5c:	687a      	ldr	r2, [r7, #4]
 8009c5e:	6852      	ldr	r2, [r2, #4]
 8009c60:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	685b      	ldr	r3, [r3, #4]
 8009c66:	687a      	ldr	r2, [r7, #4]
 8009c68:	429a      	cmp	r2, r3
 8009c6a:	d103      	bne.n	8009c74 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	689a      	ldr	r2, [r3, #8]
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8009c74:	687b      	ldr	r3, [r7, #4]
 8009c76:	2200      	movs	r2, #0
 8009c78:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	681b      	ldr	r3, [r3, #0]
 8009c7e:	1e5a      	subs	r2, r3, #1
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
}
 8009c88:	4618      	mov	r0, r3
 8009c8a:	3714      	adds	r7, #20
 8009c8c:	46bd      	mov	sp, r7
 8009c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c92:	4770      	bx	lr

08009c94 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009c94:	b580      	push	{r7, lr}
 8009c96:	b08c      	sub	sp, #48	@ 0x30
 8009c98:	af04      	add	r7, sp, #16
 8009c9a:	60f8      	str	r0, [r7, #12]
 8009c9c:	60b9      	str	r1, [r7, #8]
 8009c9e:	603b      	str	r3, [r7, #0]
 8009ca0:	4613      	mov	r3, r2
 8009ca2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009ca4:	88fb      	ldrh	r3, [r7, #6]
 8009ca6:	009b      	lsls	r3, r3, #2
 8009ca8:	4618      	mov	r0, r3
 8009caa:	f000 fe95 	bl	800a9d8 <pvPortMalloc>
 8009cae:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009cb0:	697b      	ldr	r3, [r7, #20]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d00e      	beq.n	8009cd4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009cb6:	2054      	movs	r0, #84	@ 0x54
 8009cb8:	f000 fe8e 	bl	800a9d8 <pvPortMalloc>
 8009cbc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009cbe:	69fb      	ldr	r3, [r7, #28]
 8009cc0:	2b00      	cmp	r3, #0
 8009cc2:	d003      	beq.n	8009ccc <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009cc4:	69fb      	ldr	r3, [r7, #28]
 8009cc6:	697a      	ldr	r2, [r7, #20]
 8009cc8:	631a      	str	r2, [r3, #48]	@ 0x30
 8009cca:	e005      	b.n	8009cd8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8009ccc:	6978      	ldr	r0, [r7, #20]
 8009cce:	f000 fe95 	bl	800a9fc <vPortFree>
 8009cd2:	e001      	b.n	8009cd8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8009cd4:	2300      	movs	r3, #0
 8009cd6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d013      	beq.n	8009d06 <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8009cde:	88fa      	ldrh	r2, [r7, #6]
 8009ce0:	2300      	movs	r3, #0
 8009ce2:	9303      	str	r3, [sp, #12]
 8009ce4:	69fb      	ldr	r3, [r7, #28]
 8009ce6:	9302      	str	r3, [sp, #8]
 8009ce8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009cea:	9301      	str	r3, [sp, #4]
 8009cec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009cee:	9300      	str	r3, [sp, #0]
 8009cf0:	683b      	ldr	r3, [r7, #0]
 8009cf2:	68b9      	ldr	r1, [r7, #8]
 8009cf4:	68f8      	ldr	r0, [r7, #12]
 8009cf6:	f000 f80e 	bl	8009d16 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009cfa:	69f8      	ldr	r0, [r7, #28]
 8009cfc:	f000 f894 	bl	8009e28 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8009d00:	2301      	movs	r3, #1
 8009d02:	61bb      	str	r3, [r7, #24]
 8009d04:	e002      	b.n	8009d0c <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8009d06:	f04f 33ff 	mov.w	r3, #4294967295
 8009d0a:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8009d0c:	69bb      	ldr	r3, [r7, #24]
	}
 8009d0e:	4618      	mov	r0, r3
 8009d10:	3720      	adds	r7, #32
 8009d12:	46bd      	mov	sp, r7
 8009d14:	bd80      	pop	{r7, pc}

08009d16 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8009d16:	b580      	push	{r7, lr}
 8009d18:	b088      	sub	sp, #32
 8009d1a:	af00      	add	r7, sp, #0
 8009d1c:	60f8      	str	r0, [r7, #12]
 8009d1e:	60b9      	str	r1, [r7, #8]
 8009d20:	607a      	str	r2, [r7, #4]
 8009d22:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8009d24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d26:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8009d28:	687b      	ldr	r3, [r7, #4]
 8009d2a:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8009d2e:	3b01      	subs	r3, #1
 8009d30:	009b      	lsls	r3, r3, #2
 8009d32:	4413      	add	r3, r2
 8009d34:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009d36:	69bb      	ldr	r3, [r7, #24]
 8009d38:	f023 0307 	bic.w	r3, r3, #7
 8009d3c:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009d3e:	69bb      	ldr	r3, [r7, #24]
 8009d40:	f003 0307 	and.w	r3, r3, #7
 8009d44:	2b00      	cmp	r3, #0
 8009d46:	d00b      	beq.n	8009d60 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8009d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009d4c:	f383 8811 	msr	BASEPRI, r3
 8009d50:	f3bf 8f6f 	isb	sy
 8009d54:	f3bf 8f4f 	dsb	sy
 8009d58:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8009d5a:	bf00      	nop
 8009d5c:	bf00      	nop
 8009d5e:	e7fd      	b.n	8009d5c <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009d60:	68bb      	ldr	r3, [r7, #8]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d01f      	beq.n	8009da6 <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d66:	2300      	movs	r3, #0
 8009d68:	61fb      	str	r3, [r7, #28]
 8009d6a:	e012      	b.n	8009d92 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009d6c:	68ba      	ldr	r2, [r7, #8]
 8009d6e:	69fb      	ldr	r3, [r7, #28]
 8009d70:	4413      	add	r3, r2
 8009d72:	7819      	ldrb	r1, [r3, #0]
 8009d74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009d76:	69fb      	ldr	r3, [r7, #28]
 8009d78:	4413      	add	r3, r2
 8009d7a:	3334      	adds	r3, #52	@ 0x34
 8009d7c:	460a      	mov	r2, r1
 8009d7e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009d80:	68ba      	ldr	r2, [r7, #8]
 8009d82:	69fb      	ldr	r3, [r7, #28]
 8009d84:	4413      	add	r3, r2
 8009d86:	781b      	ldrb	r3, [r3, #0]
 8009d88:	2b00      	cmp	r3, #0
 8009d8a:	d006      	beq.n	8009d9a <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009d8c:	69fb      	ldr	r3, [r7, #28]
 8009d8e:	3301      	adds	r3, #1
 8009d90:	61fb      	str	r3, [r7, #28]
 8009d92:	69fb      	ldr	r3, [r7, #28]
 8009d94:	2b0f      	cmp	r3, #15
 8009d96:	d9e9      	bls.n	8009d6c <prvInitialiseNewTask+0x56>
 8009d98:	e000      	b.n	8009d9c <prvInitialiseNewTask+0x86>
			{
				break;
 8009d9a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009d9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009d9e:	2200      	movs	r2, #0
 8009da0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8009da4:	e003      	b.n	8009dae <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8009da6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009da8:	2200      	movs	r2, #0
 8009daa:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009dae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009db0:	2b06      	cmp	r3, #6
 8009db2:	d901      	bls.n	8009db8 <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8009db4:	2306      	movs	r3, #6
 8009db6:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8009db8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dba:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dbc:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8009dbe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc0:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8009dc2:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8009dc4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dc6:	2200      	movs	r2, #0
 8009dc8:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8009dca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dcc:	3304      	adds	r3, #4
 8009dce:	4618      	mov	r0, r3
 8009dd0:	f7ff fecc 	bl	8009b6c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8009dd4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dd6:	3318      	adds	r3, #24
 8009dd8:	4618      	mov	r0, r3
 8009dda:	f7ff fec7 	bl	8009b6c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8009dde:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009de0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009de2:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009de4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8009de6:	f1c3 0207 	rsb	r2, r3, #7
 8009dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dec:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8009dee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009df2:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8009df4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009df6:	2200      	movs	r2, #0
 8009df8:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8009dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009dfc:	2200      	movs	r2, #0
 8009dfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009e02:	683a      	ldr	r2, [r7, #0]
 8009e04:	68f9      	ldr	r1, [r7, #12]
 8009e06:	69b8      	ldr	r0, [r7, #24]
 8009e08:	f000 fbd6 	bl	800a5b8 <pxPortInitialiseStack>
 8009e0c:	4602      	mov	r2, r0
 8009e0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8009e10:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009e12:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d002      	beq.n	8009e1e <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009e18:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8009e1a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8009e1c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009e1e:	bf00      	nop
 8009e20:	3720      	adds	r7, #32
 8009e22:	46bd      	mov	sp, r7
 8009e24:	bd80      	pop	{r7, pc}
	...

08009e28 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009e28:	b580      	push	{r7, lr}
 8009e2a:	b082      	sub	sp, #8
 8009e2c:	af00      	add	r7, sp, #0
 8009e2e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009e30:	f000 fcf2 	bl	800a818 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009e34:	4b2a      	ldr	r3, [pc, #168]	@ (8009ee0 <prvAddNewTaskToReadyList+0xb8>)
 8009e36:	681b      	ldr	r3, [r3, #0]
 8009e38:	3301      	adds	r3, #1
 8009e3a:	4a29      	ldr	r2, [pc, #164]	@ (8009ee0 <prvAddNewTaskToReadyList+0xb8>)
 8009e3c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009e3e:	4b29      	ldr	r3, [pc, #164]	@ (8009ee4 <prvAddNewTaskToReadyList+0xbc>)
 8009e40:	681b      	ldr	r3, [r3, #0]
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d109      	bne.n	8009e5a <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009e46:	4a27      	ldr	r2, [pc, #156]	@ (8009ee4 <prvAddNewTaskToReadyList+0xbc>)
 8009e48:	687b      	ldr	r3, [r7, #4]
 8009e4a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009e4c:	4b24      	ldr	r3, [pc, #144]	@ (8009ee0 <prvAddNewTaskToReadyList+0xb8>)
 8009e4e:	681b      	ldr	r3, [r3, #0]
 8009e50:	2b01      	cmp	r3, #1
 8009e52:	d110      	bne.n	8009e76 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009e54:	f000 faac 	bl	800a3b0 <prvInitialiseTaskLists>
 8009e58:	e00d      	b.n	8009e76 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009e5a:	4b23      	ldr	r3, [pc, #140]	@ (8009ee8 <prvAddNewTaskToReadyList+0xc0>)
 8009e5c:	681b      	ldr	r3, [r3, #0]
 8009e5e:	2b00      	cmp	r3, #0
 8009e60:	d109      	bne.n	8009e76 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009e62:	4b20      	ldr	r3, [pc, #128]	@ (8009ee4 <prvAddNewTaskToReadyList+0xbc>)
 8009e64:	681b      	ldr	r3, [r3, #0]
 8009e66:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e68:	687b      	ldr	r3, [r7, #4]
 8009e6a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e6c:	429a      	cmp	r2, r3
 8009e6e:	d802      	bhi.n	8009e76 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009e70:	4a1c      	ldr	r2, [pc, #112]	@ (8009ee4 <prvAddNewTaskToReadyList+0xbc>)
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009e76:	4b1d      	ldr	r3, [pc, #116]	@ (8009eec <prvAddNewTaskToReadyList+0xc4>)
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	3301      	adds	r3, #1
 8009e7c:	4a1b      	ldr	r2, [pc, #108]	@ (8009eec <prvAddNewTaskToReadyList+0xc4>)
 8009e7e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009e84:	2201      	movs	r2, #1
 8009e86:	409a      	lsls	r2, r3
 8009e88:	4b19      	ldr	r3, [pc, #100]	@ (8009ef0 <prvAddNewTaskToReadyList+0xc8>)
 8009e8a:	681b      	ldr	r3, [r3, #0]
 8009e8c:	4313      	orrs	r3, r2
 8009e8e:	4a18      	ldr	r2, [pc, #96]	@ (8009ef0 <prvAddNewTaskToReadyList+0xc8>)
 8009e90:	6013      	str	r3, [r2, #0]
 8009e92:	687b      	ldr	r3, [r7, #4]
 8009e94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009e96:	4613      	mov	r3, r2
 8009e98:	009b      	lsls	r3, r3, #2
 8009e9a:	4413      	add	r3, r2
 8009e9c:	009b      	lsls	r3, r3, #2
 8009e9e:	4a15      	ldr	r2, [pc, #84]	@ (8009ef4 <prvAddNewTaskToReadyList+0xcc>)
 8009ea0:	441a      	add	r2, r3
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	3304      	adds	r3, #4
 8009ea6:	4619      	mov	r1, r3
 8009ea8:	4610      	mov	r0, r2
 8009eaa:	f7ff fe6c 	bl	8009b86 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009eae:	f000 fce5 	bl	800a87c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009eb2:	4b0d      	ldr	r3, [pc, #52]	@ (8009ee8 <prvAddNewTaskToReadyList+0xc0>)
 8009eb4:	681b      	ldr	r3, [r3, #0]
 8009eb6:	2b00      	cmp	r3, #0
 8009eb8:	d00e      	beq.n	8009ed8 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009eba:	4b0a      	ldr	r3, [pc, #40]	@ (8009ee4 <prvAddNewTaskToReadyList+0xbc>)
 8009ebc:	681b      	ldr	r3, [r3, #0]
 8009ebe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8009ec0:	687b      	ldr	r3, [r7, #4]
 8009ec2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8009ec4:	429a      	cmp	r2, r3
 8009ec6:	d207      	bcs.n	8009ed8 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ec8:	4b0b      	ldr	r3, [pc, #44]	@ (8009ef8 <prvAddNewTaskToReadyList+0xd0>)
 8009eca:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009ece:	601a      	str	r2, [r3, #0]
 8009ed0:	f3bf 8f4f 	dsb	sy
 8009ed4:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009ed8:	bf00      	nop
 8009eda:	3708      	adds	r7, #8
 8009edc:	46bd      	mov	sp, r7
 8009ede:	bd80      	pop	{r7, pc}
 8009ee0:	20000518 	.word	0x20000518
 8009ee4:	20000418 	.word	0x20000418
 8009ee8:	20000524 	.word	0x20000524
 8009eec:	20000534 	.word	0x20000534
 8009ef0:	20000520 	.word	0x20000520
 8009ef4:	2000041c 	.word	0x2000041c
 8009ef8:	e000ed04 	.word	0xe000ed04

08009efc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009efc:	b580      	push	{r7, lr}
 8009efe:	b084      	sub	sp, #16
 8009f00:	af00      	add	r7, sp, #0
 8009f02:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009f04:	2300      	movs	r3, #0
 8009f06:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d018      	beq.n	8009f40 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009f0e:	4b14      	ldr	r3, [pc, #80]	@ (8009f60 <vTaskDelay+0x64>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	2b00      	cmp	r3, #0
 8009f14:	d00b      	beq.n	8009f2e <vTaskDelay+0x32>
	__asm volatile
 8009f16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f1a:	f383 8811 	msr	BASEPRI, r3
 8009f1e:	f3bf 8f6f 	isb	sy
 8009f22:	f3bf 8f4f 	dsb	sy
 8009f26:	60bb      	str	r3, [r7, #8]
}
 8009f28:	bf00      	nop
 8009f2a:	bf00      	nop
 8009f2c:	e7fd      	b.n	8009f2a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009f2e:	f000 f865 	bl	8009ffc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009f32:	2100      	movs	r1, #0
 8009f34:	6878      	ldr	r0, [r7, #4]
 8009f36:	f000 fad9 	bl	800a4ec <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009f3a:	f000 f86d 	bl	800a018 <xTaskResumeAll>
 8009f3e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	2b00      	cmp	r3, #0
 8009f44:	d107      	bne.n	8009f56 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8009f46:	4b07      	ldr	r3, [pc, #28]	@ (8009f64 <vTaskDelay+0x68>)
 8009f48:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009f4c:	601a      	str	r2, [r3, #0]
 8009f4e:	f3bf 8f4f 	dsb	sy
 8009f52:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009f56:	bf00      	nop
 8009f58:	3710      	adds	r7, #16
 8009f5a:	46bd      	mov	sp, r7
 8009f5c:	bd80      	pop	{r7, pc}
 8009f5e:	bf00      	nop
 8009f60:	20000540 	.word	0x20000540
 8009f64:	e000ed04 	.word	0xe000ed04

08009f68 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009f68:	b580      	push	{r7, lr}
 8009f6a:	b086      	sub	sp, #24
 8009f6c:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8009f6e:	4b1d      	ldr	r3, [pc, #116]	@ (8009fe4 <vTaskStartScheduler+0x7c>)
 8009f70:	9301      	str	r3, [sp, #4]
 8009f72:	2300      	movs	r3, #0
 8009f74:	9300      	str	r3, [sp, #0]
 8009f76:	2300      	movs	r3, #0
 8009f78:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8009f7c:	491a      	ldr	r1, [pc, #104]	@ (8009fe8 <vTaskStartScheduler+0x80>)
 8009f7e:	481b      	ldr	r0, [pc, #108]	@ (8009fec <vTaskStartScheduler+0x84>)
 8009f80:	f7ff fe88 	bl	8009c94 <xTaskCreate>
 8009f84:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009f86:	68fb      	ldr	r3, [r7, #12]
 8009f88:	2b01      	cmp	r3, #1
 8009f8a:	d116      	bne.n	8009fba <vTaskStartScheduler+0x52>
	__asm volatile
 8009f8c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009f90:	f383 8811 	msr	BASEPRI, r3
 8009f94:	f3bf 8f6f 	isb	sy
 8009f98:	f3bf 8f4f 	dsb	sy
 8009f9c:	60bb      	str	r3, [r7, #8]
}
 8009f9e:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009fa0:	4b13      	ldr	r3, [pc, #76]	@ (8009ff0 <vTaskStartScheduler+0x88>)
 8009fa2:	f04f 32ff 	mov.w	r2, #4294967295
 8009fa6:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009fa8:	4b12      	ldr	r3, [pc, #72]	@ (8009ff4 <vTaskStartScheduler+0x8c>)
 8009faa:	2201      	movs	r2, #1
 8009fac:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009fae:	4b12      	ldr	r3, [pc, #72]	@ (8009ff8 <vTaskStartScheduler+0x90>)
 8009fb0:	2200      	movs	r2, #0
 8009fb2:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009fb4:	f000 fb8c 	bl	800a6d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009fb8:	e00f      	b.n	8009fda <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009fba:	68fb      	ldr	r3, [r7, #12]
 8009fbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009fc0:	d10b      	bne.n	8009fda <vTaskStartScheduler+0x72>
	__asm volatile
 8009fc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009fc6:	f383 8811 	msr	BASEPRI, r3
 8009fca:	f3bf 8f6f 	isb	sy
 8009fce:	f3bf 8f4f 	dsb	sy
 8009fd2:	607b      	str	r3, [r7, #4]
}
 8009fd4:	bf00      	nop
 8009fd6:	bf00      	nop
 8009fd8:	e7fd      	b.n	8009fd6 <vTaskStartScheduler+0x6e>
}
 8009fda:	bf00      	nop
 8009fdc:	3710      	adds	r7, #16
 8009fde:	46bd      	mov	sp, r7
 8009fe0:	bd80      	pop	{r7, pc}
 8009fe2:	bf00      	nop
 8009fe4:	2000053c 	.word	0x2000053c
 8009fe8:	0800c4f0 	.word	0x0800c4f0
 8009fec:	0800a381 	.word	0x0800a381
 8009ff0:	20000538 	.word	0x20000538
 8009ff4:	20000524 	.word	0x20000524
 8009ff8:	2000051c 	.word	0x2000051c

08009ffc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009ffc:	b480      	push	{r7}
 8009ffe:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800a000:	4b04      	ldr	r3, [pc, #16]	@ (800a014 <vTaskSuspendAll+0x18>)
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	3301      	adds	r3, #1
 800a006:	4a03      	ldr	r2, [pc, #12]	@ (800a014 <vTaskSuspendAll+0x18>)
 800a008:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800a00a:	bf00      	nop
 800a00c:	46bd      	mov	sp, r7
 800a00e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a012:	4770      	bx	lr
 800a014:	20000540 	.word	0x20000540

0800a018 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800a01e:	2300      	movs	r3, #0
 800a020:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800a022:	2300      	movs	r3, #0
 800a024:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800a026:	4b42      	ldr	r3, [pc, #264]	@ (800a130 <xTaskResumeAll+0x118>)
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	2b00      	cmp	r3, #0
 800a02c:	d10b      	bne.n	800a046 <xTaskResumeAll+0x2e>
	__asm volatile
 800a02e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a032:	f383 8811 	msr	BASEPRI, r3
 800a036:	f3bf 8f6f 	isb	sy
 800a03a:	f3bf 8f4f 	dsb	sy
 800a03e:	603b      	str	r3, [r7, #0]
}
 800a040:	bf00      	nop
 800a042:	bf00      	nop
 800a044:	e7fd      	b.n	800a042 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800a046:	f000 fbe7 	bl	800a818 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800a04a:	4b39      	ldr	r3, [pc, #228]	@ (800a130 <xTaskResumeAll+0x118>)
 800a04c:	681b      	ldr	r3, [r3, #0]
 800a04e:	3b01      	subs	r3, #1
 800a050:	4a37      	ldr	r2, [pc, #220]	@ (800a130 <xTaskResumeAll+0x118>)
 800a052:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a054:	4b36      	ldr	r3, [pc, #216]	@ (800a130 <xTaskResumeAll+0x118>)
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	2b00      	cmp	r3, #0
 800a05a:	d161      	bne.n	800a120 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800a05c:	4b35      	ldr	r3, [pc, #212]	@ (800a134 <xTaskResumeAll+0x11c>)
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	2b00      	cmp	r3, #0
 800a062:	d05d      	beq.n	800a120 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a064:	e02e      	b.n	800a0c4 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a066:	4b34      	ldr	r3, [pc, #208]	@ (800a138 <xTaskResumeAll+0x120>)
 800a068:	68db      	ldr	r3, [r3, #12]
 800a06a:	68db      	ldr	r3, [r3, #12]
 800a06c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a06e:	68fb      	ldr	r3, [r7, #12]
 800a070:	3318      	adds	r3, #24
 800a072:	4618      	mov	r0, r3
 800a074:	f7ff fde4 	bl	8009c40 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a078:	68fb      	ldr	r3, [r7, #12]
 800a07a:	3304      	adds	r3, #4
 800a07c:	4618      	mov	r0, r3
 800a07e:	f7ff fddf 	bl	8009c40 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800a082:	68fb      	ldr	r3, [r7, #12]
 800a084:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a086:	2201      	movs	r2, #1
 800a088:	409a      	lsls	r2, r3
 800a08a:	4b2c      	ldr	r3, [pc, #176]	@ (800a13c <xTaskResumeAll+0x124>)
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	4313      	orrs	r3, r2
 800a090:	4a2a      	ldr	r2, [pc, #168]	@ (800a13c <xTaskResumeAll+0x124>)
 800a092:	6013      	str	r3, [r2, #0]
 800a094:	68fb      	ldr	r3, [r7, #12]
 800a096:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a098:	4613      	mov	r3, r2
 800a09a:	009b      	lsls	r3, r3, #2
 800a09c:	4413      	add	r3, r2
 800a09e:	009b      	lsls	r3, r3, #2
 800a0a0:	4a27      	ldr	r2, [pc, #156]	@ (800a140 <xTaskResumeAll+0x128>)
 800a0a2:	441a      	add	r2, r3
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	3304      	adds	r3, #4
 800a0a8:	4619      	mov	r1, r3
 800a0aa:	4610      	mov	r0, r2
 800a0ac:	f7ff fd6b 	bl	8009b86 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a0b4:	4b23      	ldr	r3, [pc, #140]	@ (800a144 <xTaskResumeAll+0x12c>)
 800a0b6:	681b      	ldr	r3, [r3, #0]
 800a0b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a0ba:	429a      	cmp	r2, r3
 800a0bc:	d302      	bcc.n	800a0c4 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 800a0be:	4b22      	ldr	r3, [pc, #136]	@ (800a148 <xTaskResumeAll+0x130>)
 800a0c0:	2201      	movs	r2, #1
 800a0c2:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800a0c4:	4b1c      	ldr	r3, [pc, #112]	@ (800a138 <xTaskResumeAll+0x120>)
 800a0c6:	681b      	ldr	r3, [r3, #0]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d1cc      	bne.n	800a066 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800a0cc:	68fb      	ldr	r3, [r7, #12]
 800a0ce:	2b00      	cmp	r3, #0
 800a0d0:	d001      	beq.n	800a0d6 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800a0d2:	f000 f9eb 	bl	800a4ac <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800a0d6:	4b1d      	ldr	r3, [pc, #116]	@ (800a14c <xTaskResumeAll+0x134>)
 800a0d8:	681b      	ldr	r3, [r3, #0]
 800a0da:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	2b00      	cmp	r3, #0
 800a0e0:	d010      	beq.n	800a104 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800a0e2:	f000 f837 	bl	800a154 <xTaskIncrementTick>
 800a0e6:	4603      	mov	r3, r0
 800a0e8:	2b00      	cmp	r3, #0
 800a0ea:	d002      	beq.n	800a0f2 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 800a0ec:	4b16      	ldr	r3, [pc, #88]	@ (800a148 <xTaskResumeAll+0x130>)
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 800a0f2:	687b      	ldr	r3, [r7, #4]
 800a0f4:	3b01      	subs	r3, #1
 800a0f6:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800a0f8:	687b      	ldr	r3, [r7, #4]
 800a0fa:	2b00      	cmp	r3, #0
 800a0fc:	d1f1      	bne.n	800a0e2 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 800a0fe:	4b13      	ldr	r3, [pc, #76]	@ (800a14c <xTaskResumeAll+0x134>)
 800a100:	2200      	movs	r2, #0
 800a102:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800a104:	4b10      	ldr	r3, [pc, #64]	@ (800a148 <xTaskResumeAll+0x130>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	2b00      	cmp	r3, #0
 800a10a:	d009      	beq.n	800a120 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800a10c:	2301      	movs	r3, #1
 800a10e:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800a110:	4b0f      	ldr	r3, [pc, #60]	@ (800a150 <xTaskResumeAll+0x138>)
 800a112:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a116:	601a      	str	r2, [r3, #0]
 800a118:	f3bf 8f4f 	dsb	sy
 800a11c:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800a120:	f000 fbac 	bl	800a87c <vPortExitCritical>

	return xAlreadyYielded;
 800a124:	68bb      	ldr	r3, [r7, #8]
}
 800a126:	4618      	mov	r0, r3
 800a128:	3710      	adds	r7, #16
 800a12a:	46bd      	mov	sp, r7
 800a12c:	bd80      	pop	{r7, pc}
 800a12e:	bf00      	nop
 800a130:	20000540 	.word	0x20000540
 800a134:	20000518 	.word	0x20000518
 800a138:	200004d8 	.word	0x200004d8
 800a13c:	20000520 	.word	0x20000520
 800a140:	2000041c 	.word	0x2000041c
 800a144:	20000418 	.word	0x20000418
 800a148:	2000052c 	.word	0x2000052c
 800a14c:	20000528 	.word	0x20000528
 800a150:	e000ed04 	.word	0xe000ed04

0800a154 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800a154:	b580      	push	{r7, lr}
 800a156:	b086      	sub	sp, #24
 800a158:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800a15a:	2300      	movs	r3, #0
 800a15c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a15e:	4b4f      	ldr	r3, [pc, #316]	@ (800a29c <xTaskIncrementTick+0x148>)
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	2b00      	cmp	r3, #0
 800a164:	f040 808f 	bne.w	800a286 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800a168:	4b4d      	ldr	r3, [pc, #308]	@ (800a2a0 <xTaskIncrementTick+0x14c>)
 800a16a:	681b      	ldr	r3, [r3, #0]
 800a16c:	3301      	adds	r3, #1
 800a16e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800a170:	4a4b      	ldr	r2, [pc, #300]	@ (800a2a0 <xTaskIncrementTick+0x14c>)
 800a172:	693b      	ldr	r3, [r7, #16]
 800a174:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800a176:	693b      	ldr	r3, [r7, #16]
 800a178:	2b00      	cmp	r3, #0
 800a17a:	d121      	bne.n	800a1c0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800a17c:	4b49      	ldr	r3, [pc, #292]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	681b      	ldr	r3, [r3, #0]
 800a182:	2b00      	cmp	r3, #0
 800a184:	d00b      	beq.n	800a19e <xTaskIncrementTick+0x4a>
	__asm volatile
 800a186:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a18a:	f383 8811 	msr	BASEPRI, r3
 800a18e:	f3bf 8f6f 	isb	sy
 800a192:	f3bf 8f4f 	dsb	sy
 800a196:	603b      	str	r3, [r7, #0]
}
 800a198:	bf00      	nop
 800a19a:	bf00      	nop
 800a19c:	e7fd      	b.n	800a19a <xTaskIncrementTick+0x46>
 800a19e:	4b41      	ldr	r3, [pc, #260]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1a0:	681b      	ldr	r3, [r3, #0]
 800a1a2:	60fb      	str	r3, [r7, #12]
 800a1a4:	4b40      	ldr	r3, [pc, #256]	@ (800a2a8 <xTaskIncrementTick+0x154>)
 800a1a6:	681b      	ldr	r3, [r3, #0]
 800a1a8:	4a3e      	ldr	r2, [pc, #248]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1aa:	6013      	str	r3, [r2, #0]
 800a1ac:	4a3e      	ldr	r2, [pc, #248]	@ (800a2a8 <xTaskIncrementTick+0x154>)
 800a1ae:	68fb      	ldr	r3, [r7, #12]
 800a1b0:	6013      	str	r3, [r2, #0]
 800a1b2:	4b3e      	ldr	r3, [pc, #248]	@ (800a2ac <xTaskIncrementTick+0x158>)
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	3301      	adds	r3, #1
 800a1b8:	4a3c      	ldr	r2, [pc, #240]	@ (800a2ac <xTaskIncrementTick+0x158>)
 800a1ba:	6013      	str	r3, [r2, #0]
 800a1bc:	f000 f976 	bl	800a4ac <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800a1c0:	4b3b      	ldr	r3, [pc, #236]	@ (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1c2:	681b      	ldr	r3, [r3, #0]
 800a1c4:	693a      	ldr	r2, [r7, #16]
 800a1c6:	429a      	cmp	r2, r3
 800a1c8:	d348      	bcc.n	800a25c <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a1ca:	4b36      	ldr	r3, [pc, #216]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	681b      	ldr	r3, [r3, #0]
 800a1d0:	2b00      	cmp	r3, #0
 800a1d2:	d104      	bne.n	800a1de <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a1d4:	4b36      	ldr	r3, [pc, #216]	@ (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1d6:	f04f 32ff 	mov.w	r2, #4294967295
 800a1da:	601a      	str	r2, [r3, #0]
					break;
 800a1dc:	e03e      	b.n	800a25c <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a1de:	4b31      	ldr	r3, [pc, #196]	@ (800a2a4 <xTaskIncrementTick+0x150>)
 800a1e0:	681b      	ldr	r3, [r3, #0]
 800a1e2:	68db      	ldr	r3, [r3, #12]
 800a1e4:	68db      	ldr	r3, [r3, #12]
 800a1e6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800a1e8:	68bb      	ldr	r3, [r7, #8]
 800a1ea:	685b      	ldr	r3, [r3, #4]
 800a1ec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800a1ee:	693a      	ldr	r2, [r7, #16]
 800a1f0:	687b      	ldr	r3, [r7, #4]
 800a1f2:	429a      	cmp	r2, r3
 800a1f4:	d203      	bcs.n	800a1fe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800a1f6:	4a2e      	ldr	r2, [pc, #184]	@ (800a2b0 <xTaskIncrementTick+0x15c>)
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800a1fc:	e02e      	b.n	800a25c <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a1fe:	68bb      	ldr	r3, [r7, #8]
 800a200:	3304      	adds	r3, #4
 800a202:	4618      	mov	r0, r3
 800a204:	f7ff fd1c 	bl	8009c40 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800a208:	68bb      	ldr	r3, [r7, #8]
 800a20a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800a20c:	2b00      	cmp	r3, #0
 800a20e:	d004      	beq.n	800a21a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800a210:	68bb      	ldr	r3, [r7, #8]
 800a212:	3318      	adds	r3, #24
 800a214:	4618      	mov	r0, r3
 800a216:	f7ff fd13 	bl	8009c40 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800a21a:	68bb      	ldr	r3, [r7, #8]
 800a21c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a21e:	2201      	movs	r2, #1
 800a220:	409a      	lsls	r2, r3
 800a222:	4b24      	ldr	r3, [pc, #144]	@ (800a2b4 <xTaskIncrementTick+0x160>)
 800a224:	681b      	ldr	r3, [r3, #0]
 800a226:	4313      	orrs	r3, r2
 800a228:	4a22      	ldr	r2, [pc, #136]	@ (800a2b4 <xTaskIncrementTick+0x160>)
 800a22a:	6013      	str	r3, [r2, #0]
 800a22c:	68bb      	ldr	r3, [r7, #8]
 800a22e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a230:	4613      	mov	r3, r2
 800a232:	009b      	lsls	r3, r3, #2
 800a234:	4413      	add	r3, r2
 800a236:	009b      	lsls	r3, r3, #2
 800a238:	4a1f      	ldr	r2, [pc, #124]	@ (800a2b8 <xTaskIncrementTick+0x164>)
 800a23a:	441a      	add	r2, r3
 800a23c:	68bb      	ldr	r3, [r7, #8]
 800a23e:	3304      	adds	r3, #4
 800a240:	4619      	mov	r1, r3
 800a242:	4610      	mov	r0, r2
 800a244:	f7ff fc9f 	bl	8009b86 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800a248:	68bb      	ldr	r3, [r7, #8]
 800a24a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a24c:	4b1b      	ldr	r3, [pc, #108]	@ (800a2bc <xTaskIncrementTick+0x168>)
 800a24e:	681b      	ldr	r3, [r3, #0]
 800a250:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a252:	429a      	cmp	r2, r3
 800a254:	d3b9      	bcc.n	800a1ca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800a256:	2301      	movs	r3, #1
 800a258:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a25a:	e7b6      	b.n	800a1ca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800a25c:	4b17      	ldr	r3, [pc, #92]	@ (800a2bc <xTaskIncrementTick+0x168>)
 800a25e:	681b      	ldr	r3, [r3, #0]
 800a260:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800a262:	4915      	ldr	r1, [pc, #84]	@ (800a2b8 <xTaskIncrementTick+0x164>)
 800a264:	4613      	mov	r3, r2
 800a266:	009b      	lsls	r3, r3, #2
 800a268:	4413      	add	r3, r2
 800a26a:	009b      	lsls	r3, r3, #2
 800a26c:	440b      	add	r3, r1
 800a26e:	681b      	ldr	r3, [r3, #0]
 800a270:	2b01      	cmp	r3, #1
 800a272:	d901      	bls.n	800a278 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 800a274:	2301      	movs	r3, #1
 800a276:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800a278:	4b11      	ldr	r3, [pc, #68]	@ (800a2c0 <xTaskIncrementTick+0x16c>)
 800a27a:	681b      	ldr	r3, [r3, #0]
 800a27c:	2b00      	cmp	r3, #0
 800a27e:	d007      	beq.n	800a290 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 800a280:	2301      	movs	r3, #1
 800a282:	617b      	str	r3, [r7, #20]
 800a284:	e004      	b.n	800a290 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800a286:	4b0f      	ldr	r3, [pc, #60]	@ (800a2c4 <xTaskIncrementTick+0x170>)
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	3301      	adds	r3, #1
 800a28c:	4a0d      	ldr	r2, [pc, #52]	@ (800a2c4 <xTaskIncrementTick+0x170>)
 800a28e:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800a290:	697b      	ldr	r3, [r7, #20]
}
 800a292:	4618      	mov	r0, r3
 800a294:	3718      	adds	r7, #24
 800a296:	46bd      	mov	sp, r7
 800a298:	bd80      	pop	{r7, pc}
 800a29a:	bf00      	nop
 800a29c:	20000540 	.word	0x20000540
 800a2a0:	2000051c 	.word	0x2000051c
 800a2a4:	200004d0 	.word	0x200004d0
 800a2a8:	200004d4 	.word	0x200004d4
 800a2ac:	20000530 	.word	0x20000530
 800a2b0:	20000538 	.word	0x20000538
 800a2b4:	20000520 	.word	0x20000520
 800a2b8:	2000041c 	.word	0x2000041c
 800a2bc:	20000418 	.word	0x20000418
 800a2c0:	2000052c 	.word	0x2000052c
 800a2c4:	20000528 	.word	0x20000528

0800a2c8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800a2c8:	b480      	push	{r7}
 800a2ca:	b087      	sub	sp, #28
 800a2cc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800a2ce:	4b27      	ldr	r3, [pc, #156]	@ (800a36c <vTaskSwitchContext+0xa4>)
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	2b00      	cmp	r3, #0
 800a2d4:	d003      	beq.n	800a2de <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800a2d6:	4b26      	ldr	r3, [pc, #152]	@ (800a370 <vTaskSwitchContext+0xa8>)
 800a2d8:	2201      	movs	r2, #1
 800a2da:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800a2dc:	e040      	b.n	800a360 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800a2de:	4b24      	ldr	r3, [pc, #144]	@ (800a370 <vTaskSwitchContext+0xa8>)
 800a2e0:	2200      	movs	r2, #0
 800a2e2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a2e4:	4b23      	ldr	r3, [pc, #140]	@ (800a374 <vTaskSwitchContext+0xac>)
 800a2e6:	681b      	ldr	r3, [r3, #0]
 800a2e8:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 800a2ea:	68fb      	ldr	r3, [r7, #12]
 800a2ec:	fab3 f383 	clz	r3, r3
 800a2f0:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 800a2f2:	7afb      	ldrb	r3, [r7, #11]
 800a2f4:	f1c3 031f 	rsb	r3, r3, #31
 800a2f8:	617b      	str	r3, [r7, #20]
 800a2fa:	491f      	ldr	r1, [pc, #124]	@ (800a378 <vTaskSwitchContext+0xb0>)
 800a2fc:	697a      	ldr	r2, [r7, #20]
 800a2fe:	4613      	mov	r3, r2
 800a300:	009b      	lsls	r3, r3, #2
 800a302:	4413      	add	r3, r2
 800a304:	009b      	lsls	r3, r3, #2
 800a306:	440b      	add	r3, r1
 800a308:	681b      	ldr	r3, [r3, #0]
 800a30a:	2b00      	cmp	r3, #0
 800a30c:	d10b      	bne.n	800a326 <vTaskSwitchContext+0x5e>
	__asm volatile
 800a30e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a312:	f383 8811 	msr	BASEPRI, r3
 800a316:	f3bf 8f6f 	isb	sy
 800a31a:	f3bf 8f4f 	dsb	sy
 800a31e:	607b      	str	r3, [r7, #4]
}
 800a320:	bf00      	nop
 800a322:	bf00      	nop
 800a324:	e7fd      	b.n	800a322 <vTaskSwitchContext+0x5a>
 800a326:	697a      	ldr	r2, [r7, #20]
 800a328:	4613      	mov	r3, r2
 800a32a:	009b      	lsls	r3, r3, #2
 800a32c:	4413      	add	r3, r2
 800a32e:	009b      	lsls	r3, r3, #2
 800a330:	4a11      	ldr	r2, [pc, #68]	@ (800a378 <vTaskSwitchContext+0xb0>)
 800a332:	4413      	add	r3, r2
 800a334:	613b      	str	r3, [r7, #16]
 800a336:	693b      	ldr	r3, [r7, #16]
 800a338:	685b      	ldr	r3, [r3, #4]
 800a33a:	685a      	ldr	r2, [r3, #4]
 800a33c:	693b      	ldr	r3, [r7, #16]
 800a33e:	605a      	str	r2, [r3, #4]
 800a340:	693b      	ldr	r3, [r7, #16]
 800a342:	685a      	ldr	r2, [r3, #4]
 800a344:	693b      	ldr	r3, [r7, #16]
 800a346:	3308      	adds	r3, #8
 800a348:	429a      	cmp	r2, r3
 800a34a:	d104      	bne.n	800a356 <vTaskSwitchContext+0x8e>
 800a34c:	693b      	ldr	r3, [r7, #16]
 800a34e:	685b      	ldr	r3, [r3, #4]
 800a350:	685a      	ldr	r2, [r3, #4]
 800a352:	693b      	ldr	r3, [r7, #16]
 800a354:	605a      	str	r2, [r3, #4]
 800a356:	693b      	ldr	r3, [r7, #16]
 800a358:	685b      	ldr	r3, [r3, #4]
 800a35a:	68db      	ldr	r3, [r3, #12]
 800a35c:	4a07      	ldr	r2, [pc, #28]	@ (800a37c <vTaskSwitchContext+0xb4>)
 800a35e:	6013      	str	r3, [r2, #0]
}
 800a360:	bf00      	nop
 800a362:	371c      	adds	r7, #28
 800a364:	46bd      	mov	sp, r7
 800a366:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a36a:	4770      	bx	lr
 800a36c:	20000540 	.word	0x20000540
 800a370:	2000052c 	.word	0x2000052c
 800a374:	20000520 	.word	0x20000520
 800a378:	2000041c 	.word	0x2000041c
 800a37c:	20000418 	.word	0x20000418

0800a380 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a380:	b580      	push	{r7, lr}
 800a382:	b082      	sub	sp, #8
 800a384:	af00      	add	r7, sp, #0
 800a386:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a388:	f000 f852 	bl	800a430 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a38c:	4b06      	ldr	r3, [pc, #24]	@ (800a3a8 <prvIdleTask+0x28>)
 800a38e:	681b      	ldr	r3, [r3, #0]
 800a390:	2b01      	cmp	r3, #1
 800a392:	d9f9      	bls.n	800a388 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a394:	4b05      	ldr	r3, [pc, #20]	@ (800a3ac <prvIdleTask+0x2c>)
 800a396:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a39a:	601a      	str	r2, [r3, #0]
 800a39c:	f3bf 8f4f 	dsb	sy
 800a3a0:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a3a4:	e7f0      	b.n	800a388 <prvIdleTask+0x8>
 800a3a6:	bf00      	nop
 800a3a8:	2000041c 	.word	0x2000041c
 800a3ac:	e000ed04 	.word	0xe000ed04

0800a3b0 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a3b0:	b580      	push	{r7, lr}
 800a3b2:	b082      	sub	sp, #8
 800a3b4:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3b6:	2300      	movs	r3, #0
 800a3b8:	607b      	str	r3, [r7, #4]
 800a3ba:	e00c      	b.n	800a3d6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a3bc:	687a      	ldr	r2, [r7, #4]
 800a3be:	4613      	mov	r3, r2
 800a3c0:	009b      	lsls	r3, r3, #2
 800a3c2:	4413      	add	r3, r2
 800a3c4:	009b      	lsls	r3, r3, #2
 800a3c6:	4a12      	ldr	r2, [pc, #72]	@ (800a410 <prvInitialiseTaskLists+0x60>)
 800a3c8:	4413      	add	r3, r2
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fbae 	bl	8009b2c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a3d0:	687b      	ldr	r3, [r7, #4]
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	607b      	str	r3, [r7, #4]
 800a3d6:	687b      	ldr	r3, [r7, #4]
 800a3d8:	2b06      	cmp	r3, #6
 800a3da:	d9ef      	bls.n	800a3bc <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a3dc:	480d      	ldr	r0, [pc, #52]	@ (800a414 <prvInitialiseTaskLists+0x64>)
 800a3de:	f7ff fba5 	bl	8009b2c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a3e2:	480d      	ldr	r0, [pc, #52]	@ (800a418 <prvInitialiseTaskLists+0x68>)
 800a3e4:	f7ff fba2 	bl	8009b2c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a3e8:	480c      	ldr	r0, [pc, #48]	@ (800a41c <prvInitialiseTaskLists+0x6c>)
 800a3ea:	f7ff fb9f 	bl	8009b2c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a3ee:	480c      	ldr	r0, [pc, #48]	@ (800a420 <prvInitialiseTaskLists+0x70>)
 800a3f0:	f7ff fb9c 	bl	8009b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a3f4:	480b      	ldr	r0, [pc, #44]	@ (800a424 <prvInitialiseTaskLists+0x74>)
 800a3f6:	f7ff fb99 	bl	8009b2c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a3fa:	4b0b      	ldr	r3, [pc, #44]	@ (800a428 <prvInitialiseTaskLists+0x78>)
 800a3fc:	4a05      	ldr	r2, [pc, #20]	@ (800a414 <prvInitialiseTaskLists+0x64>)
 800a3fe:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a400:	4b0a      	ldr	r3, [pc, #40]	@ (800a42c <prvInitialiseTaskLists+0x7c>)
 800a402:	4a05      	ldr	r2, [pc, #20]	@ (800a418 <prvInitialiseTaskLists+0x68>)
 800a404:	601a      	str	r2, [r3, #0]
}
 800a406:	bf00      	nop
 800a408:	3708      	adds	r7, #8
 800a40a:	46bd      	mov	sp, r7
 800a40c:	bd80      	pop	{r7, pc}
 800a40e:	bf00      	nop
 800a410:	2000041c 	.word	0x2000041c
 800a414:	200004a8 	.word	0x200004a8
 800a418:	200004bc 	.word	0x200004bc
 800a41c:	200004d8 	.word	0x200004d8
 800a420:	200004ec 	.word	0x200004ec
 800a424:	20000504 	.word	0x20000504
 800a428:	200004d0 	.word	0x200004d0
 800a42c:	200004d4 	.word	0x200004d4

0800a430 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a430:	b580      	push	{r7, lr}
 800a432:	b082      	sub	sp, #8
 800a434:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a436:	e019      	b.n	800a46c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a438:	f000 f9ee 	bl	800a818 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a43c:	4b10      	ldr	r3, [pc, #64]	@ (800a480 <prvCheckTasksWaitingTermination+0x50>)
 800a43e:	68db      	ldr	r3, [r3, #12]
 800a440:	68db      	ldr	r3, [r3, #12]
 800a442:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	3304      	adds	r3, #4
 800a448:	4618      	mov	r0, r3
 800a44a:	f7ff fbf9 	bl	8009c40 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a44e:	4b0d      	ldr	r3, [pc, #52]	@ (800a484 <prvCheckTasksWaitingTermination+0x54>)
 800a450:	681b      	ldr	r3, [r3, #0]
 800a452:	3b01      	subs	r3, #1
 800a454:	4a0b      	ldr	r2, [pc, #44]	@ (800a484 <prvCheckTasksWaitingTermination+0x54>)
 800a456:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a458:	4b0b      	ldr	r3, [pc, #44]	@ (800a488 <prvCheckTasksWaitingTermination+0x58>)
 800a45a:	681b      	ldr	r3, [r3, #0]
 800a45c:	3b01      	subs	r3, #1
 800a45e:	4a0a      	ldr	r2, [pc, #40]	@ (800a488 <prvCheckTasksWaitingTermination+0x58>)
 800a460:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a462:	f000 fa0b 	bl	800a87c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a466:	6878      	ldr	r0, [r7, #4]
 800a468:	f000 f810 	bl	800a48c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a46c:	4b06      	ldr	r3, [pc, #24]	@ (800a488 <prvCheckTasksWaitingTermination+0x58>)
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	2b00      	cmp	r3, #0
 800a472:	d1e1      	bne.n	800a438 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a474:	bf00      	nop
 800a476:	bf00      	nop
 800a478:	3708      	adds	r7, #8
 800a47a:	46bd      	mov	sp, r7
 800a47c:	bd80      	pop	{r7, pc}
 800a47e:	bf00      	nop
 800a480:	200004ec 	.word	0x200004ec
 800a484:	20000518 	.word	0x20000518
 800a488:	20000500 	.word	0x20000500

0800a48c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a48c:	b580      	push	{r7, lr}
 800a48e:	b082      	sub	sp, #8
 800a490:	af00      	add	r7, sp, #0
 800a492:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 800a494:	687b      	ldr	r3, [r7, #4]
 800a496:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800a498:	4618      	mov	r0, r3
 800a49a:	f000 faaf 	bl	800a9fc <vPortFree>
			vPortFree( pxTCB );
 800a49e:	6878      	ldr	r0, [r7, #4]
 800a4a0:	f000 faac 	bl	800a9fc <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a4a4:	bf00      	nop
 800a4a6:	3708      	adds	r7, #8
 800a4a8:	46bd      	mov	sp, r7
 800a4aa:	bd80      	pop	{r7, pc}

0800a4ac <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a4ac:	b480      	push	{r7}
 800a4ae:	b083      	sub	sp, #12
 800a4b0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a4b2:	4b0c      	ldr	r3, [pc, #48]	@ (800a4e4 <prvResetNextTaskUnblockTime+0x38>)
 800a4b4:	681b      	ldr	r3, [r3, #0]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	2b00      	cmp	r3, #0
 800a4ba:	d104      	bne.n	800a4c6 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a4bc:	4b0a      	ldr	r3, [pc, #40]	@ (800a4e8 <prvResetNextTaskUnblockTime+0x3c>)
 800a4be:	f04f 32ff 	mov.w	r2, #4294967295
 800a4c2:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a4c4:	e008      	b.n	800a4d8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a4c6:	4b07      	ldr	r3, [pc, #28]	@ (800a4e4 <prvResetNextTaskUnblockTime+0x38>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	68db      	ldr	r3, [r3, #12]
 800a4cc:	68db      	ldr	r3, [r3, #12]
 800a4ce:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a4d0:	687b      	ldr	r3, [r7, #4]
 800a4d2:	685b      	ldr	r3, [r3, #4]
 800a4d4:	4a04      	ldr	r2, [pc, #16]	@ (800a4e8 <prvResetNextTaskUnblockTime+0x3c>)
 800a4d6:	6013      	str	r3, [r2, #0]
}
 800a4d8:	bf00      	nop
 800a4da:	370c      	adds	r7, #12
 800a4dc:	46bd      	mov	sp, r7
 800a4de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e2:	4770      	bx	lr
 800a4e4:	200004d0 	.word	0x200004d0
 800a4e8:	20000538 	.word	0x20000538

0800a4ec <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a4ec:	b580      	push	{r7, lr}
 800a4ee:	b084      	sub	sp, #16
 800a4f0:	af00      	add	r7, sp, #0
 800a4f2:	6078      	str	r0, [r7, #4]
 800a4f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a4f6:	4b29      	ldr	r3, [pc, #164]	@ (800a59c <prvAddCurrentTaskToDelayedList+0xb0>)
 800a4f8:	681b      	ldr	r3, [r3, #0]
 800a4fa:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4fc:	4b28      	ldr	r3, [pc, #160]	@ (800a5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a4fe:	681b      	ldr	r3, [r3, #0]
 800a500:	3304      	adds	r3, #4
 800a502:	4618      	mov	r0, r3
 800a504:	f7ff fb9c 	bl	8009c40 <uxListRemove>
 800a508:	4603      	mov	r3, r0
 800a50a:	2b00      	cmp	r3, #0
 800a50c:	d10b      	bne.n	800a526 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 800a50e:	4b24      	ldr	r3, [pc, #144]	@ (800a5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a510:	681b      	ldr	r3, [r3, #0]
 800a512:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800a514:	2201      	movs	r2, #1
 800a516:	fa02 f303 	lsl.w	r3, r2, r3
 800a51a:	43da      	mvns	r2, r3
 800a51c:	4b21      	ldr	r3, [pc, #132]	@ (800a5a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a51e:	681b      	ldr	r3, [r3, #0]
 800a520:	4013      	ands	r3, r2
 800a522:	4a20      	ldr	r2, [pc, #128]	@ (800a5a4 <prvAddCurrentTaskToDelayedList+0xb8>)
 800a524:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a526:	687b      	ldr	r3, [r7, #4]
 800a528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a52c:	d10a      	bne.n	800a544 <prvAddCurrentTaskToDelayedList+0x58>
 800a52e:	683b      	ldr	r3, [r7, #0]
 800a530:	2b00      	cmp	r3, #0
 800a532:	d007      	beq.n	800a544 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a534:	4b1a      	ldr	r3, [pc, #104]	@ (800a5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	3304      	adds	r3, #4
 800a53a:	4619      	mov	r1, r3
 800a53c:	481a      	ldr	r0, [pc, #104]	@ (800a5a8 <prvAddCurrentTaskToDelayedList+0xbc>)
 800a53e:	f7ff fb22 	bl	8009b86 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a542:	e026      	b.n	800a592 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a544:	68fa      	ldr	r2, [r7, #12]
 800a546:	687b      	ldr	r3, [r7, #4]
 800a548:	4413      	add	r3, r2
 800a54a:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a54c:	4b14      	ldr	r3, [pc, #80]	@ (800a5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a54e:	681b      	ldr	r3, [r3, #0]
 800a550:	68ba      	ldr	r2, [r7, #8]
 800a552:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a554:	68ba      	ldr	r2, [r7, #8]
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	429a      	cmp	r2, r3
 800a55a:	d209      	bcs.n	800a570 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a55c:	4b13      	ldr	r3, [pc, #76]	@ (800a5ac <prvAddCurrentTaskToDelayedList+0xc0>)
 800a55e:	681a      	ldr	r2, [r3, #0]
 800a560:	4b0f      	ldr	r3, [pc, #60]	@ (800a5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a562:	681b      	ldr	r3, [r3, #0]
 800a564:	3304      	adds	r3, #4
 800a566:	4619      	mov	r1, r3
 800a568:	4610      	mov	r0, r2
 800a56a:	f7ff fb30 	bl	8009bce <vListInsert>
}
 800a56e:	e010      	b.n	800a592 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a570:	4b0f      	ldr	r3, [pc, #60]	@ (800a5b0 <prvAddCurrentTaskToDelayedList+0xc4>)
 800a572:	681a      	ldr	r2, [r3, #0]
 800a574:	4b0a      	ldr	r3, [pc, #40]	@ (800a5a0 <prvAddCurrentTaskToDelayedList+0xb4>)
 800a576:	681b      	ldr	r3, [r3, #0]
 800a578:	3304      	adds	r3, #4
 800a57a:	4619      	mov	r1, r3
 800a57c:	4610      	mov	r0, r2
 800a57e:	f7ff fb26 	bl	8009bce <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a582:	4b0c      	ldr	r3, [pc, #48]	@ (800a5b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a584:	681b      	ldr	r3, [r3, #0]
 800a586:	68ba      	ldr	r2, [r7, #8]
 800a588:	429a      	cmp	r2, r3
 800a58a:	d202      	bcs.n	800a592 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 800a58c:	4a09      	ldr	r2, [pc, #36]	@ (800a5b4 <prvAddCurrentTaskToDelayedList+0xc8>)
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	6013      	str	r3, [r2, #0]
}
 800a592:	bf00      	nop
 800a594:	3710      	adds	r7, #16
 800a596:	46bd      	mov	sp, r7
 800a598:	bd80      	pop	{r7, pc}
 800a59a:	bf00      	nop
 800a59c:	2000051c 	.word	0x2000051c
 800a5a0:	20000418 	.word	0x20000418
 800a5a4:	20000520 	.word	0x20000520
 800a5a8:	20000504 	.word	0x20000504
 800a5ac:	200004d4 	.word	0x200004d4
 800a5b0:	200004d0 	.word	0x200004d0
 800a5b4:	20000538 	.word	0x20000538

0800a5b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800a5b8:	b480      	push	{r7}
 800a5ba:	b085      	sub	sp, #20
 800a5bc:	af00      	add	r7, sp, #0
 800a5be:	60f8      	str	r0, [r7, #12]
 800a5c0:	60b9      	str	r1, [r7, #8]
 800a5c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800a5c4:	68fb      	ldr	r3, [r7, #12]
 800a5c6:	3b04      	subs	r3, #4
 800a5c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800a5ca:	68fb      	ldr	r3, [r7, #12]
 800a5cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 800a5d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5d2:	68fb      	ldr	r3, [r7, #12]
 800a5d4:	3b04      	subs	r3, #4
 800a5d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	f023 0201 	bic.w	r2, r3, #1
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800a5e2:	68fb      	ldr	r3, [r7, #12]
 800a5e4:	3b04      	subs	r3, #4
 800a5e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800a5e8:	4a0c      	ldr	r2, [pc, #48]	@ (800a61c <pxPortInitialiseStack+0x64>)
 800a5ea:	68fb      	ldr	r3, [r7, #12]
 800a5ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800a5ee:	68fb      	ldr	r3, [r7, #12]
 800a5f0:	3b14      	subs	r3, #20
 800a5f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800a5f4:	687a      	ldr	r2, [r7, #4]
 800a5f6:	68fb      	ldr	r3, [r7, #12]
 800a5f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800a5fa:	68fb      	ldr	r3, [r7, #12]
 800a5fc:	3b04      	subs	r3, #4
 800a5fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800a600:	68fb      	ldr	r3, [r7, #12]
 800a602:	f06f 0202 	mvn.w	r2, #2
 800a606:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800a608:	68fb      	ldr	r3, [r7, #12]
 800a60a:	3b20      	subs	r3, #32
 800a60c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800a60e:	68fb      	ldr	r3, [r7, #12]
}
 800a610:	4618      	mov	r0, r3
 800a612:	3714      	adds	r7, #20
 800a614:	46bd      	mov	sp, r7
 800a616:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a61a:	4770      	bx	lr
 800a61c:	0800a621 	.word	0x0800a621

0800a620 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800a620:	b480      	push	{r7}
 800a622:	b085      	sub	sp, #20
 800a624:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800a626:	2300      	movs	r3, #0
 800a628:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800a62a:	4b13      	ldr	r3, [pc, #76]	@ (800a678 <prvTaskExitError+0x58>)
 800a62c:	681b      	ldr	r3, [r3, #0]
 800a62e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a632:	d00b      	beq.n	800a64c <prvTaskExitError+0x2c>
	__asm volatile
 800a634:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a638:	f383 8811 	msr	BASEPRI, r3
 800a63c:	f3bf 8f6f 	isb	sy
 800a640:	f3bf 8f4f 	dsb	sy
 800a644:	60fb      	str	r3, [r7, #12]
}
 800a646:	bf00      	nop
 800a648:	bf00      	nop
 800a64a:	e7fd      	b.n	800a648 <prvTaskExitError+0x28>
	__asm volatile
 800a64c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a650:	f383 8811 	msr	BASEPRI, r3
 800a654:	f3bf 8f6f 	isb	sy
 800a658:	f3bf 8f4f 	dsb	sy
 800a65c:	60bb      	str	r3, [r7, #8]
}
 800a65e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800a660:	bf00      	nop
 800a662:	687b      	ldr	r3, [r7, #4]
 800a664:	2b00      	cmp	r3, #0
 800a666:	d0fc      	beq.n	800a662 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800a668:	bf00      	nop
 800a66a:	bf00      	nop
 800a66c:	3714      	adds	r7, #20
 800a66e:	46bd      	mov	sp, r7
 800a670:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a674:	4770      	bx	lr
 800a676:	bf00      	nop
 800a678:	2000000c 	.word	0x2000000c
 800a67c:	00000000 	.word	0x00000000

0800a680 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800a680:	4b07      	ldr	r3, [pc, #28]	@ (800a6a0 <pxCurrentTCBConst2>)
 800a682:	6819      	ldr	r1, [r3, #0]
 800a684:	6808      	ldr	r0, [r1, #0]
 800a686:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a68a:	f380 8809 	msr	PSP, r0
 800a68e:	f3bf 8f6f 	isb	sy
 800a692:	f04f 0000 	mov.w	r0, #0
 800a696:	f380 8811 	msr	BASEPRI, r0
 800a69a:	4770      	bx	lr
 800a69c:	f3af 8000 	nop.w

0800a6a0 <pxCurrentTCBConst2>:
 800a6a0:	20000418 	.word	0x20000418
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800a6a4:	bf00      	nop
 800a6a6:	bf00      	nop

0800a6a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800a6a8:	4808      	ldr	r0, [pc, #32]	@ (800a6cc <prvPortStartFirstTask+0x24>)
 800a6aa:	6800      	ldr	r0, [r0, #0]
 800a6ac:	6800      	ldr	r0, [r0, #0]
 800a6ae:	f380 8808 	msr	MSP, r0
 800a6b2:	f04f 0000 	mov.w	r0, #0
 800a6b6:	f380 8814 	msr	CONTROL, r0
 800a6ba:	b662      	cpsie	i
 800a6bc:	b661      	cpsie	f
 800a6be:	f3bf 8f4f 	dsb	sy
 800a6c2:	f3bf 8f6f 	isb	sy
 800a6c6:	df00      	svc	0
 800a6c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800a6ca:	bf00      	nop
 800a6cc:	e000ed08 	.word	0xe000ed08

0800a6d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800a6d0:	b580      	push	{r7, lr}
 800a6d2:	b086      	sub	sp, #24
 800a6d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800a6d6:	4b47      	ldr	r3, [pc, #284]	@ (800a7f4 <xPortStartScheduler+0x124>)
 800a6d8:	681b      	ldr	r3, [r3, #0]
 800a6da:	4a47      	ldr	r2, [pc, #284]	@ (800a7f8 <xPortStartScheduler+0x128>)
 800a6dc:	4293      	cmp	r3, r2
 800a6de:	d10b      	bne.n	800a6f8 <xPortStartScheduler+0x28>
	__asm volatile
 800a6e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a6e4:	f383 8811 	msr	BASEPRI, r3
 800a6e8:	f3bf 8f6f 	isb	sy
 800a6ec:	f3bf 8f4f 	dsb	sy
 800a6f0:	613b      	str	r3, [r7, #16]
}
 800a6f2:	bf00      	nop
 800a6f4:	bf00      	nop
 800a6f6:	e7fd      	b.n	800a6f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800a6f8:	4b3e      	ldr	r3, [pc, #248]	@ (800a7f4 <xPortStartScheduler+0x124>)
 800a6fa:	681b      	ldr	r3, [r3, #0]
 800a6fc:	4a3f      	ldr	r2, [pc, #252]	@ (800a7fc <xPortStartScheduler+0x12c>)
 800a6fe:	4293      	cmp	r3, r2
 800a700:	d10b      	bne.n	800a71a <xPortStartScheduler+0x4a>
	__asm volatile
 800a702:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a706:	f383 8811 	msr	BASEPRI, r3
 800a70a:	f3bf 8f6f 	isb	sy
 800a70e:	f3bf 8f4f 	dsb	sy
 800a712:	60fb      	str	r3, [r7, #12]
}
 800a714:	bf00      	nop
 800a716:	bf00      	nop
 800a718:	e7fd      	b.n	800a716 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800a71a:	4b39      	ldr	r3, [pc, #228]	@ (800a800 <xPortStartScheduler+0x130>)
 800a71c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800a71e:	697b      	ldr	r3, [r7, #20]
 800a720:	781b      	ldrb	r3, [r3, #0]
 800a722:	b2db      	uxtb	r3, r3
 800a724:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800a726:	697b      	ldr	r3, [r7, #20]
 800a728:	22ff      	movs	r2, #255	@ 0xff
 800a72a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800a72c:	697b      	ldr	r3, [r7, #20]
 800a72e:	781b      	ldrb	r3, [r3, #0]
 800a730:	b2db      	uxtb	r3, r3
 800a732:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800a734:	78fb      	ldrb	r3, [r7, #3]
 800a736:	b2db      	uxtb	r3, r3
 800a738:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800a73c:	b2da      	uxtb	r2, r3
 800a73e:	4b31      	ldr	r3, [pc, #196]	@ (800a804 <xPortStartScheduler+0x134>)
 800a740:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800a742:	4b31      	ldr	r3, [pc, #196]	@ (800a808 <xPortStartScheduler+0x138>)
 800a744:	2207      	movs	r2, #7
 800a746:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a748:	e009      	b.n	800a75e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800a74a:	4b2f      	ldr	r3, [pc, #188]	@ (800a808 <xPortStartScheduler+0x138>)
 800a74c:	681b      	ldr	r3, [r3, #0]
 800a74e:	3b01      	subs	r3, #1
 800a750:	4a2d      	ldr	r2, [pc, #180]	@ (800a808 <xPortStartScheduler+0x138>)
 800a752:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800a754:	78fb      	ldrb	r3, [r7, #3]
 800a756:	b2db      	uxtb	r3, r3
 800a758:	005b      	lsls	r3, r3, #1
 800a75a:	b2db      	uxtb	r3, r3
 800a75c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800a75e:	78fb      	ldrb	r3, [r7, #3]
 800a760:	b2db      	uxtb	r3, r3
 800a762:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800a766:	2b80      	cmp	r3, #128	@ 0x80
 800a768:	d0ef      	beq.n	800a74a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800a76a:	4b27      	ldr	r3, [pc, #156]	@ (800a808 <xPortStartScheduler+0x138>)
 800a76c:	681b      	ldr	r3, [r3, #0]
 800a76e:	f1c3 0307 	rsb	r3, r3, #7
 800a772:	2b04      	cmp	r3, #4
 800a774:	d00b      	beq.n	800a78e <xPortStartScheduler+0xbe>
	__asm volatile
 800a776:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a77a:	f383 8811 	msr	BASEPRI, r3
 800a77e:	f3bf 8f6f 	isb	sy
 800a782:	f3bf 8f4f 	dsb	sy
 800a786:	60bb      	str	r3, [r7, #8]
}
 800a788:	bf00      	nop
 800a78a:	bf00      	nop
 800a78c:	e7fd      	b.n	800a78a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800a78e:	4b1e      	ldr	r3, [pc, #120]	@ (800a808 <xPortStartScheduler+0x138>)
 800a790:	681b      	ldr	r3, [r3, #0]
 800a792:	021b      	lsls	r3, r3, #8
 800a794:	4a1c      	ldr	r2, [pc, #112]	@ (800a808 <xPortStartScheduler+0x138>)
 800a796:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800a798:	4b1b      	ldr	r3, [pc, #108]	@ (800a808 <xPortStartScheduler+0x138>)
 800a79a:	681b      	ldr	r3, [r3, #0]
 800a79c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 800a7a0:	4a19      	ldr	r2, [pc, #100]	@ (800a808 <xPortStartScheduler+0x138>)
 800a7a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800a7a4:	687b      	ldr	r3, [r7, #4]
 800a7a6:	b2da      	uxtb	r2, r3
 800a7a8:	697b      	ldr	r3, [r7, #20]
 800a7aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800a7ac:	4b17      	ldr	r3, [pc, #92]	@ (800a80c <xPortStartScheduler+0x13c>)
 800a7ae:	681b      	ldr	r3, [r3, #0]
 800a7b0:	4a16      	ldr	r2, [pc, #88]	@ (800a80c <xPortStartScheduler+0x13c>)
 800a7b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800a7b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800a7b8:	4b14      	ldr	r3, [pc, #80]	@ (800a80c <xPortStartScheduler+0x13c>)
 800a7ba:	681b      	ldr	r3, [r3, #0]
 800a7bc:	4a13      	ldr	r2, [pc, #76]	@ (800a80c <xPortStartScheduler+0x13c>)
 800a7be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 800a7c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800a7c4:	f000 f8da 	bl	800a97c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800a7c8:	4b11      	ldr	r3, [pc, #68]	@ (800a810 <xPortStartScheduler+0x140>)
 800a7ca:	2200      	movs	r2, #0
 800a7cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800a7ce:	f000 f8f9 	bl	800a9c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800a7d2:	4b10      	ldr	r3, [pc, #64]	@ (800a814 <xPortStartScheduler+0x144>)
 800a7d4:	681b      	ldr	r3, [r3, #0]
 800a7d6:	4a0f      	ldr	r2, [pc, #60]	@ (800a814 <xPortStartScheduler+0x144>)
 800a7d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 800a7dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800a7de:	f7ff ff63 	bl	800a6a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800a7e2:	f7ff fd71 	bl	800a2c8 <vTaskSwitchContext>
	prvTaskExitError();
 800a7e6:	f7ff ff1b 	bl	800a620 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800a7ea:	2300      	movs	r3, #0
}
 800a7ec:	4618      	mov	r0, r3
 800a7ee:	3718      	adds	r7, #24
 800a7f0:	46bd      	mov	sp, r7
 800a7f2:	bd80      	pop	{r7, pc}
 800a7f4:	e000ed00 	.word	0xe000ed00
 800a7f8:	410fc271 	.word	0x410fc271
 800a7fc:	410fc270 	.word	0x410fc270
 800a800:	e000e400 	.word	0xe000e400
 800a804:	20000544 	.word	0x20000544
 800a808:	20000548 	.word	0x20000548
 800a80c:	e000ed20 	.word	0xe000ed20
 800a810:	2000000c 	.word	0x2000000c
 800a814:	e000ef34 	.word	0xe000ef34

0800a818 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800a818:	b480      	push	{r7}
 800a81a:	b083      	sub	sp, #12
 800a81c:	af00      	add	r7, sp, #0
	__asm volatile
 800a81e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a822:	f383 8811 	msr	BASEPRI, r3
 800a826:	f3bf 8f6f 	isb	sy
 800a82a:	f3bf 8f4f 	dsb	sy
 800a82e:	607b      	str	r3, [r7, #4]
}
 800a830:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800a832:	4b10      	ldr	r3, [pc, #64]	@ (800a874 <vPortEnterCritical+0x5c>)
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	3301      	adds	r3, #1
 800a838:	4a0e      	ldr	r2, [pc, #56]	@ (800a874 <vPortEnterCritical+0x5c>)
 800a83a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800a83c:	4b0d      	ldr	r3, [pc, #52]	@ (800a874 <vPortEnterCritical+0x5c>)
 800a83e:	681b      	ldr	r3, [r3, #0]
 800a840:	2b01      	cmp	r3, #1
 800a842:	d110      	bne.n	800a866 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800a844:	4b0c      	ldr	r3, [pc, #48]	@ (800a878 <vPortEnterCritical+0x60>)
 800a846:	681b      	ldr	r3, [r3, #0]
 800a848:	b2db      	uxtb	r3, r3
 800a84a:	2b00      	cmp	r3, #0
 800a84c:	d00b      	beq.n	800a866 <vPortEnterCritical+0x4e>
	__asm volatile
 800a84e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a852:	f383 8811 	msr	BASEPRI, r3
 800a856:	f3bf 8f6f 	isb	sy
 800a85a:	f3bf 8f4f 	dsb	sy
 800a85e:	603b      	str	r3, [r7, #0]
}
 800a860:	bf00      	nop
 800a862:	bf00      	nop
 800a864:	e7fd      	b.n	800a862 <vPortEnterCritical+0x4a>
	}
}
 800a866:	bf00      	nop
 800a868:	370c      	adds	r7, #12
 800a86a:	46bd      	mov	sp, r7
 800a86c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a870:	4770      	bx	lr
 800a872:	bf00      	nop
 800a874:	2000000c 	.word	0x2000000c
 800a878:	e000ed04 	.word	0xe000ed04

0800a87c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800a87c:	b480      	push	{r7}
 800a87e:	b083      	sub	sp, #12
 800a880:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800a882:	4b12      	ldr	r3, [pc, #72]	@ (800a8cc <vPortExitCritical+0x50>)
 800a884:	681b      	ldr	r3, [r3, #0]
 800a886:	2b00      	cmp	r3, #0
 800a888:	d10b      	bne.n	800a8a2 <vPortExitCritical+0x26>
	__asm volatile
 800a88a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a88e:	f383 8811 	msr	BASEPRI, r3
 800a892:	f3bf 8f6f 	isb	sy
 800a896:	f3bf 8f4f 	dsb	sy
 800a89a:	607b      	str	r3, [r7, #4]
}
 800a89c:	bf00      	nop
 800a89e:	bf00      	nop
 800a8a0:	e7fd      	b.n	800a89e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800a8a2:	4b0a      	ldr	r3, [pc, #40]	@ (800a8cc <vPortExitCritical+0x50>)
 800a8a4:	681b      	ldr	r3, [r3, #0]
 800a8a6:	3b01      	subs	r3, #1
 800a8a8:	4a08      	ldr	r2, [pc, #32]	@ (800a8cc <vPortExitCritical+0x50>)
 800a8aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800a8ac:	4b07      	ldr	r3, [pc, #28]	@ (800a8cc <vPortExitCritical+0x50>)
 800a8ae:	681b      	ldr	r3, [r3, #0]
 800a8b0:	2b00      	cmp	r3, #0
 800a8b2:	d105      	bne.n	800a8c0 <vPortExitCritical+0x44>
 800a8b4:	2300      	movs	r3, #0
 800a8b6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800a8b8:	683b      	ldr	r3, [r7, #0]
 800a8ba:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800a8be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800a8c0:	bf00      	nop
 800a8c2:	370c      	adds	r7, #12
 800a8c4:	46bd      	mov	sp, r7
 800a8c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8ca:	4770      	bx	lr
 800a8cc:	2000000c 	.word	0x2000000c

0800a8d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800a8d0:	f3ef 8009 	mrs	r0, PSP
 800a8d4:	f3bf 8f6f 	isb	sy
 800a8d8:	4b15      	ldr	r3, [pc, #84]	@ (800a930 <pxCurrentTCBConst>)
 800a8da:	681a      	ldr	r2, [r3, #0]
 800a8dc:	f01e 0f10 	tst.w	lr, #16
 800a8e0:	bf08      	it	eq
 800a8e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800a8e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a8ea:	6010      	str	r0, [r2, #0]
 800a8ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 800a8f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 800a8f4:	f380 8811 	msr	BASEPRI, r0
 800a8f8:	f3bf 8f4f 	dsb	sy
 800a8fc:	f3bf 8f6f 	isb	sy
 800a900:	f7ff fce2 	bl	800a2c8 <vTaskSwitchContext>
 800a904:	f04f 0000 	mov.w	r0, #0
 800a908:	f380 8811 	msr	BASEPRI, r0
 800a90c:	bc09      	pop	{r0, r3}
 800a90e:	6819      	ldr	r1, [r3, #0]
 800a910:	6808      	ldr	r0, [r1, #0]
 800a912:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a916:	f01e 0f10 	tst.w	lr, #16
 800a91a:	bf08      	it	eq
 800a91c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800a920:	f380 8809 	msr	PSP, r0
 800a924:	f3bf 8f6f 	isb	sy
 800a928:	4770      	bx	lr
 800a92a:	bf00      	nop
 800a92c:	f3af 8000 	nop.w

0800a930 <pxCurrentTCBConst>:
 800a930:	20000418 	.word	0x20000418
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800a934:	bf00      	nop
 800a936:	bf00      	nop

0800a938 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800a938:	b580      	push	{r7, lr}
 800a93a:	b082      	sub	sp, #8
 800a93c:	af00      	add	r7, sp, #0
	__asm volatile
 800a93e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800a942:	f383 8811 	msr	BASEPRI, r3
 800a946:	f3bf 8f6f 	isb	sy
 800a94a:	f3bf 8f4f 	dsb	sy
 800a94e:	607b      	str	r3, [r7, #4]
}
 800a950:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800a952:	f7ff fbff 	bl	800a154 <xTaskIncrementTick>
 800a956:	4603      	mov	r3, r0
 800a958:	2b00      	cmp	r3, #0
 800a95a:	d003      	beq.n	800a964 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800a95c:	4b06      	ldr	r3, [pc, #24]	@ (800a978 <SysTick_Handler+0x40>)
 800a95e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800a962:	601a      	str	r2, [r3, #0]
 800a964:	2300      	movs	r3, #0
 800a966:	603b      	str	r3, [r7, #0]
	__asm volatile
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	f383 8811 	msr	BASEPRI, r3
}
 800a96e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800a970:	bf00      	nop
 800a972:	3708      	adds	r7, #8
 800a974:	46bd      	mov	sp, r7
 800a976:	bd80      	pop	{r7, pc}
 800a978:	e000ed04 	.word	0xe000ed04

0800a97c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800a97c:	b480      	push	{r7}
 800a97e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800a980:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b0 <vPortSetupTimerInterrupt+0x34>)
 800a982:	2200      	movs	r2, #0
 800a984:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800a986:	4b0b      	ldr	r3, [pc, #44]	@ (800a9b4 <vPortSetupTimerInterrupt+0x38>)
 800a988:	2200      	movs	r2, #0
 800a98a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800a98c:	4b0a      	ldr	r3, [pc, #40]	@ (800a9b8 <vPortSetupTimerInterrupt+0x3c>)
 800a98e:	681b      	ldr	r3, [r3, #0]
 800a990:	4a0a      	ldr	r2, [pc, #40]	@ (800a9bc <vPortSetupTimerInterrupt+0x40>)
 800a992:	fba2 2303 	umull	r2, r3, r2, r3
 800a996:	099b      	lsrs	r3, r3, #6
 800a998:	4a09      	ldr	r2, [pc, #36]	@ (800a9c0 <vPortSetupTimerInterrupt+0x44>)
 800a99a:	3b01      	subs	r3, #1
 800a99c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800a99e:	4b04      	ldr	r3, [pc, #16]	@ (800a9b0 <vPortSetupTimerInterrupt+0x34>)
 800a9a0:	2207      	movs	r2, #7
 800a9a2:	601a      	str	r2, [r3, #0]
}
 800a9a4:	bf00      	nop
 800a9a6:	46bd      	mov	sp, r7
 800a9a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9ac:	4770      	bx	lr
 800a9ae:	bf00      	nop
 800a9b0:	e000e010 	.word	0xe000e010
 800a9b4:	e000e018 	.word	0xe000e018
 800a9b8:	20000000 	.word	0x20000000
 800a9bc:	10624dd3 	.word	0x10624dd3
 800a9c0:	e000e014 	.word	0xe000e014

0800a9c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800a9c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 800a9d4 <vPortEnableVFP+0x10>
 800a9c8:	6801      	ldr	r1, [r0, #0]
 800a9ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800a9ce:	6001      	str	r1, [r0, #0]
 800a9d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800a9d2:	bf00      	nop
 800a9d4:	e000ed88 	.word	0xe000ed88

0800a9d8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 800a9e0:	f7ff fb0c 	bl	8009ffc <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 800a9e4:	6878      	ldr	r0, [r7, #4]
 800a9e6:	f000 f81b 	bl	800aa20 <malloc>
 800a9ea:	4603      	mov	r3, r0
 800a9ec:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800a9ee:	f7ff fb13 	bl	800a018 <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 800a9f2:	68fb      	ldr	r3, [r7, #12]
}
 800a9f4:	4618      	mov	r0, r3
 800a9f6:	3710      	adds	r7, #16
 800a9f8:	46bd      	mov	sp, r7
 800a9fa:	bd80      	pop	{r7, pc}

0800a9fc <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	b082      	sub	sp, #8
 800aa00:	af00      	add	r7, sp, #0
 800aa02:	6078      	str	r0, [r7, #4]
	if( pv )
 800aa04:	687b      	ldr	r3, [r7, #4]
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d006      	beq.n	800aa18 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 800aa0a:	f7ff faf7 	bl	8009ffc <vTaskSuspendAll>
		{
			free( pv );
 800aa0e:	6878      	ldr	r0, [r7, #4]
 800aa10:	f000 f80e 	bl	800aa30 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 800aa14:	f7ff fb00 	bl	800a018 <xTaskResumeAll>
	}
}
 800aa18:	bf00      	nop
 800aa1a:	3708      	adds	r7, #8
 800aa1c:	46bd      	mov	sp, r7
 800aa1e:	bd80      	pop	{r7, pc}

0800aa20 <malloc>:
 800aa20:	4b02      	ldr	r3, [pc, #8]	@ (800aa2c <malloc+0xc>)
 800aa22:	4601      	mov	r1, r0
 800aa24:	6818      	ldr	r0, [r3, #0]
 800aa26:	f000 b82d 	b.w	800aa84 <_malloc_r>
 800aa2a:	bf00      	nop
 800aa2c:	2000001c 	.word	0x2000001c

0800aa30 <free>:
 800aa30:	4b02      	ldr	r3, [pc, #8]	@ (800aa3c <free+0xc>)
 800aa32:	4601      	mov	r1, r0
 800aa34:	6818      	ldr	r0, [r3, #0]
 800aa36:	f000 bd09 	b.w	800b44c <_free_r>
 800aa3a:	bf00      	nop
 800aa3c:	2000001c 	.word	0x2000001c

0800aa40 <sbrk_aligned>:
 800aa40:	b570      	push	{r4, r5, r6, lr}
 800aa42:	4e0f      	ldr	r6, [pc, #60]	@ (800aa80 <sbrk_aligned+0x40>)
 800aa44:	460c      	mov	r4, r1
 800aa46:	6831      	ldr	r1, [r6, #0]
 800aa48:	4605      	mov	r5, r0
 800aa4a:	b911      	cbnz	r1, 800aa52 <sbrk_aligned+0x12>
 800aa4c:	f000 fc88 	bl	800b360 <_sbrk_r>
 800aa50:	6030      	str	r0, [r6, #0]
 800aa52:	4621      	mov	r1, r4
 800aa54:	4628      	mov	r0, r5
 800aa56:	f000 fc83 	bl	800b360 <_sbrk_r>
 800aa5a:	1c43      	adds	r3, r0, #1
 800aa5c:	d103      	bne.n	800aa66 <sbrk_aligned+0x26>
 800aa5e:	f04f 34ff 	mov.w	r4, #4294967295
 800aa62:	4620      	mov	r0, r4
 800aa64:	bd70      	pop	{r4, r5, r6, pc}
 800aa66:	1cc4      	adds	r4, r0, #3
 800aa68:	f024 0403 	bic.w	r4, r4, #3
 800aa6c:	42a0      	cmp	r0, r4
 800aa6e:	d0f8      	beq.n	800aa62 <sbrk_aligned+0x22>
 800aa70:	1a21      	subs	r1, r4, r0
 800aa72:	4628      	mov	r0, r5
 800aa74:	f000 fc74 	bl	800b360 <_sbrk_r>
 800aa78:	3001      	adds	r0, #1
 800aa7a:	d1f2      	bne.n	800aa62 <sbrk_aligned+0x22>
 800aa7c:	e7ef      	b.n	800aa5e <sbrk_aligned+0x1e>
 800aa7e:	bf00      	nop
 800aa80:	2000054c 	.word	0x2000054c

0800aa84 <_malloc_r>:
 800aa84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa88:	1ccd      	adds	r5, r1, #3
 800aa8a:	f025 0503 	bic.w	r5, r5, #3
 800aa8e:	3508      	adds	r5, #8
 800aa90:	2d0c      	cmp	r5, #12
 800aa92:	bf38      	it	cc
 800aa94:	250c      	movcc	r5, #12
 800aa96:	2d00      	cmp	r5, #0
 800aa98:	4606      	mov	r6, r0
 800aa9a:	db01      	blt.n	800aaa0 <_malloc_r+0x1c>
 800aa9c:	42a9      	cmp	r1, r5
 800aa9e:	d904      	bls.n	800aaaa <_malloc_r+0x26>
 800aaa0:	230c      	movs	r3, #12
 800aaa2:	6033      	str	r3, [r6, #0]
 800aaa4:	2000      	movs	r0, #0
 800aaa6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aaaa:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800ab80 <_malloc_r+0xfc>
 800aaae:	f000 f869 	bl	800ab84 <__malloc_lock>
 800aab2:	f8d8 3000 	ldr.w	r3, [r8]
 800aab6:	461c      	mov	r4, r3
 800aab8:	bb44      	cbnz	r4, 800ab0c <_malloc_r+0x88>
 800aaba:	4629      	mov	r1, r5
 800aabc:	4630      	mov	r0, r6
 800aabe:	f7ff ffbf 	bl	800aa40 <sbrk_aligned>
 800aac2:	1c43      	adds	r3, r0, #1
 800aac4:	4604      	mov	r4, r0
 800aac6:	d158      	bne.n	800ab7a <_malloc_r+0xf6>
 800aac8:	f8d8 4000 	ldr.w	r4, [r8]
 800aacc:	4627      	mov	r7, r4
 800aace:	2f00      	cmp	r7, #0
 800aad0:	d143      	bne.n	800ab5a <_malloc_r+0xd6>
 800aad2:	2c00      	cmp	r4, #0
 800aad4:	d04b      	beq.n	800ab6e <_malloc_r+0xea>
 800aad6:	6823      	ldr	r3, [r4, #0]
 800aad8:	4639      	mov	r1, r7
 800aada:	4630      	mov	r0, r6
 800aadc:	eb04 0903 	add.w	r9, r4, r3
 800aae0:	f000 fc3e 	bl	800b360 <_sbrk_r>
 800aae4:	4581      	cmp	r9, r0
 800aae6:	d142      	bne.n	800ab6e <_malloc_r+0xea>
 800aae8:	6821      	ldr	r1, [r4, #0]
 800aaea:	1a6d      	subs	r5, r5, r1
 800aaec:	4629      	mov	r1, r5
 800aaee:	4630      	mov	r0, r6
 800aaf0:	f7ff ffa6 	bl	800aa40 <sbrk_aligned>
 800aaf4:	3001      	adds	r0, #1
 800aaf6:	d03a      	beq.n	800ab6e <_malloc_r+0xea>
 800aaf8:	6823      	ldr	r3, [r4, #0]
 800aafa:	442b      	add	r3, r5
 800aafc:	6023      	str	r3, [r4, #0]
 800aafe:	f8d8 3000 	ldr.w	r3, [r8]
 800ab02:	685a      	ldr	r2, [r3, #4]
 800ab04:	bb62      	cbnz	r2, 800ab60 <_malloc_r+0xdc>
 800ab06:	f8c8 7000 	str.w	r7, [r8]
 800ab0a:	e00f      	b.n	800ab2c <_malloc_r+0xa8>
 800ab0c:	6822      	ldr	r2, [r4, #0]
 800ab0e:	1b52      	subs	r2, r2, r5
 800ab10:	d420      	bmi.n	800ab54 <_malloc_r+0xd0>
 800ab12:	2a0b      	cmp	r2, #11
 800ab14:	d917      	bls.n	800ab46 <_malloc_r+0xc2>
 800ab16:	1961      	adds	r1, r4, r5
 800ab18:	42a3      	cmp	r3, r4
 800ab1a:	6025      	str	r5, [r4, #0]
 800ab1c:	bf18      	it	ne
 800ab1e:	6059      	strne	r1, [r3, #4]
 800ab20:	6863      	ldr	r3, [r4, #4]
 800ab22:	bf08      	it	eq
 800ab24:	f8c8 1000 	streq.w	r1, [r8]
 800ab28:	5162      	str	r2, [r4, r5]
 800ab2a:	604b      	str	r3, [r1, #4]
 800ab2c:	4630      	mov	r0, r6
 800ab2e:	f000 f82f 	bl	800ab90 <__malloc_unlock>
 800ab32:	f104 000b 	add.w	r0, r4, #11
 800ab36:	1d23      	adds	r3, r4, #4
 800ab38:	f020 0007 	bic.w	r0, r0, #7
 800ab3c:	1ac2      	subs	r2, r0, r3
 800ab3e:	bf1c      	itt	ne
 800ab40:	1a1b      	subne	r3, r3, r0
 800ab42:	50a3      	strne	r3, [r4, r2]
 800ab44:	e7af      	b.n	800aaa6 <_malloc_r+0x22>
 800ab46:	6862      	ldr	r2, [r4, #4]
 800ab48:	42a3      	cmp	r3, r4
 800ab4a:	bf0c      	ite	eq
 800ab4c:	f8c8 2000 	streq.w	r2, [r8]
 800ab50:	605a      	strne	r2, [r3, #4]
 800ab52:	e7eb      	b.n	800ab2c <_malloc_r+0xa8>
 800ab54:	4623      	mov	r3, r4
 800ab56:	6864      	ldr	r4, [r4, #4]
 800ab58:	e7ae      	b.n	800aab8 <_malloc_r+0x34>
 800ab5a:	463c      	mov	r4, r7
 800ab5c:	687f      	ldr	r7, [r7, #4]
 800ab5e:	e7b6      	b.n	800aace <_malloc_r+0x4a>
 800ab60:	461a      	mov	r2, r3
 800ab62:	685b      	ldr	r3, [r3, #4]
 800ab64:	42a3      	cmp	r3, r4
 800ab66:	d1fb      	bne.n	800ab60 <_malloc_r+0xdc>
 800ab68:	2300      	movs	r3, #0
 800ab6a:	6053      	str	r3, [r2, #4]
 800ab6c:	e7de      	b.n	800ab2c <_malloc_r+0xa8>
 800ab6e:	230c      	movs	r3, #12
 800ab70:	6033      	str	r3, [r6, #0]
 800ab72:	4630      	mov	r0, r6
 800ab74:	f000 f80c 	bl	800ab90 <__malloc_unlock>
 800ab78:	e794      	b.n	800aaa4 <_malloc_r+0x20>
 800ab7a:	6005      	str	r5, [r0, #0]
 800ab7c:	e7d6      	b.n	800ab2c <_malloc_r+0xa8>
 800ab7e:	bf00      	nop
 800ab80:	20000550 	.word	0x20000550

0800ab84 <__malloc_lock>:
 800ab84:	4801      	ldr	r0, [pc, #4]	@ (800ab8c <__malloc_lock+0x8>)
 800ab86:	f000 bc38 	b.w	800b3fa <__retarget_lock_acquire_recursive>
 800ab8a:	bf00      	nop
 800ab8c:	20000694 	.word	0x20000694

0800ab90 <__malloc_unlock>:
 800ab90:	4801      	ldr	r0, [pc, #4]	@ (800ab98 <__malloc_unlock+0x8>)
 800ab92:	f000 bc33 	b.w	800b3fc <__retarget_lock_release_recursive>
 800ab96:	bf00      	nop
 800ab98:	20000694 	.word	0x20000694

0800ab9c <_strtol_l.constprop.0>:
 800ab9c:	2b24      	cmp	r3, #36	@ 0x24
 800ab9e:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800aba2:	4686      	mov	lr, r0
 800aba4:	4690      	mov	r8, r2
 800aba6:	d801      	bhi.n	800abac <_strtol_l.constprop.0+0x10>
 800aba8:	2b01      	cmp	r3, #1
 800abaa:	d106      	bne.n	800abba <_strtol_l.constprop.0+0x1e>
 800abac:	f000 fbfa 	bl	800b3a4 <__errno>
 800abb0:	2316      	movs	r3, #22
 800abb2:	6003      	str	r3, [r0, #0]
 800abb4:	2000      	movs	r0, #0
 800abb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abba:	4834      	ldr	r0, [pc, #208]	@ (800ac8c <_strtol_l.constprop.0+0xf0>)
 800abbc:	460d      	mov	r5, r1
 800abbe:	462a      	mov	r2, r5
 800abc0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800abc4:	5d06      	ldrb	r6, [r0, r4]
 800abc6:	f016 0608 	ands.w	r6, r6, #8
 800abca:	d1f8      	bne.n	800abbe <_strtol_l.constprop.0+0x22>
 800abcc:	2c2d      	cmp	r4, #45	@ 0x2d
 800abce:	d12d      	bne.n	800ac2c <_strtol_l.constprop.0+0x90>
 800abd0:	782c      	ldrb	r4, [r5, #0]
 800abd2:	2601      	movs	r6, #1
 800abd4:	1c95      	adds	r5, r2, #2
 800abd6:	f033 0210 	bics.w	r2, r3, #16
 800abda:	d109      	bne.n	800abf0 <_strtol_l.constprop.0+0x54>
 800abdc:	2c30      	cmp	r4, #48	@ 0x30
 800abde:	d12a      	bne.n	800ac36 <_strtol_l.constprop.0+0x9a>
 800abe0:	782a      	ldrb	r2, [r5, #0]
 800abe2:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800abe6:	2a58      	cmp	r2, #88	@ 0x58
 800abe8:	d125      	bne.n	800ac36 <_strtol_l.constprop.0+0x9a>
 800abea:	786c      	ldrb	r4, [r5, #1]
 800abec:	2310      	movs	r3, #16
 800abee:	3502      	adds	r5, #2
 800abf0:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800abf4:	f10c 3cff 	add.w	ip, ip, #4294967295
 800abf8:	2200      	movs	r2, #0
 800abfa:	fbbc f9f3 	udiv	r9, ip, r3
 800abfe:	4610      	mov	r0, r2
 800ac00:	fb03 ca19 	mls	sl, r3, r9, ip
 800ac04:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800ac08:	2f09      	cmp	r7, #9
 800ac0a:	d81b      	bhi.n	800ac44 <_strtol_l.constprop.0+0xa8>
 800ac0c:	463c      	mov	r4, r7
 800ac0e:	42a3      	cmp	r3, r4
 800ac10:	dd27      	ble.n	800ac62 <_strtol_l.constprop.0+0xc6>
 800ac12:	1c57      	adds	r7, r2, #1
 800ac14:	d007      	beq.n	800ac26 <_strtol_l.constprop.0+0x8a>
 800ac16:	4581      	cmp	r9, r0
 800ac18:	d320      	bcc.n	800ac5c <_strtol_l.constprop.0+0xc0>
 800ac1a:	d101      	bne.n	800ac20 <_strtol_l.constprop.0+0x84>
 800ac1c:	45a2      	cmp	sl, r4
 800ac1e:	db1d      	blt.n	800ac5c <_strtol_l.constprop.0+0xc0>
 800ac20:	fb00 4003 	mla	r0, r0, r3, r4
 800ac24:	2201      	movs	r2, #1
 800ac26:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ac2a:	e7eb      	b.n	800ac04 <_strtol_l.constprop.0+0x68>
 800ac2c:	2c2b      	cmp	r4, #43	@ 0x2b
 800ac2e:	bf04      	itt	eq
 800ac30:	782c      	ldrbeq	r4, [r5, #0]
 800ac32:	1c95      	addeq	r5, r2, #2
 800ac34:	e7cf      	b.n	800abd6 <_strtol_l.constprop.0+0x3a>
 800ac36:	2b00      	cmp	r3, #0
 800ac38:	d1da      	bne.n	800abf0 <_strtol_l.constprop.0+0x54>
 800ac3a:	2c30      	cmp	r4, #48	@ 0x30
 800ac3c:	bf0c      	ite	eq
 800ac3e:	2308      	moveq	r3, #8
 800ac40:	230a      	movne	r3, #10
 800ac42:	e7d5      	b.n	800abf0 <_strtol_l.constprop.0+0x54>
 800ac44:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800ac48:	2f19      	cmp	r7, #25
 800ac4a:	d801      	bhi.n	800ac50 <_strtol_l.constprop.0+0xb4>
 800ac4c:	3c37      	subs	r4, #55	@ 0x37
 800ac4e:	e7de      	b.n	800ac0e <_strtol_l.constprop.0+0x72>
 800ac50:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800ac54:	2f19      	cmp	r7, #25
 800ac56:	d804      	bhi.n	800ac62 <_strtol_l.constprop.0+0xc6>
 800ac58:	3c57      	subs	r4, #87	@ 0x57
 800ac5a:	e7d8      	b.n	800ac0e <_strtol_l.constprop.0+0x72>
 800ac5c:	f04f 32ff 	mov.w	r2, #4294967295
 800ac60:	e7e1      	b.n	800ac26 <_strtol_l.constprop.0+0x8a>
 800ac62:	1c53      	adds	r3, r2, #1
 800ac64:	d108      	bne.n	800ac78 <_strtol_l.constprop.0+0xdc>
 800ac66:	2322      	movs	r3, #34	@ 0x22
 800ac68:	f8ce 3000 	str.w	r3, [lr]
 800ac6c:	4660      	mov	r0, ip
 800ac6e:	f1b8 0f00 	cmp.w	r8, #0
 800ac72:	d0a0      	beq.n	800abb6 <_strtol_l.constprop.0+0x1a>
 800ac74:	1e69      	subs	r1, r5, #1
 800ac76:	e006      	b.n	800ac86 <_strtol_l.constprop.0+0xea>
 800ac78:	b106      	cbz	r6, 800ac7c <_strtol_l.constprop.0+0xe0>
 800ac7a:	4240      	negs	r0, r0
 800ac7c:	f1b8 0f00 	cmp.w	r8, #0
 800ac80:	d099      	beq.n	800abb6 <_strtol_l.constprop.0+0x1a>
 800ac82:	2a00      	cmp	r2, #0
 800ac84:	d1f6      	bne.n	800ac74 <_strtol_l.constprop.0+0xd8>
 800ac86:	f8c8 1000 	str.w	r1, [r8]
 800ac8a:	e794      	b.n	800abb6 <_strtol_l.constprop.0+0x1a>
 800ac8c:	0800c5ed 	.word	0x0800c5ed

0800ac90 <strtol>:
 800ac90:	4613      	mov	r3, r2
 800ac92:	460a      	mov	r2, r1
 800ac94:	4601      	mov	r1, r0
 800ac96:	4802      	ldr	r0, [pc, #8]	@ (800aca0 <strtol+0x10>)
 800ac98:	6800      	ldr	r0, [r0, #0]
 800ac9a:	f7ff bf7f 	b.w	800ab9c <_strtol_l.constprop.0>
 800ac9e:	bf00      	nop
 800aca0:	2000001c 	.word	0x2000001c

0800aca4 <std>:
 800aca4:	2300      	movs	r3, #0
 800aca6:	b510      	push	{r4, lr}
 800aca8:	4604      	mov	r4, r0
 800acaa:	e9c0 3300 	strd	r3, r3, [r0]
 800acae:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800acb2:	6083      	str	r3, [r0, #8]
 800acb4:	8181      	strh	r1, [r0, #12]
 800acb6:	6643      	str	r3, [r0, #100]	@ 0x64
 800acb8:	81c2      	strh	r2, [r0, #14]
 800acba:	6183      	str	r3, [r0, #24]
 800acbc:	4619      	mov	r1, r3
 800acbe:	2208      	movs	r2, #8
 800acc0:	305c      	adds	r0, #92	@ 0x5c
 800acc2:	f000 fab5 	bl	800b230 <memset>
 800acc6:	4b0d      	ldr	r3, [pc, #52]	@ (800acfc <std+0x58>)
 800acc8:	6263      	str	r3, [r4, #36]	@ 0x24
 800acca:	4b0d      	ldr	r3, [pc, #52]	@ (800ad00 <std+0x5c>)
 800accc:	62a3      	str	r3, [r4, #40]	@ 0x28
 800acce:	4b0d      	ldr	r3, [pc, #52]	@ (800ad04 <std+0x60>)
 800acd0:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800acd2:	4b0d      	ldr	r3, [pc, #52]	@ (800ad08 <std+0x64>)
 800acd4:	6323      	str	r3, [r4, #48]	@ 0x30
 800acd6:	4b0d      	ldr	r3, [pc, #52]	@ (800ad0c <std+0x68>)
 800acd8:	6224      	str	r4, [r4, #32]
 800acda:	429c      	cmp	r4, r3
 800acdc:	d006      	beq.n	800acec <std+0x48>
 800acde:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800ace2:	4294      	cmp	r4, r2
 800ace4:	d002      	beq.n	800acec <std+0x48>
 800ace6:	33d0      	adds	r3, #208	@ 0xd0
 800ace8:	429c      	cmp	r4, r3
 800acea:	d105      	bne.n	800acf8 <std+0x54>
 800acec:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800acf0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800acf4:	f000 bb80 	b.w	800b3f8 <__retarget_lock_init_recursive>
 800acf8:	bd10      	pop	{r4, pc}
 800acfa:	bf00      	nop
 800acfc:	0800b081 	.word	0x0800b081
 800ad00:	0800b0a3 	.word	0x0800b0a3
 800ad04:	0800b0db 	.word	0x0800b0db
 800ad08:	0800b0ff 	.word	0x0800b0ff
 800ad0c:	20000554 	.word	0x20000554

0800ad10 <stdio_exit_handler>:
 800ad10:	4a02      	ldr	r2, [pc, #8]	@ (800ad1c <stdio_exit_handler+0xc>)
 800ad12:	4903      	ldr	r1, [pc, #12]	@ (800ad20 <stdio_exit_handler+0x10>)
 800ad14:	4803      	ldr	r0, [pc, #12]	@ (800ad24 <stdio_exit_handler+0x14>)
 800ad16:	f000 b869 	b.w	800adec <_fwalk_sglue>
 800ad1a:	bf00      	nop
 800ad1c:	20000010 	.word	0x20000010
 800ad20:	0800bb89 	.word	0x0800bb89
 800ad24:	20000020 	.word	0x20000020

0800ad28 <cleanup_stdio>:
 800ad28:	6841      	ldr	r1, [r0, #4]
 800ad2a:	4b0c      	ldr	r3, [pc, #48]	@ (800ad5c <cleanup_stdio+0x34>)
 800ad2c:	4299      	cmp	r1, r3
 800ad2e:	b510      	push	{r4, lr}
 800ad30:	4604      	mov	r4, r0
 800ad32:	d001      	beq.n	800ad38 <cleanup_stdio+0x10>
 800ad34:	f000 ff28 	bl	800bb88 <_fflush_r>
 800ad38:	68a1      	ldr	r1, [r4, #8]
 800ad3a:	4b09      	ldr	r3, [pc, #36]	@ (800ad60 <cleanup_stdio+0x38>)
 800ad3c:	4299      	cmp	r1, r3
 800ad3e:	d002      	beq.n	800ad46 <cleanup_stdio+0x1e>
 800ad40:	4620      	mov	r0, r4
 800ad42:	f000 ff21 	bl	800bb88 <_fflush_r>
 800ad46:	68e1      	ldr	r1, [r4, #12]
 800ad48:	4b06      	ldr	r3, [pc, #24]	@ (800ad64 <cleanup_stdio+0x3c>)
 800ad4a:	4299      	cmp	r1, r3
 800ad4c:	d004      	beq.n	800ad58 <cleanup_stdio+0x30>
 800ad4e:	4620      	mov	r0, r4
 800ad50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad54:	f000 bf18 	b.w	800bb88 <_fflush_r>
 800ad58:	bd10      	pop	{r4, pc}
 800ad5a:	bf00      	nop
 800ad5c:	20000554 	.word	0x20000554
 800ad60:	200005bc 	.word	0x200005bc
 800ad64:	20000624 	.word	0x20000624

0800ad68 <global_stdio_init.part.0>:
 800ad68:	b510      	push	{r4, lr}
 800ad6a:	4b0b      	ldr	r3, [pc, #44]	@ (800ad98 <global_stdio_init.part.0+0x30>)
 800ad6c:	4c0b      	ldr	r4, [pc, #44]	@ (800ad9c <global_stdio_init.part.0+0x34>)
 800ad6e:	4a0c      	ldr	r2, [pc, #48]	@ (800ada0 <global_stdio_init.part.0+0x38>)
 800ad70:	601a      	str	r2, [r3, #0]
 800ad72:	4620      	mov	r0, r4
 800ad74:	2200      	movs	r2, #0
 800ad76:	2104      	movs	r1, #4
 800ad78:	f7ff ff94 	bl	800aca4 <std>
 800ad7c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800ad80:	2201      	movs	r2, #1
 800ad82:	2109      	movs	r1, #9
 800ad84:	f7ff ff8e 	bl	800aca4 <std>
 800ad88:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 800ad8c:	2202      	movs	r2, #2
 800ad8e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800ad92:	2112      	movs	r1, #18
 800ad94:	f7ff bf86 	b.w	800aca4 <std>
 800ad98:	2000068c 	.word	0x2000068c
 800ad9c:	20000554 	.word	0x20000554
 800ada0:	0800ad11 	.word	0x0800ad11

0800ada4 <__sfp_lock_acquire>:
 800ada4:	4801      	ldr	r0, [pc, #4]	@ (800adac <__sfp_lock_acquire+0x8>)
 800ada6:	f000 bb28 	b.w	800b3fa <__retarget_lock_acquire_recursive>
 800adaa:	bf00      	nop
 800adac:	20000695 	.word	0x20000695

0800adb0 <__sfp_lock_release>:
 800adb0:	4801      	ldr	r0, [pc, #4]	@ (800adb8 <__sfp_lock_release+0x8>)
 800adb2:	f000 bb23 	b.w	800b3fc <__retarget_lock_release_recursive>
 800adb6:	bf00      	nop
 800adb8:	20000695 	.word	0x20000695

0800adbc <__sinit>:
 800adbc:	b510      	push	{r4, lr}
 800adbe:	4604      	mov	r4, r0
 800adc0:	f7ff fff0 	bl	800ada4 <__sfp_lock_acquire>
 800adc4:	6a23      	ldr	r3, [r4, #32]
 800adc6:	b11b      	cbz	r3, 800add0 <__sinit+0x14>
 800adc8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800adcc:	f7ff bff0 	b.w	800adb0 <__sfp_lock_release>
 800add0:	4b04      	ldr	r3, [pc, #16]	@ (800ade4 <__sinit+0x28>)
 800add2:	6223      	str	r3, [r4, #32]
 800add4:	4b04      	ldr	r3, [pc, #16]	@ (800ade8 <__sinit+0x2c>)
 800add6:	681b      	ldr	r3, [r3, #0]
 800add8:	2b00      	cmp	r3, #0
 800adda:	d1f5      	bne.n	800adc8 <__sinit+0xc>
 800addc:	f7ff ffc4 	bl	800ad68 <global_stdio_init.part.0>
 800ade0:	e7f2      	b.n	800adc8 <__sinit+0xc>
 800ade2:	bf00      	nop
 800ade4:	0800ad29 	.word	0x0800ad29
 800ade8:	2000068c 	.word	0x2000068c

0800adec <_fwalk_sglue>:
 800adec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adf0:	4607      	mov	r7, r0
 800adf2:	4688      	mov	r8, r1
 800adf4:	4614      	mov	r4, r2
 800adf6:	2600      	movs	r6, #0
 800adf8:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800adfc:	f1b9 0901 	subs.w	r9, r9, #1
 800ae00:	d505      	bpl.n	800ae0e <_fwalk_sglue+0x22>
 800ae02:	6824      	ldr	r4, [r4, #0]
 800ae04:	2c00      	cmp	r4, #0
 800ae06:	d1f7      	bne.n	800adf8 <_fwalk_sglue+0xc>
 800ae08:	4630      	mov	r0, r6
 800ae0a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae0e:	89ab      	ldrh	r3, [r5, #12]
 800ae10:	2b01      	cmp	r3, #1
 800ae12:	d907      	bls.n	800ae24 <_fwalk_sglue+0x38>
 800ae14:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	d003      	beq.n	800ae24 <_fwalk_sglue+0x38>
 800ae1c:	4629      	mov	r1, r5
 800ae1e:	4638      	mov	r0, r7
 800ae20:	47c0      	blx	r8
 800ae22:	4306      	orrs	r6, r0
 800ae24:	3568      	adds	r5, #104	@ 0x68
 800ae26:	e7e9      	b.n	800adfc <_fwalk_sglue+0x10>

0800ae28 <iprintf>:
 800ae28:	b40f      	push	{r0, r1, r2, r3}
 800ae2a:	b507      	push	{r0, r1, r2, lr}
 800ae2c:	4906      	ldr	r1, [pc, #24]	@ (800ae48 <iprintf+0x20>)
 800ae2e:	ab04      	add	r3, sp, #16
 800ae30:	6808      	ldr	r0, [r1, #0]
 800ae32:	f853 2b04 	ldr.w	r2, [r3], #4
 800ae36:	6881      	ldr	r1, [r0, #8]
 800ae38:	9301      	str	r3, [sp, #4]
 800ae3a:	f000 fb7b 	bl	800b534 <_vfiprintf_r>
 800ae3e:	b003      	add	sp, #12
 800ae40:	f85d eb04 	ldr.w	lr, [sp], #4
 800ae44:	b004      	add	sp, #16
 800ae46:	4770      	bx	lr
 800ae48:	2000001c 	.word	0x2000001c

0800ae4c <_puts_r>:
 800ae4c:	6a03      	ldr	r3, [r0, #32]
 800ae4e:	b570      	push	{r4, r5, r6, lr}
 800ae50:	6884      	ldr	r4, [r0, #8]
 800ae52:	4605      	mov	r5, r0
 800ae54:	460e      	mov	r6, r1
 800ae56:	b90b      	cbnz	r3, 800ae5c <_puts_r+0x10>
 800ae58:	f7ff ffb0 	bl	800adbc <__sinit>
 800ae5c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae5e:	07db      	lsls	r3, r3, #31
 800ae60:	d405      	bmi.n	800ae6e <_puts_r+0x22>
 800ae62:	89a3      	ldrh	r3, [r4, #12]
 800ae64:	0598      	lsls	r0, r3, #22
 800ae66:	d402      	bmi.n	800ae6e <_puts_r+0x22>
 800ae68:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae6a:	f000 fac6 	bl	800b3fa <__retarget_lock_acquire_recursive>
 800ae6e:	89a3      	ldrh	r3, [r4, #12]
 800ae70:	0719      	lsls	r1, r3, #28
 800ae72:	d502      	bpl.n	800ae7a <_puts_r+0x2e>
 800ae74:	6923      	ldr	r3, [r4, #16]
 800ae76:	2b00      	cmp	r3, #0
 800ae78:	d135      	bne.n	800aee6 <_puts_r+0x9a>
 800ae7a:	4621      	mov	r1, r4
 800ae7c:	4628      	mov	r0, r5
 800ae7e:	f000 f981 	bl	800b184 <__swsetup_r>
 800ae82:	b380      	cbz	r0, 800aee6 <_puts_r+0x9a>
 800ae84:	f04f 35ff 	mov.w	r5, #4294967295
 800ae88:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800ae8a:	07da      	lsls	r2, r3, #31
 800ae8c:	d405      	bmi.n	800ae9a <_puts_r+0x4e>
 800ae8e:	89a3      	ldrh	r3, [r4, #12]
 800ae90:	059b      	lsls	r3, r3, #22
 800ae92:	d402      	bmi.n	800ae9a <_puts_r+0x4e>
 800ae94:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800ae96:	f000 fab1 	bl	800b3fc <__retarget_lock_release_recursive>
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	bd70      	pop	{r4, r5, r6, pc}
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	da04      	bge.n	800aeac <_puts_r+0x60>
 800aea2:	69a2      	ldr	r2, [r4, #24]
 800aea4:	429a      	cmp	r2, r3
 800aea6:	dc17      	bgt.n	800aed8 <_puts_r+0x8c>
 800aea8:	290a      	cmp	r1, #10
 800aeaa:	d015      	beq.n	800aed8 <_puts_r+0x8c>
 800aeac:	6823      	ldr	r3, [r4, #0]
 800aeae:	1c5a      	adds	r2, r3, #1
 800aeb0:	6022      	str	r2, [r4, #0]
 800aeb2:	7019      	strb	r1, [r3, #0]
 800aeb4:	68a3      	ldr	r3, [r4, #8]
 800aeb6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800aeba:	3b01      	subs	r3, #1
 800aebc:	60a3      	str	r3, [r4, #8]
 800aebe:	2900      	cmp	r1, #0
 800aec0:	d1ed      	bne.n	800ae9e <_puts_r+0x52>
 800aec2:	2b00      	cmp	r3, #0
 800aec4:	da11      	bge.n	800aeea <_puts_r+0x9e>
 800aec6:	4622      	mov	r2, r4
 800aec8:	210a      	movs	r1, #10
 800aeca:	4628      	mov	r0, r5
 800aecc:	f000 f91b 	bl	800b106 <__swbuf_r>
 800aed0:	3001      	adds	r0, #1
 800aed2:	d0d7      	beq.n	800ae84 <_puts_r+0x38>
 800aed4:	250a      	movs	r5, #10
 800aed6:	e7d7      	b.n	800ae88 <_puts_r+0x3c>
 800aed8:	4622      	mov	r2, r4
 800aeda:	4628      	mov	r0, r5
 800aedc:	f000 f913 	bl	800b106 <__swbuf_r>
 800aee0:	3001      	adds	r0, #1
 800aee2:	d1e7      	bne.n	800aeb4 <_puts_r+0x68>
 800aee4:	e7ce      	b.n	800ae84 <_puts_r+0x38>
 800aee6:	3e01      	subs	r6, #1
 800aee8:	e7e4      	b.n	800aeb4 <_puts_r+0x68>
 800aeea:	6823      	ldr	r3, [r4, #0]
 800aeec:	1c5a      	adds	r2, r3, #1
 800aeee:	6022      	str	r2, [r4, #0]
 800aef0:	220a      	movs	r2, #10
 800aef2:	701a      	strb	r2, [r3, #0]
 800aef4:	e7ee      	b.n	800aed4 <_puts_r+0x88>
	...

0800aef8 <puts>:
 800aef8:	4b02      	ldr	r3, [pc, #8]	@ (800af04 <puts+0xc>)
 800aefa:	4601      	mov	r1, r0
 800aefc:	6818      	ldr	r0, [r3, #0]
 800aefe:	f7ff bfa5 	b.w	800ae4c <_puts_r>
 800af02:	bf00      	nop
 800af04:	2000001c 	.word	0x2000001c

0800af08 <setbuf>:
 800af08:	fab1 f281 	clz	r2, r1
 800af0c:	0952      	lsrs	r2, r2, #5
 800af0e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800af12:	0052      	lsls	r2, r2, #1
 800af14:	f000 b800 	b.w	800af18 <setvbuf>

0800af18 <setvbuf>:
 800af18:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800af1c:	461d      	mov	r5, r3
 800af1e:	4b57      	ldr	r3, [pc, #348]	@ (800b07c <setvbuf+0x164>)
 800af20:	681f      	ldr	r7, [r3, #0]
 800af22:	4604      	mov	r4, r0
 800af24:	460e      	mov	r6, r1
 800af26:	4690      	mov	r8, r2
 800af28:	b127      	cbz	r7, 800af34 <setvbuf+0x1c>
 800af2a:	6a3b      	ldr	r3, [r7, #32]
 800af2c:	b913      	cbnz	r3, 800af34 <setvbuf+0x1c>
 800af2e:	4638      	mov	r0, r7
 800af30:	f7ff ff44 	bl	800adbc <__sinit>
 800af34:	f1b8 0f02 	cmp.w	r8, #2
 800af38:	d006      	beq.n	800af48 <setvbuf+0x30>
 800af3a:	f1b8 0f01 	cmp.w	r8, #1
 800af3e:	f200 809a 	bhi.w	800b076 <setvbuf+0x15e>
 800af42:	2d00      	cmp	r5, #0
 800af44:	f2c0 8097 	blt.w	800b076 <setvbuf+0x15e>
 800af48:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800af4a:	07d9      	lsls	r1, r3, #31
 800af4c:	d405      	bmi.n	800af5a <setvbuf+0x42>
 800af4e:	89a3      	ldrh	r3, [r4, #12]
 800af50:	059a      	lsls	r2, r3, #22
 800af52:	d402      	bmi.n	800af5a <setvbuf+0x42>
 800af54:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800af56:	f000 fa50 	bl	800b3fa <__retarget_lock_acquire_recursive>
 800af5a:	4621      	mov	r1, r4
 800af5c:	4638      	mov	r0, r7
 800af5e:	f000 fe13 	bl	800bb88 <_fflush_r>
 800af62:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800af64:	b141      	cbz	r1, 800af78 <setvbuf+0x60>
 800af66:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800af6a:	4299      	cmp	r1, r3
 800af6c:	d002      	beq.n	800af74 <setvbuf+0x5c>
 800af6e:	4638      	mov	r0, r7
 800af70:	f000 fa6c 	bl	800b44c <_free_r>
 800af74:	2300      	movs	r3, #0
 800af76:	6363      	str	r3, [r4, #52]	@ 0x34
 800af78:	2300      	movs	r3, #0
 800af7a:	61a3      	str	r3, [r4, #24]
 800af7c:	6063      	str	r3, [r4, #4]
 800af7e:	89a3      	ldrh	r3, [r4, #12]
 800af80:	061b      	lsls	r3, r3, #24
 800af82:	d503      	bpl.n	800af8c <setvbuf+0x74>
 800af84:	6921      	ldr	r1, [r4, #16]
 800af86:	4638      	mov	r0, r7
 800af88:	f000 fa60 	bl	800b44c <_free_r>
 800af8c:	89a3      	ldrh	r3, [r4, #12]
 800af8e:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800af92:	f023 0303 	bic.w	r3, r3, #3
 800af96:	f1b8 0f02 	cmp.w	r8, #2
 800af9a:	81a3      	strh	r3, [r4, #12]
 800af9c:	d061      	beq.n	800b062 <setvbuf+0x14a>
 800af9e:	ab01      	add	r3, sp, #4
 800afa0:	466a      	mov	r2, sp
 800afa2:	4621      	mov	r1, r4
 800afa4:	4638      	mov	r0, r7
 800afa6:	f000 fe29 	bl	800bbfc <__swhatbuf_r>
 800afaa:	89a3      	ldrh	r3, [r4, #12]
 800afac:	4318      	orrs	r0, r3
 800afae:	81a0      	strh	r0, [r4, #12]
 800afb0:	bb2d      	cbnz	r5, 800affe <setvbuf+0xe6>
 800afb2:	9d00      	ldr	r5, [sp, #0]
 800afb4:	4628      	mov	r0, r5
 800afb6:	f7ff fd33 	bl	800aa20 <malloc>
 800afba:	4606      	mov	r6, r0
 800afbc:	2800      	cmp	r0, #0
 800afbe:	d152      	bne.n	800b066 <setvbuf+0x14e>
 800afc0:	f8dd 9000 	ldr.w	r9, [sp]
 800afc4:	45a9      	cmp	r9, r5
 800afc6:	d140      	bne.n	800b04a <setvbuf+0x132>
 800afc8:	f04f 35ff 	mov.w	r5, #4294967295
 800afcc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800afd0:	f043 0202 	orr.w	r2, r3, #2
 800afd4:	81a2      	strh	r2, [r4, #12]
 800afd6:	2200      	movs	r2, #0
 800afd8:	60a2      	str	r2, [r4, #8]
 800afda:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 800afde:	6022      	str	r2, [r4, #0]
 800afe0:	6122      	str	r2, [r4, #16]
 800afe2:	2201      	movs	r2, #1
 800afe4:	6162      	str	r2, [r4, #20]
 800afe6:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800afe8:	07d6      	lsls	r6, r2, #31
 800afea:	d404      	bmi.n	800aff6 <setvbuf+0xde>
 800afec:	0598      	lsls	r0, r3, #22
 800afee:	d402      	bmi.n	800aff6 <setvbuf+0xde>
 800aff0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aff2:	f000 fa03 	bl	800b3fc <__retarget_lock_release_recursive>
 800aff6:	4628      	mov	r0, r5
 800aff8:	b003      	add	sp, #12
 800affa:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800affe:	2e00      	cmp	r6, #0
 800b000:	d0d8      	beq.n	800afb4 <setvbuf+0x9c>
 800b002:	6a3b      	ldr	r3, [r7, #32]
 800b004:	b913      	cbnz	r3, 800b00c <setvbuf+0xf4>
 800b006:	4638      	mov	r0, r7
 800b008:	f7ff fed8 	bl	800adbc <__sinit>
 800b00c:	f1b8 0f01 	cmp.w	r8, #1
 800b010:	bf08      	it	eq
 800b012:	89a3      	ldrheq	r3, [r4, #12]
 800b014:	6026      	str	r6, [r4, #0]
 800b016:	bf04      	itt	eq
 800b018:	f043 0301 	orreq.w	r3, r3, #1
 800b01c:	81a3      	strheq	r3, [r4, #12]
 800b01e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b022:	f013 0208 	ands.w	r2, r3, #8
 800b026:	e9c4 6504 	strd	r6, r5, [r4, #16]
 800b02a:	d01e      	beq.n	800b06a <setvbuf+0x152>
 800b02c:	07d9      	lsls	r1, r3, #31
 800b02e:	bf41      	itttt	mi
 800b030:	2200      	movmi	r2, #0
 800b032:	426d      	negmi	r5, r5
 800b034:	60a2      	strmi	r2, [r4, #8]
 800b036:	61a5      	strmi	r5, [r4, #24]
 800b038:	bf58      	it	pl
 800b03a:	60a5      	strpl	r5, [r4, #8]
 800b03c:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800b03e:	07d2      	lsls	r2, r2, #31
 800b040:	d401      	bmi.n	800b046 <setvbuf+0x12e>
 800b042:	059b      	lsls	r3, r3, #22
 800b044:	d513      	bpl.n	800b06e <setvbuf+0x156>
 800b046:	2500      	movs	r5, #0
 800b048:	e7d5      	b.n	800aff6 <setvbuf+0xde>
 800b04a:	4648      	mov	r0, r9
 800b04c:	f7ff fce8 	bl	800aa20 <malloc>
 800b050:	4606      	mov	r6, r0
 800b052:	2800      	cmp	r0, #0
 800b054:	d0b8      	beq.n	800afc8 <setvbuf+0xb0>
 800b056:	89a3      	ldrh	r3, [r4, #12]
 800b058:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800b05c:	81a3      	strh	r3, [r4, #12]
 800b05e:	464d      	mov	r5, r9
 800b060:	e7cf      	b.n	800b002 <setvbuf+0xea>
 800b062:	2500      	movs	r5, #0
 800b064:	e7b2      	b.n	800afcc <setvbuf+0xb4>
 800b066:	46a9      	mov	r9, r5
 800b068:	e7f5      	b.n	800b056 <setvbuf+0x13e>
 800b06a:	60a2      	str	r2, [r4, #8]
 800b06c:	e7e6      	b.n	800b03c <setvbuf+0x124>
 800b06e:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800b070:	f000 f9c4 	bl	800b3fc <__retarget_lock_release_recursive>
 800b074:	e7e7      	b.n	800b046 <setvbuf+0x12e>
 800b076:	f04f 35ff 	mov.w	r5, #4294967295
 800b07a:	e7bc      	b.n	800aff6 <setvbuf+0xde>
 800b07c:	2000001c 	.word	0x2000001c

0800b080 <__sread>:
 800b080:	b510      	push	{r4, lr}
 800b082:	460c      	mov	r4, r1
 800b084:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b088:	f000 f958 	bl	800b33c <_read_r>
 800b08c:	2800      	cmp	r0, #0
 800b08e:	bfab      	itete	ge
 800b090:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800b092:	89a3      	ldrhlt	r3, [r4, #12]
 800b094:	181b      	addge	r3, r3, r0
 800b096:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800b09a:	bfac      	ite	ge
 800b09c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800b09e:	81a3      	strhlt	r3, [r4, #12]
 800b0a0:	bd10      	pop	{r4, pc}

0800b0a2 <__swrite>:
 800b0a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0a6:	461f      	mov	r7, r3
 800b0a8:	898b      	ldrh	r3, [r1, #12]
 800b0aa:	05db      	lsls	r3, r3, #23
 800b0ac:	4605      	mov	r5, r0
 800b0ae:	460c      	mov	r4, r1
 800b0b0:	4616      	mov	r6, r2
 800b0b2:	d505      	bpl.n	800b0c0 <__swrite+0x1e>
 800b0b4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0b8:	2302      	movs	r3, #2
 800b0ba:	2200      	movs	r2, #0
 800b0bc:	f000 f92c 	bl	800b318 <_lseek_r>
 800b0c0:	89a3      	ldrh	r3, [r4, #12]
 800b0c2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800b0c6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800b0ca:	81a3      	strh	r3, [r4, #12]
 800b0cc:	4632      	mov	r2, r6
 800b0ce:	463b      	mov	r3, r7
 800b0d0:	4628      	mov	r0, r5
 800b0d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b0d6:	f000 b953 	b.w	800b380 <_write_r>

0800b0da <__sseek>:
 800b0da:	b510      	push	{r4, lr}
 800b0dc:	460c      	mov	r4, r1
 800b0de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b0e2:	f000 f919 	bl	800b318 <_lseek_r>
 800b0e6:	1c43      	adds	r3, r0, #1
 800b0e8:	89a3      	ldrh	r3, [r4, #12]
 800b0ea:	bf15      	itete	ne
 800b0ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 800b0ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800b0f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800b0f6:	81a3      	strheq	r3, [r4, #12]
 800b0f8:	bf18      	it	ne
 800b0fa:	81a3      	strhne	r3, [r4, #12]
 800b0fc:	bd10      	pop	{r4, pc}

0800b0fe <__sclose>:
 800b0fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800b102:	f000 b8f9 	b.w	800b2f8 <_close_r>

0800b106 <__swbuf_r>:
 800b106:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b108:	460e      	mov	r6, r1
 800b10a:	4614      	mov	r4, r2
 800b10c:	4605      	mov	r5, r0
 800b10e:	b118      	cbz	r0, 800b118 <__swbuf_r+0x12>
 800b110:	6a03      	ldr	r3, [r0, #32]
 800b112:	b90b      	cbnz	r3, 800b118 <__swbuf_r+0x12>
 800b114:	f7ff fe52 	bl	800adbc <__sinit>
 800b118:	69a3      	ldr	r3, [r4, #24]
 800b11a:	60a3      	str	r3, [r4, #8]
 800b11c:	89a3      	ldrh	r3, [r4, #12]
 800b11e:	071a      	lsls	r2, r3, #28
 800b120:	d501      	bpl.n	800b126 <__swbuf_r+0x20>
 800b122:	6923      	ldr	r3, [r4, #16]
 800b124:	b943      	cbnz	r3, 800b138 <__swbuf_r+0x32>
 800b126:	4621      	mov	r1, r4
 800b128:	4628      	mov	r0, r5
 800b12a:	f000 f82b 	bl	800b184 <__swsetup_r>
 800b12e:	b118      	cbz	r0, 800b138 <__swbuf_r+0x32>
 800b130:	f04f 37ff 	mov.w	r7, #4294967295
 800b134:	4638      	mov	r0, r7
 800b136:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b138:	6823      	ldr	r3, [r4, #0]
 800b13a:	6922      	ldr	r2, [r4, #16]
 800b13c:	1a98      	subs	r0, r3, r2
 800b13e:	6963      	ldr	r3, [r4, #20]
 800b140:	b2f6      	uxtb	r6, r6
 800b142:	4283      	cmp	r3, r0
 800b144:	4637      	mov	r7, r6
 800b146:	dc05      	bgt.n	800b154 <__swbuf_r+0x4e>
 800b148:	4621      	mov	r1, r4
 800b14a:	4628      	mov	r0, r5
 800b14c:	f000 fd1c 	bl	800bb88 <_fflush_r>
 800b150:	2800      	cmp	r0, #0
 800b152:	d1ed      	bne.n	800b130 <__swbuf_r+0x2a>
 800b154:	68a3      	ldr	r3, [r4, #8]
 800b156:	3b01      	subs	r3, #1
 800b158:	60a3      	str	r3, [r4, #8]
 800b15a:	6823      	ldr	r3, [r4, #0]
 800b15c:	1c5a      	adds	r2, r3, #1
 800b15e:	6022      	str	r2, [r4, #0]
 800b160:	701e      	strb	r6, [r3, #0]
 800b162:	6962      	ldr	r2, [r4, #20]
 800b164:	1c43      	adds	r3, r0, #1
 800b166:	429a      	cmp	r2, r3
 800b168:	d004      	beq.n	800b174 <__swbuf_r+0x6e>
 800b16a:	89a3      	ldrh	r3, [r4, #12]
 800b16c:	07db      	lsls	r3, r3, #31
 800b16e:	d5e1      	bpl.n	800b134 <__swbuf_r+0x2e>
 800b170:	2e0a      	cmp	r6, #10
 800b172:	d1df      	bne.n	800b134 <__swbuf_r+0x2e>
 800b174:	4621      	mov	r1, r4
 800b176:	4628      	mov	r0, r5
 800b178:	f000 fd06 	bl	800bb88 <_fflush_r>
 800b17c:	2800      	cmp	r0, #0
 800b17e:	d0d9      	beq.n	800b134 <__swbuf_r+0x2e>
 800b180:	e7d6      	b.n	800b130 <__swbuf_r+0x2a>
	...

0800b184 <__swsetup_r>:
 800b184:	b538      	push	{r3, r4, r5, lr}
 800b186:	4b29      	ldr	r3, [pc, #164]	@ (800b22c <__swsetup_r+0xa8>)
 800b188:	4605      	mov	r5, r0
 800b18a:	6818      	ldr	r0, [r3, #0]
 800b18c:	460c      	mov	r4, r1
 800b18e:	b118      	cbz	r0, 800b198 <__swsetup_r+0x14>
 800b190:	6a03      	ldr	r3, [r0, #32]
 800b192:	b90b      	cbnz	r3, 800b198 <__swsetup_r+0x14>
 800b194:	f7ff fe12 	bl	800adbc <__sinit>
 800b198:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b19c:	0719      	lsls	r1, r3, #28
 800b19e:	d422      	bmi.n	800b1e6 <__swsetup_r+0x62>
 800b1a0:	06da      	lsls	r2, r3, #27
 800b1a2:	d407      	bmi.n	800b1b4 <__swsetup_r+0x30>
 800b1a4:	2209      	movs	r2, #9
 800b1a6:	602a      	str	r2, [r5, #0]
 800b1a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800b1ac:	81a3      	strh	r3, [r4, #12]
 800b1ae:	f04f 30ff 	mov.w	r0, #4294967295
 800b1b2:	e033      	b.n	800b21c <__swsetup_r+0x98>
 800b1b4:	0758      	lsls	r0, r3, #29
 800b1b6:	d512      	bpl.n	800b1de <__swsetup_r+0x5a>
 800b1b8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800b1ba:	b141      	cbz	r1, 800b1ce <__swsetup_r+0x4a>
 800b1bc:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800b1c0:	4299      	cmp	r1, r3
 800b1c2:	d002      	beq.n	800b1ca <__swsetup_r+0x46>
 800b1c4:	4628      	mov	r0, r5
 800b1c6:	f000 f941 	bl	800b44c <_free_r>
 800b1ca:	2300      	movs	r3, #0
 800b1cc:	6363      	str	r3, [r4, #52]	@ 0x34
 800b1ce:	89a3      	ldrh	r3, [r4, #12]
 800b1d0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800b1d4:	81a3      	strh	r3, [r4, #12]
 800b1d6:	2300      	movs	r3, #0
 800b1d8:	6063      	str	r3, [r4, #4]
 800b1da:	6923      	ldr	r3, [r4, #16]
 800b1dc:	6023      	str	r3, [r4, #0]
 800b1de:	89a3      	ldrh	r3, [r4, #12]
 800b1e0:	f043 0308 	orr.w	r3, r3, #8
 800b1e4:	81a3      	strh	r3, [r4, #12]
 800b1e6:	6923      	ldr	r3, [r4, #16]
 800b1e8:	b94b      	cbnz	r3, 800b1fe <__swsetup_r+0x7a>
 800b1ea:	89a3      	ldrh	r3, [r4, #12]
 800b1ec:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800b1f0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800b1f4:	d003      	beq.n	800b1fe <__swsetup_r+0x7a>
 800b1f6:	4621      	mov	r1, r4
 800b1f8:	4628      	mov	r0, r5
 800b1fa:	f000 fd25 	bl	800bc48 <__smakebuf_r>
 800b1fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800b202:	f013 0201 	ands.w	r2, r3, #1
 800b206:	d00a      	beq.n	800b21e <__swsetup_r+0x9a>
 800b208:	2200      	movs	r2, #0
 800b20a:	60a2      	str	r2, [r4, #8]
 800b20c:	6962      	ldr	r2, [r4, #20]
 800b20e:	4252      	negs	r2, r2
 800b210:	61a2      	str	r2, [r4, #24]
 800b212:	6922      	ldr	r2, [r4, #16]
 800b214:	b942      	cbnz	r2, 800b228 <__swsetup_r+0xa4>
 800b216:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800b21a:	d1c5      	bne.n	800b1a8 <__swsetup_r+0x24>
 800b21c:	bd38      	pop	{r3, r4, r5, pc}
 800b21e:	0799      	lsls	r1, r3, #30
 800b220:	bf58      	it	pl
 800b222:	6962      	ldrpl	r2, [r4, #20]
 800b224:	60a2      	str	r2, [r4, #8]
 800b226:	e7f4      	b.n	800b212 <__swsetup_r+0x8e>
 800b228:	2000      	movs	r0, #0
 800b22a:	e7f7      	b.n	800b21c <__swsetup_r+0x98>
 800b22c:	2000001c 	.word	0x2000001c

0800b230 <memset>:
 800b230:	4402      	add	r2, r0
 800b232:	4603      	mov	r3, r0
 800b234:	4293      	cmp	r3, r2
 800b236:	d100      	bne.n	800b23a <memset+0xa>
 800b238:	4770      	bx	lr
 800b23a:	f803 1b01 	strb.w	r1, [r3], #1
 800b23e:	e7f9      	b.n	800b234 <memset+0x4>

0800b240 <strtok>:
 800b240:	4b16      	ldr	r3, [pc, #88]	@ (800b29c <strtok+0x5c>)
 800b242:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b246:	681f      	ldr	r7, [r3, #0]
 800b248:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 800b24a:	4605      	mov	r5, r0
 800b24c:	460e      	mov	r6, r1
 800b24e:	b9ec      	cbnz	r4, 800b28c <strtok+0x4c>
 800b250:	2050      	movs	r0, #80	@ 0x50
 800b252:	f7ff fbe5 	bl	800aa20 <malloc>
 800b256:	4602      	mov	r2, r0
 800b258:	6478      	str	r0, [r7, #68]	@ 0x44
 800b25a:	b920      	cbnz	r0, 800b266 <strtok+0x26>
 800b25c:	4b10      	ldr	r3, [pc, #64]	@ (800b2a0 <strtok+0x60>)
 800b25e:	4811      	ldr	r0, [pc, #68]	@ (800b2a4 <strtok+0x64>)
 800b260:	215b      	movs	r1, #91	@ 0x5b
 800b262:	f000 f8d5 	bl	800b410 <__assert_func>
 800b266:	e9c0 4400 	strd	r4, r4, [r0]
 800b26a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b26e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b272:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800b276:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 800b27a:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 800b27e:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800b282:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800b286:	6184      	str	r4, [r0, #24]
 800b288:	7704      	strb	r4, [r0, #28]
 800b28a:	6244      	str	r4, [r0, #36]	@ 0x24
 800b28c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800b28e:	4631      	mov	r1, r6
 800b290:	4628      	mov	r0, r5
 800b292:	2301      	movs	r3, #1
 800b294:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b298:	f000 b806 	b.w	800b2a8 <__strtok_r>
 800b29c:	2000001c 	.word	0x2000001c
 800b2a0:	0800c6ed 	.word	0x0800c6ed
 800b2a4:	0800c704 	.word	0x0800c704

0800b2a8 <__strtok_r>:
 800b2a8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b2aa:	4604      	mov	r4, r0
 800b2ac:	b908      	cbnz	r0, 800b2b2 <__strtok_r+0xa>
 800b2ae:	6814      	ldr	r4, [r2, #0]
 800b2b0:	b144      	cbz	r4, 800b2c4 <__strtok_r+0x1c>
 800b2b2:	4620      	mov	r0, r4
 800b2b4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b2b8:	460f      	mov	r7, r1
 800b2ba:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b2be:	b91e      	cbnz	r6, 800b2c8 <__strtok_r+0x20>
 800b2c0:	b965      	cbnz	r5, 800b2dc <__strtok_r+0x34>
 800b2c2:	6015      	str	r5, [r2, #0]
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	e005      	b.n	800b2d4 <__strtok_r+0x2c>
 800b2c8:	42b5      	cmp	r5, r6
 800b2ca:	d1f6      	bne.n	800b2ba <__strtok_r+0x12>
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d1f0      	bne.n	800b2b2 <__strtok_r+0xa>
 800b2d0:	6014      	str	r4, [r2, #0]
 800b2d2:	7003      	strb	r3, [r0, #0]
 800b2d4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b2d6:	461c      	mov	r4, r3
 800b2d8:	e00c      	b.n	800b2f4 <__strtok_r+0x4c>
 800b2da:	b915      	cbnz	r5, 800b2e2 <__strtok_r+0x3a>
 800b2dc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b2e0:	460e      	mov	r6, r1
 800b2e2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b2e6:	42ab      	cmp	r3, r5
 800b2e8:	d1f7      	bne.n	800b2da <__strtok_r+0x32>
 800b2ea:	2b00      	cmp	r3, #0
 800b2ec:	d0f3      	beq.n	800b2d6 <__strtok_r+0x2e>
 800b2ee:	2300      	movs	r3, #0
 800b2f0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b2f4:	6014      	str	r4, [r2, #0]
 800b2f6:	e7ed      	b.n	800b2d4 <__strtok_r+0x2c>

0800b2f8 <_close_r>:
 800b2f8:	b538      	push	{r3, r4, r5, lr}
 800b2fa:	4d06      	ldr	r5, [pc, #24]	@ (800b314 <_close_r+0x1c>)
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	4604      	mov	r4, r0
 800b300:	4608      	mov	r0, r1
 800b302:	602b      	str	r3, [r5, #0]
 800b304:	f7f6 f97e 	bl	8001604 <_close>
 800b308:	1c43      	adds	r3, r0, #1
 800b30a:	d102      	bne.n	800b312 <_close_r+0x1a>
 800b30c:	682b      	ldr	r3, [r5, #0]
 800b30e:	b103      	cbz	r3, 800b312 <_close_r+0x1a>
 800b310:	6023      	str	r3, [r4, #0]
 800b312:	bd38      	pop	{r3, r4, r5, pc}
 800b314:	20000690 	.word	0x20000690

0800b318 <_lseek_r>:
 800b318:	b538      	push	{r3, r4, r5, lr}
 800b31a:	4d07      	ldr	r5, [pc, #28]	@ (800b338 <_lseek_r+0x20>)
 800b31c:	4604      	mov	r4, r0
 800b31e:	4608      	mov	r0, r1
 800b320:	4611      	mov	r1, r2
 800b322:	2200      	movs	r2, #0
 800b324:	602a      	str	r2, [r5, #0]
 800b326:	461a      	mov	r2, r3
 800b328:	f7f6 f993 	bl	8001652 <_lseek>
 800b32c:	1c43      	adds	r3, r0, #1
 800b32e:	d102      	bne.n	800b336 <_lseek_r+0x1e>
 800b330:	682b      	ldr	r3, [r5, #0]
 800b332:	b103      	cbz	r3, 800b336 <_lseek_r+0x1e>
 800b334:	6023      	str	r3, [r4, #0]
 800b336:	bd38      	pop	{r3, r4, r5, pc}
 800b338:	20000690 	.word	0x20000690

0800b33c <_read_r>:
 800b33c:	b538      	push	{r3, r4, r5, lr}
 800b33e:	4d07      	ldr	r5, [pc, #28]	@ (800b35c <_read_r+0x20>)
 800b340:	4604      	mov	r4, r0
 800b342:	4608      	mov	r0, r1
 800b344:	4611      	mov	r1, r2
 800b346:	2200      	movs	r2, #0
 800b348:	602a      	str	r2, [r5, #0]
 800b34a:	461a      	mov	r2, r3
 800b34c:	f7f6 f93d 	bl	80015ca <_read>
 800b350:	1c43      	adds	r3, r0, #1
 800b352:	d102      	bne.n	800b35a <_read_r+0x1e>
 800b354:	682b      	ldr	r3, [r5, #0]
 800b356:	b103      	cbz	r3, 800b35a <_read_r+0x1e>
 800b358:	6023      	str	r3, [r4, #0]
 800b35a:	bd38      	pop	{r3, r4, r5, pc}
 800b35c:	20000690 	.word	0x20000690

0800b360 <_sbrk_r>:
 800b360:	b538      	push	{r3, r4, r5, lr}
 800b362:	4d06      	ldr	r5, [pc, #24]	@ (800b37c <_sbrk_r+0x1c>)
 800b364:	2300      	movs	r3, #0
 800b366:	4604      	mov	r4, r0
 800b368:	4608      	mov	r0, r1
 800b36a:	602b      	str	r3, [r5, #0]
 800b36c:	f7f6 f97e 	bl	800166c <_sbrk>
 800b370:	1c43      	adds	r3, r0, #1
 800b372:	d102      	bne.n	800b37a <_sbrk_r+0x1a>
 800b374:	682b      	ldr	r3, [r5, #0]
 800b376:	b103      	cbz	r3, 800b37a <_sbrk_r+0x1a>
 800b378:	6023      	str	r3, [r4, #0]
 800b37a:	bd38      	pop	{r3, r4, r5, pc}
 800b37c:	20000690 	.word	0x20000690

0800b380 <_write_r>:
 800b380:	b538      	push	{r3, r4, r5, lr}
 800b382:	4d07      	ldr	r5, [pc, #28]	@ (800b3a0 <_write_r+0x20>)
 800b384:	4604      	mov	r4, r0
 800b386:	4608      	mov	r0, r1
 800b388:	4611      	mov	r1, r2
 800b38a:	2200      	movs	r2, #0
 800b38c:	602a      	str	r2, [r5, #0]
 800b38e:	461a      	mov	r2, r3
 800b390:	f7f5 f926 	bl	80005e0 <_write>
 800b394:	1c43      	adds	r3, r0, #1
 800b396:	d102      	bne.n	800b39e <_write_r+0x1e>
 800b398:	682b      	ldr	r3, [r5, #0]
 800b39a:	b103      	cbz	r3, 800b39e <_write_r+0x1e>
 800b39c:	6023      	str	r3, [r4, #0]
 800b39e:	bd38      	pop	{r3, r4, r5, pc}
 800b3a0:	20000690 	.word	0x20000690

0800b3a4 <__errno>:
 800b3a4:	4b01      	ldr	r3, [pc, #4]	@ (800b3ac <__errno+0x8>)
 800b3a6:	6818      	ldr	r0, [r3, #0]
 800b3a8:	4770      	bx	lr
 800b3aa:	bf00      	nop
 800b3ac:	2000001c 	.word	0x2000001c

0800b3b0 <__libc_init_array>:
 800b3b0:	b570      	push	{r4, r5, r6, lr}
 800b3b2:	4d0d      	ldr	r5, [pc, #52]	@ (800b3e8 <__libc_init_array+0x38>)
 800b3b4:	4c0d      	ldr	r4, [pc, #52]	@ (800b3ec <__libc_init_array+0x3c>)
 800b3b6:	1b64      	subs	r4, r4, r5
 800b3b8:	10a4      	asrs	r4, r4, #2
 800b3ba:	2600      	movs	r6, #0
 800b3bc:	42a6      	cmp	r6, r4
 800b3be:	d109      	bne.n	800b3d4 <__libc_init_array+0x24>
 800b3c0:	4d0b      	ldr	r5, [pc, #44]	@ (800b3f0 <__libc_init_array+0x40>)
 800b3c2:	4c0c      	ldr	r4, [pc, #48]	@ (800b3f4 <__libc_init_array+0x44>)
 800b3c4:	f000 fcea 	bl	800bd9c <_init>
 800b3c8:	1b64      	subs	r4, r4, r5
 800b3ca:	10a4      	asrs	r4, r4, #2
 800b3cc:	2600      	movs	r6, #0
 800b3ce:	42a6      	cmp	r6, r4
 800b3d0:	d105      	bne.n	800b3de <__libc_init_array+0x2e>
 800b3d2:	bd70      	pop	{r4, r5, r6, pc}
 800b3d4:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3d8:	4798      	blx	r3
 800b3da:	3601      	adds	r6, #1
 800b3dc:	e7ee      	b.n	800b3bc <__libc_init_array+0xc>
 800b3de:	f855 3b04 	ldr.w	r3, [r5], #4
 800b3e2:	4798      	blx	r3
 800b3e4:	3601      	adds	r6, #1
 800b3e6:	e7f2      	b.n	800b3ce <__libc_init_array+0x1e>
 800b3e8:	0800c7d8 	.word	0x0800c7d8
 800b3ec:	0800c7d8 	.word	0x0800c7d8
 800b3f0:	0800c7d8 	.word	0x0800c7d8
 800b3f4:	0800c7dc 	.word	0x0800c7dc

0800b3f8 <__retarget_lock_init_recursive>:
 800b3f8:	4770      	bx	lr

0800b3fa <__retarget_lock_acquire_recursive>:
 800b3fa:	4770      	bx	lr

0800b3fc <__retarget_lock_release_recursive>:
 800b3fc:	4770      	bx	lr

0800b3fe <strcpy>:
 800b3fe:	4603      	mov	r3, r0
 800b400:	f811 2b01 	ldrb.w	r2, [r1], #1
 800b404:	f803 2b01 	strb.w	r2, [r3], #1
 800b408:	2a00      	cmp	r2, #0
 800b40a:	d1f9      	bne.n	800b400 <strcpy+0x2>
 800b40c:	4770      	bx	lr
	...

0800b410 <__assert_func>:
 800b410:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800b412:	4614      	mov	r4, r2
 800b414:	461a      	mov	r2, r3
 800b416:	4b09      	ldr	r3, [pc, #36]	@ (800b43c <__assert_func+0x2c>)
 800b418:	681b      	ldr	r3, [r3, #0]
 800b41a:	4605      	mov	r5, r0
 800b41c:	68d8      	ldr	r0, [r3, #12]
 800b41e:	b954      	cbnz	r4, 800b436 <__assert_func+0x26>
 800b420:	4b07      	ldr	r3, [pc, #28]	@ (800b440 <__assert_func+0x30>)
 800b422:	461c      	mov	r4, r3
 800b424:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800b428:	9100      	str	r1, [sp, #0]
 800b42a:	462b      	mov	r3, r5
 800b42c:	4905      	ldr	r1, [pc, #20]	@ (800b444 <__assert_func+0x34>)
 800b42e:	f000 fbd3 	bl	800bbd8 <fiprintf>
 800b432:	f000 fc67 	bl	800bd04 <abort>
 800b436:	4b04      	ldr	r3, [pc, #16]	@ (800b448 <__assert_func+0x38>)
 800b438:	e7f4      	b.n	800b424 <__assert_func+0x14>
 800b43a:	bf00      	nop
 800b43c:	2000001c 	.word	0x2000001c
 800b440:	0800c799 	.word	0x0800c799
 800b444:	0800c76b 	.word	0x0800c76b
 800b448:	0800c75e 	.word	0x0800c75e

0800b44c <_free_r>:
 800b44c:	b538      	push	{r3, r4, r5, lr}
 800b44e:	4605      	mov	r5, r0
 800b450:	2900      	cmp	r1, #0
 800b452:	d041      	beq.n	800b4d8 <_free_r+0x8c>
 800b454:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b458:	1f0c      	subs	r4, r1, #4
 800b45a:	2b00      	cmp	r3, #0
 800b45c:	bfb8      	it	lt
 800b45e:	18e4      	addlt	r4, r4, r3
 800b460:	f7ff fb90 	bl	800ab84 <__malloc_lock>
 800b464:	4a1d      	ldr	r2, [pc, #116]	@ (800b4dc <_free_r+0x90>)
 800b466:	6813      	ldr	r3, [r2, #0]
 800b468:	b933      	cbnz	r3, 800b478 <_free_r+0x2c>
 800b46a:	6063      	str	r3, [r4, #4]
 800b46c:	6014      	str	r4, [r2, #0]
 800b46e:	4628      	mov	r0, r5
 800b470:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b474:	f7ff bb8c 	b.w	800ab90 <__malloc_unlock>
 800b478:	42a3      	cmp	r3, r4
 800b47a:	d908      	bls.n	800b48e <_free_r+0x42>
 800b47c:	6820      	ldr	r0, [r4, #0]
 800b47e:	1821      	adds	r1, r4, r0
 800b480:	428b      	cmp	r3, r1
 800b482:	bf01      	itttt	eq
 800b484:	6819      	ldreq	r1, [r3, #0]
 800b486:	685b      	ldreq	r3, [r3, #4]
 800b488:	1809      	addeq	r1, r1, r0
 800b48a:	6021      	streq	r1, [r4, #0]
 800b48c:	e7ed      	b.n	800b46a <_free_r+0x1e>
 800b48e:	461a      	mov	r2, r3
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	b10b      	cbz	r3, 800b498 <_free_r+0x4c>
 800b494:	42a3      	cmp	r3, r4
 800b496:	d9fa      	bls.n	800b48e <_free_r+0x42>
 800b498:	6811      	ldr	r1, [r2, #0]
 800b49a:	1850      	adds	r0, r2, r1
 800b49c:	42a0      	cmp	r0, r4
 800b49e:	d10b      	bne.n	800b4b8 <_free_r+0x6c>
 800b4a0:	6820      	ldr	r0, [r4, #0]
 800b4a2:	4401      	add	r1, r0
 800b4a4:	1850      	adds	r0, r2, r1
 800b4a6:	4283      	cmp	r3, r0
 800b4a8:	6011      	str	r1, [r2, #0]
 800b4aa:	d1e0      	bne.n	800b46e <_free_r+0x22>
 800b4ac:	6818      	ldr	r0, [r3, #0]
 800b4ae:	685b      	ldr	r3, [r3, #4]
 800b4b0:	6053      	str	r3, [r2, #4]
 800b4b2:	4408      	add	r0, r1
 800b4b4:	6010      	str	r0, [r2, #0]
 800b4b6:	e7da      	b.n	800b46e <_free_r+0x22>
 800b4b8:	d902      	bls.n	800b4c0 <_free_r+0x74>
 800b4ba:	230c      	movs	r3, #12
 800b4bc:	602b      	str	r3, [r5, #0]
 800b4be:	e7d6      	b.n	800b46e <_free_r+0x22>
 800b4c0:	6820      	ldr	r0, [r4, #0]
 800b4c2:	1821      	adds	r1, r4, r0
 800b4c4:	428b      	cmp	r3, r1
 800b4c6:	bf04      	itt	eq
 800b4c8:	6819      	ldreq	r1, [r3, #0]
 800b4ca:	685b      	ldreq	r3, [r3, #4]
 800b4cc:	6063      	str	r3, [r4, #4]
 800b4ce:	bf04      	itt	eq
 800b4d0:	1809      	addeq	r1, r1, r0
 800b4d2:	6021      	streq	r1, [r4, #0]
 800b4d4:	6054      	str	r4, [r2, #4]
 800b4d6:	e7ca      	b.n	800b46e <_free_r+0x22>
 800b4d8:	bd38      	pop	{r3, r4, r5, pc}
 800b4da:	bf00      	nop
 800b4dc:	20000550 	.word	0x20000550

0800b4e0 <__sfputc_r>:
 800b4e0:	6893      	ldr	r3, [r2, #8]
 800b4e2:	3b01      	subs	r3, #1
 800b4e4:	2b00      	cmp	r3, #0
 800b4e6:	b410      	push	{r4}
 800b4e8:	6093      	str	r3, [r2, #8]
 800b4ea:	da08      	bge.n	800b4fe <__sfputc_r+0x1e>
 800b4ec:	6994      	ldr	r4, [r2, #24]
 800b4ee:	42a3      	cmp	r3, r4
 800b4f0:	db01      	blt.n	800b4f6 <__sfputc_r+0x16>
 800b4f2:	290a      	cmp	r1, #10
 800b4f4:	d103      	bne.n	800b4fe <__sfputc_r+0x1e>
 800b4f6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4fa:	f7ff be04 	b.w	800b106 <__swbuf_r>
 800b4fe:	6813      	ldr	r3, [r2, #0]
 800b500:	1c58      	adds	r0, r3, #1
 800b502:	6010      	str	r0, [r2, #0]
 800b504:	7019      	strb	r1, [r3, #0]
 800b506:	4608      	mov	r0, r1
 800b508:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b50c:	4770      	bx	lr

0800b50e <__sfputs_r>:
 800b50e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b510:	4606      	mov	r6, r0
 800b512:	460f      	mov	r7, r1
 800b514:	4614      	mov	r4, r2
 800b516:	18d5      	adds	r5, r2, r3
 800b518:	42ac      	cmp	r4, r5
 800b51a:	d101      	bne.n	800b520 <__sfputs_r+0x12>
 800b51c:	2000      	movs	r0, #0
 800b51e:	e007      	b.n	800b530 <__sfputs_r+0x22>
 800b520:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b524:	463a      	mov	r2, r7
 800b526:	4630      	mov	r0, r6
 800b528:	f7ff ffda 	bl	800b4e0 <__sfputc_r>
 800b52c:	1c43      	adds	r3, r0, #1
 800b52e:	d1f3      	bne.n	800b518 <__sfputs_r+0xa>
 800b530:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b534 <_vfiprintf_r>:
 800b534:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b538:	460d      	mov	r5, r1
 800b53a:	b09d      	sub	sp, #116	@ 0x74
 800b53c:	4614      	mov	r4, r2
 800b53e:	4698      	mov	r8, r3
 800b540:	4606      	mov	r6, r0
 800b542:	b118      	cbz	r0, 800b54c <_vfiprintf_r+0x18>
 800b544:	6a03      	ldr	r3, [r0, #32]
 800b546:	b90b      	cbnz	r3, 800b54c <_vfiprintf_r+0x18>
 800b548:	f7ff fc38 	bl	800adbc <__sinit>
 800b54c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b54e:	07d9      	lsls	r1, r3, #31
 800b550:	d405      	bmi.n	800b55e <_vfiprintf_r+0x2a>
 800b552:	89ab      	ldrh	r3, [r5, #12]
 800b554:	059a      	lsls	r2, r3, #22
 800b556:	d402      	bmi.n	800b55e <_vfiprintf_r+0x2a>
 800b558:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b55a:	f7ff ff4e 	bl	800b3fa <__retarget_lock_acquire_recursive>
 800b55e:	89ab      	ldrh	r3, [r5, #12]
 800b560:	071b      	lsls	r3, r3, #28
 800b562:	d501      	bpl.n	800b568 <_vfiprintf_r+0x34>
 800b564:	692b      	ldr	r3, [r5, #16]
 800b566:	b99b      	cbnz	r3, 800b590 <_vfiprintf_r+0x5c>
 800b568:	4629      	mov	r1, r5
 800b56a:	4630      	mov	r0, r6
 800b56c:	f7ff fe0a 	bl	800b184 <__swsetup_r>
 800b570:	b170      	cbz	r0, 800b590 <_vfiprintf_r+0x5c>
 800b572:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b574:	07dc      	lsls	r4, r3, #31
 800b576:	d504      	bpl.n	800b582 <_vfiprintf_r+0x4e>
 800b578:	f04f 30ff 	mov.w	r0, #4294967295
 800b57c:	b01d      	add	sp, #116	@ 0x74
 800b57e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b582:	89ab      	ldrh	r3, [r5, #12]
 800b584:	0598      	lsls	r0, r3, #22
 800b586:	d4f7      	bmi.n	800b578 <_vfiprintf_r+0x44>
 800b588:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b58a:	f7ff ff37 	bl	800b3fc <__retarget_lock_release_recursive>
 800b58e:	e7f3      	b.n	800b578 <_vfiprintf_r+0x44>
 800b590:	2300      	movs	r3, #0
 800b592:	9309      	str	r3, [sp, #36]	@ 0x24
 800b594:	2320      	movs	r3, #32
 800b596:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b59a:	f8cd 800c 	str.w	r8, [sp, #12]
 800b59e:	2330      	movs	r3, #48	@ 0x30
 800b5a0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b750 <_vfiprintf_r+0x21c>
 800b5a4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b5a8:	f04f 0901 	mov.w	r9, #1
 800b5ac:	4623      	mov	r3, r4
 800b5ae:	469a      	mov	sl, r3
 800b5b0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b5b4:	b10a      	cbz	r2, 800b5ba <_vfiprintf_r+0x86>
 800b5b6:	2a25      	cmp	r2, #37	@ 0x25
 800b5b8:	d1f9      	bne.n	800b5ae <_vfiprintf_r+0x7a>
 800b5ba:	ebba 0b04 	subs.w	fp, sl, r4
 800b5be:	d00b      	beq.n	800b5d8 <_vfiprintf_r+0xa4>
 800b5c0:	465b      	mov	r3, fp
 800b5c2:	4622      	mov	r2, r4
 800b5c4:	4629      	mov	r1, r5
 800b5c6:	4630      	mov	r0, r6
 800b5c8:	f7ff ffa1 	bl	800b50e <__sfputs_r>
 800b5cc:	3001      	adds	r0, #1
 800b5ce:	f000 80a7 	beq.w	800b720 <_vfiprintf_r+0x1ec>
 800b5d2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b5d4:	445a      	add	r2, fp
 800b5d6:	9209      	str	r2, [sp, #36]	@ 0x24
 800b5d8:	f89a 3000 	ldrb.w	r3, [sl]
 800b5dc:	2b00      	cmp	r3, #0
 800b5de:	f000 809f 	beq.w	800b720 <_vfiprintf_r+0x1ec>
 800b5e2:	2300      	movs	r3, #0
 800b5e4:	f04f 32ff 	mov.w	r2, #4294967295
 800b5e8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5ec:	f10a 0a01 	add.w	sl, sl, #1
 800b5f0:	9304      	str	r3, [sp, #16]
 800b5f2:	9307      	str	r3, [sp, #28]
 800b5f4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b5f8:	931a      	str	r3, [sp, #104]	@ 0x68
 800b5fa:	4654      	mov	r4, sl
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b602:	4853      	ldr	r0, [pc, #332]	@ (800b750 <_vfiprintf_r+0x21c>)
 800b604:	f7f4 fe24 	bl	8000250 <memchr>
 800b608:	9a04      	ldr	r2, [sp, #16]
 800b60a:	b9d8      	cbnz	r0, 800b644 <_vfiprintf_r+0x110>
 800b60c:	06d1      	lsls	r1, r2, #27
 800b60e:	bf44      	itt	mi
 800b610:	2320      	movmi	r3, #32
 800b612:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b616:	0713      	lsls	r3, r2, #28
 800b618:	bf44      	itt	mi
 800b61a:	232b      	movmi	r3, #43	@ 0x2b
 800b61c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b620:	f89a 3000 	ldrb.w	r3, [sl]
 800b624:	2b2a      	cmp	r3, #42	@ 0x2a
 800b626:	d015      	beq.n	800b654 <_vfiprintf_r+0x120>
 800b628:	9a07      	ldr	r2, [sp, #28]
 800b62a:	4654      	mov	r4, sl
 800b62c:	2000      	movs	r0, #0
 800b62e:	f04f 0c0a 	mov.w	ip, #10
 800b632:	4621      	mov	r1, r4
 800b634:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b638:	3b30      	subs	r3, #48	@ 0x30
 800b63a:	2b09      	cmp	r3, #9
 800b63c:	d94b      	bls.n	800b6d6 <_vfiprintf_r+0x1a2>
 800b63e:	b1b0      	cbz	r0, 800b66e <_vfiprintf_r+0x13a>
 800b640:	9207      	str	r2, [sp, #28]
 800b642:	e014      	b.n	800b66e <_vfiprintf_r+0x13a>
 800b644:	eba0 0308 	sub.w	r3, r0, r8
 800b648:	fa09 f303 	lsl.w	r3, r9, r3
 800b64c:	4313      	orrs	r3, r2
 800b64e:	9304      	str	r3, [sp, #16]
 800b650:	46a2      	mov	sl, r4
 800b652:	e7d2      	b.n	800b5fa <_vfiprintf_r+0xc6>
 800b654:	9b03      	ldr	r3, [sp, #12]
 800b656:	1d19      	adds	r1, r3, #4
 800b658:	681b      	ldr	r3, [r3, #0]
 800b65a:	9103      	str	r1, [sp, #12]
 800b65c:	2b00      	cmp	r3, #0
 800b65e:	bfbb      	ittet	lt
 800b660:	425b      	neglt	r3, r3
 800b662:	f042 0202 	orrlt.w	r2, r2, #2
 800b666:	9307      	strge	r3, [sp, #28]
 800b668:	9307      	strlt	r3, [sp, #28]
 800b66a:	bfb8      	it	lt
 800b66c:	9204      	strlt	r2, [sp, #16]
 800b66e:	7823      	ldrb	r3, [r4, #0]
 800b670:	2b2e      	cmp	r3, #46	@ 0x2e
 800b672:	d10a      	bne.n	800b68a <_vfiprintf_r+0x156>
 800b674:	7863      	ldrb	r3, [r4, #1]
 800b676:	2b2a      	cmp	r3, #42	@ 0x2a
 800b678:	d132      	bne.n	800b6e0 <_vfiprintf_r+0x1ac>
 800b67a:	9b03      	ldr	r3, [sp, #12]
 800b67c:	1d1a      	adds	r2, r3, #4
 800b67e:	681b      	ldr	r3, [r3, #0]
 800b680:	9203      	str	r2, [sp, #12]
 800b682:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b686:	3402      	adds	r4, #2
 800b688:	9305      	str	r3, [sp, #20]
 800b68a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b760 <_vfiprintf_r+0x22c>
 800b68e:	7821      	ldrb	r1, [r4, #0]
 800b690:	2203      	movs	r2, #3
 800b692:	4650      	mov	r0, sl
 800b694:	f7f4 fddc 	bl	8000250 <memchr>
 800b698:	b138      	cbz	r0, 800b6aa <_vfiprintf_r+0x176>
 800b69a:	9b04      	ldr	r3, [sp, #16]
 800b69c:	eba0 000a 	sub.w	r0, r0, sl
 800b6a0:	2240      	movs	r2, #64	@ 0x40
 800b6a2:	4082      	lsls	r2, r0
 800b6a4:	4313      	orrs	r3, r2
 800b6a6:	3401      	adds	r4, #1
 800b6a8:	9304      	str	r3, [sp, #16]
 800b6aa:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b6ae:	4829      	ldr	r0, [pc, #164]	@ (800b754 <_vfiprintf_r+0x220>)
 800b6b0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b6b4:	2206      	movs	r2, #6
 800b6b6:	f7f4 fdcb 	bl	8000250 <memchr>
 800b6ba:	2800      	cmp	r0, #0
 800b6bc:	d03f      	beq.n	800b73e <_vfiprintf_r+0x20a>
 800b6be:	4b26      	ldr	r3, [pc, #152]	@ (800b758 <_vfiprintf_r+0x224>)
 800b6c0:	bb1b      	cbnz	r3, 800b70a <_vfiprintf_r+0x1d6>
 800b6c2:	9b03      	ldr	r3, [sp, #12]
 800b6c4:	3307      	adds	r3, #7
 800b6c6:	f023 0307 	bic.w	r3, r3, #7
 800b6ca:	3308      	adds	r3, #8
 800b6cc:	9303      	str	r3, [sp, #12]
 800b6ce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b6d0:	443b      	add	r3, r7
 800b6d2:	9309      	str	r3, [sp, #36]	@ 0x24
 800b6d4:	e76a      	b.n	800b5ac <_vfiprintf_r+0x78>
 800b6d6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b6da:	460c      	mov	r4, r1
 800b6dc:	2001      	movs	r0, #1
 800b6de:	e7a8      	b.n	800b632 <_vfiprintf_r+0xfe>
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	3401      	adds	r4, #1
 800b6e4:	9305      	str	r3, [sp, #20]
 800b6e6:	4619      	mov	r1, r3
 800b6e8:	f04f 0c0a 	mov.w	ip, #10
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6f2:	3a30      	subs	r2, #48	@ 0x30
 800b6f4:	2a09      	cmp	r2, #9
 800b6f6:	d903      	bls.n	800b700 <_vfiprintf_r+0x1cc>
 800b6f8:	2b00      	cmp	r3, #0
 800b6fa:	d0c6      	beq.n	800b68a <_vfiprintf_r+0x156>
 800b6fc:	9105      	str	r1, [sp, #20]
 800b6fe:	e7c4      	b.n	800b68a <_vfiprintf_r+0x156>
 800b700:	fb0c 2101 	mla	r1, ip, r1, r2
 800b704:	4604      	mov	r4, r0
 800b706:	2301      	movs	r3, #1
 800b708:	e7f0      	b.n	800b6ec <_vfiprintf_r+0x1b8>
 800b70a:	ab03      	add	r3, sp, #12
 800b70c:	9300      	str	r3, [sp, #0]
 800b70e:	462a      	mov	r2, r5
 800b710:	4b12      	ldr	r3, [pc, #72]	@ (800b75c <_vfiprintf_r+0x228>)
 800b712:	a904      	add	r1, sp, #16
 800b714:	4630      	mov	r0, r6
 800b716:	f3af 8000 	nop.w
 800b71a:	4607      	mov	r7, r0
 800b71c:	1c78      	adds	r0, r7, #1
 800b71e:	d1d6      	bne.n	800b6ce <_vfiprintf_r+0x19a>
 800b720:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b722:	07d9      	lsls	r1, r3, #31
 800b724:	d405      	bmi.n	800b732 <_vfiprintf_r+0x1fe>
 800b726:	89ab      	ldrh	r3, [r5, #12]
 800b728:	059a      	lsls	r2, r3, #22
 800b72a:	d402      	bmi.n	800b732 <_vfiprintf_r+0x1fe>
 800b72c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b72e:	f7ff fe65 	bl	800b3fc <__retarget_lock_release_recursive>
 800b732:	89ab      	ldrh	r3, [r5, #12]
 800b734:	065b      	lsls	r3, r3, #25
 800b736:	f53f af1f 	bmi.w	800b578 <_vfiprintf_r+0x44>
 800b73a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b73c:	e71e      	b.n	800b57c <_vfiprintf_r+0x48>
 800b73e:	ab03      	add	r3, sp, #12
 800b740:	9300      	str	r3, [sp, #0]
 800b742:	462a      	mov	r2, r5
 800b744:	4b05      	ldr	r3, [pc, #20]	@ (800b75c <_vfiprintf_r+0x228>)
 800b746:	a904      	add	r1, sp, #16
 800b748:	4630      	mov	r0, r6
 800b74a:	f000 f879 	bl	800b840 <_printf_i>
 800b74e:	e7e4      	b.n	800b71a <_vfiprintf_r+0x1e6>
 800b750:	0800c79a 	.word	0x0800c79a
 800b754:	0800c7a4 	.word	0x0800c7a4
 800b758:	00000000 	.word	0x00000000
 800b75c:	0800b50f 	.word	0x0800b50f
 800b760:	0800c7a0 	.word	0x0800c7a0

0800b764 <_printf_common>:
 800b764:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b768:	4616      	mov	r6, r2
 800b76a:	4698      	mov	r8, r3
 800b76c:	688a      	ldr	r2, [r1, #8]
 800b76e:	690b      	ldr	r3, [r1, #16]
 800b770:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800b774:	4293      	cmp	r3, r2
 800b776:	bfb8      	it	lt
 800b778:	4613      	movlt	r3, r2
 800b77a:	6033      	str	r3, [r6, #0]
 800b77c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800b780:	4607      	mov	r7, r0
 800b782:	460c      	mov	r4, r1
 800b784:	b10a      	cbz	r2, 800b78a <_printf_common+0x26>
 800b786:	3301      	adds	r3, #1
 800b788:	6033      	str	r3, [r6, #0]
 800b78a:	6823      	ldr	r3, [r4, #0]
 800b78c:	0699      	lsls	r1, r3, #26
 800b78e:	bf42      	ittt	mi
 800b790:	6833      	ldrmi	r3, [r6, #0]
 800b792:	3302      	addmi	r3, #2
 800b794:	6033      	strmi	r3, [r6, #0]
 800b796:	6825      	ldr	r5, [r4, #0]
 800b798:	f015 0506 	ands.w	r5, r5, #6
 800b79c:	d106      	bne.n	800b7ac <_printf_common+0x48>
 800b79e:	f104 0a19 	add.w	sl, r4, #25
 800b7a2:	68e3      	ldr	r3, [r4, #12]
 800b7a4:	6832      	ldr	r2, [r6, #0]
 800b7a6:	1a9b      	subs	r3, r3, r2
 800b7a8:	42ab      	cmp	r3, r5
 800b7aa:	dc26      	bgt.n	800b7fa <_printf_common+0x96>
 800b7ac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800b7b0:	6822      	ldr	r2, [r4, #0]
 800b7b2:	3b00      	subs	r3, #0
 800b7b4:	bf18      	it	ne
 800b7b6:	2301      	movne	r3, #1
 800b7b8:	0692      	lsls	r2, r2, #26
 800b7ba:	d42b      	bmi.n	800b814 <_printf_common+0xb0>
 800b7bc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800b7c0:	4641      	mov	r1, r8
 800b7c2:	4638      	mov	r0, r7
 800b7c4:	47c8      	blx	r9
 800b7c6:	3001      	adds	r0, #1
 800b7c8:	d01e      	beq.n	800b808 <_printf_common+0xa4>
 800b7ca:	6823      	ldr	r3, [r4, #0]
 800b7cc:	6922      	ldr	r2, [r4, #16]
 800b7ce:	f003 0306 	and.w	r3, r3, #6
 800b7d2:	2b04      	cmp	r3, #4
 800b7d4:	bf02      	ittt	eq
 800b7d6:	68e5      	ldreq	r5, [r4, #12]
 800b7d8:	6833      	ldreq	r3, [r6, #0]
 800b7da:	1aed      	subeq	r5, r5, r3
 800b7dc:	68a3      	ldr	r3, [r4, #8]
 800b7de:	bf0c      	ite	eq
 800b7e0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b7e4:	2500      	movne	r5, #0
 800b7e6:	4293      	cmp	r3, r2
 800b7e8:	bfc4      	itt	gt
 800b7ea:	1a9b      	subgt	r3, r3, r2
 800b7ec:	18ed      	addgt	r5, r5, r3
 800b7ee:	2600      	movs	r6, #0
 800b7f0:	341a      	adds	r4, #26
 800b7f2:	42b5      	cmp	r5, r6
 800b7f4:	d11a      	bne.n	800b82c <_printf_common+0xc8>
 800b7f6:	2000      	movs	r0, #0
 800b7f8:	e008      	b.n	800b80c <_printf_common+0xa8>
 800b7fa:	2301      	movs	r3, #1
 800b7fc:	4652      	mov	r2, sl
 800b7fe:	4641      	mov	r1, r8
 800b800:	4638      	mov	r0, r7
 800b802:	47c8      	blx	r9
 800b804:	3001      	adds	r0, #1
 800b806:	d103      	bne.n	800b810 <_printf_common+0xac>
 800b808:	f04f 30ff 	mov.w	r0, #4294967295
 800b80c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b810:	3501      	adds	r5, #1
 800b812:	e7c6      	b.n	800b7a2 <_printf_common+0x3e>
 800b814:	18e1      	adds	r1, r4, r3
 800b816:	1c5a      	adds	r2, r3, #1
 800b818:	2030      	movs	r0, #48	@ 0x30
 800b81a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800b81e:	4422      	add	r2, r4
 800b820:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 800b824:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800b828:	3302      	adds	r3, #2
 800b82a:	e7c7      	b.n	800b7bc <_printf_common+0x58>
 800b82c:	2301      	movs	r3, #1
 800b82e:	4622      	mov	r2, r4
 800b830:	4641      	mov	r1, r8
 800b832:	4638      	mov	r0, r7
 800b834:	47c8      	blx	r9
 800b836:	3001      	adds	r0, #1
 800b838:	d0e6      	beq.n	800b808 <_printf_common+0xa4>
 800b83a:	3601      	adds	r6, #1
 800b83c:	e7d9      	b.n	800b7f2 <_printf_common+0x8e>
	...

0800b840 <_printf_i>:
 800b840:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b844:	7e0f      	ldrb	r7, [r1, #24]
 800b846:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800b848:	2f78      	cmp	r7, #120	@ 0x78
 800b84a:	4691      	mov	r9, r2
 800b84c:	4680      	mov	r8, r0
 800b84e:	460c      	mov	r4, r1
 800b850:	469a      	mov	sl, r3
 800b852:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 800b856:	d807      	bhi.n	800b868 <_printf_i+0x28>
 800b858:	2f62      	cmp	r7, #98	@ 0x62
 800b85a:	d80a      	bhi.n	800b872 <_printf_i+0x32>
 800b85c:	2f00      	cmp	r7, #0
 800b85e:	f000 80d2 	beq.w	800ba06 <_printf_i+0x1c6>
 800b862:	2f58      	cmp	r7, #88	@ 0x58
 800b864:	f000 80b9 	beq.w	800b9da <_printf_i+0x19a>
 800b868:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b86c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800b870:	e03a      	b.n	800b8e8 <_printf_i+0xa8>
 800b872:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 800b876:	2b15      	cmp	r3, #21
 800b878:	d8f6      	bhi.n	800b868 <_printf_i+0x28>
 800b87a:	a101      	add	r1, pc, #4	@ (adr r1, 800b880 <_printf_i+0x40>)
 800b87c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b880:	0800b8d9 	.word	0x0800b8d9
 800b884:	0800b8ed 	.word	0x0800b8ed
 800b888:	0800b869 	.word	0x0800b869
 800b88c:	0800b869 	.word	0x0800b869
 800b890:	0800b869 	.word	0x0800b869
 800b894:	0800b869 	.word	0x0800b869
 800b898:	0800b8ed 	.word	0x0800b8ed
 800b89c:	0800b869 	.word	0x0800b869
 800b8a0:	0800b869 	.word	0x0800b869
 800b8a4:	0800b869 	.word	0x0800b869
 800b8a8:	0800b869 	.word	0x0800b869
 800b8ac:	0800b9ed 	.word	0x0800b9ed
 800b8b0:	0800b917 	.word	0x0800b917
 800b8b4:	0800b9a7 	.word	0x0800b9a7
 800b8b8:	0800b869 	.word	0x0800b869
 800b8bc:	0800b869 	.word	0x0800b869
 800b8c0:	0800ba0f 	.word	0x0800ba0f
 800b8c4:	0800b869 	.word	0x0800b869
 800b8c8:	0800b917 	.word	0x0800b917
 800b8cc:	0800b869 	.word	0x0800b869
 800b8d0:	0800b869 	.word	0x0800b869
 800b8d4:	0800b9af 	.word	0x0800b9af
 800b8d8:	6833      	ldr	r3, [r6, #0]
 800b8da:	1d1a      	adds	r2, r3, #4
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	6032      	str	r2, [r6, #0]
 800b8e0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800b8e4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800b8e8:	2301      	movs	r3, #1
 800b8ea:	e09d      	b.n	800ba28 <_printf_i+0x1e8>
 800b8ec:	6833      	ldr	r3, [r6, #0]
 800b8ee:	6820      	ldr	r0, [r4, #0]
 800b8f0:	1d19      	adds	r1, r3, #4
 800b8f2:	6031      	str	r1, [r6, #0]
 800b8f4:	0606      	lsls	r6, r0, #24
 800b8f6:	d501      	bpl.n	800b8fc <_printf_i+0xbc>
 800b8f8:	681d      	ldr	r5, [r3, #0]
 800b8fa:	e003      	b.n	800b904 <_printf_i+0xc4>
 800b8fc:	0645      	lsls	r5, r0, #25
 800b8fe:	d5fb      	bpl.n	800b8f8 <_printf_i+0xb8>
 800b900:	f9b3 5000 	ldrsh.w	r5, [r3]
 800b904:	2d00      	cmp	r5, #0
 800b906:	da03      	bge.n	800b910 <_printf_i+0xd0>
 800b908:	232d      	movs	r3, #45	@ 0x2d
 800b90a:	426d      	negs	r5, r5
 800b90c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800b910:	4859      	ldr	r0, [pc, #356]	@ (800ba78 <_printf_i+0x238>)
 800b912:	230a      	movs	r3, #10
 800b914:	e011      	b.n	800b93a <_printf_i+0xfa>
 800b916:	6821      	ldr	r1, [r4, #0]
 800b918:	6833      	ldr	r3, [r6, #0]
 800b91a:	0608      	lsls	r0, r1, #24
 800b91c:	f853 5b04 	ldr.w	r5, [r3], #4
 800b920:	d402      	bmi.n	800b928 <_printf_i+0xe8>
 800b922:	0649      	lsls	r1, r1, #25
 800b924:	bf48      	it	mi
 800b926:	b2ad      	uxthmi	r5, r5
 800b928:	2f6f      	cmp	r7, #111	@ 0x6f
 800b92a:	4853      	ldr	r0, [pc, #332]	@ (800ba78 <_printf_i+0x238>)
 800b92c:	6033      	str	r3, [r6, #0]
 800b92e:	bf14      	ite	ne
 800b930:	230a      	movne	r3, #10
 800b932:	2308      	moveq	r3, #8
 800b934:	2100      	movs	r1, #0
 800b936:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800b93a:	6866      	ldr	r6, [r4, #4]
 800b93c:	60a6      	str	r6, [r4, #8]
 800b93e:	2e00      	cmp	r6, #0
 800b940:	bfa2      	ittt	ge
 800b942:	6821      	ldrge	r1, [r4, #0]
 800b944:	f021 0104 	bicge.w	r1, r1, #4
 800b948:	6021      	strge	r1, [r4, #0]
 800b94a:	b90d      	cbnz	r5, 800b950 <_printf_i+0x110>
 800b94c:	2e00      	cmp	r6, #0
 800b94e:	d04b      	beq.n	800b9e8 <_printf_i+0x1a8>
 800b950:	4616      	mov	r6, r2
 800b952:	fbb5 f1f3 	udiv	r1, r5, r3
 800b956:	fb03 5711 	mls	r7, r3, r1, r5
 800b95a:	5dc7      	ldrb	r7, [r0, r7]
 800b95c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800b960:	462f      	mov	r7, r5
 800b962:	42bb      	cmp	r3, r7
 800b964:	460d      	mov	r5, r1
 800b966:	d9f4      	bls.n	800b952 <_printf_i+0x112>
 800b968:	2b08      	cmp	r3, #8
 800b96a:	d10b      	bne.n	800b984 <_printf_i+0x144>
 800b96c:	6823      	ldr	r3, [r4, #0]
 800b96e:	07df      	lsls	r7, r3, #31
 800b970:	d508      	bpl.n	800b984 <_printf_i+0x144>
 800b972:	6923      	ldr	r3, [r4, #16]
 800b974:	6861      	ldr	r1, [r4, #4]
 800b976:	4299      	cmp	r1, r3
 800b978:	bfde      	ittt	le
 800b97a:	2330      	movle	r3, #48	@ 0x30
 800b97c:	f806 3c01 	strble.w	r3, [r6, #-1]
 800b980:	f106 36ff 	addle.w	r6, r6, #4294967295
 800b984:	1b92      	subs	r2, r2, r6
 800b986:	6122      	str	r2, [r4, #16]
 800b988:	f8cd a000 	str.w	sl, [sp]
 800b98c:	464b      	mov	r3, r9
 800b98e:	aa03      	add	r2, sp, #12
 800b990:	4621      	mov	r1, r4
 800b992:	4640      	mov	r0, r8
 800b994:	f7ff fee6 	bl	800b764 <_printf_common>
 800b998:	3001      	adds	r0, #1
 800b99a:	d14a      	bne.n	800ba32 <_printf_i+0x1f2>
 800b99c:	f04f 30ff 	mov.w	r0, #4294967295
 800b9a0:	b004      	add	sp, #16
 800b9a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9a6:	6823      	ldr	r3, [r4, #0]
 800b9a8:	f043 0320 	orr.w	r3, r3, #32
 800b9ac:	6023      	str	r3, [r4, #0]
 800b9ae:	4833      	ldr	r0, [pc, #204]	@ (800ba7c <_printf_i+0x23c>)
 800b9b0:	2778      	movs	r7, #120	@ 0x78
 800b9b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800b9b6:	6823      	ldr	r3, [r4, #0]
 800b9b8:	6831      	ldr	r1, [r6, #0]
 800b9ba:	061f      	lsls	r7, r3, #24
 800b9bc:	f851 5b04 	ldr.w	r5, [r1], #4
 800b9c0:	d402      	bmi.n	800b9c8 <_printf_i+0x188>
 800b9c2:	065f      	lsls	r7, r3, #25
 800b9c4:	bf48      	it	mi
 800b9c6:	b2ad      	uxthmi	r5, r5
 800b9c8:	6031      	str	r1, [r6, #0]
 800b9ca:	07d9      	lsls	r1, r3, #31
 800b9cc:	bf44      	itt	mi
 800b9ce:	f043 0320 	orrmi.w	r3, r3, #32
 800b9d2:	6023      	strmi	r3, [r4, #0]
 800b9d4:	b11d      	cbz	r5, 800b9de <_printf_i+0x19e>
 800b9d6:	2310      	movs	r3, #16
 800b9d8:	e7ac      	b.n	800b934 <_printf_i+0xf4>
 800b9da:	4827      	ldr	r0, [pc, #156]	@ (800ba78 <_printf_i+0x238>)
 800b9dc:	e7e9      	b.n	800b9b2 <_printf_i+0x172>
 800b9de:	6823      	ldr	r3, [r4, #0]
 800b9e0:	f023 0320 	bic.w	r3, r3, #32
 800b9e4:	6023      	str	r3, [r4, #0]
 800b9e6:	e7f6      	b.n	800b9d6 <_printf_i+0x196>
 800b9e8:	4616      	mov	r6, r2
 800b9ea:	e7bd      	b.n	800b968 <_printf_i+0x128>
 800b9ec:	6833      	ldr	r3, [r6, #0]
 800b9ee:	6825      	ldr	r5, [r4, #0]
 800b9f0:	6961      	ldr	r1, [r4, #20]
 800b9f2:	1d18      	adds	r0, r3, #4
 800b9f4:	6030      	str	r0, [r6, #0]
 800b9f6:	062e      	lsls	r6, r5, #24
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	d501      	bpl.n	800ba00 <_printf_i+0x1c0>
 800b9fc:	6019      	str	r1, [r3, #0]
 800b9fe:	e002      	b.n	800ba06 <_printf_i+0x1c6>
 800ba00:	0668      	lsls	r0, r5, #25
 800ba02:	d5fb      	bpl.n	800b9fc <_printf_i+0x1bc>
 800ba04:	8019      	strh	r1, [r3, #0]
 800ba06:	2300      	movs	r3, #0
 800ba08:	6123      	str	r3, [r4, #16]
 800ba0a:	4616      	mov	r6, r2
 800ba0c:	e7bc      	b.n	800b988 <_printf_i+0x148>
 800ba0e:	6833      	ldr	r3, [r6, #0]
 800ba10:	1d1a      	adds	r2, r3, #4
 800ba12:	6032      	str	r2, [r6, #0]
 800ba14:	681e      	ldr	r6, [r3, #0]
 800ba16:	6862      	ldr	r2, [r4, #4]
 800ba18:	2100      	movs	r1, #0
 800ba1a:	4630      	mov	r0, r6
 800ba1c:	f7f4 fc18 	bl	8000250 <memchr>
 800ba20:	b108      	cbz	r0, 800ba26 <_printf_i+0x1e6>
 800ba22:	1b80      	subs	r0, r0, r6
 800ba24:	6060      	str	r0, [r4, #4]
 800ba26:	6863      	ldr	r3, [r4, #4]
 800ba28:	6123      	str	r3, [r4, #16]
 800ba2a:	2300      	movs	r3, #0
 800ba2c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800ba30:	e7aa      	b.n	800b988 <_printf_i+0x148>
 800ba32:	6923      	ldr	r3, [r4, #16]
 800ba34:	4632      	mov	r2, r6
 800ba36:	4649      	mov	r1, r9
 800ba38:	4640      	mov	r0, r8
 800ba3a:	47d0      	blx	sl
 800ba3c:	3001      	adds	r0, #1
 800ba3e:	d0ad      	beq.n	800b99c <_printf_i+0x15c>
 800ba40:	6823      	ldr	r3, [r4, #0]
 800ba42:	079b      	lsls	r3, r3, #30
 800ba44:	d413      	bmi.n	800ba6e <_printf_i+0x22e>
 800ba46:	68e0      	ldr	r0, [r4, #12]
 800ba48:	9b03      	ldr	r3, [sp, #12]
 800ba4a:	4298      	cmp	r0, r3
 800ba4c:	bfb8      	it	lt
 800ba4e:	4618      	movlt	r0, r3
 800ba50:	e7a6      	b.n	800b9a0 <_printf_i+0x160>
 800ba52:	2301      	movs	r3, #1
 800ba54:	4632      	mov	r2, r6
 800ba56:	4649      	mov	r1, r9
 800ba58:	4640      	mov	r0, r8
 800ba5a:	47d0      	blx	sl
 800ba5c:	3001      	adds	r0, #1
 800ba5e:	d09d      	beq.n	800b99c <_printf_i+0x15c>
 800ba60:	3501      	adds	r5, #1
 800ba62:	68e3      	ldr	r3, [r4, #12]
 800ba64:	9903      	ldr	r1, [sp, #12]
 800ba66:	1a5b      	subs	r3, r3, r1
 800ba68:	42ab      	cmp	r3, r5
 800ba6a:	dcf2      	bgt.n	800ba52 <_printf_i+0x212>
 800ba6c:	e7eb      	b.n	800ba46 <_printf_i+0x206>
 800ba6e:	2500      	movs	r5, #0
 800ba70:	f104 0619 	add.w	r6, r4, #25
 800ba74:	e7f5      	b.n	800ba62 <_printf_i+0x222>
 800ba76:	bf00      	nop
 800ba78:	0800c7ab 	.word	0x0800c7ab
 800ba7c:	0800c7bc 	.word	0x0800c7bc

0800ba80 <__sflush_r>:
 800ba80:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800ba84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ba88:	0716      	lsls	r6, r2, #28
 800ba8a:	4605      	mov	r5, r0
 800ba8c:	460c      	mov	r4, r1
 800ba8e:	d454      	bmi.n	800bb3a <__sflush_r+0xba>
 800ba90:	684b      	ldr	r3, [r1, #4]
 800ba92:	2b00      	cmp	r3, #0
 800ba94:	dc02      	bgt.n	800ba9c <__sflush_r+0x1c>
 800ba96:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800ba98:	2b00      	cmp	r3, #0
 800ba9a:	dd48      	ble.n	800bb2e <__sflush_r+0xae>
 800ba9c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800ba9e:	2e00      	cmp	r6, #0
 800baa0:	d045      	beq.n	800bb2e <__sflush_r+0xae>
 800baa2:	2300      	movs	r3, #0
 800baa4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800baa8:	682f      	ldr	r7, [r5, #0]
 800baaa:	6a21      	ldr	r1, [r4, #32]
 800baac:	602b      	str	r3, [r5, #0]
 800baae:	d030      	beq.n	800bb12 <__sflush_r+0x92>
 800bab0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800bab2:	89a3      	ldrh	r3, [r4, #12]
 800bab4:	0759      	lsls	r1, r3, #29
 800bab6:	d505      	bpl.n	800bac4 <__sflush_r+0x44>
 800bab8:	6863      	ldr	r3, [r4, #4]
 800baba:	1ad2      	subs	r2, r2, r3
 800babc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800babe:	b10b      	cbz	r3, 800bac4 <__sflush_r+0x44>
 800bac0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800bac2:	1ad2      	subs	r2, r2, r3
 800bac4:	2300      	movs	r3, #0
 800bac6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800bac8:	6a21      	ldr	r1, [r4, #32]
 800baca:	4628      	mov	r0, r5
 800bacc:	47b0      	blx	r6
 800bace:	1c43      	adds	r3, r0, #1
 800bad0:	89a3      	ldrh	r3, [r4, #12]
 800bad2:	d106      	bne.n	800bae2 <__sflush_r+0x62>
 800bad4:	6829      	ldr	r1, [r5, #0]
 800bad6:	291d      	cmp	r1, #29
 800bad8:	d82b      	bhi.n	800bb32 <__sflush_r+0xb2>
 800bada:	4a2a      	ldr	r2, [pc, #168]	@ (800bb84 <__sflush_r+0x104>)
 800badc:	410a      	asrs	r2, r1
 800bade:	07d6      	lsls	r6, r2, #31
 800bae0:	d427      	bmi.n	800bb32 <__sflush_r+0xb2>
 800bae2:	2200      	movs	r2, #0
 800bae4:	6062      	str	r2, [r4, #4]
 800bae6:	04d9      	lsls	r1, r3, #19
 800bae8:	6922      	ldr	r2, [r4, #16]
 800baea:	6022      	str	r2, [r4, #0]
 800baec:	d504      	bpl.n	800baf8 <__sflush_r+0x78>
 800baee:	1c42      	adds	r2, r0, #1
 800baf0:	d101      	bne.n	800baf6 <__sflush_r+0x76>
 800baf2:	682b      	ldr	r3, [r5, #0]
 800baf4:	b903      	cbnz	r3, 800baf8 <__sflush_r+0x78>
 800baf6:	6560      	str	r0, [r4, #84]	@ 0x54
 800baf8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800bafa:	602f      	str	r7, [r5, #0]
 800bafc:	b1b9      	cbz	r1, 800bb2e <__sflush_r+0xae>
 800bafe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800bb02:	4299      	cmp	r1, r3
 800bb04:	d002      	beq.n	800bb0c <__sflush_r+0x8c>
 800bb06:	4628      	mov	r0, r5
 800bb08:	f7ff fca0 	bl	800b44c <_free_r>
 800bb0c:	2300      	movs	r3, #0
 800bb0e:	6363      	str	r3, [r4, #52]	@ 0x34
 800bb10:	e00d      	b.n	800bb2e <__sflush_r+0xae>
 800bb12:	2301      	movs	r3, #1
 800bb14:	4628      	mov	r0, r5
 800bb16:	47b0      	blx	r6
 800bb18:	4602      	mov	r2, r0
 800bb1a:	1c50      	adds	r0, r2, #1
 800bb1c:	d1c9      	bne.n	800bab2 <__sflush_r+0x32>
 800bb1e:	682b      	ldr	r3, [r5, #0]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	d0c6      	beq.n	800bab2 <__sflush_r+0x32>
 800bb24:	2b1d      	cmp	r3, #29
 800bb26:	d001      	beq.n	800bb2c <__sflush_r+0xac>
 800bb28:	2b16      	cmp	r3, #22
 800bb2a:	d11e      	bne.n	800bb6a <__sflush_r+0xea>
 800bb2c:	602f      	str	r7, [r5, #0]
 800bb2e:	2000      	movs	r0, #0
 800bb30:	e022      	b.n	800bb78 <__sflush_r+0xf8>
 800bb32:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb36:	b21b      	sxth	r3, r3
 800bb38:	e01b      	b.n	800bb72 <__sflush_r+0xf2>
 800bb3a:	690f      	ldr	r7, [r1, #16]
 800bb3c:	2f00      	cmp	r7, #0
 800bb3e:	d0f6      	beq.n	800bb2e <__sflush_r+0xae>
 800bb40:	0793      	lsls	r3, r2, #30
 800bb42:	680e      	ldr	r6, [r1, #0]
 800bb44:	bf08      	it	eq
 800bb46:	694b      	ldreq	r3, [r1, #20]
 800bb48:	600f      	str	r7, [r1, #0]
 800bb4a:	bf18      	it	ne
 800bb4c:	2300      	movne	r3, #0
 800bb4e:	eba6 0807 	sub.w	r8, r6, r7
 800bb52:	608b      	str	r3, [r1, #8]
 800bb54:	f1b8 0f00 	cmp.w	r8, #0
 800bb58:	dde9      	ble.n	800bb2e <__sflush_r+0xae>
 800bb5a:	6a21      	ldr	r1, [r4, #32]
 800bb5c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800bb5e:	4643      	mov	r3, r8
 800bb60:	463a      	mov	r2, r7
 800bb62:	4628      	mov	r0, r5
 800bb64:	47b0      	blx	r6
 800bb66:	2800      	cmp	r0, #0
 800bb68:	dc08      	bgt.n	800bb7c <__sflush_r+0xfc>
 800bb6a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bb6e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800bb72:	81a3      	strh	r3, [r4, #12]
 800bb74:	f04f 30ff 	mov.w	r0, #4294967295
 800bb78:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bb7c:	4407      	add	r7, r0
 800bb7e:	eba8 0800 	sub.w	r8, r8, r0
 800bb82:	e7e7      	b.n	800bb54 <__sflush_r+0xd4>
 800bb84:	dfbffffe 	.word	0xdfbffffe

0800bb88 <_fflush_r>:
 800bb88:	b538      	push	{r3, r4, r5, lr}
 800bb8a:	690b      	ldr	r3, [r1, #16]
 800bb8c:	4605      	mov	r5, r0
 800bb8e:	460c      	mov	r4, r1
 800bb90:	b913      	cbnz	r3, 800bb98 <_fflush_r+0x10>
 800bb92:	2500      	movs	r5, #0
 800bb94:	4628      	mov	r0, r5
 800bb96:	bd38      	pop	{r3, r4, r5, pc}
 800bb98:	b118      	cbz	r0, 800bba2 <_fflush_r+0x1a>
 800bb9a:	6a03      	ldr	r3, [r0, #32]
 800bb9c:	b90b      	cbnz	r3, 800bba2 <_fflush_r+0x1a>
 800bb9e:	f7ff f90d 	bl	800adbc <__sinit>
 800bba2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bba6:	2b00      	cmp	r3, #0
 800bba8:	d0f3      	beq.n	800bb92 <_fflush_r+0xa>
 800bbaa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800bbac:	07d0      	lsls	r0, r2, #31
 800bbae:	d404      	bmi.n	800bbba <_fflush_r+0x32>
 800bbb0:	0599      	lsls	r1, r3, #22
 800bbb2:	d402      	bmi.n	800bbba <_fflush_r+0x32>
 800bbb4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbb6:	f7ff fc20 	bl	800b3fa <__retarget_lock_acquire_recursive>
 800bbba:	4628      	mov	r0, r5
 800bbbc:	4621      	mov	r1, r4
 800bbbe:	f7ff ff5f 	bl	800ba80 <__sflush_r>
 800bbc2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800bbc4:	07da      	lsls	r2, r3, #31
 800bbc6:	4605      	mov	r5, r0
 800bbc8:	d4e4      	bmi.n	800bb94 <_fflush_r+0xc>
 800bbca:	89a3      	ldrh	r3, [r4, #12]
 800bbcc:	059b      	lsls	r3, r3, #22
 800bbce:	d4e1      	bmi.n	800bb94 <_fflush_r+0xc>
 800bbd0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800bbd2:	f7ff fc13 	bl	800b3fc <__retarget_lock_release_recursive>
 800bbd6:	e7dd      	b.n	800bb94 <_fflush_r+0xc>

0800bbd8 <fiprintf>:
 800bbd8:	b40e      	push	{r1, r2, r3}
 800bbda:	b503      	push	{r0, r1, lr}
 800bbdc:	4601      	mov	r1, r0
 800bbde:	ab03      	add	r3, sp, #12
 800bbe0:	4805      	ldr	r0, [pc, #20]	@ (800bbf8 <fiprintf+0x20>)
 800bbe2:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbe6:	6800      	ldr	r0, [r0, #0]
 800bbe8:	9301      	str	r3, [sp, #4]
 800bbea:	f7ff fca3 	bl	800b534 <_vfiprintf_r>
 800bbee:	b002      	add	sp, #8
 800bbf0:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbf4:	b003      	add	sp, #12
 800bbf6:	4770      	bx	lr
 800bbf8:	2000001c 	.word	0x2000001c

0800bbfc <__swhatbuf_r>:
 800bbfc:	b570      	push	{r4, r5, r6, lr}
 800bbfe:	460c      	mov	r4, r1
 800bc00:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bc04:	2900      	cmp	r1, #0
 800bc06:	b096      	sub	sp, #88	@ 0x58
 800bc08:	4615      	mov	r5, r2
 800bc0a:	461e      	mov	r6, r3
 800bc0c:	da0d      	bge.n	800bc2a <__swhatbuf_r+0x2e>
 800bc0e:	89a3      	ldrh	r3, [r4, #12]
 800bc10:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800bc14:	f04f 0100 	mov.w	r1, #0
 800bc18:	bf14      	ite	ne
 800bc1a:	2340      	movne	r3, #64	@ 0x40
 800bc1c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800bc20:	2000      	movs	r0, #0
 800bc22:	6031      	str	r1, [r6, #0]
 800bc24:	602b      	str	r3, [r5, #0]
 800bc26:	b016      	add	sp, #88	@ 0x58
 800bc28:	bd70      	pop	{r4, r5, r6, pc}
 800bc2a:	466a      	mov	r2, sp
 800bc2c:	f000 f848 	bl	800bcc0 <_fstat_r>
 800bc30:	2800      	cmp	r0, #0
 800bc32:	dbec      	blt.n	800bc0e <__swhatbuf_r+0x12>
 800bc34:	9901      	ldr	r1, [sp, #4]
 800bc36:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800bc3a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800bc3e:	4259      	negs	r1, r3
 800bc40:	4159      	adcs	r1, r3
 800bc42:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800bc46:	e7eb      	b.n	800bc20 <__swhatbuf_r+0x24>

0800bc48 <__smakebuf_r>:
 800bc48:	898b      	ldrh	r3, [r1, #12]
 800bc4a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bc4c:	079d      	lsls	r5, r3, #30
 800bc4e:	4606      	mov	r6, r0
 800bc50:	460c      	mov	r4, r1
 800bc52:	d507      	bpl.n	800bc64 <__smakebuf_r+0x1c>
 800bc54:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800bc58:	6023      	str	r3, [r4, #0]
 800bc5a:	6123      	str	r3, [r4, #16]
 800bc5c:	2301      	movs	r3, #1
 800bc5e:	6163      	str	r3, [r4, #20]
 800bc60:	b003      	add	sp, #12
 800bc62:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bc64:	ab01      	add	r3, sp, #4
 800bc66:	466a      	mov	r2, sp
 800bc68:	f7ff ffc8 	bl	800bbfc <__swhatbuf_r>
 800bc6c:	9f00      	ldr	r7, [sp, #0]
 800bc6e:	4605      	mov	r5, r0
 800bc70:	4639      	mov	r1, r7
 800bc72:	4630      	mov	r0, r6
 800bc74:	f7fe ff06 	bl	800aa84 <_malloc_r>
 800bc78:	b948      	cbnz	r0, 800bc8e <__smakebuf_r+0x46>
 800bc7a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bc7e:	059a      	lsls	r2, r3, #22
 800bc80:	d4ee      	bmi.n	800bc60 <__smakebuf_r+0x18>
 800bc82:	f023 0303 	bic.w	r3, r3, #3
 800bc86:	f043 0302 	orr.w	r3, r3, #2
 800bc8a:	81a3      	strh	r3, [r4, #12]
 800bc8c:	e7e2      	b.n	800bc54 <__smakebuf_r+0xc>
 800bc8e:	89a3      	ldrh	r3, [r4, #12]
 800bc90:	6020      	str	r0, [r4, #0]
 800bc92:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800bc96:	81a3      	strh	r3, [r4, #12]
 800bc98:	9b01      	ldr	r3, [sp, #4]
 800bc9a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800bc9e:	b15b      	cbz	r3, 800bcb8 <__smakebuf_r+0x70>
 800bca0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bca4:	4630      	mov	r0, r6
 800bca6:	f000 f81d 	bl	800bce4 <_isatty_r>
 800bcaa:	b128      	cbz	r0, 800bcb8 <__smakebuf_r+0x70>
 800bcac:	89a3      	ldrh	r3, [r4, #12]
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	f043 0301 	orr.w	r3, r3, #1
 800bcb6:	81a3      	strh	r3, [r4, #12]
 800bcb8:	89a3      	ldrh	r3, [r4, #12]
 800bcba:	431d      	orrs	r5, r3
 800bcbc:	81a5      	strh	r5, [r4, #12]
 800bcbe:	e7cf      	b.n	800bc60 <__smakebuf_r+0x18>

0800bcc0 <_fstat_r>:
 800bcc0:	b538      	push	{r3, r4, r5, lr}
 800bcc2:	4d07      	ldr	r5, [pc, #28]	@ (800bce0 <_fstat_r+0x20>)
 800bcc4:	2300      	movs	r3, #0
 800bcc6:	4604      	mov	r4, r0
 800bcc8:	4608      	mov	r0, r1
 800bcca:	4611      	mov	r1, r2
 800bccc:	602b      	str	r3, [r5, #0]
 800bcce:	f7f5 fca5 	bl	800161c <_fstat>
 800bcd2:	1c43      	adds	r3, r0, #1
 800bcd4:	d102      	bne.n	800bcdc <_fstat_r+0x1c>
 800bcd6:	682b      	ldr	r3, [r5, #0]
 800bcd8:	b103      	cbz	r3, 800bcdc <_fstat_r+0x1c>
 800bcda:	6023      	str	r3, [r4, #0]
 800bcdc:	bd38      	pop	{r3, r4, r5, pc}
 800bcde:	bf00      	nop
 800bce0:	20000690 	.word	0x20000690

0800bce4 <_isatty_r>:
 800bce4:	b538      	push	{r3, r4, r5, lr}
 800bce6:	4d06      	ldr	r5, [pc, #24]	@ (800bd00 <_isatty_r+0x1c>)
 800bce8:	2300      	movs	r3, #0
 800bcea:	4604      	mov	r4, r0
 800bcec:	4608      	mov	r0, r1
 800bcee:	602b      	str	r3, [r5, #0]
 800bcf0:	f7f5 fca4 	bl	800163c <_isatty>
 800bcf4:	1c43      	adds	r3, r0, #1
 800bcf6:	d102      	bne.n	800bcfe <_isatty_r+0x1a>
 800bcf8:	682b      	ldr	r3, [r5, #0]
 800bcfa:	b103      	cbz	r3, 800bcfe <_isatty_r+0x1a>
 800bcfc:	6023      	str	r3, [r4, #0]
 800bcfe:	bd38      	pop	{r3, r4, r5, pc}
 800bd00:	20000690 	.word	0x20000690

0800bd04 <abort>:
 800bd04:	b508      	push	{r3, lr}
 800bd06:	2006      	movs	r0, #6
 800bd08:	f000 f82c 	bl	800bd64 <raise>
 800bd0c:	2001      	movs	r0, #1
 800bd0e:	f7f5 fc51 	bl	80015b4 <_exit>

0800bd12 <_raise_r>:
 800bd12:	291f      	cmp	r1, #31
 800bd14:	b538      	push	{r3, r4, r5, lr}
 800bd16:	4605      	mov	r5, r0
 800bd18:	460c      	mov	r4, r1
 800bd1a:	d904      	bls.n	800bd26 <_raise_r+0x14>
 800bd1c:	2316      	movs	r3, #22
 800bd1e:	6003      	str	r3, [r0, #0]
 800bd20:	f04f 30ff 	mov.w	r0, #4294967295
 800bd24:	bd38      	pop	{r3, r4, r5, pc}
 800bd26:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800bd28:	b112      	cbz	r2, 800bd30 <_raise_r+0x1e>
 800bd2a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800bd2e:	b94b      	cbnz	r3, 800bd44 <_raise_r+0x32>
 800bd30:	4628      	mov	r0, r5
 800bd32:	f000 f831 	bl	800bd98 <_getpid_r>
 800bd36:	4622      	mov	r2, r4
 800bd38:	4601      	mov	r1, r0
 800bd3a:	4628      	mov	r0, r5
 800bd3c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800bd40:	f000 b818 	b.w	800bd74 <_kill_r>
 800bd44:	2b01      	cmp	r3, #1
 800bd46:	d00a      	beq.n	800bd5e <_raise_r+0x4c>
 800bd48:	1c59      	adds	r1, r3, #1
 800bd4a:	d103      	bne.n	800bd54 <_raise_r+0x42>
 800bd4c:	2316      	movs	r3, #22
 800bd4e:	6003      	str	r3, [r0, #0]
 800bd50:	2001      	movs	r0, #1
 800bd52:	e7e7      	b.n	800bd24 <_raise_r+0x12>
 800bd54:	2100      	movs	r1, #0
 800bd56:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800bd5a:	4620      	mov	r0, r4
 800bd5c:	4798      	blx	r3
 800bd5e:	2000      	movs	r0, #0
 800bd60:	e7e0      	b.n	800bd24 <_raise_r+0x12>
	...

0800bd64 <raise>:
 800bd64:	4b02      	ldr	r3, [pc, #8]	@ (800bd70 <raise+0xc>)
 800bd66:	4601      	mov	r1, r0
 800bd68:	6818      	ldr	r0, [r3, #0]
 800bd6a:	f7ff bfd2 	b.w	800bd12 <_raise_r>
 800bd6e:	bf00      	nop
 800bd70:	2000001c 	.word	0x2000001c

0800bd74 <_kill_r>:
 800bd74:	b538      	push	{r3, r4, r5, lr}
 800bd76:	4d07      	ldr	r5, [pc, #28]	@ (800bd94 <_kill_r+0x20>)
 800bd78:	2300      	movs	r3, #0
 800bd7a:	4604      	mov	r4, r0
 800bd7c:	4608      	mov	r0, r1
 800bd7e:	4611      	mov	r1, r2
 800bd80:	602b      	str	r3, [r5, #0]
 800bd82:	f7f5 fc07 	bl	8001594 <_kill>
 800bd86:	1c43      	adds	r3, r0, #1
 800bd88:	d102      	bne.n	800bd90 <_kill_r+0x1c>
 800bd8a:	682b      	ldr	r3, [r5, #0]
 800bd8c:	b103      	cbz	r3, 800bd90 <_kill_r+0x1c>
 800bd8e:	6023      	str	r3, [r4, #0]
 800bd90:	bd38      	pop	{r3, r4, r5, pc}
 800bd92:	bf00      	nop
 800bd94:	20000690 	.word	0x20000690

0800bd98 <_getpid_r>:
 800bd98:	f7f5 bbf4 	b.w	8001584 <_getpid>

0800bd9c <_init>:
 800bd9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bd9e:	bf00      	nop
 800bda0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bda2:	bc08      	pop	{r3}
 800bda4:	469e      	mov	lr, r3
 800bda6:	4770      	bx	lr

0800bda8 <_fini>:
 800bda8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bdaa:	bf00      	nop
 800bdac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800bdae:	bc08      	pop	{r3}
 800bdb0:	469e      	mov	lr, r3
 800bdb2:	4770      	bx	lr
