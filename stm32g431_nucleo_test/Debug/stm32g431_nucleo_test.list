
stm32g431_nucleo_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08011000  08011000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000941c  080111e0  080111e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000e1c  0801a5fc  0801a5fc  0000a5fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b418  0801b418  0000c08c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b418  0801b418  0000b418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b420  0801b420  0000c08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b420  0801b420  0000b420  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0801b424  0801b424  0000b424  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0801b428  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000560  2000008c  0801b4b4  0000c08c  2**2
                  ALLOC
 10 ._user_heap_stack 00000804  200005ec  0801b4b4  0000c5ec  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000c08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001f97f  00000000  00000000  0000c0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004b84  00000000  00000000  0002ba3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001c78  00000000  00000000  000305c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001619  00000000  00000000  00032238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00006e8b  00000000  00000000  00033851  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00028732  00000000  00000000  0003a6dc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000ed984  00000000  00000000  00062e0e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  00150792  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000823c  00000000  00000000  001507d8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000089  00000000  00000000  00158a14  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080111e0 <__do_global_dtors_aux>:
 80111e0:	b510      	push	{r4, lr}
 80111e2:	4c05      	ldr	r4, [pc, #20]	@ (80111f8 <__do_global_dtors_aux+0x18>)
 80111e4:	7823      	ldrb	r3, [r4, #0]
 80111e6:	b933      	cbnz	r3, 80111f6 <__do_global_dtors_aux+0x16>
 80111e8:	4b04      	ldr	r3, [pc, #16]	@ (80111fc <__do_global_dtors_aux+0x1c>)
 80111ea:	b113      	cbz	r3, 80111f2 <__do_global_dtors_aux+0x12>
 80111ec:	4804      	ldr	r0, [pc, #16]	@ (8011200 <__do_global_dtors_aux+0x20>)
 80111ee:	f3af 8000 	nop.w
 80111f2:	2301      	movs	r3, #1
 80111f4:	7023      	strb	r3, [r4, #0]
 80111f6:	bd10      	pop	{r4, pc}
 80111f8:	2000008c 	.word	0x2000008c
 80111fc:	00000000 	.word	0x00000000
 8011200:	0801a5e4 	.word	0x0801a5e4

08011204 <frame_dummy>:
 8011204:	b508      	push	{r3, lr}
 8011206:	4b03      	ldr	r3, [pc, #12]	@ (8011214 <frame_dummy+0x10>)
 8011208:	b11b      	cbz	r3, 8011212 <frame_dummy+0xe>
 801120a:	4903      	ldr	r1, [pc, #12]	@ (8011218 <frame_dummy+0x14>)
 801120c:	4803      	ldr	r0, [pc, #12]	@ (801121c <frame_dummy+0x18>)
 801120e:	f3af 8000 	nop.w
 8011212:	bd08      	pop	{r3, pc}
 8011214:	00000000 	.word	0x00000000
 8011218:	20000090 	.word	0x20000090
 801121c:	0801a5e4 	.word	0x0801a5e4

08011220 <strcmp>:
 8011220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8011224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8011228:	2a01      	cmp	r2, #1
 801122a:	bf28      	it	cs
 801122c:	429a      	cmpcs	r2, r3
 801122e:	d0f7      	beq.n	8011220 <strcmp>
 8011230:	1ad0      	subs	r0, r2, r3
 8011232:	4770      	bx	lr

08011234 <strlen>:
 8011234:	4603      	mov	r3, r0
 8011236:	f813 2b01 	ldrb.w	r2, [r3], #1
 801123a:	2a00      	cmp	r2, #0
 801123c:	d1fb      	bne.n	8011236 <strlen+0x2>
 801123e:	1a18      	subs	r0, r3, r0
 8011240:	3801      	subs	r0, #1
 8011242:	4770      	bx	lr
	...

08011250 <memchr>:
 8011250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8011254:	2a10      	cmp	r2, #16
 8011256:	db2b      	blt.n	80112b0 <memchr+0x60>
 8011258:	f010 0f07 	tst.w	r0, #7
 801125c:	d008      	beq.n	8011270 <memchr+0x20>
 801125e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8011262:	3a01      	subs	r2, #1
 8011264:	428b      	cmp	r3, r1
 8011266:	d02d      	beq.n	80112c4 <memchr+0x74>
 8011268:	f010 0f07 	tst.w	r0, #7
 801126c:	b342      	cbz	r2, 80112c0 <memchr+0x70>
 801126e:	d1f6      	bne.n	801125e <memchr+0xe>
 8011270:	b4f0      	push	{r4, r5, r6, r7}
 8011272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8011276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 801127a:	f022 0407 	bic.w	r4, r2, #7
 801127e:	f07f 0700 	mvns.w	r7, #0
 8011282:	2300      	movs	r3, #0
 8011284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8011288:	3c08      	subs	r4, #8
 801128a:	ea85 0501 	eor.w	r5, r5, r1
 801128e:	ea86 0601 	eor.w	r6, r6, r1
 8011292:	fa85 f547 	uadd8	r5, r5, r7
 8011296:	faa3 f587 	sel	r5, r3, r7
 801129a:	fa86 f647 	uadd8	r6, r6, r7
 801129e:	faa5 f687 	sel	r6, r5, r7
 80112a2:	b98e      	cbnz	r6, 80112c8 <memchr+0x78>
 80112a4:	d1ee      	bne.n	8011284 <memchr+0x34>
 80112a6:	bcf0      	pop	{r4, r5, r6, r7}
 80112a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80112ac:	f002 0207 	and.w	r2, r2, #7
 80112b0:	b132      	cbz	r2, 80112c0 <memchr+0x70>
 80112b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80112b6:	3a01      	subs	r2, #1
 80112b8:	ea83 0301 	eor.w	r3, r3, r1
 80112bc:	b113      	cbz	r3, 80112c4 <memchr+0x74>
 80112be:	d1f8      	bne.n	80112b2 <memchr+0x62>
 80112c0:	2000      	movs	r0, #0
 80112c2:	4770      	bx	lr
 80112c4:	3801      	subs	r0, #1
 80112c6:	4770      	bx	lr
 80112c8:	2d00      	cmp	r5, #0
 80112ca:	bf06      	itte	eq
 80112cc:	4635      	moveq	r5, r6
 80112ce:	3803      	subeq	r0, #3
 80112d0:	3807      	subne	r0, #7
 80112d2:	f015 0f01 	tst.w	r5, #1
 80112d6:	d107      	bne.n	80112e8 <memchr+0x98>
 80112d8:	3001      	adds	r0, #1
 80112da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80112de:	bf02      	ittt	eq
 80112e0:	3001      	addeq	r0, #1
 80112e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80112e6:	3001      	addeq	r0, #1
 80112e8:	bcf0      	pop	{r4, r5, r6, r7}
 80112ea:	3801      	subs	r0, #1
 80112ec:	4770      	bx	lr
 80112ee:	bf00      	nop

080112f0 <__aeabi_uldivmod>:
 80112f0:	b953      	cbnz	r3, 8011308 <__aeabi_uldivmod+0x18>
 80112f2:	b94a      	cbnz	r2, 8011308 <__aeabi_uldivmod+0x18>
 80112f4:	2900      	cmp	r1, #0
 80112f6:	bf08      	it	eq
 80112f8:	2800      	cmpeq	r0, #0
 80112fa:	bf1c      	itt	ne
 80112fc:	f04f 31ff 	movne.w	r1, #4294967295
 8011300:	f04f 30ff 	movne.w	r0, #4294967295
 8011304:	f000 b96a 	b.w	80115dc <__aeabi_idiv0>
 8011308:	f1ad 0c08 	sub.w	ip, sp, #8
 801130c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8011310:	f000 f806 	bl	8011320 <__udivmoddi4>
 8011314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8011318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 801131c:	b004      	add	sp, #16
 801131e:	4770      	bx	lr

08011320 <__udivmoddi4>:
 8011320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8011324:	9d08      	ldr	r5, [sp, #32]
 8011326:	460c      	mov	r4, r1
 8011328:	2b00      	cmp	r3, #0
 801132a:	d14e      	bne.n	80113ca <__udivmoddi4+0xaa>
 801132c:	4694      	mov	ip, r2
 801132e:	458c      	cmp	ip, r1
 8011330:	4686      	mov	lr, r0
 8011332:	fab2 f282 	clz	r2, r2
 8011336:	d962      	bls.n	80113fe <__udivmoddi4+0xde>
 8011338:	b14a      	cbz	r2, 801134e <__udivmoddi4+0x2e>
 801133a:	f1c2 0320 	rsb	r3, r2, #32
 801133e:	4091      	lsls	r1, r2
 8011340:	fa20 f303 	lsr.w	r3, r0, r3
 8011344:	fa0c fc02 	lsl.w	ip, ip, r2
 8011348:	4319      	orrs	r1, r3
 801134a:	fa00 fe02 	lsl.w	lr, r0, r2
 801134e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8011352:	fa1f f68c 	uxth.w	r6, ip
 8011356:	fbb1 f4f7 	udiv	r4, r1, r7
 801135a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801135e:	fb07 1114 	mls	r1, r7, r4, r1
 8011362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011366:	fb04 f106 	mul.w	r1, r4, r6
 801136a:	4299      	cmp	r1, r3
 801136c:	d90a      	bls.n	8011384 <__udivmoddi4+0x64>
 801136e:	eb1c 0303 	adds.w	r3, ip, r3
 8011372:	f104 30ff 	add.w	r0, r4, #4294967295
 8011376:	f080 8112 	bcs.w	801159e <__udivmoddi4+0x27e>
 801137a:	4299      	cmp	r1, r3
 801137c:	f240 810f 	bls.w	801159e <__udivmoddi4+0x27e>
 8011380:	3c02      	subs	r4, #2
 8011382:	4463      	add	r3, ip
 8011384:	1a59      	subs	r1, r3, r1
 8011386:	fa1f f38e 	uxth.w	r3, lr
 801138a:	fbb1 f0f7 	udiv	r0, r1, r7
 801138e:	fb07 1110 	mls	r1, r7, r0, r1
 8011392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011396:	fb00 f606 	mul.w	r6, r0, r6
 801139a:	429e      	cmp	r6, r3
 801139c:	d90a      	bls.n	80113b4 <__udivmoddi4+0x94>
 801139e:	eb1c 0303 	adds.w	r3, ip, r3
 80113a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80113a6:	f080 80fc 	bcs.w	80115a2 <__udivmoddi4+0x282>
 80113aa:	429e      	cmp	r6, r3
 80113ac:	f240 80f9 	bls.w	80115a2 <__udivmoddi4+0x282>
 80113b0:	4463      	add	r3, ip
 80113b2:	3802      	subs	r0, #2
 80113b4:	1b9b      	subs	r3, r3, r6
 80113b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80113ba:	2100      	movs	r1, #0
 80113bc:	b11d      	cbz	r5, 80113c6 <__udivmoddi4+0xa6>
 80113be:	40d3      	lsrs	r3, r2
 80113c0:	2200      	movs	r2, #0
 80113c2:	e9c5 3200 	strd	r3, r2, [r5]
 80113c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80113ca:	428b      	cmp	r3, r1
 80113cc:	d905      	bls.n	80113da <__udivmoddi4+0xba>
 80113ce:	b10d      	cbz	r5, 80113d4 <__udivmoddi4+0xb4>
 80113d0:	e9c5 0100 	strd	r0, r1, [r5]
 80113d4:	2100      	movs	r1, #0
 80113d6:	4608      	mov	r0, r1
 80113d8:	e7f5      	b.n	80113c6 <__udivmoddi4+0xa6>
 80113da:	fab3 f183 	clz	r1, r3
 80113de:	2900      	cmp	r1, #0
 80113e0:	d146      	bne.n	8011470 <__udivmoddi4+0x150>
 80113e2:	42a3      	cmp	r3, r4
 80113e4:	d302      	bcc.n	80113ec <__udivmoddi4+0xcc>
 80113e6:	4290      	cmp	r0, r2
 80113e8:	f0c0 80f0 	bcc.w	80115cc <__udivmoddi4+0x2ac>
 80113ec:	1a86      	subs	r6, r0, r2
 80113ee:	eb64 0303 	sbc.w	r3, r4, r3
 80113f2:	2001      	movs	r0, #1
 80113f4:	2d00      	cmp	r5, #0
 80113f6:	d0e6      	beq.n	80113c6 <__udivmoddi4+0xa6>
 80113f8:	e9c5 6300 	strd	r6, r3, [r5]
 80113fc:	e7e3      	b.n	80113c6 <__udivmoddi4+0xa6>
 80113fe:	2a00      	cmp	r2, #0
 8011400:	f040 8090 	bne.w	8011524 <__udivmoddi4+0x204>
 8011404:	eba1 040c 	sub.w	r4, r1, ip
 8011408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801140c:	fa1f f78c 	uxth.w	r7, ip
 8011410:	2101      	movs	r1, #1
 8011412:	fbb4 f6f8 	udiv	r6, r4, r8
 8011416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 801141a:	fb08 4416 	mls	r4, r8, r6, r4
 801141e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8011422:	fb07 f006 	mul.w	r0, r7, r6
 8011426:	4298      	cmp	r0, r3
 8011428:	d908      	bls.n	801143c <__udivmoddi4+0x11c>
 801142a:	eb1c 0303 	adds.w	r3, ip, r3
 801142e:	f106 34ff 	add.w	r4, r6, #4294967295
 8011432:	d202      	bcs.n	801143a <__udivmoddi4+0x11a>
 8011434:	4298      	cmp	r0, r3
 8011436:	f200 80cd 	bhi.w	80115d4 <__udivmoddi4+0x2b4>
 801143a:	4626      	mov	r6, r4
 801143c:	1a1c      	subs	r4, r3, r0
 801143e:	fa1f f38e 	uxth.w	r3, lr
 8011442:	fbb4 f0f8 	udiv	r0, r4, r8
 8011446:	fb08 4410 	mls	r4, r8, r0, r4
 801144a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 801144e:	fb00 f707 	mul.w	r7, r0, r7
 8011452:	429f      	cmp	r7, r3
 8011454:	d908      	bls.n	8011468 <__udivmoddi4+0x148>
 8011456:	eb1c 0303 	adds.w	r3, ip, r3
 801145a:	f100 34ff 	add.w	r4, r0, #4294967295
 801145e:	d202      	bcs.n	8011466 <__udivmoddi4+0x146>
 8011460:	429f      	cmp	r7, r3
 8011462:	f200 80b0 	bhi.w	80115c6 <__udivmoddi4+0x2a6>
 8011466:	4620      	mov	r0, r4
 8011468:	1bdb      	subs	r3, r3, r7
 801146a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 801146e:	e7a5      	b.n	80113bc <__udivmoddi4+0x9c>
 8011470:	f1c1 0620 	rsb	r6, r1, #32
 8011474:	408b      	lsls	r3, r1
 8011476:	fa22 f706 	lsr.w	r7, r2, r6
 801147a:	431f      	orrs	r7, r3
 801147c:	fa20 fc06 	lsr.w	ip, r0, r6
 8011480:	fa04 f301 	lsl.w	r3, r4, r1
 8011484:	ea43 030c 	orr.w	r3, r3, ip
 8011488:	40f4      	lsrs	r4, r6
 801148a:	fa00 f801 	lsl.w	r8, r0, r1
 801148e:	0c38      	lsrs	r0, r7, #16
 8011490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8011494:	fbb4 fef0 	udiv	lr, r4, r0
 8011498:	fa1f fc87 	uxth.w	ip, r7
 801149c:	fb00 441e 	mls	r4, r0, lr, r4
 80114a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80114a4:	fb0e f90c 	mul.w	r9, lr, ip
 80114a8:	45a1      	cmp	r9, r4
 80114aa:	fa02 f201 	lsl.w	r2, r2, r1
 80114ae:	d90a      	bls.n	80114c6 <__udivmoddi4+0x1a6>
 80114b0:	193c      	adds	r4, r7, r4
 80114b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80114b6:	f080 8084 	bcs.w	80115c2 <__udivmoddi4+0x2a2>
 80114ba:	45a1      	cmp	r9, r4
 80114bc:	f240 8081 	bls.w	80115c2 <__udivmoddi4+0x2a2>
 80114c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80114c4:	443c      	add	r4, r7
 80114c6:	eba4 0409 	sub.w	r4, r4, r9
 80114ca:	fa1f f983 	uxth.w	r9, r3
 80114ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80114d2:	fb00 4413 	mls	r4, r0, r3, r4
 80114d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80114da:	fb03 fc0c 	mul.w	ip, r3, ip
 80114de:	45a4      	cmp	ip, r4
 80114e0:	d907      	bls.n	80114f2 <__udivmoddi4+0x1d2>
 80114e2:	193c      	adds	r4, r7, r4
 80114e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80114e8:	d267      	bcs.n	80115ba <__udivmoddi4+0x29a>
 80114ea:	45a4      	cmp	ip, r4
 80114ec:	d965      	bls.n	80115ba <__udivmoddi4+0x29a>
 80114ee:	3b02      	subs	r3, #2
 80114f0:	443c      	add	r4, r7
 80114f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80114f6:	fba0 9302 	umull	r9, r3, r0, r2
 80114fa:	eba4 040c 	sub.w	r4, r4, ip
 80114fe:	429c      	cmp	r4, r3
 8011500:	46ce      	mov	lr, r9
 8011502:	469c      	mov	ip, r3
 8011504:	d351      	bcc.n	80115aa <__udivmoddi4+0x28a>
 8011506:	d04e      	beq.n	80115a6 <__udivmoddi4+0x286>
 8011508:	b155      	cbz	r5, 8011520 <__udivmoddi4+0x200>
 801150a:	ebb8 030e 	subs.w	r3, r8, lr
 801150e:	eb64 040c 	sbc.w	r4, r4, ip
 8011512:	fa04 f606 	lsl.w	r6, r4, r6
 8011516:	40cb      	lsrs	r3, r1
 8011518:	431e      	orrs	r6, r3
 801151a:	40cc      	lsrs	r4, r1
 801151c:	e9c5 6400 	strd	r6, r4, [r5]
 8011520:	2100      	movs	r1, #0
 8011522:	e750      	b.n	80113c6 <__udivmoddi4+0xa6>
 8011524:	f1c2 0320 	rsb	r3, r2, #32
 8011528:	fa20 f103 	lsr.w	r1, r0, r3
 801152c:	fa0c fc02 	lsl.w	ip, ip, r2
 8011530:	fa24 f303 	lsr.w	r3, r4, r3
 8011534:	4094      	lsls	r4, r2
 8011536:	430c      	orrs	r4, r1
 8011538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 801153c:	fa00 fe02 	lsl.w	lr, r0, r2
 8011540:	fa1f f78c 	uxth.w	r7, ip
 8011544:	fbb3 f0f8 	udiv	r0, r3, r8
 8011548:	fb08 3110 	mls	r1, r8, r0, r3
 801154c:	0c23      	lsrs	r3, r4, #16
 801154e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8011552:	fb00 f107 	mul.w	r1, r0, r7
 8011556:	4299      	cmp	r1, r3
 8011558:	d908      	bls.n	801156c <__udivmoddi4+0x24c>
 801155a:	eb1c 0303 	adds.w	r3, ip, r3
 801155e:	f100 36ff 	add.w	r6, r0, #4294967295
 8011562:	d22c      	bcs.n	80115be <__udivmoddi4+0x29e>
 8011564:	4299      	cmp	r1, r3
 8011566:	d92a      	bls.n	80115be <__udivmoddi4+0x29e>
 8011568:	3802      	subs	r0, #2
 801156a:	4463      	add	r3, ip
 801156c:	1a5b      	subs	r3, r3, r1
 801156e:	b2a4      	uxth	r4, r4
 8011570:	fbb3 f1f8 	udiv	r1, r3, r8
 8011574:	fb08 3311 	mls	r3, r8, r1, r3
 8011578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 801157c:	fb01 f307 	mul.w	r3, r1, r7
 8011580:	42a3      	cmp	r3, r4
 8011582:	d908      	bls.n	8011596 <__udivmoddi4+0x276>
 8011584:	eb1c 0404 	adds.w	r4, ip, r4
 8011588:	f101 36ff 	add.w	r6, r1, #4294967295
 801158c:	d213      	bcs.n	80115b6 <__udivmoddi4+0x296>
 801158e:	42a3      	cmp	r3, r4
 8011590:	d911      	bls.n	80115b6 <__udivmoddi4+0x296>
 8011592:	3902      	subs	r1, #2
 8011594:	4464      	add	r4, ip
 8011596:	1ae4      	subs	r4, r4, r3
 8011598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 801159c:	e739      	b.n	8011412 <__udivmoddi4+0xf2>
 801159e:	4604      	mov	r4, r0
 80115a0:	e6f0      	b.n	8011384 <__udivmoddi4+0x64>
 80115a2:	4608      	mov	r0, r1
 80115a4:	e706      	b.n	80113b4 <__udivmoddi4+0x94>
 80115a6:	45c8      	cmp	r8, r9
 80115a8:	d2ae      	bcs.n	8011508 <__udivmoddi4+0x1e8>
 80115aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80115ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80115b2:	3801      	subs	r0, #1
 80115b4:	e7a8      	b.n	8011508 <__udivmoddi4+0x1e8>
 80115b6:	4631      	mov	r1, r6
 80115b8:	e7ed      	b.n	8011596 <__udivmoddi4+0x276>
 80115ba:	4603      	mov	r3, r0
 80115bc:	e799      	b.n	80114f2 <__udivmoddi4+0x1d2>
 80115be:	4630      	mov	r0, r6
 80115c0:	e7d4      	b.n	801156c <__udivmoddi4+0x24c>
 80115c2:	46d6      	mov	lr, sl
 80115c4:	e77f      	b.n	80114c6 <__udivmoddi4+0x1a6>
 80115c6:	4463      	add	r3, ip
 80115c8:	3802      	subs	r0, #2
 80115ca:	e74d      	b.n	8011468 <__udivmoddi4+0x148>
 80115cc:	4606      	mov	r6, r0
 80115ce:	4623      	mov	r3, r4
 80115d0:	4608      	mov	r0, r1
 80115d2:	e70f      	b.n	80113f4 <__udivmoddi4+0xd4>
 80115d4:	3e02      	subs	r6, #2
 80115d6:	4463      	add	r3, ip
 80115d8:	e730      	b.n	801143c <__udivmoddi4+0x11c>
 80115da:	bf00      	nop

080115dc <__aeabi_idiv0>:
 80115dc:	4770      	bx	lr
 80115de:	bf00      	nop

080115e0 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 80115e0:	b480      	push	{r7}
 80115e2:	af00      	add	r7, sp, #0
    /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP     | FLASH_FLAG_OPERR   |
 80115e4:	4b04      	ldr	r3, [pc, #16]	@ (80115f8 <FLASH_If_Init+0x18>)
 80115e6:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 80115ea:	611a      	str	r2, [r3, #16]
                          FLASH_FLAG_PGSERR  | FLASH_FLAG_PROGERR |
                          FLASH_FLAG_WRPERR  | FLASH_FLAG_PGAERR  |
                          FLASH_FLAG_SIZERR  | FLASH_FLAG_MISERR  |
                          FLASH_FLAG_FASTERR);// | FLASH_FLAG_OPTVERR );
}
 80115ec:	bf00      	nop
 80115ee:	46bd      	mov	sp, r7
 80115f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115f4:	4770      	bx	lr
 80115f6:	bf00      	nop
 80115f8:	40022000 	.word	0x40022000

080115fc <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartPage)
{
 80115fc:	b580      	push	{r7, lr}
 80115fe:	b088      	sub	sp, #32
 8011600:	af00      	add	r7, sp, #0
 8011602:	6078      	str	r0, [r7, #4]
  uint32_t UserStartPage;
  uint32_t PageErr;
  FLASH_EraseInitTypeDef pEraseInit;

  if (StartPage > APPLICATION_ADDRESS_M4_END) {
 8011604:	687b      	ldr	r3, [r7, #4]
 8011606:	4a16      	ldr	r2, [pc, #88]	@ (8011660 <FLASH_If_Erase+0x64>)
 8011608:	4293      	cmp	r3, r2
 801160a:	d301      	bcc.n	8011610 <FLASH_If_Erase+0x14>
    return FALSE;
 801160c:	2300      	movs	r3, #0
 801160e:	e023      	b.n	8011658 <FLASH_If_Erase+0x5c>
  }
  
  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock(); 
 8011610:	f001 fe26 	bl	8013260 <HAL_FLASH_Unlock>
  FLASH_If_Init();
 8011614:	f7ff ffe4 	bl	80115e0 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartPage           = GetPage(StartPage);
 8011618:	6878      	ldr	r0, [r7, #4]
 801161a:	f000 f823 	bl	8011664 <GetPage>
 801161e:	61f8      	str	r0, [r7, #28]
  pEraseInit.TypeErase    = FLASH_TYPEERASE_PAGES;
 8011620:	2300      	movs	r3, #0
 8011622:	60bb      	str	r3, [r7, #8]
  pEraseInit.Page         = UserStartPage;
 8011624:	69fb      	ldr	r3, [r7, #28]
 8011626:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages      = FLASH_PAGE_63 - UserStartPage;
 8011628:	69fb      	ldr	r3, [r7, #28]
 801162a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 801162e:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks        = FLASH_BANK_1;
 8011630:	2301      	movs	r3, #1
 8011632:	60fb      	str	r3, [r7, #12]
#if M4_LEGACY
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
#endif

  if (HAL_FLASHEx_Erase(&pEraseInit, &PageErr) != HAL_OK) {
 8011634:	f107 0218 	add.w	r2, r7, #24
 8011638:	f107 0308 	add.w	r3, r7, #8
 801163c:	4611      	mov	r1, r2
 801163e:	4618      	mov	r0, r3
 8011640:	f001 ff50 	bl	80134e4 <HAL_FLASHEx_Erase>
 8011644:	4603      	mov	r3, r0
 8011646:	2b00      	cmp	r3, #0
 8011648:	d003      	beq.n	8011652 <FLASH_If_Erase+0x56>
    HAL_FLASH_Lock();
 801164a:	f001 fe2b 	bl	80132a4 <HAL_FLASH_Lock>
    /* Error occurred while sector erase */
    return FALSE;
 801164e:	2300      	movs	r3, #0
 8011650:	e002      	b.n	8011658 <FLASH_If_Erase+0x5c>
  }
  HAL_FLASH_Lock();
 8011652:	f001 fe27 	bl	80132a4 <HAL_FLASH_Lock>

#if 0 // DBG
  printf("Page Number %d Target Address 0x%08lx\r\n", pEraseInit.Page, (uint32_t)StartPage);
#endif
  return TRUE;
 8011656:	2301      	movs	r3, #1
}
 8011658:	4618      	mov	r0, r3
 801165a:	3720      	adds	r7, #32
 801165c:	46bd      	mov	sp, r7
 801165e:	bd80      	pop	{r7, pc}
 8011660:	0801ffff 	.word	0x0801ffff

08011664 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Address: Flash address
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t Address)
{
 8011664:	b480      	push	{r7}
 8011666:	b085      	sub	sp, #20
 8011668:	af00      	add	r7, sp, #0
 801166a:	6078      	str	r0, [r7, #4]
  uint32_t page = FLASH_PAGE_0;
 801166c:	2300      	movs	r3, #0
 801166e:	60fb      	str	r3, [r7, #12]
  
  for (uint8_t cnt = FLASH_PAGE_0; cnt <= FLASH_PAGE_63; cnt++) {
 8011670:	2300      	movs	r3, #0
 8011672:	72fb      	strb	r3, [r7, #11]
 8011674:	e01c      	b.n	80116b0 <GetPage+0x4c>
    if (flash_map[cnt].start_addr >= Address && 
 8011676:	7afa      	ldrb	r2, [r7, #11]
 8011678:	4912      	ldr	r1, [pc, #72]	@ (80116c4 <GetPage+0x60>)
 801167a:	4613      	mov	r3, r2
 801167c:	005b      	lsls	r3, r3, #1
 801167e:	4413      	add	r3, r2
 8011680:	009b      	lsls	r3, r3, #2
 8011682:	440b      	add	r3, r1
 8011684:	681b      	ldr	r3, [r3, #0]
 8011686:	687a      	ldr	r2, [r7, #4]
 8011688:	429a      	cmp	r2, r3
 801168a:	d80e      	bhi.n	80116aa <GetPage+0x46>
        flash_map[cnt].end_addr   <  Address) {
 801168c:	7afa      	ldrb	r2, [r7, #11]
 801168e:	490d      	ldr	r1, [pc, #52]	@ (80116c4 <GetPage+0x60>)
 8011690:	4613      	mov	r3, r2
 8011692:	005b      	lsls	r3, r3, #1
 8011694:	4413      	add	r3, r2
 8011696:	009b      	lsls	r3, r3, #2
 8011698:	440b      	add	r3, r1
 801169a:	3304      	adds	r3, #4
 801169c:	681b      	ldr	r3, [r3, #0]
    if (flash_map[cnt].start_addr >= Address && 
 801169e:	687a      	ldr	r2, [r7, #4]
 80116a0:	429a      	cmp	r2, r3
 80116a2:	d902      	bls.n	80116aa <GetPage+0x46>
        page = cnt;
 80116a4:	7afb      	ldrb	r3, [r7, #11]
 80116a6:	60fb      	str	r3, [r7, #12]
        break;
 80116a8:	e005      	b.n	80116b6 <GetPage+0x52>
  for (uint8_t cnt = FLASH_PAGE_0; cnt <= FLASH_PAGE_63; cnt++) {
 80116aa:	7afb      	ldrb	r3, [r7, #11]
 80116ac:	3301      	adds	r3, #1
 80116ae:	72fb      	strb	r3, [r7, #11]
 80116b0:	7afb      	ldrb	r3, [r7, #11]
 80116b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80116b4:	d9df      	bls.n	8011676 <GetPage+0x12>
    }
  }
  return page;
 80116b6:	68fb      	ldr	r3, [r7, #12]
}
 80116b8:	4618      	mov	r0, r3
 80116ba:	3714      	adds	r7, #20
 80116bc:	46bd      	mov	sp, r7
 80116be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80116c2:	4770      	bx	lr
 80116c4:	0801ae40 	.word	0x0801ae40

080116c8 <_write>:
//----------------------------------------
// retarget
//----------------------------------------
extern UART_HandleTypeDef hlpuart1;
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 80116c8:	b580      	push	{r7, lr}
 80116ca:	b084      	sub	sp, #16
 80116cc:	af00      	add	r7, sp, #0
 80116ce:	60f8      	str	r0, [r7, #12]
 80116d0:	60b9      	str	r1, [r7, #8]
 80116d2:	607a      	str	r2, [r7, #4]
    if ( HAL_UART_Transmit(&hlpuart1, ptr, len, len) == HAL_OK ) return len;
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	b29a      	uxth	r2, r3
 80116d8:	687b      	ldr	r3, [r7, #4]
 80116da:	68b9      	ldr	r1, [r7, #8]
 80116dc:	4806      	ldr	r0, [pc, #24]	@ (80116f8 <_write+0x30>)
 80116de:	f004 faf5 	bl	8015ccc <HAL_UART_Transmit>
 80116e2:	4603      	mov	r3, r0
 80116e4:	2b00      	cmp	r3, #0
 80116e6:	d101      	bne.n	80116ec <_write+0x24>
 80116e8:	687b      	ldr	r3, [r7, #4]
 80116ea:	e000      	b.n	80116ee <_write+0x26>
    else return 0;
 80116ec:	2300      	movs	r3, #0
}
 80116ee:	4618      	mov	r0, r3
 80116f0:	3710      	adds	r7, #16
 80116f2:	46bd      	mov	sp, r7
 80116f4:	bd80      	pop	{r7, pc}
 80116f6:	bf00      	nop
 80116f8:	200002d4 	.word	0x200002d4

080116fc <Convert_Char>:
//----------------------------------------
// CLI UART CALLBACK for stm32f
//----------------------------------------
/* USER CODE BEGIN 1 */
void Convert_Char(uint8_t *byte)
{
 80116fc:	b480      	push	{r7}
 80116fe:	b083      	sub	sp, #12
 8011700:	af00      	add	r7, sp, #0
 8011702:	6078      	str	r0, [r7, #4]
    #if 1 // LOW to UP
    if ((*byte >= LOWER_A) && (*byte <= LOWER_Z)) {
 8011704:	687b      	ldr	r3, [r7, #4]
 8011706:	781b      	ldrb	r3, [r3, #0]
 8011708:	2b60      	cmp	r3, #96	@ 0x60
 801170a:	d909      	bls.n	8011720 <Convert_Char+0x24>
 801170c:	687b      	ldr	r3, [r7, #4]
 801170e:	781b      	ldrb	r3, [r3, #0]
 8011710:	2b7a      	cmp	r3, #122	@ 0x7a
 8011712:	d805      	bhi.n	8011720 <Convert_Char+0x24>
        *byte -= CONVERT_CHAR_OFFSET;
 8011714:	687b      	ldr	r3, [r7, #4]
 8011716:	781b      	ldrb	r3, [r3, #0]
 8011718:	3b20      	subs	r3, #32
 801171a:	b2da      	uxtb	r2, r3
 801171c:	687b      	ldr	r3, [r7, #4]
 801171e:	701a      	strb	r2, [r3, #0]
    #else
    if ((*byte >= UPPER_A) && (*byte <= UPPER_Z)) {
        *byte += CONVERT_CHAR_OFFSET;
    }
    #endif
}
 8011720:	bf00      	nop
 8011722:	370c      	adds	r7, #12
 8011724:	46bd      	mov	sp, r7
 8011726:	f85d 7b04 	ldr.w	r7, [sp], #4
 801172a:	4770      	bx	lr

0801172c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 801172c:	b580      	push	{r7, lr}
 801172e:	b082      	sub	sp, #8
 8011730:	af00      	add	r7, sp, #0
 8011732:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 8011734:	687b      	ldr	r3, [r7, #4]
 8011736:	681b      	ldr	r3, [r3, #0]
 8011738:	4a2c      	ldr	r2, [pc, #176]	@ (80117ec <HAL_UART_RxCpltCallback+0xc0>)
 801173a:	4293      	cmp	r3, r2
 801173c:	d151      	bne.n	80117e2 <HAL_UART_RxCpltCallback+0xb6>
        if (uart_rx_byte == ASCII_LF || uart_rx_byte == ASCII_CR || uart_rx_byte == ASTERISK) {
 801173e:	4b2c      	ldr	r3, [pc, #176]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011740:	781b      	ldrb	r3, [r3, #0]
 8011742:	2b0a      	cmp	r3, #10
 8011744:	d007      	beq.n	8011756 <HAL_UART_RxCpltCallback+0x2a>
 8011746:	4b2a      	ldr	r3, [pc, #168]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011748:	781b      	ldrb	r3, [r3, #0]
 801174a:	2b0d      	cmp	r3, #13
 801174c:	d003      	beq.n	8011756 <HAL_UART_RxCpltCallback+0x2a>
 801174e:	4b28      	ldr	r3, [pc, #160]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011750:	781b      	ldrb	r3, [r3, #0]
 8011752:	2b2a      	cmp	r3, #42	@ 0x2a
 8011754:	d104      	bne.n	8011760 <HAL_UART_RxCpltCallback+0x34>
            cli.rx_done  = CLI_READY;
 8011756:	4b27      	ldr	r3, [pc, #156]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011758:	2201      	movs	r2, #1
 801175a:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 801175e:	e03b      	b.n	80117d8 <HAL_UART_RxCpltCallback+0xac>
        } else if (uart_rx_byte == ASCII_BACKSPACE || uart_rx_byte == ASCII_DEL) {
 8011760:	4b23      	ldr	r3, [pc, #140]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 8011762:	781b      	ldrb	r3, [r3, #0]
 8011764:	2b08      	cmp	r3, #8
 8011766:	d003      	beq.n	8011770 <HAL_UART_RxCpltCallback+0x44>
 8011768:	4b21      	ldr	r3, [pc, #132]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 801176a:	781b      	ldrb	r3, [r3, #0]
 801176c:	2b7f      	cmp	r3, #127	@ 0x7f
 801176e:	d119      	bne.n	80117a4 <HAL_UART_RxCpltCallback+0x78>
            if (cli.rx_index > 0) {
 8011770:	4b20      	ldr	r3, [pc, #128]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011772:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011776:	2b00      	cmp	r3, #0
 8011778:	d02e      	beq.n	80117d8 <HAL_UART_RxCpltCallback+0xac>
                cli.buffer[--cli.rx_index] = 0;
 801177a:	4b1e      	ldr	r3, [pc, #120]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 801177c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011780:	3b01      	subs	r3, #1
 8011782:	b2da      	uxtb	r2, r3
 8011784:	4b1b      	ldr	r3, [pc, #108]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011786:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 801178a:	4b1a      	ldr	r3, [pc, #104]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 801178c:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8011790:	461a      	mov	r2, r3
 8011792:	4b18      	ldr	r3, [pc, #96]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 8011794:	2100      	movs	r1, #0
 8011796:	5499      	strb	r1, [r3, r2]
                printf("%c %c", ASCII_BACKSPACE, ASCII_BACKSPACE);
 8011798:	2208      	movs	r2, #8
 801179a:	2108      	movs	r1, #8
 801179c:	4816      	ldr	r0, [pc, #88]	@ (80117f8 <HAL_UART_RxCpltCallback+0xcc>)
 801179e:	f007 ff67 	bl	8019670 <iprintf>
            if (cli.rx_index > 0) {
 80117a2:	e019      	b.n	80117d8 <HAL_UART_RxCpltCallback+0xac>
            }
        } else {
            Convert_Char(&uart_rx_byte);
 80117a4:	4812      	ldr	r0, [pc, #72]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 80117a6:	f7ff ffa9 	bl	80116fc <Convert_Char>
            cli.buffer[cli.rx_index] = uart_rx_byte;
 80117aa:	4b12      	ldr	r3, [pc, #72]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117ac:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80117b0:	461a      	mov	r2, r3
 80117b2:	4b0f      	ldr	r3, [pc, #60]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 80117b4:	7819      	ldrb	r1, [r3, #0]
 80117b6:	4b0f      	ldr	r3, [pc, #60]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117b8:	5499      	strb	r1, [r3, r2]
            cli.rx_index = (cli.rx_index + 1) % UART_BUF_MAX;
 80117ba:	4b0e      	ldr	r3, [pc, #56]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117bc:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 80117c0:	3301      	adds	r3, #1
 80117c2:	425a      	negs	r2, r3
 80117c4:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80117c8:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 80117cc:	bf58      	it	pl
 80117ce:	4253      	negpl	r3, r2
 80117d0:	b2da      	uxtb	r2, r3
 80117d2:	4b08      	ldr	r3, [pc, #32]	@ (80117f4 <HAL_UART_RxCpltCallback+0xc8>)
 80117d4:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        }
        // uart rxne pending clear
        HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 80117d8:	2201      	movs	r2, #1
 80117da:	4905      	ldr	r1, [pc, #20]	@ (80117f0 <HAL_UART_RxCpltCallback+0xc4>)
 80117dc:	4807      	ldr	r0, [pc, #28]	@ (80117fc <HAL_UART_RxCpltCallback+0xd0>)
 80117de:	f004 fb03 	bl	8015de8 <HAL_UART_Receive_IT>
    }
}
 80117e2:	bf00      	nop
 80117e4:	3708      	adds	r7, #8
 80117e6:	46bd      	mov	sp, r7
 80117e8:	bd80      	pop	{r7, pc}
 80117ea:	bf00      	nop
 80117ec:	40008000 	.word	0x40008000
 80117f0:	200000a8 	.word	0x200000a8
 80117f4:	200000ac 	.word	0x200000ac
 80117f8:	0801a74c 	.word	0x0801a74c
 80117fc:	200002d4 	.word	0x200002d4

08011800 <CLI_Init>:
//----------------------------------------


void CLI_Init(void)
{
 8011800:	b580      	push	{r7, lr}
 8011802:	af00      	add	r7, sp, #0
    setbuf(stdin, NULL);
 8011804:	4b0e      	ldr	r3, [pc, #56]	@ (8011840 <CLI_Init+0x40>)
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	685b      	ldr	r3, [r3, #4]
 801180a:	2100      	movs	r1, #0
 801180c:	4618      	mov	r0, r3
 801180e:	f007 ff9f 	bl	8019750 <setbuf>
    setbuf(stdout,NULL);
 8011812:	4b0b      	ldr	r3, [pc, #44]	@ (8011840 <CLI_Init+0x40>)
 8011814:	681b      	ldr	r3, [r3, #0]
 8011816:	689b      	ldr	r3, [r3, #8]
 8011818:	2100      	movs	r1, #0
 801181a:	4618      	mov	r0, r3
 801181c:	f007 ff98 	bl	8019750 <setbuf>
    memset(&cli, 0x0, sizeof(CLI_t));
 8011820:	2283      	movs	r2, #131	@ 0x83
 8011822:	2100      	movs	r1, #0
 8011824:	4807      	ldr	r0, [pc, #28]	@ (8011844 <CLI_Init+0x44>)
 8011826:	f008 f927 	bl	8019a78 <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 801182a:	2201      	movs	r2, #1
 801182c:	4906      	ldr	r1, [pc, #24]	@ (8011848 <CLI_Init+0x48>)
 801182e:	4807      	ldr	r0, [pc, #28]	@ (801184c <CLI_Init+0x4c>)
 8011830:	f004 fada 	bl	8015de8 <HAL_UART_Receive_IT>
    cbf_boot_logo(0, NULL);
 8011834:	2100      	movs	r1, #0
 8011836:	2000      	movs	r0, #0
 8011838:	f000 f8dc 	bl	80119f4 <cbf_boot_logo>
}
 801183c:	bf00      	nop
 801183e:	bd80      	pop	{r7, pc}
 8011840:	2000003c 	.word	0x2000003c
 8011844:	200000ac 	.word	0x200000ac
 8011848:	200000a8 	.word	0x200000a8
 801184c:	200002d4 	.word	0x200002d4

08011850 <parser>:


/* CLI PARSER */
#define DBG_CMD 0
int parser(char *cmd)
{
 8011850:	b590      	push	{r4, r7, lr}
 8011852:	b091      	sub	sp, #68	@ 0x44
 8011854:	af00      	add	r7, sp, #0
 8011856:	6078      	str	r0, [r7, #4]
    int     argc = 0;
 8011858:	2300      	movs	r3, #0
 801185a:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char   *argv[NUMBER_OF_DELIMITER_VALUE];
    char   **ppStr  = NULL;
 801185c:	2300      	movs	r3, #0
 801185e:	63bb      	str	r3, [r7, #56]	@ 0x38
    short   str_len = 0;
 8011860:	2300      	movs	r3, #0
 8011862:	867b      	strh	r3, [r7, #50]	@ 0x32
    
    if (cmd == NULL) {
 8011864:	687b      	ldr	r3, [r7, #4]
 8011866:	2b00      	cmp	r3, #0
 8011868:	d102      	bne.n	8011870 <parser+0x20>
        printf("CMD Error\r\n");
 801186a:	485a      	ldr	r0, [pc, #360]	@ (80119d4 <parser+0x184>)
 801186c:	f007 ff68 	bl	8019740 <puts>
    }
    
    // is cmd repeat?
    if (uart_rx_byte == ASTERISK) {
 8011870:	4b59      	ldr	r3, [pc, #356]	@ (80119d8 <parser+0x188>)
 8011872:	781b      	ldrb	r3, [r3, #0]
 8011874:	2b2a      	cmp	r3, #42	@ 0x2a
 8011876:	d10b      	bne.n	8011890 <parser+0x40>
        strcpy(cmd, (char *)&gRx_cmd_repeat[0]);
 8011878:	4958      	ldr	r1, [pc, #352]	@ (80119dc <parser+0x18c>)
 801187a:	6878      	ldr	r0, [r7, #4]
 801187c:	f008 f9e3 	bl	8019c46 <strcpy>
        #if DBG_CMD
        printf("STR:%s", gRx_cmd_repeat);
        #endif
        printf("\r\n");
 8011880:	4857      	ldr	r0, [pc, #348]	@ (80119e0 <parser+0x190>)
 8011882:	f007 ff5d 	bl	8019740 <puts>
        cli.is_cmd_repeat = TRUE;
 8011886:	4b57      	ldr	r3, [pc, #348]	@ (80119e4 <parser+0x194>)
 8011888:	2201      	movs	r2, #1
 801188a:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 801188e:	e003      	b.n	8011898 <parser+0x48>
    } else {
        cli.is_cmd_repeat = FALSE;
 8011890:	4b54      	ldr	r3, [pc, #336]	@ (80119e4 <parser+0x194>)
 8011892:	2200      	movs	r2, #0
 8011894:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    }

	//----------------------------------------
    // SPLIT THE UART RX STRING
    //----------------------------------------
    argv[argc++] = strtok(cmd, D_DELIMITER);
 8011898:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 801189a:	1c63      	adds	r3, r4, #1
 801189c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 801189e:	4952      	ldr	r1, [pc, #328]	@ (80119e8 <parser+0x198>)
 80118a0:	6878      	ldr	r0, [r7, #4]
 80118a2:	f008 f8f1 	bl	8019a88 <strtok>
 80118a6:	4602      	mov	r2, r0
 80118a8:	00a3      	lsls	r3, r4, #2
 80118aa:	3340      	adds	r3, #64	@ 0x40
 80118ac:	443b      	add	r3, r7
 80118ae:	f843 2c38 	str.w	r2, [r3, #-56]

    while (1) {
        argv[argc] = strtok(NULL, D_DELIMITER);
 80118b2:	494d      	ldr	r1, [pc, #308]	@ (80119e8 <parser+0x198>)
 80118b4:	2000      	movs	r0, #0
 80118b6:	f008 f8e7 	bl	8019a88 <strtok>
 80118ba:	4602      	mov	r2, r0
 80118bc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118be:	009b      	lsls	r3, r3, #2
 80118c0:	3340      	adds	r3, #64	@ 0x40
 80118c2:	443b      	add	r3, r7
 80118c4:	f843 2c38 	str.w	r2, [r3, #-56]
        
        if (argv[argc] == NULL) {
 80118c8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118ca:	009b      	lsls	r3, r3, #2
 80118cc:	3340      	adds	r3, #64	@ 0x40
 80118ce:	443b      	add	r3, r7
 80118d0:	f853 3c38 	ldr.w	r3, [r3, #-56]
 80118d4:	2b00      	cmp	r3, #0
 80118d6:	d006      	beq.n	80118e6 <parser+0x96>
            break;
        }

        if (++argc >= NUMBER_OF_DELIMITER_VALUE) {
 80118d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118da:	3301      	adds	r3, #1
 80118dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80118de:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80118e0:	2b09      	cmp	r3, #9
 80118e2:	dc02      	bgt.n	80118ea <parser+0x9a>
        argv[argc] = strtok(NULL, D_DELIMITER);
 80118e4:	e7e5      	b.n	80118b2 <parser+0x62>
            break;
 80118e6:	bf00      	nop
 80118e8:	e000      	b.n	80118ec <parser+0x9c>
            break;
 80118ea:	bf00      	nop
    }

    //----------------------------------------
    // FIND THE MATCHED STRING
    //----------------------------------------
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 80118ec:	2300      	movs	r3, #0
 80118ee:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80118f0:	e025      	b.n	801193e <parser+0xee>
        if (strcmp(cmd_list[cnt].name, argv[0]) == CLI_MATCH) {
 80118f2:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80118f6:	493d      	ldr	r1, [pc, #244]	@ (80119ec <parser+0x19c>)
 80118f8:	4613      	mov	r3, r2
 80118fa:	005b      	lsls	r3, r3, #1
 80118fc:	4413      	add	r3, r2
 80118fe:	009b      	lsls	r3, r3, #2
 8011900:	440b      	add	r3, r1
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	68ba      	ldr	r2, [r7, #8]
 8011906:	4611      	mov	r1, r2
 8011908:	4618      	mov	r0, r3
 801190a:	f7ff fc89 	bl	8011220 <strcmp>
 801190e:	4603      	mov	r3, r0
 8011910:	2b00      	cmp	r3, #0
 8011912:	d10e      	bne.n	8011932 <parser+0xe2>
            cmd_list[cnt].func(argc, argv);
 8011914:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8011918:	4934      	ldr	r1, [pc, #208]	@ (80119ec <parser+0x19c>)
 801191a:	4613      	mov	r3, r2
 801191c:	005b      	lsls	r3, r3, #1
 801191e:	4413      	add	r3, r2
 8011920:	009b      	lsls	r3, r3, #2
 8011922:	440b      	add	r3, r1
 8011924:	3304      	adds	r3, #4
 8011926:	681b      	ldr	r3, [r3, #0]
 8011928:	f107 0208 	add.w	r2, r7, #8
 801192c:	4611      	mov	r1, r2
 801192e:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8011930:	4798      	blx	r3
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 8011932:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 8011936:	b29b      	uxth	r3, r3
 8011938:	3301      	adds	r3, #1
 801193a:	b29b      	uxth	r3, r3
 801193c:	86fb      	strh	r3, [r7, #54]	@ 0x36
 801193e:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 8011942:	492a      	ldr	r1, [pc, #168]	@ (80119ec <parser+0x19c>)
 8011944:	4613      	mov	r3, r2
 8011946:	005b      	lsls	r3, r3, #1
 8011948:	4413      	add	r3, r2
 801194a:	009b      	lsls	r3, r3, #2
 801194c:	440b      	add	r3, r1
 801194e:	681b      	ldr	r3, [r3, #0]
 8011950:	2b00      	cmp	r3, #0
 8011952:	d1ce      	bne.n	80118f2 <parser+0xa2>
        }
    }
    
    // Cpy Last Command...
    if (cli.is_cmd_repeat == FALSE) {
 8011954:	4b23      	ldr	r3, [pc, #140]	@ (80119e4 <parser+0x194>)
 8011956:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 801195a:	2b00      	cmp	r3, #0
 801195c:	d12c      	bne.n	80119b8 <parser+0x168>
        memset((char *)&gRx_cmd_repeat[0], (char)'\0', sizeof(gRx_cmd_repeat));
 801195e:	2280      	movs	r2, #128	@ 0x80
 8011960:	2100      	movs	r1, #0
 8011962:	481e      	ldr	r0, [pc, #120]	@ (80119dc <parser+0x18c>)
 8011964:	f008 f888 	bl	8019a78 <memset>
        ppStr = &argv[0];
 8011968:	f107 0308 	add.w	r3, r7, #8
 801196c:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (short cnt = 0; cnt < argc; cnt++) {
 801196e:	2300      	movs	r3, #0
 8011970:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8011972:	e01c      	b.n	80119ae <parser+0x15e>
            strcpy(&gRx_cmd_repeat[0] + strlen(&gRx_cmd_repeat[0]), *ppStr++);
 8011974:	4819      	ldr	r0, [pc, #100]	@ (80119dc <parser+0x18c>)
 8011976:	f7ff fc5d 	bl	8011234 <strlen>
 801197a:	4603      	mov	r3, r0
 801197c:	4a17      	ldr	r2, [pc, #92]	@ (80119dc <parser+0x18c>)
 801197e:	1898      	adds	r0, r3, r2
 8011980:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011982:	1d1a      	adds	r2, r3, #4
 8011984:	63ba      	str	r2, [r7, #56]	@ 0x38
 8011986:	681b      	ldr	r3, [r3, #0]
 8011988:	4619      	mov	r1, r3
 801198a:	f008 f95c 	bl	8019c46 <strcpy>
            str_len = strlen(&gRx_cmd_repeat[0]);
 801198e:	4813      	ldr	r0, [pc, #76]	@ (80119dc <parser+0x18c>)
 8011990:	f7ff fc50 	bl	8011234 <strlen>
 8011994:	4603      	mov	r3, r0
 8011996:	867b      	strh	r3, [r7, #50]	@ 0x32
            gRx_cmd_repeat[str_len] = SPACE_BAR;
 8011998:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 801199c:	4a0f      	ldr	r2, [pc, #60]	@ (80119dc <parser+0x18c>)
 801199e:	2120      	movs	r1, #32
 80119a0:	54d1      	strb	r1, [r2, r3]
        for (short cnt = 0; cnt < argc; cnt++) {
 80119a2:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80119a6:	b29b      	uxth	r3, r3
 80119a8:	3301      	adds	r3, #1
 80119aa:	b29b      	uxth	r3, r3
 80119ac:	86bb      	strh	r3, [r7, #52]	@ 0x34
 80119ae:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 80119b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 80119b4:	429a      	cmp	r2, r3
 80119b6:	dcdd      	bgt.n	8011974 <parser+0x124>
        #if DBG_CMD
        printf("cpy str:%s\r\n", gRx_cmd_repeat);
        #endif
    }

    memset(&cli, 0x0, sizeof(CLI_t));
 80119b8:	2283      	movs	r2, #131	@ 0x83
 80119ba:	2100      	movs	r1, #0
 80119bc:	4809      	ldr	r0, [pc, #36]	@ (80119e4 <parser+0x194>)
 80119be:	f008 f85b 	bl	8019a78 <memset>
    printf(" $Fish >> ");
 80119c2:	480b      	ldr	r0, [pc, #44]	@ (80119f0 <parser+0x1a0>)
 80119c4:	f007 fe54 	bl	8019670 <iprintf>
    
    return LIST_NOT_FOUND;
 80119c8:	2301      	movs	r3, #1
}
 80119ca:	4618      	mov	r0, r3
 80119cc:	3744      	adds	r7, #68	@ 0x44
 80119ce:	46bd      	mov	sp, r7
 80119d0:	bd90      	pop	{r4, r7, pc}
 80119d2:	bf00      	nop
 80119d4:	0801a754 	.word	0x0801a754
 80119d8:	200000a8 	.word	0x200000a8
 80119dc:	20000134 	.word	0x20000134
 80119e0:	0801a760 	.word	0x0801a760
 80119e4:	200000ac 	.word	0x200000ac
 80119e8:	0801a764 	.word	0x0801a764
 80119ec:	0801b140 	.word	0x0801b140
 80119f0:	0801a768 	.word	0x0801a768

080119f4 <cbf_boot_logo>:

//----------------------------------------
// CALL BACK FUNCTION
//----------------------------------------
int cbf_boot_logo(int argc, char *argv[])
{
 80119f4:	b580      	push	{r7, lr}
 80119f6:	b082      	sub	sp, #8
 80119f8:	af00      	add	r7, sp, #0
 80119fa:	6078      	str	r0, [r7, #4]
 80119fc:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 80119fe:	4812      	ldr	r0, [pc, #72]	@ (8011a48 <cbf_boot_logo+0x54>)
 8011a00:	f007 fe9e 	bl	8019740 <puts>
    printf("+==========================================================+\r\n");
 8011a04:	4811      	ldr	r0, [pc, #68]	@ (8011a4c <cbf_boot_logo+0x58>)
 8011a06:	f007 fe9b 	bl	8019740 <puts>
    printf("|,------.   ,--.             ,--.                          |\r\n");
 8011a0a:	4811      	ldr	r0, [pc, #68]	@ (8011a50 <cbf_boot_logo+0x5c>)
 8011a0c:	f007 fe98 	bl	8019740 <puts>
    printf("||  .---'   `--'    ,---.    |  ,---.                      |\r\n");
 8011a10:	4810      	ldr	r0, [pc, #64]	@ (8011a54 <cbf_boot_logo+0x60>)
 8011a12:	f007 fe95 	bl	8019740 <puts>
    printf("||  `--,    ,--.   (  .-'    |  .-.  |                     |\r\n");
 8011a16:	4810      	ldr	r0, [pc, #64]	@ (8011a58 <cbf_boot_logo+0x64>)
 8011a18:	f007 fe92 	bl	8019740 <puts>
    printf("||  |`      |  |   .-'  `)   |  | |  |   App V1.0          |\r\n");
 8011a1c:	480f      	ldr	r0, [pc, #60]	@ (8011a5c <cbf_boot_logo+0x68>)
 8011a1e:	f007 fe8f 	bl	8019740 <puts>
    printf("|`--'       `--'   `----'    `--' `--'   %s       |\r\n", __DATE__);
 8011a22:	490f      	ldr	r1, [pc, #60]	@ (8011a60 <cbf_boot_logo+0x6c>)
 8011a24:	480f      	ldr	r0, [pc, #60]	@ (8011a64 <cbf_boot_logo+0x70>)
 8011a26:	f007 fe23 	bl	8019670 <iprintf>
    printf("+==========================================================+\r\n");
 8011a2a:	4808      	ldr	r0, [pc, #32]	@ (8011a4c <cbf_boot_logo+0x58>)
 8011a2c:	f007 fe88 	bl	8019740 <puts>
    CONSOLE_SPLIT;
 8011a30:	4805      	ldr	r0, [pc, #20]	@ (8011a48 <cbf_boot_logo+0x54>)
 8011a32:	f007 fe85 	bl	8019740 <puts>
    printf(" $Fish >> ");
 8011a36:	480c      	ldr	r0, [pc, #48]	@ (8011a68 <cbf_boot_logo+0x74>)
 8011a38:	f007 fe1a 	bl	8019670 <iprintf>
    return 0;
 8011a3c:	2300      	movs	r3, #0
}
 8011a3e:	4618      	mov	r0, r3
 8011a40:	3708      	adds	r7, #8
 8011a42:	46bd      	mov	sp, r7
 8011a44:	bd80      	pop	{r7, pc}
 8011a46:	bf00      	nop
 8011a48:	0801a774 	.word	0x0801a774
 8011a4c:	0801a7a8 	.word	0x0801a7a8
 8011a50:	0801a7e8 	.word	0x0801a7e8
 8011a54:	0801a828 	.word	0x0801a828
 8011a58:	0801a868 	.word	0x0801a868
 8011a5c:	0801a8a8 	.word	0x0801a8a8
 8011a60:	0801a8e8 	.word	0x0801a8e8
 8011a64:	0801a8f4 	.word	0x0801a8f4
 8011a68:	0801a768 	.word	0x0801a768

08011a6c <cbf_sn>:

int cbf_sn(int argc, char *argv[])
{
 8011a6c:	b480      	push	{r7}
 8011a6e:	b083      	sub	sp, #12
 8011a70:	af00      	add	r7, sp, #0
 8011a72:	6078      	str	r0, [r7, #4]
 8011a74:	6039      	str	r1, [r7, #0]
#if LEGACY
    printf("SN : %s\r\n", (char *)tag->fw_sn);
#endif
    return 0;
 8011a76:	2300      	movs	r3, #0
}
 8011a78:	4618      	mov	r0, r3
 8011a7a:	370c      	adds	r7, #12
 8011a7c:	46bd      	mov	sp, r7
 8011a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a82:	4770      	bx	lr

08011a84 <cbf_help>:

int cbf_help(int argc, char *argv[])
{
 8011a84:	b580      	push	{r7, lr}
 8011a86:	b084      	sub	sp, #16
 8011a88:	af00      	add	r7, sp, #0
 8011a8a:	6078      	str	r0, [r7, #4]
 8011a8c:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8011a8e:	481c      	ldr	r0, [pc, #112]	@ (8011b00 <cbf_help+0x7c>)
 8011a90:	f007 fe56 	bl	8019740 <puts>
    printf("Command List %-6s Description\r\n", "||");
 8011a94:	491b      	ldr	r1, [pc, #108]	@ (8011b04 <cbf_help+0x80>)
 8011a96:	481c      	ldr	r0, [pc, #112]	@ (8011b08 <cbf_help+0x84>)
 8011a98:	f007 fdea 	bl	8019670 <iprintf>
    CONSOLE_SPLIT;
 8011a9c:	4818      	ldr	r0, [pc, #96]	@ (8011b00 <cbf_help+0x7c>)
 8011a9e:	f007 fe4f 	bl	8019740 <puts>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 8011aa2:	2301      	movs	r3, #1
 8011aa4:	60fb      	str	r3, [r7, #12]
 8011aa6:	e01b      	b.n	8011ae0 <cbf_help+0x5c>
        printf("%-20s", cmd_list[cnt].name);
 8011aa8:	4918      	ldr	r1, [pc, #96]	@ (8011b0c <cbf_help+0x88>)
 8011aaa:	68fa      	ldr	r2, [r7, #12]
 8011aac:	4613      	mov	r3, r2
 8011aae:	005b      	lsls	r3, r3, #1
 8011ab0:	4413      	add	r3, r2
 8011ab2:	009b      	lsls	r3, r3, #2
 8011ab4:	440b      	add	r3, r1
 8011ab6:	681b      	ldr	r3, [r3, #0]
 8011ab8:	4619      	mov	r1, r3
 8011aba:	4815      	ldr	r0, [pc, #84]	@ (8011b10 <cbf_help+0x8c>)
 8011abc:	f007 fdd8 	bl	8019670 <iprintf>
        printf("%-30s\r", cmd_list[cnt].description);
 8011ac0:	4912      	ldr	r1, [pc, #72]	@ (8011b0c <cbf_help+0x88>)
 8011ac2:	68fa      	ldr	r2, [r7, #12]
 8011ac4:	4613      	mov	r3, r2
 8011ac6:	005b      	lsls	r3, r3, #1
 8011ac8:	4413      	add	r3, r2
 8011aca:	009b      	lsls	r3, r3, #2
 8011acc:	440b      	add	r3, r1
 8011ace:	3308      	adds	r3, #8
 8011ad0:	681b      	ldr	r3, [r3, #0]
 8011ad2:	4619      	mov	r1, r3
 8011ad4:	480f      	ldr	r0, [pc, #60]	@ (8011b14 <cbf_help+0x90>)
 8011ad6:	f007 fdcb 	bl	8019670 <iprintf>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 8011ada:	68fb      	ldr	r3, [r7, #12]
 8011adc:	3301      	adds	r3, #1
 8011ade:	60fb      	str	r3, [r7, #12]
 8011ae0:	490a      	ldr	r1, [pc, #40]	@ (8011b0c <cbf_help+0x88>)
 8011ae2:	68fa      	ldr	r2, [r7, #12]
 8011ae4:	4613      	mov	r3, r2
 8011ae6:	005b      	lsls	r3, r3, #1
 8011ae8:	4413      	add	r3, r2
 8011aea:	009b      	lsls	r3, r3, #2
 8011aec:	440b      	add	r3, r1
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	2b00      	cmp	r3, #0
 8011af2:	d1d9      	bne.n	8011aa8 <cbf_help+0x24>
    }
    return 0;
 8011af4:	2300      	movs	r3, #0
}
 8011af6:	4618      	mov	r0, r3
 8011af8:	3710      	adds	r7, #16
 8011afa:	46bd      	mov	sp, r7
 8011afc:	bd80      	pop	{r7, pc}
 8011afe:	bf00      	nop
 8011b00:	0801a774 	.word	0x0801a774
 8011b04:	0801a92c 	.word	0x0801a92c
 8011b08:	0801a930 	.word	0x0801a930
 8011b0c:	0801b140 	.word	0x0801b140
 8011b10:	0801a950 	.word	0x0801a950
 8011b14:	0801a958 	.word	0x0801a958

08011b18 <cbf_reset>:

int cbf_reset(int argc, char *argv[])
{
 8011b18:	b580      	push	{r7, lr}
 8011b1a:	b082      	sub	sp, #8
 8011b1c:	af00      	add	r7, sp, #0
 8011b1e:	6078      	str	r0, [r7, #4]
 8011b20:	6039      	str	r1, [r7, #0]
    // software reset
    HAL_NVIC_SystemReset();
 8011b22:	f001 f9af 	bl	8012e84 <HAL_NVIC_SystemReset>
    return 0;
 8011b26:	2300      	movs	r3, #0
}
 8011b28:	4618      	mov	r0, r3
 8011b2a:	3708      	adds	r7, #8
 8011b2c:	46bd      	mov	sp, r7
 8011b2e:	bd80      	pop	{r7, pc}

08011b30 <cbf_test>:

int cbf_test(int argc, char *argv[])
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b082      	sub	sp, #8
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	6078      	str	r0, [r7, #4]
 8011b38:	6039      	str	r1, [r7, #0]
	printf("argv : %s \r\n", argv[0]);
 8011b3a:	683b      	ldr	r3, [r7, #0]
 8011b3c:	681b      	ldr	r3, [r3, #0]
 8011b3e:	4619      	mov	r1, r3
 8011b40:	4805      	ldr	r0, [pc, #20]	@ (8011b58 <cbf_test+0x28>)
 8011b42:	f007 fd95 	bl	8019670 <iprintf>
	//printf("argc : %d , argv : %s \r\n", argc, argv[1]);
	printf("TEST \r\n");
 8011b46:	4805      	ldr	r0, [pc, #20]	@ (8011b5c <cbf_test+0x2c>)
 8011b48:	f007 fdfa 	bl	8019740 <puts>
	return 0;
 8011b4c:	2300      	movs	r3, #0
}
 8011b4e:	4618      	mov	r0, r3
 8011b50:	3708      	adds	r7, #8
 8011b52:	46bd      	mov	sp, r7
 8011b54:	bd80      	pop	{r7, pc}
 8011b56:	bf00      	nop
 8011b58:	0801a960 	.word	0x0801a960
 8011b5c:	0801a970 	.word	0x0801a970

08011b60 <cbf_xmodem>:


int cbf_xmodem(int argc, char *argv[])
{
 8011b60:	b580      	push	{r7, lr}
 8011b62:	b082      	sub	sp, #8
 8011b64:	af00      	add	r7, sp, #0
 8011b66:	6078      	str	r0, [r7, #4]
 8011b68:	6039      	str	r1, [r7, #0]

    // resetting uart isr
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
#else
    CONSOLE_SPLIT;
 8011b6a:	4808      	ldr	r0, [pc, #32]	@ (8011b8c <cbf_xmodem+0x2c>)
 8011b6c:	f007 fde8 	bl	8019740 <puts>
    printf("You should update f/w in the boot mode.\r\nboot mode is being entered... \r\n");
 8011b70:	4807      	ldr	r0, [pc, #28]	@ (8011b90 <cbf_xmodem+0x30>)
 8011b72:	f007 fde5 	bl	8019740 <puts>
    CONSOLE_SPLIT;    
 8011b76:	4805      	ldr	r0, [pc, #20]	@ (8011b8c <cbf_xmodem+0x2c>)
 8011b78:	f007 fde2 	bl	8019740 <puts>
#endif
    HAL_NVIC_SystemReset();
 8011b7c:	f001 f982 	bl	8012e84 <HAL_NVIC_SystemReset>
    return 0;
 8011b80:	2300      	movs	r3, #0
}
 8011b82:	4618      	mov	r0, r3
 8011b84:	3708      	adds	r7, #8
 8011b86:	46bd      	mov	sp, r7
 8011b88:	bd80      	pop	{r7, pc}
 8011b8a:	bf00      	nop
 8011b8c:	0801a774 	.word	0x0801a774
 8011b90:	0801a978 	.word	0x0801a978

08011b94 <check_memory_range>:

static uint8_t check_memory_range(uint32_t address)
{
 8011b94:	b480      	push	{r7}
 8011b96:	b083      	sub	sp, #12
 8011b98:	af00      	add	r7, sp, #0
 8011b9a:	6078      	str	r0, [r7, #4]
    if ( ((address >= (uint32_t )FLASH_RANGE_START)        && (address <= (uint32_t )FLASH_RANGE_END)) ||
 8011b9c:	687b      	ldr	r3, [r7, #4]
 8011b9e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8011ba2:	d303      	bcc.n	8011bac <check_memory_range+0x18>
 8011ba4:	687b      	ldr	r3, [r7, #4]
 8011ba6:	4a0a      	ldr	r2, [pc, #40]	@ (8011bd0 <check_memory_range+0x3c>)
 8011ba8:	4293      	cmp	r3, r2
 8011baa:	d307      	bcc.n	8011bbc <check_memory_range+0x28>
 8011bac:	687b      	ldr	r3, [r7, #4]
 8011bae:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8011bb2:	d305      	bcc.n	8011bc0 <check_memory_range+0x2c>
         ((address >= (uint32_t )ADDR_INTERNAL_SRAM_START) && (address <= (uint32_t )ADDR_INTERNAL_SRAM_END))) {
 8011bb4:	687b      	ldr	r3, [r7, #4]
 8011bb6:	4a07      	ldr	r2, [pc, #28]	@ (8011bd4 <check_memory_range+0x40>)
 8011bb8:	4293      	cmp	r3, r2
 8011bba:	d201      	bcs.n	8011bc0 <check_memory_range+0x2c>
        return TRUE;
 8011bbc:	2301      	movs	r3, #1
 8011bbe:	e000      	b.n	8011bc2 <check_memory_range+0x2e>
    } else {
        return FALSE;
 8011bc0:	2300      	movs	r3, #0
    }
}
 8011bc2:	4618      	mov	r0, r3
 8011bc4:	370c      	adds	r7, #12
 8011bc6:	46bd      	mov	sp, r7
 8011bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bcc:	4770      	bx	lr
 8011bce:	bf00      	nop
 8011bd0:	0801ffff 	.word	0x0801ffff
 8011bd4:	20024000 	.word	0x20024000

08011bd8 <cbf_dump>:
#define CHAR_SPACE          ' '
#define CHAR_z              'z'
#define CHAR_dot            '.'
#define ASCII_CHAR_DUMP     0
int cbf_dump(int argc, char *argv[])
{
 8011bd8:	b580      	push	{r7, lr}
 8011bda:	b086      	sub	sp, #24
 8011bdc:	af00      	add	r7, sp, #0
 8011bde:	6078      	str	r0, [r7, #4]
 8011be0:	6039      	str	r1, [r7, #0]
    uint32_t size  = atoi(argv[2]);
 8011be2:	683b      	ldr	r3, [r7, #0]
 8011be4:	3308      	adds	r3, #8
 8011be6:	681b      	ldr	r3, [r3, #0]
 8011be8:	4618      	mov	r0, r3
 8011bea:	f007 fb39 	bl	8019260 <atoi>
 8011bee:	4603      	mov	r3, r0
 8011bf0:	60fb      	str	r3, [r7, #12]
    uint32_t *addr = (uint32_t *) strtol(argv[1], NULL, 16);
 8011bf2:	683b      	ldr	r3, [r7, #0]
 8011bf4:	3304      	adds	r3, #4
 8011bf6:	681b      	ldr	r3, [r3, #0]
 8011bf8:	2210      	movs	r2, #16
 8011bfa:	2100      	movs	r1, #0
 8011bfc:	4618      	mov	r0, r3
 8011bfe:	f007 fc6b 	bl	80194d8 <strtol>
 8011c02:	4603      	mov	r3, r0
 8011c04:	617b      	str	r3, [r7, #20]
    uint32_t is_range_ok = (uint32_t)addr;
 8011c06:	697b      	ldr	r3, [r7, #20]
 8011c08:	60bb      	str	r3, [r7, #8]
    #if ASCII_CHAR_DUMP
    uint8_t buffer[LINE] = { 0, };
    #endif

    if (check_memory_range(is_range_ok) == TRUE) {
 8011c0a:	68b8      	ldr	r0, [r7, #8]
 8011c0c:	f7ff ffc2 	bl	8011b94 <check_memory_range>
 8011c10:	4603      	mov	r3, r0
 8011c12:	2b01      	cmp	r3, #1
 8011c14:	d110      	bne.n	8011c38 <cbf_dump+0x60>
        CONSOLE_SPLIT;
 8011c16:	4825      	ldr	r0, [pc, #148]	@ (8011cac <cbf_dump+0xd4>)
 8011c18:	f007 fd92 	bl	8019740 <puts>
        printf("Base Addrr // dump data ... \n");
 8011c1c:	4824      	ldr	r0, [pc, #144]	@ (8011cb0 <cbf_dump+0xd8>)
 8011c1e:	f007 fd8f 	bl	8019740 <puts>
        CONSOLE_SPLIT;
 8011c22:	4822      	ldr	r0, [pc, #136]	@ (8011cac <cbf_dump+0xd4>)
 8011c24:	f007 fd8c 	bl	8019740 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", (long)FLASH_RANGE_START, (long)FLASH_RANGE_END);
        printf("SRAM  Range is 0x%08lx ~ 0x%08lx\r\n", (long)ADDR_INTERNAL_SRAM_START, (long)ADDR_INTERNAL_SRAM_END);
        return FALSE;
    }

    printf("0x%08lx : ", (uint32_t)addr);
 8011c28:	697b      	ldr	r3, [r7, #20]
 8011c2a:	4619      	mov	r1, r3
 8011c2c:	4821      	ldr	r0, [pc, #132]	@ (8011cb4 <cbf_dump+0xdc>)
 8011c2e:	f007 fd1f 	bl	8019670 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8011c32:	2301      	movs	r3, #1
 8011c34:	827b      	strh	r3, [r7, #18]
 8011c36:	e02c      	b.n	8011c92 <cbf_dump+0xba>
        printf("Command Ex is ""dump [Address] [ReadSize Byte] ->""");
 8011c38:	481f      	ldr	r0, [pc, #124]	@ (8011cb8 <cbf_dump+0xe0>)
 8011c3a:	f007 fd19 	bl	8019670 <iprintf>
        printf("dump 128 0x08010000\r\n");
 8011c3e:	481f      	ldr	r0, [pc, #124]	@ (8011cbc <cbf_dump+0xe4>)
 8011c40:	f007 fd7e 	bl	8019740 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", (long)FLASH_RANGE_START, (long)FLASH_RANGE_END);
 8011c44:	4a1e      	ldr	r2, [pc, #120]	@ (8011cc0 <cbf_dump+0xe8>)
 8011c46:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8011c4a:	481e      	ldr	r0, [pc, #120]	@ (8011cc4 <cbf_dump+0xec>)
 8011c4c:	f007 fd10 	bl	8019670 <iprintf>
        printf("SRAM  Range is 0x%08lx ~ 0x%08lx\r\n", (long)ADDR_INTERNAL_SRAM_START, (long)ADDR_INTERNAL_SRAM_END);
 8011c50:	4a1d      	ldr	r2, [pc, #116]	@ (8011cc8 <cbf_dump+0xf0>)
 8011c52:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8011c56:	481d      	ldr	r0, [pc, #116]	@ (8011ccc <cbf_dump+0xf4>)
 8011c58:	f007 fd0a 	bl	8019670 <iprintf>
        return FALSE;
 8011c5c:	2300      	movs	r3, #0
 8011c5e:	e020      	b.n	8011ca2 <cbf_dump+0xca>
        } else { 
            buffer[range - 1] = CHAR_dot;
        }
        #endif

        printf("%04lx\t",  *(addr++));
 8011c60:	697b      	ldr	r3, [r7, #20]
 8011c62:	1d1a      	adds	r2, r3, #4
 8011c64:	617a      	str	r2, [r7, #20]
 8011c66:	681b      	ldr	r3, [r3, #0]
 8011c68:	4619      	mov	r1, r3
 8011c6a:	4819      	ldr	r0, [pc, #100]	@ (8011cd0 <cbf_dump+0xf8>)
 8011c6c:	f007 fd00 	bl	8019670 <iprintf>
        if (range % LINE == 0) {
 8011c70:	8a7b      	ldrh	r3, [r7, #18]
 8011c72:	f003 0303 	and.w	r3, r3, #3
 8011c76:	b29b      	uxth	r3, r3
 8011c78:	2b00      	cmp	r3, #0
 8011c7a:	d107      	bne.n	8011c8c <cbf_dump+0xb4>
            #if ASCII_CHAR_DUMP
            printf("\t: %s", buffer);
            #endif
            printf("\r\n");
 8011c7c:	4815      	ldr	r0, [pc, #84]	@ (8011cd4 <cbf_dump+0xfc>)
 8011c7e:	f007 fd5f 	bl	8019740 <puts>
            printf("0x%08lx : ", (uint32_t)addr);
 8011c82:	697b      	ldr	r3, [r7, #20]
 8011c84:	4619      	mov	r1, r3
 8011c86:	480b      	ldr	r0, [pc, #44]	@ (8011cb4 <cbf_dump+0xdc>)
 8011c88:	f007 fcf2 	bl	8019670 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8011c8c:	8a7b      	ldrh	r3, [r7, #18]
 8011c8e:	3301      	adds	r3, #1
 8011c90:	827b      	strh	r3, [r7, #18]
 8011c92:	8a7b      	ldrh	r3, [r7, #18]
 8011c94:	68fa      	ldr	r2, [r7, #12]
 8011c96:	429a      	cmp	r2, r3
 8011c98:	d2e2      	bcs.n	8011c60 <cbf_dump+0x88>
        }
    }
    printf("\r\n");
 8011c9a:	480e      	ldr	r0, [pc, #56]	@ (8011cd4 <cbf_dump+0xfc>)
 8011c9c:	f007 fd50 	bl	8019740 <puts>
    return 0;
 8011ca0:	2300      	movs	r3, #0
}
 8011ca2:	4618      	mov	r0, r3
 8011ca4:	3718      	adds	r7, #24
 8011ca6:	46bd      	mov	sp, r7
 8011ca8:	bd80      	pop	{r7, pc}
 8011caa:	bf00      	nop
 8011cac:	0801a774 	.word	0x0801a774
 8011cb0:	0801a9c4 	.word	0x0801a9c4
 8011cb4:	0801aa74 	.word	0x0801aa74
 8011cb8:	0801a9e4 	.word	0x0801a9e4
 8011cbc:	0801aa14 	.word	0x0801aa14
 8011cc0:	0801fffe 	.word	0x0801fffe
 8011cc4:	0801aa2c 	.word	0x0801aa2c
 8011cc8:	20023fff 	.word	0x20023fff
 8011ccc:	0801aa50 	.word	0x0801aa50
 8011cd0:	0801aa80 	.word	0x0801aa80
 8011cd4:	0801a760 	.word	0x0801a760

08011cd8 <cbf_flash_test>:

int cbf_flash_test(int argc, char *argv[])
{
 8011cd8:	b5b0      	push	{r4, r5, r7, lr}
 8011cda:	b088      	sub	sp, #32
 8011cdc:	af00      	add	r7, sp, #0
 8011cde:	6078      	str	r0, [r7, #4]
 8011ce0:	6039      	str	r1, [r7, #0]
    volatile uint32_t *flash_addr = (volatile uint32_t *) strtol(argv[1], NULL, 16);
 8011ce2:	683b      	ldr	r3, [r7, #0]
 8011ce4:	3304      	adds	r3, #4
 8011ce6:	681b      	ldr	r3, [r3, #0]
 8011ce8:	2210      	movs	r2, #16
 8011cea:	2100      	movs	r1, #0
 8011cec:	4618      	mov	r0, r3
 8011cee:	f007 fbf3 	bl	80194d8 <strtol>
 8011cf2:	4603      	mov	r3, r0
 8011cf4:	61fb      	str	r3, [r7, #28]
    uint32_t addr = (uint32_t)flash_addr;
 8011cf6:	69fb      	ldr	r3, [r7, #28]
 8011cf8:	61bb      	str	r3, [r7, #24]
    uint64_t data = atoi(argv[2]);
 8011cfa:	683b      	ldr	r3, [r7, #0]
 8011cfc:	3308      	adds	r3, #8
 8011cfe:	681b      	ldr	r3, [r3, #0]
 8011d00:	4618      	mov	r0, r3
 8011d02:	f007 faad 	bl	8019260 <atoi>
 8011d06:	4603      	mov	r3, r0
 8011d08:	17da      	asrs	r2, r3, #31
 8011d0a:	461c      	mov	r4, r3
 8011d0c:	4615      	mov	r5, r2
 8011d0e:	e9c7 4504 	strd	r4, r5, [r7, #16]
    if (check_memory_range(addr) == FALSE) {
 8011d12:	69b8      	ldr	r0, [r7, #24]
 8011d14:	f7ff ff3e 	bl	8011b94 <check_memory_range>
 8011d18:	4603      	mov	r3, r0
 8011d1a:	2b00      	cmp	r3, #0
 8011d1c:	d10a      	bne.n	8011d34 <cbf_flash_test+0x5c>
        printf("Command is ""flash_test [Address] [Data]\r\n");
 8011d1e:	4817      	ldr	r0, [pc, #92]	@ (8011d7c <cbf_flash_test+0xa4>)
 8011d20:	f007 fd0e 	bl	8019740 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", FLASH_RANGE_START, FLASH_RANGE_END);
 8011d24:	4a16      	ldr	r2, [pc, #88]	@ (8011d80 <cbf_flash_test+0xa8>)
 8011d26:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8011d2a:	4816      	ldr	r0, [pc, #88]	@ (8011d84 <cbf_flash_test+0xac>)
 8011d2c:	f007 fca0 	bl	8019670 <iprintf>
        return FALSE;
 8011d30:	2300      	movs	r3, #0
 8011d32:	e01e      	b.n	8011d72 <cbf_flash_test+0x9a>
    }

    printf("Before : Address 0x%08lx : WR Data : 0x%08lx\r\n", (long)addr, (long)data);
 8011d34:	69bb      	ldr	r3, [r7, #24]
 8011d36:	693a      	ldr	r2, [r7, #16]
 8011d38:	4619      	mov	r1, r3
 8011d3a:	4813      	ldr	r0, [pc, #76]	@ (8011d88 <cbf_flash_test+0xb0>)
 8011d3c:	f007 fc98 	bl	8019670 <iprintf>

    BOOL_e ret = FLASH_If_Erase(addr);
 8011d40:	69b8      	ldr	r0, [r7, #24]
 8011d42:	f7ff fc5b 	bl	80115fc <FLASH_If_Erase>
 8011d46:	4603      	mov	r3, r0
 8011d48:	73fb      	strb	r3, [r7, #15]
    }
#else
    UNUSED(ret);
#endif

    HAL_FLASH_Unlock();
 8011d4a:	f001 fa89 	bl	8013260 <HAL_FLASH_Unlock>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)flash_addr, (uint64_t)data);
 8011d4e:	69f9      	ldr	r1, [r7, #28]
 8011d50:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8011d54:	2000      	movs	r0, #0
 8011d56:	f001 fa09 	bl	801316c <HAL_FLASH_Program>
 8011d5a:	4603      	mov	r3, r0
 8011d5c:	73fb      	strb	r3, [r7, #15]
    HAL_FLASH_Lock();
 8011d5e:	f001 faa1 	bl	80132a4 <HAL_FLASH_Lock>
    if (ret != TRUE) {
        printf("Flash Test Error\r\n");
    } 
#endif

    printf("Result : 0x%08lx - 0x%08lx\r\n", (uint32_t)flash_addr, (uint32_t)*flash_addr);
 8011d62:	69f9      	ldr	r1, [r7, #28]
 8011d64:	69fb      	ldr	r3, [r7, #28]
 8011d66:	681b      	ldr	r3, [r3, #0]
 8011d68:	461a      	mov	r2, r3
 8011d6a:	4808      	ldr	r0, [pc, #32]	@ (8011d8c <cbf_flash_test+0xb4>)
 8011d6c:	f007 fc80 	bl	8019670 <iprintf>
    return 0;
 8011d70:	2300      	movs	r3, #0
}
 8011d72:	4618      	mov	r0, r3
 8011d74:	3720      	adds	r7, #32
 8011d76:	46bd      	mov	sp, r7
 8011d78:	bdb0      	pop	{r4, r5, r7, pc}
 8011d7a:	bf00      	nop
 8011d7c:	0801aa88 	.word	0x0801aa88
 8011d80:	0801fffe 	.word	0x0801fffe
 8011d84:	0801aa2c 	.word	0x0801aa2c
 8011d88:	0801aab0 	.word	0x0801aab0
 8011d8c:	0801aae0 	.word	0x0801aae0

08011d90 <cbf_tag>:
    Jump_To_Application(); 
    return 0;
}

int cbf_tag(int argc, char *argv[])
{
 8011d90:	b580      	push	{r7, lr}
 8011d92:	b082      	sub	sp, #8
 8011d94:	af00      	add	r7, sp, #0
 8011d96:	6078      	str	r0, [r7, #4]
 8011d98:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8011d9a:	4805      	ldr	r0, [pc, #20]	@ (8011db0 <cbf_tag+0x20>)
 8011d9c:	f007 fcd0 	bl	8019740 <puts>
    printf("FW SN\t\t\t%s\r\n", tag->fw_sn );
    printf("FW Version\t\t%s\r\n", tag->fw_version );
    printf("FW Compiled date\t%s\r\n", tag->fw_compile_data);
    printf("FW Compiled time\t%s\r\n", tag->fw_compile_time);
#endif
    CONSOLE_SPLIT;
 8011da0:	4803      	ldr	r0, [pc, #12]	@ (8011db0 <cbf_tag+0x20>)
 8011da2:	f007 fccd 	bl	8019740 <puts>
    return 0;
 8011da6:	2300      	movs	r3, #0
}
 8011da8:	4618      	mov	r0, r3
 8011daa:	3708      	adds	r7, #8
 8011dac:	46bd      	mov	sp, r7
 8011dae:	bd80      	pop	{r7, pc}
 8011db0:	0801a774 	.word	0x0801a774

08011db4 <cbf_test_assert>:

int cbf_test_assert(int argc, char *argv[])
{
 8011db4:	b480      	push	{r7}
 8011db6:	b083      	sub	sp, #12
 8011db8:	af00      	add	r7, sp, #0
 8011dba:	6078      	str	r0, [r7, #4]
 8011dbc:	6039      	str	r1, [r7, #0]
	int ret = atoi(argv[1]);
    assert_param(ret);
	#endif

    //printf("sizeof(uint32_t) %d, sizeof(uint64_t) %d \r\n", sizeof(uint32_t), sizeof(uint64_t));
    return 0;
 8011dbe:	2300      	movs	r3, #0
}
 8011dc0:	4618      	mov	r0, r3
 8011dc2:	370c      	adds	r7, #12
 8011dc4:	46bd      	mov	sp, r7
 8011dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dca:	4770      	bx	lr

08011dcc <cbf_event_print>:

int cbf_event_print(int argc, char *argv[])
{
 8011dcc:	b480      	push	{r7}
 8011dce:	b083      	sub	sp, #12
 8011dd0:	af00      	add	r7, sp, #0
 8011dd2:	6078      	str	r0, [r7, #4]
 8011dd4:	6039      	str	r1, [r7, #0]
    #if LEGACY
    PRINT_SRAM_EVENT_LOG();
    #endif
    return 0;
 8011dd6:	2300      	movs	r3, #0
}
 8011dd8:	4618      	mov	r0, r3
 8011dda:	370c      	adds	r7, #12
 8011ddc:	46bd      	mov	sp, r7
 8011dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011de2:	4770      	bx	lr

08011de4 <cbf_event_test>:

int cbf_event_test(int argc, char *argv[])
{
 8011de4:	b480      	push	{r7}
 8011de6:	b083      	sub	sp, #12
 8011de8:	af00      	add	r7, sp, #0
 8011dea:	6078      	str	r0, [r7, #4]
 8011dec:	6039      	str	r1, [r7, #0]
    }

    //printf("type : %d \r\n", type);
    SAVE_SRAM_EVENT_LOG(type);
    #endif
    return 0;
 8011dee:	2300      	movs	r3, #0
}
 8011df0:	4618      	mov	r0, r3
 8011df2:	370c      	adds	r7, #12
 8011df4:	46bd      	mov	sp, r7
 8011df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011dfa:	4770      	bx	lr

08011dfc <cbf_event_reset>:

int cbf_event_reset(int argc, char *argv[])
{
 8011dfc:	b580      	push	{r7, lr}
 8011dfe:	b082      	sub	sp, #8
 8011e00:	af00      	add	r7, sp, #0
 8011e02:	6078      	str	r0, [r7, #4]
 8011e04:	6039      	str	r1, [r7, #0]
    #if LEGACY
    RESET_EVENT_LOG();
    #endif
    printf("Event Reset Completed\r\n");
 8011e06:	4804      	ldr	r0, [pc, #16]	@ (8011e18 <cbf_event_reset+0x1c>)
 8011e08:	f007 fc9a 	bl	8019740 <puts>
    return 0;
 8011e0c:	2300      	movs	r3, #0
}
 8011e0e:	4618      	mov	r0, r3
 8011e10:	3708      	adds	r7, #8
 8011e12:	46bd      	mov	sp, r7
 8011e14:	bd80      	pop	{r7, pc}
 8011e16:	bf00      	nop
 8011e18:	0801ab14 	.word	0x0801ab14

08011e1c <cbf_dbg_view>:

int cbf_dbg_view(int argc, char *argv[])
{
 8011e1c:	b590      	push	{r4, r7, lr}
 8011e1e:	b089      	sub	sp, #36	@ 0x24
 8011e20:	af00      	add	r7, sp, #0
 8011e22:	6078      	str	r0, [r7, #4]
 8011e24:	6039      	str	r1, [r7, #0]
    VIEW_DBG_POINT_e view_list[] = 
 8011e26:	4b2a      	ldr	r3, [pc, #168]	@ (8011ed0 <cbf_dbg_view+0xb4>)
 8011e28:	f107 0408 	add.w	r4, r7, #8
 8011e2c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8011e2e:	c407      	stmia	r4!, {r0, r1, r2}
 8011e30:	8023      	strh	r3, [r4, #0]
        VIEW_DBG_SRAM ,
        VIEW_DBG_FLASH,
        VIEW_MAX
    };
    
    const uint8_t max_size = sizeof(view_list) / sizeof(view_list[0]);
 8011e32:	2307      	movs	r3, #7
 8011e34:	77bb      	strb	r3, [r7, #30]
    long view_point = strtol(argv[1], NULL, 16);
 8011e36:	683b      	ldr	r3, [r7, #0]
 8011e38:	3304      	adds	r3, #4
 8011e3a:	681b      	ldr	r3, [r3, #0]
 8011e3c:	2210      	movs	r2, #16
 8011e3e:	2100      	movs	r1, #0
 8011e40:	4618      	mov	r0, r3
 8011e42:	f007 fb49 	bl	80194d8 <strtol>
 8011e46:	61b8      	str	r0, [r7, #24]
    
    if (view_point <= VIEW_NONE || view_point >= VIEW_MAX) {
 8011e48:	69bb      	ldr	r3, [r7, #24]
 8011e4a:	2b00      	cmp	r3, #0
 8011e4c:	dd04      	ble.n	8011e58 <cbf_dbg_view+0x3c>
 8011e4e:	69bb      	ldr	r3, [r7, #24]
 8011e50:	f64f 72fe 	movw	r2, #65534	@ 0xfffe
 8011e54:	4293      	cmp	r3, r2
 8011e56:	dd25      	ble.n	8011ea4 <cbf_dbg_view+0x88>
        CONSOLE_SPLIT;
 8011e58:	481e      	ldr	r0, [pc, #120]	@ (8011ed4 <cbf_dbg_view+0xb8>)
 8011e5a:	f007 fc71 	bl	8019740 <puts>
        printf("Invalid View Point\r\n");        
 8011e5e:	481e      	ldr	r0, [pc, #120]	@ (8011ed8 <cbf_dbg_view+0xbc>)
 8011e60:	f007 fc6e 	bl	8019740 <puts>
        printf("VIEW POINT HEX is ... \r\n");
 8011e64:	481d      	ldr	r0, [pc, #116]	@ (8011edc <cbf_dbg_view+0xc0>)
 8011e66:	f007 fc6b 	bl	8019740 <puts>
        CONSOLE_SPLIT;
 8011e6a:	481a      	ldr	r0, [pc, #104]	@ (8011ed4 <cbf_dbg_view+0xb8>)
 8011e6c:	f007 fc68 	bl	8019740 <puts>
        for (uint8_t cnt = 1; cnt < max_size - 1; cnt++) {
 8011e70:	2301      	movs	r3, #1
 8011e72:	77fb      	strb	r3, [r7, #31]
 8011e74:	e00c      	b.n	8011e90 <cbf_dbg_view+0x74>
            printf("0x%08x\r\n", view_list[cnt]);
 8011e76:	7ffb      	ldrb	r3, [r7, #31]
 8011e78:	005b      	lsls	r3, r3, #1
 8011e7a:	3320      	adds	r3, #32
 8011e7c:	443b      	add	r3, r7
 8011e7e:	f833 3c18 	ldrh.w	r3, [r3, #-24]
 8011e82:	4619      	mov	r1, r3
 8011e84:	4816      	ldr	r0, [pc, #88]	@ (8011ee0 <cbf_dbg_view+0xc4>)
 8011e86:	f007 fbf3 	bl	8019670 <iprintf>
        for (uint8_t cnt = 1; cnt < max_size - 1; cnt++) {
 8011e8a:	7ffb      	ldrb	r3, [r7, #31]
 8011e8c:	3301      	adds	r3, #1
 8011e8e:	77fb      	strb	r3, [r7, #31]
 8011e90:	7ffa      	ldrb	r2, [r7, #31]
 8011e92:	7fbb      	ldrb	r3, [r7, #30]
 8011e94:	3b01      	subs	r3, #1
 8011e96:	429a      	cmp	r2, r3
 8011e98:	dbed      	blt.n	8011e76 <cbf_dbg_view+0x5a>
        }
        CONSOLE_SPLIT;
 8011e9a:	480e      	ldr	r0, [pc, #56]	@ (8011ed4 <cbf_dbg_view+0xb8>)
 8011e9c:	f007 fc50 	bl	8019740 <puts>
        return 0;
 8011ea0:	2300      	movs	r3, #0
 8011ea2:	e010      	b.n	8011ec6 <cbf_dbg_view+0xaa>
    }
    
    view.dbg_value = (uint16_t)view_point;
 8011ea4:	69bb      	ldr	r3, [r7, #24]
 8011ea6:	b29a      	uxth	r2, r3
 8011ea8:	4b0e      	ldr	r3, [pc, #56]	@ (8011ee4 <cbf_dbg_view+0xc8>)
 8011eaa:	805a      	strh	r2, [r3, #2]

    CONSOLE_SPLIT;
 8011eac:	4809      	ldr	r0, [pc, #36]	@ (8011ed4 <cbf_dbg_view+0xb8>)
 8011eae:	f007 fc47 	bl	8019740 <puts>
    printf("view_point is 0x%04x\r\n", view.dbg_value);
 8011eb2:	4b0c      	ldr	r3, [pc, #48]	@ (8011ee4 <cbf_dbg_view+0xc8>)
 8011eb4:	885b      	ldrh	r3, [r3, #2]
 8011eb6:	4619      	mov	r1, r3
 8011eb8:	480b      	ldr	r0, [pc, #44]	@ (8011ee8 <cbf_dbg_view+0xcc>)
 8011eba:	f007 fbd9 	bl	8019670 <iprintf>
    CONSOLE_SPLIT;
 8011ebe:	4805      	ldr	r0, [pc, #20]	@ (8011ed4 <cbf_dbg_view+0xb8>)
 8011ec0:	f007 fc3e 	bl	8019740 <puts>

    return 0;
 8011ec4:	2300      	movs	r3, #0
}
 8011ec6:	4618      	mov	r0, r3
 8011ec8:	3724      	adds	r7, #36	@ 0x24
 8011eca:	46bd      	mov	sp, r7
 8011ecc:	bd90      	pop	{r4, r7, pc}
 8011ece:	bf00      	nop
 8011ed0:	0801ab7c 	.word	0x0801ab7c
 8011ed4:	0801a774 	.word	0x0801a774
 8011ed8:	0801ab2c 	.word	0x0801ab2c
 8011edc:	0801ab40 	.word	0x0801ab40
 8011ee0:	0801ab58 	.word	0x0801ab58
 8011ee4:	20000130 	.word	0x20000130
 8011ee8:	0801ab64 	.word	0x0801ab64

08011eec <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8011eec:	b5b0      	push	{r4, r5, r7, lr}
 8011eee:	b086      	sub	sp, #24
 8011ef0:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, CLI_Task, osPriorityNormal, 0, 128);
 8011ef2:	4b09      	ldr	r3, [pc, #36]	@ (8011f18 <MX_FREERTOS_Init+0x2c>)
 8011ef4:	1d3c      	adds	r4, r7, #4
 8011ef6:	461d      	mov	r5, r3
 8011ef8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8011efa:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8011efc:	682b      	ldr	r3, [r5, #0]
 8011efe:	6023      	str	r3, [r4, #0]
  CLI_TaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8011f00:	1d3b      	adds	r3, r7, #4
 8011f02:	2100      	movs	r1, #0
 8011f04:	4618      	mov	r0, r3
 8011f06:	f006 f9f8 	bl	80182fa <osThreadCreate>
 8011f0a:	4603      	mov	r3, r0
 8011f0c:	4a03      	ldr	r2, [pc, #12]	@ (8011f1c <MX_FREERTOS_Init+0x30>)
 8011f0e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8011f10:	bf00      	nop
 8011f12:	3718      	adds	r7, #24
 8011f14:	46bd      	mov	sp, r7
 8011f16:	bdb0      	pop	{r4, r5, r7, pc}
 8011f18:	0801ab98 	.word	0x0801ab98
 8011f1c:	20000280 	.word	0x20000280

08011f20 <CLI_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void CLI_Task(void const * argument)
{
 8011f20:	b580      	push	{r7, lr}
 8011f22:	b082      	sub	sp, #8
 8011f24:	af00      	add	r7, sp, #0
 8011f26:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    if (cli.rx_done == CLI_READY) {
 8011f28:	4b07      	ldr	r3, [pc, #28]	@ (8011f48 <CLI_Task+0x28>)
 8011f2a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8011f2e:	2b01      	cmp	r3, #1
 8011f30:	d106      	bne.n	8011f40 <CLI_Task+0x20>
        cli.rx_done = CLI_CLEAR;
 8011f32:	4b05      	ldr	r3, [pc, #20]	@ (8011f48 <CLI_Task+0x28>)
 8011f34:	2200      	movs	r2, #0
 8011f36:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        parser((char *)&cli.buffer[0]);
 8011f3a:	4803      	ldr	r0, [pc, #12]	@ (8011f48 <CLI_Task+0x28>)
 8011f3c:	f7ff fc88 	bl	8011850 <parser>
    }
    osDelay(1);
 8011f40:	2001      	movs	r0, #1
 8011f42:	f006 fa01 	bl	8018348 <osDelay>
    if (cli.rx_done == CLI_READY) {
 8011f46:	e7ef      	b.n	8011f28 <CLI_Task+0x8>
 8011f48:	200000ac 	.word	0x200000ac

08011f4c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8011f4c:	b580      	push	{r7, lr}
 8011f4e:	b08a      	sub	sp, #40	@ 0x28
 8011f50:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8011f52:	f107 0314 	add.w	r3, r7, #20
 8011f56:	2200      	movs	r2, #0
 8011f58:	601a      	str	r2, [r3, #0]
 8011f5a:	605a      	str	r2, [r3, #4]
 8011f5c:	609a      	str	r2, [r3, #8]
 8011f5e:	60da      	str	r2, [r3, #12]
 8011f60:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8011f62:	4b28      	ldr	r3, [pc, #160]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f64:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f66:	4a27      	ldr	r2, [pc, #156]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f68:	f043 0304 	orr.w	r3, r3, #4
 8011f6c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011f6e:	4b25      	ldr	r3, [pc, #148]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f70:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f72:	f003 0304 	and.w	r3, r3, #4
 8011f76:	613b      	str	r3, [r7, #16]
 8011f78:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8011f7a:	4b22      	ldr	r3, [pc, #136]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f7c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f7e:	4a21      	ldr	r2, [pc, #132]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f80:	f043 0320 	orr.w	r3, r3, #32
 8011f84:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011f86:	4b1f      	ldr	r3, [pc, #124]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f88:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f8a:	f003 0320 	and.w	r3, r3, #32
 8011f8e:	60fb      	str	r3, [r7, #12]
 8011f90:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8011f92:	4b1c      	ldr	r3, [pc, #112]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f94:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011f96:	4a1b      	ldr	r2, [pc, #108]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011f98:	f043 0301 	orr.w	r3, r3, #1
 8011f9c:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011f9e:	4b19      	ldr	r3, [pc, #100]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011fa0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fa2:	f003 0301 	and.w	r3, r3, #1
 8011fa6:	60bb      	str	r3, [r7, #8]
 8011fa8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8011faa:	4b16      	ldr	r3, [pc, #88]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011fac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fae:	4a15      	ldr	r2, [pc, #84]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011fb0:	f043 0302 	orr.w	r3, r3, #2
 8011fb4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8011fb6:	4b13      	ldr	r3, [pc, #76]	@ (8012004 <MX_GPIO_Init+0xb8>)
 8011fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8011fba:	f003 0302 	and.w	r3, r3, #2
 8011fbe:	607b      	str	r3, [r7, #4]
 8011fc0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin  = B1_Pin;
 8011fc2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8011fc6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8011fc8:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8011fcc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8011fce:	2300      	movs	r3, #0
 8011fd0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8011fd2:	f107 0314 	add.w	r3, r7, #20
 8011fd6:	4619      	mov	r1, r3
 8011fd8:	480b      	ldr	r0, [pc, #44]	@ (8012008 <MX_GPIO_Init+0xbc>)
 8011fda:	f001 fbeb 	bl	80137b4 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin   = NUCLEO431RB_LED;
 8011fde:	2320      	movs	r3, #32
 8011fe0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8011fe2:	2301      	movs	r3, #1
 8011fe4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8011fe6:	2300      	movs	r3, #0
 8011fe8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8011fea:	2300      	movs	r3, #0
 8011fec:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NUCLEO431RB_LED_PORT, &GPIO_InitStruct);
 8011fee:	f107 0314 	add.w	r3, r7, #20
 8011ff2:	4619      	mov	r1, r3
 8011ff4:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8011ff8:	f001 fbdc 	bl	80137b4 <HAL_GPIO_Init>

}
 8011ffc:	bf00      	nop
 8011ffe:	3728      	adds	r7, #40	@ 0x28
 8012000:	46bd      	mov	sp, r7
 8012002:	bd80      	pop	{r7, pc}
 8012004:	40021000 	.word	0x40021000
 8012008:	48000800 	.word	0x48000800

0801200c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 801200c:	b580      	push	{r7, lr}
 801200e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8012010:	f000 faeb 	bl	80125ea <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8012014:	f000 f80c 	bl	8012030 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8012018:	f7ff ff98 	bl	8011f4c <MX_GPIO_Init>
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_DAC1_Init();
#endif
  MX_LPUART1_UART_Init();
 801201c:	f000 fa12 	bl	8012444 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLI_Init();
 8012020:	f7ff fbee 	bl	8011800 <CLI_Init>

  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8012024:	f7ff ff62 	bl	8011eec <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8012028:	f006 f960 	bl	80182ec <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 801202c:	bf00      	nop
 801202e:	e7fd      	b.n	801202c <main+0x20>

08012030 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8012030:	b580      	push	{r7, lr}
 8012032:	b094      	sub	sp, #80	@ 0x50
 8012034:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8012036:	f107 0318 	add.w	r3, r7, #24
 801203a:	2238      	movs	r2, #56	@ 0x38
 801203c:	2100      	movs	r1, #0
 801203e:	4618      	mov	r0, r3
 8012040:	f007 fd1a 	bl	8019a78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8012044:	1d3b      	adds	r3, r7, #4
 8012046:	2200      	movs	r2, #0
 8012048:	601a      	str	r2, [r3, #0]
 801204a:	605a      	str	r2, [r3, #4]
 801204c:	609a      	str	r2, [r3, #8]
 801204e:	60da      	str	r2, [r3, #12]
 8012050:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8012052:	2000      	movs	r0, #0
 8012054:	f001 fe02 	bl	8013c5c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8012058:	2302      	movs	r3, #2
 801205a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 801205c:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8012060:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8012062:	2340      	movs	r3, #64	@ 0x40
 8012064:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8012066:	2302      	movs	r3, #2
 8012068:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 801206a:	2302      	movs	r3, #2
 801206c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 801206e:	2304      	movs	r3, #4
 8012070:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8012072:	2355      	movs	r3, #85	@ 0x55
 8012074:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8012076:	2302      	movs	r3, #2
 8012078:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 801207a:	2302      	movs	r3, #2
 801207c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 801207e:	2302      	movs	r3, #2
 8012080:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8012082:	f107 0318 	add.w	r3, r7, #24
 8012086:	4618      	mov	r0, r3
 8012088:	f001 feac 	bl	8013de4 <HAL_RCC_OscConfig>
 801208c:	4603      	mov	r3, r0
 801208e:	2b00      	cmp	r3, #0
 8012090:	d001      	beq.n	8012096 <SystemClock_Config+0x66>
  {
    Error_Handler();
 8012092:	f000 f82b 	bl	80120ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8012096:	230f      	movs	r3, #15
 8012098:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 801209a:	2303      	movs	r3, #3
 801209c:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 801209e:	2300      	movs	r3, #0
 80120a0:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80120a2:	2300      	movs	r3, #0
 80120a4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80120a6:	2300      	movs	r3, #0
 80120a8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 80120aa:	1d3b      	adds	r3, r7, #4
 80120ac:	2104      	movs	r1, #4
 80120ae:	4618      	mov	r0, r3
 80120b0:	f002 faa4 	bl	80145fc <HAL_RCC_ClockConfig>
 80120b4:	4603      	mov	r3, r0
 80120b6:	2b00      	cmp	r3, #0
 80120b8:	d001      	beq.n	80120be <SystemClock_Config+0x8e>
  {
    Error_Handler();
 80120ba:	f000 f817 	bl	80120ec <Error_Handler>
  }
}
 80120be:	bf00      	nop
 80120c0:	3750      	adds	r7, #80	@ 0x50
 80120c2:	46bd      	mov	sp, r7
 80120c4:	bd80      	pop	{r7, pc}
	...

080120c8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80120c8:	b580      	push	{r7, lr}
 80120ca:	b082      	sub	sp, #8
 80120cc:	af00      	add	r7, sp, #0
 80120ce:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 80120d0:	687b      	ldr	r3, [r7, #4]
 80120d2:	681b      	ldr	r3, [r3, #0]
 80120d4:	4a04      	ldr	r2, [pc, #16]	@ (80120e8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80120d6:	4293      	cmp	r3, r2
 80120d8:	d101      	bne.n	80120de <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80120da:	f000 fa9f 	bl	801261c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80120de:	bf00      	nop
 80120e0:	3708      	adds	r7, #8
 80120e2:	46bd      	mov	sp, r7
 80120e4:	bd80      	pop	{r7, pc}
 80120e6:	bf00      	nop
 80120e8:	40012c00 	.word	0x40012c00

080120ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80120ec:	b480      	push	{r7}
 80120ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80120f0:	b672      	cpsid	i
}
 80120f2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80120f4:	bf00      	nop
 80120f6:	e7fd      	b.n	80120f4 <Error_Handler+0x8>

080120f8 <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 80120f8:	b480      	push	{r7}
 80120fa:	b083      	sub	sp, #12
 80120fc:	af00      	add	r7, sp, #0
 80120fe:	6078      	str	r0, [r7, #4]
 8012100:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8012102:	bf00      	nop
 8012104:	370c      	adds	r7, #12
 8012106:	46bd      	mov	sp, r7
 8012108:	f85d 7b04 	ldr.w	r7, [sp], #4
 801210c:	4770      	bx	lr
	...

08012110 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8012110:	b580      	push	{r7, lr}
 8012112:	b082      	sub	sp, #8
 8012114:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8012116:	4b12      	ldr	r3, [pc, #72]	@ (8012160 <HAL_MspInit+0x50>)
 8012118:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801211a:	4a11      	ldr	r2, [pc, #68]	@ (8012160 <HAL_MspInit+0x50>)
 801211c:	f043 0301 	orr.w	r3, r3, #1
 8012120:	6613      	str	r3, [r2, #96]	@ 0x60
 8012122:	4b0f      	ldr	r3, [pc, #60]	@ (8012160 <HAL_MspInit+0x50>)
 8012124:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012126:	f003 0301 	and.w	r3, r3, #1
 801212a:	607b      	str	r3, [r7, #4]
 801212c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 801212e:	4b0c      	ldr	r3, [pc, #48]	@ (8012160 <HAL_MspInit+0x50>)
 8012130:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012132:	4a0b      	ldr	r2, [pc, #44]	@ (8012160 <HAL_MspInit+0x50>)
 8012134:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8012138:	6593      	str	r3, [r2, #88]	@ 0x58
 801213a:	4b09      	ldr	r3, [pc, #36]	@ (8012160 <HAL_MspInit+0x50>)
 801213c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801213e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8012142:	603b      	str	r3, [r7, #0]
 8012144:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8012146:	2200      	movs	r2, #0
 8012148:	210f      	movs	r1, #15
 801214a:	f06f 0001 	mvn.w	r0, #1
 801214e:	f000 fe57 	bl	8012e00 <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8012152:	f001 fe37 	bl	8013dc4 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8012156:	bf00      	nop
 8012158:	3708      	adds	r7, #8
 801215a:	46bd      	mov	sp, r7
 801215c:	bd80      	pop	{r7, pc}
 801215e:	bf00      	nop
 8012160:	40021000 	.word	0x40021000

08012164 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8012164:	b580      	push	{r7, lr}
 8012166:	b08c      	sub	sp, #48	@ 0x30
 8012168:	af00      	add	r7, sp, #0
 801216a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 801216c:	2300      	movs	r3, #0
 801216e:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8012170:	2300      	movs	r3, #0
 8012172:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8012174:	4b2c      	ldr	r3, [pc, #176]	@ (8012228 <HAL_InitTick+0xc4>)
 8012176:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012178:	4a2b      	ldr	r2, [pc, #172]	@ (8012228 <HAL_InitTick+0xc4>)
 801217a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801217e:	6613      	str	r3, [r2, #96]	@ 0x60
 8012180:	4b29      	ldr	r3, [pc, #164]	@ (8012228 <HAL_InitTick+0xc4>)
 8012182:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012184:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8012188:	60bb      	str	r3, [r7, #8]
 801218a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 801218c:	f107 020c 	add.w	r2, r7, #12
 8012190:	f107 0310 	add.w	r3, r7, #16
 8012194:	4611      	mov	r1, r2
 8012196:	4618      	mov	r0, r3
 8012198:	f002 fcc8 	bl	8014b2c <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 801219c:	f002 fcb0 	bl	8014b00 <HAL_RCC_GetPCLK2Freq>
 80121a0:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80121a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80121a4:	4a21      	ldr	r2, [pc, #132]	@ (801222c <HAL_InitTick+0xc8>)
 80121a6:	fba2 2303 	umull	r2, r3, r2, r3
 80121aa:	0c9b      	lsrs	r3, r3, #18
 80121ac:	3b01      	subs	r3, #1
 80121ae:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 80121b0:	4b1f      	ldr	r3, [pc, #124]	@ (8012230 <HAL_InitTick+0xcc>)
 80121b2:	4a20      	ldr	r2, [pc, #128]	@ (8012234 <HAL_InitTick+0xd0>)
 80121b4:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 80121b6:	4b1e      	ldr	r3, [pc, #120]	@ (8012230 <HAL_InitTick+0xcc>)
 80121b8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 80121bc:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 80121be:	4a1c      	ldr	r2, [pc, #112]	@ (8012230 <HAL_InitTick+0xcc>)
 80121c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80121c2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 80121c4:	4b1a      	ldr	r3, [pc, #104]	@ (8012230 <HAL_InitTick+0xcc>)
 80121c6:	2200      	movs	r2, #0
 80121c8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80121ca:	4b19      	ldr	r3, [pc, #100]	@ (8012230 <HAL_InitTick+0xcc>)
 80121cc:	2200      	movs	r2, #0
 80121ce:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 80121d0:	4817      	ldr	r0, [pc, #92]	@ (8012230 <HAL_InitTick+0xcc>)
 80121d2:	f003 f8d3 	bl	801537c <HAL_TIM_Base_Init>
 80121d6:	4603      	mov	r3, r0
 80121d8:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80121dc:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80121e0:	2b00      	cmp	r3, #0
 80121e2:	d11b      	bne.n	801221c <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80121e4:	4812      	ldr	r0, [pc, #72]	@ (8012230 <HAL_InitTick+0xcc>)
 80121e6:	f003 f9d1 	bl	801558c <HAL_TIM_Base_Start_IT>
 80121ea:	4603      	mov	r3, r0
 80121ec:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80121f0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80121f4:	2b00      	cmp	r3, #0
 80121f6:	d111      	bne.n	801221c <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 80121f8:	2019      	movs	r0, #25
 80121fa:	f000 fe2b 	bl	8012e54 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80121fe:	687b      	ldr	r3, [r7, #4]
 8012200:	2b0f      	cmp	r3, #15
 8012202:	d808      	bhi.n	8012216 <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8012204:	2200      	movs	r2, #0
 8012206:	6879      	ldr	r1, [r7, #4]
 8012208:	2019      	movs	r0, #25
 801220a:	f000 fdf9 	bl	8012e00 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 801220e:	4a0a      	ldr	r2, [pc, #40]	@ (8012238 <HAL_InitTick+0xd4>)
 8012210:	687b      	ldr	r3, [r7, #4]
 8012212:	6013      	str	r3, [r2, #0]
 8012214:	e002      	b.n	801221c <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8012216:	2301      	movs	r3, #1
 8012218:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 801221c:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8012220:	4618      	mov	r0, r3
 8012222:	3730      	adds	r7, #48	@ 0x30
 8012224:	46bd      	mov	sp, r7
 8012226:	bd80      	pop	{r7, pc}
 8012228:	40021000 	.word	0x40021000
 801222c:	431bde83 	.word	0x431bde83
 8012230:	20000284 	.word	0x20000284
 8012234:	40012c00 	.word	0x40012c00
 8012238:	20000004 	.word	0x20000004

0801223c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 801223c:	b480      	push	{r7}
 801223e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8012240:	bf00      	nop
 8012242:	e7fd      	b.n	8012240 <NMI_Handler+0x4>

08012244 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8012244:	b480      	push	{r7}
 8012246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8012248:	bf00      	nop
 801224a:	e7fd      	b.n	8012248 <HardFault_Handler+0x4>

0801224c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 801224c:	b480      	push	{r7}
 801224e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8012250:	bf00      	nop
 8012252:	e7fd      	b.n	8012250 <MemManage_Handler+0x4>

08012254 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8012254:	b480      	push	{r7}
 8012256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8012258:	bf00      	nop
 801225a:	e7fd      	b.n	8012258 <BusFault_Handler+0x4>

0801225c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 801225c:	b480      	push	{r7}
 801225e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8012260:	bf00      	nop
 8012262:	e7fd      	b.n	8012260 <UsageFault_Handler+0x4>

08012264 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8012264:	b480      	push	{r7}
 8012266:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8012268:	bf00      	nop
 801226a:	46bd      	mov	sp, r7
 801226c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012270:	4770      	bx	lr
	...

08012274 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8012274:	b580      	push	{r7, lr}
 8012276:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8012278:	4802      	ldr	r0, [pc, #8]	@ (8012284 <DMA1_Channel1_IRQHandler+0x10>)
 801227a:	f000 fec7 	bl	801300c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 801227e:	bf00      	nop
 8012280:	bd80      	pop	{r7, pc}
 8012282:	bf00      	nop
 8012284:	20000220 	.word	0x20000220

08012288 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8012288:	b580      	push	{r7, lr}
 801228a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 801228c:	4802      	ldr	r0, [pc, #8]	@ (8012298 <ADC1_2_IRQHandler+0x10>)
 801228e:	f000 fa4b 	bl	8012728 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 8012292:	bf00      	nop
 8012294:	bd80      	pop	{r7, pc}
 8012296:	bf00      	nop
 8012298:	200001b4 	.word	0x200001b4

0801229c <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 801229c:	b580      	push	{r7, lr}
 801229e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80122a0:	4802      	ldr	r0, [pc, #8]	@ (80122ac <TIM1_UP_TIM16_IRQHandler+0x10>)
 80122a2:	f003 fa1b 	bl	80156dc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80122a6:	bf00      	nop
 80122a8:	bd80      	pop	{r7, pc}
 80122aa:	bf00      	nop
 80122ac:	20000284 	.word	0x20000284

080122b0 <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80122b0:	b580      	push	{r7, lr}
 80122b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80122b4:	4802      	ldr	r0, [pc, #8]	@ (80122c0 <LPUART1_IRQHandler+0x10>)
 80122b6:	f003 fde3 	bl	8015e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80122ba:	bf00      	nop
 80122bc:	bd80      	pop	{r7, pc}
 80122be:	bf00      	nop
 80122c0:	200002d4 	.word	0x200002d4

080122c4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80122c4:	b480      	push	{r7}
 80122c6:	af00      	add	r7, sp, #0
  return 1;
 80122c8:	2301      	movs	r3, #1
}
 80122ca:	4618      	mov	r0, r3
 80122cc:	46bd      	mov	sp, r7
 80122ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80122d2:	4770      	bx	lr

080122d4 <_kill>:

int _kill(int pid, int sig)
{
 80122d4:	b580      	push	{r7, lr}
 80122d6:	b082      	sub	sp, #8
 80122d8:	af00      	add	r7, sp, #0
 80122da:	6078      	str	r0, [r7, #4]
 80122dc:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80122de:	f007 fc85 	bl	8019bec <__errno>
 80122e2:	4603      	mov	r3, r0
 80122e4:	2216      	movs	r2, #22
 80122e6:	601a      	str	r2, [r3, #0]
  return -1;
 80122e8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80122ec:	4618      	mov	r0, r3
 80122ee:	3708      	adds	r7, #8
 80122f0:	46bd      	mov	sp, r7
 80122f2:	bd80      	pop	{r7, pc}

080122f4 <_exit>:

void _exit (int status)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b082      	sub	sp, #8
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80122fc:	f04f 31ff 	mov.w	r1, #4294967295
 8012300:	6878      	ldr	r0, [r7, #4]
 8012302:	f7ff ffe7 	bl	80122d4 <_kill>
  while (1) {}    /* Make sure we hang here */
 8012306:	bf00      	nop
 8012308:	e7fd      	b.n	8012306 <_exit+0x12>

0801230a <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 801230a:	b580      	push	{r7, lr}
 801230c:	b086      	sub	sp, #24
 801230e:	af00      	add	r7, sp, #0
 8012310:	60f8      	str	r0, [r7, #12]
 8012312:	60b9      	str	r1, [r7, #8]
 8012314:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8012316:	2300      	movs	r3, #0
 8012318:	617b      	str	r3, [r7, #20]
 801231a:	e00a      	b.n	8012332 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 801231c:	f3af 8000 	nop.w
 8012320:	4601      	mov	r1, r0
 8012322:	68bb      	ldr	r3, [r7, #8]
 8012324:	1c5a      	adds	r2, r3, #1
 8012326:	60ba      	str	r2, [r7, #8]
 8012328:	b2ca      	uxtb	r2, r1
 801232a:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	3301      	adds	r3, #1
 8012330:	617b      	str	r3, [r7, #20]
 8012332:	697a      	ldr	r2, [r7, #20]
 8012334:	687b      	ldr	r3, [r7, #4]
 8012336:	429a      	cmp	r2, r3
 8012338:	dbf0      	blt.n	801231c <_read+0x12>
  }

  return len;
 801233a:	687b      	ldr	r3, [r7, #4]
}
 801233c:	4618      	mov	r0, r3
 801233e:	3718      	adds	r7, #24
 8012340:	46bd      	mov	sp, r7
 8012342:	bd80      	pop	{r7, pc}

08012344 <_close>:
  }
  return len;
}

int _close(int file)
{
 8012344:	b480      	push	{r7}
 8012346:	b083      	sub	sp, #12
 8012348:	af00      	add	r7, sp, #0
 801234a:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 801234c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8012350:	4618      	mov	r0, r3
 8012352:	370c      	adds	r7, #12
 8012354:	46bd      	mov	sp, r7
 8012356:	f85d 7b04 	ldr.w	r7, [sp], #4
 801235a:	4770      	bx	lr

0801235c <_fstat>:


int _fstat(int file, struct stat *st)
{
 801235c:	b480      	push	{r7}
 801235e:	b083      	sub	sp, #12
 8012360:	af00      	add	r7, sp, #0
 8012362:	6078      	str	r0, [r7, #4]
 8012364:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8012366:	683b      	ldr	r3, [r7, #0]
 8012368:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 801236c:	605a      	str	r2, [r3, #4]
  return 0;
 801236e:	2300      	movs	r3, #0
}
 8012370:	4618      	mov	r0, r3
 8012372:	370c      	adds	r7, #12
 8012374:	46bd      	mov	sp, r7
 8012376:	f85d 7b04 	ldr.w	r7, [sp], #4
 801237a:	4770      	bx	lr

0801237c <_isatty>:

int _isatty(int file)
{
 801237c:	b480      	push	{r7}
 801237e:	b083      	sub	sp, #12
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8012384:	2301      	movs	r3, #1
}
 8012386:	4618      	mov	r0, r3
 8012388:	370c      	adds	r7, #12
 801238a:	46bd      	mov	sp, r7
 801238c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012390:	4770      	bx	lr

08012392 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8012392:	b480      	push	{r7}
 8012394:	b085      	sub	sp, #20
 8012396:	af00      	add	r7, sp, #0
 8012398:	60f8      	str	r0, [r7, #12]
 801239a:	60b9      	str	r1, [r7, #8]
 801239c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 801239e:	2300      	movs	r3, #0
}
 80123a0:	4618      	mov	r0, r3
 80123a2:	3714      	adds	r7, #20
 80123a4:	46bd      	mov	sp, r7
 80123a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80123aa:	4770      	bx	lr

080123ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80123ac:	b580      	push	{r7, lr}
 80123ae:	b086      	sub	sp, #24
 80123b0:	af00      	add	r7, sp, #0
 80123b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80123b4:	4a14      	ldr	r2, [pc, #80]	@ (8012408 <_sbrk+0x5c>)
 80123b6:	4b15      	ldr	r3, [pc, #84]	@ (801240c <_sbrk+0x60>)
 80123b8:	1ad3      	subs	r3, r2, r3
 80123ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80123bc:	697b      	ldr	r3, [r7, #20]
 80123be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80123c0:	4b13      	ldr	r3, [pc, #76]	@ (8012410 <_sbrk+0x64>)
 80123c2:	681b      	ldr	r3, [r3, #0]
 80123c4:	2b00      	cmp	r3, #0
 80123c6:	d102      	bne.n	80123ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80123c8:	4b11      	ldr	r3, [pc, #68]	@ (8012410 <_sbrk+0x64>)
 80123ca:	4a12      	ldr	r2, [pc, #72]	@ (8012414 <_sbrk+0x68>)
 80123cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80123ce:	4b10      	ldr	r3, [pc, #64]	@ (8012410 <_sbrk+0x64>)
 80123d0:	681a      	ldr	r2, [r3, #0]
 80123d2:	687b      	ldr	r3, [r7, #4]
 80123d4:	4413      	add	r3, r2
 80123d6:	693a      	ldr	r2, [r7, #16]
 80123d8:	429a      	cmp	r2, r3
 80123da:	d207      	bcs.n	80123ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80123dc:	f007 fc06 	bl	8019bec <__errno>
 80123e0:	4603      	mov	r3, r0
 80123e2:	220c      	movs	r2, #12
 80123e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80123e6:	f04f 33ff 	mov.w	r3, #4294967295
 80123ea:	e009      	b.n	8012400 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80123ec:	4b08      	ldr	r3, [pc, #32]	@ (8012410 <_sbrk+0x64>)
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80123f2:	4b07      	ldr	r3, [pc, #28]	@ (8012410 <_sbrk+0x64>)
 80123f4:	681a      	ldr	r2, [r3, #0]
 80123f6:	687b      	ldr	r3, [r7, #4]
 80123f8:	4413      	add	r3, r2
 80123fa:	4a05      	ldr	r2, [pc, #20]	@ (8012410 <_sbrk+0x64>)
 80123fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80123fe:	68fb      	ldr	r3, [r7, #12]
}
 8012400:	4618      	mov	r0, r3
 8012402:	3718      	adds	r7, #24
 8012404:	46bd      	mov	sp, r7
 8012406:	bd80      	pop	{r7, pc}
 8012408:	20008000 	.word	0x20008000
 801240c:	00000400 	.word	0x00000400
 8012410:	200002d0 	.word	0x200002d0
 8012414:	200005f0 	.word	0x200005f0

08012418 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8012418:	b480      	push	{r7}
 801241a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 801241c:	4b07      	ldr	r3, [pc, #28]	@ (801243c <SystemInit+0x24>)
 801241e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8012422:	4a06      	ldr	r2, [pc, #24]	@ (801243c <SystemInit+0x24>)
 8012424:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8012428:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
  #endif

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
 801242c:	4b03      	ldr	r3, [pc, #12]	@ (801243c <SystemInit+0x24>)
 801242e:	4a04      	ldr	r2, [pc, #16]	@ (8012440 <SystemInit+0x28>)
 8012430:	609a      	str	r2, [r3, #8]
#endif /* USER_VECT_TAB_ADDRESS */
}
 8012432:	bf00      	nop
 8012434:	46bd      	mov	sp, r7
 8012436:	f85d 7b04 	ldr.w	r7, [sp], #4
 801243a:	4770      	bx	lr
 801243c:	e000ed00 	.word	0xe000ed00
 8012440:	08011000 	.word	0x08011000

08012444 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8012444:	b580      	push	{r7, lr}
 8012446:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 8012448:	4b21      	ldr	r3, [pc, #132]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 801244a:	4a22      	ldr	r2, [pc, #136]	@ (80124d4 <MX_LPUART1_UART_Init+0x90>)
 801244c:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 801244e:	4b20      	ldr	r3, [pc, #128]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 8012450:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8012454:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 8012456:	4b1e      	ldr	r3, [pc, #120]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 8012458:	2200      	movs	r2, #0
 801245a:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 801245c:	4b1c      	ldr	r3, [pc, #112]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 801245e:	2200      	movs	r2, #0
 8012460:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8012462:	4b1b      	ldr	r3, [pc, #108]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 8012464:	2200      	movs	r2, #0
 8012466:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 8012468:	4b19      	ldr	r3, [pc, #100]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 801246a:	220c      	movs	r2, #12
 801246c:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 801246e:	4b18      	ldr	r3, [pc, #96]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 8012470:	2200      	movs	r2, #0
 8012472:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8012474:	4b16      	ldr	r3, [pc, #88]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 8012476:	2200      	movs	r2, #0
 8012478:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 801247a:	4b15      	ldr	r3, [pc, #84]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 801247c:	2200      	movs	r2, #0
 801247e:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8012480:	4b13      	ldr	r3, [pc, #76]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 8012482:	2200      	movs	r2, #0
 8012484:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 8012486:	4812      	ldr	r0, [pc, #72]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 8012488:	f003 fb82 	bl	8015b90 <HAL_UART_Init>
 801248c:	4603      	mov	r3, r0
 801248e:	2b00      	cmp	r3, #0
 8012490:	d001      	beq.n	8012496 <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8012492:	f7ff fe2b 	bl	80120ec <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8012496:	2100      	movs	r1, #0
 8012498:	480d      	ldr	r0, [pc, #52]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 801249a:	f005 fdb9 	bl	8018010 <HAL_UARTEx_SetTxFifoThreshold>
 801249e:	4603      	mov	r3, r0
 80124a0:	2b00      	cmp	r3, #0
 80124a2:	d001      	beq.n	80124a8 <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80124a4:	f7ff fe22 	bl	80120ec <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80124a8:	2100      	movs	r1, #0
 80124aa:	4809      	ldr	r0, [pc, #36]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 80124ac:	f005 fe34 	bl	8018118 <HAL_UARTEx_SetRxFifoThreshold>
 80124b0:	4603      	mov	r3, r0
 80124b2:	2b00      	cmp	r3, #0
 80124b4:	d001      	beq.n	80124ba <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80124b6:	f7ff fe19 	bl	80120ec <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80124ba:	4805      	ldr	r0, [pc, #20]	@ (80124d0 <MX_LPUART1_UART_Init+0x8c>)
 80124bc:	f005 fd46 	bl	8017f4c <HAL_UARTEx_DisableFifoMode>
 80124c0:	4603      	mov	r3, r0
 80124c2:	2b00      	cmp	r3, #0
 80124c4:	d001      	beq.n	80124ca <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80124c6:	f7ff fe11 	bl	80120ec <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80124ca:	bf00      	nop
 80124cc:	bd80      	pop	{r7, pc}
 80124ce:	bf00      	nop
 80124d0:	200002d4 	.word	0x200002d4
 80124d4:	40008000 	.word	0x40008000

080124d8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80124d8:	b580      	push	{r7, lr}
 80124da:	b09a      	sub	sp, #104	@ 0x68
 80124dc:	af00      	add	r7, sp, #0
 80124de:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80124e0:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80124e4:	2200      	movs	r2, #0
 80124e6:	601a      	str	r2, [r3, #0]
 80124e8:	605a      	str	r2, [r3, #4]
 80124ea:	609a      	str	r2, [r3, #8]
 80124ec:	60da      	str	r2, [r3, #12]
 80124ee:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80124f0:	f107 0310 	add.w	r3, r7, #16
 80124f4:	2244      	movs	r2, #68	@ 0x44
 80124f6:	2100      	movs	r1, #0
 80124f8:	4618      	mov	r0, r3
 80124fa:	f007 fabd 	bl	8019a78 <memset>
  if(uartHandle->Instance==LPUART1)
 80124fe:	687b      	ldr	r3, [r7, #4]
 8012500:	681b      	ldr	r3, [r3, #0]
 8012502:	4a23      	ldr	r2, [pc, #140]	@ (8012590 <HAL_UART_MspInit+0xb8>)
 8012504:	4293      	cmp	r3, r2
 8012506:	d13e      	bne.n	8012586 <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 8012508:	2320      	movs	r3, #32
 801250a:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 801250c:	2300      	movs	r3, #0
 801250e:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8012510:	f107 0310 	add.w	r3, r7, #16
 8012514:	4618      	mov	r0, r3
 8012516:	f002 fb91 	bl	8014c3c <HAL_RCCEx_PeriphCLKConfig>
 801251a:	4603      	mov	r3, r0
 801251c:	2b00      	cmp	r3, #0
 801251e:	d001      	beq.n	8012524 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8012520:	f7ff fde4 	bl	80120ec <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8012524:	4b1b      	ldr	r3, [pc, #108]	@ (8012594 <HAL_UART_MspInit+0xbc>)
 8012526:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012528:	4a1a      	ldr	r2, [pc, #104]	@ (8012594 <HAL_UART_MspInit+0xbc>)
 801252a:	f043 0301 	orr.w	r3, r3, #1
 801252e:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8012530:	4b18      	ldr	r3, [pc, #96]	@ (8012594 <HAL_UART_MspInit+0xbc>)
 8012532:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012534:	f003 0301 	and.w	r3, r3, #1
 8012538:	60fb      	str	r3, [r7, #12]
 801253a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 801253c:	4b15      	ldr	r3, [pc, #84]	@ (8012594 <HAL_UART_MspInit+0xbc>)
 801253e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012540:	4a14      	ldr	r2, [pc, #80]	@ (8012594 <HAL_UART_MspInit+0xbc>)
 8012542:	f043 0301 	orr.w	r3, r3, #1
 8012546:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8012548:	4b12      	ldr	r3, [pc, #72]	@ (8012594 <HAL_UART_MspInit+0xbc>)
 801254a:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801254c:	f003 0301 	and.w	r3, r3, #1
 8012550:	60bb      	str	r3, [r7, #8]
 8012552:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8012554:	230c      	movs	r3, #12
 8012556:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8012558:	2302      	movs	r3, #2
 801255a:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 801255c:	2300      	movs	r3, #0
 801255e:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8012560:	2300      	movs	r3, #0
 8012562:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8012564:	230c      	movs	r3, #12
 8012566:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8012568:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 801256c:	4619      	mov	r1, r3
 801256e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8012572:	f001 f91f 	bl	80137b4 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 8012576:	2200      	movs	r2, #0
 8012578:	2105      	movs	r1, #5
 801257a:	205b      	movs	r0, #91	@ 0x5b
 801257c:	f000 fc40 	bl	8012e00 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8012580:	205b      	movs	r0, #91	@ 0x5b
 8012582:	f000 fc67 	bl	8012e54 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 8012586:	bf00      	nop
 8012588:	3768      	adds	r7, #104	@ 0x68
 801258a:	46bd      	mov	sp, r7
 801258c:	bd80      	pop	{r7, pc}
 801258e:	bf00      	nop
 8012590:	40008000 	.word	0x40008000
 8012594:	40021000 	.word	0x40021000

08012598 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8012598:	480d      	ldr	r0, [pc, #52]	@ (80125d0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 801259a:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 801259c:	f7ff ff3c 	bl	8012418 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80125a0:	480c      	ldr	r0, [pc, #48]	@ (80125d4 <LoopForever+0x6>)
  ldr r1, =_edata
 80125a2:	490d      	ldr	r1, [pc, #52]	@ (80125d8 <LoopForever+0xa>)
  ldr r2, =_sidata
 80125a4:	4a0d      	ldr	r2, [pc, #52]	@ (80125dc <LoopForever+0xe>)
  movs r3, #0
 80125a6:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80125a8:	e002      	b.n	80125b0 <LoopCopyDataInit>

080125aa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80125aa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80125ac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80125ae:	3304      	adds	r3, #4

080125b0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80125b0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80125b2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80125b4:	d3f9      	bcc.n	80125aa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80125b6:	4a0a      	ldr	r2, [pc, #40]	@ (80125e0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80125b8:	4c0a      	ldr	r4, [pc, #40]	@ (80125e4 <LoopForever+0x16>)
  movs r3, #0
 80125ba:	2300      	movs	r3, #0
  b LoopFillZerobss
 80125bc:	e001      	b.n	80125c2 <LoopFillZerobss>

080125be <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80125be:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80125c0:	3204      	adds	r2, #4

080125c2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80125c2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80125c4:	d3fb      	bcc.n	80125be <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80125c6:	f007 fb17 	bl	8019bf8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80125ca:	f7ff fd1f 	bl	801200c <main>

080125ce <LoopForever>:

LoopForever:
    b LoopForever
 80125ce:	e7fe      	b.n	80125ce <LoopForever>
  ldr   r0, =_estack
 80125d0:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80125d4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80125d8:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80125dc:	0801b428 	.word	0x0801b428
  ldr r2, =_sbss
 80125e0:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80125e4:	200005ec 	.word	0x200005ec

080125e8 <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80125e8:	e7fe      	b.n	80125e8 <COMP1_2_3_IRQHandler>

080125ea <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80125ea:	b580      	push	{r7, lr}
 80125ec:	b082      	sub	sp, #8
 80125ee:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80125f0:	2300      	movs	r3, #0
 80125f2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80125f4:	2003      	movs	r0, #3
 80125f6:	f000 fbe3 	bl	8012dc0 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80125fa:	200f      	movs	r0, #15
 80125fc:	f7ff fdb2 	bl	8012164 <HAL_InitTick>
 8012600:	4603      	mov	r3, r0
 8012602:	2b00      	cmp	r3, #0
 8012604:	d002      	beq.n	801260c <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 8012606:	2301      	movs	r3, #1
 8012608:	71fb      	strb	r3, [r7, #7]
 801260a:	e001      	b.n	8012610 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 801260c:	f7ff fd80 	bl	8012110 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8012610:	79fb      	ldrb	r3, [r7, #7]

}
 8012612:	4618      	mov	r0, r3
 8012614:	3708      	adds	r7, #8
 8012616:	46bd      	mov	sp, r7
 8012618:	bd80      	pop	{r7, pc}
	...

0801261c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 801261c:	b480      	push	{r7}
 801261e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8012620:	4b05      	ldr	r3, [pc, #20]	@ (8012638 <HAL_IncTick+0x1c>)
 8012622:	681a      	ldr	r2, [r3, #0]
 8012624:	4b05      	ldr	r3, [pc, #20]	@ (801263c <HAL_IncTick+0x20>)
 8012626:	681b      	ldr	r3, [r3, #0]
 8012628:	4413      	add	r3, r2
 801262a:	4a03      	ldr	r2, [pc, #12]	@ (8012638 <HAL_IncTick+0x1c>)
 801262c:	6013      	str	r3, [r2, #0]
}
 801262e:	bf00      	nop
 8012630:	46bd      	mov	sp, r7
 8012632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012636:	4770      	bx	lr
 8012638:	20000368 	.word	0x20000368
 801263c:	20000008 	.word	0x20000008

08012640 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8012640:	b480      	push	{r7}
 8012642:	af00      	add	r7, sp, #0
  return uwTick;
 8012644:	4b03      	ldr	r3, [pc, #12]	@ (8012654 <HAL_GetTick+0x14>)
 8012646:	681b      	ldr	r3, [r3, #0]
}
 8012648:	4618      	mov	r0, r3
 801264a:	46bd      	mov	sp, r7
 801264c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012650:	4770      	bx	lr
 8012652:	bf00      	nop
 8012654:	20000368 	.word	0x20000368

08012658 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8012658:	b480      	push	{r7}
 801265a:	b083      	sub	sp, #12
 801265c:	af00      	add	r7, sp, #0
 801265e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8012660:	687b      	ldr	r3, [r7, #4]
 8012662:	68db      	ldr	r3, [r3, #12]
 8012664:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8012668:	2b00      	cmp	r3, #0
 801266a:	d101      	bne.n	8012670 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 801266c:	2301      	movs	r3, #1
 801266e:	e000      	b.n	8012672 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8012670:	2300      	movs	r3, #0
}
 8012672:	4618      	mov	r0, r3
 8012674:	370c      	adds	r7, #12
 8012676:	46bd      	mov	sp, r7
 8012678:	f85d 7b04 	ldr.w	r7, [sp], #4
 801267c:	4770      	bx	lr

0801267e <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 801267e:	b480      	push	{r7}
 8012680:	b083      	sub	sp, #12
 8012682:	af00      	add	r7, sp, #0
 8012684:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 8012686:	687b      	ldr	r3, [r7, #4]
 8012688:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 801268a:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 801268e:	2b00      	cmp	r3, #0
 8012690:	d101      	bne.n	8012696 <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8012692:	2301      	movs	r3, #1
 8012694:	e000      	b.n	8012698 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 8012696:	2300      	movs	r3, #0
}
 8012698:	4618      	mov	r0, r3
 801269a:	370c      	adds	r7, #12
 801269c:	46bd      	mov	sp, r7
 801269e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126a2:	4770      	bx	lr

080126a4 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80126a4:	b480      	push	{r7}
 80126a6:	b083      	sub	sp, #12
 80126a8:	af00      	add	r7, sp, #0
 80126aa:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80126ac:	687b      	ldr	r3, [r7, #4]
 80126ae:	689b      	ldr	r3, [r3, #8]
 80126b0:	f003 031f 	and.w	r3, r3, #31
}
 80126b4:	4618      	mov	r0, r3
 80126b6:	370c      	adds	r7, #12
 80126b8:	46bd      	mov	sp, r7
 80126ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126be:	4770      	bx	lr

080126c0 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80126c0:	b480      	push	{r7}
 80126c2:	b083      	sub	sp, #12
 80126c4:	af00      	add	r7, sp, #0
 80126c6:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80126c8:	687b      	ldr	r3, [r7, #4]
 80126ca:	689b      	ldr	r3, [r3, #8]
 80126cc:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80126d0:	4618      	mov	r0, r3
 80126d2:	370c      	adds	r7, #12
 80126d4:	46bd      	mov	sp, r7
 80126d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80126da:	4770      	bx	lr

080126dc <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80126dc:	b480      	push	{r7}
 80126de:	b083      	sub	sp, #12
 80126e0:	af00      	add	r7, sp, #0
 80126e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80126e4:	687b      	ldr	r3, [r7, #4]
 80126e6:	689b      	ldr	r3, [r3, #8]
 80126e8:	f003 0304 	and.w	r3, r3, #4
 80126ec:	2b04      	cmp	r3, #4
 80126ee:	d101      	bne.n	80126f4 <LL_ADC_REG_IsConversionOngoing+0x18>
 80126f0:	2301      	movs	r3, #1
 80126f2:	e000      	b.n	80126f6 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80126f4:	2300      	movs	r3, #0
}
 80126f6:	4618      	mov	r0, r3
 80126f8:	370c      	adds	r7, #12
 80126fa:	46bd      	mov	sp, r7
 80126fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012700:	4770      	bx	lr

08012702 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8012702:	b480      	push	{r7}
 8012704:	b083      	sub	sp, #12
 8012706:	af00      	add	r7, sp, #0
 8012708:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 801270a:	687b      	ldr	r3, [r7, #4]
 801270c:	689b      	ldr	r3, [r3, #8]
 801270e:	f003 0308 	and.w	r3, r3, #8
 8012712:	2b08      	cmp	r3, #8
 8012714:	d101      	bne.n	801271a <LL_ADC_INJ_IsConversionOngoing+0x18>
 8012716:	2301      	movs	r3, #1
 8012718:	e000      	b.n	801271c <LL_ADC_INJ_IsConversionOngoing+0x1a>
 801271a:	2300      	movs	r3, #0
}
 801271c:	4618      	mov	r0, r3
 801271e:	370c      	adds	r7, #12
 8012720:	46bd      	mov	sp, r7
 8012722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012726:	4770      	bx	lr

08012728 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8012728:	b580      	push	{r7, lr}
 801272a:	b08a      	sub	sp, #40	@ 0x28
 801272c:	af00      	add	r7, sp, #0
 801272e:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8012730:	2300      	movs	r3, #0
 8012732:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8012734:	687b      	ldr	r3, [r7, #4]
 8012736:	681b      	ldr	r3, [r3, #0]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 801273c:	687b      	ldr	r3, [r7, #4]
 801273e:	681b      	ldr	r3, [r3, #0]
 8012740:	685b      	ldr	r3, [r3, #4]
 8012742:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8012744:	4891      	ldr	r0, [pc, #580]	@ (801298c <HAL_ADC_IRQHandler+0x264>)
 8012746:	f7ff ffad 	bl	80126a4 <LL_ADC_GetMultimode>
 801274a:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8012754:	d009      	beq.n	801276a <HAL_ADC_IRQHandler+0x42>
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	681b      	ldr	r3, [r3, #0]
 801275a:	4a8d      	ldr	r2, [pc, #564]	@ (8012990 <HAL_ADC_IRQHandler+0x268>)
 801275c:	4293      	cmp	r3, r2
 801275e:	d004      	beq.n	801276a <HAL_ADC_IRQHandler+0x42>
 8012760:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8012764:	488b      	ldr	r0, [pc, #556]	@ (8012994 <HAL_ADC_IRQHandler+0x26c>)
 8012766:	f7ff fcc7 	bl	80120f8 <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	699b      	ldr	r3, [r3, #24]
 801276e:	2b04      	cmp	r3, #4
 8012770:	d008      	beq.n	8012784 <HAL_ADC_IRQHandler+0x5c>
 8012772:	687b      	ldr	r3, [r7, #4]
 8012774:	699b      	ldr	r3, [r3, #24]
 8012776:	2b08      	cmp	r3, #8
 8012778:	d004      	beq.n	8012784 <HAL_ADC_IRQHandler+0x5c>
 801277a:	f640 1101 	movw	r1, #2305	@ 0x901
 801277e:	4885      	ldr	r0, [pc, #532]	@ (8012994 <HAL_ADC_IRQHandler+0x26c>)
 8012780:	f7ff fcba 	bl	80120f8 <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8012784:	69fb      	ldr	r3, [r7, #28]
 8012786:	f003 0302 	and.w	r3, r3, #2
 801278a:	2b00      	cmp	r3, #0
 801278c:	d017      	beq.n	80127be <HAL_ADC_IRQHandler+0x96>
 801278e:	69bb      	ldr	r3, [r7, #24]
 8012790:	f003 0302 	and.w	r3, r3, #2
 8012794:	2b00      	cmp	r3, #0
 8012796:	d012      	beq.n	80127be <HAL_ADC_IRQHandler+0x96>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8012798:	687b      	ldr	r3, [r7, #4]
 801279a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 801279c:	f003 0310 	and.w	r3, r3, #16
 80127a0:	2b00      	cmp	r3, #0
 80127a2:	d105      	bne.n	80127b0 <HAL_ADC_IRQHandler+0x88>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80127a4:	687b      	ldr	r3, [r7, #4]
 80127a6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80127a8:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80127ac:	687b      	ldr	r3, [r7, #4]
 80127ae:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80127b0:	6878      	ldr	r0, [r7, #4]
 80127b2:	f000 fa37 	bl	8012c24 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	681b      	ldr	r3, [r3, #0]
 80127ba:	2202      	movs	r2, #2
 80127bc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80127be:	69fb      	ldr	r3, [r7, #28]
 80127c0:	f003 0304 	and.w	r3, r3, #4
 80127c4:	2b00      	cmp	r3, #0
 80127c6:	d004      	beq.n	80127d2 <HAL_ADC_IRQHandler+0xaa>
 80127c8:	69bb      	ldr	r3, [r7, #24]
 80127ca:	f003 0304 	and.w	r3, r3, #4
 80127ce:	2b00      	cmp	r3, #0
 80127d0:	d10a      	bne.n	80127e8 <HAL_ADC_IRQHandler+0xc0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80127d2:	69fb      	ldr	r3, [r7, #28]
 80127d4:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80127d8:	2b00      	cmp	r3, #0
 80127da:	f000 8085 	beq.w	80128e8 <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80127de:	69bb      	ldr	r3, [r7, #24]
 80127e0:	f003 0308 	and.w	r3, r3, #8
 80127e4:	2b00      	cmp	r3, #0
 80127e6:	d07f      	beq.n	80128e8 <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80127e8:	687b      	ldr	r3, [r7, #4]
 80127ea:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80127ec:	f003 0310 	and.w	r3, r3, #16
 80127f0:	2b00      	cmp	r3, #0
 80127f2:	d105      	bne.n	8012800 <HAL_ADC_IRQHandler+0xd8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80127f4:	687b      	ldr	r3, [r7, #4]
 80127f6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80127f8:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80127fc:	687b      	ldr	r3, [r7, #4]
 80127fe:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	681b      	ldr	r3, [r3, #0]
 8012804:	4618      	mov	r0, r3
 8012806:	f7ff ff27 	bl	8012658 <LL_ADC_REG_IsTriggerSourceSWStart>
 801280a:	4603      	mov	r3, r0
 801280c:	2b00      	cmp	r3, #0
 801280e:	d064      	beq.n	80128da <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8012810:	687b      	ldr	r3, [r7, #4]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	4a5e      	ldr	r2, [pc, #376]	@ (8012990 <HAL_ADC_IRQHandler+0x268>)
 8012816:	4293      	cmp	r3, r2
 8012818:	d002      	beq.n	8012820 <HAL_ADC_IRQHandler+0xf8>
 801281a:	687b      	ldr	r3, [r7, #4]
 801281c:	681b      	ldr	r3, [r3, #0]
 801281e:	e001      	b.n	8012824 <HAL_ADC_IRQHandler+0xfc>
 8012820:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8012824:	687a      	ldr	r2, [r7, #4]
 8012826:	6812      	ldr	r2, [r2, #0]
 8012828:	4293      	cmp	r3, r2
 801282a:	d008      	beq.n	801283e <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 801282c:	697b      	ldr	r3, [r7, #20]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d005      	beq.n	801283e <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8012832:	697b      	ldr	r3, [r7, #20]
 8012834:	2b05      	cmp	r3, #5
 8012836:	d002      	beq.n	801283e <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8012838:	697b      	ldr	r3, [r7, #20]
 801283a:	2b09      	cmp	r3, #9
 801283c:	d104      	bne.n	8012848 <HAL_ADC_IRQHandler+0x120>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 801283e:	687b      	ldr	r3, [r7, #4]
 8012840:	681b      	ldr	r3, [r3, #0]
 8012842:	68db      	ldr	r3, [r3, #12]
 8012844:	623b      	str	r3, [r7, #32]
 8012846:	e00d      	b.n	8012864 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	681b      	ldr	r3, [r3, #0]
 801284c:	4a50      	ldr	r2, [pc, #320]	@ (8012990 <HAL_ADC_IRQHandler+0x268>)
 801284e:	4293      	cmp	r3, r2
 8012850:	d002      	beq.n	8012858 <HAL_ADC_IRQHandler+0x130>
 8012852:	687b      	ldr	r3, [r7, #4]
 8012854:	681b      	ldr	r3, [r3, #0]
 8012856:	e001      	b.n	801285c <HAL_ADC_IRQHandler+0x134>
 8012858:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 801285c:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801285e:	693b      	ldr	r3, [r7, #16]
 8012860:	68db      	ldr	r3, [r3, #12]
 8012862:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8012864:	6a3b      	ldr	r3, [r7, #32]
 8012866:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801286a:	2b00      	cmp	r3, #0
 801286c:	d135      	bne.n	80128da <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	681b      	ldr	r3, [r3, #0]
 8012872:	681b      	ldr	r3, [r3, #0]
 8012874:	f003 0308 	and.w	r3, r3, #8
 8012878:	2b08      	cmp	r3, #8
 801287a:	d12e      	bne.n	80128da <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 801287c:	687b      	ldr	r3, [r7, #4]
 801287e:	681b      	ldr	r3, [r3, #0]
 8012880:	4618      	mov	r0, r3
 8012882:	f7ff ff2b 	bl	80126dc <LL_ADC_REG_IsConversionOngoing>
 8012886:	4603      	mov	r3, r0
 8012888:	2b00      	cmp	r3, #0
 801288a:	d11a      	bne.n	80128c2 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 801288c:	687b      	ldr	r3, [r7, #4]
 801288e:	681b      	ldr	r3, [r3, #0]
 8012890:	685a      	ldr	r2, [r3, #4]
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	681b      	ldr	r3, [r3, #0]
 8012896:	f022 020c 	bic.w	r2, r2, #12
 801289a:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 801289c:	687b      	ldr	r3, [r7, #4]
 801289e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80128a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80128a4:	687b      	ldr	r3, [r7, #4]
 80128a6:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80128a8:	687b      	ldr	r3, [r7, #4]
 80128aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80128ac:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80128b0:	2b00      	cmp	r3, #0
 80128b2:	d112      	bne.n	80128da <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80128b4:	687b      	ldr	r3, [r7, #4]
 80128b6:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80128b8:	f043 0201 	orr.w	r2, r3, #1
 80128bc:	687b      	ldr	r3, [r7, #4]
 80128be:	65da      	str	r2, [r3, #92]	@ 0x5c
 80128c0:	e00b      	b.n	80128da <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80128c2:	687b      	ldr	r3, [r7, #4]
 80128c4:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80128c6:	f043 0210 	orr.w	r2, r3, #16
 80128ca:	687b      	ldr	r3, [r7, #4]
 80128cc:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80128ce:	687b      	ldr	r3, [r7, #4]
 80128d0:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80128d2:	f043 0201 	orr.w	r2, r3, #1
 80128d6:	687b      	ldr	r3, [r7, #4]
 80128d8:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80128da:	6878      	ldr	r0, [r7, #4]
 80128dc:	f000 f95c 	bl	8012b98 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80128e0:	687b      	ldr	r3, [r7, #4]
 80128e2:	681b      	ldr	r3, [r3, #0]
 80128e4:	220c      	movs	r2, #12
 80128e6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80128e8:	69fb      	ldr	r3, [r7, #28]
 80128ea:	f003 0320 	and.w	r3, r3, #32
 80128ee:	2b00      	cmp	r3, #0
 80128f0:	d004      	beq.n	80128fc <HAL_ADC_IRQHandler+0x1d4>
 80128f2:	69bb      	ldr	r3, [r7, #24]
 80128f4:	f003 0320 	and.w	r3, r3, #32
 80128f8:	2b00      	cmp	r3, #0
 80128fa:	d10b      	bne.n	8012914 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 80128fc:	69fb      	ldr	r3, [r7, #28]
 80128fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8012902:	2b00      	cmp	r3, #0
 8012904:	f000 80a0 	beq.w	8012a48 <HAL_ADC_IRQHandler+0x320>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8012908:	69bb      	ldr	r3, [r7, #24]
 801290a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801290e:	2b00      	cmp	r3, #0
 8012910:	f000 809a 	beq.w	8012a48 <HAL_ADC_IRQHandler+0x320>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8012914:	687b      	ldr	r3, [r7, #4]
 8012916:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012918:	f003 0310 	and.w	r3, r3, #16
 801291c:	2b00      	cmp	r3, #0
 801291e:	d105      	bne.n	801292c <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8012920:	687b      	ldr	r3, [r7, #4]
 8012922:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012924:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 8012928:	687b      	ldr	r3, [r7, #4]
 801292a:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 801292c:	687b      	ldr	r3, [r7, #4]
 801292e:	681b      	ldr	r3, [r3, #0]
 8012930:	4618      	mov	r0, r3
 8012932:	f7ff fea4 	bl	801267e <LL_ADC_INJ_IsTriggerSourceSWStart>
 8012936:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8012938:	687b      	ldr	r3, [r7, #4]
 801293a:	681b      	ldr	r3, [r3, #0]
 801293c:	4618      	mov	r0, r3
 801293e:	f7ff fe8b 	bl	8012658 <LL_ADC_REG_IsTriggerSourceSWStart>
 8012942:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8012944:	687b      	ldr	r3, [r7, #4]
 8012946:	681b      	ldr	r3, [r3, #0]
 8012948:	4a11      	ldr	r2, [pc, #68]	@ (8012990 <HAL_ADC_IRQHandler+0x268>)
 801294a:	4293      	cmp	r3, r2
 801294c:	d002      	beq.n	8012954 <HAL_ADC_IRQHandler+0x22c>
 801294e:	687b      	ldr	r3, [r7, #4]
 8012950:	681b      	ldr	r3, [r3, #0]
 8012952:	e001      	b.n	8012958 <HAL_ADC_IRQHandler+0x230>
 8012954:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8012958:	687a      	ldr	r2, [r7, #4]
 801295a:	6812      	ldr	r2, [r2, #0]
 801295c:	4293      	cmp	r3, r2
 801295e:	d008      	beq.n	8012972 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8012960:	697b      	ldr	r3, [r7, #20]
 8012962:	2b00      	cmp	r3, #0
 8012964:	d005      	beq.n	8012972 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8012966:	697b      	ldr	r3, [r7, #20]
 8012968:	2b06      	cmp	r3, #6
 801296a:	d002      	beq.n	8012972 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 801296c:	697b      	ldr	r3, [r7, #20]
 801296e:	2b07      	cmp	r3, #7
 8012970:	d104      	bne.n	801297c <HAL_ADC_IRQHandler+0x254>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8012972:	687b      	ldr	r3, [r7, #4]
 8012974:	681b      	ldr	r3, [r3, #0]
 8012976:	68db      	ldr	r3, [r3, #12]
 8012978:	623b      	str	r3, [r7, #32]
 801297a:	e013      	b.n	80129a4 <HAL_ADC_IRQHandler+0x27c>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 801297c:	687b      	ldr	r3, [r7, #4]
 801297e:	681b      	ldr	r3, [r3, #0]
 8012980:	4a03      	ldr	r2, [pc, #12]	@ (8012990 <HAL_ADC_IRQHandler+0x268>)
 8012982:	4293      	cmp	r3, r2
 8012984:	d008      	beq.n	8012998 <HAL_ADC_IRQHandler+0x270>
 8012986:	687b      	ldr	r3, [r7, #4]
 8012988:	681b      	ldr	r3, [r3, #0]
 801298a:	e007      	b.n	801299c <HAL_ADC_IRQHandler+0x274>
 801298c:	50000300 	.word	0x50000300
 8012990:	50000100 	.word	0x50000100
 8012994:	0801abac 	.word	0x0801abac
 8012998:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 801299c:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 801299e:	693b      	ldr	r3, [r7, #16]
 80129a0:	68db      	ldr	r3, [r3, #12]
 80129a2:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80129a4:	68fb      	ldr	r3, [r7, #12]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d047      	beq.n	8012a3a <HAL_ADC_IRQHandler+0x312>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80129aa:	6a3b      	ldr	r3, [r7, #32]
 80129ac:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80129b0:	2b00      	cmp	r3, #0
 80129b2:	d007      	beq.n	80129c4 <HAL_ADC_IRQHandler+0x29c>
 80129b4:	68bb      	ldr	r3, [r7, #8]
 80129b6:	2b00      	cmp	r3, #0
 80129b8:	d03f      	beq.n	8012a3a <HAL_ADC_IRQHandler+0x312>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80129ba:	6a3b      	ldr	r3, [r7, #32]
 80129bc:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80129c0:	2b00      	cmp	r3, #0
 80129c2:	d13a      	bne.n	8012a3a <HAL_ADC_IRQHandler+0x312>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	681b      	ldr	r3, [r3, #0]
 80129c8:	681b      	ldr	r3, [r3, #0]
 80129ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80129ce:	2b40      	cmp	r3, #64	@ 0x40
 80129d0:	d133      	bne.n	8012a3a <HAL_ADC_IRQHandler+0x312>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80129d2:	6a3b      	ldr	r3, [r7, #32]
 80129d4:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80129d8:	2b00      	cmp	r3, #0
 80129da:	d12e      	bne.n	8012a3a <HAL_ADC_IRQHandler+0x312>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80129dc:	687b      	ldr	r3, [r7, #4]
 80129de:	681b      	ldr	r3, [r3, #0]
 80129e0:	4618      	mov	r0, r3
 80129e2:	f7ff fe8e 	bl	8012702 <LL_ADC_INJ_IsConversionOngoing>
 80129e6:	4603      	mov	r3, r0
 80129e8:	2b00      	cmp	r3, #0
 80129ea:	d11a      	bne.n	8012a22 <HAL_ADC_IRQHandler+0x2fa>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80129ec:	687b      	ldr	r3, [r7, #4]
 80129ee:	681b      	ldr	r3, [r3, #0]
 80129f0:	685a      	ldr	r2, [r3, #4]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	681b      	ldr	r3, [r3, #0]
 80129f6:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80129fa:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012a00:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8012a04:	687b      	ldr	r3, [r7, #4]
 8012a06:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8012a08:	687b      	ldr	r3, [r7, #4]
 8012a0a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012a0c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a10:	2b00      	cmp	r3, #0
 8012a12:	d112      	bne.n	8012a3a <HAL_ADC_IRQHandler+0x312>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012a18:	f043 0201 	orr.w	r2, r3, #1
 8012a1c:	687b      	ldr	r3, [r7, #4]
 8012a1e:	65da      	str	r2, [r3, #92]	@ 0x5c
 8012a20:	e00b      	b.n	8012a3a <HAL_ADC_IRQHandler+0x312>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8012a22:	687b      	ldr	r3, [r7, #4]
 8012a24:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012a26:	f043 0210 	orr.w	r2, r3, #16
 8012a2a:	687b      	ldr	r3, [r7, #4]
 8012a2c:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8012a2e:	687b      	ldr	r3, [r7, #4]
 8012a30:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012a32:	f043 0201 	orr.w	r2, r3, #1
 8012a36:	687b      	ldr	r3, [r7, #4]
 8012a38:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8012a3a:	6878      	ldr	r0, [r7, #4]
 8012a3c:	f000 f8ca 	bl	8012bd4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8012a40:	687b      	ldr	r3, [r7, #4]
 8012a42:	681b      	ldr	r3, [r3, #0]
 8012a44:	2260      	movs	r2, #96	@ 0x60
 8012a46:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8012a48:	69fb      	ldr	r3, [r7, #28]
 8012a4a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012a4e:	2b00      	cmp	r3, #0
 8012a50:	d011      	beq.n	8012a76 <HAL_ADC_IRQHandler+0x34e>
 8012a52:	69bb      	ldr	r3, [r7, #24]
 8012a54:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8012a58:	2b00      	cmp	r3, #0
 8012a5a:	d00c      	beq.n	8012a76 <HAL_ADC_IRQHandler+0x34e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8012a5c:	687b      	ldr	r3, [r7, #4]
 8012a5e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012a60:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8012a64:	687b      	ldr	r3, [r7, #4]
 8012a66:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8012a68:	6878      	ldr	r0, [r7, #4]
 8012a6a:	f000 f89f 	bl	8012bac <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8012a6e:	687b      	ldr	r3, [r7, #4]
 8012a70:	681b      	ldr	r3, [r3, #0]
 8012a72:	2280      	movs	r2, #128	@ 0x80
 8012a74:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8012a76:	69fb      	ldr	r3, [r7, #28]
 8012a78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a7c:	2b00      	cmp	r3, #0
 8012a7e:	d012      	beq.n	8012aa6 <HAL_ADC_IRQHandler+0x37e>
 8012a80:	69bb      	ldr	r3, [r7, #24]
 8012a82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8012a86:	2b00      	cmp	r3, #0
 8012a88:	d00d      	beq.n	8012aa6 <HAL_ADC_IRQHandler+0x37e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8012a8a:	687b      	ldr	r3, [r7, #4]
 8012a8c:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012a8e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8012a92:	687b      	ldr	r3, [r7, #4]
 8012a94:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8012a96:	6878      	ldr	r0, [r7, #4]
 8012a98:	f000 f8b0 	bl	8012bfc <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8012a9c:	687b      	ldr	r3, [r7, #4]
 8012a9e:	681b      	ldr	r3, [r3, #0]
 8012aa0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8012aa4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8012aa6:	69fb      	ldr	r3, [r7, #28]
 8012aa8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012aac:	2b00      	cmp	r3, #0
 8012aae:	d012      	beq.n	8012ad6 <HAL_ADC_IRQHandler+0x3ae>
 8012ab0:	69bb      	ldr	r3, [r7, #24]
 8012ab2:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8012ab6:	2b00      	cmp	r3, #0
 8012ab8:	d00d      	beq.n	8012ad6 <HAL_ADC_IRQHandler+0x3ae>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8012aba:	687b      	ldr	r3, [r7, #4]
 8012abc:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012abe:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8012ac6:	6878      	ldr	r0, [r7, #4]
 8012ac8:	f000 f8a2 	bl	8012c10 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8012acc:	687b      	ldr	r3, [r7, #4]
 8012ace:	681b      	ldr	r3, [r3, #0]
 8012ad0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8012ad4:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8012ad6:	69fb      	ldr	r3, [r7, #28]
 8012ad8:	f003 0310 	and.w	r3, r3, #16
 8012adc:	2b00      	cmp	r3, #0
 8012ade:	d036      	beq.n	8012b4e <HAL_ADC_IRQHandler+0x426>
 8012ae0:	69bb      	ldr	r3, [r7, #24]
 8012ae2:	f003 0310 	and.w	r3, r3, #16
 8012ae6:	2b00      	cmp	r3, #0
 8012ae8:	d031      	beq.n	8012b4e <HAL_ADC_IRQHandler+0x426>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8012aea:	687b      	ldr	r3, [r7, #4]
 8012aec:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8012aee:	2b00      	cmp	r3, #0
 8012af0:	d102      	bne.n	8012af8 <HAL_ADC_IRQHandler+0x3d0>
    {
      overrun_error = 1UL;
 8012af2:	2301      	movs	r3, #1
 8012af4:	627b      	str	r3, [r7, #36]	@ 0x24
 8012af6:	e014      	b.n	8012b22 <HAL_ADC_IRQHandler+0x3fa>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8012af8:	697b      	ldr	r3, [r7, #20]
 8012afa:	2b00      	cmp	r3, #0
 8012afc:	d008      	beq.n	8012b10 <HAL_ADC_IRQHandler+0x3e8>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8012afe:	4825      	ldr	r0, [pc, #148]	@ (8012b94 <HAL_ADC_IRQHandler+0x46c>)
 8012b00:	f7ff fdde 	bl	80126c0 <LL_ADC_GetMultiDMATransfer>
 8012b04:	4603      	mov	r3, r0
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d00b      	beq.n	8012b22 <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 8012b0a:	2301      	movs	r3, #1
 8012b0c:	627b      	str	r3, [r7, #36]	@ 0x24
 8012b0e:	e008      	b.n	8012b22 <HAL_ADC_IRQHandler+0x3fa>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8012b10:	687b      	ldr	r3, [r7, #4]
 8012b12:	681b      	ldr	r3, [r3, #0]
 8012b14:	68db      	ldr	r3, [r3, #12]
 8012b16:	f003 0301 	and.w	r3, r3, #1
 8012b1a:	2b00      	cmp	r3, #0
 8012b1c:	d001      	beq.n	8012b22 <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 8012b1e:	2301      	movs	r3, #1
 8012b20:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8012b22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8012b24:	2b01      	cmp	r3, #1
 8012b26:	d10e      	bne.n	8012b46 <HAL_ADC_IRQHandler+0x41e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8012b28:	687b      	ldr	r3, [r7, #4]
 8012b2a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012b2c:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8012b30:	687b      	ldr	r3, [r7, #4]
 8012b32:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8012b34:	687b      	ldr	r3, [r7, #4]
 8012b36:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012b38:	f043 0202 	orr.w	r2, r3, #2
 8012b3c:	687b      	ldr	r3, [r7, #4]
 8012b3e:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8012b40:	6878      	ldr	r0, [r7, #4]
 8012b42:	f000 f83d 	bl	8012bc0 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8012b46:	687b      	ldr	r3, [r7, #4]
 8012b48:	681b      	ldr	r3, [r3, #0]
 8012b4a:	2210      	movs	r2, #16
 8012b4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8012b4e:	69fb      	ldr	r3, [r7, #28]
 8012b50:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012b54:	2b00      	cmp	r3, #0
 8012b56:	d018      	beq.n	8012b8a <HAL_ADC_IRQHandler+0x462>
 8012b58:	69bb      	ldr	r3, [r7, #24]
 8012b5a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8012b5e:	2b00      	cmp	r3, #0
 8012b60:	d013      	beq.n	8012b8a <HAL_ADC_IRQHandler+0x462>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8012b62:	687b      	ldr	r3, [r7, #4]
 8012b64:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8012b66:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 8012b6a:	687b      	ldr	r3, [r7, #4]
 8012b6c:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8012b6e:	687b      	ldr	r3, [r7, #4]
 8012b70:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8012b72:	f043 0208 	orr.w	r2, r3, #8
 8012b76:	687b      	ldr	r3, [r7, #4]
 8012b78:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8012b7a:	687b      	ldr	r3, [r7, #4]
 8012b7c:	681b      	ldr	r3, [r3, #0]
 8012b7e:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8012b82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8012b84:	6878      	ldr	r0, [r7, #4]
 8012b86:	f000 f82f 	bl	8012be8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8012b8a:	bf00      	nop
 8012b8c:	3728      	adds	r7, #40	@ 0x28
 8012b8e:	46bd      	mov	sp, r7
 8012b90:	bd80      	pop	{r7, pc}
 8012b92:	bf00      	nop
 8012b94:	50000300 	.word	0x50000300

08012b98 <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8012b98:	b480      	push	{r7}
 8012b9a:	b083      	sub	sp, #12
 8012b9c:	af00      	add	r7, sp, #0
 8012b9e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 8012ba0:	bf00      	nop
 8012ba2:	370c      	adds	r7, #12
 8012ba4:	46bd      	mov	sp, r7
 8012ba6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012baa:	4770      	bx	lr

08012bac <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8012bac:	b480      	push	{r7}
 8012bae:	b083      	sub	sp, #12
 8012bb0:	af00      	add	r7, sp, #0
 8012bb2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8012bb4:	bf00      	nop
 8012bb6:	370c      	adds	r7, #12
 8012bb8:	46bd      	mov	sp, r7
 8012bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bbe:	4770      	bx	lr

08012bc0 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8012bc0:	b480      	push	{r7}
 8012bc2:	b083      	sub	sp, #12
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8012bc8:	bf00      	nop
 8012bca:	370c      	adds	r7, #12
 8012bcc:	46bd      	mov	sp, r7
 8012bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bd2:	4770      	bx	lr

08012bd4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8012bd4:	b480      	push	{r7}
 8012bd6:	b083      	sub	sp, #12
 8012bd8:	af00      	add	r7, sp, #0
 8012bda:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 8012bdc:	bf00      	nop
 8012bde:	370c      	adds	r7, #12
 8012be0:	46bd      	mov	sp, r7
 8012be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012be6:	4770      	bx	lr

08012be8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 8012be8:	b480      	push	{r7}
 8012bea:	b083      	sub	sp, #12
 8012bec:	af00      	add	r7, sp, #0
 8012bee:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8012bf0:	bf00      	nop
 8012bf2:	370c      	adds	r7, #12
 8012bf4:	46bd      	mov	sp, r7
 8012bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012bfa:	4770      	bx	lr

08012bfc <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8012bfc:	b480      	push	{r7}
 8012bfe:	b083      	sub	sp, #12
 8012c00:	af00      	add	r7, sp, #0
 8012c02:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8012c04:	bf00      	nop
 8012c06:	370c      	adds	r7, #12
 8012c08:	46bd      	mov	sp, r7
 8012c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c0e:	4770      	bx	lr

08012c10 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8012c10:	b480      	push	{r7}
 8012c12:	b083      	sub	sp, #12
 8012c14:	af00      	add	r7, sp, #0
 8012c16:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8012c18:	bf00      	nop
 8012c1a:	370c      	adds	r7, #12
 8012c1c:	46bd      	mov	sp, r7
 8012c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c22:	4770      	bx	lr

08012c24 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8012c24:	b480      	push	{r7}
 8012c26:	b083      	sub	sp, #12
 8012c28:	af00      	add	r7, sp, #0
 8012c2a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8012c2c:	bf00      	nop
 8012c2e:	370c      	adds	r7, #12
 8012c30:	46bd      	mov	sp, r7
 8012c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c36:	4770      	bx	lr

08012c38 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012c38:	b480      	push	{r7}
 8012c3a:	b085      	sub	sp, #20
 8012c3c:	af00      	add	r7, sp, #0
 8012c3e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8012c40:	687b      	ldr	r3, [r7, #4]
 8012c42:	f003 0307 	and.w	r3, r3, #7
 8012c46:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8012c48:	4b0c      	ldr	r3, [pc, #48]	@ (8012c7c <__NVIC_SetPriorityGrouping+0x44>)
 8012c4a:	68db      	ldr	r3, [r3, #12]
 8012c4c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8012c4e:	68ba      	ldr	r2, [r7, #8]
 8012c50:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8012c54:	4013      	ands	r3, r2
 8012c56:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8012c58:	68fb      	ldr	r3, [r7, #12]
 8012c5a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8012c5c:	68bb      	ldr	r3, [r7, #8]
 8012c5e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8012c60:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8012c64:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8012c68:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8012c6a:	4a04      	ldr	r2, [pc, #16]	@ (8012c7c <__NVIC_SetPriorityGrouping+0x44>)
 8012c6c:	68bb      	ldr	r3, [r7, #8]
 8012c6e:	60d3      	str	r3, [r2, #12]
}
 8012c70:	bf00      	nop
 8012c72:	3714      	adds	r7, #20
 8012c74:	46bd      	mov	sp, r7
 8012c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c7a:	4770      	bx	lr
 8012c7c:	e000ed00 	.word	0xe000ed00

08012c80 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8012c80:	b480      	push	{r7}
 8012c82:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8012c84:	4b04      	ldr	r3, [pc, #16]	@ (8012c98 <__NVIC_GetPriorityGrouping+0x18>)
 8012c86:	68db      	ldr	r3, [r3, #12]
 8012c88:	0a1b      	lsrs	r3, r3, #8
 8012c8a:	f003 0307 	and.w	r3, r3, #7
}
 8012c8e:	4618      	mov	r0, r3
 8012c90:	46bd      	mov	sp, r7
 8012c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012c96:	4770      	bx	lr
 8012c98:	e000ed00 	.word	0xe000ed00

08012c9c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012c9c:	b480      	push	{r7}
 8012c9e:	b083      	sub	sp, #12
 8012ca0:	af00      	add	r7, sp, #0
 8012ca2:	4603      	mov	r3, r0
 8012ca4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012ca6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012caa:	2b00      	cmp	r3, #0
 8012cac:	db0b      	blt.n	8012cc6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8012cae:	79fb      	ldrb	r3, [r7, #7]
 8012cb0:	f003 021f 	and.w	r2, r3, #31
 8012cb4:	4907      	ldr	r1, [pc, #28]	@ (8012cd4 <__NVIC_EnableIRQ+0x38>)
 8012cb6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cba:	095b      	lsrs	r3, r3, #5
 8012cbc:	2001      	movs	r0, #1
 8012cbe:	fa00 f202 	lsl.w	r2, r0, r2
 8012cc2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8012cc6:	bf00      	nop
 8012cc8:	370c      	adds	r7, #12
 8012cca:	46bd      	mov	sp, r7
 8012ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012cd0:	4770      	bx	lr
 8012cd2:	bf00      	nop
 8012cd4:	e000e100 	.word	0xe000e100

08012cd8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8012cd8:	b480      	push	{r7}
 8012cda:	b083      	sub	sp, #12
 8012cdc:	af00      	add	r7, sp, #0
 8012cde:	4603      	mov	r3, r0
 8012ce0:	6039      	str	r1, [r7, #0]
 8012ce2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8012ce4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012ce8:	2b00      	cmp	r3, #0
 8012cea:	db0a      	blt.n	8012d02 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012cec:	683b      	ldr	r3, [r7, #0]
 8012cee:	b2da      	uxtb	r2, r3
 8012cf0:	490c      	ldr	r1, [pc, #48]	@ (8012d24 <__NVIC_SetPriority+0x4c>)
 8012cf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012cf6:	0112      	lsls	r2, r2, #4
 8012cf8:	b2d2      	uxtb	r2, r2
 8012cfa:	440b      	add	r3, r1
 8012cfc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8012d00:	e00a      	b.n	8012d18 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8012d02:	683b      	ldr	r3, [r7, #0]
 8012d04:	b2da      	uxtb	r2, r3
 8012d06:	4908      	ldr	r1, [pc, #32]	@ (8012d28 <__NVIC_SetPriority+0x50>)
 8012d08:	79fb      	ldrb	r3, [r7, #7]
 8012d0a:	f003 030f 	and.w	r3, r3, #15
 8012d0e:	3b04      	subs	r3, #4
 8012d10:	0112      	lsls	r2, r2, #4
 8012d12:	b2d2      	uxtb	r2, r2
 8012d14:	440b      	add	r3, r1
 8012d16:	761a      	strb	r2, [r3, #24]
}
 8012d18:	bf00      	nop
 8012d1a:	370c      	adds	r7, #12
 8012d1c:	46bd      	mov	sp, r7
 8012d1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d22:	4770      	bx	lr
 8012d24:	e000e100 	.word	0xe000e100
 8012d28:	e000ed00 	.word	0xe000ed00

08012d2c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012d2c:	b480      	push	{r7}
 8012d2e:	b089      	sub	sp, #36	@ 0x24
 8012d30:	af00      	add	r7, sp, #0
 8012d32:	60f8      	str	r0, [r7, #12]
 8012d34:	60b9      	str	r1, [r7, #8]
 8012d36:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8012d38:	68fb      	ldr	r3, [r7, #12]
 8012d3a:	f003 0307 	and.w	r3, r3, #7
 8012d3e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8012d40:	69fb      	ldr	r3, [r7, #28]
 8012d42:	f1c3 0307 	rsb	r3, r3, #7
 8012d46:	2b04      	cmp	r3, #4
 8012d48:	bf28      	it	cs
 8012d4a:	2304      	movcs	r3, #4
 8012d4c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8012d4e:	69fb      	ldr	r3, [r7, #28]
 8012d50:	3304      	adds	r3, #4
 8012d52:	2b06      	cmp	r3, #6
 8012d54:	d902      	bls.n	8012d5c <NVIC_EncodePriority+0x30>
 8012d56:	69fb      	ldr	r3, [r7, #28]
 8012d58:	3b03      	subs	r3, #3
 8012d5a:	e000      	b.n	8012d5e <NVIC_EncodePriority+0x32>
 8012d5c:	2300      	movs	r3, #0
 8012d5e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d60:	f04f 32ff 	mov.w	r2, #4294967295
 8012d64:	69bb      	ldr	r3, [r7, #24]
 8012d66:	fa02 f303 	lsl.w	r3, r2, r3
 8012d6a:	43da      	mvns	r2, r3
 8012d6c:	68bb      	ldr	r3, [r7, #8]
 8012d6e:	401a      	ands	r2, r3
 8012d70:	697b      	ldr	r3, [r7, #20]
 8012d72:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8012d74:	f04f 31ff 	mov.w	r1, #4294967295
 8012d78:	697b      	ldr	r3, [r7, #20]
 8012d7a:	fa01 f303 	lsl.w	r3, r1, r3
 8012d7e:	43d9      	mvns	r1, r3
 8012d80:	687b      	ldr	r3, [r7, #4]
 8012d82:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8012d84:	4313      	orrs	r3, r2
         );
}
 8012d86:	4618      	mov	r0, r3
 8012d88:	3724      	adds	r7, #36	@ 0x24
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d90:	4770      	bx	lr
	...

08012d94 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8012d94:	b480      	push	{r7}
 8012d96:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8012d98:	f3bf 8f4f 	dsb	sy
}
 8012d9c:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8012d9e:	4b06      	ldr	r3, [pc, #24]	@ (8012db8 <__NVIC_SystemReset+0x24>)
 8012da0:	68db      	ldr	r3, [r3, #12]
 8012da2:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8012da6:	4904      	ldr	r1, [pc, #16]	@ (8012db8 <__NVIC_SystemReset+0x24>)
 8012da8:	4b04      	ldr	r3, [pc, #16]	@ (8012dbc <__NVIC_SystemReset+0x28>)
 8012daa:	4313      	orrs	r3, r2
 8012dac:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8012dae:	f3bf 8f4f 	dsb	sy
}
 8012db2:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8012db4:	bf00      	nop
 8012db6:	e7fd      	b.n	8012db4 <__NVIC_SystemReset+0x20>
 8012db8:	e000ed00 	.word	0xe000ed00
 8012dbc:	05fa0004 	.word	0x05fa0004

08012dc0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8012dc0:	b580      	push	{r7, lr}
 8012dc2:	b082      	sub	sp, #8
 8012dc4:	af00      	add	r7, sp, #0
 8012dc6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8012dc8:	687b      	ldr	r3, [r7, #4]
 8012dca:	2b07      	cmp	r3, #7
 8012dcc:	d00f      	beq.n	8012dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8012dce:	687b      	ldr	r3, [r7, #4]
 8012dd0:	2b06      	cmp	r3, #6
 8012dd2:	d00c      	beq.n	8012dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8012dd4:	687b      	ldr	r3, [r7, #4]
 8012dd6:	2b05      	cmp	r3, #5
 8012dd8:	d009      	beq.n	8012dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	2b04      	cmp	r3, #4
 8012dde:	d006      	beq.n	8012dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	2b03      	cmp	r3, #3
 8012de4:	d003      	beq.n	8012dee <HAL_NVIC_SetPriorityGrouping+0x2e>
 8012de6:	21a6      	movs	r1, #166	@ 0xa6
 8012de8:	4804      	ldr	r0, [pc, #16]	@ (8012dfc <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8012dea:	f7ff f985 	bl	80120f8 <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8012dee:	6878      	ldr	r0, [r7, #4]
 8012df0:	f7ff ff22 	bl	8012c38 <__NVIC_SetPriorityGrouping>
}
 8012df4:	bf00      	nop
 8012df6:	3708      	adds	r7, #8
 8012df8:	46bd      	mov	sp, r7
 8012dfa:	bd80      	pop	{r7, pc}
 8012dfc:	0801abe4 	.word	0x0801abe4

08012e00 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8012e00:	b580      	push	{r7, lr}
 8012e02:	b086      	sub	sp, #24
 8012e04:	af00      	add	r7, sp, #0
 8012e06:	4603      	mov	r3, r0
 8012e08:	60b9      	str	r1, [r7, #8]
 8012e0a:	607a      	str	r2, [r7, #4]
 8012e0c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8012e0e:	687b      	ldr	r3, [r7, #4]
 8012e10:	2b0f      	cmp	r3, #15
 8012e12:	d903      	bls.n	8012e1c <HAL_NVIC_SetPriority+0x1c>
 8012e14:	21be      	movs	r1, #190	@ 0xbe
 8012e16:	480e      	ldr	r0, [pc, #56]	@ (8012e50 <HAL_NVIC_SetPriority+0x50>)
 8012e18:	f7ff f96e 	bl	80120f8 <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8012e1c:	68bb      	ldr	r3, [r7, #8]
 8012e1e:	2b0f      	cmp	r3, #15
 8012e20:	d903      	bls.n	8012e2a <HAL_NVIC_SetPriority+0x2a>
 8012e22:	21bf      	movs	r1, #191	@ 0xbf
 8012e24:	480a      	ldr	r0, [pc, #40]	@ (8012e50 <HAL_NVIC_SetPriority+0x50>)
 8012e26:	f7ff f967 	bl	80120f8 <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8012e2a:	f7ff ff29 	bl	8012c80 <__NVIC_GetPriorityGrouping>
 8012e2e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8012e30:	687a      	ldr	r2, [r7, #4]
 8012e32:	68b9      	ldr	r1, [r7, #8]
 8012e34:	6978      	ldr	r0, [r7, #20]
 8012e36:	f7ff ff79 	bl	8012d2c <NVIC_EncodePriority>
 8012e3a:	4602      	mov	r2, r0
 8012e3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012e40:	4611      	mov	r1, r2
 8012e42:	4618      	mov	r0, r3
 8012e44:	f7ff ff48 	bl	8012cd8 <__NVIC_SetPriority>
}
 8012e48:	bf00      	nop
 8012e4a:	3718      	adds	r7, #24
 8012e4c:	46bd      	mov	sp, r7
 8012e4e:	bd80      	pop	{r7, pc}
 8012e50:	0801abe4 	.word	0x0801abe4

08012e54 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8012e54:	b580      	push	{r7, lr}
 8012e56:	b082      	sub	sp, #8
 8012e58:	af00      	add	r7, sp, #0
 8012e5a:	4603      	mov	r3, r0
 8012e5c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8012e5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e62:	2b00      	cmp	r3, #0
 8012e64:	da03      	bge.n	8012e6e <HAL_NVIC_EnableIRQ+0x1a>
 8012e66:	21d2      	movs	r1, #210	@ 0xd2
 8012e68:	4805      	ldr	r0, [pc, #20]	@ (8012e80 <HAL_NVIC_EnableIRQ+0x2c>)
 8012e6a:	f7ff f945 	bl	80120f8 <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8012e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8012e72:	4618      	mov	r0, r3
 8012e74:	f7ff ff12 	bl	8012c9c <__NVIC_EnableIRQ>
}
 8012e78:	bf00      	nop
 8012e7a:	3708      	adds	r7, #8
 8012e7c:	46bd      	mov	sp, r7
 8012e7e:	bd80      	pop	{r7, pc}
 8012e80:	0801abe4 	.word	0x0801abe4

08012e84 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8012e84:	b580      	push	{r7, lr}
 8012e86:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8012e88:	f7ff ff84 	bl	8012d94 <__NVIC_SystemReset>

08012e8c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8012e8c:	b480      	push	{r7}
 8012e8e:	b085      	sub	sp, #20
 8012e90:	af00      	add	r7, sp, #0
 8012e92:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012e94:	2300      	movs	r3, #0
 8012e96:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8012e98:	687b      	ldr	r3, [r7, #4]
 8012e9a:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8012e9e:	b2db      	uxtb	r3, r3
 8012ea0:	2b02      	cmp	r3, #2
 8012ea2:	d005      	beq.n	8012eb0 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012ea4:	687b      	ldr	r3, [r7, #4]
 8012ea6:	2204      	movs	r2, #4
 8012ea8:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8012eaa:	2301      	movs	r3, #1
 8012eac:	73fb      	strb	r3, [r7, #15]
 8012eae:	e037      	b.n	8012f20 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012eb0:	687b      	ldr	r3, [r7, #4]
 8012eb2:	681b      	ldr	r3, [r3, #0]
 8012eb4:	681a      	ldr	r2, [r3, #0]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	681b      	ldr	r3, [r3, #0]
 8012eba:	f022 020e 	bic.w	r2, r2, #14
 8012ebe:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012ec0:	687b      	ldr	r3, [r7, #4]
 8012ec2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012ec4:	681a      	ldr	r2, [r3, #0]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012eca:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012ece:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8012ed0:	687b      	ldr	r3, [r7, #4]
 8012ed2:	681b      	ldr	r3, [r3, #0]
 8012ed4:	681a      	ldr	r2, [r3, #0]
 8012ed6:	687b      	ldr	r3, [r7, #4]
 8012ed8:	681b      	ldr	r3, [r3, #0]
 8012eda:	f022 0201 	bic.w	r2, r2, #1
 8012ede:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012ee0:	687b      	ldr	r3, [r7, #4]
 8012ee2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012ee4:	f003 021f 	and.w	r2, r3, #31
 8012ee8:	687b      	ldr	r3, [r7, #4]
 8012eea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012eec:	2101      	movs	r1, #1
 8012eee:	fa01 f202 	lsl.w	r2, r1, r2
 8012ef2:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012ef4:	687b      	ldr	r3, [r7, #4]
 8012ef6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012ef8:	687a      	ldr	r2, [r7, #4]
 8012efa:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012efc:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8012efe:	687b      	ldr	r3, [r7, #4]
 8012f00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f02:	2b00      	cmp	r3, #0
 8012f04:	d00c      	beq.n	8012f20 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012f06:	687b      	ldr	r3, [r7, #4]
 8012f08:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f0a:	681a      	ldr	r2, [r3, #0]
 8012f0c:	687b      	ldr	r3, [r7, #4]
 8012f0e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012f10:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012f14:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012f16:	687b      	ldr	r3, [r7, #4]
 8012f18:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012f1a:	687a      	ldr	r2, [r7, #4]
 8012f1c:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012f1e:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	2201      	movs	r2, #1
 8012f24:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8012f28:	687b      	ldr	r3, [r7, #4]
 8012f2a:	2200      	movs	r2, #0
 8012f2c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8012f30:	7bfb      	ldrb	r3, [r7, #15]
}
 8012f32:	4618      	mov	r0, r3
 8012f34:	3714      	adds	r7, #20
 8012f36:	46bd      	mov	sp, r7
 8012f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012f3c:	4770      	bx	lr

08012f3e <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8012f3e:	b580      	push	{r7, lr}
 8012f40:	b084      	sub	sp, #16
 8012f42:	af00      	add	r7, sp, #0
 8012f44:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012f46:	2300      	movs	r3, #0
 8012f48:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8012f4a:	687b      	ldr	r3, [r7, #4]
 8012f4c:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8012f50:	b2db      	uxtb	r3, r3
 8012f52:	2b02      	cmp	r3, #2
 8012f54:	d00d      	beq.n	8012f72 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8012f56:	687b      	ldr	r3, [r7, #4]
 8012f58:	2204      	movs	r2, #4
 8012f5a:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012f5c:	687b      	ldr	r3, [r7, #4]
 8012f5e:	2201      	movs	r2, #1
 8012f60:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012f64:	687b      	ldr	r3, [r7, #4]
 8012f66:	2200      	movs	r2, #0
 8012f68:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8012f6c:	2301      	movs	r3, #1
 8012f6e:	73fb      	strb	r3, [r7, #15]
 8012f70:	e047      	b.n	8013002 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8012f72:	687b      	ldr	r3, [r7, #4]
 8012f74:	681b      	ldr	r3, [r3, #0]
 8012f76:	681a      	ldr	r2, [r3, #0]
 8012f78:	687b      	ldr	r3, [r7, #4]
 8012f7a:	681b      	ldr	r3, [r3, #0]
 8012f7c:	f022 020e 	bic.w	r2, r2, #14
 8012f80:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	681a      	ldr	r2, [r3, #0]
 8012f88:	687b      	ldr	r3, [r7, #4]
 8012f8a:	681b      	ldr	r3, [r3, #0]
 8012f8c:	f022 0201 	bic.w	r2, r2, #1
 8012f90:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8012f92:	687b      	ldr	r3, [r7, #4]
 8012f94:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f96:	681a      	ldr	r2, [r3, #0]
 8012f98:	687b      	ldr	r3, [r7, #4]
 8012f9a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8012f9c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8012fa2:	687b      	ldr	r3, [r7, #4]
 8012fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8012fa6:	f003 021f 	and.w	r2, r3, #31
 8012faa:	687b      	ldr	r3, [r7, #4]
 8012fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8012fae:	2101      	movs	r1, #1
 8012fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8012fb4:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8012fb6:	687b      	ldr	r3, [r7, #4]
 8012fb8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012fba:	687a      	ldr	r2, [r7, #4]
 8012fbc:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8012fbe:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8012fc0:	687b      	ldr	r3, [r7, #4]
 8012fc2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fc4:	2b00      	cmp	r3, #0
 8012fc6:	d00c      	beq.n	8012fe2 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8012fc8:	687b      	ldr	r3, [r7, #4]
 8012fca:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fcc:	681a      	ldr	r2, [r3, #0]
 8012fce:	687b      	ldr	r3, [r7, #4]
 8012fd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8012fd2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8012fd6:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8012fd8:	687b      	ldr	r3, [r7, #4]
 8012fda:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8012fdc:	687a      	ldr	r2, [r7, #4]
 8012fde:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8012fe0:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8012fe2:	687b      	ldr	r3, [r7, #4]
 8012fe4:	2201      	movs	r2, #1
 8012fe6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8012fea:	687b      	ldr	r3, [r7, #4]
 8012fec:	2200      	movs	r2, #0
 8012fee:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8012ff2:	687b      	ldr	r3, [r7, #4]
 8012ff4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d003      	beq.n	8013002 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8012ffa:	687b      	ldr	r3, [r7, #4]
 8012ffc:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8012ffe:	6878      	ldr	r0, [r7, #4]
 8013000:	4798      	blx	r3
    }
  }
  return status;
 8013002:	7bfb      	ldrb	r3, [r7, #15]
}
 8013004:	4618      	mov	r0, r3
 8013006:	3710      	adds	r7, #16
 8013008:	46bd      	mov	sp, r7
 801300a:	bd80      	pop	{r7, pc}

0801300c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 801300c:	b580      	push	{r7, lr}
 801300e:	b084      	sub	sp, #16
 8013010:	af00      	add	r7, sp, #0
 8013012:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8013014:	687b      	ldr	r3, [r7, #4]
 8013016:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013018:	681b      	ldr	r3, [r3, #0]
 801301a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 801301c:	687b      	ldr	r3, [r7, #4]
 801301e:	681b      	ldr	r3, [r3, #0]
 8013020:	681b      	ldr	r3, [r3, #0]
 8013022:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8013024:	687b      	ldr	r3, [r7, #4]
 8013026:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013028:	f003 031f 	and.w	r3, r3, #31
 801302c:	2204      	movs	r2, #4
 801302e:	409a      	lsls	r2, r3
 8013030:	68fb      	ldr	r3, [r7, #12]
 8013032:	4013      	ands	r3, r2
 8013034:	2b00      	cmp	r3, #0
 8013036:	d026      	beq.n	8013086 <HAL_DMA_IRQHandler+0x7a>
 8013038:	68bb      	ldr	r3, [r7, #8]
 801303a:	f003 0304 	and.w	r3, r3, #4
 801303e:	2b00      	cmp	r3, #0
 8013040:	d021      	beq.n	8013086 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8013042:	687b      	ldr	r3, [r7, #4]
 8013044:	681b      	ldr	r3, [r3, #0]
 8013046:	681b      	ldr	r3, [r3, #0]
 8013048:	f003 0320 	and.w	r3, r3, #32
 801304c:	2b00      	cmp	r3, #0
 801304e:	d107      	bne.n	8013060 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	681b      	ldr	r3, [r3, #0]
 8013054:	681a      	ldr	r2, [r3, #0]
 8013056:	687b      	ldr	r3, [r7, #4]
 8013058:	681b      	ldr	r3, [r3, #0]
 801305a:	f022 0204 	bic.w	r2, r2, #4
 801305e:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8013060:	687b      	ldr	r3, [r7, #4]
 8013062:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8013064:	f003 021f 	and.w	r2, r3, #31
 8013068:	687b      	ldr	r3, [r7, #4]
 801306a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 801306c:	2104      	movs	r1, #4
 801306e:	fa01 f202 	lsl.w	r2, r1, r2
 8013072:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8013074:	687b      	ldr	r3, [r7, #4]
 8013076:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013078:	2b00      	cmp	r3, #0
 801307a:	d071      	beq.n	8013160 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 801307c:	687b      	ldr	r3, [r7, #4]
 801307e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8013080:	6878      	ldr	r0, [r7, #4]
 8013082:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8013084:	e06c      	b.n	8013160 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8013086:	687b      	ldr	r3, [r7, #4]
 8013088:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801308a:	f003 031f 	and.w	r3, r3, #31
 801308e:	2202      	movs	r2, #2
 8013090:	409a      	lsls	r2, r3
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	4013      	ands	r3, r2
 8013096:	2b00      	cmp	r3, #0
 8013098:	d02e      	beq.n	80130f8 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 801309a:	68bb      	ldr	r3, [r7, #8]
 801309c:	f003 0302 	and.w	r3, r3, #2
 80130a0:	2b00      	cmp	r3, #0
 80130a2:	d029      	beq.n	80130f8 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80130a4:	687b      	ldr	r3, [r7, #4]
 80130a6:	681b      	ldr	r3, [r3, #0]
 80130a8:	681b      	ldr	r3, [r3, #0]
 80130aa:	f003 0320 	and.w	r3, r3, #32
 80130ae:	2b00      	cmp	r3, #0
 80130b0:	d10b      	bne.n	80130ca <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80130b2:	687b      	ldr	r3, [r7, #4]
 80130b4:	681b      	ldr	r3, [r3, #0]
 80130b6:	681a      	ldr	r2, [r3, #0]
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	681b      	ldr	r3, [r3, #0]
 80130bc:	f022 020a 	bic.w	r2, r2, #10
 80130c0:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	2201      	movs	r2, #1
 80130c6:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80130ca:	687b      	ldr	r3, [r7, #4]
 80130cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130ce:	f003 021f 	and.w	r2, r3, #31
 80130d2:	687b      	ldr	r3, [r7, #4]
 80130d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80130d6:	2102      	movs	r1, #2
 80130d8:	fa01 f202 	lsl.w	r2, r1, r2
 80130dc:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80130de:	687b      	ldr	r3, [r7, #4]
 80130e0:	2200      	movs	r2, #0
 80130e2:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 80130e6:	687b      	ldr	r3, [r7, #4]
 80130e8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130ea:	2b00      	cmp	r3, #0
 80130ec:	d038      	beq.n	8013160 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80130ee:	687b      	ldr	r3, [r7, #4]
 80130f0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80130f2:	6878      	ldr	r0, [r7, #4]
 80130f4:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 80130f6:	e033      	b.n	8013160 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 80130f8:	687b      	ldr	r3, [r7, #4]
 80130fa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80130fc:	f003 031f 	and.w	r3, r3, #31
 8013100:	2208      	movs	r2, #8
 8013102:	409a      	lsls	r2, r3
 8013104:	68fb      	ldr	r3, [r7, #12]
 8013106:	4013      	ands	r3, r2
 8013108:	2b00      	cmp	r3, #0
 801310a:	d02a      	beq.n	8013162 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 801310c:	68bb      	ldr	r3, [r7, #8]
 801310e:	f003 0308 	and.w	r3, r3, #8
 8013112:	2b00      	cmp	r3, #0
 8013114:	d025      	beq.n	8013162 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8013116:	687b      	ldr	r3, [r7, #4]
 8013118:	681b      	ldr	r3, [r3, #0]
 801311a:	681a      	ldr	r2, [r3, #0]
 801311c:	687b      	ldr	r3, [r7, #4]
 801311e:	681b      	ldr	r3, [r3, #0]
 8013120:	f022 020e 	bic.w	r2, r2, #14
 8013124:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8013126:	687b      	ldr	r3, [r7, #4]
 8013128:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 801312a:	f003 021f 	and.w	r2, r3, #31
 801312e:	687b      	ldr	r3, [r7, #4]
 8013130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8013132:	2101      	movs	r1, #1
 8013134:	fa01 f202 	lsl.w	r2, r1, r2
 8013138:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 801313a:	687b      	ldr	r3, [r7, #4]
 801313c:	2201      	movs	r2, #1
 801313e:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8013140:	687b      	ldr	r3, [r7, #4]
 8013142:	2201      	movs	r2, #1
 8013144:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8013148:	687b      	ldr	r3, [r7, #4]
 801314a:	2200      	movs	r2, #0
 801314c:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8013150:	687b      	ldr	r3, [r7, #4]
 8013152:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8013154:	2b00      	cmp	r3, #0
 8013156:	d004      	beq.n	8013162 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801315c:	6878      	ldr	r0, [r7, #4]
 801315e:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8013160:	bf00      	nop
 8013162:	bf00      	nop
}
 8013164:	3710      	adds	r7, #16
 8013166:	46bd      	mov	sp, r7
 8013168:	bd80      	pop	{r7, pc}
	...

0801316c <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 801316c:	b580      	push	{r7, lr}
 801316e:	b086      	sub	sp, #24
 8013170:	af00      	add	r7, sp, #0
 8013172:	60f8      	str	r0, [r7, #12]
 8013174:	60b9      	str	r1, [r7, #8]
 8013176:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 801317a:	2300      	movs	r3, #0
 801317c:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 801317e:	68fb      	ldr	r3, [r7, #12]
 8013180:	2b00      	cmp	r3, #0
 8013182:	d009      	beq.n	8013198 <HAL_FLASH_Program+0x2c>
 8013184:	68fb      	ldr	r3, [r7, #12]
 8013186:	2b01      	cmp	r3, #1
 8013188:	d006      	beq.n	8013198 <HAL_FLASH_Program+0x2c>
 801318a:	68fb      	ldr	r3, [r7, #12]
 801318c:	2b02      	cmp	r3, #2
 801318e:	d003      	beq.n	8013198 <HAL_FLASH_Program+0x2c>
 8013190:	21b3      	movs	r1, #179	@ 0xb3
 8013192:	4830      	ldr	r0, [pc, #192]	@ (8013254 <HAL_FLASH_Program+0xe8>)
 8013194:	f7fe ffb0 	bl	80120f8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013198:	4b2f      	ldr	r3, [pc, #188]	@ (8013258 <HAL_FLASH_Program+0xec>)
 801319a:	781b      	ldrb	r3, [r3, #0]
 801319c:	2b01      	cmp	r3, #1
 801319e:	d101      	bne.n	80131a4 <HAL_FLASH_Program+0x38>
 80131a0:	2302      	movs	r3, #2
 80131a2:	e053      	b.n	801324c <HAL_FLASH_Program+0xe0>
 80131a4:	4b2c      	ldr	r3, [pc, #176]	@ (8013258 <HAL_FLASH_Program+0xec>)
 80131a6:	2201      	movs	r2, #1
 80131a8:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80131aa:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80131ae:	f000 f893 	bl	80132d8 <FLASH_WaitForLastOperation>
 80131b2:	4603      	mov	r3, r0
 80131b4:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 80131b6:	7dfb      	ldrb	r3, [r7, #23]
 80131b8:	2b00      	cmp	r3, #0
 80131ba:	d143      	bne.n	8013244 <HAL_FLASH_Program+0xd8>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 80131bc:	4b26      	ldr	r3, [pc, #152]	@ (8013258 <HAL_FLASH_Program+0xec>)
 80131be:	2200      	movs	r2, #0
 80131c0:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80131c2:	4b26      	ldr	r3, [pc, #152]	@ (801325c <HAL_FLASH_Program+0xf0>)
 80131c4:	681b      	ldr	r3, [r3, #0]
 80131c6:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d009      	beq.n	80131e2 <HAL_FLASH_Program+0x76>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80131ce:	4b23      	ldr	r3, [pc, #140]	@ (801325c <HAL_FLASH_Program+0xf0>)
 80131d0:	681b      	ldr	r3, [r3, #0]
 80131d2:	4a22      	ldr	r2, [pc, #136]	@ (801325c <HAL_FLASH_Program+0xf0>)
 80131d4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80131d8:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80131da:	4b1f      	ldr	r3, [pc, #124]	@ (8013258 <HAL_FLASH_Program+0xec>)
 80131dc:	2202      	movs	r2, #2
 80131de:	771a      	strb	r2, [r3, #28]
 80131e0:	e002      	b.n	80131e8 <HAL_FLASH_Program+0x7c>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80131e2:	4b1d      	ldr	r3, [pc, #116]	@ (8013258 <HAL_FLASH_Program+0xec>)
 80131e4:	2200      	movs	r2, #0
 80131e6:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 80131e8:	68fb      	ldr	r3, [r7, #12]
 80131ea:	2b00      	cmp	r3, #0
 80131ec:	d107      	bne.n	80131fe <HAL_FLASH_Program+0x92>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 80131ee:	e9d7 2300 	ldrd	r2, r3, [r7]
 80131f2:	68b8      	ldr	r0, [r7, #8]
 80131f4:	f000 f8c2 	bl	801337c <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 80131f8:	2301      	movs	r3, #1
 80131fa:	613b      	str	r3, [r7, #16]
 80131fc:	e010      	b.n	8013220 <HAL_FLASH_Program+0xb4>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 80131fe:	68fb      	ldr	r3, [r7, #12]
 8013200:	2b01      	cmp	r3, #1
 8013202:	d002      	beq.n	801320a <HAL_FLASH_Program+0x9e>
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	2b02      	cmp	r3, #2
 8013208:	d10a      	bne.n	8013220 <HAL_FLASH_Program+0xb4>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 801320a:	683b      	ldr	r3, [r7, #0]
 801320c:	4619      	mov	r1, r3
 801320e:	68b8      	ldr	r0, [r7, #8]
 8013210:	f000 f90c 	bl	801342c <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	2b02      	cmp	r3, #2
 8013218:	d102      	bne.n	8013220 <HAL_FLASH_Program+0xb4>
      {
        prog_bit = FLASH_CR_FSTPG;
 801321a:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 801321e:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013220:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8013224:	f000 f858 	bl	80132d8 <FLASH_WaitForLastOperation>
 8013228:	4603      	mov	r3, r0
 801322a:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 801322c:	693b      	ldr	r3, [r7, #16]
 801322e:	2b00      	cmp	r3, #0
 8013230:	d006      	beq.n	8013240 <HAL_FLASH_Program+0xd4>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 8013232:	4b0a      	ldr	r3, [pc, #40]	@ (801325c <HAL_FLASH_Program+0xf0>)
 8013234:	695a      	ldr	r2, [r3, #20]
 8013236:	693b      	ldr	r3, [r7, #16]
 8013238:	43db      	mvns	r3, r3
 801323a:	4908      	ldr	r1, [pc, #32]	@ (801325c <HAL_FLASH_Program+0xf0>)
 801323c:	4013      	ands	r3, r2
 801323e:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8013240:	f000 fa6e 	bl	8013720 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013244:	4b04      	ldr	r3, [pc, #16]	@ (8013258 <HAL_FLASH_Program+0xec>)
 8013246:	2200      	movs	r2, #0
 8013248:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 801324a:	7dfb      	ldrb	r3, [r7, #23]
}
 801324c:	4618      	mov	r0, r3
 801324e:	3718      	adds	r7, #24
 8013250:	46bd      	mov	sp, r7
 8013252:	bd80      	pop	{r7, pc}
 8013254:	0801ac20 	.word	0x0801ac20
 8013258:	2000000c 	.word	0x2000000c
 801325c:	40022000 	.word	0x40022000

08013260 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8013260:	b480      	push	{r7}
 8013262:	b083      	sub	sp, #12
 8013264:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8013266:	2300      	movs	r3, #0
 8013268:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801326a:	4b0b      	ldr	r3, [pc, #44]	@ (8013298 <HAL_FLASH_Unlock+0x38>)
 801326c:	695b      	ldr	r3, [r3, #20]
 801326e:	2b00      	cmp	r3, #0
 8013270:	da0b      	bge.n	801328a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8013272:	4b09      	ldr	r3, [pc, #36]	@ (8013298 <HAL_FLASH_Unlock+0x38>)
 8013274:	4a09      	ldr	r2, [pc, #36]	@ (801329c <HAL_FLASH_Unlock+0x3c>)
 8013276:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8013278:	4b07      	ldr	r3, [pc, #28]	@ (8013298 <HAL_FLASH_Unlock+0x38>)
 801327a:	4a09      	ldr	r2, [pc, #36]	@ (80132a0 <HAL_FLASH_Unlock+0x40>)
 801327c:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 801327e:	4b06      	ldr	r3, [pc, #24]	@ (8013298 <HAL_FLASH_Unlock+0x38>)
 8013280:	695b      	ldr	r3, [r3, #20]
 8013282:	2b00      	cmp	r3, #0
 8013284:	da01      	bge.n	801328a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8013286:	2301      	movs	r3, #1
 8013288:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 801328a:	79fb      	ldrb	r3, [r7, #7]
}
 801328c:	4618      	mov	r0, r3
 801328e:	370c      	adds	r7, #12
 8013290:	46bd      	mov	sp, r7
 8013292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013296:	4770      	bx	lr
 8013298:	40022000 	.word	0x40022000
 801329c:	45670123 	.word	0x45670123
 80132a0:	cdef89ab 	.word	0xcdef89ab

080132a4 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80132a4:	b480      	push	{r7}
 80132a6:	b083      	sub	sp, #12
 80132a8:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 80132aa:	2301      	movs	r3, #1
 80132ac:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 80132ae:	4b09      	ldr	r3, [pc, #36]	@ (80132d4 <HAL_FLASH_Lock+0x30>)
 80132b0:	695b      	ldr	r3, [r3, #20]
 80132b2:	4a08      	ldr	r2, [pc, #32]	@ (80132d4 <HAL_FLASH_Lock+0x30>)
 80132b4:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80132b8:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80132ba:	4b06      	ldr	r3, [pc, #24]	@ (80132d4 <HAL_FLASH_Lock+0x30>)
 80132bc:	695b      	ldr	r3, [r3, #20]
 80132be:	2b00      	cmp	r3, #0
 80132c0:	da01      	bge.n	80132c6 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 80132c2:	2300      	movs	r3, #0
 80132c4:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 80132c6:	79fb      	ldrb	r3, [r7, #7]
}
 80132c8:	4618      	mov	r0, r3
 80132ca:	370c      	adds	r7, #12
 80132cc:	46bd      	mov	sp, r7
 80132ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132d2:	4770      	bx	lr
 80132d4:	40022000 	.word	0x40022000

080132d8 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 80132d8:	b580      	push	{r7, lr}
 80132da:	b084      	sub	sp, #16
 80132dc:	af00      	add	r7, sp, #0
 80132de:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 80132e0:	f7ff f9ae 	bl	8012640 <HAL_GetTick>
 80132e4:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80132e6:	e009      	b.n	80132fc <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 80132e8:	f7ff f9aa 	bl	8012640 <HAL_GetTick>
 80132ec:	4602      	mov	r2, r0
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	1ad3      	subs	r3, r2, r3
 80132f2:	687a      	ldr	r2, [r7, #4]
 80132f4:	429a      	cmp	r2, r3
 80132f6:	d201      	bcs.n	80132fc <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 80132f8:	2303      	movs	r3, #3
 80132fa:	e037      	b.n	801336c <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 80132fc:	4b1d      	ldr	r3, [pc, #116]	@ (8013374 <FLASH_WaitForLastOperation+0x9c>)
 80132fe:	691b      	ldr	r3, [r3, #16]
 8013300:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013304:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013308:	d0ee      	beq.n	80132e8 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 801330a:	4b1a      	ldr	r3, [pc, #104]	@ (8013374 <FLASH_WaitForLastOperation+0x9c>)
 801330c:	691a      	ldr	r2, [r3, #16]
 801330e:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 8013312:	4013      	ands	r3, r2
 8013314:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8013316:	68bb      	ldr	r3, [r7, #8]
 8013318:	2b00      	cmp	r3, #0
 801331a:	d01d      	beq.n	8013358 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 801331c:	4b16      	ldr	r3, [pc, #88]	@ (8013378 <FLASH_WaitForLastOperation+0xa0>)
 801331e:	685a      	ldr	r2, [r3, #4]
 8013320:	68bb      	ldr	r3, [r7, #8]
 8013322:	4313      	orrs	r3, r2
 8013324:	4a14      	ldr	r2, [pc, #80]	@ (8013378 <FLASH_WaitForLastOperation+0xa0>)
 8013326:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 8013328:	68bb      	ldr	r3, [r7, #8]
 801332a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801332e:	d307      	bcc.n	8013340 <FLASH_WaitForLastOperation+0x68>
 8013330:	4b10      	ldr	r3, [pc, #64]	@ (8013374 <FLASH_WaitForLastOperation+0x9c>)
 8013332:	699a      	ldr	r2, [r3, #24]
 8013334:	68bb      	ldr	r3, [r7, #8]
 8013336:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 801333a:	490e      	ldr	r1, [pc, #56]	@ (8013374 <FLASH_WaitForLastOperation+0x9c>)
 801333c:	4313      	orrs	r3, r2
 801333e:	618b      	str	r3, [r1, #24]
 8013340:	68bb      	ldr	r3, [r7, #8]
 8013342:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8013346:	2b00      	cmp	r3, #0
 8013348:	d004      	beq.n	8013354 <FLASH_WaitForLastOperation+0x7c>
 801334a:	4a0a      	ldr	r2, [pc, #40]	@ (8013374 <FLASH_WaitForLastOperation+0x9c>)
 801334c:	68bb      	ldr	r3, [r7, #8]
 801334e:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 8013352:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 8013354:	2301      	movs	r3, #1
 8013356:	e009      	b.n	801336c <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 8013358:	4b06      	ldr	r3, [pc, #24]	@ (8013374 <FLASH_WaitForLastOperation+0x9c>)
 801335a:	691b      	ldr	r3, [r3, #16]
 801335c:	f003 0301 	and.w	r3, r3, #1
 8013360:	2b01      	cmp	r3, #1
 8013362:	d102      	bne.n	801336a <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8013364:	4b03      	ldr	r3, [pc, #12]	@ (8013374 <FLASH_WaitForLastOperation+0x9c>)
 8013366:	2201      	movs	r2, #1
 8013368:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 801336a:	2300      	movs	r3, #0
}
 801336c:	4618      	mov	r0, r3
 801336e:	3710      	adds	r7, #16
 8013370:	46bd      	mov	sp, r7
 8013372:	bd80      	pop	{r7, pc}
 8013374:	40022000 	.word	0x40022000
 8013378:	2000000c 	.word	0x2000000c

0801337c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 801337c:	b580      	push	{r7, lr}
 801337e:	b084      	sub	sp, #16
 8013380:	af00      	add	r7, sp, #0
 8013382:	60f8      	str	r0, [r7, #12]
 8013384:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 8013388:	68fb      	ldr	r3, [r7, #12]
 801338a:	4a20      	ldr	r2, [pc, #128]	@ (801340c <FLASH_Program_DoubleWord+0x90>)
 801338c:	4293      	cmp	r3, r2
 801338e:	d313      	bcc.n	80133b8 <FLASH_Program_DoubleWord+0x3c>
 8013390:	4b1f      	ldr	r3, [pc, #124]	@ (8013410 <FLASH_Program_DoubleWord+0x94>)
 8013392:	881b      	ldrh	r3, [r3, #0]
 8013394:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013398:	4293      	cmp	r3, r2
 801339a:	d009      	beq.n	80133b0 <FLASH_Program_DoubleWord+0x34>
 801339c:	4b1c      	ldr	r3, [pc, #112]	@ (8013410 <FLASH_Program_DoubleWord+0x94>)
 801339e:	681b      	ldr	r3, [r3, #0]
 80133a0:	029a      	lsls	r2, r3, #10
 80133a2:	4b1c      	ldr	r3, [pc, #112]	@ (8013414 <FLASH_Program_DoubleWord+0x98>)
 80133a4:	4013      	ands	r3, r2
 80133a6:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80133aa:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 80133ae:	e000      	b.n	80133b2 <FLASH_Program_DoubleWord+0x36>
 80133b0:	4b19      	ldr	r3, [pc, #100]	@ (8013418 <FLASH_Program_DoubleWord+0x9c>)
 80133b2:	68fa      	ldr	r2, [r7, #12]
 80133b4:	4293      	cmp	r3, r2
 80133b6:	d80c      	bhi.n	80133d2 <FLASH_Program_DoubleWord+0x56>
 80133b8:	68fb      	ldr	r3, [r7, #12]
 80133ba:	4a18      	ldr	r2, [pc, #96]	@ (801341c <FLASH_Program_DoubleWord+0xa0>)
 80133bc:	4293      	cmp	r3, r2
 80133be:	d903      	bls.n	80133c8 <FLASH_Program_DoubleWord+0x4c>
 80133c0:	68fb      	ldr	r3, [r7, #12]
 80133c2:	4a17      	ldr	r2, [pc, #92]	@ (8013420 <FLASH_Program_DoubleWord+0xa4>)
 80133c4:	4293      	cmp	r3, r2
 80133c6:	d904      	bls.n	80133d2 <FLASH_Program_DoubleWord+0x56>
 80133c8:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 80133cc:	4815      	ldr	r0, [pc, #84]	@ (8013424 <FLASH_Program_DoubleWord+0xa8>)
 80133ce:	f7fe fe93 	bl	80120f8 <assert_failed>

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 80133d2:	4b15      	ldr	r3, [pc, #84]	@ (8013428 <FLASH_Program_DoubleWord+0xac>)
 80133d4:	695b      	ldr	r3, [r3, #20]
 80133d6:	4a14      	ldr	r2, [pc, #80]	@ (8013428 <FLASH_Program_DoubleWord+0xac>)
 80133d8:	f043 0301 	orr.w	r3, r3, #1
 80133dc:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 80133de:	68fb      	ldr	r3, [r7, #12]
 80133e0:	683a      	ldr	r2, [r7, #0]
 80133e2:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80133e4:	f3bf 8f6f 	isb	sy
}
 80133e8:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 80133ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80133ee:	f04f 0200 	mov.w	r2, #0
 80133f2:	f04f 0300 	mov.w	r3, #0
 80133f6:	000a      	movs	r2, r1
 80133f8:	2300      	movs	r3, #0
 80133fa:	68f9      	ldr	r1, [r7, #12]
 80133fc:	3104      	adds	r1, #4
 80133fe:	4613      	mov	r3, r2
 8013400:	600b      	str	r3, [r1, #0]
}
 8013402:	bf00      	nop
 8013404:	3710      	adds	r7, #16
 8013406:	46bd      	mov	sp, r7
 8013408:	bd80      	pop	{r7, pc}
 801340a:	bf00      	nop
 801340c:	08011000 	.word	0x08011000
 8013410:	1fff75e0 	.word	0x1fff75e0
 8013414:	03fffc00 	.word	0x03fffc00
 8013418:	08031000 	.word	0x08031000
 801341c:	1fff6fff 	.word	0x1fff6fff
 8013420:	1fff73ff 	.word	0x1fff73ff
 8013424:	0801ac20 	.word	0x0801ac20
 8013428:	40022000 	.word	0x40022000

0801342c <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 801342c:	b580      	push	{r7, lr}
 801342e:	b088      	sub	sp, #32
 8013430:	af00      	add	r7, sp, #0
 8013432:	6078      	str	r0, [r7, #4]
 8013434:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 8013436:	2340      	movs	r3, #64	@ 0x40
 8013438:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 801343a:	687b      	ldr	r3, [r7, #4]
 801343c:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 801343e:	683b      	ldr	r3, [r7, #0]
 8013440:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 8013442:	687b      	ldr	r3, [r7, #4]
 8013444:	4a21      	ldr	r2, [pc, #132]	@ (80134cc <FLASH_Program_Fast+0xa0>)
 8013446:	4293      	cmp	r3, r2
 8013448:	d313      	bcc.n	8013472 <FLASH_Program_Fast+0x46>
 801344a:	4b21      	ldr	r3, [pc, #132]	@ (80134d0 <FLASH_Program_Fast+0xa4>)
 801344c:	881b      	ldrh	r3, [r3, #0]
 801344e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8013452:	4293      	cmp	r3, r2
 8013454:	d009      	beq.n	801346a <FLASH_Program_Fast+0x3e>
 8013456:	4b1e      	ldr	r3, [pc, #120]	@ (80134d0 <FLASH_Program_Fast+0xa4>)
 8013458:	681b      	ldr	r3, [r3, #0]
 801345a:	029a      	lsls	r2, r3, #10
 801345c:	4b1d      	ldr	r3, [pc, #116]	@ (80134d4 <FLASH_Program_Fast+0xa8>)
 801345e:	4013      	ands	r3, r2
 8013460:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8013464:	f503 3388 	add.w	r3, r3, #69632	@ 0x11000
 8013468:	e000      	b.n	801346c <FLASH_Program_Fast+0x40>
 801346a:	4b1b      	ldr	r3, [pc, #108]	@ (80134d8 <FLASH_Program_Fast+0xac>)
 801346c:	687a      	ldr	r2, [r7, #4]
 801346e:	4293      	cmp	r3, r2
 8013470:	d804      	bhi.n	801347c <FLASH_Program_Fast+0x50>
 8013472:	f240 21f6 	movw	r1, #758	@ 0x2f6
 8013476:	4819      	ldr	r0, [pc, #100]	@ (80134dc <FLASH_Program_Fast+0xb0>)
 8013478:	f7fe fe3e 	bl	80120f8 <assert_failed>

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 801347c:	4b18      	ldr	r3, [pc, #96]	@ (80134e0 <FLASH_Program_Fast+0xb4>)
 801347e:	695b      	ldr	r3, [r3, #20]
 8013480:	4a17      	ldr	r2, [pc, #92]	@ (80134e0 <FLASH_Program_Fast+0xb4>)
 8013482:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013486:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013488:	f3ef 8310 	mrs	r3, PRIMASK
 801348c:	60fb      	str	r3, [r7, #12]
  return(result);
 801348e:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8013490:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8013492:	b672      	cpsid	i
}
 8013494:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8013496:	697b      	ldr	r3, [r7, #20]
 8013498:	681a      	ldr	r2, [r3, #0]
 801349a:	69bb      	ldr	r3, [r7, #24]
 801349c:	601a      	str	r2, [r3, #0]
    dest_addr++;
 801349e:	69bb      	ldr	r3, [r7, #24]
 80134a0:	3304      	adds	r3, #4
 80134a2:	61bb      	str	r3, [r7, #24]
    src_addr++;
 80134a4:	697b      	ldr	r3, [r7, #20]
 80134a6:	3304      	adds	r3, #4
 80134a8:	617b      	str	r3, [r7, #20]
    row_index--;
 80134aa:	7ffb      	ldrb	r3, [r7, #31]
 80134ac:	3b01      	subs	r3, #1
 80134ae:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 80134b0:	7ffb      	ldrb	r3, [r7, #31]
 80134b2:	2b00      	cmp	r3, #0
 80134b4:	d1ef      	bne.n	8013496 <FLASH_Program_Fast+0x6a>
 80134b6:	693b      	ldr	r3, [r7, #16]
 80134b8:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80134ba:	68bb      	ldr	r3, [r7, #8]
 80134bc:	f383 8810 	msr	PRIMASK, r3
}
 80134c0:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 80134c2:	bf00      	nop
 80134c4:	3720      	adds	r7, #32
 80134c6:	46bd      	mov	sp, r7
 80134c8:	bd80      	pop	{r7, pc}
 80134ca:	bf00      	nop
 80134cc:	08011000 	.word	0x08011000
 80134d0:	1fff75e0 	.word	0x1fff75e0
 80134d4:	03fffc00 	.word	0x03fffc00
 80134d8:	08031000 	.word	0x08031000
 80134dc:	0801ac20 	.word	0x0801ac20
 80134e0:	40022000 	.word	0x40022000

080134e4 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 80134e4:	b580      	push	{r7, lr}
 80134e6:	b084      	sub	sp, #16
 80134e8:	af00      	add	r7, sp, #0
 80134ea:	6078      	str	r0, [r7, #4]
 80134ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681b      	ldr	r3, [r3, #0]
 80134f2:	2b00      	cmp	r3, #0
 80134f4:	d007      	beq.n	8013506 <HAL_FLASHEx_Erase+0x22>
 80134f6:	687b      	ldr	r3, [r7, #4]
 80134f8:	681b      	ldr	r3, [r3, #0]
 80134fa:	2b01      	cmp	r3, #1
 80134fc:	d003      	beq.n	8013506 <HAL_FLASHEx_Erase+0x22>
 80134fe:	2190      	movs	r1, #144	@ 0x90
 8013500:	4848      	ldr	r0, [pc, #288]	@ (8013624 <HAL_FLASHEx_Erase+0x140>)
 8013502:	f7fe fdf9 	bl	80120f8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8013506:	4b48      	ldr	r3, [pc, #288]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 8013508:	781b      	ldrb	r3, [r3, #0]
 801350a:	2b01      	cmp	r3, #1
 801350c:	d101      	bne.n	8013512 <HAL_FLASHEx_Erase+0x2e>
 801350e:	2302      	movs	r3, #2
 8013510:	e083      	b.n	801361a <HAL_FLASHEx_Erase+0x136>
 8013512:	4b45      	ldr	r3, [pc, #276]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 8013514:	2201      	movs	r2, #1
 8013516:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8013518:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 801351c:	f7ff fedc 	bl	80132d8 <FLASH_WaitForLastOperation>
 8013520:	4603      	mov	r3, r0
 8013522:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8013524:	7bfb      	ldrb	r3, [r7, #15]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d173      	bne.n	8013612 <HAL_FLASHEx_Erase+0x12e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 801352a:	4b3f      	ldr	r3, [pc, #252]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 801352c:	2200      	movs	r2, #0
 801352e:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 8013530:	4b3e      	ldr	r3, [pc, #248]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 8013532:	681b      	ldr	r3, [r3, #0]
 8013534:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8013538:	2b00      	cmp	r3, #0
 801353a:	d013      	beq.n	8013564 <HAL_FLASHEx_Erase+0x80>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 801353c:	4b3b      	ldr	r3, [pc, #236]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 801353e:	681b      	ldr	r3, [r3, #0]
 8013540:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013544:	2b00      	cmp	r3, #0
 8013546:	d009      	beq.n	801355c <HAL_FLASHEx_Erase+0x78>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 8013548:	4b38      	ldr	r3, [pc, #224]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 801354a:	681b      	ldr	r3, [r3, #0]
 801354c:	4a37      	ldr	r2, [pc, #220]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 801354e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8013552:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 8013554:	4b34      	ldr	r3, [pc, #208]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 8013556:	2203      	movs	r2, #3
 8013558:	771a      	strb	r2, [r3, #28]
 801355a:	e016      	b.n	801358a <HAL_FLASHEx_Erase+0xa6>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 801355c:	4b32      	ldr	r3, [pc, #200]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 801355e:	2201      	movs	r2, #1
 8013560:	771a      	strb	r2, [r3, #28]
 8013562:	e012      	b.n	801358a <HAL_FLASHEx_Erase+0xa6>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 8013564:	4b31      	ldr	r3, [pc, #196]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 8013566:	681b      	ldr	r3, [r3, #0]
 8013568:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801356c:	2b00      	cmp	r3, #0
 801356e:	d009      	beq.n	8013584 <HAL_FLASHEx_Erase+0xa0>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 8013570:	4b2e      	ldr	r3, [pc, #184]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 8013572:	681b      	ldr	r3, [r3, #0]
 8013574:	4a2d      	ldr	r2, [pc, #180]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 8013576:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 801357a:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 801357c:	4b2a      	ldr	r3, [pc, #168]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 801357e:	2202      	movs	r2, #2
 8013580:	771a      	strb	r2, [r3, #28]
 8013582:	e002      	b.n	801358a <HAL_FLASHEx_Erase+0xa6>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8013584:	4b28      	ldr	r3, [pc, #160]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 8013586:	2200      	movs	r2, #0
 8013588:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 801358a:	687b      	ldr	r3, [r7, #4]
 801358c:	681b      	ldr	r3, [r3, #0]
 801358e:	2b01      	cmp	r3, #1
 8013590:	d111      	bne.n	80135b6 <HAL_FLASHEx_Erase+0xd2>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 8013592:	687b      	ldr	r3, [r7, #4]
 8013594:	685b      	ldr	r3, [r3, #4]
 8013596:	4618      	mov	r0, r3
 8013598:	f000 f84a 	bl	8013630 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 801359c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80135a0:	f7ff fe9a 	bl	80132d8 <FLASH_WaitForLastOperation>
 80135a4:	4603      	mov	r3, r0
 80135a6:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 80135a8:	4b20      	ldr	r3, [pc, #128]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 80135aa:	695b      	ldr	r3, [r3, #20]
 80135ac:	4a1f      	ldr	r2, [pc, #124]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 80135ae:	f023 0304 	bic.w	r3, r3, #4
 80135b2:	6153      	str	r3, [r2, #20]
 80135b4:	e02b      	b.n	801360e <HAL_FLASHEx_Erase+0x12a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 80135b6:	683b      	ldr	r3, [r7, #0]
 80135b8:	f04f 32ff 	mov.w	r2, #4294967295
 80135bc:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	689b      	ldr	r3, [r3, #8]
 80135c2:	60bb      	str	r3, [r7, #8]
 80135c4:	e01b      	b.n	80135fe <HAL_FLASHEx_Erase+0x11a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 80135c6:	687b      	ldr	r3, [r7, #4]
 80135c8:	685b      	ldr	r3, [r3, #4]
 80135ca:	4619      	mov	r1, r3
 80135cc:	68b8      	ldr	r0, [r7, #8]
 80135ce:	f000 f855 	bl	801367c <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80135d2:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80135d6:	f7ff fe7f 	bl	80132d8 <FLASH_WaitForLastOperation>
 80135da:	4603      	mov	r3, r0
 80135dc:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 80135de:	4b13      	ldr	r3, [pc, #76]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 80135e0:	695b      	ldr	r3, [r3, #20]
 80135e2:	4a12      	ldr	r2, [pc, #72]	@ (801362c <HAL_FLASHEx_Erase+0x148>)
 80135e4:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 80135e8:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 80135ea:	7bfb      	ldrb	r3, [r7, #15]
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d003      	beq.n	80135f8 <HAL_FLASHEx_Erase+0x114>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 80135f0:	683b      	ldr	r3, [r7, #0]
 80135f2:	68ba      	ldr	r2, [r7, #8]
 80135f4:	601a      	str	r2, [r3, #0]
          break;
 80135f6:	e00a      	b.n	801360e <HAL_FLASHEx_Erase+0x12a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 80135f8:	68bb      	ldr	r3, [r7, #8]
 80135fa:	3301      	adds	r3, #1
 80135fc:	60bb      	str	r3, [r7, #8]
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	689a      	ldr	r2, [r3, #8]
 8013602:	687b      	ldr	r3, [r7, #4]
 8013604:	68db      	ldr	r3, [r3, #12]
 8013606:	4413      	add	r3, r2
 8013608:	68ba      	ldr	r2, [r7, #8]
 801360a:	429a      	cmp	r2, r3
 801360c:	d3db      	bcc.n	80135c6 <HAL_FLASHEx_Erase+0xe2>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 801360e:	f000 f887 	bl	8013720 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8013612:	4b05      	ldr	r3, [pc, #20]	@ (8013628 <HAL_FLASHEx_Erase+0x144>)
 8013614:	2200      	movs	r2, #0
 8013616:	701a      	strb	r2, [r3, #0]

  return status;
 8013618:	7bfb      	ldrb	r3, [r7, #15]
}
 801361a:	4618      	mov	r0, r3
 801361c:	3710      	adds	r7, #16
 801361e:	46bd      	mov	sp, r7
 8013620:	bd80      	pop	{r7, pc}
 8013622:	bf00      	nop
 8013624:	0801ac5c 	.word	0x0801ac5c
 8013628:	2000000c 	.word	0x2000000c
 801362c:	40022000 	.word	0x40022000

08013630 <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 8013630:	b580      	push	{r7, lr}
 8013632:	b082      	sub	sp, #8
 8013634:	af00      	add	r7, sp, #0
 8013636:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
#endif
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	2b01      	cmp	r3, #1
 801363c:	d004      	beq.n	8013648 <FLASH_MassErase+0x18>
 801363e:	f44f 7108 	mov.w	r1, #544	@ 0x220
 8013642:	480c      	ldr	r0, [pc, #48]	@ (8013674 <FLASH_MassErase+0x44>)
 8013644:	f7fe fd58 	bl	80120f8 <assert_failed>

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 8013648:	687b      	ldr	r3, [r7, #4]
 801364a:	f003 0301 	and.w	r3, r3, #1
 801364e:	2b00      	cmp	r3, #0
 8013650:	d005      	beq.n	801365e <FLASH_MassErase+0x2e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 8013652:	4b09      	ldr	r3, [pc, #36]	@ (8013678 <FLASH_MassErase+0x48>)
 8013654:	695b      	ldr	r3, [r3, #20]
 8013656:	4a08      	ldr	r2, [pc, #32]	@ (8013678 <FLASH_MassErase+0x48>)
 8013658:	f043 0304 	orr.w	r3, r3, #4
 801365c:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 801365e:	4b06      	ldr	r3, [pc, #24]	@ (8013678 <FLASH_MassErase+0x48>)
 8013660:	695b      	ldr	r3, [r3, #20]
 8013662:	4a05      	ldr	r2, [pc, #20]	@ (8013678 <FLASH_MassErase+0x48>)
 8013664:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013668:	6153      	str	r3, [r2, #20]
}
 801366a:	bf00      	nop
 801366c:	3708      	adds	r7, #8
 801366e:	46bd      	mov	sp, r7
 8013670:	bd80      	pop	{r7, pc}
 8013672:	bf00      	nop
 8013674:	0801ac5c 	.word	0x0801ac5c
 8013678:	40022000 	.word	0x40022000

0801367c <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 801367c:	b580      	push	{r7, lr}
 801367e:	b082      	sub	sp, #8
 8013680:	af00      	add	r7, sp, #0
 8013682:	6078      	str	r0, [r7, #4]
 8013684:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
 8013686:	4b22      	ldr	r3, [pc, #136]	@ (8013710 <FLASH_PageErase+0x94>)
 8013688:	881b      	ldrh	r3, [r3, #0]
 801368a:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 801368e:	4293      	cmp	r3, r2
 8013690:	d007      	beq.n	80136a2 <FLASH_PageErase+0x26>
 8013692:	4b1f      	ldr	r3, [pc, #124]	@ (8013710 <FLASH_PageErase+0x94>)
 8013694:	681b      	ldr	r3, [r3, #0]
 8013696:	029a      	lsls	r2, r3, #10
 8013698:	4b1e      	ldr	r3, [pc, #120]	@ (8013714 <FLASH_PageErase+0x98>)
 801369a:	4013      	ands	r3, r2
 801369c:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 80136a0:	d011      	beq.n	80136c6 <FLASH_PageErase+0x4a>
 80136a2:	4b1b      	ldr	r3, [pc, #108]	@ (8013710 <FLASH_PageErase+0x94>)
 80136a4:	881b      	ldrh	r3, [r3, #0]
 80136a6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80136aa:	4293      	cmp	r3, r2
 80136ac:	d009      	beq.n	80136c2 <FLASH_PageErase+0x46>
 80136ae:	4b18      	ldr	r3, [pc, #96]	@ (8013710 <FLASH_PageErase+0x94>)
 80136b0:	681b      	ldr	r3, [r3, #0]
 80136b2:	029a      	lsls	r2, r3, #10
 80136b4:	4b17      	ldr	r3, [pc, #92]	@ (8013714 <FLASH_PageErase+0x98>)
 80136b6:	4013      	ands	r3, r2
 80136b8:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 80136bc:	d101      	bne.n	80136c2 <FLASH_PageErase+0x46>
 80136be:	2380      	movs	r3, #128	@ 0x80
 80136c0:	e003      	b.n	80136ca <FLASH_PageErase+0x4e>
 80136c2:	2340      	movs	r3, #64	@ 0x40
 80136c4:	e001      	b.n	80136ca <FLASH_PageErase+0x4e>
 80136c6:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80136ca:	687a      	ldr	r2, [r7, #4]
 80136cc:	4293      	cmp	r3, r2
 80136ce:	d804      	bhi.n	80136da <FLASH_PageErase+0x5e>
 80136d0:	f240 2149 	movw	r1, #585	@ 0x249
 80136d4:	4810      	ldr	r0, [pc, #64]	@ (8013718 <FLASH_PageErase+0x9c>)
 80136d6:	f7fe fd0f 	bl	80120f8 <assert_failed>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 80136da:	4b10      	ldr	r3, [pc, #64]	@ (801371c <FLASH_PageErase+0xa0>)
 80136dc:	695b      	ldr	r3, [r3, #20]
 80136de:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 80136e2:	687b      	ldr	r3, [r7, #4]
 80136e4:	00db      	lsls	r3, r3, #3
 80136e6:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 80136ea:	490c      	ldr	r1, [pc, #48]	@ (801371c <FLASH_PageErase+0xa0>)
 80136ec:	4313      	orrs	r3, r2
 80136ee:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 80136f0:	4b0a      	ldr	r3, [pc, #40]	@ (801371c <FLASH_PageErase+0xa0>)
 80136f2:	695b      	ldr	r3, [r3, #20]
 80136f4:	4a09      	ldr	r2, [pc, #36]	@ (801371c <FLASH_PageErase+0xa0>)
 80136f6:	f043 0302 	orr.w	r3, r3, #2
 80136fa:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80136fc:	4b07      	ldr	r3, [pc, #28]	@ (801371c <FLASH_PageErase+0xa0>)
 80136fe:	695b      	ldr	r3, [r3, #20]
 8013700:	4a06      	ldr	r2, [pc, #24]	@ (801371c <FLASH_PageErase+0xa0>)
 8013702:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013706:	6153      	str	r3, [r2, #20]
}
 8013708:	bf00      	nop
 801370a:	3708      	adds	r7, #8
 801370c:	46bd      	mov	sp, r7
 801370e:	bd80      	pop	{r7, pc}
 8013710:	1fff75e0 	.word	0x1fff75e0
 8013714:	03fffc00 	.word	0x03fffc00
 8013718:	0801ac5c 	.word	0x0801ac5c
 801371c:	40022000 	.word	0x40022000

08013720 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8013720:	b480      	push	{r7}
 8013722:	b083      	sub	sp, #12
 8013724:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8013726:	4b21      	ldr	r3, [pc, #132]	@ (80137ac <FLASH_FlushCaches+0x8c>)
 8013728:	7f1b      	ldrb	r3, [r3, #28]
 801372a:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 801372c:	79fb      	ldrb	r3, [r7, #7]
 801372e:	2b01      	cmp	r3, #1
 8013730:	d002      	beq.n	8013738 <FLASH_FlushCaches+0x18>
 8013732:	79fb      	ldrb	r3, [r7, #7]
 8013734:	2b03      	cmp	r3, #3
 8013736:	d117      	bne.n	8013768 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8013738:	4b1d      	ldr	r3, [pc, #116]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 801373a:	681b      	ldr	r3, [r3, #0]
 801373c:	4a1c      	ldr	r2, [pc, #112]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 801373e:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8013742:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8013744:	4b1a      	ldr	r3, [pc, #104]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013746:	681b      	ldr	r3, [r3, #0]
 8013748:	4a19      	ldr	r2, [pc, #100]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 801374a:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 801374e:	6013      	str	r3, [r2, #0]
 8013750:	4b17      	ldr	r3, [pc, #92]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013752:	681b      	ldr	r3, [r3, #0]
 8013754:	4a16      	ldr	r2, [pc, #88]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013756:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 801375a:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 801375c:	4b14      	ldr	r3, [pc, #80]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 801375e:	681b      	ldr	r3, [r3, #0]
 8013760:	4a13      	ldr	r2, [pc, #76]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013762:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8013766:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 8013768:	79fb      	ldrb	r3, [r7, #7]
 801376a:	2b02      	cmp	r3, #2
 801376c:	d002      	beq.n	8013774 <FLASH_FlushCaches+0x54>
 801376e:	79fb      	ldrb	r3, [r7, #7]
 8013770:	2b03      	cmp	r3, #3
 8013772:	d111      	bne.n	8013798 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8013774:	4b0e      	ldr	r3, [pc, #56]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013776:	681b      	ldr	r3, [r3, #0]
 8013778:	4a0d      	ldr	r2, [pc, #52]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 801377a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 801377e:	6013      	str	r3, [r2, #0]
 8013780:	4b0b      	ldr	r3, [pc, #44]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013782:	681b      	ldr	r3, [r3, #0]
 8013784:	4a0a      	ldr	r2, [pc, #40]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013786:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 801378a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 801378c:	4b08      	ldr	r3, [pc, #32]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 801378e:	681b      	ldr	r3, [r3, #0]
 8013790:	4a07      	ldr	r2, [pc, #28]	@ (80137b0 <FLASH_FlushCaches+0x90>)
 8013792:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8013796:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8013798:	4b04      	ldr	r3, [pc, #16]	@ (80137ac <FLASH_FlushCaches+0x8c>)
 801379a:	2200      	movs	r2, #0
 801379c:	771a      	strb	r2, [r3, #28]
}
 801379e:	bf00      	nop
 80137a0:	370c      	adds	r7, #12
 80137a2:	46bd      	mov	sp, r7
 80137a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80137a8:	4770      	bx	lr
 80137aa:	bf00      	nop
 80137ac:	2000000c 	.word	0x2000000c
 80137b0:	40022000 	.word	0x40022000

080137b4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80137b4:	b580      	push	{r7, lr}
 80137b6:	b086      	sub	sp, #24
 80137b8:	af00      	add	r7, sp, #0
 80137ba:	6078      	str	r0, [r7, #4]
 80137bc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80137be:	2300      	movs	r3, #0
 80137c0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 80137c2:	687b      	ldr	r3, [r7, #4]
 80137c4:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80137c8:	d01b      	beq.n	8013802 <HAL_GPIO_Init+0x4e>
 80137ca:	687b      	ldr	r3, [r7, #4]
 80137cc:	4a37      	ldr	r2, [pc, #220]	@ (80138ac <HAL_GPIO_Init+0xf8>)
 80137ce:	4293      	cmp	r3, r2
 80137d0:	d017      	beq.n	8013802 <HAL_GPIO_Init+0x4e>
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	4a36      	ldr	r2, [pc, #216]	@ (80138b0 <HAL_GPIO_Init+0xfc>)
 80137d6:	4293      	cmp	r3, r2
 80137d8:	d013      	beq.n	8013802 <HAL_GPIO_Init+0x4e>
 80137da:	687b      	ldr	r3, [r7, #4]
 80137dc:	4a35      	ldr	r2, [pc, #212]	@ (80138b4 <HAL_GPIO_Init+0x100>)
 80137de:	4293      	cmp	r3, r2
 80137e0:	d00f      	beq.n	8013802 <HAL_GPIO_Init+0x4e>
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	4a34      	ldr	r2, [pc, #208]	@ (80138b8 <HAL_GPIO_Init+0x104>)
 80137e6:	4293      	cmp	r3, r2
 80137e8:	d00b      	beq.n	8013802 <HAL_GPIO_Init+0x4e>
 80137ea:	687b      	ldr	r3, [r7, #4]
 80137ec:	4a33      	ldr	r2, [pc, #204]	@ (80138bc <HAL_GPIO_Init+0x108>)
 80137ee:	4293      	cmp	r3, r2
 80137f0:	d007      	beq.n	8013802 <HAL_GPIO_Init+0x4e>
 80137f2:	687b      	ldr	r3, [r7, #4]
 80137f4:	4a32      	ldr	r2, [pc, #200]	@ (80138c0 <HAL_GPIO_Init+0x10c>)
 80137f6:	4293      	cmp	r3, r2
 80137f8:	d003      	beq.n	8013802 <HAL_GPIO_Init+0x4e>
 80137fa:	21a9      	movs	r1, #169	@ 0xa9
 80137fc:	4831      	ldr	r0, [pc, #196]	@ (80138c4 <HAL_GPIO_Init+0x110>)
 80137fe:	f7fe fc7b 	bl	80120f8 <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 8013802:	683b      	ldr	r3, [r7, #0]
 8013804:	681b      	ldr	r3, [r3, #0]
 8013806:	b29b      	uxth	r3, r3
 8013808:	2b00      	cmp	r3, #0
 801380a:	d004      	beq.n	8013816 <HAL_GPIO_Init+0x62>
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013814:	d303      	bcc.n	801381e <HAL_GPIO_Init+0x6a>
 8013816:	21aa      	movs	r1, #170	@ 0xaa
 8013818:	482a      	ldr	r0, [pc, #168]	@ (80138c4 <HAL_GPIO_Init+0x110>)
 801381a:	f7fe fc6d 	bl	80120f8 <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 801381e:	683b      	ldr	r3, [r7, #0]
 8013820:	685b      	ldr	r3, [r3, #4]
 8013822:	2b00      	cmp	r3, #0
 8013824:	f000 8209 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013828:	683b      	ldr	r3, [r7, #0]
 801382a:	685b      	ldr	r3, [r3, #4]
 801382c:	2b01      	cmp	r3, #1
 801382e:	f000 8204 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013832:	683b      	ldr	r3, [r7, #0]
 8013834:	685b      	ldr	r3, [r3, #4]
 8013836:	2b11      	cmp	r3, #17
 8013838:	f000 81ff 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 801383c:	683b      	ldr	r3, [r7, #0]
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	2b02      	cmp	r3, #2
 8013842:	f000 81fa 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013846:	683b      	ldr	r3, [r7, #0]
 8013848:	685b      	ldr	r3, [r3, #4]
 801384a:	2b12      	cmp	r3, #18
 801384c:	f000 81f5 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013850:	683b      	ldr	r3, [r7, #0]
 8013852:	685b      	ldr	r3, [r3, #4]
 8013854:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 8013858:	f000 81ef 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 801385c:	683b      	ldr	r3, [r7, #0]
 801385e:	685b      	ldr	r3, [r3, #4]
 8013860:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 8013864:	f000 81e9 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013868:	683b      	ldr	r3, [r7, #0]
 801386a:	685b      	ldr	r3, [r3, #4]
 801386c:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 8013870:	f000 81e3 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013874:	683b      	ldr	r3, [r7, #0]
 8013876:	685b      	ldr	r3, [r3, #4]
 8013878:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 801387c:	f000 81dd 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013880:	683b      	ldr	r3, [r7, #0]
 8013882:	685b      	ldr	r3, [r3, #4]
 8013884:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 8013888:	f000 81d7 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 801388c:	683b      	ldr	r3, [r7, #0]
 801388e:	685b      	ldr	r3, [r3, #4]
 8013890:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8013894:	f000 81d1 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 8013898:	683b      	ldr	r3, [r7, #0]
 801389a:	685b      	ldr	r3, [r3, #4]
 801389c:	2b03      	cmp	r3, #3
 801389e:	f000 81cc 	beq.w	8013c3a <HAL_GPIO_Init+0x486>
 80138a2:	21ab      	movs	r1, #171	@ 0xab
 80138a4:	4807      	ldr	r0, [pc, #28]	@ (80138c4 <HAL_GPIO_Init+0x110>)
 80138a6:	f7fe fc27 	bl	80120f8 <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80138aa:	e1c6      	b.n	8013c3a <HAL_GPIO_Init+0x486>
 80138ac:	48000400 	.word	0x48000400
 80138b0:	48000800 	.word	0x48000800
 80138b4:	48000c00 	.word	0x48000c00
 80138b8:	48001000 	.word	0x48001000
 80138bc:	48001400 	.word	0x48001400
 80138c0:	48001800 	.word	0x48001800
 80138c4:	0801ac9c 	.word	0x0801ac9c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80138c8:	683b      	ldr	r3, [r7, #0]
 80138ca:	681a      	ldr	r2, [r3, #0]
 80138cc:	2101      	movs	r1, #1
 80138ce:	697b      	ldr	r3, [r7, #20]
 80138d0:	fa01 f303 	lsl.w	r3, r1, r3
 80138d4:	4013      	ands	r3, r2
 80138d6:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80138d8:	68fb      	ldr	r3, [r7, #12]
 80138da:	2b00      	cmp	r3, #0
 80138dc:	f000 81aa 	beq.w	8013c34 <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80138e0:	683b      	ldr	r3, [r7, #0]
 80138e2:	685b      	ldr	r3, [r3, #4]
 80138e4:	f003 0303 	and.w	r3, r3, #3
 80138e8:	2b01      	cmp	r3, #1
 80138ea:	d005      	beq.n	80138f8 <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80138ec:	683b      	ldr	r3, [r7, #0]
 80138ee:	685b      	ldr	r3, [r3, #4]
 80138f0:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80138f4:	2b02      	cmp	r3, #2
 80138f6:	d144      	bne.n	8013982 <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 80138f8:	683b      	ldr	r3, [r7, #0]
 80138fa:	68db      	ldr	r3, [r3, #12]
 80138fc:	2b00      	cmp	r3, #0
 80138fe:	d00f      	beq.n	8013920 <HAL_GPIO_Init+0x16c>
 8013900:	683b      	ldr	r3, [r7, #0]
 8013902:	68db      	ldr	r3, [r3, #12]
 8013904:	2b01      	cmp	r3, #1
 8013906:	d00b      	beq.n	8013920 <HAL_GPIO_Init+0x16c>
 8013908:	683b      	ldr	r3, [r7, #0]
 801390a:	68db      	ldr	r3, [r3, #12]
 801390c:	2b02      	cmp	r3, #2
 801390e:	d007      	beq.n	8013920 <HAL_GPIO_Init+0x16c>
 8013910:	683b      	ldr	r3, [r7, #0]
 8013912:	68db      	ldr	r3, [r3, #12]
 8013914:	2b03      	cmp	r3, #3
 8013916:	d003      	beq.n	8013920 <HAL_GPIO_Init+0x16c>
 8013918:	21bb      	movs	r1, #187	@ 0xbb
 801391a:	488b      	ldr	r0, [pc, #556]	@ (8013b48 <HAL_GPIO_Init+0x394>)
 801391c:	f7fe fbec 	bl	80120f8 <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8013920:	687b      	ldr	r3, [r7, #4]
 8013922:	689b      	ldr	r3, [r3, #8]
 8013924:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8013926:	697b      	ldr	r3, [r7, #20]
 8013928:	005b      	lsls	r3, r3, #1
 801392a:	2203      	movs	r2, #3
 801392c:	fa02 f303 	lsl.w	r3, r2, r3
 8013930:	43db      	mvns	r3, r3
 8013932:	693a      	ldr	r2, [r7, #16]
 8013934:	4013      	ands	r3, r2
 8013936:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8013938:	683b      	ldr	r3, [r7, #0]
 801393a:	68da      	ldr	r2, [r3, #12]
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	005b      	lsls	r3, r3, #1
 8013940:	fa02 f303 	lsl.w	r3, r2, r3
 8013944:	693a      	ldr	r2, [r7, #16]
 8013946:	4313      	orrs	r3, r2
 8013948:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 801394a:	687b      	ldr	r3, [r7, #4]
 801394c:	693a      	ldr	r2, [r7, #16]
 801394e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8013950:	687b      	ldr	r3, [r7, #4]
 8013952:	685b      	ldr	r3, [r3, #4]
 8013954:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8013956:	2201      	movs	r2, #1
 8013958:	697b      	ldr	r3, [r7, #20]
 801395a:	fa02 f303 	lsl.w	r3, r2, r3
 801395e:	43db      	mvns	r3, r3
 8013960:	693a      	ldr	r2, [r7, #16]
 8013962:	4013      	ands	r3, r2
 8013964:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8013966:	683b      	ldr	r3, [r7, #0]
 8013968:	685b      	ldr	r3, [r3, #4]
 801396a:	091b      	lsrs	r3, r3, #4
 801396c:	f003 0201 	and.w	r2, r3, #1
 8013970:	697b      	ldr	r3, [r7, #20]
 8013972:	fa02 f303 	lsl.w	r3, r2, r3
 8013976:	693a      	ldr	r2, [r7, #16]
 8013978:	4313      	orrs	r3, r2
 801397a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 801397c:	687b      	ldr	r3, [r7, #4]
 801397e:	693a      	ldr	r2, [r7, #16]
 8013980:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8013982:	683b      	ldr	r3, [r7, #0]
 8013984:	685b      	ldr	r3, [r3, #4]
 8013986:	f003 0303 	and.w	r3, r3, #3
 801398a:	2b03      	cmp	r3, #3
 801398c:	d027      	beq.n	80139de <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 801398e:	683b      	ldr	r3, [r7, #0]
 8013990:	689b      	ldr	r3, [r3, #8]
 8013992:	2b00      	cmp	r3, #0
 8013994:	d00b      	beq.n	80139ae <HAL_GPIO_Init+0x1fa>
 8013996:	683b      	ldr	r3, [r7, #0]
 8013998:	689b      	ldr	r3, [r3, #8]
 801399a:	2b01      	cmp	r3, #1
 801399c:	d007      	beq.n	80139ae <HAL_GPIO_Init+0x1fa>
 801399e:	683b      	ldr	r3, [r7, #0]
 80139a0:	689b      	ldr	r3, [r3, #8]
 80139a2:	2b02      	cmp	r3, #2
 80139a4:	d003      	beq.n	80139ae <HAL_GPIO_Init+0x1fa>
 80139a6:	21cc      	movs	r1, #204	@ 0xcc
 80139a8:	4867      	ldr	r0, [pc, #412]	@ (8013b48 <HAL_GPIO_Init+0x394>)
 80139aa:	f7fe fba5 	bl	80120f8 <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80139ae:	687b      	ldr	r3, [r7, #4]
 80139b0:	68db      	ldr	r3, [r3, #12]
 80139b2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 80139b4:	697b      	ldr	r3, [r7, #20]
 80139b6:	005b      	lsls	r3, r3, #1
 80139b8:	2203      	movs	r2, #3
 80139ba:	fa02 f303 	lsl.w	r3, r2, r3
 80139be:	43db      	mvns	r3, r3
 80139c0:	693a      	ldr	r2, [r7, #16]
 80139c2:	4013      	ands	r3, r2
 80139c4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80139c6:	683b      	ldr	r3, [r7, #0]
 80139c8:	689a      	ldr	r2, [r3, #8]
 80139ca:	697b      	ldr	r3, [r7, #20]
 80139cc:	005b      	lsls	r3, r3, #1
 80139ce:	fa02 f303 	lsl.w	r3, r2, r3
 80139d2:	693a      	ldr	r2, [r7, #16]
 80139d4:	4313      	orrs	r3, r2
 80139d6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	693a      	ldr	r2, [r7, #16]
 80139dc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80139de:	683b      	ldr	r3, [r7, #0]
 80139e0:	685b      	ldr	r3, [r3, #4]
 80139e2:	f003 0303 	and.w	r3, r3, #3
 80139e6:	2b02      	cmp	r3, #2
 80139e8:	d14b      	bne.n	8013a82 <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 80139ea:	687b      	ldr	r3, [r7, #4]
 80139ec:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 80139f0:	d01b      	beq.n	8013a2a <HAL_GPIO_Init+0x276>
 80139f2:	687b      	ldr	r3, [r7, #4]
 80139f4:	4a55      	ldr	r2, [pc, #340]	@ (8013b4c <HAL_GPIO_Init+0x398>)
 80139f6:	4293      	cmp	r3, r2
 80139f8:	d017      	beq.n	8013a2a <HAL_GPIO_Init+0x276>
 80139fa:	687b      	ldr	r3, [r7, #4]
 80139fc:	4a54      	ldr	r2, [pc, #336]	@ (8013b50 <HAL_GPIO_Init+0x39c>)
 80139fe:	4293      	cmp	r3, r2
 8013a00:	d013      	beq.n	8013a2a <HAL_GPIO_Init+0x276>
 8013a02:	687b      	ldr	r3, [r7, #4]
 8013a04:	4a53      	ldr	r2, [pc, #332]	@ (8013b54 <HAL_GPIO_Init+0x3a0>)
 8013a06:	4293      	cmp	r3, r2
 8013a08:	d00f      	beq.n	8013a2a <HAL_GPIO_Init+0x276>
 8013a0a:	687b      	ldr	r3, [r7, #4]
 8013a0c:	4a52      	ldr	r2, [pc, #328]	@ (8013b58 <HAL_GPIO_Init+0x3a4>)
 8013a0e:	4293      	cmp	r3, r2
 8013a10:	d00b      	beq.n	8013a2a <HAL_GPIO_Init+0x276>
 8013a12:	687b      	ldr	r3, [r7, #4]
 8013a14:	4a51      	ldr	r2, [pc, #324]	@ (8013b5c <HAL_GPIO_Init+0x3a8>)
 8013a16:	4293      	cmp	r3, r2
 8013a18:	d007      	beq.n	8013a2a <HAL_GPIO_Init+0x276>
 8013a1a:	687b      	ldr	r3, [r7, #4]
 8013a1c:	4a50      	ldr	r2, [pc, #320]	@ (8013b60 <HAL_GPIO_Init+0x3ac>)
 8013a1e:	4293      	cmp	r3, r2
 8013a20:	d003      	beq.n	8013a2a <HAL_GPIO_Init+0x276>
 8013a22:	21d9      	movs	r1, #217	@ 0xd9
 8013a24:	4848      	ldr	r0, [pc, #288]	@ (8013b48 <HAL_GPIO_Init+0x394>)
 8013a26:	f7fe fb67 	bl	80120f8 <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8013a2a:	683b      	ldr	r3, [r7, #0]
 8013a2c:	691b      	ldr	r3, [r3, #16]
 8013a2e:	2b0f      	cmp	r3, #15
 8013a30:	d903      	bls.n	8013a3a <HAL_GPIO_Init+0x286>
 8013a32:	21da      	movs	r1, #218	@ 0xda
 8013a34:	4844      	ldr	r0, [pc, #272]	@ (8013b48 <HAL_GPIO_Init+0x394>)
 8013a36:	f7fe fb5f 	bl	80120f8 <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	08da      	lsrs	r2, r3, #3
 8013a3e:	687b      	ldr	r3, [r7, #4]
 8013a40:	3208      	adds	r2, #8
 8013a42:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8013a46:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	f003 0307 	and.w	r3, r3, #7
 8013a4e:	009b      	lsls	r3, r3, #2
 8013a50:	220f      	movs	r2, #15
 8013a52:	fa02 f303 	lsl.w	r3, r2, r3
 8013a56:	43db      	mvns	r3, r3
 8013a58:	693a      	ldr	r2, [r7, #16]
 8013a5a:	4013      	ands	r3, r2
 8013a5c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8013a5e:	683b      	ldr	r3, [r7, #0]
 8013a60:	691a      	ldr	r2, [r3, #16]
 8013a62:	697b      	ldr	r3, [r7, #20]
 8013a64:	f003 0307 	and.w	r3, r3, #7
 8013a68:	009b      	lsls	r3, r3, #2
 8013a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8013a6e:	693a      	ldr	r2, [r7, #16]
 8013a70:	4313      	orrs	r3, r2
 8013a72:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	08da      	lsrs	r2, r3, #3
 8013a78:	687b      	ldr	r3, [r7, #4]
 8013a7a:	3208      	adds	r2, #8
 8013a7c:	6939      	ldr	r1, [r7, #16]
 8013a7e:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8013a82:	687b      	ldr	r3, [r7, #4]
 8013a84:	681b      	ldr	r3, [r3, #0]
 8013a86:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8013a88:	697b      	ldr	r3, [r7, #20]
 8013a8a:	005b      	lsls	r3, r3, #1
 8013a8c:	2203      	movs	r2, #3
 8013a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8013a92:	43db      	mvns	r3, r3
 8013a94:	693a      	ldr	r2, [r7, #16]
 8013a96:	4013      	ands	r3, r2
 8013a98:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8013a9a:	683b      	ldr	r3, [r7, #0]
 8013a9c:	685b      	ldr	r3, [r3, #4]
 8013a9e:	f003 0203 	and.w	r2, r3, #3
 8013aa2:	697b      	ldr	r3, [r7, #20]
 8013aa4:	005b      	lsls	r3, r3, #1
 8013aa6:	fa02 f303 	lsl.w	r3, r2, r3
 8013aaa:	693a      	ldr	r2, [r7, #16]
 8013aac:	4313      	orrs	r3, r2
 8013aae:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8013ab0:	687b      	ldr	r3, [r7, #4]
 8013ab2:	693a      	ldr	r2, [r7, #16]
 8013ab4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8013ab6:	683b      	ldr	r3, [r7, #0]
 8013ab8:	685b      	ldr	r3, [r3, #4]
 8013aba:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8013abe:	2b00      	cmp	r3, #0
 8013ac0:	f000 80b8 	beq.w	8013c34 <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8013ac4:	4b27      	ldr	r3, [pc, #156]	@ (8013b64 <HAL_GPIO_Init+0x3b0>)
 8013ac6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013ac8:	4a26      	ldr	r2, [pc, #152]	@ (8013b64 <HAL_GPIO_Init+0x3b0>)
 8013aca:	f043 0301 	orr.w	r3, r3, #1
 8013ace:	6613      	str	r3, [r2, #96]	@ 0x60
 8013ad0:	4b24      	ldr	r3, [pc, #144]	@ (8013b64 <HAL_GPIO_Init+0x3b0>)
 8013ad2:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013ad4:	f003 0301 	and.w	r3, r3, #1
 8013ad8:	60bb      	str	r3, [r7, #8]
 8013ada:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8013adc:	4a22      	ldr	r2, [pc, #136]	@ (8013b68 <HAL_GPIO_Init+0x3b4>)
 8013ade:	697b      	ldr	r3, [r7, #20]
 8013ae0:	089b      	lsrs	r3, r3, #2
 8013ae2:	3302      	adds	r3, #2
 8013ae4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013ae8:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8013aea:	697b      	ldr	r3, [r7, #20]
 8013aec:	f003 0303 	and.w	r3, r3, #3
 8013af0:	009b      	lsls	r3, r3, #2
 8013af2:	220f      	movs	r2, #15
 8013af4:	fa02 f303 	lsl.w	r3, r2, r3
 8013af8:	43db      	mvns	r3, r3
 8013afa:	693a      	ldr	r2, [r7, #16]
 8013afc:	4013      	ands	r3, r2
 8013afe:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8013b00:	687b      	ldr	r3, [r7, #4]
 8013b02:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8013b06:	d031      	beq.n	8013b6c <HAL_GPIO_Init+0x3b8>
 8013b08:	687b      	ldr	r3, [r7, #4]
 8013b0a:	4a10      	ldr	r2, [pc, #64]	@ (8013b4c <HAL_GPIO_Init+0x398>)
 8013b0c:	4293      	cmp	r3, r2
 8013b0e:	d019      	beq.n	8013b44 <HAL_GPIO_Init+0x390>
 8013b10:	687b      	ldr	r3, [r7, #4]
 8013b12:	4a0f      	ldr	r2, [pc, #60]	@ (8013b50 <HAL_GPIO_Init+0x39c>)
 8013b14:	4293      	cmp	r3, r2
 8013b16:	d013      	beq.n	8013b40 <HAL_GPIO_Init+0x38c>
 8013b18:	687b      	ldr	r3, [r7, #4]
 8013b1a:	4a0e      	ldr	r2, [pc, #56]	@ (8013b54 <HAL_GPIO_Init+0x3a0>)
 8013b1c:	4293      	cmp	r3, r2
 8013b1e:	d00d      	beq.n	8013b3c <HAL_GPIO_Init+0x388>
 8013b20:	687b      	ldr	r3, [r7, #4]
 8013b22:	4a0d      	ldr	r2, [pc, #52]	@ (8013b58 <HAL_GPIO_Init+0x3a4>)
 8013b24:	4293      	cmp	r3, r2
 8013b26:	d007      	beq.n	8013b38 <HAL_GPIO_Init+0x384>
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	4a0c      	ldr	r2, [pc, #48]	@ (8013b5c <HAL_GPIO_Init+0x3a8>)
 8013b2c:	4293      	cmp	r3, r2
 8013b2e:	d101      	bne.n	8013b34 <HAL_GPIO_Init+0x380>
 8013b30:	2305      	movs	r3, #5
 8013b32:	e01c      	b.n	8013b6e <HAL_GPIO_Init+0x3ba>
 8013b34:	2306      	movs	r3, #6
 8013b36:	e01a      	b.n	8013b6e <HAL_GPIO_Init+0x3ba>
 8013b38:	2304      	movs	r3, #4
 8013b3a:	e018      	b.n	8013b6e <HAL_GPIO_Init+0x3ba>
 8013b3c:	2303      	movs	r3, #3
 8013b3e:	e016      	b.n	8013b6e <HAL_GPIO_Init+0x3ba>
 8013b40:	2302      	movs	r3, #2
 8013b42:	e014      	b.n	8013b6e <HAL_GPIO_Init+0x3ba>
 8013b44:	2301      	movs	r3, #1
 8013b46:	e012      	b.n	8013b6e <HAL_GPIO_Init+0x3ba>
 8013b48:	0801ac9c 	.word	0x0801ac9c
 8013b4c:	48000400 	.word	0x48000400
 8013b50:	48000800 	.word	0x48000800
 8013b54:	48000c00 	.word	0x48000c00
 8013b58:	48001000 	.word	0x48001000
 8013b5c:	48001400 	.word	0x48001400
 8013b60:	48001800 	.word	0x48001800
 8013b64:	40021000 	.word	0x40021000
 8013b68:	40010000 	.word	0x40010000
 8013b6c:	2300      	movs	r3, #0
 8013b6e:	697a      	ldr	r2, [r7, #20]
 8013b70:	f002 0203 	and.w	r2, r2, #3
 8013b74:	0092      	lsls	r2, r2, #2
 8013b76:	4093      	lsls	r3, r2
 8013b78:	693a      	ldr	r2, [r7, #16]
 8013b7a:	4313      	orrs	r3, r2
 8013b7c:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8013b7e:	4935      	ldr	r1, [pc, #212]	@ (8013c54 <HAL_GPIO_Init+0x4a0>)
 8013b80:	697b      	ldr	r3, [r7, #20]
 8013b82:	089b      	lsrs	r3, r3, #2
 8013b84:	3302      	adds	r3, #2
 8013b86:	693a      	ldr	r2, [r7, #16]
 8013b88:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8013b8c:	4b32      	ldr	r3, [pc, #200]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013b8e:	689b      	ldr	r3, [r3, #8]
 8013b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	43db      	mvns	r3, r3
 8013b96:	693a      	ldr	r2, [r7, #16]
 8013b98:	4013      	ands	r3, r2
 8013b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8013b9c:	683b      	ldr	r3, [r7, #0]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8013ba4:	2b00      	cmp	r3, #0
 8013ba6:	d003      	beq.n	8013bb0 <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 8013ba8:	693a      	ldr	r2, [r7, #16]
 8013baa:	68fb      	ldr	r3, [r7, #12]
 8013bac:	4313      	orrs	r3, r2
 8013bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8013bb0:	4a29      	ldr	r2, [pc, #164]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013bb2:	693b      	ldr	r3, [r7, #16]
 8013bb4:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8013bb6:	4b28      	ldr	r3, [pc, #160]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013bb8:	68db      	ldr	r3, [r3, #12]
 8013bba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013bbc:	68fb      	ldr	r3, [r7, #12]
 8013bbe:	43db      	mvns	r3, r3
 8013bc0:	693a      	ldr	r2, [r7, #16]
 8013bc2:	4013      	ands	r3, r2
 8013bc4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8013bc6:	683b      	ldr	r3, [r7, #0]
 8013bc8:	685b      	ldr	r3, [r3, #4]
 8013bca:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8013bce:	2b00      	cmp	r3, #0
 8013bd0:	d003      	beq.n	8013bda <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 8013bd2:	693a      	ldr	r2, [r7, #16]
 8013bd4:	68fb      	ldr	r3, [r7, #12]
 8013bd6:	4313      	orrs	r3, r2
 8013bd8:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8013bda:	4a1f      	ldr	r2, [pc, #124]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013bdc:	693b      	ldr	r3, [r7, #16]
 8013bde:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8013be0:	4b1d      	ldr	r3, [pc, #116]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013be2:	685b      	ldr	r3, [r3, #4]
 8013be4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013be6:	68fb      	ldr	r3, [r7, #12]
 8013be8:	43db      	mvns	r3, r3
 8013bea:	693a      	ldr	r2, [r7, #16]
 8013bec:	4013      	ands	r3, r2
 8013bee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	685b      	ldr	r3, [r3, #4]
 8013bf4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d003      	beq.n	8013c04 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8013bfc:	693a      	ldr	r2, [r7, #16]
 8013bfe:	68fb      	ldr	r3, [r7, #12]
 8013c00:	4313      	orrs	r3, r2
 8013c02:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8013c04:	4a14      	ldr	r2, [pc, #80]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013c06:	693b      	ldr	r3, [r7, #16]
 8013c08:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8013c0a:	4b13      	ldr	r3, [pc, #76]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013c0c:	681b      	ldr	r3, [r3, #0]
 8013c0e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8013c10:	68fb      	ldr	r3, [r7, #12]
 8013c12:	43db      	mvns	r3, r3
 8013c14:	693a      	ldr	r2, [r7, #16]
 8013c16:	4013      	ands	r3, r2
 8013c18:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8013c1a:	683b      	ldr	r3, [r7, #0]
 8013c1c:	685b      	ldr	r3, [r3, #4]
 8013c1e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8013c22:	2b00      	cmp	r3, #0
 8013c24:	d003      	beq.n	8013c2e <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 8013c26:	693a      	ldr	r2, [r7, #16]
 8013c28:	68fb      	ldr	r3, [r7, #12]
 8013c2a:	4313      	orrs	r3, r2
 8013c2c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8013c2e:	4a0a      	ldr	r2, [pc, #40]	@ (8013c58 <HAL_GPIO_Init+0x4a4>)
 8013c30:	693b      	ldr	r3, [r7, #16]
 8013c32:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8013c34:	697b      	ldr	r3, [r7, #20]
 8013c36:	3301      	adds	r3, #1
 8013c38:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8013c3a:	683b      	ldr	r3, [r7, #0]
 8013c3c:	681a      	ldr	r2, [r3, #0]
 8013c3e:	697b      	ldr	r3, [r7, #20]
 8013c40:	fa22 f303 	lsr.w	r3, r2, r3
 8013c44:	2b00      	cmp	r3, #0
 8013c46:	f47f ae3f 	bne.w	80138c8 <HAL_GPIO_Init+0x114>
  }
}
 8013c4a:	bf00      	nop
 8013c4c:	bf00      	nop
 8013c4e:	3718      	adds	r7, #24
 8013c50:	46bd      	mov	sp, r7
 8013c52:	bd80      	pop	{r7, pc}
 8013c54:	40010000 	.word	0x40010000
 8013c58:	40010400 	.word	0x40010400

08013c5c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8013c5c:	b580      	push	{r7, lr}
 8013c5e:	b084      	sub	sp, #16
 8013c60:	af00      	add	r7, sp, #0
 8013c62:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8013c64:	687b      	ldr	r3, [r7, #4]
 8013c66:	2b00      	cmp	r3, #0
 8013c68:	d00b      	beq.n	8013c82 <HAL_PWREx_ControlVoltageScaling+0x26>
 8013c6a:	687b      	ldr	r3, [r7, #4]
 8013c6c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013c70:	d007      	beq.n	8013c82 <HAL_PWREx_ControlVoltageScaling+0x26>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013c78:	d003      	beq.n	8013c82 <HAL_PWREx_ControlVoltageScaling+0x26>
 8013c7a:	219d      	movs	r1, #157	@ 0x9d
 8013c7c:	484d      	ldr	r0, [pc, #308]	@ (8013db4 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8013c7e:	f7fe fa3b 	bl	80120f8 <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8013c82:	687b      	ldr	r3, [r7, #4]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	d141      	bne.n	8013d0c <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8013c88:	4b4b      	ldr	r3, [pc, #300]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013c8a:	681b      	ldr	r3, [r3, #0]
 8013c8c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013c90:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013c94:	d131      	bne.n	8013cfa <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013c96:	4b48      	ldr	r3, [pc, #288]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013c98:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013c9c:	4a46      	ldr	r2, [pc, #280]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013c9e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013ca2:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8013ca6:	4b44      	ldr	r3, [pc, #272]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013ca8:	681b      	ldr	r3, [r3, #0]
 8013caa:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8013cae:	4a42      	ldr	r2, [pc, #264]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013cb0:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8013cb4:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8013cb6:	4b41      	ldr	r3, [pc, #260]	@ (8013dbc <HAL_PWREx_ControlVoltageScaling+0x160>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	2232      	movs	r2, #50	@ 0x32
 8013cbc:	fb02 f303 	mul.w	r3, r2, r3
 8013cc0:	4a3f      	ldr	r2, [pc, #252]	@ (8013dc0 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8013cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8013cc6:	0c9b      	lsrs	r3, r3, #18
 8013cc8:	3301      	adds	r3, #1
 8013cca:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013ccc:	e002      	b.n	8013cd4 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8013cce:	68fb      	ldr	r3, [r7, #12]
 8013cd0:	3b01      	subs	r3, #1
 8013cd2:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013cd4:	4b38      	ldr	r3, [pc, #224]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013cd6:	695b      	ldr	r3, [r3, #20]
 8013cd8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013cdc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013ce0:	d102      	bne.n	8013ce8 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d1f2      	bne.n	8013cce <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8013ce8:	4b33      	ldr	r3, [pc, #204]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013cea:	695b      	ldr	r3, [r3, #20]
 8013cec:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013cf0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013cf4:	d158      	bne.n	8013da8 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8013cf6:	2303      	movs	r3, #3
 8013cf8:	e057      	b.n	8013daa <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013cfc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d00:	4a2d      	ldr	r2, [pc, #180]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d02:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8013d06:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8013d0a:	e04d      	b.n	8013da8 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8013d0c:	687b      	ldr	r3, [r7, #4]
 8013d0e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8013d12:	d141      	bne.n	8013d98 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8013d14:	4b28      	ldr	r3, [pc, #160]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d16:	681b      	ldr	r3, [r3, #0]
 8013d18:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8013d1c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013d20:	d131      	bne.n	8013d86 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013d22:	4b25      	ldr	r3, [pc, #148]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d24:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d28:	4a23      	ldr	r2, [pc, #140]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d2a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d2e:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8013d32:	4b21      	ldr	r3, [pc, #132]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8013d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d3c:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8013d40:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8013d42:	4b1e      	ldr	r3, [pc, #120]	@ (8013dbc <HAL_PWREx_ControlVoltageScaling+0x160>)
 8013d44:	681b      	ldr	r3, [r3, #0]
 8013d46:	2232      	movs	r2, #50	@ 0x32
 8013d48:	fb02 f303 	mul.w	r3, r2, r3
 8013d4c:	4a1c      	ldr	r2, [pc, #112]	@ (8013dc0 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8013d4e:	fba2 2303 	umull	r2, r3, r2, r3
 8013d52:	0c9b      	lsrs	r3, r3, #18
 8013d54:	3301      	adds	r3, #1
 8013d56:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013d58:	e002      	b.n	8013d60 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8013d5a:	68fb      	ldr	r3, [r7, #12]
 8013d5c:	3b01      	subs	r3, #1
 8013d5e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8013d60:	4b15      	ldr	r3, [pc, #84]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d62:	695b      	ldr	r3, [r3, #20]
 8013d64:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013d68:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013d6c:	d102      	bne.n	8013d74 <HAL_PWREx_ControlVoltageScaling+0x118>
 8013d6e:	68fb      	ldr	r3, [r7, #12]
 8013d70:	2b00      	cmp	r3, #0
 8013d72:	d1f2      	bne.n	8013d5a <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8013d74:	4b10      	ldr	r3, [pc, #64]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d76:	695b      	ldr	r3, [r3, #20]
 8013d78:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013d7c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8013d80:	d112      	bne.n	8013da8 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8013d82:	2303      	movs	r3, #3
 8013d84:	e011      	b.n	8013daa <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8013d86:	4b0c      	ldr	r3, [pc, #48]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d88:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8013d8c:	4a0a      	ldr	r2, [pc, #40]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d8e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8013d92:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8013d96:	e007      	b.n	8013da8 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8013d98:	4b07      	ldr	r3, [pc, #28]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013d9a:	681b      	ldr	r3, [r3, #0]
 8013d9c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8013da0:	4a05      	ldr	r2, [pc, #20]	@ (8013db8 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8013da2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8013da6:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8013da8:	2300      	movs	r3, #0
}
 8013daa:	4618      	mov	r0, r3
 8013dac:	3710      	adds	r7, #16
 8013dae:	46bd      	mov	sp, r7
 8013db0:	bd80      	pop	{r7, pc}
 8013db2:	bf00      	nop
 8013db4:	0801acd8 	.word	0x0801acd8
 8013db8:	40007000 	.word	0x40007000
 8013dbc:	20000000 	.word	0x20000000
 8013dc0:	431bde83 	.word	0x431bde83

08013dc4 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8013dc4:	b480      	push	{r7}
 8013dc6:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8013dc8:	4b05      	ldr	r3, [pc, #20]	@ (8013de0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8013dca:	689b      	ldr	r3, [r3, #8]
 8013dcc:	4a04      	ldr	r2, [pc, #16]	@ (8013de0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8013dce:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8013dd2:	6093      	str	r3, [r2, #8]
}
 8013dd4:	bf00      	nop
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013ddc:	4770      	bx	lr
 8013dde:	bf00      	nop
 8013de0:	40007000 	.word	0x40007000

08013de4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8013de4:	b580      	push	{r7, lr}
 8013de6:	b088      	sub	sp, #32
 8013de8:	af00      	add	r7, sp, #0
 8013dea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8013dec:	687b      	ldr	r3, [r7, #4]
 8013dee:	2b00      	cmp	r3, #0
 8013df0:	d101      	bne.n	8013df6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8013df2:	2301      	movs	r3, #1
 8013df4:	e3fc      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8013df6:	687b      	ldr	r3, [r7, #4]
 8013df8:	681b      	ldr	r3, [r3, #0]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d022      	beq.n	8013e44 <HAL_RCC_OscConfig+0x60>
 8013dfe:	687b      	ldr	r3, [r7, #4]
 8013e00:	681b      	ldr	r3, [r3, #0]
 8013e02:	f003 0301 	and.w	r3, r3, #1
 8013e06:	2b00      	cmp	r3, #0
 8013e08:	d11c      	bne.n	8013e44 <HAL_RCC_OscConfig+0x60>
 8013e0a:	687b      	ldr	r3, [r7, #4]
 8013e0c:	681b      	ldr	r3, [r3, #0]
 8013e0e:	f003 0302 	and.w	r3, r3, #2
 8013e12:	2b00      	cmp	r3, #0
 8013e14:	d116      	bne.n	8013e44 <HAL_RCC_OscConfig+0x60>
 8013e16:	687b      	ldr	r3, [r7, #4]
 8013e18:	681b      	ldr	r3, [r3, #0]
 8013e1a:	f003 0320 	and.w	r3, r3, #32
 8013e1e:	2b00      	cmp	r3, #0
 8013e20:	d110      	bne.n	8013e44 <HAL_RCC_OscConfig+0x60>
 8013e22:	687b      	ldr	r3, [r7, #4]
 8013e24:	681b      	ldr	r3, [r3, #0]
 8013e26:	f003 0308 	and.w	r3, r3, #8
 8013e2a:	2b00      	cmp	r3, #0
 8013e2c:	d10a      	bne.n	8013e44 <HAL_RCC_OscConfig+0x60>
 8013e2e:	687b      	ldr	r3, [r7, #4]
 8013e30:	681b      	ldr	r3, [r3, #0]
 8013e32:	f003 0304 	and.w	r3, r3, #4
 8013e36:	2b00      	cmp	r3, #0
 8013e38:	d104      	bne.n	8013e44 <HAL_RCC_OscConfig+0x60>
 8013e3a:	f240 1145 	movw	r1, #325	@ 0x145
 8013e3e:	4893      	ldr	r0, [pc, #588]	@ (801408c <HAL_RCC_OscConfig+0x2a8>)
 8013e40:	f7fe f95a 	bl	80120f8 <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	681b      	ldr	r3, [r3, #0]
 8013e48:	f003 0301 	and.w	r3, r3, #1
 8013e4c:	2b00      	cmp	r3, #0
 8013e4e:	f000 8089 	beq.w	8013f64 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8013e52:	687b      	ldr	r3, [r7, #4]
 8013e54:	685b      	ldr	r3, [r3, #4]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d00e      	beq.n	8013e78 <HAL_RCC_OscConfig+0x94>
 8013e5a:	687b      	ldr	r3, [r7, #4]
 8013e5c:	685b      	ldr	r3, [r3, #4]
 8013e5e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013e62:	d009      	beq.n	8013e78 <HAL_RCC_OscConfig+0x94>
 8013e64:	687b      	ldr	r3, [r7, #4]
 8013e66:	685b      	ldr	r3, [r3, #4]
 8013e68:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013e6c:	d004      	beq.n	8013e78 <HAL_RCC_OscConfig+0x94>
 8013e6e:	f240 114b 	movw	r1, #331	@ 0x14b
 8013e72:	4886      	ldr	r0, [pc, #536]	@ (801408c <HAL_RCC_OscConfig+0x2a8>)
 8013e74:	f7fe f940 	bl	80120f8 <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013e78:	4b85      	ldr	r3, [pc, #532]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013e7a:	689b      	ldr	r3, [r3, #8]
 8013e7c:	f003 030c 	and.w	r3, r3, #12
 8013e80:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013e82:	4b83      	ldr	r3, [pc, #524]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013e84:	68db      	ldr	r3, [r3, #12]
 8013e86:	f003 0303 	and.w	r3, r3, #3
 8013e8a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8013e8c:	69bb      	ldr	r3, [r7, #24]
 8013e8e:	2b0c      	cmp	r3, #12
 8013e90:	d102      	bne.n	8013e98 <HAL_RCC_OscConfig+0xb4>
 8013e92:	697b      	ldr	r3, [r7, #20]
 8013e94:	2b03      	cmp	r3, #3
 8013e96:	d002      	beq.n	8013e9e <HAL_RCC_OscConfig+0xba>
 8013e98:	69bb      	ldr	r3, [r7, #24]
 8013e9a:	2b08      	cmp	r3, #8
 8013e9c:	d10b      	bne.n	8013eb6 <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013e9e:	4b7c      	ldr	r3, [pc, #496]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013ea0:	681b      	ldr	r3, [r3, #0]
 8013ea2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013ea6:	2b00      	cmp	r3, #0
 8013ea8:	d05b      	beq.n	8013f62 <HAL_RCC_OscConfig+0x17e>
 8013eaa:	687b      	ldr	r3, [r7, #4]
 8013eac:	685b      	ldr	r3, [r3, #4]
 8013eae:	2b00      	cmp	r3, #0
 8013eb0:	d157      	bne.n	8013f62 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8013eb2:	2301      	movs	r3, #1
 8013eb4:	e39c      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8013eb6:	687b      	ldr	r3, [r7, #4]
 8013eb8:	685b      	ldr	r3, [r3, #4]
 8013eba:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8013ebe:	d106      	bne.n	8013ece <HAL_RCC_OscConfig+0xea>
 8013ec0:	4b73      	ldr	r3, [pc, #460]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013ec2:	681b      	ldr	r3, [r3, #0]
 8013ec4:	4a72      	ldr	r2, [pc, #456]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013ec6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013eca:	6013      	str	r3, [r2, #0]
 8013ecc:	e01d      	b.n	8013f0a <HAL_RCC_OscConfig+0x126>
 8013ece:	687b      	ldr	r3, [r7, #4]
 8013ed0:	685b      	ldr	r3, [r3, #4]
 8013ed2:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8013ed6:	d10c      	bne.n	8013ef2 <HAL_RCC_OscConfig+0x10e>
 8013ed8:	4b6d      	ldr	r3, [pc, #436]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	4a6c      	ldr	r2, [pc, #432]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013ede:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8013ee2:	6013      	str	r3, [r2, #0]
 8013ee4:	4b6a      	ldr	r3, [pc, #424]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013ee6:	681b      	ldr	r3, [r3, #0]
 8013ee8:	4a69      	ldr	r2, [pc, #420]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013eea:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8013eee:	6013      	str	r3, [r2, #0]
 8013ef0:	e00b      	b.n	8013f0a <HAL_RCC_OscConfig+0x126>
 8013ef2:	4b67      	ldr	r3, [pc, #412]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	4a66      	ldr	r2, [pc, #408]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013ef8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8013efc:	6013      	str	r3, [r2, #0]
 8013efe:	4b64      	ldr	r3, [pc, #400]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013f00:	681b      	ldr	r3, [r3, #0]
 8013f02:	4a63      	ldr	r2, [pc, #396]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013f04:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8013f08:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	685b      	ldr	r3, [r3, #4]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d013      	beq.n	8013f3a <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013f12:	f7fe fb95 	bl	8012640 <HAL_GetTick>
 8013f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013f18:	e008      	b.n	8013f2c <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013f1a:	f7fe fb91 	bl	8012640 <HAL_GetTick>
 8013f1e:	4602      	mov	r2, r0
 8013f20:	693b      	ldr	r3, [r7, #16]
 8013f22:	1ad3      	subs	r3, r2, r3
 8013f24:	2b64      	cmp	r3, #100	@ 0x64
 8013f26:	d901      	bls.n	8013f2c <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8013f28:	2303      	movs	r3, #3
 8013f2a:	e361      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8013f2c:	4b58      	ldr	r3, [pc, #352]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013f2e:	681b      	ldr	r3, [r3, #0]
 8013f30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013f34:	2b00      	cmp	r3, #0
 8013f36:	d0f0      	beq.n	8013f1a <HAL_RCC_OscConfig+0x136>
 8013f38:	e014      	b.n	8013f64 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8013f3a:	f7fe fb81 	bl	8012640 <HAL_GetTick>
 8013f3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013f40:	e008      	b.n	8013f54 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8013f42:	f7fe fb7d 	bl	8012640 <HAL_GetTick>
 8013f46:	4602      	mov	r2, r0
 8013f48:	693b      	ldr	r3, [r7, #16]
 8013f4a:	1ad3      	subs	r3, r2, r3
 8013f4c:	2b64      	cmp	r3, #100	@ 0x64
 8013f4e:	d901      	bls.n	8013f54 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 8013f50:	2303      	movs	r3, #3
 8013f52:	e34d      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8013f54:	4b4e      	ldr	r3, [pc, #312]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013f56:	681b      	ldr	r3, [r3, #0]
 8013f58:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8013f5c:	2b00      	cmp	r3, #0
 8013f5e:	d1f0      	bne.n	8013f42 <HAL_RCC_OscConfig+0x15e>
 8013f60:	e000      	b.n	8013f64 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8013f62:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8013f64:	687b      	ldr	r3, [r7, #4]
 8013f66:	681b      	ldr	r3, [r3, #0]
 8013f68:	f003 0302 	and.w	r3, r3, #2
 8013f6c:	2b00      	cmp	r3, #0
 8013f6e:	f000 8094 	beq.w	801409a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	68db      	ldr	r3, [r3, #12]
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d009      	beq.n	8013f8e <HAL_RCC_OscConfig+0x1aa>
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	68db      	ldr	r3, [r3, #12]
 8013f7e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8013f82:	d004      	beq.n	8013f8e <HAL_RCC_OscConfig+0x1aa>
 8013f84:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8013f88:	4840      	ldr	r0, [pc, #256]	@ (801408c <HAL_RCC_OscConfig+0x2a8>)
 8013f8a:	f7fe f8b5 	bl	80120f8 <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8013f8e:	687b      	ldr	r3, [r7, #4]
 8013f90:	691b      	ldr	r3, [r3, #16]
 8013f92:	2b7f      	cmp	r3, #127	@ 0x7f
 8013f94:	d904      	bls.n	8013fa0 <HAL_RCC_OscConfig+0x1bc>
 8013f96:	f240 1181 	movw	r1, #385	@ 0x181
 8013f9a:	483c      	ldr	r0, [pc, #240]	@ (801408c <HAL_RCC_OscConfig+0x2a8>)
 8013f9c:	f7fe f8ac 	bl	80120f8 <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8013fa0:	4b3b      	ldr	r3, [pc, #236]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013fa2:	689b      	ldr	r3, [r3, #8]
 8013fa4:	f003 030c 	and.w	r3, r3, #12
 8013fa8:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8013faa:	4b39      	ldr	r3, [pc, #228]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013fac:	68db      	ldr	r3, [r3, #12]
 8013fae:	f003 0303 	and.w	r3, r3, #3
 8013fb2:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8013fb4:	69bb      	ldr	r3, [r7, #24]
 8013fb6:	2b0c      	cmp	r3, #12
 8013fb8:	d102      	bne.n	8013fc0 <HAL_RCC_OscConfig+0x1dc>
 8013fba:	697b      	ldr	r3, [r7, #20]
 8013fbc:	2b02      	cmp	r3, #2
 8013fbe:	d002      	beq.n	8013fc6 <HAL_RCC_OscConfig+0x1e2>
 8013fc0:	69bb      	ldr	r3, [r7, #24]
 8013fc2:	2b04      	cmp	r3, #4
 8013fc4:	d11f      	bne.n	8014006 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8013fc6:	4b32      	ldr	r3, [pc, #200]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013fc8:	681b      	ldr	r3, [r3, #0]
 8013fca:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8013fce:	2b00      	cmp	r3, #0
 8013fd0:	d005      	beq.n	8013fde <HAL_RCC_OscConfig+0x1fa>
 8013fd2:	687b      	ldr	r3, [r7, #4]
 8013fd4:	68db      	ldr	r3, [r3, #12]
 8013fd6:	2b00      	cmp	r3, #0
 8013fd8:	d101      	bne.n	8013fde <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8013fda:	2301      	movs	r3, #1
 8013fdc:	e308      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8013fde:	4b2c      	ldr	r3, [pc, #176]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013fe0:	685b      	ldr	r3, [r3, #4]
 8013fe2:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	691b      	ldr	r3, [r3, #16]
 8013fea:	061b      	lsls	r3, r3, #24
 8013fec:	4928      	ldr	r1, [pc, #160]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8013fee:	4313      	orrs	r3, r2
 8013ff0:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8013ff2:	4b28      	ldr	r3, [pc, #160]	@ (8014094 <HAL_RCC_OscConfig+0x2b0>)
 8013ff4:	681b      	ldr	r3, [r3, #0]
 8013ff6:	4618      	mov	r0, r3
 8013ff8:	f7fe f8b4 	bl	8012164 <HAL_InitTick>
 8013ffc:	4603      	mov	r3, r0
 8013ffe:	2b00      	cmp	r3, #0
 8014000:	d04a      	beq.n	8014098 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8014002:	2301      	movs	r3, #1
 8014004:	e2f4      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8014006:	687b      	ldr	r3, [r7, #4]
 8014008:	68db      	ldr	r3, [r3, #12]
 801400a:	2b00      	cmp	r3, #0
 801400c:	d023      	beq.n	8014056 <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 801400e:	4b20      	ldr	r3, [pc, #128]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8014010:	681b      	ldr	r3, [r3, #0]
 8014012:	4a1f      	ldr	r2, [pc, #124]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8014014:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014018:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801401a:	f7fe fb11 	bl	8012640 <HAL_GetTick>
 801401e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014020:	e008      	b.n	8014034 <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8014022:	f7fe fb0d 	bl	8012640 <HAL_GetTick>
 8014026:	4602      	mov	r2, r0
 8014028:	693b      	ldr	r3, [r7, #16]
 801402a:	1ad3      	subs	r3, r2, r3
 801402c:	2b02      	cmp	r3, #2
 801402e:	d901      	bls.n	8014034 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8014030:	2303      	movs	r3, #3
 8014032:	e2dd      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014034:	4b16      	ldr	r3, [pc, #88]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8014036:	681b      	ldr	r3, [r3, #0]
 8014038:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801403c:	2b00      	cmp	r3, #0
 801403e:	d0f0      	beq.n	8014022 <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8014040:	4b13      	ldr	r3, [pc, #76]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8014042:	685b      	ldr	r3, [r3, #4]
 8014044:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8014048:	687b      	ldr	r3, [r7, #4]
 801404a:	691b      	ldr	r3, [r3, #16]
 801404c:	061b      	lsls	r3, r3, #24
 801404e:	4910      	ldr	r1, [pc, #64]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8014050:	4313      	orrs	r3, r2
 8014052:	604b      	str	r3, [r1, #4]
 8014054:	e021      	b.n	801409a <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8014056:	4b0e      	ldr	r3, [pc, #56]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 8014058:	681b      	ldr	r3, [r3, #0]
 801405a:	4a0d      	ldr	r2, [pc, #52]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 801405c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8014060:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014062:	f7fe faed 	bl	8012640 <HAL_GetTick>
 8014066:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8014068:	e008      	b.n	801407c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 801406a:	f7fe fae9 	bl	8012640 <HAL_GetTick>
 801406e:	4602      	mov	r2, r0
 8014070:	693b      	ldr	r3, [r7, #16]
 8014072:	1ad3      	subs	r3, r2, r3
 8014074:	2b02      	cmp	r3, #2
 8014076:	d901      	bls.n	801407c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8014078:	2303      	movs	r3, #3
 801407a:	e2b9      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 801407c:	4b04      	ldr	r3, [pc, #16]	@ (8014090 <HAL_RCC_OscConfig+0x2ac>)
 801407e:	681b      	ldr	r3, [r3, #0]
 8014080:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014084:	2b00      	cmp	r3, #0
 8014086:	d1f0      	bne.n	801406a <HAL_RCC_OscConfig+0x286>
 8014088:	e007      	b.n	801409a <HAL_RCC_OscConfig+0x2b6>
 801408a:	bf00      	nop
 801408c:	0801ad14 	.word	0x0801ad14
 8014090:	40021000 	.word	0x40021000
 8014094:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8014098:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	681b      	ldr	r3, [r3, #0]
 801409e:	f003 0308 	and.w	r3, r3, #8
 80140a2:	2b00      	cmp	r3, #0
 80140a4:	d049      	beq.n	801413a <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 80140a6:	687b      	ldr	r3, [r7, #4]
 80140a8:	695b      	ldr	r3, [r3, #20]
 80140aa:	2b00      	cmp	r3, #0
 80140ac:	d008      	beq.n	80140c0 <HAL_RCC_OscConfig+0x2dc>
 80140ae:	687b      	ldr	r3, [r7, #4]
 80140b0:	695b      	ldr	r3, [r3, #20]
 80140b2:	2b01      	cmp	r3, #1
 80140b4:	d004      	beq.n	80140c0 <HAL_RCC_OscConfig+0x2dc>
 80140b6:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 80140ba:	48a3      	ldr	r0, [pc, #652]	@ (8014348 <HAL_RCC_OscConfig+0x564>)
 80140bc:	f7fe f81c 	bl	80120f8 <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	695b      	ldr	r3, [r3, #20]
 80140c4:	2b00      	cmp	r3, #0
 80140c6:	d01c      	beq.n	8014102 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80140c8:	4ba0      	ldr	r3, [pc, #640]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80140ca:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80140ce:	4a9f      	ldr	r2, [pc, #636]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80140d0:	f043 0301 	orr.w	r3, r3, #1
 80140d4:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80140d8:	f7fe fab2 	bl	8012640 <HAL_GetTick>
 80140dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80140de:	e008      	b.n	80140f2 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80140e0:	f7fe faae 	bl	8012640 <HAL_GetTick>
 80140e4:	4602      	mov	r2, r0
 80140e6:	693b      	ldr	r3, [r7, #16]
 80140e8:	1ad3      	subs	r3, r2, r3
 80140ea:	2b02      	cmp	r3, #2
 80140ec:	d901      	bls.n	80140f2 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 80140ee:	2303      	movs	r3, #3
 80140f0:	e27e      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80140f2:	4b96      	ldr	r3, [pc, #600]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80140f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 80140f8:	f003 0302 	and.w	r3, r3, #2
 80140fc:	2b00      	cmp	r3, #0
 80140fe:	d0ef      	beq.n	80140e0 <HAL_RCC_OscConfig+0x2fc>
 8014100:	e01b      	b.n	801413a <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8014102:	4b92      	ldr	r3, [pc, #584]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014104:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014108:	4a90      	ldr	r2, [pc, #576]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 801410a:	f023 0301 	bic.w	r3, r3, #1
 801410e:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014112:	f7fe fa95 	bl	8012640 <HAL_GetTick>
 8014116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8014118:	e008      	b.n	801412c <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 801411a:	f7fe fa91 	bl	8012640 <HAL_GetTick>
 801411e:	4602      	mov	r2, r0
 8014120:	693b      	ldr	r3, [r7, #16]
 8014122:	1ad3      	subs	r3, r2, r3
 8014124:	2b02      	cmp	r3, #2
 8014126:	d901      	bls.n	801412c <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8014128:	2303      	movs	r3, #3
 801412a:	e261      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 801412c:	4b87      	ldr	r3, [pc, #540]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 801412e:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8014132:	f003 0302 	and.w	r3, r3, #2
 8014136:	2b00      	cmp	r3, #0
 8014138:	d1ef      	bne.n	801411a <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	681b      	ldr	r3, [r3, #0]
 801413e:	f003 0304 	and.w	r3, r3, #4
 8014142:	2b00      	cmp	r3, #0
 8014144:	f000 80b7 	beq.w	80142b6 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014148:	2300      	movs	r3, #0
 801414a:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 801414c:	687b      	ldr	r3, [r7, #4]
 801414e:	689b      	ldr	r3, [r3, #8]
 8014150:	2b00      	cmp	r3, #0
 8014152:	d00c      	beq.n	801416e <HAL_RCC_OscConfig+0x38a>
 8014154:	687b      	ldr	r3, [r7, #4]
 8014156:	689b      	ldr	r3, [r3, #8]
 8014158:	2b01      	cmp	r3, #1
 801415a:	d008      	beq.n	801416e <HAL_RCC_OscConfig+0x38a>
 801415c:	687b      	ldr	r3, [r7, #4]
 801415e:	689b      	ldr	r3, [r3, #8]
 8014160:	2b05      	cmp	r3, #5
 8014162:	d004      	beq.n	801416e <HAL_RCC_OscConfig+0x38a>
 8014164:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8014168:	4877      	ldr	r0, [pc, #476]	@ (8014348 <HAL_RCC_OscConfig+0x564>)
 801416a:	f7fd ffc5 	bl	80120f8 <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 801416e:	4b77      	ldr	r3, [pc, #476]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014170:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014172:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014176:	2b00      	cmp	r3, #0
 8014178:	d101      	bne.n	801417e <HAL_RCC_OscConfig+0x39a>
 801417a:	2301      	movs	r3, #1
 801417c:	e000      	b.n	8014180 <HAL_RCC_OscConfig+0x39c>
 801417e:	2300      	movs	r3, #0
 8014180:	2b00      	cmp	r3, #0
 8014182:	d00d      	beq.n	80141a0 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014184:	4b71      	ldr	r3, [pc, #452]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014186:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014188:	4a70      	ldr	r2, [pc, #448]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 801418a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 801418e:	6593      	str	r3, [r2, #88]	@ 0x58
 8014190:	4b6e      	ldr	r3, [pc, #440]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014192:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014194:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014198:	60fb      	str	r3, [r7, #12]
 801419a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 801419c:	2301      	movs	r3, #1
 801419e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80141a0:	4b6b      	ldr	r3, [pc, #428]	@ (8014350 <HAL_RCC_OscConfig+0x56c>)
 80141a2:	681b      	ldr	r3, [r3, #0]
 80141a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80141a8:	2b00      	cmp	r3, #0
 80141aa:	d118      	bne.n	80141de <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80141ac:	4b68      	ldr	r3, [pc, #416]	@ (8014350 <HAL_RCC_OscConfig+0x56c>)
 80141ae:	681b      	ldr	r3, [r3, #0]
 80141b0:	4a67      	ldr	r2, [pc, #412]	@ (8014350 <HAL_RCC_OscConfig+0x56c>)
 80141b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80141b6:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80141b8:	f7fe fa42 	bl	8012640 <HAL_GetTick>
 80141bc:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80141be:	e008      	b.n	80141d2 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80141c0:	f7fe fa3e 	bl	8012640 <HAL_GetTick>
 80141c4:	4602      	mov	r2, r0
 80141c6:	693b      	ldr	r3, [r7, #16]
 80141c8:	1ad3      	subs	r3, r2, r3
 80141ca:	2b02      	cmp	r3, #2
 80141cc:	d901      	bls.n	80141d2 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 80141ce:	2303      	movs	r3, #3
 80141d0:	e20e      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80141d2:	4b5f      	ldr	r3, [pc, #380]	@ (8014350 <HAL_RCC_OscConfig+0x56c>)
 80141d4:	681b      	ldr	r3, [r3, #0]
 80141d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80141da:	2b00      	cmp	r3, #0
 80141dc:	d0f0      	beq.n	80141c0 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80141de:	687b      	ldr	r3, [r7, #4]
 80141e0:	689b      	ldr	r3, [r3, #8]
 80141e2:	2b01      	cmp	r3, #1
 80141e4:	d108      	bne.n	80141f8 <HAL_RCC_OscConfig+0x414>
 80141e6:	4b59      	ldr	r3, [pc, #356]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80141e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80141ec:	4a57      	ldr	r2, [pc, #348]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80141ee:	f043 0301 	orr.w	r3, r3, #1
 80141f2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80141f6:	e024      	b.n	8014242 <HAL_RCC_OscConfig+0x45e>
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	689b      	ldr	r3, [r3, #8]
 80141fc:	2b05      	cmp	r3, #5
 80141fe:	d110      	bne.n	8014222 <HAL_RCC_OscConfig+0x43e>
 8014200:	4b52      	ldr	r3, [pc, #328]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014202:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014206:	4a51      	ldr	r2, [pc, #324]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014208:	f043 0304 	orr.w	r3, r3, #4
 801420c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014210:	4b4e      	ldr	r3, [pc, #312]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014212:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014216:	4a4d      	ldr	r2, [pc, #308]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014218:	f043 0301 	orr.w	r3, r3, #1
 801421c:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014220:	e00f      	b.n	8014242 <HAL_RCC_OscConfig+0x45e>
 8014222:	4b4a      	ldr	r3, [pc, #296]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014224:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014228:	4a48      	ldr	r2, [pc, #288]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 801422a:	f023 0301 	bic.w	r3, r3, #1
 801422e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 8014232:	4b46      	ldr	r3, [pc, #280]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014234:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014238:	4a44      	ldr	r2, [pc, #272]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 801423a:	f023 0304 	bic.w	r3, r3, #4
 801423e:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8014242:	687b      	ldr	r3, [r7, #4]
 8014244:	689b      	ldr	r3, [r3, #8]
 8014246:	2b00      	cmp	r3, #0
 8014248:	d016      	beq.n	8014278 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801424a:	f7fe f9f9 	bl	8012640 <HAL_GetTick>
 801424e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014250:	e00a      	b.n	8014268 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014252:	f7fe f9f5 	bl	8012640 <HAL_GetTick>
 8014256:	4602      	mov	r2, r0
 8014258:	693b      	ldr	r3, [r7, #16]
 801425a:	1ad3      	subs	r3, r2, r3
 801425c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014260:	4293      	cmp	r3, r2
 8014262:	d901      	bls.n	8014268 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8014264:	2303      	movs	r3, #3
 8014266:	e1c3      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014268:	4b38      	ldr	r3, [pc, #224]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 801426a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801426e:	f003 0302 	and.w	r3, r3, #2
 8014272:	2b00      	cmp	r3, #0
 8014274:	d0ed      	beq.n	8014252 <HAL_RCC_OscConfig+0x46e>
 8014276:	e015      	b.n	80142a4 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8014278:	f7fe f9e2 	bl	8012640 <HAL_GetTick>
 801427c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 801427e:	e00a      	b.n	8014296 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014280:	f7fe f9de 	bl	8012640 <HAL_GetTick>
 8014284:	4602      	mov	r2, r0
 8014286:	693b      	ldr	r3, [r7, #16]
 8014288:	1ad3      	subs	r3, r2, r3
 801428a:	f241 3288 	movw	r2, #5000	@ 0x1388
 801428e:	4293      	cmp	r3, r2
 8014290:	d901      	bls.n	8014296 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8014292:	2303      	movs	r3, #3
 8014294:	e1ac      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8014296:	4b2d      	ldr	r3, [pc, #180]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014298:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801429c:	f003 0302 	and.w	r3, r3, #2
 80142a0:	2b00      	cmp	r3, #0
 80142a2:	d1ed      	bne.n	8014280 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80142a4:	7ffb      	ldrb	r3, [r7, #31]
 80142a6:	2b01      	cmp	r3, #1
 80142a8:	d105      	bne.n	80142b6 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80142aa:	4b28      	ldr	r3, [pc, #160]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80142ac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80142ae:	4a27      	ldr	r2, [pc, #156]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80142b0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80142b4:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80142b6:	687b      	ldr	r3, [r7, #4]
 80142b8:	681b      	ldr	r3, [r3, #0]
 80142ba:	f003 0320 	and.w	r3, r3, #32
 80142be:	2b00      	cmp	r3, #0
 80142c0:	d04f      	beq.n	8014362 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 80142c2:	687b      	ldr	r3, [r7, #4]
 80142c4:	699b      	ldr	r3, [r3, #24]
 80142c6:	2b00      	cmp	r3, #0
 80142c8:	d008      	beq.n	80142dc <HAL_RCC_OscConfig+0x4f8>
 80142ca:	687b      	ldr	r3, [r7, #4]
 80142cc:	699b      	ldr	r3, [r3, #24]
 80142ce:	2b01      	cmp	r3, #1
 80142d0:	d004      	beq.n	80142dc <HAL_RCC_OscConfig+0x4f8>
 80142d2:	f240 213b 	movw	r1, #571	@ 0x23b
 80142d6:	481c      	ldr	r0, [pc, #112]	@ (8014348 <HAL_RCC_OscConfig+0x564>)
 80142d8:	f7fd ff0e 	bl	80120f8 <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80142dc:	687b      	ldr	r3, [r7, #4]
 80142de:	699b      	ldr	r3, [r3, #24]
 80142e0:	2b00      	cmp	r3, #0
 80142e2:	d01c      	beq.n	801431e <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80142e4:	4b19      	ldr	r3, [pc, #100]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80142e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80142ea:	4a18      	ldr	r2, [pc, #96]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 80142ec:	f043 0301 	orr.w	r3, r3, #1
 80142f0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80142f4:	f7fe f9a4 	bl	8012640 <HAL_GetTick>
 80142f8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80142fa:	e008      	b.n	801430e <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80142fc:	f7fe f9a0 	bl	8012640 <HAL_GetTick>
 8014300:	4602      	mov	r2, r0
 8014302:	693b      	ldr	r3, [r7, #16]
 8014304:	1ad3      	subs	r3, r2, r3
 8014306:	2b02      	cmp	r3, #2
 8014308:	d901      	bls.n	801430e <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 801430a:	2303      	movs	r3, #3
 801430c:	e170      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 801430e:	4b0f      	ldr	r3, [pc, #60]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014310:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014314:	f003 0302 	and.w	r3, r3, #2
 8014318:	2b00      	cmp	r3, #0
 801431a:	d0ef      	beq.n	80142fc <HAL_RCC_OscConfig+0x518>
 801431c:	e021      	b.n	8014362 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 801431e:	4b0b      	ldr	r3, [pc, #44]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014320:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 8014324:	4a09      	ldr	r2, [pc, #36]	@ (801434c <HAL_RCC_OscConfig+0x568>)
 8014326:	f023 0301 	bic.w	r3, r3, #1
 801432a:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 801432e:	f7fe f987 	bl	8012640 <HAL_GetTick>
 8014332:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014334:	e00e      	b.n	8014354 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8014336:	f7fe f983 	bl	8012640 <HAL_GetTick>
 801433a:	4602      	mov	r2, r0
 801433c:	693b      	ldr	r3, [r7, #16]
 801433e:	1ad3      	subs	r3, r2, r3
 8014340:	2b02      	cmp	r3, #2
 8014342:	d907      	bls.n	8014354 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 8014344:	2303      	movs	r3, #3
 8014346:	e153      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
 8014348:	0801ad14 	.word	0x0801ad14
 801434c:	40021000 	.word	0x40021000
 8014350:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8014354:	4b85      	ldr	r3, [pc, #532]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014356:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 801435a:	f003 0302 	and.w	r3, r3, #2
 801435e:	2b00      	cmp	r3, #0
 8014360:	d1e9      	bne.n	8014336 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8014362:	687b      	ldr	r3, [r7, #4]
 8014364:	69db      	ldr	r3, [r3, #28]
 8014366:	2b00      	cmp	r3, #0
 8014368:	d00c      	beq.n	8014384 <HAL_RCC_OscConfig+0x5a0>
 801436a:	687b      	ldr	r3, [r7, #4]
 801436c:	69db      	ldr	r3, [r3, #28]
 801436e:	2b01      	cmp	r3, #1
 8014370:	d008      	beq.n	8014384 <HAL_RCC_OscConfig+0x5a0>
 8014372:	687b      	ldr	r3, [r7, #4]
 8014374:	69db      	ldr	r3, [r3, #28]
 8014376:	2b02      	cmp	r3, #2
 8014378:	d004      	beq.n	8014384 <HAL_RCC_OscConfig+0x5a0>
 801437a:	f44f 7119 	mov.w	r1, #612	@ 0x264
 801437e:	487c      	ldr	r0, [pc, #496]	@ (8014570 <HAL_RCC_OscConfig+0x78c>)
 8014380:	f7fd feba 	bl	80120f8 <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8014384:	687b      	ldr	r3, [r7, #4]
 8014386:	69db      	ldr	r3, [r3, #28]
 8014388:	2b00      	cmp	r3, #0
 801438a:	f000 8130 	beq.w	80145ee <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 801438e:	4b77      	ldr	r3, [pc, #476]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014390:	689b      	ldr	r3, [r3, #8]
 8014392:	f003 030c 	and.w	r3, r3, #12
 8014396:	2b0c      	cmp	r3, #12
 8014398:	f000 80e2 	beq.w	8014560 <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 801439c:	687b      	ldr	r3, [r7, #4]
 801439e:	69db      	ldr	r3, [r3, #28]
 80143a0:	2b02      	cmp	r3, #2
 80143a2:	f040 80bd 	bne.w	8014520 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 80143a6:	687b      	ldr	r3, [r7, #4]
 80143a8:	6a1b      	ldr	r3, [r3, #32]
 80143aa:	2b00      	cmp	r3, #0
 80143ac:	d00c      	beq.n	80143c8 <HAL_RCC_OscConfig+0x5e4>
 80143ae:	687b      	ldr	r3, [r7, #4]
 80143b0:	6a1b      	ldr	r3, [r3, #32]
 80143b2:	2b02      	cmp	r3, #2
 80143b4:	d008      	beq.n	80143c8 <HAL_RCC_OscConfig+0x5e4>
 80143b6:	687b      	ldr	r3, [r7, #4]
 80143b8:	6a1b      	ldr	r3, [r3, #32]
 80143ba:	2b03      	cmp	r3, #3
 80143bc:	d004      	beq.n	80143c8 <HAL_RCC_OscConfig+0x5e4>
 80143be:	f240 216e 	movw	r1, #622	@ 0x26e
 80143c2:	486b      	ldr	r0, [pc, #428]	@ (8014570 <HAL_RCC_OscConfig+0x78c>)
 80143c4:	f7fd fe98 	bl	80120f8 <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 80143c8:	687b      	ldr	r3, [r7, #4]
 80143ca:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143cc:	2b00      	cmp	r3, #0
 80143ce:	d003      	beq.n	80143d8 <HAL_RCC_OscConfig+0x5f4>
 80143d0:	687b      	ldr	r3, [r7, #4]
 80143d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80143d4:	2b10      	cmp	r3, #16
 80143d6:	d904      	bls.n	80143e2 <HAL_RCC_OscConfig+0x5fe>
 80143d8:	f240 216f 	movw	r1, #623	@ 0x26f
 80143dc:	4864      	ldr	r0, [pc, #400]	@ (8014570 <HAL_RCC_OscConfig+0x78c>)
 80143de:	f7fd fe8b 	bl	80120f8 <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143e6:	2b07      	cmp	r3, #7
 80143e8:	d903      	bls.n	80143f2 <HAL_RCC_OscConfig+0x60e>
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80143ee:	2b7f      	cmp	r3, #127	@ 0x7f
 80143f0:	d904      	bls.n	80143fc <HAL_RCC_OscConfig+0x618>
 80143f2:	f44f 711c 	mov.w	r1, #624	@ 0x270
 80143f6:	485e      	ldr	r0, [pc, #376]	@ (8014570 <HAL_RCC_OscConfig+0x78c>)
 80143f8:	f7fd fe7e 	bl	80120f8 <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014400:	2b01      	cmp	r3, #1
 8014402:	d903      	bls.n	801440c <HAL_RCC_OscConfig+0x628>
 8014404:	687b      	ldr	r3, [r7, #4]
 8014406:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8014408:	2b1f      	cmp	r3, #31
 801440a:	d904      	bls.n	8014416 <HAL_RCC_OscConfig+0x632>
 801440c:	f240 2171 	movw	r1, #625	@ 0x271
 8014410:	4857      	ldr	r0, [pc, #348]	@ (8014570 <HAL_RCC_OscConfig+0x78c>)
 8014412:	f7fd fe71 	bl	80120f8 <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801441a:	2b02      	cmp	r3, #2
 801441c:	d010      	beq.n	8014440 <HAL_RCC_OscConfig+0x65c>
 801441e:	687b      	ldr	r3, [r7, #4]
 8014420:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014422:	2b04      	cmp	r3, #4
 8014424:	d00c      	beq.n	8014440 <HAL_RCC_OscConfig+0x65c>
 8014426:	687b      	ldr	r3, [r7, #4]
 8014428:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801442a:	2b06      	cmp	r3, #6
 801442c:	d008      	beq.n	8014440 <HAL_RCC_OscConfig+0x65c>
 801442e:	687b      	ldr	r3, [r7, #4]
 8014430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8014432:	2b08      	cmp	r3, #8
 8014434:	d004      	beq.n	8014440 <HAL_RCC_OscConfig+0x65c>
 8014436:	f240 2172 	movw	r1, #626	@ 0x272
 801443a:	484d      	ldr	r0, [pc, #308]	@ (8014570 <HAL_RCC_OscConfig+0x78c>)
 801443c:	f7fd fe5c 	bl	80120f8 <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 8014440:	687b      	ldr	r3, [r7, #4]
 8014442:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014444:	2b02      	cmp	r3, #2
 8014446:	d010      	beq.n	801446a <HAL_RCC_OscConfig+0x686>
 8014448:	687b      	ldr	r3, [r7, #4]
 801444a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801444c:	2b04      	cmp	r3, #4
 801444e:	d00c      	beq.n	801446a <HAL_RCC_OscConfig+0x686>
 8014450:	687b      	ldr	r3, [r7, #4]
 8014452:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8014454:	2b06      	cmp	r3, #6
 8014456:	d008      	beq.n	801446a <HAL_RCC_OscConfig+0x686>
 8014458:	687b      	ldr	r3, [r7, #4]
 801445a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801445c:	2b08      	cmp	r3, #8
 801445e:	d004      	beq.n	801446a <HAL_RCC_OscConfig+0x686>
 8014460:	f240 2173 	movw	r1, #627	@ 0x273
 8014464:	4842      	ldr	r0, [pc, #264]	@ (8014570 <HAL_RCC_OscConfig+0x78c>)
 8014466:	f7fd fe47 	bl	80120f8 <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 801446a:	4b40      	ldr	r3, [pc, #256]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 801446c:	681b      	ldr	r3, [r3, #0]
 801446e:	4a3f      	ldr	r2, [pc, #252]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014470:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8014474:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014476:	f7fe f8e3 	bl	8012640 <HAL_GetTick>
 801447a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 801447c:	e008      	b.n	8014490 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 801447e:	f7fe f8df 	bl	8012640 <HAL_GetTick>
 8014482:	4602      	mov	r2, r0
 8014484:	693b      	ldr	r3, [r7, #16]
 8014486:	1ad3      	subs	r3, r2, r3
 8014488:	2b02      	cmp	r3, #2
 801448a:	d901      	bls.n	8014490 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 801448c:	2303      	movs	r3, #3
 801448e:	e0af      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014490:	4b36      	ldr	r3, [pc, #216]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014492:	681b      	ldr	r3, [r3, #0]
 8014494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8014498:	2b00      	cmp	r3, #0
 801449a:	d1f0      	bne.n	801447e <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 801449c:	4b33      	ldr	r3, [pc, #204]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 801449e:	68da      	ldr	r2, [r3, #12]
 80144a0:	4b34      	ldr	r3, [pc, #208]	@ (8014574 <HAL_RCC_OscConfig+0x790>)
 80144a2:	4013      	ands	r3, r2
 80144a4:	687a      	ldr	r2, [r7, #4]
 80144a6:	6a11      	ldr	r1, [r2, #32]
 80144a8:	687a      	ldr	r2, [r7, #4]
 80144aa:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80144ac:	3a01      	subs	r2, #1
 80144ae:	0112      	lsls	r2, r2, #4
 80144b0:	4311      	orrs	r1, r2
 80144b2:	687a      	ldr	r2, [r7, #4]
 80144b4:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 80144b6:	0212      	lsls	r2, r2, #8
 80144b8:	4311      	orrs	r1, r2
 80144ba:	687a      	ldr	r2, [r7, #4]
 80144bc:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 80144be:	0852      	lsrs	r2, r2, #1
 80144c0:	3a01      	subs	r2, #1
 80144c2:	0552      	lsls	r2, r2, #21
 80144c4:	4311      	orrs	r1, r2
 80144c6:	687a      	ldr	r2, [r7, #4]
 80144c8:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 80144ca:	0852      	lsrs	r2, r2, #1
 80144cc:	3a01      	subs	r2, #1
 80144ce:	0652      	lsls	r2, r2, #25
 80144d0:	4311      	orrs	r1, r2
 80144d2:	687a      	ldr	r2, [r7, #4]
 80144d4:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 80144d6:	06d2      	lsls	r2, r2, #27
 80144d8:	430a      	orrs	r2, r1
 80144da:	4924      	ldr	r1, [pc, #144]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 80144dc:	4313      	orrs	r3, r2
 80144de:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80144e0:	4b22      	ldr	r3, [pc, #136]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 80144e2:	681b      	ldr	r3, [r3, #0]
 80144e4:	4a21      	ldr	r2, [pc, #132]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 80144e6:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80144ea:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80144ec:	4b1f      	ldr	r3, [pc, #124]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 80144ee:	68db      	ldr	r3, [r3, #12]
 80144f0:	4a1e      	ldr	r2, [pc, #120]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 80144f2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80144f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80144f8:	f7fe f8a2 	bl	8012640 <HAL_GetTick>
 80144fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80144fe:	e008      	b.n	8014512 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014500:	f7fe f89e 	bl	8012640 <HAL_GetTick>
 8014504:	4602      	mov	r2, r0
 8014506:	693b      	ldr	r3, [r7, #16]
 8014508:	1ad3      	subs	r3, r2, r3
 801450a:	2b02      	cmp	r3, #2
 801450c:	d901      	bls.n	8014512 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 801450e:	2303      	movs	r3, #3
 8014510:	e06e      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014512:	4b16      	ldr	r3, [pc, #88]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014514:	681b      	ldr	r3, [r3, #0]
 8014516:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801451a:	2b00      	cmp	r3, #0
 801451c:	d0f0      	beq.n	8014500 <HAL_RCC_OscConfig+0x71c>
 801451e:	e066      	b.n	80145ee <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8014520:	4b12      	ldr	r3, [pc, #72]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014522:	681b      	ldr	r3, [r3, #0]
 8014524:	4a11      	ldr	r2, [pc, #68]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014526:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 801452a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 801452c:	f7fe f888 	bl	8012640 <HAL_GetTick>
 8014530:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014532:	e008      	b.n	8014546 <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8014534:	f7fe f884 	bl	8012640 <HAL_GetTick>
 8014538:	4602      	mov	r2, r0
 801453a:	693b      	ldr	r3, [r7, #16]
 801453c:	1ad3      	subs	r3, r2, r3
 801453e:	2b02      	cmp	r3, #2
 8014540:	d901      	bls.n	8014546 <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 8014542:	2303      	movs	r3, #3
 8014544:	e054      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8014546:	4b09      	ldr	r3, [pc, #36]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014548:	681b      	ldr	r3, [r3, #0]
 801454a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801454e:	2b00      	cmp	r3, #0
 8014550:	d1f0      	bne.n	8014534 <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8014552:	4b06      	ldr	r3, [pc, #24]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014554:	68da      	ldr	r2, [r3, #12]
 8014556:	4905      	ldr	r1, [pc, #20]	@ (801456c <HAL_RCC_OscConfig+0x788>)
 8014558:	4b07      	ldr	r3, [pc, #28]	@ (8014578 <HAL_RCC_OscConfig+0x794>)
 801455a:	4013      	ands	r3, r2
 801455c:	60cb      	str	r3, [r1, #12]
 801455e:	e046      	b.n	80145ee <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8014560:	687b      	ldr	r3, [r7, #4]
 8014562:	69db      	ldr	r3, [r3, #28]
 8014564:	2b01      	cmp	r3, #1
 8014566:	d109      	bne.n	801457c <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8014568:	2301      	movs	r3, #1
 801456a:	e041      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
 801456c:	40021000 	.word	0x40021000
 8014570:	0801ad14 	.word	0x0801ad14
 8014574:	019f800c 	.word	0x019f800c
 8014578:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 801457c:	4b1e      	ldr	r3, [pc, #120]	@ (80145f8 <HAL_RCC_OscConfig+0x814>)
 801457e:	68db      	ldr	r3, [r3, #12]
 8014580:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8014582:	697b      	ldr	r3, [r7, #20]
 8014584:	f003 0203 	and.w	r2, r3, #3
 8014588:	687b      	ldr	r3, [r7, #4]
 801458a:	6a1b      	ldr	r3, [r3, #32]
 801458c:	429a      	cmp	r2, r3
 801458e:	d12c      	bne.n	80145ea <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8014590:	697b      	ldr	r3, [r7, #20]
 8014592:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8014596:	687b      	ldr	r3, [r7, #4]
 8014598:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801459a:	3b01      	subs	r3, #1
 801459c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 801459e:	429a      	cmp	r2, r3
 80145a0:	d123      	bne.n	80145ea <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80145a2:	697b      	ldr	r3, [r7, #20]
 80145a4:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 80145a8:	687b      	ldr	r3, [r7, #4]
 80145aa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80145ac:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80145ae:	429a      	cmp	r2, r3
 80145b0:	d11b      	bne.n	80145ea <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80145b2:	697b      	ldr	r3, [r7, #20]
 80145b4:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 80145b8:	687b      	ldr	r3, [r7, #4]
 80145ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80145bc:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80145be:	429a      	cmp	r2, r3
 80145c0:	d113      	bne.n	80145ea <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80145c2:	697b      	ldr	r3, [r7, #20]
 80145c4:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 80145c8:	687b      	ldr	r3, [r7, #4]
 80145ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80145cc:	085b      	lsrs	r3, r3, #1
 80145ce:	3b01      	subs	r3, #1
 80145d0:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80145d2:	429a      	cmp	r2, r3
 80145d4:	d109      	bne.n	80145ea <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80145d6:	697b      	ldr	r3, [r7, #20]
 80145d8:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 80145dc:	687b      	ldr	r3, [r7, #4]
 80145de:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80145e0:	085b      	lsrs	r3, r3, #1
 80145e2:	3b01      	subs	r3, #1
 80145e4:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80145e6:	429a      	cmp	r2, r3
 80145e8:	d001      	beq.n	80145ee <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 80145ea:	2301      	movs	r3, #1
 80145ec:	e000      	b.n	80145f0 <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 80145ee:	2300      	movs	r3, #0
}
 80145f0:	4618      	mov	r0, r3
 80145f2:	3720      	adds	r7, #32
 80145f4:	46bd      	mov	sp, r7
 80145f6:	bd80      	pop	{r7, pc}
 80145f8:	40021000 	.word	0x40021000

080145fc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80145fc:	b580      	push	{r7, lr}
 80145fe:	b086      	sub	sp, #24
 8014600:	af00      	add	r7, sp, #0
 8014602:	6078      	str	r0, [r7, #4]
 8014604:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8014606:	2300      	movs	r3, #0
 8014608:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 801460a:	687b      	ldr	r3, [r7, #4]
 801460c:	2b00      	cmp	r3, #0
 801460e:	d101      	bne.n	8014614 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8014610:	2301      	movs	r3, #1
 8014612:	e1e0      	b.n	80149d6 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 8014614:	687b      	ldr	r3, [r7, #4]
 8014616:	681b      	ldr	r3, [r3, #0]
 8014618:	f003 030f 	and.w	r3, r3, #15
 801461c:	2b00      	cmp	r3, #0
 801461e:	d003      	beq.n	8014628 <HAL_RCC_ClockConfig+0x2c>
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	681b      	ldr	r3, [r3, #0]
 8014624:	2b0f      	cmp	r3, #15
 8014626:	d904      	bls.n	8014632 <HAL_RCC_ClockConfig+0x36>
 8014628:	f240 310b 	movw	r1, #779	@ 0x30b
 801462c:	4869      	ldr	r0, [pc, #420]	@ (80147d4 <HAL_RCC_ClockConfig+0x1d8>)
 801462e:	f7fd fd63 	bl	80120f8 <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 8014632:	683b      	ldr	r3, [r7, #0]
 8014634:	2b00      	cmp	r3, #0
 8014636:	d031      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014638:	683b      	ldr	r3, [r7, #0]
 801463a:	2b01      	cmp	r3, #1
 801463c:	d02e      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 801463e:	683b      	ldr	r3, [r7, #0]
 8014640:	2b02      	cmp	r3, #2
 8014642:	d02b      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014644:	683b      	ldr	r3, [r7, #0]
 8014646:	2b03      	cmp	r3, #3
 8014648:	d028      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 801464a:	683b      	ldr	r3, [r7, #0]
 801464c:	2b04      	cmp	r3, #4
 801464e:	d025      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014650:	683b      	ldr	r3, [r7, #0]
 8014652:	2b05      	cmp	r3, #5
 8014654:	d022      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014656:	683b      	ldr	r3, [r7, #0]
 8014658:	2b06      	cmp	r3, #6
 801465a:	d01f      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 801465c:	683b      	ldr	r3, [r7, #0]
 801465e:	2b07      	cmp	r3, #7
 8014660:	d01c      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014662:	683b      	ldr	r3, [r7, #0]
 8014664:	2b08      	cmp	r3, #8
 8014666:	d019      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014668:	683b      	ldr	r3, [r7, #0]
 801466a:	2b09      	cmp	r3, #9
 801466c:	d016      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 801466e:	683b      	ldr	r3, [r7, #0]
 8014670:	2b0a      	cmp	r3, #10
 8014672:	d013      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014674:	683b      	ldr	r3, [r7, #0]
 8014676:	2b0b      	cmp	r3, #11
 8014678:	d010      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 801467a:	683b      	ldr	r3, [r7, #0]
 801467c:	2b0c      	cmp	r3, #12
 801467e:	d00d      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014680:	683b      	ldr	r3, [r7, #0]
 8014682:	2b0d      	cmp	r3, #13
 8014684:	d00a      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014686:	683b      	ldr	r3, [r7, #0]
 8014688:	2b0e      	cmp	r3, #14
 801468a:	d007      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 801468c:	683b      	ldr	r3, [r7, #0]
 801468e:	2b0f      	cmp	r3, #15
 8014690:	d004      	beq.n	801469c <HAL_RCC_ClockConfig+0xa0>
 8014692:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8014696:	484f      	ldr	r0, [pc, #316]	@ (80147d4 <HAL_RCC_ClockConfig+0x1d8>)
 8014698:	f7fd fd2e 	bl	80120f8 <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 801469c:	4b4e      	ldr	r3, [pc, #312]	@ (80147d8 <HAL_RCC_ClockConfig+0x1dc>)
 801469e:	681b      	ldr	r3, [r3, #0]
 80146a0:	f003 030f 	and.w	r3, r3, #15
 80146a4:	683a      	ldr	r2, [r7, #0]
 80146a6:	429a      	cmp	r2, r3
 80146a8:	d910      	bls.n	80146cc <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80146aa:	4b4b      	ldr	r3, [pc, #300]	@ (80147d8 <HAL_RCC_ClockConfig+0x1dc>)
 80146ac:	681b      	ldr	r3, [r3, #0]
 80146ae:	f023 020f 	bic.w	r2, r3, #15
 80146b2:	4949      	ldr	r1, [pc, #292]	@ (80147d8 <HAL_RCC_ClockConfig+0x1dc>)
 80146b4:	683b      	ldr	r3, [r7, #0]
 80146b6:	4313      	orrs	r3, r2
 80146b8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80146ba:	4b47      	ldr	r3, [pc, #284]	@ (80147d8 <HAL_RCC_ClockConfig+0x1dc>)
 80146bc:	681b      	ldr	r3, [r3, #0]
 80146be:	f003 030f 	and.w	r3, r3, #15
 80146c2:	683a      	ldr	r2, [r7, #0]
 80146c4:	429a      	cmp	r2, r3
 80146c6:	d001      	beq.n	80146cc <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 80146c8:	2301      	movs	r3, #1
 80146ca:	e184      	b.n	80149d6 <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80146cc:	687b      	ldr	r3, [r7, #4]
 80146ce:	681b      	ldr	r3, [r3, #0]
 80146d0:	f003 0301 	and.w	r3, r3, #1
 80146d4:	2b00      	cmp	r3, #0
 80146d6:	f000 808e 	beq.w	80147f6 <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	685b      	ldr	r3, [r3, #4]
 80146de:	2b01      	cmp	r3, #1
 80146e0:	d00c      	beq.n	80146fc <HAL_RCC_ClockConfig+0x100>
 80146e2:	687b      	ldr	r3, [r7, #4]
 80146e4:	685b      	ldr	r3, [r3, #4]
 80146e6:	2b02      	cmp	r3, #2
 80146e8:	d008      	beq.n	80146fc <HAL_RCC_ClockConfig+0x100>
 80146ea:	687b      	ldr	r3, [r7, #4]
 80146ec:	685b      	ldr	r3, [r3, #4]
 80146ee:	2b03      	cmp	r3, #3
 80146f0:	d004      	beq.n	80146fc <HAL_RCC_ClockConfig+0x100>
 80146f2:	f240 3123 	movw	r1, #803	@ 0x323
 80146f6:	4837      	ldr	r0, [pc, #220]	@ (80147d4 <HAL_RCC_ClockConfig+0x1d8>)
 80146f8:	f7fd fcfe 	bl	80120f8 <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80146fc:	687b      	ldr	r3, [r7, #4]
 80146fe:	685b      	ldr	r3, [r3, #4]
 8014700:	2b03      	cmp	r3, #3
 8014702:	d129      	bne.n	8014758 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8014704:	4b35      	ldr	r3, [pc, #212]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 8014706:	681b      	ldr	r3, [r3, #0]
 8014708:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 801470c:	2b00      	cmp	r3, #0
 801470e:	d101      	bne.n	8014714 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 8014710:	2301      	movs	r3, #1
 8014712:	e160      	b.n	80149d6 <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8014714:	f000 fa4c 	bl	8014bb0 <RCC_GetSysClockFreqFromPLLSource>
 8014718:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 801471a:	693b      	ldr	r3, [r7, #16]
 801471c:	4a30      	ldr	r2, [pc, #192]	@ (80147e0 <HAL_RCC_ClockConfig+0x1e4>)
 801471e:	4293      	cmp	r3, r2
 8014720:	d93f      	bls.n	80147a2 <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8014722:	4b2e      	ldr	r3, [pc, #184]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 8014724:	689b      	ldr	r3, [r3, #8]
 8014726:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 801472a:	2b00      	cmp	r3, #0
 801472c:	d009      	beq.n	8014742 <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801472e:	687b      	ldr	r3, [r7, #4]
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8014736:	2b00      	cmp	r3, #0
 8014738:	d033      	beq.n	80147a2 <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 801473e:	2b00      	cmp	r3, #0
 8014740:	d12f      	bne.n	80147a2 <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8014742:	4b26      	ldr	r3, [pc, #152]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 8014744:	689b      	ldr	r3, [r3, #8]
 8014746:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 801474a:	4a24      	ldr	r2, [pc, #144]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 801474c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8014750:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8014752:	2380      	movs	r3, #128	@ 0x80
 8014754:	617b      	str	r3, [r7, #20]
 8014756:	e024      	b.n	80147a2 <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8014758:	687b      	ldr	r3, [r7, #4]
 801475a:	685b      	ldr	r3, [r3, #4]
 801475c:	2b02      	cmp	r3, #2
 801475e:	d107      	bne.n	8014770 <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8014760:	4b1e      	ldr	r3, [pc, #120]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 8014762:	681b      	ldr	r3, [r3, #0]
 8014764:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8014768:	2b00      	cmp	r3, #0
 801476a:	d109      	bne.n	8014780 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 801476c:	2301      	movs	r3, #1
 801476e:	e132      	b.n	80149d6 <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8014770:	4b1a      	ldr	r3, [pc, #104]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014778:	2b00      	cmp	r3, #0
 801477a:	d101      	bne.n	8014780 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 801477c:	2301      	movs	r3, #1
 801477e:	e12a      	b.n	80149d6 <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8014780:	f000 f93a 	bl	80149f8 <HAL_RCC_GetSysClockFreq>
 8014784:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8014786:	693b      	ldr	r3, [r7, #16]
 8014788:	4a15      	ldr	r2, [pc, #84]	@ (80147e0 <HAL_RCC_ClockConfig+0x1e4>)
 801478a:	4293      	cmp	r3, r2
 801478c:	d909      	bls.n	80147a2 <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 801478e:	4b13      	ldr	r3, [pc, #76]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 8014790:	689b      	ldr	r3, [r3, #8]
 8014792:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8014796:	4a11      	ldr	r2, [pc, #68]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 8014798:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801479c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 801479e:	2380      	movs	r3, #128	@ 0x80
 80147a0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80147a2:	4b0e      	ldr	r3, [pc, #56]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 80147a4:	689b      	ldr	r3, [r3, #8]
 80147a6:	f023 0203 	bic.w	r2, r3, #3
 80147aa:	687b      	ldr	r3, [r7, #4]
 80147ac:	685b      	ldr	r3, [r3, #4]
 80147ae:	490b      	ldr	r1, [pc, #44]	@ (80147dc <HAL_RCC_ClockConfig+0x1e0>)
 80147b0:	4313      	orrs	r3, r2
 80147b2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80147b4:	f7fd ff44 	bl	8012640 <HAL_GetTick>
 80147b8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80147ba:	e013      	b.n	80147e4 <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80147bc:	f7fd ff40 	bl	8012640 <HAL_GetTick>
 80147c0:	4602      	mov	r2, r0
 80147c2:	68fb      	ldr	r3, [r7, #12]
 80147c4:	1ad3      	subs	r3, r2, r3
 80147c6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80147ca:	4293      	cmp	r3, r2
 80147cc:	d90a      	bls.n	80147e4 <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 80147ce:	2303      	movs	r3, #3
 80147d0:	e101      	b.n	80149d6 <HAL_RCC_ClockConfig+0x3da>
 80147d2:	bf00      	nop
 80147d4:	0801ad14 	.word	0x0801ad14
 80147d8:	40022000 	.word	0x40022000
 80147dc:	40021000 	.word	0x40021000
 80147e0:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80147e4:	4b7e      	ldr	r3, [pc, #504]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 80147e6:	689b      	ldr	r3, [r3, #8]
 80147e8:	f003 020c 	and.w	r2, r3, #12
 80147ec:	687b      	ldr	r3, [r7, #4]
 80147ee:	685b      	ldr	r3, [r3, #4]
 80147f0:	009b      	lsls	r3, r3, #2
 80147f2:	429a      	cmp	r2, r3
 80147f4:	d1e2      	bne.n	80147bc <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80147f6:	687b      	ldr	r3, [r7, #4]
 80147f8:	681b      	ldr	r3, [r3, #0]
 80147fa:	f003 0302 	and.w	r3, r3, #2
 80147fe:	2b00      	cmp	r3, #0
 8014800:	d04c      	beq.n	801489c <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8014802:	687b      	ldr	r3, [r7, #4]
 8014804:	681b      	ldr	r3, [r3, #0]
 8014806:	f003 0304 	and.w	r3, r3, #4
 801480a:	2b00      	cmp	r3, #0
 801480c:	d005      	beq.n	801481a <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 801480e:	4b74      	ldr	r3, [pc, #464]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 8014810:	689b      	ldr	r3, [r3, #8]
 8014812:	4a73      	ldr	r2, [pc, #460]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 8014814:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8014818:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 801481a:	687b      	ldr	r3, [r7, #4]
 801481c:	681b      	ldr	r3, [r3, #0]
 801481e:	f003 0308 	and.w	r3, r3, #8
 8014822:	2b00      	cmp	r3, #0
 8014824:	d007      	beq.n	8014836 <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8014826:	4b6e      	ldr	r3, [pc, #440]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 8014828:	689b      	ldr	r3, [r3, #8]
 801482a:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 801482e:	4a6c      	ldr	r2, [pc, #432]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 8014830:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8014834:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	689b      	ldr	r3, [r3, #8]
 801483a:	2b00      	cmp	r3, #0
 801483c:	d024      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 801483e:	687b      	ldr	r3, [r7, #4]
 8014840:	689b      	ldr	r3, [r3, #8]
 8014842:	2b80      	cmp	r3, #128	@ 0x80
 8014844:	d020      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 8014846:	687b      	ldr	r3, [r7, #4]
 8014848:	689b      	ldr	r3, [r3, #8]
 801484a:	2b90      	cmp	r3, #144	@ 0x90
 801484c:	d01c      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 801484e:	687b      	ldr	r3, [r7, #4]
 8014850:	689b      	ldr	r3, [r3, #8]
 8014852:	2ba0      	cmp	r3, #160	@ 0xa0
 8014854:	d018      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 8014856:	687b      	ldr	r3, [r7, #4]
 8014858:	689b      	ldr	r3, [r3, #8]
 801485a:	2bb0      	cmp	r3, #176	@ 0xb0
 801485c:	d014      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 801485e:	687b      	ldr	r3, [r7, #4]
 8014860:	689b      	ldr	r3, [r3, #8]
 8014862:	2bc0      	cmp	r3, #192	@ 0xc0
 8014864:	d010      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 8014866:	687b      	ldr	r3, [r7, #4]
 8014868:	689b      	ldr	r3, [r3, #8]
 801486a:	2bd0      	cmp	r3, #208	@ 0xd0
 801486c:	d00c      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	689b      	ldr	r3, [r3, #8]
 8014872:	2be0      	cmp	r3, #224	@ 0xe0
 8014874:	d008      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 8014876:	687b      	ldr	r3, [r7, #4]
 8014878:	689b      	ldr	r3, [r3, #8]
 801487a:	2bf0      	cmp	r3, #240	@ 0xf0
 801487c:	d004      	beq.n	8014888 <HAL_RCC_ClockConfig+0x28c>
 801487e:	f240 317a 	movw	r1, #890	@ 0x37a
 8014882:	4858      	ldr	r0, [pc, #352]	@ (80149e4 <HAL_RCC_ClockConfig+0x3e8>)
 8014884:	f7fd fc38 	bl	80120f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8014888:	4b55      	ldr	r3, [pc, #340]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 801488a:	689b      	ldr	r3, [r3, #8]
 801488c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	689b      	ldr	r3, [r3, #8]
 8014894:	4952      	ldr	r1, [pc, #328]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 8014896:	4313      	orrs	r3, r2
 8014898:	608b      	str	r3, [r1, #8]
 801489a:	e008      	b.n	80148ae <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 801489c:	697b      	ldr	r3, [r7, #20]
 801489e:	2b80      	cmp	r3, #128	@ 0x80
 80148a0:	d105      	bne.n	80148ae <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 80148a2:	4b4f      	ldr	r3, [pc, #316]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 80148a4:	689b      	ldr	r3, [r3, #8]
 80148a6:	4a4e      	ldr	r2, [pc, #312]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 80148a8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80148ac:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80148ae:	4b4e      	ldr	r3, [pc, #312]	@ (80149e8 <HAL_RCC_ClockConfig+0x3ec>)
 80148b0:	681b      	ldr	r3, [r3, #0]
 80148b2:	f003 030f 	and.w	r3, r3, #15
 80148b6:	683a      	ldr	r2, [r7, #0]
 80148b8:	429a      	cmp	r2, r3
 80148ba:	d21d      	bcs.n	80148f8 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80148bc:	4b4a      	ldr	r3, [pc, #296]	@ (80149e8 <HAL_RCC_ClockConfig+0x3ec>)
 80148be:	681b      	ldr	r3, [r3, #0]
 80148c0:	f023 020f 	bic.w	r2, r3, #15
 80148c4:	4948      	ldr	r1, [pc, #288]	@ (80149e8 <HAL_RCC_ClockConfig+0x3ec>)
 80148c6:	683b      	ldr	r3, [r7, #0]
 80148c8:	4313      	orrs	r3, r2
 80148ca:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80148cc:	f7fd feb8 	bl	8012640 <HAL_GetTick>
 80148d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80148d2:	e00a      	b.n	80148ea <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80148d4:	f7fd feb4 	bl	8012640 <HAL_GetTick>
 80148d8:	4602      	mov	r2, r0
 80148da:	68fb      	ldr	r3, [r7, #12]
 80148dc:	1ad3      	subs	r3, r2, r3
 80148de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80148e2:	4293      	cmp	r3, r2
 80148e4:	d901      	bls.n	80148ea <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 80148e6:	2303      	movs	r3, #3
 80148e8:	e075      	b.n	80149d6 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80148ea:	4b3f      	ldr	r3, [pc, #252]	@ (80149e8 <HAL_RCC_ClockConfig+0x3ec>)
 80148ec:	681b      	ldr	r3, [r3, #0]
 80148ee:	f003 030f 	and.w	r3, r3, #15
 80148f2:	683a      	ldr	r2, [r7, #0]
 80148f4:	429a      	cmp	r2, r3
 80148f6:	d1ed      	bne.n	80148d4 <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	681b      	ldr	r3, [r3, #0]
 80148fc:	f003 0304 	and.w	r3, r3, #4
 8014900:	2b00      	cmp	r3, #0
 8014902:	d025      	beq.n	8014950 <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	68db      	ldr	r3, [r3, #12]
 8014908:	2b00      	cmp	r3, #0
 801490a:	d018      	beq.n	801493e <HAL_RCC_ClockConfig+0x342>
 801490c:	687b      	ldr	r3, [r7, #4]
 801490e:	68db      	ldr	r3, [r3, #12]
 8014910:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014914:	d013      	beq.n	801493e <HAL_RCC_ClockConfig+0x342>
 8014916:	687b      	ldr	r3, [r7, #4]
 8014918:	68db      	ldr	r3, [r3, #12]
 801491a:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 801491e:	d00e      	beq.n	801493e <HAL_RCC_ClockConfig+0x342>
 8014920:	687b      	ldr	r3, [r7, #4]
 8014922:	68db      	ldr	r3, [r3, #12]
 8014924:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8014928:	d009      	beq.n	801493e <HAL_RCC_ClockConfig+0x342>
 801492a:	687b      	ldr	r3, [r7, #4]
 801492c:	68db      	ldr	r3, [r3, #12]
 801492e:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 8014932:	d004      	beq.n	801493e <HAL_RCC_ClockConfig+0x342>
 8014934:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 8014938:	482a      	ldr	r0, [pc, #168]	@ (80149e4 <HAL_RCC_ClockConfig+0x3e8>)
 801493a:	f7fd fbdd 	bl	80120f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 801493e:	4b28      	ldr	r3, [pc, #160]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 8014940:	689b      	ldr	r3, [r3, #8]
 8014942:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8014946:	687b      	ldr	r3, [r7, #4]
 8014948:	68db      	ldr	r3, [r3, #12]
 801494a:	4925      	ldr	r1, [pc, #148]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 801494c:	4313      	orrs	r3, r2
 801494e:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	f003 0308 	and.w	r3, r3, #8
 8014958:	2b00      	cmp	r3, #0
 801495a:	d026      	beq.n	80149aa <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 801495c:	687b      	ldr	r3, [r7, #4]
 801495e:	691b      	ldr	r3, [r3, #16]
 8014960:	2b00      	cmp	r3, #0
 8014962:	d018      	beq.n	8014996 <HAL_RCC_ClockConfig+0x39a>
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	691b      	ldr	r3, [r3, #16]
 8014968:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 801496c:	d013      	beq.n	8014996 <HAL_RCC_ClockConfig+0x39a>
 801496e:	687b      	ldr	r3, [r7, #4]
 8014970:	691b      	ldr	r3, [r3, #16]
 8014972:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8014976:	d00e      	beq.n	8014996 <HAL_RCC_ClockConfig+0x39a>
 8014978:	687b      	ldr	r3, [r7, #4]
 801497a:	691b      	ldr	r3, [r3, #16]
 801497c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8014980:	d009      	beq.n	8014996 <HAL_RCC_ClockConfig+0x39a>
 8014982:	687b      	ldr	r3, [r7, #4]
 8014984:	691b      	ldr	r3, [r3, #16]
 8014986:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 801498a:	d004      	beq.n	8014996 <HAL_RCC_ClockConfig+0x39a>
 801498c:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8014990:	4814      	ldr	r0, [pc, #80]	@ (80149e4 <HAL_RCC_ClockConfig+0x3e8>)
 8014992:	f7fd fbb1 	bl	80120f8 <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8014996:	4b12      	ldr	r3, [pc, #72]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 8014998:	689b      	ldr	r3, [r3, #8]
 801499a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 801499e:	687b      	ldr	r3, [r7, #4]
 80149a0:	691b      	ldr	r3, [r3, #16]
 80149a2:	00db      	lsls	r3, r3, #3
 80149a4:	490e      	ldr	r1, [pc, #56]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 80149a6:	4313      	orrs	r3, r2
 80149a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80149aa:	f000 f825 	bl	80149f8 <HAL_RCC_GetSysClockFreq>
 80149ae:	4602      	mov	r2, r0
 80149b0:	4b0b      	ldr	r3, [pc, #44]	@ (80149e0 <HAL_RCC_ClockConfig+0x3e4>)
 80149b2:	689b      	ldr	r3, [r3, #8]
 80149b4:	091b      	lsrs	r3, r3, #4
 80149b6:	f003 030f 	and.w	r3, r3, #15
 80149ba:	490c      	ldr	r1, [pc, #48]	@ (80149ec <HAL_RCC_ClockConfig+0x3f0>)
 80149bc:	5ccb      	ldrb	r3, [r1, r3]
 80149be:	f003 031f 	and.w	r3, r3, #31
 80149c2:	fa22 f303 	lsr.w	r3, r2, r3
 80149c6:	4a0a      	ldr	r2, [pc, #40]	@ (80149f0 <HAL_RCC_ClockConfig+0x3f4>)
 80149c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 80149ca:	4b0a      	ldr	r3, [pc, #40]	@ (80149f4 <HAL_RCC_ClockConfig+0x3f8>)
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	4618      	mov	r0, r3
 80149d0:	f7fd fbc8 	bl	8012164 <HAL_InitTick>
 80149d4:	4603      	mov	r3, r0
}
 80149d6:	4618      	mov	r0, r3
 80149d8:	3718      	adds	r7, #24
 80149da:	46bd      	mov	sp, r7
 80149dc:	bd80      	pop	{r7, pc}
 80149de:	bf00      	nop
 80149e0:	40021000 	.word	0x40021000
 80149e4:	0801ad14 	.word	0x0801ad14
 80149e8:	40022000 	.word	0x40022000
 80149ec:	0801b1f4 	.word	0x0801b1f4
 80149f0:	20000000 	.word	0x20000000
 80149f4:	20000004 	.word	0x20000004

080149f8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80149f8:	b480      	push	{r7}
 80149fa:	b087      	sub	sp, #28
 80149fc:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80149fe:	4b2c      	ldr	r3, [pc, #176]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a00:	689b      	ldr	r3, [r3, #8]
 8014a02:	f003 030c 	and.w	r3, r3, #12
 8014a06:	2b04      	cmp	r3, #4
 8014a08:	d102      	bne.n	8014a10 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8014a0a:	4b2a      	ldr	r3, [pc, #168]	@ (8014ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8014a0c:	613b      	str	r3, [r7, #16]
 8014a0e:	e047      	b.n	8014aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8014a10:	4b27      	ldr	r3, [pc, #156]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a12:	689b      	ldr	r3, [r3, #8]
 8014a14:	f003 030c 	and.w	r3, r3, #12
 8014a18:	2b08      	cmp	r3, #8
 8014a1a:	d102      	bne.n	8014a22 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8014a1c:	4b26      	ldr	r3, [pc, #152]	@ (8014ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8014a1e:	613b      	str	r3, [r7, #16]
 8014a20:	e03e      	b.n	8014aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8014a22:	4b23      	ldr	r3, [pc, #140]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a24:	689b      	ldr	r3, [r3, #8]
 8014a26:	f003 030c 	and.w	r3, r3, #12
 8014a2a:	2b0c      	cmp	r3, #12
 8014a2c:	d136      	bne.n	8014a9c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8014a2e:	4b20      	ldr	r3, [pc, #128]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a30:	68db      	ldr	r3, [r3, #12]
 8014a32:	f003 0303 	and.w	r3, r3, #3
 8014a36:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014a38:	4b1d      	ldr	r3, [pc, #116]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a3a:	68db      	ldr	r3, [r3, #12]
 8014a3c:	091b      	lsrs	r3, r3, #4
 8014a3e:	f003 030f 	and.w	r3, r3, #15
 8014a42:	3301      	adds	r3, #1
 8014a44:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8014a46:	68fb      	ldr	r3, [r7, #12]
 8014a48:	2b03      	cmp	r3, #3
 8014a4a:	d10c      	bne.n	8014a66 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8014a4c:	4a1a      	ldr	r2, [pc, #104]	@ (8014ab8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8014a4e:	68bb      	ldr	r3, [r7, #8]
 8014a50:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a54:	4a16      	ldr	r2, [pc, #88]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a56:	68d2      	ldr	r2, [r2, #12]
 8014a58:	0a12      	lsrs	r2, r2, #8
 8014a5a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014a5e:	fb02 f303 	mul.w	r3, r2, r3
 8014a62:	617b      	str	r3, [r7, #20]
      break;
 8014a64:	e00c      	b.n	8014a80 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8014a66:	4a13      	ldr	r2, [pc, #76]	@ (8014ab4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8014a68:	68bb      	ldr	r3, [r7, #8]
 8014a6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a6e:	4a10      	ldr	r2, [pc, #64]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a70:	68d2      	ldr	r2, [r2, #12]
 8014a72:	0a12      	lsrs	r2, r2, #8
 8014a74:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014a78:	fb02 f303 	mul.w	r3, r2, r3
 8014a7c:	617b      	str	r3, [r7, #20]
      break;
 8014a7e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8014a80:	4b0b      	ldr	r3, [pc, #44]	@ (8014ab0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8014a82:	68db      	ldr	r3, [r3, #12]
 8014a84:	0e5b      	lsrs	r3, r3, #25
 8014a86:	f003 0303 	and.w	r3, r3, #3
 8014a8a:	3301      	adds	r3, #1
 8014a8c:	005b      	lsls	r3, r3, #1
 8014a8e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8014a90:	697a      	ldr	r2, [r7, #20]
 8014a92:	687b      	ldr	r3, [r7, #4]
 8014a94:	fbb2 f3f3 	udiv	r3, r2, r3
 8014a98:	613b      	str	r3, [r7, #16]
 8014a9a:	e001      	b.n	8014aa0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8014a9c:	2300      	movs	r3, #0
 8014a9e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8014aa0:	693b      	ldr	r3, [r7, #16]
}
 8014aa2:	4618      	mov	r0, r3
 8014aa4:	371c      	adds	r7, #28
 8014aa6:	46bd      	mov	sp, r7
 8014aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014aac:	4770      	bx	lr
 8014aae:	bf00      	nop
 8014ab0:	40021000 	.word	0x40021000
 8014ab4:	00f42400 	.word	0x00f42400
 8014ab8:	016e3600 	.word	0x016e3600

08014abc <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8014abc:	b480      	push	{r7}
 8014abe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8014ac0:	4b03      	ldr	r3, [pc, #12]	@ (8014ad0 <HAL_RCC_GetHCLKFreq+0x14>)
 8014ac2:	681b      	ldr	r3, [r3, #0]
}
 8014ac4:	4618      	mov	r0, r3
 8014ac6:	46bd      	mov	sp, r7
 8014ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014acc:	4770      	bx	lr
 8014ace:	bf00      	nop
 8014ad0:	20000000 	.word	0x20000000

08014ad4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8014ad4:	b580      	push	{r7, lr}
 8014ad6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8014ad8:	f7ff fff0 	bl	8014abc <HAL_RCC_GetHCLKFreq>
 8014adc:	4602      	mov	r2, r0
 8014ade:	4b06      	ldr	r3, [pc, #24]	@ (8014af8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8014ae0:	689b      	ldr	r3, [r3, #8]
 8014ae2:	0a1b      	lsrs	r3, r3, #8
 8014ae4:	f003 0307 	and.w	r3, r3, #7
 8014ae8:	4904      	ldr	r1, [pc, #16]	@ (8014afc <HAL_RCC_GetPCLK1Freq+0x28>)
 8014aea:	5ccb      	ldrb	r3, [r1, r3]
 8014aec:	f003 031f 	and.w	r3, r3, #31
 8014af0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014af4:	4618      	mov	r0, r3
 8014af6:	bd80      	pop	{r7, pc}
 8014af8:	40021000 	.word	0x40021000
 8014afc:	0801b204 	.word	0x0801b204

08014b00 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8014b00:	b580      	push	{r7, lr}
 8014b02:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8014b04:	f7ff ffda 	bl	8014abc <HAL_RCC_GetHCLKFreq>
 8014b08:	4602      	mov	r2, r0
 8014b0a:	4b06      	ldr	r3, [pc, #24]	@ (8014b24 <HAL_RCC_GetPCLK2Freq+0x24>)
 8014b0c:	689b      	ldr	r3, [r3, #8]
 8014b0e:	0adb      	lsrs	r3, r3, #11
 8014b10:	f003 0307 	and.w	r3, r3, #7
 8014b14:	4904      	ldr	r1, [pc, #16]	@ (8014b28 <HAL_RCC_GetPCLK2Freq+0x28>)
 8014b16:	5ccb      	ldrb	r3, [r1, r3]
 8014b18:	f003 031f 	and.w	r3, r3, #31
 8014b1c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8014b20:	4618      	mov	r0, r3
 8014b22:	bd80      	pop	{r7, pc}
 8014b24:	40021000 	.word	0x40021000
 8014b28:	0801b204 	.word	0x0801b204

08014b2c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8014b2c:	b580      	push	{r7, lr}
 8014b2e:	b082      	sub	sp, #8
 8014b30:	af00      	add	r7, sp, #0
 8014b32:	6078      	str	r0, [r7, #4]
 8014b34:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 8014b36:	687b      	ldr	r3, [r7, #4]
 8014b38:	2b00      	cmp	r3, #0
 8014b3a:	d104      	bne.n	8014b46 <HAL_RCC_GetClockConfig+0x1a>
 8014b3c:	f240 41e3 	movw	r1, #1251	@ 0x4e3
 8014b40:	4818      	ldr	r0, [pc, #96]	@ (8014ba4 <HAL_RCC_GetClockConfig+0x78>)
 8014b42:	f7fd fad9 	bl	80120f8 <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 8014b46:	683b      	ldr	r3, [r7, #0]
 8014b48:	2b00      	cmp	r3, #0
 8014b4a:	d104      	bne.n	8014b56 <HAL_RCC_GetClockConfig+0x2a>
 8014b4c:	f240 41e4 	movw	r1, #1252	@ 0x4e4
 8014b50:	4814      	ldr	r0, [pc, #80]	@ (8014ba4 <HAL_RCC_GetClockConfig+0x78>)
 8014b52:	f7fd fad1 	bl	80120f8 <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8014b56:	687b      	ldr	r3, [r7, #4]
 8014b58:	220f      	movs	r2, #15
 8014b5a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8014b5c:	4b12      	ldr	r3, [pc, #72]	@ (8014ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8014b5e:	689b      	ldr	r3, [r3, #8]
 8014b60:	f003 0203 	and.w	r2, r3, #3
 8014b64:	687b      	ldr	r3, [r7, #4]
 8014b66:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8014b68:	4b0f      	ldr	r3, [pc, #60]	@ (8014ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8014b6a:	689b      	ldr	r3, [r3, #8]
 8014b6c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8014b70:	687b      	ldr	r3, [r7, #4]
 8014b72:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8014b74:	4b0c      	ldr	r3, [pc, #48]	@ (8014ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8014b76:	689b      	ldr	r3, [r3, #8]
 8014b78:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014b7c:	687b      	ldr	r3, [r7, #4]
 8014b7e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8014b80:	4b09      	ldr	r3, [pc, #36]	@ (8014ba8 <HAL_RCC_GetClockConfig+0x7c>)
 8014b82:	689b      	ldr	r3, [r3, #8]
 8014b84:	08db      	lsrs	r3, r3, #3
 8014b86:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8014b8a:	687b      	ldr	r3, [r7, #4]
 8014b8c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8014b8e:	4b07      	ldr	r3, [pc, #28]	@ (8014bac <HAL_RCC_GetClockConfig+0x80>)
 8014b90:	681b      	ldr	r3, [r3, #0]
 8014b92:	f003 020f 	and.w	r2, r3, #15
 8014b96:	683b      	ldr	r3, [r7, #0]
 8014b98:	601a      	str	r2, [r3, #0]
}
 8014b9a:	bf00      	nop
 8014b9c:	3708      	adds	r7, #8
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	0801ad14 	.word	0x0801ad14
 8014ba8:	40021000 	.word	0x40021000
 8014bac:	40022000 	.word	0x40022000

08014bb0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8014bb0:	b480      	push	{r7}
 8014bb2:	b087      	sub	sp, #28
 8014bb4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8014bb6:	4b1e      	ldr	r3, [pc, #120]	@ (8014c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8014bb8:	68db      	ldr	r3, [r3, #12]
 8014bba:	f003 0303 	and.w	r3, r3, #3
 8014bbe:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8014bc0:	4b1b      	ldr	r3, [pc, #108]	@ (8014c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8014bc2:	68db      	ldr	r3, [r3, #12]
 8014bc4:	091b      	lsrs	r3, r3, #4
 8014bc6:	f003 030f 	and.w	r3, r3, #15
 8014bca:	3301      	adds	r3, #1
 8014bcc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8014bce:	693b      	ldr	r3, [r7, #16]
 8014bd0:	2b03      	cmp	r3, #3
 8014bd2:	d10c      	bne.n	8014bee <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8014bd4:	4a17      	ldr	r2, [pc, #92]	@ (8014c34 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8014bd6:	68fb      	ldr	r3, [r7, #12]
 8014bd8:	fbb2 f3f3 	udiv	r3, r2, r3
 8014bdc:	4a14      	ldr	r2, [pc, #80]	@ (8014c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8014bde:	68d2      	ldr	r2, [r2, #12]
 8014be0:	0a12      	lsrs	r2, r2, #8
 8014be2:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014be6:	fb02 f303 	mul.w	r3, r2, r3
 8014bea:	617b      	str	r3, [r7, #20]
    break;
 8014bec:	e00c      	b.n	8014c08 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8014bee:	4a12      	ldr	r2, [pc, #72]	@ (8014c38 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8014bf0:	68fb      	ldr	r3, [r7, #12]
 8014bf2:	fbb2 f3f3 	udiv	r3, r2, r3
 8014bf6:	4a0e      	ldr	r2, [pc, #56]	@ (8014c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8014bf8:	68d2      	ldr	r2, [r2, #12]
 8014bfa:	0a12      	lsrs	r2, r2, #8
 8014bfc:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8014c00:	fb02 f303 	mul.w	r3, r2, r3
 8014c04:	617b      	str	r3, [r7, #20]
    break;
 8014c06:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8014c08:	4b09      	ldr	r3, [pc, #36]	@ (8014c30 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8014c0a:	68db      	ldr	r3, [r3, #12]
 8014c0c:	0e5b      	lsrs	r3, r3, #25
 8014c0e:	f003 0303 	and.w	r3, r3, #3
 8014c12:	3301      	adds	r3, #1
 8014c14:	005b      	lsls	r3, r3, #1
 8014c16:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8014c18:	697a      	ldr	r2, [r7, #20]
 8014c1a:	68bb      	ldr	r3, [r7, #8]
 8014c1c:	fbb2 f3f3 	udiv	r3, r2, r3
 8014c20:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8014c22:	687b      	ldr	r3, [r7, #4]
}
 8014c24:	4618      	mov	r0, r3
 8014c26:	371c      	adds	r7, #28
 8014c28:	46bd      	mov	sp, r7
 8014c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014c2e:	4770      	bx	lr
 8014c30:	40021000 	.word	0x40021000
 8014c34:	016e3600 	.word	0x016e3600
 8014c38:	00f42400 	.word	0x00f42400

08014c3c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8014c3c:	b580      	push	{r7, lr}
 8014c3e:	b086      	sub	sp, #24
 8014c40:	af00      	add	r7, sp, #0
 8014c42:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8014c44:	2300      	movs	r3, #0
 8014c46:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8014c48:	2300      	movs	r3, #0
 8014c4a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8014c4c:	687b      	ldr	r3, [r7, #4]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	f003 0301 	and.w	r3, r3, #1
 8014c54:	2b00      	cmp	r3, #0
 8014c56:	d15d      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014c58:	687b      	ldr	r3, [r7, #4]
 8014c5a:	681b      	ldr	r3, [r3, #0]
 8014c5c:	f003 0302 	and.w	r3, r3, #2
 8014c60:	2b00      	cmp	r3, #0
 8014c62:	d157      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014c64:	687b      	ldr	r3, [r7, #4]
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	f003 0304 	and.w	r3, r3, #4
 8014c6c:	2b00      	cmp	r3, #0
 8014c6e:	d151      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014c70:	687b      	ldr	r3, [r7, #4]
 8014c72:	681b      	ldr	r3, [r3, #0]
 8014c74:	f003 0308 	and.w	r3, r3, #8
 8014c78:	2b00      	cmp	r3, #0
 8014c7a:	d14b      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014c7c:	687b      	ldr	r3, [r7, #4]
 8014c7e:	681b      	ldr	r3, [r3, #0]
 8014c80:	f003 0320 	and.w	r3, r3, #32
 8014c84:	2b00      	cmp	r3, #0
 8014c86:	d145      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014c88:	687b      	ldr	r3, [r7, #4]
 8014c8a:	681b      	ldr	r3, [r3, #0]
 8014c8c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8014c90:	2b00      	cmp	r3, #0
 8014c92:	d13f      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014c94:	687b      	ldr	r3, [r7, #4]
 8014c96:	681b      	ldr	r3, [r3, #0]
 8014c98:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8014c9c:	2b00      	cmp	r3, #0
 8014c9e:	d139      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014ca0:	687b      	ldr	r3, [r7, #4]
 8014ca2:	681b      	ldr	r3, [r3, #0]
 8014ca4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014ca8:	2b00      	cmp	r3, #0
 8014caa:	d133      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014cac:	687b      	ldr	r3, [r7, #4]
 8014cae:	681b      	ldr	r3, [r3, #0]
 8014cb0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8014cb4:	2b00      	cmp	r3, #0
 8014cb6:	d12d      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014cb8:	687b      	ldr	r3, [r7, #4]
 8014cba:	681b      	ldr	r3, [r3, #0]
 8014cbc:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8014cc0:	2b00      	cmp	r3, #0
 8014cc2:	d127      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014cc4:	687b      	ldr	r3, [r7, #4]
 8014cc6:	681b      	ldr	r3, [r3, #0]
 8014cc8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d121      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8014cd8:	2b00      	cmp	r3, #0
 8014cda:	d11b      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014cdc:	687b      	ldr	r3, [r7, #4]
 8014cde:	681b      	ldr	r3, [r3, #0]
 8014ce0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8014ce4:	2b00      	cmp	r3, #0
 8014ce6:	d115      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014ce8:	687b      	ldr	r3, [r7, #4]
 8014cea:	681b      	ldr	r3, [r3, #0]
 8014cec:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8014cf0:	2b00      	cmp	r3, #0
 8014cf2:	d10f      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014cf4:	687b      	ldr	r3, [r7, #4]
 8014cf6:	681b      	ldr	r3, [r3, #0]
 8014cf8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8014cfc:	2b00      	cmp	r3, #0
 8014cfe:	d109      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014d00:	687b      	ldr	r3, [r7, #4]
 8014d02:	681b      	ldr	r3, [r3, #0]
 8014d04:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014d08:	2b00      	cmp	r3, #0
 8014d0a:	d103      	bne.n	8014d14 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8014d0c:	2183      	movs	r1, #131	@ 0x83
 8014d0e:	4855      	ldr	r0, [pc, #340]	@ (8014e64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8014d10:	f7fd f9f2 	bl	80120f8 <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8014d14:	687b      	ldr	r3, [r7, #4]
 8014d16:	681b      	ldr	r3, [r3, #0]
 8014d18:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8014d1c:	2b00      	cmp	r3, #0
 8014d1e:	f000 80b2 	beq.w	8014e86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8014d22:	2300      	movs	r3, #0
 8014d24:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8014d26:	687b      	ldr	r3, [r7, #4]
 8014d28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d2a:	2b00      	cmp	r3, #0
 8014d2c:	d012      	beq.n	8014d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8014d2e:	687b      	ldr	r3, [r7, #4]
 8014d30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d32:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8014d36:	d00d      	beq.n	8014d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8014d38:	687b      	ldr	r3, [r7, #4]
 8014d3a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d3c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8014d40:	d008      	beq.n	8014d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8014d42:	687b      	ldr	r3, [r7, #4]
 8014d44:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014d46:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8014d4a:	d003      	beq.n	8014d54 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8014d4c:	218b      	movs	r1, #139	@ 0x8b
 8014d4e:	4845      	ldr	r0, [pc, #276]	@ (8014e64 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8014d50:	f7fd f9d2 	bl	80120f8 <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8014d54:	4b44      	ldr	r3, [pc, #272]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014d56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d58:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014d5c:	2b00      	cmp	r3, #0
 8014d5e:	d10d      	bne.n	8014d7c <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8014d60:	4b41      	ldr	r3, [pc, #260]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014d62:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d64:	4a40      	ldr	r2, [pc, #256]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014d66:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8014d6a:	6593      	str	r3, [r2, #88]	@ 0x58
 8014d6c:	4b3e      	ldr	r3, [pc, #248]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014d6e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014d70:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8014d74:	60bb      	str	r3, [r7, #8]
 8014d76:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8014d78:	2301      	movs	r3, #1
 8014d7a:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8014d7c:	4b3b      	ldr	r3, [pc, #236]	@ (8014e6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8014d7e:	681b      	ldr	r3, [r3, #0]
 8014d80:	4a3a      	ldr	r2, [pc, #232]	@ (8014e6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8014d82:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8014d86:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8014d88:	f7fd fc5a 	bl	8012640 <HAL_GetTick>
 8014d8c:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014d8e:	e009      	b.n	8014da4 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8014d90:	f7fd fc56 	bl	8012640 <HAL_GetTick>
 8014d94:	4602      	mov	r2, r0
 8014d96:	68fb      	ldr	r3, [r7, #12]
 8014d98:	1ad3      	subs	r3, r2, r3
 8014d9a:	2b02      	cmp	r3, #2
 8014d9c:	d902      	bls.n	8014da4 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 8014d9e:	2303      	movs	r3, #3
 8014da0:	74fb      	strb	r3, [r7, #19]
        break;
 8014da2:	e005      	b.n	8014db0 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8014da4:	4b31      	ldr	r3, [pc, #196]	@ (8014e6c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8014da6:	681b      	ldr	r3, [r3, #0]
 8014da8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8014dac:	2b00      	cmp	r3, #0
 8014dae:	d0ef      	beq.n	8014d90 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8014db0:	7cfb      	ldrb	r3, [r7, #19]
 8014db2:	2b00      	cmp	r3, #0
 8014db4:	d15c      	bne.n	8014e70 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8014db6:	4b2c      	ldr	r3, [pc, #176]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014db8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014dbc:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8014dc0:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8014dc2:	697b      	ldr	r3, [r7, #20]
 8014dc4:	2b00      	cmp	r3, #0
 8014dc6:	d01e      	beq.n	8014e06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014dcc:	697a      	ldr	r2, [r7, #20]
 8014dce:	429a      	cmp	r2, r3
 8014dd0:	d019      	beq.n	8014e06 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8014dd2:	4b25      	ldr	r3, [pc, #148]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014dd4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014dd8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8014ddc:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8014dde:	4b22      	ldr	r3, [pc, #136]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014de0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014de4:	4a20      	ldr	r2, [pc, #128]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014de6:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8014dea:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8014dee:	4b1e      	ldr	r3, [pc, #120]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014df0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014df4:	4a1c      	ldr	r2, [pc, #112]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014df6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8014dfa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8014dfe:	4a1a      	ldr	r2, [pc, #104]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014e00:	697b      	ldr	r3, [r7, #20]
 8014e02:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8014e06:	697b      	ldr	r3, [r7, #20]
 8014e08:	f003 0301 	and.w	r3, r3, #1
 8014e0c:	2b00      	cmp	r3, #0
 8014e0e:	d016      	beq.n	8014e3e <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8014e10:	f7fd fc16 	bl	8012640 <HAL_GetTick>
 8014e14:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014e16:	e00b      	b.n	8014e30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8014e18:	f7fd fc12 	bl	8012640 <HAL_GetTick>
 8014e1c:	4602      	mov	r2, r0
 8014e1e:	68fb      	ldr	r3, [r7, #12]
 8014e20:	1ad3      	subs	r3, r2, r3
 8014e22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8014e26:	4293      	cmp	r3, r2
 8014e28:	d902      	bls.n	8014e30 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 8014e2a:	2303      	movs	r3, #3
 8014e2c:	74fb      	strb	r3, [r7, #19]
            break;
 8014e2e:	e006      	b.n	8014e3e <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8014e30:	4b0d      	ldr	r3, [pc, #52]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014e32:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e36:	f003 0302 	and.w	r3, r3, #2
 8014e3a:	2b00      	cmp	r3, #0
 8014e3c:	d0ec      	beq.n	8014e18 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 8014e3e:	7cfb      	ldrb	r3, [r7, #19]
 8014e40:	2b00      	cmp	r3, #0
 8014e42:	d10b      	bne.n	8014e5c <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8014e44:	4b08      	ldr	r3, [pc, #32]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8014e4a:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8014e4e:	687b      	ldr	r3, [r7, #4]
 8014e50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8014e52:	4905      	ldr	r1, [pc, #20]	@ (8014e68 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8014e54:	4313      	orrs	r3, r2
 8014e56:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8014e5a:	e00b      	b.n	8014e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8014e5c:	7cfb      	ldrb	r3, [r7, #19]
 8014e5e:	74bb      	strb	r3, [r7, #18]
 8014e60:	e008      	b.n	8014e74 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8014e62:	bf00      	nop
 8014e64:	0801ad4c 	.word	0x0801ad4c
 8014e68:	40021000 	.word	0x40021000
 8014e6c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8014e70:	7cfb      	ldrb	r3, [r7, #19]
 8014e72:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8014e74:	7c7b      	ldrb	r3, [r7, #17]
 8014e76:	2b01      	cmp	r3, #1
 8014e78:	d105      	bne.n	8014e86 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8014e7a:	4b98      	ldr	r3, [pc, #608]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014e7c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8014e7e:	4a97      	ldr	r2, [pc, #604]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014e80:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8014e84:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8014e86:	687b      	ldr	r3, [r7, #4]
 8014e88:	681b      	ldr	r3, [r3, #0]
 8014e8a:	f003 0301 	and.w	r3, r3, #1
 8014e8e:	2b00      	cmp	r3, #0
 8014e90:	d01e      	beq.n	8014ed0 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	685b      	ldr	r3, [r3, #4]
 8014e96:	2b00      	cmp	r3, #0
 8014e98:	d00f      	beq.n	8014eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8014e9a:	687b      	ldr	r3, [r7, #4]
 8014e9c:	685b      	ldr	r3, [r3, #4]
 8014e9e:	2b01      	cmp	r3, #1
 8014ea0:	d00b      	beq.n	8014eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	685b      	ldr	r3, [r3, #4]
 8014ea6:	2b03      	cmp	r3, #3
 8014ea8:	d007      	beq.n	8014eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8014eaa:	687b      	ldr	r3, [r7, #4]
 8014eac:	685b      	ldr	r3, [r3, #4]
 8014eae:	2b02      	cmp	r3, #2
 8014eb0:	d003      	beq.n	8014eba <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8014eb2:	21e0      	movs	r1, #224	@ 0xe0
 8014eb4:	488a      	ldr	r0, [pc, #552]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8014eb6:	f7fd f91f 	bl	80120f8 <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8014eba:	4b88      	ldr	r3, [pc, #544]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014ebc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ec0:	f023 0203 	bic.w	r2, r3, #3
 8014ec4:	687b      	ldr	r3, [r7, #4]
 8014ec6:	685b      	ldr	r3, [r3, #4]
 8014ec8:	4984      	ldr	r1, [pc, #528]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014eca:	4313      	orrs	r3, r2
 8014ecc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	681b      	ldr	r3, [r3, #0]
 8014ed4:	f003 0302 	and.w	r3, r3, #2
 8014ed8:	2b00      	cmp	r3, #0
 8014eda:	d01e      	beq.n	8014f1a <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	689b      	ldr	r3, [r3, #8]
 8014ee0:	2b00      	cmp	r3, #0
 8014ee2:	d00f      	beq.n	8014f04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8014ee4:	687b      	ldr	r3, [r7, #4]
 8014ee6:	689b      	ldr	r3, [r3, #8]
 8014ee8:	2b04      	cmp	r3, #4
 8014eea:	d00b      	beq.n	8014f04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8014eec:	687b      	ldr	r3, [r7, #4]
 8014eee:	689b      	ldr	r3, [r3, #8]
 8014ef0:	2b0c      	cmp	r3, #12
 8014ef2:	d007      	beq.n	8014f04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8014ef4:	687b      	ldr	r3, [r7, #4]
 8014ef6:	689b      	ldr	r3, [r3, #8]
 8014ef8:	2b08      	cmp	r3, #8
 8014efa:	d003      	beq.n	8014f04 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8014efc:	21ea      	movs	r1, #234	@ 0xea
 8014efe:	4878      	ldr	r0, [pc, #480]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8014f00:	f7fd f8fa 	bl	80120f8 <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8014f04:	4b75      	ldr	r3, [pc, #468]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014f06:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f0a:	f023 020c 	bic.w	r2, r3, #12
 8014f0e:	687b      	ldr	r3, [r7, #4]
 8014f10:	689b      	ldr	r3, [r3, #8]
 8014f12:	4972      	ldr	r1, [pc, #456]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014f14:	4313      	orrs	r3, r2
 8014f16:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8014f1a:	687b      	ldr	r3, [r7, #4]
 8014f1c:	681b      	ldr	r3, [r3, #0]
 8014f1e:	f003 0304 	and.w	r3, r3, #4
 8014f22:	2b00      	cmp	r3, #0
 8014f24:	d01e      	beq.n	8014f64 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8014f26:	687b      	ldr	r3, [r7, #4]
 8014f28:	68db      	ldr	r3, [r3, #12]
 8014f2a:	2b00      	cmp	r3, #0
 8014f2c:	d00f      	beq.n	8014f4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8014f2e:	687b      	ldr	r3, [r7, #4]
 8014f30:	68db      	ldr	r3, [r3, #12]
 8014f32:	2b10      	cmp	r3, #16
 8014f34:	d00b      	beq.n	8014f4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8014f36:	687b      	ldr	r3, [r7, #4]
 8014f38:	68db      	ldr	r3, [r3, #12]
 8014f3a:	2b30      	cmp	r3, #48	@ 0x30
 8014f3c:	d007      	beq.n	8014f4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8014f3e:	687b      	ldr	r3, [r7, #4]
 8014f40:	68db      	ldr	r3, [r3, #12]
 8014f42:	2b20      	cmp	r3, #32
 8014f44:	d003      	beq.n	8014f4e <HAL_RCCEx_PeriphCLKConfig+0x312>
 8014f46:	21f4      	movs	r1, #244	@ 0xf4
 8014f48:	4865      	ldr	r0, [pc, #404]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8014f4a:	f7fd f8d5 	bl	80120f8 <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8014f4e:	4b63      	ldr	r3, [pc, #396]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014f50:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f54:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8014f58:	687b      	ldr	r3, [r7, #4]
 8014f5a:	68db      	ldr	r3, [r3, #12]
 8014f5c:	495f      	ldr	r1, [pc, #380]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014f5e:	4313      	orrs	r3, r2
 8014f60:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8014f64:	687b      	ldr	r3, [r7, #4]
 8014f66:	681b      	ldr	r3, [r3, #0]
 8014f68:	f003 0308 	and.w	r3, r3, #8
 8014f6c:	2b00      	cmp	r3, #0
 8014f6e:	d01e      	beq.n	8014fae <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8014f70:	687b      	ldr	r3, [r7, #4]
 8014f72:	691b      	ldr	r3, [r3, #16]
 8014f74:	2b00      	cmp	r3, #0
 8014f76:	d00f      	beq.n	8014f98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8014f78:	687b      	ldr	r3, [r7, #4]
 8014f7a:	691b      	ldr	r3, [r3, #16]
 8014f7c:	2b40      	cmp	r3, #64	@ 0x40
 8014f7e:	d00b      	beq.n	8014f98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8014f80:	687b      	ldr	r3, [r7, #4]
 8014f82:	691b      	ldr	r3, [r3, #16]
 8014f84:	2bc0      	cmp	r3, #192	@ 0xc0
 8014f86:	d007      	beq.n	8014f98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8014f88:	687b      	ldr	r3, [r7, #4]
 8014f8a:	691b      	ldr	r3, [r3, #16]
 8014f8c:	2b80      	cmp	r3, #128	@ 0x80
 8014f8e:	d003      	beq.n	8014f98 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8014f90:	21ff      	movs	r1, #255	@ 0xff
 8014f92:	4853      	ldr	r0, [pc, #332]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8014f94:	f7fd f8b0 	bl	80120f8 <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8014f98:	4b50      	ldr	r3, [pc, #320]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014f9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014f9e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8014fa2:	687b      	ldr	r3, [r7, #4]
 8014fa4:	691b      	ldr	r3, [r3, #16]
 8014fa6:	494d      	ldr	r1, [pc, #308]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014fa8:	4313      	orrs	r3, r2
 8014faa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8014fae:	687b      	ldr	r3, [r7, #4]
 8014fb0:	681b      	ldr	r3, [r3, #0]
 8014fb2:	f003 0320 	and.w	r3, r3, #32
 8014fb6:	2b00      	cmp	r3, #0
 8014fb8:	d022      	beq.n	8015000 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8014fba:	687b      	ldr	r3, [r7, #4]
 8014fbc:	695b      	ldr	r3, [r3, #20]
 8014fbe:	2b00      	cmp	r3, #0
 8014fc0:	d013      	beq.n	8014fea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8014fc2:	687b      	ldr	r3, [r7, #4]
 8014fc4:	695b      	ldr	r3, [r3, #20]
 8014fc6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8014fca:	d00e      	beq.n	8014fea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8014fcc:	687b      	ldr	r3, [r7, #4]
 8014fce:	695b      	ldr	r3, [r3, #20]
 8014fd0:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8014fd4:	d009      	beq.n	8014fea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8014fd6:	687b      	ldr	r3, [r7, #4]
 8014fd8:	695b      	ldr	r3, [r3, #20]
 8014fda:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8014fde:	d004      	beq.n	8014fea <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8014fe0:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8014fe4:	483e      	ldr	r0, [pc, #248]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8014fe6:	f7fd f887 	bl	80120f8 <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8014fea:	4b3c      	ldr	r3, [pc, #240]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8014ff0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8014ff4:	687b      	ldr	r3, [r7, #4]
 8014ff6:	695b      	ldr	r3, [r3, #20]
 8014ff8:	4938      	ldr	r1, [pc, #224]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8014ffa:	4313      	orrs	r3, r2
 8014ffc:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	681b      	ldr	r3, [r3, #0]
 8015004:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8015008:	2b00      	cmp	r3, #0
 801500a:	d01d      	beq.n	8015048 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 801500c:	687b      	ldr	r3, [r7, #4]
 801500e:	699b      	ldr	r3, [r3, #24]
 8015010:	2b00      	cmp	r3, #0
 8015012:	d00e      	beq.n	8015032 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8015014:	687b      	ldr	r3, [r7, #4]
 8015016:	699b      	ldr	r3, [r3, #24]
 8015018:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801501c:	d009      	beq.n	8015032 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 801501e:	687b      	ldr	r3, [r7, #4]
 8015020:	699b      	ldr	r3, [r3, #24]
 8015022:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8015026:	d004      	beq.n	8015032 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8015028:	f44f 7191 	mov.w	r1, #290	@ 0x122
 801502c:	482c      	ldr	r0, [pc, #176]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 801502e:	f7fd f863 	bl	80120f8 <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8015032:	4b2a      	ldr	r3, [pc, #168]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8015034:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015038:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 801503c:	687b      	ldr	r3, [r7, #4]
 801503e:	699b      	ldr	r3, [r3, #24]
 8015040:	4926      	ldr	r1, [pc, #152]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8015042:	4313      	orrs	r3, r2
 8015044:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8015048:	687b      	ldr	r3, [r7, #4]
 801504a:	681b      	ldr	r3, [r3, #0]
 801504c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015050:	2b00      	cmp	r3, #0
 8015052:	d01d      	beq.n	8015090 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8015054:	687b      	ldr	r3, [r7, #4]
 8015056:	69db      	ldr	r3, [r3, #28]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d00e      	beq.n	801507a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 801505c:	687b      	ldr	r3, [r7, #4]
 801505e:	69db      	ldr	r3, [r3, #28]
 8015060:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8015064:	d009      	beq.n	801507a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8015066:	687b      	ldr	r3, [r7, #4]
 8015068:	69db      	ldr	r3, [r3, #28]
 801506a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 801506e:	d004      	beq.n	801507a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8015070:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8015074:	481a      	ldr	r0, [pc, #104]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8015076:	f7fd f83f 	bl	80120f8 <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 801507a:	4b18      	ldr	r3, [pc, #96]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 801507c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015080:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8015084:	687b      	ldr	r3, [r7, #4]
 8015086:	69db      	ldr	r3, [r3, #28]
 8015088:	4914      	ldr	r1, [pc, #80]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 801508a:	4313      	orrs	r3, r2
 801508c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8015090:	687b      	ldr	r3, [r7, #4]
 8015092:	681b      	ldr	r3, [r3, #0]
 8015094:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015098:	2b00      	cmp	r3, #0
 801509a:	d023      	beq.n	80150e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 801509c:	687b      	ldr	r3, [r7, #4]
 801509e:	6a1b      	ldr	r3, [r3, #32]
 80150a0:	2b00      	cmp	r3, #0
 80150a2:	d00e      	beq.n	80150c2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80150a4:	687b      	ldr	r3, [r7, #4]
 80150a6:	6a1b      	ldr	r3, [r3, #32]
 80150a8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80150ac:	d009      	beq.n	80150c2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80150ae:	687b      	ldr	r3, [r7, #4]
 80150b0:	6a1b      	ldr	r3, [r3, #32]
 80150b2:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 80150b6:	d004      	beq.n	80150c2 <HAL_RCCEx_PeriphCLKConfig+0x486>
 80150b8:	f44f 719b 	mov.w	r1, #310	@ 0x136
 80150bc:	4808      	ldr	r0, [pc, #32]	@ (80150e0 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80150be:	f7fd f81b 	bl	80120f8 <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80150c2:	4b06      	ldr	r3, [pc, #24]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80150c4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80150c8:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 80150cc:	687b      	ldr	r3, [r7, #4]
 80150ce:	6a1b      	ldr	r3, [r3, #32]
 80150d0:	4902      	ldr	r1, [pc, #8]	@ (80150dc <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 80150d2:	4313      	orrs	r3, r2
 80150d4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 80150d8:	e004      	b.n	80150e4 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 80150da:	bf00      	nop
 80150dc:	40021000 	.word	0x40021000
 80150e0:	0801ad4c 	.word	0x0801ad4c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80150e4:	687b      	ldr	r3, [r7, #4]
 80150e6:	681b      	ldr	r3, [r3, #0]
 80150e8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80150ec:	2b00      	cmp	r3, #0
 80150ee:	d022      	beq.n	8015136 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 80150f0:	687b      	ldr	r3, [r7, #4]
 80150f2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150f4:	2b00      	cmp	r3, #0
 80150f6:	d013      	beq.n	8015120 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80150fc:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8015100:	d00e      	beq.n	8015120 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8015102:	687b      	ldr	r3, [r7, #4]
 8015104:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015106:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 801510a:	d009      	beq.n	8015120 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 801510c:	687b      	ldr	r3, [r7, #4]
 801510e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8015110:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8015114:	d004      	beq.n	8015120 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8015116:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 801511a:	4896      	ldr	r0, [pc, #600]	@ (8015374 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 801511c:	f7fc ffec 	bl	80120f8 <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8015120:	4b95      	ldr	r3, [pc, #596]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015122:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015126:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 801512a:	687b      	ldr	r3, [r7, #4]
 801512c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801512e:	4992      	ldr	r1, [pc, #584]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015130:	4313      	orrs	r3, r2
 8015132:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8015136:	687b      	ldr	r3, [r7, #4]
 8015138:	681b      	ldr	r3, [r3, #0]
 801513a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 801513e:	2b00      	cmp	r3, #0
 8015140:	d02d      	beq.n	801519e <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015146:	2b00      	cmp	r3, #0
 8015148:	d013      	beq.n	8015172 <HAL_RCCEx_PeriphCLKConfig+0x536>
 801514a:	687b      	ldr	r3, [r7, #4]
 801514c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801514e:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015152:	d00e      	beq.n	8015172 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015158:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 801515c:	d009      	beq.n	8015172 <HAL_RCCEx_PeriphCLKConfig+0x536>
 801515e:	687b      	ldr	r3, [r7, #4]
 8015160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015162:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8015166:	d004      	beq.n	8015172 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8015168:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 801516c:	4881      	ldr	r0, [pc, #516]	@ (8015374 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 801516e:	f7fc ffc3 	bl	80120f8 <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8015172:	4b81      	ldr	r3, [pc, #516]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015174:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015178:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 801517c:	687b      	ldr	r3, [r7, #4]
 801517e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015180:	497d      	ldr	r1, [pc, #500]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015182:	4313      	orrs	r3, r2
 8015184:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8015188:	687b      	ldr	r3, [r7, #4]
 801518a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801518c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8015190:	d105      	bne.n	801519e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015192:	4b79      	ldr	r3, [pc, #484]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015194:	68db      	ldr	r3, [r3, #12]
 8015196:	4a78      	ldr	r2, [pc, #480]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015198:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801519c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 801519e:	687b      	ldr	r3, [r7, #4]
 80151a0:	681b      	ldr	r3, [r3, #0]
 80151a2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80151a6:	2b00      	cmp	r3, #0
 80151a8:	d02d      	beq.n	8015206 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151ae:	2b00      	cmp	r3, #0
 80151b0:	d013      	beq.n	80151da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80151b2:	687b      	ldr	r3, [r7, #4]
 80151b4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151b6:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80151ba:	d00e      	beq.n	80151da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80151bc:	687b      	ldr	r3, [r7, #4]
 80151be:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151c0:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 80151c4:	d009      	beq.n	80151da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151ca:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 80151ce:	d004      	beq.n	80151da <HAL_RCCEx_PeriphCLKConfig+0x59e>
 80151d0:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 80151d4:	4867      	ldr	r0, [pc, #412]	@ (8015374 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80151d6:	f7fc ff8f 	bl	80120f8 <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80151da:	4b67      	ldr	r3, [pc, #412]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80151dc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80151e0:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151e8:	4963      	ldr	r1, [pc, #396]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80151ea:	4313      	orrs	r3, r2
 80151ec:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80151f4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80151f8:	d105      	bne.n	8015206 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80151fa:	4b5f      	ldr	r3, [pc, #380]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80151fc:	68db      	ldr	r3, [r3, #12]
 80151fe:	4a5e      	ldr	r2, [pc, #376]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015200:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015204:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 801520e:	2b00      	cmp	r3, #0
 8015210:	d028      	beq.n	8015264 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 8015212:	687b      	ldr	r3, [r7, #4]
 8015214:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015216:	2b00      	cmp	r3, #0
 8015218:	d00e      	beq.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 801521a:	687b      	ldr	r3, [r7, #4]
 801521c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 801521e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015222:	d009      	beq.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015228:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801522c:	d004      	beq.n	8015238 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 801522e:	f240 1179 	movw	r1, #377	@ 0x179
 8015232:	4850      	ldr	r0, [pc, #320]	@ (8015374 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8015234:	f7fc ff60 	bl	80120f8 <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8015238:	4b4f      	ldr	r3, [pc, #316]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801523a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 801523e:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015246:	494c      	ldr	r1, [pc, #304]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015248:	4313      	orrs	r3, r2
 801524a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 801524e:	687b      	ldr	r3, [r7, #4]
 8015250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8015252:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8015256:	d105      	bne.n	8015264 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015258:	4b47      	ldr	r3, [pc, #284]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801525a:	68db      	ldr	r3, [r3, #12]
 801525c:	4a46      	ldr	r2, [pc, #280]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801525e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8015262:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 801526c:	2b00      	cmp	r3, #0
 801526e:	d023      	beq.n	80152b8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8015270:	687b      	ldr	r3, [r7, #4]
 8015272:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8015274:	2b00      	cmp	r3, #0
 8015276:	d009      	beq.n	801528c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8015278:	687b      	ldr	r3, [r7, #4]
 801527a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801527c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8015280:	d004      	beq.n	801528c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8015282:	f240 118b 	movw	r1, #395	@ 0x18b
 8015286:	483b      	ldr	r0, [pc, #236]	@ (8015374 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8015288:	f7fc ff36 	bl	80120f8 <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801528c:	4b3a      	ldr	r3, [pc, #232]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801528e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015292:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8015296:	687b      	ldr	r3, [r7, #4]
 8015298:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 801529a:	4937      	ldr	r1, [pc, #220]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801529c:	4313      	orrs	r3, r2
 801529e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80152a2:	687b      	ldr	r3, [r7, #4]
 80152a4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80152a6:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80152aa:	d105      	bne.n	80152b8 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80152ac:	4b32      	ldr	r3, [pc, #200]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80152ae:	68db      	ldr	r3, [r3, #12]
 80152b0:	4a31      	ldr	r2, [pc, #196]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80152b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80152b6:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80152c0:	2b00      	cmp	r3, #0
 80152c2:	d023      	beq.n	801530c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 80152c4:	687b      	ldr	r3, [r7, #4]
 80152c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152c8:	2b00      	cmp	r3, #0
 80152ca:	d009      	beq.n	80152e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80152cc:	687b      	ldr	r3, [r7, #4]
 80152ce:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152d0:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80152d4:	d004      	beq.n	80152e0 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 80152d6:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 80152da:	4826      	ldr	r0, [pc, #152]	@ (8015374 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80152dc:	f7fc ff0c 	bl	80120f8 <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80152e0:	4b25      	ldr	r3, [pc, #148]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80152e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80152e6:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 80152ea:	687b      	ldr	r3, [r7, #4]
 80152ec:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152ee:	4922      	ldr	r1, [pc, #136]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80152f0:	4313      	orrs	r3, r2
 80152f2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80152f6:	687b      	ldr	r3, [r7, #4]
 80152f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80152fa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80152fe:	d105      	bne.n	801530c <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8015300:	4b1d      	ldr	r3, [pc, #116]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015302:	68db      	ldr	r3, [r3, #12]
 8015304:	4a1c      	ldr	r2, [pc, #112]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015306:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 801530a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 801530c:	687b      	ldr	r3, [r7, #4]
 801530e:	681b      	ldr	r3, [r3, #0]
 8015310:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8015314:	2b00      	cmp	r3, #0
 8015316:	d028      	beq.n	801536a <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 8015318:	687b      	ldr	r3, [r7, #4]
 801531a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801531c:	2b00      	cmp	r3, #0
 801531e:	d00e      	beq.n	801533e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015324:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8015328:	d009      	beq.n	801533e <HAL_RCCEx_PeriphCLKConfig+0x702>
 801532a:	687b      	ldr	r3, [r7, #4]
 801532c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801532e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8015332:	d004      	beq.n	801533e <HAL_RCCEx_PeriphCLKConfig+0x702>
 8015334:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 8015338:	480e      	ldr	r0, [pc, #56]	@ (8015374 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 801533a:	f7fc fedd 	bl	80120f8 <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 801533e:	4b0e      	ldr	r3, [pc, #56]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015340:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015344:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 8015348:	687b      	ldr	r3, [r7, #4]
 801534a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 801534c:	490a      	ldr	r1, [pc, #40]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 801534e:	4313      	orrs	r3, r2
 8015350:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8015354:	687b      	ldr	r3, [r7, #4]
 8015356:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8015358:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 801535c:	d105      	bne.n	801536a <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 801535e:	4b06      	ldr	r3, [pc, #24]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015360:	68db      	ldr	r3, [r3, #12]
 8015362:	4a05      	ldr	r2, [pc, #20]	@ (8015378 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8015364:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8015368:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 801536a:	7cbb      	ldrb	r3, [r7, #18]
}
 801536c:	4618      	mov	r0, r3
 801536e:	3718      	adds	r7, #24
 8015370:	46bd      	mov	sp, r7
 8015372:	bd80      	pop	{r7, pc}
 8015374:	0801ad4c 	.word	0x0801ad4c
 8015378:	40021000 	.word	0x40021000

0801537c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 801537c:	b580      	push	{r7, lr}
 801537e:	b082      	sub	sp, #8
 8015380:	af00      	add	r7, sp, #0
 8015382:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8015384:	687b      	ldr	r3, [r7, #4]
 8015386:	2b00      	cmp	r3, #0
 8015388:	d101      	bne.n	801538e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 801538a:	2301      	movs	r3, #1
 801538c:	e0dc      	b.n	8015548 <HAL_TIM_Base_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 801538e:	687b      	ldr	r3, [r7, #4]
 8015390:	681b      	ldr	r3, [r3, #0]
 8015392:	4a6f      	ldr	r2, [pc, #444]	@ (8015550 <HAL_TIM_Base_Init+0x1d4>)
 8015394:	4293      	cmp	r3, r2
 8015396:	d031      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 8015398:	687b      	ldr	r3, [r7, #4]
 801539a:	681b      	ldr	r3, [r3, #0]
 801539c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80153a0:	d02c      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153a2:	687b      	ldr	r3, [r7, #4]
 80153a4:	681b      	ldr	r3, [r3, #0]
 80153a6:	4a6b      	ldr	r2, [pc, #428]	@ (8015554 <HAL_TIM_Base_Init+0x1d8>)
 80153a8:	4293      	cmp	r3, r2
 80153aa:	d027      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153ac:	687b      	ldr	r3, [r7, #4]
 80153ae:	681b      	ldr	r3, [r3, #0]
 80153b0:	4a69      	ldr	r2, [pc, #420]	@ (8015558 <HAL_TIM_Base_Init+0x1dc>)
 80153b2:	4293      	cmp	r3, r2
 80153b4:	d022      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	681b      	ldr	r3, [r3, #0]
 80153ba:	4a68      	ldr	r2, [pc, #416]	@ (801555c <HAL_TIM_Base_Init+0x1e0>)
 80153bc:	4293      	cmp	r3, r2
 80153be:	d01d      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153c0:	687b      	ldr	r3, [r7, #4]
 80153c2:	681b      	ldr	r3, [r3, #0]
 80153c4:	4a66      	ldr	r2, [pc, #408]	@ (8015560 <HAL_TIM_Base_Init+0x1e4>)
 80153c6:	4293      	cmp	r3, r2
 80153c8:	d018      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153ca:	687b      	ldr	r3, [r7, #4]
 80153cc:	681b      	ldr	r3, [r3, #0]
 80153ce:	4a65      	ldr	r2, [pc, #404]	@ (8015564 <HAL_TIM_Base_Init+0x1e8>)
 80153d0:	4293      	cmp	r3, r2
 80153d2:	d013      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153d4:	687b      	ldr	r3, [r7, #4]
 80153d6:	681b      	ldr	r3, [r3, #0]
 80153d8:	4a63      	ldr	r2, [pc, #396]	@ (8015568 <HAL_TIM_Base_Init+0x1ec>)
 80153da:	4293      	cmp	r3, r2
 80153dc:	d00e      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153de:	687b      	ldr	r3, [r7, #4]
 80153e0:	681b      	ldr	r3, [r3, #0]
 80153e2:	4a62      	ldr	r2, [pc, #392]	@ (801556c <HAL_TIM_Base_Init+0x1f0>)
 80153e4:	4293      	cmp	r3, r2
 80153e6:	d009      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153e8:	687b      	ldr	r3, [r7, #4]
 80153ea:	681b      	ldr	r3, [r3, #0]
 80153ec:	4a60      	ldr	r2, [pc, #384]	@ (8015570 <HAL_TIM_Base_Init+0x1f4>)
 80153ee:	4293      	cmp	r3, r2
 80153f0:	d004      	beq.n	80153fc <HAL_TIM_Base_Init+0x80>
 80153f2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80153f6:	485f      	ldr	r0, [pc, #380]	@ (8015574 <HAL_TIM_Base_Init+0x1f8>)
 80153f8:	f7fc fe7e 	bl	80120f8 <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80153fc:	687b      	ldr	r3, [r7, #4]
 80153fe:	689b      	ldr	r3, [r3, #8]
 8015400:	2b00      	cmp	r3, #0
 8015402:	d014      	beq.n	801542e <HAL_TIM_Base_Init+0xb2>
 8015404:	687b      	ldr	r3, [r7, #4]
 8015406:	689b      	ldr	r3, [r3, #8]
 8015408:	2b10      	cmp	r3, #16
 801540a:	d010      	beq.n	801542e <HAL_TIM_Base_Init+0xb2>
 801540c:	687b      	ldr	r3, [r7, #4]
 801540e:	689b      	ldr	r3, [r3, #8]
 8015410:	2b20      	cmp	r3, #32
 8015412:	d00c      	beq.n	801542e <HAL_TIM_Base_Init+0xb2>
 8015414:	687b      	ldr	r3, [r7, #4]
 8015416:	689b      	ldr	r3, [r3, #8]
 8015418:	2b40      	cmp	r3, #64	@ 0x40
 801541a:	d008      	beq.n	801542e <HAL_TIM_Base_Init+0xb2>
 801541c:	687b      	ldr	r3, [r7, #4]
 801541e:	689b      	ldr	r3, [r3, #8]
 8015420:	2b60      	cmp	r3, #96	@ 0x60
 8015422:	d004      	beq.n	801542e <HAL_TIM_Base_Init+0xb2>
 8015424:	f240 1123 	movw	r1, #291	@ 0x123
 8015428:	4852      	ldr	r0, [pc, #328]	@ (8015574 <HAL_TIM_Base_Init+0x1f8>)
 801542a:	f7fc fe65 	bl	80120f8 <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 801542e:	687b      	ldr	r3, [r7, #4]
 8015430:	691b      	ldr	r3, [r3, #16]
 8015432:	2b00      	cmp	r3, #0
 8015434:	d00e      	beq.n	8015454 <HAL_TIM_Base_Init+0xd8>
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	691b      	ldr	r3, [r3, #16]
 801543a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 801543e:	d009      	beq.n	8015454 <HAL_TIM_Base_Init+0xd8>
 8015440:	687b      	ldr	r3, [r7, #4]
 8015442:	691b      	ldr	r3, [r3, #16]
 8015444:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8015448:	d004      	beq.n	8015454 <HAL_TIM_Base_Init+0xd8>
 801544a:	f44f 7192 	mov.w	r1, #292	@ 0x124
 801544e:	4849      	ldr	r0, [pc, #292]	@ (8015574 <HAL_TIM_Base_Init+0x1f8>)
 8015450:	f7fc fe52 	bl	80120f8 <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801545c:	d00f      	beq.n	801547e <HAL_TIM_Base_Init+0x102>
 801545e:	687b      	ldr	r3, [r7, #4]
 8015460:	68db      	ldr	r3, [r3, #12]
 8015462:	2b00      	cmp	r3, #0
 8015464:	d006      	beq.n	8015474 <HAL_TIM_Base_Init+0xf8>
 8015466:	687b      	ldr	r3, [r7, #4]
 8015468:	68db      	ldr	r3, [r3, #12]
 801546a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801546e:	d201      	bcs.n	8015474 <HAL_TIM_Base_Init+0xf8>
 8015470:	2301      	movs	r3, #1
 8015472:	e000      	b.n	8015476 <HAL_TIM_Base_Init+0xfa>
 8015474:	2300      	movs	r3, #0
 8015476:	f003 0301 	and.w	r3, r3, #1
 801547a:	b2db      	uxtb	r3, r3
 801547c:	e006      	b.n	801548c <HAL_TIM_Base_Init+0x110>
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	68db      	ldr	r3, [r3, #12]
 8015482:	2b00      	cmp	r3, #0
 8015484:	bf14      	ite	ne
 8015486:	2301      	movne	r3, #1
 8015488:	2300      	moveq	r3, #0
 801548a:	b2db      	uxtb	r3, r3
 801548c:	2b00      	cmp	r3, #0
 801548e:	d104      	bne.n	801549a <HAL_TIM_Base_Init+0x11e>
 8015490:	f240 1125 	movw	r1, #293	@ 0x125
 8015494:	4837      	ldr	r0, [pc, #220]	@ (8015574 <HAL_TIM_Base_Init+0x1f8>)
 8015496:	f7fc fe2f 	bl	80120f8 <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 801549a:	687b      	ldr	r3, [r7, #4]
 801549c:	699b      	ldr	r3, [r3, #24]
 801549e:	2b00      	cmp	r3, #0
 80154a0:	d008      	beq.n	80154b4 <HAL_TIM_Base_Init+0x138>
 80154a2:	687b      	ldr	r3, [r7, #4]
 80154a4:	699b      	ldr	r3, [r3, #24]
 80154a6:	2b80      	cmp	r3, #128	@ 0x80
 80154a8:	d004      	beq.n	80154b4 <HAL_TIM_Base_Init+0x138>
 80154aa:	f44f 7193 	mov.w	r1, #294	@ 0x126
 80154ae:	4831      	ldr	r0, [pc, #196]	@ (8015574 <HAL_TIM_Base_Init+0x1f8>)
 80154b0:	f7fc fe22 	bl	80120f8 <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80154ba:	b2db      	uxtb	r3, r3
 80154bc:	2b00      	cmp	r3, #0
 80154be:	d106      	bne.n	80154ce <HAL_TIM_Base_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80154c0:	687b      	ldr	r3, [r7, #4]
 80154c2:	2200      	movs	r2, #0
 80154c4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80154c8:	6878      	ldr	r0, [r7, #4]
 80154ca:	f000 f855 	bl	8015578 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80154ce:	687b      	ldr	r3, [r7, #4]
 80154d0:	2202      	movs	r2, #2
 80154d2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80154d6:	687b      	ldr	r3, [r7, #4]
 80154d8:	681a      	ldr	r2, [r3, #0]
 80154da:	687b      	ldr	r3, [r7, #4]
 80154dc:	3304      	adds	r3, #4
 80154de:	4619      	mov	r1, r3
 80154e0:	4610      	mov	r0, r2
 80154e2:	f000 fa73 	bl	80159cc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80154e6:	687b      	ldr	r3, [r7, #4]
 80154e8:	2201      	movs	r2, #1
 80154ea:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80154ee:	687b      	ldr	r3, [r7, #4]
 80154f0:	2201      	movs	r2, #1
 80154f2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80154f6:	687b      	ldr	r3, [r7, #4]
 80154f8:	2201      	movs	r2, #1
 80154fa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80154fe:	687b      	ldr	r3, [r7, #4]
 8015500:	2201      	movs	r2, #1
 8015502:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8015506:	687b      	ldr	r3, [r7, #4]
 8015508:	2201      	movs	r2, #1
 801550a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 801550e:	687b      	ldr	r3, [r7, #4]
 8015510:	2201      	movs	r2, #1
 8015512:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8015516:	687b      	ldr	r3, [r7, #4]
 8015518:	2201      	movs	r2, #1
 801551a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 801551e:	687b      	ldr	r3, [r7, #4]
 8015520:	2201      	movs	r2, #1
 8015522:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8015526:	687b      	ldr	r3, [r7, #4]
 8015528:	2201      	movs	r2, #1
 801552a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 801552e:	687b      	ldr	r3, [r7, #4]
 8015530:	2201      	movs	r2, #1
 8015532:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	2201      	movs	r2, #1
 801553a:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 801553e:	687b      	ldr	r3, [r7, #4]
 8015540:	2201      	movs	r2, #1
 8015542:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8015546:	2300      	movs	r3, #0
}
 8015548:	4618      	mov	r0, r3
 801554a:	3708      	adds	r7, #8
 801554c:	46bd      	mov	sp, r7
 801554e:	bd80      	pop	{r7, pc}
 8015550:	40012c00 	.word	0x40012c00
 8015554:	40000400 	.word	0x40000400
 8015558:	40000800 	.word	0x40000800
 801555c:	40001000 	.word	0x40001000
 8015560:	40001400 	.word	0x40001400
 8015564:	40013400 	.word	0x40013400
 8015568:	40014000 	.word	0x40014000
 801556c:	40014400 	.word	0x40014400
 8015570:	40014800 	.word	0x40014800
 8015574:	0801ad88 	.word	0x0801ad88

08015578 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8015578:	b480      	push	{r7}
 801557a:	b083      	sub	sp, #12
 801557c:	af00      	add	r7, sp, #0
 801557e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8015580:	bf00      	nop
 8015582:	370c      	adds	r7, #12
 8015584:	46bd      	mov	sp, r7
 8015586:	f85d 7b04 	ldr.w	r7, [sp], #4
 801558a:	4770      	bx	lr

0801558c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 801558c:	b580      	push	{r7, lr}
 801558e:	b084      	sub	sp, #16
 8015590:	af00      	add	r7, sp, #0
 8015592:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8015594:	687b      	ldr	r3, [r7, #4]
 8015596:	681b      	ldr	r3, [r3, #0]
 8015598:	4a45      	ldr	r2, [pc, #276]	@ (80156b0 <HAL_TIM_Base_Start_IT+0x124>)
 801559a:	4293      	cmp	r3, r2
 801559c:	d031      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 801559e:	687b      	ldr	r3, [r7, #4]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80155a6:	d02c      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155a8:	687b      	ldr	r3, [r7, #4]
 80155aa:	681b      	ldr	r3, [r3, #0]
 80155ac:	4a41      	ldr	r2, [pc, #260]	@ (80156b4 <HAL_TIM_Base_Start_IT+0x128>)
 80155ae:	4293      	cmp	r3, r2
 80155b0:	d027      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155b2:	687b      	ldr	r3, [r7, #4]
 80155b4:	681b      	ldr	r3, [r3, #0]
 80155b6:	4a40      	ldr	r2, [pc, #256]	@ (80156b8 <HAL_TIM_Base_Start_IT+0x12c>)
 80155b8:	4293      	cmp	r3, r2
 80155ba:	d022      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155bc:	687b      	ldr	r3, [r7, #4]
 80155be:	681b      	ldr	r3, [r3, #0]
 80155c0:	4a3e      	ldr	r2, [pc, #248]	@ (80156bc <HAL_TIM_Base_Start_IT+0x130>)
 80155c2:	4293      	cmp	r3, r2
 80155c4:	d01d      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155c6:	687b      	ldr	r3, [r7, #4]
 80155c8:	681b      	ldr	r3, [r3, #0]
 80155ca:	4a3d      	ldr	r2, [pc, #244]	@ (80156c0 <HAL_TIM_Base_Start_IT+0x134>)
 80155cc:	4293      	cmp	r3, r2
 80155ce:	d018      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155d0:	687b      	ldr	r3, [r7, #4]
 80155d2:	681b      	ldr	r3, [r3, #0]
 80155d4:	4a3b      	ldr	r2, [pc, #236]	@ (80156c4 <HAL_TIM_Base_Start_IT+0x138>)
 80155d6:	4293      	cmp	r3, r2
 80155d8:	d013      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155da:	687b      	ldr	r3, [r7, #4]
 80155dc:	681b      	ldr	r3, [r3, #0]
 80155de:	4a3a      	ldr	r2, [pc, #232]	@ (80156c8 <HAL_TIM_Base_Start_IT+0x13c>)
 80155e0:	4293      	cmp	r3, r2
 80155e2:	d00e      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155e4:	687b      	ldr	r3, [r7, #4]
 80155e6:	681b      	ldr	r3, [r3, #0]
 80155e8:	4a38      	ldr	r2, [pc, #224]	@ (80156cc <HAL_TIM_Base_Start_IT+0x140>)
 80155ea:	4293      	cmp	r3, r2
 80155ec:	d009      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	681b      	ldr	r3, [r3, #0]
 80155f2:	4a37      	ldr	r2, [pc, #220]	@ (80156d0 <HAL_TIM_Base_Start_IT+0x144>)
 80155f4:	4293      	cmp	r3, r2
 80155f6:	d004      	beq.n	8015602 <HAL_TIM_Base_Start_IT+0x76>
 80155f8:	f240 11df 	movw	r1, #479	@ 0x1df
 80155fc:	4835      	ldr	r0, [pc, #212]	@ (80156d4 <HAL_TIM_Base_Start_IT+0x148>)
 80155fe:	f7fc fd7b 	bl	80120f8 <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8015602:	687b      	ldr	r3, [r7, #4]
 8015604:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8015608:	b2db      	uxtb	r3, r3
 801560a:	2b01      	cmp	r3, #1
 801560c:	d001      	beq.n	8015612 <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 801560e:	2301      	movs	r3, #1
 8015610:	e04a      	b.n	80156a8 <HAL_TIM_Base_Start_IT+0x11c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8015612:	687b      	ldr	r3, [r7, #4]
 8015614:	2202      	movs	r2, #2
 8015616:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 801561a:	687b      	ldr	r3, [r7, #4]
 801561c:	681b      	ldr	r3, [r3, #0]
 801561e:	68da      	ldr	r2, [r3, #12]
 8015620:	687b      	ldr	r3, [r7, #4]
 8015622:	681b      	ldr	r3, [r3, #0]
 8015624:	f042 0201 	orr.w	r2, r2, #1
 8015628:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 801562a:	687b      	ldr	r3, [r7, #4]
 801562c:	681b      	ldr	r3, [r3, #0]
 801562e:	4a20      	ldr	r2, [pc, #128]	@ (80156b0 <HAL_TIM_Base_Start_IT+0x124>)
 8015630:	4293      	cmp	r3, r2
 8015632:	d018      	beq.n	8015666 <HAL_TIM_Base_Start_IT+0xda>
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	681b      	ldr	r3, [r3, #0]
 8015638:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801563c:	d013      	beq.n	8015666 <HAL_TIM_Base_Start_IT+0xda>
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	681b      	ldr	r3, [r3, #0]
 8015642:	4a1c      	ldr	r2, [pc, #112]	@ (80156b4 <HAL_TIM_Base_Start_IT+0x128>)
 8015644:	4293      	cmp	r3, r2
 8015646:	d00e      	beq.n	8015666 <HAL_TIM_Base_Start_IT+0xda>
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	681b      	ldr	r3, [r3, #0]
 801564c:	4a1a      	ldr	r2, [pc, #104]	@ (80156b8 <HAL_TIM_Base_Start_IT+0x12c>)
 801564e:	4293      	cmp	r3, r2
 8015650:	d009      	beq.n	8015666 <HAL_TIM_Base_Start_IT+0xda>
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	681b      	ldr	r3, [r3, #0]
 8015656:	4a1b      	ldr	r2, [pc, #108]	@ (80156c4 <HAL_TIM_Base_Start_IT+0x138>)
 8015658:	4293      	cmp	r3, r2
 801565a:	d004      	beq.n	8015666 <HAL_TIM_Base_Start_IT+0xda>
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	681b      	ldr	r3, [r3, #0]
 8015660:	4a19      	ldr	r2, [pc, #100]	@ (80156c8 <HAL_TIM_Base_Start_IT+0x13c>)
 8015662:	4293      	cmp	r3, r2
 8015664:	d115      	bne.n	8015692 <HAL_TIM_Base_Start_IT+0x106>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8015666:	687b      	ldr	r3, [r7, #4]
 8015668:	681b      	ldr	r3, [r3, #0]
 801566a:	689a      	ldr	r2, [r3, #8]
 801566c:	4b1a      	ldr	r3, [pc, #104]	@ (80156d8 <HAL_TIM_Base_Start_IT+0x14c>)
 801566e:	4013      	ands	r3, r2
 8015670:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015672:	68fb      	ldr	r3, [r7, #12]
 8015674:	2b06      	cmp	r3, #6
 8015676:	d015      	beq.n	80156a4 <HAL_TIM_Base_Start_IT+0x118>
 8015678:	68fb      	ldr	r3, [r7, #12]
 801567a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 801567e:	d011      	beq.n	80156a4 <HAL_TIM_Base_Start_IT+0x118>
    {
      __HAL_TIM_ENABLE(htim);
 8015680:	687b      	ldr	r3, [r7, #4]
 8015682:	681b      	ldr	r3, [r3, #0]
 8015684:	681a      	ldr	r2, [r3, #0]
 8015686:	687b      	ldr	r3, [r7, #4]
 8015688:	681b      	ldr	r3, [r3, #0]
 801568a:	f042 0201 	orr.w	r2, r2, #1
 801568e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8015690:	e008      	b.n	80156a4 <HAL_TIM_Base_Start_IT+0x118>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8015692:	687b      	ldr	r3, [r7, #4]
 8015694:	681b      	ldr	r3, [r3, #0]
 8015696:	681a      	ldr	r2, [r3, #0]
 8015698:	687b      	ldr	r3, [r7, #4]
 801569a:	681b      	ldr	r3, [r3, #0]
 801569c:	f042 0201 	orr.w	r2, r2, #1
 80156a0:	601a      	str	r2, [r3, #0]
 80156a2:	e000      	b.n	80156a6 <HAL_TIM_Base_Start_IT+0x11a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80156a4:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80156a6:	2300      	movs	r3, #0
}
 80156a8:	4618      	mov	r0, r3
 80156aa:	3710      	adds	r7, #16
 80156ac:	46bd      	mov	sp, r7
 80156ae:	bd80      	pop	{r7, pc}
 80156b0:	40012c00 	.word	0x40012c00
 80156b4:	40000400 	.word	0x40000400
 80156b8:	40000800 	.word	0x40000800
 80156bc:	40001000 	.word	0x40001000
 80156c0:	40001400 	.word	0x40001400
 80156c4:	40013400 	.word	0x40013400
 80156c8:	40014000 	.word	0x40014000
 80156cc:	40014400 	.word	0x40014400
 80156d0:	40014800 	.word	0x40014800
 80156d4:	0801ad88 	.word	0x0801ad88
 80156d8:	00010007 	.word	0x00010007

080156dc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80156dc:	b580      	push	{r7, lr}
 80156de:	b084      	sub	sp, #16
 80156e0:	af00      	add	r7, sp, #0
 80156e2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80156e4:	687b      	ldr	r3, [r7, #4]
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	68db      	ldr	r3, [r3, #12]
 80156ea:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80156ec:	687b      	ldr	r3, [r7, #4]
 80156ee:	681b      	ldr	r3, [r3, #0]
 80156f0:	691b      	ldr	r3, [r3, #16]
 80156f2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80156f4:	68bb      	ldr	r3, [r7, #8]
 80156f6:	f003 0302 	and.w	r3, r3, #2
 80156fa:	2b00      	cmp	r3, #0
 80156fc:	d020      	beq.n	8015740 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80156fe:	68fb      	ldr	r3, [r7, #12]
 8015700:	f003 0302 	and.w	r3, r3, #2
 8015704:	2b00      	cmp	r3, #0
 8015706:	d01b      	beq.n	8015740 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8015708:	687b      	ldr	r3, [r7, #4]
 801570a:	681b      	ldr	r3, [r3, #0]
 801570c:	f06f 0202 	mvn.w	r2, #2
 8015710:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8015712:	687b      	ldr	r3, [r7, #4]
 8015714:	2201      	movs	r2, #1
 8015716:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8015718:	687b      	ldr	r3, [r7, #4]
 801571a:	681b      	ldr	r3, [r3, #0]
 801571c:	699b      	ldr	r3, [r3, #24]
 801571e:	f003 0303 	and.w	r3, r3, #3
 8015722:	2b00      	cmp	r3, #0
 8015724:	d003      	beq.n	801572e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8015726:	6878      	ldr	r0, [r7, #4]
 8015728:	f000 f931 	bl	801598e <HAL_TIM_IC_CaptureCallback>
 801572c:	e005      	b.n	801573a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 801572e:	6878      	ldr	r0, [r7, #4]
 8015730:	f000 f923 	bl	801597a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015734:	6878      	ldr	r0, [r7, #4]
 8015736:	f000 f934 	bl	80159a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801573a:	687b      	ldr	r3, [r7, #4]
 801573c:	2200      	movs	r2, #0
 801573e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8015740:	68bb      	ldr	r3, [r7, #8]
 8015742:	f003 0304 	and.w	r3, r3, #4
 8015746:	2b00      	cmp	r3, #0
 8015748:	d020      	beq.n	801578c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 801574a:	68fb      	ldr	r3, [r7, #12]
 801574c:	f003 0304 	and.w	r3, r3, #4
 8015750:	2b00      	cmp	r3, #0
 8015752:	d01b      	beq.n	801578c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8015754:	687b      	ldr	r3, [r7, #4]
 8015756:	681b      	ldr	r3, [r3, #0]
 8015758:	f06f 0204 	mvn.w	r2, #4
 801575c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 801575e:	687b      	ldr	r3, [r7, #4]
 8015760:	2202      	movs	r2, #2
 8015762:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8015764:	687b      	ldr	r3, [r7, #4]
 8015766:	681b      	ldr	r3, [r3, #0]
 8015768:	699b      	ldr	r3, [r3, #24]
 801576a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 801576e:	2b00      	cmp	r3, #0
 8015770:	d003      	beq.n	801577a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8015772:	6878      	ldr	r0, [r7, #4]
 8015774:	f000 f90b 	bl	801598e <HAL_TIM_IC_CaptureCallback>
 8015778:	e005      	b.n	8015786 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 801577a:	6878      	ldr	r0, [r7, #4]
 801577c:	f000 f8fd 	bl	801597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015780:	6878      	ldr	r0, [r7, #4]
 8015782:	f000 f90e 	bl	80159a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8015786:	687b      	ldr	r3, [r7, #4]
 8015788:	2200      	movs	r2, #0
 801578a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 801578c:	68bb      	ldr	r3, [r7, #8]
 801578e:	f003 0308 	and.w	r3, r3, #8
 8015792:	2b00      	cmp	r3, #0
 8015794:	d020      	beq.n	80157d8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8015796:	68fb      	ldr	r3, [r7, #12]
 8015798:	f003 0308 	and.w	r3, r3, #8
 801579c:	2b00      	cmp	r3, #0
 801579e:	d01b      	beq.n	80157d8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	681b      	ldr	r3, [r3, #0]
 80157a4:	f06f 0208 	mvn.w	r2, #8
 80157a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80157aa:	687b      	ldr	r3, [r7, #4]
 80157ac:	2204      	movs	r2, #4
 80157ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80157b0:	687b      	ldr	r3, [r7, #4]
 80157b2:	681b      	ldr	r3, [r3, #0]
 80157b4:	69db      	ldr	r3, [r3, #28]
 80157b6:	f003 0303 	and.w	r3, r3, #3
 80157ba:	2b00      	cmp	r3, #0
 80157bc:	d003      	beq.n	80157c6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f000 f8e5 	bl	801598e <HAL_TIM_IC_CaptureCallback>
 80157c4:	e005      	b.n	80157d2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80157c6:	6878      	ldr	r0, [r7, #4]
 80157c8:	f000 f8d7 	bl	801597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80157cc:	6878      	ldr	r0, [r7, #4]
 80157ce:	f000 f8e8 	bl	80159a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80157d2:	687b      	ldr	r3, [r7, #4]
 80157d4:	2200      	movs	r2, #0
 80157d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80157d8:	68bb      	ldr	r3, [r7, #8]
 80157da:	f003 0310 	and.w	r3, r3, #16
 80157de:	2b00      	cmp	r3, #0
 80157e0:	d020      	beq.n	8015824 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80157e2:	68fb      	ldr	r3, [r7, #12]
 80157e4:	f003 0310 	and.w	r3, r3, #16
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d01b      	beq.n	8015824 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80157ec:	687b      	ldr	r3, [r7, #4]
 80157ee:	681b      	ldr	r3, [r3, #0]
 80157f0:	f06f 0210 	mvn.w	r2, #16
 80157f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80157f6:	687b      	ldr	r3, [r7, #4]
 80157f8:	2208      	movs	r2, #8
 80157fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80157fc:	687b      	ldr	r3, [r7, #4]
 80157fe:	681b      	ldr	r3, [r3, #0]
 8015800:	69db      	ldr	r3, [r3, #28]
 8015802:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8015806:	2b00      	cmp	r3, #0
 8015808:	d003      	beq.n	8015812 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 801580a:	6878      	ldr	r0, [r7, #4]
 801580c:	f000 f8bf 	bl	801598e <HAL_TIM_IC_CaptureCallback>
 8015810:	e005      	b.n	801581e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8015812:	6878      	ldr	r0, [r7, #4]
 8015814:	f000 f8b1 	bl	801597a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8015818:	6878      	ldr	r0, [r7, #4]
 801581a:	f000 f8c2 	bl	80159a2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 801581e:	687b      	ldr	r3, [r7, #4]
 8015820:	2200      	movs	r2, #0
 8015822:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8015824:	68bb      	ldr	r3, [r7, #8]
 8015826:	f003 0301 	and.w	r3, r3, #1
 801582a:	2b00      	cmp	r3, #0
 801582c:	d00c      	beq.n	8015848 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 801582e:	68fb      	ldr	r3, [r7, #12]
 8015830:	f003 0301 	and.w	r3, r3, #1
 8015834:	2b00      	cmp	r3, #0
 8015836:	d007      	beq.n	8015848 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8015838:	687b      	ldr	r3, [r7, #4]
 801583a:	681b      	ldr	r3, [r3, #0]
 801583c:	f06f 0201 	mvn.w	r2, #1
 8015840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8015842:	6878      	ldr	r0, [r7, #4]
 8015844:	f7fc fc40 	bl	80120c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015848:	68bb      	ldr	r3, [r7, #8]
 801584a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 801584e:	2b00      	cmp	r3, #0
 8015850:	d104      	bne.n	801585c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8015852:	68bb      	ldr	r3, [r7, #8]
 8015854:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8015858:	2b00      	cmp	r3, #0
 801585a:	d00c      	beq.n	8015876 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 801585c:	68fb      	ldr	r3, [r7, #12]
 801585e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015862:	2b00      	cmp	r3, #0
 8015864:	d007      	beq.n	8015876 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	681b      	ldr	r3, [r3, #0]
 801586a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 801586e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8015870:	6878      	ldr	r0, [r7, #4]
 8015872:	f000 f951 	bl	8015b18 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8015876:	68bb      	ldr	r3, [r7, #8]
 8015878:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 801587c:	2b00      	cmp	r3, #0
 801587e:	d00c      	beq.n	801589a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8015880:	68fb      	ldr	r3, [r7, #12]
 8015882:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8015886:	2b00      	cmp	r3, #0
 8015888:	d007      	beq.n	801589a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 801588a:	687b      	ldr	r3, [r7, #4]
 801588c:	681b      	ldr	r3, [r3, #0]
 801588e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8015892:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8015894:	6878      	ldr	r0, [r7, #4]
 8015896:	f000 f949 	bl	8015b2c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 801589a:	68bb      	ldr	r3, [r7, #8]
 801589c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80158a0:	2b00      	cmp	r3, #0
 80158a2:	d00c      	beq.n	80158be <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80158a4:	68fb      	ldr	r3, [r7, #12]
 80158a6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80158aa:	2b00      	cmp	r3, #0
 80158ac:	d007      	beq.n	80158be <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80158ae:	687b      	ldr	r3, [r7, #4]
 80158b0:	681b      	ldr	r3, [r3, #0]
 80158b2:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80158b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80158b8:	6878      	ldr	r0, [r7, #4]
 80158ba:	f000 f87c 	bl	80159b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80158be:	68bb      	ldr	r3, [r7, #8]
 80158c0:	f003 0320 	and.w	r3, r3, #32
 80158c4:	2b00      	cmp	r3, #0
 80158c6:	d00c      	beq.n	80158e2 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80158c8:	68fb      	ldr	r3, [r7, #12]
 80158ca:	f003 0320 	and.w	r3, r3, #32
 80158ce:	2b00      	cmp	r3, #0
 80158d0:	d007      	beq.n	80158e2 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80158d2:	687b      	ldr	r3, [r7, #4]
 80158d4:	681b      	ldr	r3, [r3, #0]
 80158d6:	f06f 0220 	mvn.w	r2, #32
 80158da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80158dc:	6878      	ldr	r0, [r7, #4]
 80158de:	f000 f911 	bl	8015b04 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 80158e2:	68bb      	ldr	r3, [r7, #8]
 80158e4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80158e8:	2b00      	cmp	r3, #0
 80158ea:	d00c      	beq.n	8015906 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 80158ec:	68fb      	ldr	r3, [r7, #12]
 80158ee:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80158f2:	2b00      	cmp	r3, #0
 80158f4:	d007      	beq.n	8015906 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80158f6:	687b      	ldr	r3, [r7, #4]
 80158f8:	681b      	ldr	r3, [r3, #0]
 80158fa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80158fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8015900:	6878      	ldr	r0, [r7, #4]
 8015902:	f000 f91d 	bl	8015b40 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 8015906:	68bb      	ldr	r3, [r7, #8]
 8015908:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 801590c:	2b00      	cmp	r3, #0
 801590e:	d00c      	beq.n	801592a <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 8015910:	68fb      	ldr	r3, [r7, #12]
 8015912:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8015916:	2b00      	cmp	r3, #0
 8015918:	d007      	beq.n	801592a <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 801591a:	687b      	ldr	r3, [r7, #4]
 801591c:	681b      	ldr	r3, [r3, #0]
 801591e:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 8015922:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8015924:	6878      	ldr	r0, [r7, #4]
 8015926:	f000 f915 	bl	8015b54 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 801592a:	68bb      	ldr	r3, [r7, #8]
 801592c:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8015930:	2b00      	cmp	r3, #0
 8015932:	d00c      	beq.n	801594e <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 8015934:	68fb      	ldr	r3, [r7, #12]
 8015936:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 801593a:	2b00      	cmp	r3, #0
 801593c:	d007      	beq.n	801594e <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 801593e:	687b      	ldr	r3, [r7, #4]
 8015940:	681b      	ldr	r3, [r3, #0]
 8015942:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 8015946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8015948:	6878      	ldr	r0, [r7, #4]
 801594a:	f000 f90d 	bl	8015b68 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 801594e:	68bb      	ldr	r3, [r7, #8]
 8015950:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015954:	2b00      	cmp	r3, #0
 8015956:	d00c      	beq.n	8015972 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8015958:	68fb      	ldr	r3, [r7, #12]
 801595a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801595e:	2b00      	cmp	r3, #0
 8015960:	d007      	beq.n	8015972 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8015962:	687b      	ldr	r3, [r7, #4]
 8015964:	681b      	ldr	r3, [r3, #0]
 8015966:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 801596a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 801596c:	6878      	ldr	r0, [r7, #4]
 801596e:	f000 f905 	bl	8015b7c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8015972:	bf00      	nop
 8015974:	3710      	adds	r7, #16
 8015976:	46bd      	mov	sp, r7
 8015978:	bd80      	pop	{r7, pc}

0801597a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 801597a:	b480      	push	{r7}
 801597c:	b083      	sub	sp, #12
 801597e:	af00      	add	r7, sp, #0
 8015980:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8015982:	bf00      	nop
 8015984:	370c      	adds	r7, #12
 8015986:	46bd      	mov	sp, r7
 8015988:	f85d 7b04 	ldr.w	r7, [sp], #4
 801598c:	4770      	bx	lr

0801598e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 801598e:	b480      	push	{r7}
 8015990:	b083      	sub	sp, #12
 8015992:	af00      	add	r7, sp, #0
 8015994:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8015996:	bf00      	nop
 8015998:	370c      	adds	r7, #12
 801599a:	46bd      	mov	sp, r7
 801599c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159a0:	4770      	bx	lr

080159a2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80159a2:	b480      	push	{r7}
 80159a4:	b083      	sub	sp, #12
 80159a6:	af00      	add	r7, sp, #0
 80159a8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80159aa:	bf00      	nop
 80159ac:	370c      	adds	r7, #12
 80159ae:	46bd      	mov	sp, r7
 80159b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159b4:	4770      	bx	lr

080159b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80159b6:	b480      	push	{r7}
 80159b8:	b083      	sub	sp, #12
 80159ba:	af00      	add	r7, sp, #0
 80159bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80159be:	bf00      	nop
 80159c0:	370c      	adds	r7, #12
 80159c2:	46bd      	mov	sp, r7
 80159c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80159c8:	4770      	bx	lr
	...

080159cc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80159cc:	b480      	push	{r7}
 80159ce:	b085      	sub	sp, #20
 80159d0:	af00      	add	r7, sp, #0
 80159d2:	6078      	str	r0, [r7, #4]
 80159d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80159d6:	687b      	ldr	r3, [r7, #4]
 80159d8:	681b      	ldr	r3, [r3, #0]
 80159da:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80159dc:	687b      	ldr	r3, [r7, #4]
 80159de:	4a42      	ldr	r2, [pc, #264]	@ (8015ae8 <TIM_Base_SetConfig+0x11c>)
 80159e0:	4293      	cmp	r3, r2
 80159e2:	d00f      	beq.n	8015a04 <TIM_Base_SetConfig+0x38>
 80159e4:	687b      	ldr	r3, [r7, #4]
 80159e6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80159ea:	d00b      	beq.n	8015a04 <TIM_Base_SetConfig+0x38>
 80159ec:	687b      	ldr	r3, [r7, #4]
 80159ee:	4a3f      	ldr	r2, [pc, #252]	@ (8015aec <TIM_Base_SetConfig+0x120>)
 80159f0:	4293      	cmp	r3, r2
 80159f2:	d007      	beq.n	8015a04 <TIM_Base_SetConfig+0x38>
 80159f4:	687b      	ldr	r3, [r7, #4]
 80159f6:	4a3e      	ldr	r2, [pc, #248]	@ (8015af0 <TIM_Base_SetConfig+0x124>)
 80159f8:	4293      	cmp	r3, r2
 80159fa:	d003      	beq.n	8015a04 <TIM_Base_SetConfig+0x38>
 80159fc:	687b      	ldr	r3, [r7, #4]
 80159fe:	4a3d      	ldr	r2, [pc, #244]	@ (8015af4 <TIM_Base_SetConfig+0x128>)
 8015a00:	4293      	cmp	r3, r2
 8015a02:	d108      	bne.n	8015a16 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8015a04:	68fb      	ldr	r3, [r7, #12]
 8015a06:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8015a0a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8015a0c:	683b      	ldr	r3, [r7, #0]
 8015a0e:	685b      	ldr	r3, [r3, #4]
 8015a10:	68fa      	ldr	r2, [r7, #12]
 8015a12:	4313      	orrs	r3, r2
 8015a14:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	4a33      	ldr	r2, [pc, #204]	@ (8015ae8 <TIM_Base_SetConfig+0x11c>)
 8015a1a:	4293      	cmp	r3, r2
 8015a1c:	d01b      	beq.n	8015a56 <TIM_Base_SetConfig+0x8a>
 8015a1e:	687b      	ldr	r3, [r7, #4]
 8015a20:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8015a24:	d017      	beq.n	8015a56 <TIM_Base_SetConfig+0x8a>
 8015a26:	687b      	ldr	r3, [r7, #4]
 8015a28:	4a30      	ldr	r2, [pc, #192]	@ (8015aec <TIM_Base_SetConfig+0x120>)
 8015a2a:	4293      	cmp	r3, r2
 8015a2c:	d013      	beq.n	8015a56 <TIM_Base_SetConfig+0x8a>
 8015a2e:	687b      	ldr	r3, [r7, #4]
 8015a30:	4a2f      	ldr	r2, [pc, #188]	@ (8015af0 <TIM_Base_SetConfig+0x124>)
 8015a32:	4293      	cmp	r3, r2
 8015a34:	d00f      	beq.n	8015a56 <TIM_Base_SetConfig+0x8a>
 8015a36:	687b      	ldr	r3, [r7, #4]
 8015a38:	4a2e      	ldr	r2, [pc, #184]	@ (8015af4 <TIM_Base_SetConfig+0x128>)
 8015a3a:	4293      	cmp	r3, r2
 8015a3c:	d00b      	beq.n	8015a56 <TIM_Base_SetConfig+0x8a>
 8015a3e:	687b      	ldr	r3, [r7, #4]
 8015a40:	4a2d      	ldr	r2, [pc, #180]	@ (8015af8 <TIM_Base_SetConfig+0x12c>)
 8015a42:	4293      	cmp	r3, r2
 8015a44:	d007      	beq.n	8015a56 <TIM_Base_SetConfig+0x8a>
 8015a46:	687b      	ldr	r3, [r7, #4]
 8015a48:	4a2c      	ldr	r2, [pc, #176]	@ (8015afc <TIM_Base_SetConfig+0x130>)
 8015a4a:	4293      	cmp	r3, r2
 8015a4c:	d003      	beq.n	8015a56 <TIM_Base_SetConfig+0x8a>
 8015a4e:	687b      	ldr	r3, [r7, #4]
 8015a50:	4a2b      	ldr	r2, [pc, #172]	@ (8015b00 <TIM_Base_SetConfig+0x134>)
 8015a52:	4293      	cmp	r3, r2
 8015a54:	d108      	bne.n	8015a68 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8015a56:	68fb      	ldr	r3, [r7, #12]
 8015a58:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8015a5c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8015a5e:	683b      	ldr	r3, [r7, #0]
 8015a60:	68db      	ldr	r3, [r3, #12]
 8015a62:	68fa      	ldr	r2, [r7, #12]
 8015a64:	4313      	orrs	r3, r2
 8015a66:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8015a68:	68fb      	ldr	r3, [r7, #12]
 8015a6a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8015a6e:	683b      	ldr	r3, [r7, #0]
 8015a70:	695b      	ldr	r3, [r3, #20]
 8015a72:	4313      	orrs	r3, r2
 8015a74:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8015a76:	687b      	ldr	r3, [r7, #4]
 8015a78:	68fa      	ldr	r2, [r7, #12]
 8015a7a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8015a7c:	683b      	ldr	r3, [r7, #0]
 8015a7e:	689a      	ldr	r2, [r3, #8]
 8015a80:	687b      	ldr	r3, [r7, #4]
 8015a82:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8015a84:	683b      	ldr	r3, [r7, #0]
 8015a86:	681a      	ldr	r2, [r3, #0]
 8015a88:	687b      	ldr	r3, [r7, #4]
 8015a8a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8015a8c:	687b      	ldr	r3, [r7, #4]
 8015a8e:	4a16      	ldr	r2, [pc, #88]	@ (8015ae8 <TIM_Base_SetConfig+0x11c>)
 8015a90:	4293      	cmp	r3, r2
 8015a92:	d00f      	beq.n	8015ab4 <TIM_Base_SetConfig+0xe8>
 8015a94:	687b      	ldr	r3, [r7, #4]
 8015a96:	4a17      	ldr	r2, [pc, #92]	@ (8015af4 <TIM_Base_SetConfig+0x128>)
 8015a98:	4293      	cmp	r3, r2
 8015a9a:	d00b      	beq.n	8015ab4 <TIM_Base_SetConfig+0xe8>
 8015a9c:	687b      	ldr	r3, [r7, #4]
 8015a9e:	4a16      	ldr	r2, [pc, #88]	@ (8015af8 <TIM_Base_SetConfig+0x12c>)
 8015aa0:	4293      	cmp	r3, r2
 8015aa2:	d007      	beq.n	8015ab4 <TIM_Base_SetConfig+0xe8>
 8015aa4:	687b      	ldr	r3, [r7, #4]
 8015aa6:	4a15      	ldr	r2, [pc, #84]	@ (8015afc <TIM_Base_SetConfig+0x130>)
 8015aa8:	4293      	cmp	r3, r2
 8015aaa:	d003      	beq.n	8015ab4 <TIM_Base_SetConfig+0xe8>
 8015aac:	687b      	ldr	r3, [r7, #4]
 8015aae:	4a14      	ldr	r2, [pc, #80]	@ (8015b00 <TIM_Base_SetConfig+0x134>)
 8015ab0:	4293      	cmp	r3, r2
 8015ab2:	d103      	bne.n	8015abc <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8015ab4:	683b      	ldr	r3, [r7, #0]
 8015ab6:	691a      	ldr	r2, [r3, #16]
 8015ab8:	687b      	ldr	r3, [r7, #4]
 8015aba:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8015abc:	687b      	ldr	r3, [r7, #4]
 8015abe:	2201      	movs	r2, #1
 8015ac0:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8015ac2:	687b      	ldr	r3, [r7, #4]
 8015ac4:	691b      	ldr	r3, [r3, #16]
 8015ac6:	f003 0301 	and.w	r3, r3, #1
 8015aca:	2b01      	cmp	r3, #1
 8015acc:	d105      	bne.n	8015ada <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8015ace:	687b      	ldr	r3, [r7, #4]
 8015ad0:	691b      	ldr	r3, [r3, #16]
 8015ad2:	f023 0201 	bic.w	r2, r3, #1
 8015ad6:	687b      	ldr	r3, [r7, #4]
 8015ad8:	611a      	str	r2, [r3, #16]
  }
}
 8015ada:	bf00      	nop
 8015adc:	3714      	adds	r7, #20
 8015ade:	46bd      	mov	sp, r7
 8015ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015ae4:	4770      	bx	lr
 8015ae6:	bf00      	nop
 8015ae8:	40012c00 	.word	0x40012c00
 8015aec:	40000400 	.word	0x40000400
 8015af0:	40000800 	.word	0x40000800
 8015af4:	40013400 	.word	0x40013400
 8015af8:	40014000 	.word	0x40014000
 8015afc:	40014400 	.word	0x40014400
 8015b00:	40014800 	.word	0x40014800

08015b04 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8015b04:	b480      	push	{r7}
 8015b06:	b083      	sub	sp, #12
 8015b08:	af00      	add	r7, sp, #0
 8015b0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8015b0c:	bf00      	nop
 8015b0e:	370c      	adds	r7, #12
 8015b10:	46bd      	mov	sp, r7
 8015b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b16:	4770      	bx	lr

08015b18 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8015b18:	b480      	push	{r7}
 8015b1a:	b083      	sub	sp, #12
 8015b1c:	af00      	add	r7, sp, #0
 8015b1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8015b20:	bf00      	nop
 8015b22:	370c      	adds	r7, #12
 8015b24:	46bd      	mov	sp, r7
 8015b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b2a:	4770      	bx	lr

08015b2c <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8015b2c:	b480      	push	{r7}
 8015b2e:	b083      	sub	sp, #12
 8015b30:	af00      	add	r7, sp, #0
 8015b32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8015b34:	bf00      	nop
 8015b36:	370c      	adds	r7, #12
 8015b38:	46bd      	mov	sp, r7
 8015b3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b3e:	4770      	bx	lr

08015b40 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8015b40:	b480      	push	{r7}
 8015b42:	b083      	sub	sp, #12
 8015b44:	af00      	add	r7, sp, #0
 8015b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8015b48:	bf00      	nop
 8015b4a:	370c      	adds	r7, #12
 8015b4c:	46bd      	mov	sp, r7
 8015b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b52:	4770      	bx	lr

08015b54 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8015b54:	b480      	push	{r7}
 8015b56:	b083      	sub	sp, #12
 8015b58:	af00      	add	r7, sp, #0
 8015b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8015b5c:	bf00      	nop
 8015b5e:	370c      	adds	r7, #12
 8015b60:	46bd      	mov	sp, r7
 8015b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b66:	4770      	bx	lr

08015b68 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8015b68:	b480      	push	{r7}
 8015b6a:	b083      	sub	sp, #12
 8015b6c:	af00      	add	r7, sp, #0
 8015b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8015b70:	bf00      	nop
 8015b72:	370c      	adds	r7, #12
 8015b74:	46bd      	mov	sp, r7
 8015b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b7a:	4770      	bx	lr

08015b7c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8015b7c:	b480      	push	{r7}
 8015b7e:	b083      	sub	sp, #12
 8015b80:	af00      	add	r7, sp, #0
 8015b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8015b84:	bf00      	nop
 8015b86:	370c      	adds	r7, #12
 8015b88:	46bd      	mov	sp, r7
 8015b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015b8e:	4770      	bx	lr

08015b90 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8015b90:	b580      	push	{r7, lr}
 8015b92:	b082      	sub	sp, #8
 8015b94:	af00      	add	r7, sp, #0
 8015b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8015b98:	687b      	ldr	r3, [r7, #4]
 8015b9a:	2b00      	cmp	r3, #0
 8015b9c:	d101      	bne.n	8015ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8015b9e:	2301      	movs	r3, #1
 8015ba0:	e083      	b.n	8015caa <HAL_UART_Init+0x11a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8015ba2:	687b      	ldr	r3, [r7, #4]
 8015ba4:	699b      	ldr	r3, [r3, #24]
 8015ba6:	2b00      	cmp	r3, #0
 8015ba8:	d01e      	beq.n	8015be8 <HAL_UART_Init+0x58>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8015baa:	687b      	ldr	r3, [r7, #4]
 8015bac:	681b      	ldr	r3, [r3, #0]
 8015bae:	4a41      	ldr	r2, [pc, #260]	@ (8015cb4 <HAL_UART_Init+0x124>)
 8015bb0:	4293      	cmp	r3, r2
 8015bb2:	d037      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015bb4:	687b      	ldr	r3, [r7, #4]
 8015bb6:	681b      	ldr	r3, [r3, #0]
 8015bb8:	4a3f      	ldr	r2, [pc, #252]	@ (8015cb8 <HAL_UART_Init+0x128>)
 8015bba:	4293      	cmp	r3, r2
 8015bbc:	d032      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015bbe:	687b      	ldr	r3, [r7, #4]
 8015bc0:	681b      	ldr	r3, [r3, #0]
 8015bc2:	4a3e      	ldr	r2, [pc, #248]	@ (8015cbc <HAL_UART_Init+0x12c>)
 8015bc4:	4293      	cmp	r3, r2
 8015bc6:	d02d      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015bc8:	687b      	ldr	r3, [r7, #4]
 8015bca:	681b      	ldr	r3, [r3, #0]
 8015bcc:	4a3c      	ldr	r2, [pc, #240]	@ (8015cc0 <HAL_UART_Init+0x130>)
 8015bce:	4293      	cmp	r3, r2
 8015bd0:	d028      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015bd2:	687b      	ldr	r3, [r7, #4]
 8015bd4:	681b      	ldr	r3, [r3, #0]
 8015bd6:	4a3b      	ldr	r2, [pc, #236]	@ (8015cc4 <HAL_UART_Init+0x134>)
 8015bd8:	4293      	cmp	r3, r2
 8015bda:	d023      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015bdc:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8015be0:	4839      	ldr	r0, [pc, #228]	@ (8015cc8 <HAL_UART_Init+0x138>)
 8015be2:	f7fc fa89 	bl	80120f8 <assert_failed>
 8015be6:	e01d      	b.n	8015c24 <HAL_UART_Init+0x94>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8015be8:	687b      	ldr	r3, [r7, #4]
 8015bea:	681b      	ldr	r3, [r3, #0]
 8015bec:	4a31      	ldr	r2, [pc, #196]	@ (8015cb4 <HAL_UART_Init+0x124>)
 8015bee:	4293      	cmp	r3, r2
 8015bf0:	d018      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015bf2:	687b      	ldr	r3, [r7, #4]
 8015bf4:	681b      	ldr	r3, [r3, #0]
 8015bf6:	4a30      	ldr	r2, [pc, #192]	@ (8015cb8 <HAL_UART_Init+0x128>)
 8015bf8:	4293      	cmp	r3, r2
 8015bfa:	d013      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015bfc:	687b      	ldr	r3, [r7, #4]
 8015bfe:	681b      	ldr	r3, [r3, #0]
 8015c00:	4a2e      	ldr	r2, [pc, #184]	@ (8015cbc <HAL_UART_Init+0x12c>)
 8015c02:	4293      	cmp	r3, r2
 8015c04:	d00e      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015c06:	687b      	ldr	r3, [r7, #4]
 8015c08:	681b      	ldr	r3, [r3, #0]
 8015c0a:	4a2d      	ldr	r2, [pc, #180]	@ (8015cc0 <HAL_UART_Init+0x130>)
 8015c0c:	4293      	cmp	r3, r2
 8015c0e:	d009      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015c10:	687b      	ldr	r3, [r7, #4]
 8015c12:	681b      	ldr	r3, [r3, #0]
 8015c14:	4a2b      	ldr	r2, [pc, #172]	@ (8015cc4 <HAL_UART_Init+0x134>)
 8015c16:	4293      	cmp	r3, r2
 8015c18:	d004      	beq.n	8015c24 <HAL_UART_Init+0x94>
 8015c1a:	f240 1143 	movw	r1, #323	@ 0x143
 8015c1e:	482a      	ldr	r0, [pc, #168]	@ (8015cc8 <HAL_UART_Init+0x138>)
 8015c20:	f7fc fa6a 	bl	80120f8 <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8015c24:	687b      	ldr	r3, [r7, #4]
 8015c26:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015c2a:	2b00      	cmp	r3, #0
 8015c2c:	d106      	bne.n	8015c3c <HAL_UART_Init+0xac>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8015c2e:	687b      	ldr	r3, [r7, #4]
 8015c30:	2200      	movs	r2, #0
 8015c32:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8015c36:	6878      	ldr	r0, [r7, #4]
 8015c38:	f7fc fc4e 	bl	80124d8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8015c3c:	687b      	ldr	r3, [r7, #4]
 8015c3e:	2224      	movs	r2, #36	@ 0x24
 8015c40:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8015c44:	687b      	ldr	r3, [r7, #4]
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	681a      	ldr	r2, [r3, #0]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	681b      	ldr	r3, [r3, #0]
 8015c4e:	f022 0201 	bic.w	r2, r2, #1
 8015c52:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8015c54:	687b      	ldr	r3, [r7, #4]
 8015c56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015c58:	2b00      	cmp	r3, #0
 8015c5a:	d002      	beq.n	8015c62 <HAL_UART_Init+0xd2>
  {
    UART_AdvFeatureConfig(huart);
 8015c5c:	6878      	ldr	r0, [r7, #4]
 8015c5e:	f001 f801 	bl	8016c64 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8015c62:	6878      	ldr	r0, [r7, #4]
 8015c64:	f000 fc50 	bl	8016508 <UART_SetConfig>
 8015c68:	4603      	mov	r3, r0
 8015c6a:	2b01      	cmp	r3, #1
 8015c6c:	d101      	bne.n	8015c72 <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
 8015c6e:	2301      	movs	r3, #1
 8015c70:	e01b      	b.n	8015caa <HAL_UART_Init+0x11a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8015c72:	687b      	ldr	r3, [r7, #4]
 8015c74:	681b      	ldr	r3, [r3, #0]
 8015c76:	685a      	ldr	r2, [r3, #4]
 8015c78:	687b      	ldr	r3, [r7, #4]
 8015c7a:	681b      	ldr	r3, [r3, #0]
 8015c7c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8015c80:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8015c82:	687b      	ldr	r3, [r7, #4]
 8015c84:	681b      	ldr	r3, [r3, #0]
 8015c86:	689a      	ldr	r2, [r3, #8]
 8015c88:	687b      	ldr	r3, [r7, #4]
 8015c8a:	681b      	ldr	r3, [r3, #0]
 8015c8c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8015c90:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8015c92:	687b      	ldr	r3, [r7, #4]
 8015c94:	681b      	ldr	r3, [r3, #0]
 8015c96:	681a      	ldr	r2, [r3, #0]
 8015c98:	687b      	ldr	r3, [r7, #4]
 8015c9a:	681b      	ldr	r3, [r3, #0]
 8015c9c:	f042 0201 	orr.w	r2, r2, #1
 8015ca0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8015ca2:	6878      	ldr	r0, [r7, #4]
 8015ca4:	f001 f936 	bl	8016f14 <UART_CheckIdleState>
 8015ca8:	4603      	mov	r3, r0
}
 8015caa:	4618      	mov	r0, r3
 8015cac:	3708      	adds	r7, #8
 8015cae:	46bd      	mov	sp, r7
 8015cb0:	bd80      	pop	{r7, pc}
 8015cb2:	bf00      	nop
 8015cb4:	40013800 	.word	0x40013800
 8015cb8:	40004400 	.word	0x40004400
 8015cbc:	40004800 	.word	0x40004800
 8015cc0:	40004c00 	.word	0x40004c00
 8015cc4:	40008000 	.word	0x40008000
 8015cc8:	0801adc0 	.word	0x0801adc0

08015ccc <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8015ccc:	b580      	push	{r7, lr}
 8015cce:	b08a      	sub	sp, #40	@ 0x28
 8015cd0:	af02      	add	r7, sp, #8
 8015cd2:	60f8      	str	r0, [r7, #12]
 8015cd4:	60b9      	str	r1, [r7, #8]
 8015cd6:	603b      	str	r3, [r7, #0]
 8015cd8:	4613      	mov	r3, r2
 8015cda:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8015cdc:	68fb      	ldr	r3, [r7, #12]
 8015cde:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8015ce2:	2b20      	cmp	r3, #32
 8015ce4:	d17b      	bne.n	8015dde <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8015ce6:	68bb      	ldr	r3, [r7, #8]
 8015ce8:	2b00      	cmp	r3, #0
 8015cea:	d002      	beq.n	8015cf2 <HAL_UART_Transmit+0x26>
 8015cec:	88fb      	ldrh	r3, [r7, #6]
 8015cee:	2b00      	cmp	r3, #0
 8015cf0:	d101      	bne.n	8015cf6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8015cf2:	2301      	movs	r3, #1
 8015cf4:	e074      	b.n	8015de0 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	2200      	movs	r2, #0
 8015cfa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8015cfe:	68fb      	ldr	r3, [r7, #12]
 8015d00:	2221      	movs	r2, #33	@ 0x21
 8015d02:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8015d06:	f7fc fc9b 	bl	8012640 <HAL_GetTick>
 8015d0a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8015d0c:	68fb      	ldr	r3, [r7, #12]
 8015d0e:	88fa      	ldrh	r2, [r7, #6]
 8015d10:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	88fa      	ldrh	r2, [r7, #6]
 8015d18:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8015d1c:	68fb      	ldr	r3, [r7, #12]
 8015d1e:	689b      	ldr	r3, [r3, #8]
 8015d20:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8015d24:	d108      	bne.n	8015d38 <HAL_UART_Transmit+0x6c>
 8015d26:	68fb      	ldr	r3, [r7, #12]
 8015d28:	691b      	ldr	r3, [r3, #16]
 8015d2a:	2b00      	cmp	r3, #0
 8015d2c:	d104      	bne.n	8015d38 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8015d2e:	2300      	movs	r3, #0
 8015d30:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8015d32:	68bb      	ldr	r3, [r7, #8]
 8015d34:	61bb      	str	r3, [r7, #24]
 8015d36:	e003      	b.n	8015d40 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8015d38:	68bb      	ldr	r3, [r7, #8]
 8015d3a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8015d3c:	2300      	movs	r3, #0
 8015d3e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8015d40:	e030      	b.n	8015da4 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8015d42:	683b      	ldr	r3, [r7, #0]
 8015d44:	9300      	str	r3, [sp, #0]
 8015d46:	697b      	ldr	r3, [r7, #20]
 8015d48:	2200      	movs	r2, #0
 8015d4a:	2180      	movs	r1, #128	@ 0x80
 8015d4c:	68f8      	ldr	r0, [r7, #12]
 8015d4e:	f001 f98b 	bl	8017068 <UART_WaitOnFlagUntilTimeout>
 8015d52:	4603      	mov	r3, r0
 8015d54:	2b00      	cmp	r3, #0
 8015d56:	d005      	beq.n	8015d64 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8015d58:	68fb      	ldr	r3, [r7, #12]
 8015d5a:	2220      	movs	r2, #32
 8015d5c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8015d60:	2303      	movs	r3, #3
 8015d62:	e03d      	b.n	8015de0 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8015d64:	69fb      	ldr	r3, [r7, #28]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d10b      	bne.n	8015d82 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8015d6a:	69bb      	ldr	r3, [r7, #24]
 8015d6c:	881b      	ldrh	r3, [r3, #0]
 8015d6e:	461a      	mov	r2, r3
 8015d70:	68fb      	ldr	r3, [r7, #12]
 8015d72:	681b      	ldr	r3, [r3, #0]
 8015d74:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8015d78:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8015d7a:	69bb      	ldr	r3, [r7, #24]
 8015d7c:	3302      	adds	r3, #2
 8015d7e:	61bb      	str	r3, [r7, #24]
 8015d80:	e007      	b.n	8015d92 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8015d82:	69fb      	ldr	r3, [r7, #28]
 8015d84:	781a      	ldrb	r2, [r3, #0]
 8015d86:	68fb      	ldr	r3, [r7, #12]
 8015d88:	681b      	ldr	r3, [r3, #0]
 8015d8a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8015d8c:	69fb      	ldr	r3, [r7, #28]
 8015d8e:	3301      	adds	r3, #1
 8015d90:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8015d92:	68fb      	ldr	r3, [r7, #12]
 8015d94:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8015d98:	b29b      	uxth	r3, r3
 8015d9a:	3b01      	subs	r3, #1
 8015d9c:	b29a      	uxth	r2, r3
 8015d9e:	68fb      	ldr	r3, [r7, #12]
 8015da0:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8015da4:	68fb      	ldr	r3, [r7, #12]
 8015da6:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8015daa:	b29b      	uxth	r3, r3
 8015dac:	2b00      	cmp	r3, #0
 8015dae:	d1c8      	bne.n	8015d42 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8015db0:	683b      	ldr	r3, [r7, #0]
 8015db2:	9300      	str	r3, [sp, #0]
 8015db4:	697b      	ldr	r3, [r7, #20]
 8015db6:	2200      	movs	r2, #0
 8015db8:	2140      	movs	r1, #64	@ 0x40
 8015dba:	68f8      	ldr	r0, [r7, #12]
 8015dbc:	f001 f954 	bl	8017068 <UART_WaitOnFlagUntilTimeout>
 8015dc0:	4603      	mov	r3, r0
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d005      	beq.n	8015dd2 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8015dc6:	68fb      	ldr	r3, [r7, #12]
 8015dc8:	2220      	movs	r2, #32
 8015dca:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8015dce:	2303      	movs	r3, #3
 8015dd0:	e006      	b.n	8015de0 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8015dd2:	68fb      	ldr	r3, [r7, #12]
 8015dd4:	2220      	movs	r2, #32
 8015dd6:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8015dda:	2300      	movs	r3, #0
 8015ddc:	e000      	b.n	8015de0 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8015dde:	2302      	movs	r3, #2
  }
}
 8015de0:	4618      	mov	r0, r3
 8015de2:	3720      	adds	r7, #32
 8015de4:	46bd      	mov	sp, r7
 8015de6:	bd80      	pop	{r7, pc}

08015de8 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8015de8:	b580      	push	{r7, lr}
 8015dea:	b08a      	sub	sp, #40	@ 0x28
 8015dec:	af00      	add	r7, sp, #0
 8015dee:	60f8      	str	r0, [r7, #12]
 8015df0:	60b9      	str	r1, [r7, #8]
 8015df2:	4613      	mov	r3, r2
 8015df4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8015df6:	68fb      	ldr	r3, [r7, #12]
 8015df8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8015dfc:	2b20      	cmp	r3, #32
 8015dfe:	d137      	bne.n	8015e70 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8015e00:	68bb      	ldr	r3, [r7, #8]
 8015e02:	2b00      	cmp	r3, #0
 8015e04:	d002      	beq.n	8015e0c <HAL_UART_Receive_IT+0x24>
 8015e06:	88fb      	ldrh	r3, [r7, #6]
 8015e08:	2b00      	cmp	r3, #0
 8015e0a:	d101      	bne.n	8015e10 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8015e0c:	2301      	movs	r3, #1
 8015e0e:	e030      	b.n	8015e72 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015e10:	68fb      	ldr	r3, [r7, #12]
 8015e12:	2200      	movs	r2, #0
 8015e14:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8015e16:	68fb      	ldr	r3, [r7, #12]
 8015e18:	681b      	ldr	r3, [r3, #0]
 8015e1a:	4a18      	ldr	r2, [pc, #96]	@ (8015e7c <HAL_UART_Receive_IT+0x94>)
 8015e1c:	4293      	cmp	r3, r2
 8015e1e:	d01f      	beq.n	8015e60 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8015e20:	68fb      	ldr	r3, [r7, #12]
 8015e22:	681b      	ldr	r3, [r3, #0]
 8015e24:	685b      	ldr	r3, [r3, #4]
 8015e26:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8015e2a:	2b00      	cmp	r3, #0
 8015e2c:	d018      	beq.n	8015e60 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015e2e:	68fb      	ldr	r3, [r7, #12]
 8015e30:	681b      	ldr	r3, [r3, #0]
 8015e32:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8015e34:	697b      	ldr	r3, [r7, #20]
 8015e36:	e853 3f00 	ldrex	r3, [r3]
 8015e3a:	613b      	str	r3, [r7, #16]
   return(result);
 8015e3c:	693b      	ldr	r3, [r7, #16]
 8015e3e:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8015e42:	627b      	str	r3, [r7, #36]	@ 0x24
 8015e44:	68fb      	ldr	r3, [r7, #12]
 8015e46:	681b      	ldr	r3, [r3, #0]
 8015e48:	461a      	mov	r2, r3
 8015e4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015e4c:	623b      	str	r3, [r7, #32]
 8015e4e:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8015e50:	69f9      	ldr	r1, [r7, #28]
 8015e52:	6a3a      	ldr	r2, [r7, #32]
 8015e54:	e841 2300 	strex	r3, r2, [r1]
 8015e58:	61bb      	str	r3, [r7, #24]
   return(result);
 8015e5a:	69bb      	ldr	r3, [r7, #24]
 8015e5c:	2b00      	cmp	r3, #0
 8015e5e:	d1e6      	bne.n	8015e2e <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8015e60:	88fb      	ldrh	r3, [r7, #6]
 8015e62:	461a      	mov	r2, r3
 8015e64:	68b9      	ldr	r1, [r7, #8]
 8015e66:	68f8      	ldr	r0, [r7, #12]
 8015e68:	f001 f96c 	bl	8017144 <UART_Start_Receive_IT>
 8015e6c:	4603      	mov	r3, r0
 8015e6e:	e000      	b.n	8015e72 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8015e70:	2302      	movs	r3, #2
  }
}
 8015e72:	4618      	mov	r0, r3
 8015e74:	3728      	adds	r7, #40	@ 0x28
 8015e76:	46bd      	mov	sp, r7
 8015e78:	bd80      	pop	{r7, pc}
 8015e7a:	bf00      	nop
 8015e7c:	40008000 	.word	0x40008000

08015e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8015e80:	b580      	push	{r7, lr}
 8015e82:	b0ba      	sub	sp, #232	@ 0xe8
 8015e84:	af00      	add	r7, sp, #0
 8015e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8015e88:	687b      	ldr	r3, [r7, #4]
 8015e8a:	681b      	ldr	r3, [r3, #0]
 8015e8c:	69db      	ldr	r3, [r3, #28]
 8015e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8015e92:	687b      	ldr	r3, [r7, #4]
 8015e94:	681b      	ldr	r3, [r3, #0]
 8015e96:	681b      	ldr	r3, [r3, #0]
 8015e98:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8015e9c:	687b      	ldr	r3, [r7, #4]
 8015e9e:	681b      	ldr	r3, [r3, #0]
 8015ea0:	689b      	ldr	r3, [r3, #8]
 8015ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8015ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8015eaa:	f640 030f 	movw	r3, #2063	@ 0x80f
 8015eae:	4013      	ands	r3, r2
 8015eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8015eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015eb8:	2b00      	cmp	r3, #0
 8015eba:	d11b      	bne.n	8015ef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8015ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015ec0:	f003 0320 	and.w	r3, r3, #32
 8015ec4:	2b00      	cmp	r3, #0
 8015ec6:	d015      	beq.n	8015ef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8015ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015ecc:	f003 0320 	and.w	r3, r3, #32
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d105      	bne.n	8015ee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8015ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015ed8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8015edc:	2b00      	cmp	r3, #0
 8015ede:	d009      	beq.n	8015ef4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8015ee0:	687b      	ldr	r3, [r7, #4]
 8015ee2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015ee4:	2b00      	cmp	r3, #0
 8015ee6:	f000 82e3 	beq.w	80164b0 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8015eea:	687b      	ldr	r3, [r7, #4]
 8015eec:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8015eee:	6878      	ldr	r0, [r7, #4]
 8015ef0:	4798      	blx	r3
      }
      return;
 8015ef2:	e2dd      	b.n	80164b0 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8015ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8015ef8:	2b00      	cmp	r3, #0
 8015efa:	f000 8123 	beq.w	8016144 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8015efe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8015f02:	4b8d      	ldr	r3, [pc, #564]	@ (8016138 <HAL_UART_IRQHandler+0x2b8>)
 8015f04:	4013      	ands	r3, r2
 8015f06:	2b00      	cmp	r3, #0
 8015f08:	d106      	bne.n	8015f18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8015f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8015f0e:	4b8b      	ldr	r3, [pc, #556]	@ (801613c <HAL_UART_IRQHandler+0x2bc>)
 8015f10:	4013      	ands	r3, r2
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	f000 8116 	beq.w	8016144 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8015f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015f1c:	f003 0301 	and.w	r3, r3, #1
 8015f20:	2b00      	cmp	r3, #0
 8015f22:	d011      	beq.n	8015f48 <HAL_UART_IRQHandler+0xc8>
 8015f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015f28:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8015f2c:	2b00      	cmp	r3, #0
 8015f2e:	d00b      	beq.n	8015f48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8015f30:	687b      	ldr	r3, [r7, #4]
 8015f32:	681b      	ldr	r3, [r3, #0]
 8015f34:	2201      	movs	r2, #1
 8015f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8015f38:	687b      	ldr	r3, [r7, #4]
 8015f3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f3e:	f043 0201 	orr.w	r2, r3, #1
 8015f42:	687b      	ldr	r3, [r7, #4]
 8015f44:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015f4c:	f003 0302 	and.w	r3, r3, #2
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	d011      	beq.n	8015f78 <HAL_UART_IRQHandler+0xf8>
 8015f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015f58:	f003 0301 	and.w	r3, r3, #1
 8015f5c:	2b00      	cmp	r3, #0
 8015f5e:	d00b      	beq.n	8015f78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8015f60:	687b      	ldr	r3, [r7, #4]
 8015f62:	681b      	ldr	r3, [r3, #0]
 8015f64:	2202      	movs	r2, #2
 8015f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8015f68:	687b      	ldr	r3, [r7, #4]
 8015f6a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f6e:	f043 0204 	orr.w	r2, r3, #4
 8015f72:	687b      	ldr	r3, [r7, #4]
 8015f74:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8015f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015f7c:	f003 0304 	and.w	r3, r3, #4
 8015f80:	2b00      	cmp	r3, #0
 8015f82:	d011      	beq.n	8015fa8 <HAL_UART_IRQHandler+0x128>
 8015f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8015f88:	f003 0301 	and.w	r3, r3, #1
 8015f8c:	2b00      	cmp	r3, #0
 8015f8e:	d00b      	beq.n	8015fa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8015f90:	687b      	ldr	r3, [r7, #4]
 8015f92:	681b      	ldr	r3, [r3, #0]
 8015f94:	2204      	movs	r2, #4
 8015f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015f9e:	f043 0202 	orr.w	r2, r3, #2
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8015fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015fac:	f003 0308 	and.w	r3, r3, #8
 8015fb0:	2b00      	cmp	r3, #0
 8015fb2:	d017      	beq.n	8015fe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015fb8:	f003 0320 	and.w	r3, r3, #32
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d105      	bne.n	8015fcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8015fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8015fc4:	4b5c      	ldr	r3, [pc, #368]	@ (8016138 <HAL_UART_IRQHandler+0x2b8>)
 8015fc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d00b      	beq.n	8015fe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	681b      	ldr	r3, [r3, #0]
 8015fd0:	2208      	movs	r2, #8
 8015fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8015fd4:	687b      	ldr	r3, [r7, #4]
 8015fd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8015fda:	f043 0208 	orr.w	r2, r3, #8
 8015fde:	687b      	ldr	r3, [r7, #4]
 8015fe0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8015fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8015fe8:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8015fec:	2b00      	cmp	r3, #0
 8015fee:	d012      	beq.n	8016016 <HAL_UART_IRQHandler+0x196>
 8015ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8015ff4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8015ff8:	2b00      	cmp	r3, #0
 8015ffa:	d00c      	beq.n	8016016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8015ffc:	687b      	ldr	r3, [r7, #4]
 8015ffe:	681b      	ldr	r3, [r3, #0]
 8016000:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8016004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8016006:	687b      	ldr	r3, [r7, #4]
 8016008:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801600c:	f043 0220 	orr.w	r2, r3, #32
 8016010:	687b      	ldr	r3, [r7, #4]
 8016012:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8016016:	687b      	ldr	r3, [r7, #4]
 8016018:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801601c:	2b00      	cmp	r3, #0
 801601e:	f000 8249 	beq.w	80164b4 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8016022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016026:	f003 0320 	and.w	r3, r3, #32
 801602a:	2b00      	cmp	r3, #0
 801602c:	d013      	beq.n	8016056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 801602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016032:	f003 0320 	and.w	r3, r3, #32
 8016036:	2b00      	cmp	r3, #0
 8016038:	d105      	bne.n	8016046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 801603a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801603e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8016042:	2b00      	cmp	r3, #0
 8016044:	d007      	beq.n	8016056 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 801604a:	2b00      	cmp	r3, #0
 801604c:	d003      	beq.n	8016056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 801604e:	687b      	ldr	r3, [r7, #4]
 8016050:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8016052:	6878      	ldr	r0, [r7, #4]
 8016054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8016056:	687b      	ldr	r3, [r7, #4]
 8016058:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 801605c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016060:	687b      	ldr	r3, [r7, #4]
 8016062:	681b      	ldr	r3, [r3, #0]
 8016064:	689b      	ldr	r3, [r3, #8]
 8016066:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801606a:	2b40      	cmp	r3, #64	@ 0x40
 801606c:	d005      	beq.n	801607a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 801606e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8016072:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8016076:	2b00      	cmp	r3, #0
 8016078:	d054      	beq.n	8016124 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 801607a:	6878      	ldr	r0, [r7, #4]
 801607c:	f001 f984 	bl	8017388 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016080:	687b      	ldr	r3, [r7, #4]
 8016082:	681b      	ldr	r3, [r3, #0]
 8016084:	689b      	ldr	r3, [r3, #8]
 8016086:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801608a:	2b40      	cmp	r3, #64	@ 0x40
 801608c:	d146      	bne.n	801611c <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801608e:	687b      	ldr	r3, [r7, #4]
 8016090:	681b      	ldr	r3, [r3, #0]
 8016092:	3308      	adds	r3, #8
 8016094:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016098:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 801609c:	e853 3f00 	ldrex	r3, [r3]
 80160a0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80160a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80160a8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80160ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80160b0:	687b      	ldr	r3, [r7, #4]
 80160b2:	681b      	ldr	r3, [r3, #0]
 80160b4:	3308      	adds	r3, #8
 80160b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80160ba:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80160be:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80160c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80160c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80160ca:	e841 2300 	strex	r3, r2, [r1]
 80160ce:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80160d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80160d6:	2b00      	cmp	r3, #0
 80160d8:	d1d9      	bne.n	801608e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80160da:	687b      	ldr	r3, [r7, #4]
 80160dc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d017      	beq.n	8016114 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80160e4:	687b      	ldr	r3, [r7, #4]
 80160e6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80160ea:	4a15      	ldr	r2, [pc, #84]	@ (8016140 <HAL_UART_IRQHandler+0x2c0>)
 80160ec:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80160ee:	687b      	ldr	r3, [r7, #4]
 80160f0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80160f4:	4618      	mov	r0, r3
 80160f6:	f7fc ff22 	bl	8012f3e <HAL_DMA_Abort_IT>
 80160fa:	4603      	mov	r3, r0
 80160fc:	2b00      	cmp	r3, #0
 80160fe:	d019      	beq.n	8016134 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8016100:	687b      	ldr	r3, [r7, #4]
 8016102:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016108:	687a      	ldr	r2, [r7, #4]
 801610a:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 801610e:	4610      	mov	r0, r2
 8016110:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016112:	e00f      	b.n	8016134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8016114:	6878      	ldr	r0, [r7, #4]
 8016116:	f000 f9e1 	bl	80164dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 801611a:	e00b      	b.n	8016134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801611c:	6878      	ldr	r0, [r7, #4]
 801611e:	f000 f9dd 	bl	80164dc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016122:	e007      	b.n	8016134 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8016124:	6878      	ldr	r0, [r7, #4]
 8016126:	f000 f9d9 	bl	80164dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 801612a:	687b      	ldr	r3, [r7, #4]
 801612c:	2200      	movs	r2, #0
 801612e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8016132:	e1bf      	b.n	80164b4 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016134:	bf00      	nop
    return;
 8016136:	e1bd      	b.n	80164b4 <HAL_UART_IRQHandler+0x634>
 8016138:	10000001 	.word	0x10000001
 801613c:	04000120 	.word	0x04000120
 8016140:	08017455 	.word	0x08017455

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8016144:	687b      	ldr	r3, [r7, #4]
 8016146:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8016148:	2b01      	cmp	r3, #1
 801614a:	f040 8153 	bne.w	80163f4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 801614e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016152:	f003 0310 	and.w	r3, r3, #16
 8016156:	2b00      	cmp	r3, #0
 8016158:	f000 814c 	beq.w	80163f4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 801615c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016160:	f003 0310 	and.w	r3, r3, #16
 8016164:	2b00      	cmp	r3, #0
 8016166:	f000 8145 	beq.w	80163f4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801616a:	687b      	ldr	r3, [r7, #4]
 801616c:	681b      	ldr	r3, [r3, #0]
 801616e:	2210      	movs	r2, #16
 8016170:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8016172:	687b      	ldr	r3, [r7, #4]
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	689b      	ldr	r3, [r3, #8]
 8016178:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801617c:	2b40      	cmp	r3, #64	@ 0x40
 801617e:	f040 80bb 	bne.w	80162f8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8016182:	687b      	ldr	r3, [r7, #4]
 8016184:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	685b      	ldr	r3, [r3, #4]
 801618c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8016190:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8016194:	2b00      	cmp	r3, #0
 8016196:	f000 818f 	beq.w	80164b8 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 801619a:	687b      	ldr	r3, [r7, #4]
 801619c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80161a0:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80161a4:	429a      	cmp	r2, r3
 80161a6:	f080 8187 	bcs.w	80164b8 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80161aa:	687b      	ldr	r3, [r7, #4]
 80161ac:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80161b0:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80161b4:	687b      	ldr	r3, [r7, #4]
 80161b6:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80161ba:	681b      	ldr	r3, [r3, #0]
 80161bc:	681b      	ldr	r3, [r3, #0]
 80161be:	f003 0320 	and.w	r3, r3, #32
 80161c2:	2b00      	cmp	r3, #0
 80161c4:	f040 8087 	bne.w	80162d6 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80161c8:	687b      	ldr	r3, [r7, #4]
 80161ca:	681b      	ldr	r3, [r3, #0]
 80161cc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80161d0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80161d4:	e853 3f00 	ldrex	r3, [r3]
 80161d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80161dc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80161e0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80161e4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80161e8:	687b      	ldr	r3, [r7, #4]
 80161ea:	681b      	ldr	r3, [r3, #0]
 80161ec:	461a      	mov	r2, r3
 80161ee:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80161f2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80161f6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80161fa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80161fe:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8016202:	e841 2300 	strex	r3, r2, [r1]
 8016206:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 801620a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 801620e:	2b00      	cmp	r3, #0
 8016210:	d1da      	bne.n	80161c8 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016212:	687b      	ldr	r3, [r7, #4]
 8016214:	681b      	ldr	r3, [r3, #0]
 8016216:	3308      	adds	r3, #8
 8016218:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801621a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801621c:	e853 3f00 	ldrex	r3, [r3]
 8016220:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8016222:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8016224:	f023 0301 	bic.w	r3, r3, #1
 8016228:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	681b      	ldr	r3, [r3, #0]
 8016230:	3308      	adds	r3, #8
 8016232:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8016236:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 801623a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801623c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 801623e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8016242:	e841 2300 	strex	r3, r2, [r1]
 8016246:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8016248:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801624a:	2b00      	cmp	r3, #0
 801624c:	d1e1      	bne.n	8016212 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 801624e:	687b      	ldr	r3, [r7, #4]
 8016250:	681b      	ldr	r3, [r3, #0]
 8016252:	3308      	adds	r3, #8
 8016254:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016256:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8016258:	e853 3f00 	ldrex	r3, [r3]
 801625c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 801625e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016260:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8016264:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8016268:	687b      	ldr	r3, [r7, #4]
 801626a:	681b      	ldr	r3, [r3, #0]
 801626c:	3308      	adds	r3, #8
 801626e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8016272:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8016274:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016276:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8016278:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 801627a:	e841 2300 	strex	r3, r2, [r1]
 801627e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8016280:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016282:	2b00      	cmp	r3, #0
 8016284:	d1e3      	bne.n	801624e <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8016286:	687b      	ldr	r3, [r7, #4]
 8016288:	2220      	movs	r2, #32
 801628a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801628e:	687b      	ldr	r3, [r7, #4]
 8016290:	2200      	movs	r2, #0
 8016292:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8016294:	687b      	ldr	r3, [r7, #4]
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801629a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801629c:	e853 3f00 	ldrex	r3, [r3]
 80162a0:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80162a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80162a4:	f023 0310 	bic.w	r3, r3, #16
 80162a8:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80162ac:	687b      	ldr	r3, [r7, #4]
 80162ae:	681b      	ldr	r3, [r3, #0]
 80162b0:	461a      	mov	r2, r3
 80162b2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80162b6:	65bb      	str	r3, [r7, #88]	@ 0x58
 80162b8:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80162ba:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80162bc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80162be:	e841 2300 	strex	r3, r2, [r1]
 80162c2:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80162c4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80162c6:	2b00      	cmp	r3, #0
 80162c8:	d1e4      	bne.n	8016294 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80162ca:	687b      	ldr	r3, [r7, #4]
 80162cc:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 80162d0:	4618      	mov	r0, r3
 80162d2:	f7fc fddb 	bl	8012e8c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80162d6:	687b      	ldr	r3, [r7, #4]
 80162d8:	2202      	movs	r2, #2
 80162da:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80162dc:	687b      	ldr	r3, [r7, #4]
 80162de:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80162e8:	b29b      	uxth	r3, r3
 80162ea:	1ad3      	subs	r3, r2, r3
 80162ec:	b29b      	uxth	r3, r3
 80162ee:	4619      	mov	r1, r3
 80162f0:	6878      	ldr	r0, [r7, #4]
 80162f2:	f000 f8fd 	bl	80164f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80162f6:	e0df      	b.n	80164b8 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80162f8:	687b      	ldr	r3, [r7, #4]
 80162fa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80162fe:	687b      	ldr	r3, [r7, #4]
 8016300:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016304:	b29b      	uxth	r3, r3
 8016306:	1ad3      	subs	r3, r2, r3
 8016308:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8016312:	b29b      	uxth	r3, r3
 8016314:	2b00      	cmp	r3, #0
 8016316:	f000 80d1 	beq.w	80164bc <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 801631a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 801631e:	2b00      	cmp	r3, #0
 8016320:	f000 80cc 	beq.w	80164bc <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016324:	687b      	ldr	r3, [r7, #4]
 8016326:	681b      	ldr	r3, [r3, #0]
 8016328:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801632a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801632c:	e853 3f00 	ldrex	r3, [r3]
 8016330:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016332:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016334:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016338:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 801633c:	687b      	ldr	r3, [r7, #4]
 801633e:	681b      	ldr	r3, [r3, #0]
 8016340:	461a      	mov	r2, r3
 8016342:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 8016346:	647b      	str	r3, [r7, #68]	@ 0x44
 8016348:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801634a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 801634c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801634e:	e841 2300 	strex	r3, r2, [r1]
 8016352:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016354:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016356:	2b00      	cmp	r3, #0
 8016358:	d1e4      	bne.n	8016324 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 801635a:	687b      	ldr	r3, [r7, #4]
 801635c:	681b      	ldr	r3, [r3, #0]
 801635e:	3308      	adds	r3, #8
 8016360:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016362:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016364:	e853 3f00 	ldrex	r3, [r3]
 8016368:	623b      	str	r3, [r7, #32]
   return(result);
 801636a:	6a3b      	ldr	r3, [r7, #32]
 801636c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8016370:	f023 0301 	bic.w	r3, r3, #1
 8016374:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8016378:	687b      	ldr	r3, [r7, #4]
 801637a:	681b      	ldr	r3, [r3, #0]
 801637c:	3308      	adds	r3, #8
 801637e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8016382:	633a      	str	r2, [r7, #48]	@ 0x30
 8016384:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016386:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016388:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 801638a:	e841 2300 	strex	r3, r2, [r1]
 801638e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016392:	2b00      	cmp	r3, #0
 8016394:	d1e1      	bne.n	801635a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8016396:	687b      	ldr	r3, [r7, #4]
 8016398:	2220      	movs	r2, #32
 801639a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801639e:	687b      	ldr	r3, [r7, #4]
 80163a0:	2200      	movs	r2, #0
 80163a2:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	2200      	movs	r2, #0
 80163a8:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80163aa:	687b      	ldr	r3, [r7, #4]
 80163ac:	681b      	ldr	r3, [r3, #0]
 80163ae:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80163b0:	693b      	ldr	r3, [r7, #16]
 80163b2:	e853 3f00 	ldrex	r3, [r3]
 80163b6:	60fb      	str	r3, [r7, #12]
   return(result);
 80163b8:	68fb      	ldr	r3, [r7, #12]
 80163ba:	f023 0310 	bic.w	r3, r3, #16
 80163be:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80163c2:	687b      	ldr	r3, [r7, #4]
 80163c4:	681b      	ldr	r3, [r3, #0]
 80163c6:	461a      	mov	r2, r3
 80163c8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 80163cc:	61fb      	str	r3, [r7, #28]
 80163ce:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80163d0:	69b9      	ldr	r1, [r7, #24]
 80163d2:	69fa      	ldr	r2, [r7, #28]
 80163d4:	e841 2300 	strex	r3, r2, [r1]
 80163d8:	617b      	str	r3, [r7, #20]
   return(result);
 80163da:	697b      	ldr	r3, [r7, #20]
 80163dc:	2b00      	cmp	r3, #0
 80163de:	d1e4      	bne.n	80163aa <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80163e0:	687b      	ldr	r3, [r7, #4]
 80163e2:	2202      	movs	r2, #2
 80163e4:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80163e6:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80163ea:	4619      	mov	r1, r3
 80163ec:	6878      	ldr	r0, [r7, #4]
 80163ee:	f000 f87f 	bl	80164f0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80163f2:	e063      	b.n	80164bc <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80163f4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80163f8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80163fc:	2b00      	cmp	r3, #0
 80163fe:	d00e      	beq.n	801641e <HAL_UART_IRQHandler+0x59e>
 8016400:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8016404:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8016408:	2b00      	cmp	r3, #0
 801640a:	d008      	beq.n	801641e <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 801640c:	687b      	ldr	r3, [r7, #4]
 801640e:	681b      	ldr	r3, [r3, #0]
 8016410:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 8016414:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8016416:	6878      	ldr	r0, [r7, #4]
 8016418:	f001 fd7a 	bl	8017f10 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 801641c:	e051      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 801641e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016422:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016426:	2b00      	cmp	r3, #0
 8016428:	d014      	beq.n	8016454 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 801642a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 801642e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016432:	2b00      	cmp	r3, #0
 8016434:	d105      	bne.n	8016442 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8016436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 801643a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801643e:	2b00      	cmp	r3, #0
 8016440:	d008      	beq.n	8016454 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 8016442:	687b      	ldr	r3, [r7, #4]
 8016444:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8016446:	2b00      	cmp	r3, #0
 8016448:	d03a      	beq.n	80164c0 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 801644a:	687b      	ldr	r3, [r7, #4]
 801644c:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 801644e:	6878      	ldr	r0, [r7, #4]
 8016450:	4798      	blx	r3
    }
    return;
 8016452:	e035      	b.n	80164c0 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8016454:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016458:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 801645c:	2b00      	cmp	r3, #0
 801645e:	d009      	beq.n	8016474 <HAL_UART_IRQHandler+0x5f4>
 8016460:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016464:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016468:	2b00      	cmp	r3, #0
 801646a:	d003      	beq.n	8016474 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 801646c:	6878      	ldr	r0, [r7, #4]
 801646e:	f001 f807 	bl	8017480 <UART_EndTransmit_IT>
    return;
 8016472:	e026      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8016474:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016478:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 801647c:	2b00      	cmp	r3, #0
 801647e:	d009      	beq.n	8016494 <HAL_UART_IRQHandler+0x614>
 8016480:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8016484:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8016488:	2b00      	cmp	r3, #0
 801648a:	d003      	beq.n	8016494 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 801648c:	6878      	ldr	r0, [r7, #4]
 801648e:	f001 fd53 	bl	8017f38 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8016492:	e016      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8016494:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8016498:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 801649c:	2b00      	cmp	r3, #0
 801649e:	d010      	beq.n	80164c2 <HAL_UART_IRQHandler+0x642>
 80164a0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80164a4:	2b00      	cmp	r3, #0
 80164a6:	da0c      	bge.n	80164c2 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f001 fd3b 	bl	8017f24 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80164ae:	e008      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
      return;
 80164b0:	bf00      	nop
 80164b2:	e006      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
    return;
 80164b4:	bf00      	nop
 80164b6:	e004      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
      return;
 80164b8:	bf00      	nop
 80164ba:	e002      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
      return;
 80164bc:	bf00      	nop
 80164be:	e000      	b.n	80164c2 <HAL_UART_IRQHandler+0x642>
    return;
 80164c0:	bf00      	nop
  }
}
 80164c2:	37e8      	adds	r7, #232	@ 0xe8
 80164c4:	46bd      	mov	sp, r7
 80164c6:	bd80      	pop	{r7, pc}

080164c8 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80164c8:	b480      	push	{r7}
 80164ca:	b083      	sub	sp, #12
 80164cc:	af00      	add	r7, sp, #0
 80164ce:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80164d0:	bf00      	nop
 80164d2:	370c      	adds	r7, #12
 80164d4:	46bd      	mov	sp, r7
 80164d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164da:	4770      	bx	lr

080164dc <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80164dc:	b480      	push	{r7}
 80164de:	b083      	sub	sp, #12
 80164e0:	af00      	add	r7, sp, #0
 80164e2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80164e4:	bf00      	nop
 80164e6:	370c      	adds	r7, #12
 80164e8:	46bd      	mov	sp, r7
 80164ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80164ee:	4770      	bx	lr

080164f0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80164f0:	b480      	push	{r7}
 80164f2:	b083      	sub	sp, #12
 80164f4:	af00      	add	r7, sp, #0
 80164f6:	6078      	str	r0, [r7, #4]
 80164f8:	460b      	mov	r3, r1
 80164fa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80164fc:	bf00      	nop
 80164fe:	370c      	adds	r7, #12
 8016500:	46bd      	mov	sp, r7
 8016502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016506:	4770      	bx	lr

08016508 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8016508:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 801650c:	b08c      	sub	sp, #48	@ 0x30
 801650e:	af00      	add	r7, sp, #0
 8016510:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8016512:	2300      	movs	r3, #0
 8016514:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 8016518:	697b      	ldr	r3, [r7, #20]
 801651a:	685b      	ldr	r3, [r3, #4]
 801651c:	4a17      	ldr	r2, [pc, #92]	@ (801657c <UART_SetConfig+0x74>)
 801651e:	4293      	cmp	r3, r2
 8016520:	d904      	bls.n	801652c <UART_SetConfig+0x24>
 8016522:	f640 31c7 	movw	r1, #3015	@ 0xbc7
 8016526:	4816      	ldr	r0, [pc, #88]	@ (8016580 <UART_SetConfig+0x78>)
 8016528:	f7fb fde6 	bl	80120f8 <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 801652c:	697b      	ldr	r3, [r7, #20]
 801652e:	689b      	ldr	r3, [r3, #8]
 8016530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8016534:	d00d      	beq.n	8016552 <UART_SetConfig+0x4a>
 8016536:	697b      	ldr	r3, [r7, #20]
 8016538:	689b      	ldr	r3, [r3, #8]
 801653a:	2b00      	cmp	r3, #0
 801653c:	d009      	beq.n	8016552 <UART_SetConfig+0x4a>
 801653e:	697b      	ldr	r3, [r7, #20]
 8016540:	689b      	ldr	r3, [r3, #8]
 8016542:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016546:	d004      	beq.n	8016552 <UART_SetConfig+0x4a>
 8016548:	f640 31c8 	movw	r1, #3016	@ 0xbc8
 801654c:	480c      	ldr	r0, [pc, #48]	@ (8016580 <UART_SetConfig+0x78>)
 801654e:	f7fb fdd3 	bl	80120f8 <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8016552:	697b      	ldr	r3, [r7, #20]
 8016554:	681b      	ldr	r3, [r3, #0]
 8016556:	4a0b      	ldr	r2, [pc, #44]	@ (8016584 <UART_SetConfig+0x7c>)
 8016558:	4293      	cmp	r3, r2
 801655a:	d115      	bne.n	8016588 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 801655c:	697b      	ldr	r3, [r7, #20]
 801655e:	68db      	ldr	r3, [r3, #12]
 8016560:	2b00      	cmp	r3, #0
 8016562:	d037      	beq.n	80165d4 <UART_SetConfig+0xcc>
 8016564:	697b      	ldr	r3, [r7, #20]
 8016566:	68db      	ldr	r3, [r3, #12]
 8016568:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 801656c:	d032      	beq.n	80165d4 <UART_SetConfig+0xcc>
 801656e:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 8016572:	4803      	ldr	r0, [pc, #12]	@ (8016580 <UART_SetConfig+0x78>)
 8016574:	f7fb fdc0 	bl	80120f8 <assert_failed>
 8016578:	e02c      	b.n	80165d4 <UART_SetConfig+0xcc>
 801657a:	bf00      	nop
 801657c:	011e1a30 	.word	0x011e1a30
 8016580:	0801adc0 	.word	0x0801adc0
 8016584:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8016588:	697b      	ldr	r3, [r7, #20]
 801658a:	68db      	ldr	r3, [r3, #12]
 801658c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016590:	d012      	beq.n	80165b8 <UART_SetConfig+0xb0>
 8016592:	697b      	ldr	r3, [r7, #20]
 8016594:	68db      	ldr	r3, [r3, #12]
 8016596:	2b00      	cmp	r3, #0
 8016598:	d00e      	beq.n	80165b8 <UART_SetConfig+0xb0>
 801659a:	697b      	ldr	r3, [r7, #20]
 801659c:	68db      	ldr	r3, [r3, #12]
 801659e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 80165a2:	d009      	beq.n	80165b8 <UART_SetConfig+0xb0>
 80165a4:	697b      	ldr	r3, [r7, #20]
 80165a6:	68db      	ldr	r3, [r3, #12]
 80165a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80165ac:	d004      	beq.n	80165b8 <UART_SetConfig+0xb0>
 80165ae:	f640 31cf 	movw	r1, #3023	@ 0xbcf
 80165b2:	489e      	ldr	r0, [pc, #632]	@ (801682c <UART_SetConfig+0x324>)
 80165b4:	f7fb fda0 	bl	80120f8 <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 80165b8:	697b      	ldr	r3, [r7, #20]
 80165ba:	6a1b      	ldr	r3, [r3, #32]
 80165bc:	2b00      	cmp	r3, #0
 80165be:	d009      	beq.n	80165d4 <UART_SetConfig+0xcc>
 80165c0:	697b      	ldr	r3, [r7, #20]
 80165c2:	6a1b      	ldr	r3, [r3, #32]
 80165c4:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80165c8:	d004      	beq.n	80165d4 <UART_SetConfig+0xcc>
 80165ca:	f44f 613d 	mov.w	r1, #3024	@ 0xbd0
 80165ce:	4897      	ldr	r0, [pc, #604]	@ (801682c <UART_SetConfig+0x324>)
 80165d0:	f7fb fd92 	bl	80120f8 <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 80165d4:	697b      	ldr	r3, [r7, #20]
 80165d6:	691b      	ldr	r3, [r3, #16]
 80165d8:	2b00      	cmp	r3, #0
 80165da:	d00e      	beq.n	80165fa <UART_SetConfig+0xf2>
 80165dc:	697b      	ldr	r3, [r7, #20]
 80165de:	691b      	ldr	r3, [r3, #16]
 80165e0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80165e4:	d009      	beq.n	80165fa <UART_SetConfig+0xf2>
 80165e6:	697b      	ldr	r3, [r7, #20]
 80165e8:	691b      	ldr	r3, [r3, #16]
 80165ea:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80165ee:	d004      	beq.n	80165fa <UART_SetConfig+0xf2>
 80165f0:	f640 31d3 	movw	r1, #3027	@ 0xbd3
 80165f4:	488d      	ldr	r0, [pc, #564]	@ (801682c <UART_SetConfig+0x324>)
 80165f6:	f7fb fd7f 	bl	80120f8 <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80165fa:	697b      	ldr	r3, [r7, #20]
 80165fc:	695b      	ldr	r3, [r3, #20]
 80165fe:	f023 030c 	bic.w	r3, r3, #12
 8016602:	2b00      	cmp	r3, #0
 8016604:	d103      	bne.n	801660e <UART_SetConfig+0x106>
 8016606:	697b      	ldr	r3, [r7, #20]
 8016608:	695b      	ldr	r3, [r3, #20]
 801660a:	2b00      	cmp	r3, #0
 801660c:	d104      	bne.n	8016618 <UART_SetConfig+0x110>
 801660e:	f640 31d4 	movw	r1, #3028	@ 0xbd4
 8016612:	4886      	ldr	r0, [pc, #536]	@ (801682c <UART_SetConfig+0x324>)
 8016614:	f7fb fd70 	bl	80120f8 <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 8016618:	697b      	ldr	r3, [r7, #20]
 801661a:	699b      	ldr	r3, [r3, #24]
 801661c:	2b00      	cmp	r3, #0
 801661e:	d013      	beq.n	8016648 <UART_SetConfig+0x140>
 8016620:	697b      	ldr	r3, [r7, #20]
 8016622:	699b      	ldr	r3, [r3, #24]
 8016624:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8016628:	d00e      	beq.n	8016648 <UART_SetConfig+0x140>
 801662a:	697b      	ldr	r3, [r7, #20]
 801662c:	699b      	ldr	r3, [r3, #24]
 801662e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8016632:	d009      	beq.n	8016648 <UART_SetConfig+0x140>
 8016634:	697b      	ldr	r3, [r7, #20]
 8016636:	699b      	ldr	r3, [r3, #24]
 8016638:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 801663c:	d004      	beq.n	8016648 <UART_SetConfig+0x140>
 801663e:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 8016642:	487a      	ldr	r0, [pc, #488]	@ (801682c <UART_SetConfig+0x324>)
 8016644:	f7fb fd58 	bl	80120f8 <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 8016648:	697b      	ldr	r3, [r7, #20]
 801664a:	69db      	ldr	r3, [r3, #28]
 801664c:	2b00      	cmp	r3, #0
 801664e:	d009      	beq.n	8016664 <UART_SetConfig+0x15c>
 8016650:	697b      	ldr	r3, [r7, #20]
 8016652:	69db      	ldr	r3, [r3, #28]
 8016654:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016658:	d004      	beq.n	8016664 <UART_SetConfig+0x15c>
 801665a:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 801665e:	4873      	ldr	r0, [pc, #460]	@ (801682c <UART_SetConfig+0x324>)
 8016660:	f7fb fd4a 	bl	80120f8 <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8016664:	697b      	ldr	r3, [r7, #20]
 8016666:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016668:	2b00      	cmp	r3, #0
 801666a:	d030      	beq.n	80166ce <UART_SetConfig+0x1c6>
 801666c:	697b      	ldr	r3, [r7, #20]
 801666e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016670:	2b01      	cmp	r3, #1
 8016672:	d02c      	beq.n	80166ce <UART_SetConfig+0x1c6>
 8016674:	697b      	ldr	r3, [r7, #20]
 8016676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016678:	2b02      	cmp	r3, #2
 801667a:	d028      	beq.n	80166ce <UART_SetConfig+0x1c6>
 801667c:	697b      	ldr	r3, [r7, #20]
 801667e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016680:	2b03      	cmp	r3, #3
 8016682:	d024      	beq.n	80166ce <UART_SetConfig+0x1c6>
 8016684:	697b      	ldr	r3, [r7, #20]
 8016686:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016688:	2b04      	cmp	r3, #4
 801668a:	d020      	beq.n	80166ce <UART_SetConfig+0x1c6>
 801668c:	697b      	ldr	r3, [r7, #20]
 801668e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016690:	2b05      	cmp	r3, #5
 8016692:	d01c      	beq.n	80166ce <UART_SetConfig+0x1c6>
 8016694:	697b      	ldr	r3, [r7, #20]
 8016696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016698:	2b06      	cmp	r3, #6
 801669a:	d018      	beq.n	80166ce <UART_SetConfig+0x1c6>
 801669c:	697b      	ldr	r3, [r7, #20]
 801669e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166a0:	2b07      	cmp	r3, #7
 80166a2:	d014      	beq.n	80166ce <UART_SetConfig+0x1c6>
 80166a4:	697b      	ldr	r3, [r7, #20]
 80166a6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166a8:	2b08      	cmp	r3, #8
 80166aa:	d010      	beq.n	80166ce <UART_SetConfig+0x1c6>
 80166ac:	697b      	ldr	r3, [r7, #20]
 80166ae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166b0:	2b09      	cmp	r3, #9
 80166b2:	d00c      	beq.n	80166ce <UART_SetConfig+0x1c6>
 80166b4:	697b      	ldr	r3, [r7, #20]
 80166b6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166b8:	2b0a      	cmp	r3, #10
 80166ba:	d008      	beq.n	80166ce <UART_SetConfig+0x1c6>
 80166bc:	697b      	ldr	r3, [r7, #20]
 80166be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80166c0:	2b0b      	cmp	r3, #11
 80166c2:	d004      	beq.n	80166ce <UART_SetConfig+0x1c6>
 80166c4:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 80166c8:	4858      	ldr	r0, [pc, #352]	@ (801682c <UART_SetConfig+0x324>)
 80166ca:	f7fb fd15 	bl	80120f8 <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80166ce:	697b      	ldr	r3, [r7, #20]
 80166d0:	689a      	ldr	r2, [r3, #8]
 80166d2:	697b      	ldr	r3, [r7, #20]
 80166d4:	691b      	ldr	r3, [r3, #16]
 80166d6:	431a      	orrs	r2, r3
 80166d8:	697b      	ldr	r3, [r7, #20]
 80166da:	695b      	ldr	r3, [r3, #20]
 80166dc:	431a      	orrs	r2, r3
 80166de:	697b      	ldr	r3, [r7, #20]
 80166e0:	69db      	ldr	r3, [r3, #28]
 80166e2:	4313      	orrs	r3, r2
 80166e4:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80166e6:	697b      	ldr	r3, [r7, #20]
 80166e8:	681b      	ldr	r3, [r3, #0]
 80166ea:	681a      	ldr	r2, [r3, #0]
 80166ec:	4b50      	ldr	r3, [pc, #320]	@ (8016830 <UART_SetConfig+0x328>)
 80166ee:	4013      	ands	r3, r2
 80166f0:	697a      	ldr	r2, [r7, #20]
 80166f2:	6812      	ldr	r2, [r2, #0]
 80166f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80166f6:	430b      	orrs	r3, r1
 80166f8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80166fa:	697b      	ldr	r3, [r7, #20]
 80166fc:	681b      	ldr	r3, [r3, #0]
 80166fe:	685b      	ldr	r3, [r3, #4]
 8016700:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 8016704:	697b      	ldr	r3, [r7, #20]
 8016706:	68da      	ldr	r2, [r3, #12]
 8016708:	697b      	ldr	r3, [r7, #20]
 801670a:	681b      	ldr	r3, [r3, #0]
 801670c:	430a      	orrs	r2, r1
 801670e:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8016710:	697b      	ldr	r3, [r7, #20]
 8016712:	699b      	ldr	r3, [r3, #24]
 8016714:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8016716:	697b      	ldr	r3, [r7, #20]
 8016718:	681b      	ldr	r3, [r3, #0]
 801671a:	4a46      	ldr	r2, [pc, #280]	@ (8016834 <UART_SetConfig+0x32c>)
 801671c:	4293      	cmp	r3, r2
 801671e:	d004      	beq.n	801672a <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8016720:	697b      	ldr	r3, [r7, #20]
 8016722:	6a1b      	ldr	r3, [r3, #32]
 8016724:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8016726:	4313      	orrs	r3, r2
 8016728:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 801672a:	697b      	ldr	r3, [r7, #20]
 801672c:	681b      	ldr	r3, [r3, #0]
 801672e:	689b      	ldr	r3, [r3, #8]
 8016730:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 8016734:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 8016738:	697a      	ldr	r2, [r7, #20]
 801673a:	6812      	ldr	r2, [r2, #0]
 801673c:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 801673e:	430b      	orrs	r3, r1
 8016740:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8016742:	697b      	ldr	r3, [r7, #20]
 8016744:	681b      	ldr	r3, [r3, #0]
 8016746:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016748:	f023 010f 	bic.w	r1, r3, #15
 801674c:	697b      	ldr	r3, [r7, #20]
 801674e:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8016750:	697b      	ldr	r3, [r7, #20]
 8016752:	681b      	ldr	r3, [r3, #0]
 8016754:	430a      	orrs	r2, r1
 8016756:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8016758:	697b      	ldr	r3, [r7, #20]
 801675a:	681b      	ldr	r3, [r3, #0]
 801675c:	4a36      	ldr	r2, [pc, #216]	@ (8016838 <UART_SetConfig+0x330>)
 801675e:	4293      	cmp	r3, r2
 8016760:	d126      	bne.n	80167b0 <UART_SetConfig+0x2a8>
 8016762:	4b36      	ldr	r3, [pc, #216]	@ (801683c <UART_SetConfig+0x334>)
 8016764:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016768:	f003 0303 	and.w	r3, r3, #3
 801676c:	2b03      	cmp	r3, #3
 801676e:	d81b      	bhi.n	80167a8 <UART_SetConfig+0x2a0>
 8016770:	a201      	add	r2, pc, #4	@ (adr r2, 8016778 <UART_SetConfig+0x270>)
 8016772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016776:	bf00      	nop
 8016778:	08016789 	.word	0x08016789
 801677c:	08016799 	.word	0x08016799
 8016780:	08016791 	.word	0x08016791
 8016784:	080167a1 	.word	0x080167a1
 8016788:	2301      	movs	r3, #1
 801678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801678e:	e0e2      	b.n	8016956 <UART_SetConfig+0x44e>
 8016790:	2302      	movs	r3, #2
 8016792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016796:	e0de      	b.n	8016956 <UART_SetConfig+0x44e>
 8016798:	2304      	movs	r3, #4
 801679a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801679e:	e0da      	b.n	8016956 <UART_SetConfig+0x44e>
 80167a0:	2308      	movs	r3, #8
 80167a2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80167a6:	e0d6      	b.n	8016956 <UART_SetConfig+0x44e>
 80167a8:	2310      	movs	r3, #16
 80167aa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80167ae:	e0d2      	b.n	8016956 <UART_SetConfig+0x44e>
 80167b0:	697b      	ldr	r3, [r7, #20]
 80167b2:	681b      	ldr	r3, [r3, #0]
 80167b4:	4a22      	ldr	r2, [pc, #136]	@ (8016840 <UART_SetConfig+0x338>)
 80167b6:	4293      	cmp	r3, r2
 80167b8:	d144      	bne.n	8016844 <UART_SetConfig+0x33c>
 80167ba:	4b20      	ldr	r3, [pc, #128]	@ (801683c <UART_SetConfig+0x334>)
 80167bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80167c0:	f003 030c 	and.w	r3, r3, #12
 80167c4:	2b0c      	cmp	r3, #12
 80167c6:	d82d      	bhi.n	8016824 <UART_SetConfig+0x31c>
 80167c8:	a201      	add	r2, pc, #4	@ (adr r2, 80167d0 <UART_SetConfig+0x2c8>)
 80167ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80167ce:	bf00      	nop
 80167d0:	08016805 	.word	0x08016805
 80167d4:	08016825 	.word	0x08016825
 80167d8:	08016825 	.word	0x08016825
 80167dc:	08016825 	.word	0x08016825
 80167e0:	08016815 	.word	0x08016815
 80167e4:	08016825 	.word	0x08016825
 80167e8:	08016825 	.word	0x08016825
 80167ec:	08016825 	.word	0x08016825
 80167f0:	0801680d 	.word	0x0801680d
 80167f4:	08016825 	.word	0x08016825
 80167f8:	08016825 	.word	0x08016825
 80167fc:	08016825 	.word	0x08016825
 8016800:	0801681d 	.word	0x0801681d
 8016804:	2300      	movs	r3, #0
 8016806:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801680a:	e0a4      	b.n	8016956 <UART_SetConfig+0x44e>
 801680c:	2302      	movs	r3, #2
 801680e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016812:	e0a0      	b.n	8016956 <UART_SetConfig+0x44e>
 8016814:	2304      	movs	r3, #4
 8016816:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801681a:	e09c      	b.n	8016956 <UART_SetConfig+0x44e>
 801681c:	2308      	movs	r3, #8
 801681e:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016822:	e098      	b.n	8016956 <UART_SetConfig+0x44e>
 8016824:	2310      	movs	r3, #16
 8016826:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801682a:	e094      	b.n	8016956 <UART_SetConfig+0x44e>
 801682c:	0801adc0 	.word	0x0801adc0
 8016830:	cfff69f3 	.word	0xcfff69f3
 8016834:	40008000 	.word	0x40008000
 8016838:	40013800 	.word	0x40013800
 801683c:	40021000 	.word	0x40021000
 8016840:	40004400 	.word	0x40004400
 8016844:	697b      	ldr	r3, [r7, #20]
 8016846:	681b      	ldr	r3, [r3, #0]
 8016848:	4aaa      	ldr	r2, [pc, #680]	@ (8016af4 <UART_SetConfig+0x5ec>)
 801684a:	4293      	cmp	r3, r2
 801684c:	d125      	bne.n	801689a <UART_SetConfig+0x392>
 801684e:	4baa      	ldr	r3, [pc, #680]	@ (8016af8 <UART_SetConfig+0x5f0>)
 8016850:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016854:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8016858:	2b30      	cmp	r3, #48	@ 0x30
 801685a:	d016      	beq.n	801688a <UART_SetConfig+0x382>
 801685c:	2b30      	cmp	r3, #48	@ 0x30
 801685e:	d818      	bhi.n	8016892 <UART_SetConfig+0x38a>
 8016860:	2b20      	cmp	r3, #32
 8016862:	d00a      	beq.n	801687a <UART_SetConfig+0x372>
 8016864:	2b20      	cmp	r3, #32
 8016866:	d814      	bhi.n	8016892 <UART_SetConfig+0x38a>
 8016868:	2b00      	cmp	r3, #0
 801686a:	d002      	beq.n	8016872 <UART_SetConfig+0x36a>
 801686c:	2b10      	cmp	r3, #16
 801686e:	d008      	beq.n	8016882 <UART_SetConfig+0x37a>
 8016870:	e00f      	b.n	8016892 <UART_SetConfig+0x38a>
 8016872:	2300      	movs	r3, #0
 8016874:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016878:	e06d      	b.n	8016956 <UART_SetConfig+0x44e>
 801687a:	2302      	movs	r3, #2
 801687c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016880:	e069      	b.n	8016956 <UART_SetConfig+0x44e>
 8016882:	2304      	movs	r3, #4
 8016884:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016888:	e065      	b.n	8016956 <UART_SetConfig+0x44e>
 801688a:	2308      	movs	r3, #8
 801688c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016890:	e061      	b.n	8016956 <UART_SetConfig+0x44e>
 8016892:	2310      	movs	r3, #16
 8016894:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016898:	e05d      	b.n	8016956 <UART_SetConfig+0x44e>
 801689a:	697b      	ldr	r3, [r7, #20]
 801689c:	681b      	ldr	r3, [r3, #0]
 801689e:	4a97      	ldr	r2, [pc, #604]	@ (8016afc <UART_SetConfig+0x5f4>)
 80168a0:	4293      	cmp	r3, r2
 80168a2:	d125      	bne.n	80168f0 <UART_SetConfig+0x3e8>
 80168a4:	4b94      	ldr	r3, [pc, #592]	@ (8016af8 <UART_SetConfig+0x5f0>)
 80168a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80168aa:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 80168ae:	2bc0      	cmp	r3, #192	@ 0xc0
 80168b0:	d016      	beq.n	80168e0 <UART_SetConfig+0x3d8>
 80168b2:	2bc0      	cmp	r3, #192	@ 0xc0
 80168b4:	d818      	bhi.n	80168e8 <UART_SetConfig+0x3e0>
 80168b6:	2b80      	cmp	r3, #128	@ 0x80
 80168b8:	d00a      	beq.n	80168d0 <UART_SetConfig+0x3c8>
 80168ba:	2b80      	cmp	r3, #128	@ 0x80
 80168bc:	d814      	bhi.n	80168e8 <UART_SetConfig+0x3e0>
 80168be:	2b00      	cmp	r3, #0
 80168c0:	d002      	beq.n	80168c8 <UART_SetConfig+0x3c0>
 80168c2:	2b40      	cmp	r3, #64	@ 0x40
 80168c4:	d008      	beq.n	80168d8 <UART_SetConfig+0x3d0>
 80168c6:	e00f      	b.n	80168e8 <UART_SetConfig+0x3e0>
 80168c8:	2300      	movs	r3, #0
 80168ca:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80168ce:	e042      	b.n	8016956 <UART_SetConfig+0x44e>
 80168d0:	2302      	movs	r3, #2
 80168d2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80168d6:	e03e      	b.n	8016956 <UART_SetConfig+0x44e>
 80168d8:	2304      	movs	r3, #4
 80168da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80168de:	e03a      	b.n	8016956 <UART_SetConfig+0x44e>
 80168e0:	2308      	movs	r3, #8
 80168e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80168e6:	e036      	b.n	8016956 <UART_SetConfig+0x44e>
 80168e8:	2310      	movs	r3, #16
 80168ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80168ee:	e032      	b.n	8016956 <UART_SetConfig+0x44e>
 80168f0:	697b      	ldr	r3, [r7, #20]
 80168f2:	681b      	ldr	r3, [r3, #0]
 80168f4:	4a82      	ldr	r2, [pc, #520]	@ (8016b00 <UART_SetConfig+0x5f8>)
 80168f6:	4293      	cmp	r3, r2
 80168f8:	d12a      	bne.n	8016950 <UART_SetConfig+0x448>
 80168fa:	4b7f      	ldr	r3, [pc, #508]	@ (8016af8 <UART_SetConfig+0x5f0>)
 80168fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8016900:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 8016904:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8016908:	d01a      	beq.n	8016940 <UART_SetConfig+0x438>
 801690a:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 801690e:	d81b      	bhi.n	8016948 <UART_SetConfig+0x440>
 8016910:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8016914:	d00c      	beq.n	8016930 <UART_SetConfig+0x428>
 8016916:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 801691a:	d815      	bhi.n	8016948 <UART_SetConfig+0x440>
 801691c:	2b00      	cmp	r3, #0
 801691e:	d003      	beq.n	8016928 <UART_SetConfig+0x420>
 8016920:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8016924:	d008      	beq.n	8016938 <UART_SetConfig+0x430>
 8016926:	e00f      	b.n	8016948 <UART_SetConfig+0x440>
 8016928:	2300      	movs	r3, #0
 801692a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801692e:	e012      	b.n	8016956 <UART_SetConfig+0x44e>
 8016930:	2302      	movs	r3, #2
 8016932:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016936:	e00e      	b.n	8016956 <UART_SetConfig+0x44e>
 8016938:	2304      	movs	r3, #4
 801693a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801693e:	e00a      	b.n	8016956 <UART_SetConfig+0x44e>
 8016940:	2308      	movs	r3, #8
 8016942:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8016946:	e006      	b.n	8016956 <UART_SetConfig+0x44e>
 8016948:	2310      	movs	r3, #16
 801694a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 801694e:	e002      	b.n	8016956 <UART_SetConfig+0x44e>
 8016950:	2310      	movs	r3, #16
 8016952:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8016956:	697b      	ldr	r3, [r7, #20]
 8016958:	681b      	ldr	r3, [r3, #0]
 801695a:	4a69      	ldr	r2, [pc, #420]	@ (8016b00 <UART_SetConfig+0x5f8>)
 801695c:	4293      	cmp	r3, r2
 801695e:	f040 8097 	bne.w	8016a90 <UART_SetConfig+0x588>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8016962:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016966:	2b08      	cmp	r3, #8
 8016968:	d823      	bhi.n	80169b2 <UART_SetConfig+0x4aa>
 801696a:	a201      	add	r2, pc, #4	@ (adr r2, 8016970 <UART_SetConfig+0x468>)
 801696c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016970:	08016995 	.word	0x08016995
 8016974:	080169b3 	.word	0x080169b3
 8016978:	0801699d 	.word	0x0801699d
 801697c:	080169b3 	.word	0x080169b3
 8016980:	080169a3 	.word	0x080169a3
 8016984:	080169b3 	.word	0x080169b3
 8016988:	080169b3 	.word	0x080169b3
 801698c:	080169b3 	.word	0x080169b3
 8016990:	080169ab 	.word	0x080169ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016994:	f7fe f89e 	bl	8014ad4 <HAL_RCC_GetPCLK1Freq>
 8016998:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 801699a:	e010      	b.n	80169be <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 801699c:	4b59      	ldr	r3, [pc, #356]	@ (8016b04 <UART_SetConfig+0x5fc>)
 801699e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80169a0:	e00d      	b.n	80169be <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80169a2:	f7fe f829 	bl	80149f8 <HAL_RCC_GetSysClockFreq>
 80169a6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 80169a8:	e009      	b.n	80169be <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80169aa:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80169ae:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80169b0:	e005      	b.n	80169be <UART_SetConfig+0x4b6>
      default:
        pclk = 0U;
 80169b2:	2300      	movs	r3, #0
 80169b4:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80169b6:	2301      	movs	r3, #1
 80169b8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80169bc:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80169be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169c0:	2b00      	cmp	r3, #0
 80169c2:	f000 8135 	beq.w	8016c30 <UART_SetConfig+0x728>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80169c6:	697b      	ldr	r3, [r7, #20]
 80169c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80169ca:	4a4f      	ldr	r2, [pc, #316]	@ (8016b08 <UART_SetConfig+0x600>)
 80169cc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80169d0:	461a      	mov	r2, r3
 80169d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80169d4:	fbb3 f3f2 	udiv	r3, r3, r2
 80169d8:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80169da:	697b      	ldr	r3, [r7, #20]
 80169dc:	685a      	ldr	r2, [r3, #4]
 80169de:	4613      	mov	r3, r2
 80169e0:	005b      	lsls	r3, r3, #1
 80169e2:	4413      	add	r3, r2
 80169e4:	69ba      	ldr	r2, [r7, #24]
 80169e6:	429a      	cmp	r2, r3
 80169e8:	d305      	bcc.n	80169f6 <UART_SetConfig+0x4ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80169ea:	697b      	ldr	r3, [r7, #20]
 80169ec:	685b      	ldr	r3, [r3, #4]
 80169ee:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80169f0:	69ba      	ldr	r2, [r7, #24]
 80169f2:	429a      	cmp	r2, r3
 80169f4:	d903      	bls.n	80169fe <UART_SetConfig+0x4f6>
      {
        ret = HAL_ERROR;
 80169f6:	2301      	movs	r3, #1
 80169f8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80169fc:	e118      	b.n	8016c30 <UART_SetConfig+0x728>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80169fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016a00:	2200      	movs	r2, #0
 8016a02:	60bb      	str	r3, [r7, #8]
 8016a04:	60fa      	str	r2, [r7, #12]
 8016a06:	697b      	ldr	r3, [r7, #20]
 8016a08:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016a0a:	4a3f      	ldr	r2, [pc, #252]	@ (8016b08 <UART_SetConfig+0x600>)
 8016a0c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016a10:	b29b      	uxth	r3, r3
 8016a12:	2200      	movs	r2, #0
 8016a14:	603b      	str	r3, [r7, #0]
 8016a16:	607a      	str	r2, [r7, #4]
 8016a18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8016a1c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8016a20:	f7fa fc66 	bl	80112f0 <__aeabi_uldivmod>
 8016a24:	4602      	mov	r2, r0
 8016a26:	460b      	mov	r3, r1
 8016a28:	4610      	mov	r0, r2
 8016a2a:	4619      	mov	r1, r3
 8016a2c:	f04f 0200 	mov.w	r2, #0
 8016a30:	f04f 0300 	mov.w	r3, #0
 8016a34:	020b      	lsls	r3, r1, #8
 8016a36:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8016a3a:	0202      	lsls	r2, r0, #8
 8016a3c:	6979      	ldr	r1, [r7, #20]
 8016a3e:	6849      	ldr	r1, [r1, #4]
 8016a40:	0849      	lsrs	r1, r1, #1
 8016a42:	2000      	movs	r0, #0
 8016a44:	460c      	mov	r4, r1
 8016a46:	4605      	mov	r5, r0
 8016a48:	eb12 0804 	adds.w	r8, r2, r4
 8016a4c:	eb43 0905 	adc.w	r9, r3, r5
 8016a50:	697b      	ldr	r3, [r7, #20]
 8016a52:	685b      	ldr	r3, [r3, #4]
 8016a54:	2200      	movs	r2, #0
 8016a56:	469a      	mov	sl, r3
 8016a58:	4693      	mov	fp, r2
 8016a5a:	4652      	mov	r2, sl
 8016a5c:	465b      	mov	r3, fp
 8016a5e:	4640      	mov	r0, r8
 8016a60:	4649      	mov	r1, r9
 8016a62:	f7fa fc45 	bl	80112f0 <__aeabi_uldivmod>
 8016a66:	4602      	mov	r2, r0
 8016a68:	460b      	mov	r3, r1
 8016a6a:	4613      	mov	r3, r2
 8016a6c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8016a6e:	6a3b      	ldr	r3, [r7, #32]
 8016a70:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8016a74:	d308      	bcc.n	8016a88 <UART_SetConfig+0x580>
 8016a76:	6a3b      	ldr	r3, [r7, #32]
 8016a78:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016a7c:	d204      	bcs.n	8016a88 <UART_SetConfig+0x580>
        {
          huart->Instance->BRR = usartdiv;
 8016a7e:	697b      	ldr	r3, [r7, #20]
 8016a80:	681b      	ldr	r3, [r3, #0]
 8016a82:	6a3a      	ldr	r2, [r7, #32]
 8016a84:	60da      	str	r2, [r3, #12]
 8016a86:	e0d3      	b.n	8016c30 <UART_SetConfig+0x728>
        }
        else
        {
          ret = HAL_ERROR;
 8016a88:	2301      	movs	r3, #1
 8016a8a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016a8e:	e0cf      	b.n	8016c30 <UART_SetConfig+0x728>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8016a90:	697b      	ldr	r3, [r7, #20]
 8016a92:	69db      	ldr	r3, [r3, #28]
 8016a94:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016a98:	d173      	bne.n	8016b82 <UART_SetConfig+0x67a>
  {
    switch (clocksource)
 8016a9a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016a9e:	2b08      	cmp	r3, #8
 8016aa0:	d834      	bhi.n	8016b0c <UART_SetConfig+0x604>
 8016aa2:	a201      	add	r2, pc, #4	@ (adr r2, 8016aa8 <UART_SetConfig+0x5a0>)
 8016aa4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016aa8:	08016acd 	.word	0x08016acd
 8016aac:	08016ad5 	.word	0x08016ad5
 8016ab0:	08016add 	.word	0x08016add
 8016ab4:	08016b0d 	.word	0x08016b0d
 8016ab8:	08016ae3 	.word	0x08016ae3
 8016abc:	08016b0d 	.word	0x08016b0d
 8016ac0:	08016b0d 	.word	0x08016b0d
 8016ac4:	08016b0d 	.word	0x08016b0d
 8016ac8:	08016aeb 	.word	0x08016aeb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016acc:	f7fe f802 	bl	8014ad4 <HAL_RCC_GetPCLK1Freq>
 8016ad0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016ad2:	e021      	b.n	8016b18 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016ad4:	f7fe f814 	bl	8014b00 <HAL_RCC_GetPCLK2Freq>
 8016ad8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016ada:	e01d      	b.n	8016b18 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016adc:	4b09      	ldr	r3, [pc, #36]	@ (8016b04 <UART_SetConfig+0x5fc>)
 8016ade:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016ae0:	e01a      	b.n	8016b18 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016ae2:	f7fd ff89 	bl	80149f8 <HAL_RCC_GetSysClockFreq>
 8016ae6:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016ae8:	e016      	b.n	8016b18 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016aea:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016aee:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016af0:	e012      	b.n	8016b18 <UART_SetConfig+0x610>
 8016af2:	bf00      	nop
 8016af4:	40004800 	.word	0x40004800
 8016af8:	40021000 	.word	0x40021000
 8016afc:	40004c00 	.word	0x40004c00
 8016b00:	40008000 	.word	0x40008000
 8016b04:	00f42400 	.word	0x00f42400
 8016b08:	0801b20c 	.word	0x0801b20c
      default:
        pclk = 0U;
 8016b0c:	2300      	movs	r3, #0
 8016b0e:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8016b10:	2301      	movs	r3, #1
 8016b12:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8016b16:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8016b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b1a:	2b00      	cmp	r3, #0
 8016b1c:	f000 8088 	beq.w	8016c30 <UART_SetConfig+0x728>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016b20:	697b      	ldr	r3, [r7, #20]
 8016b22:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016b24:	4a4d      	ldr	r2, [pc, #308]	@ (8016c5c <UART_SetConfig+0x754>)
 8016b26:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016b2a:	461a      	mov	r2, r3
 8016b2c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016b2e:	fbb3 f3f2 	udiv	r3, r3, r2
 8016b32:	005a      	lsls	r2, r3, #1
 8016b34:	697b      	ldr	r3, [r7, #20]
 8016b36:	685b      	ldr	r3, [r3, #4]
 8016b38:	085b      	lsrs	r3, r3, #1
 8016b3a:	441a      	add	r2, r3
 8016b3c:	697b      	ldr	r3, [r7, #20]
 8016b3e:	685b      	ldr	r3, [r3, #4]
 8016b40:	fbb2 f3f3 	udiv	r3, r2, r3
 8016b44:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016b46:	6a3b      	ldr	r3, [r7, #32]
 8016b48:	2b0f      	cmp	r3, #15
 8016b4a:	d916      	bls.n	8016b7a <UART_SetConfig+0x672>
 8016b4c:	6a3b      	ldr	r3, [r7, #32]
 8016b4e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016b52:	d212      	bcs.n	8016b7a <UART_SetConfig+0x672>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8016b54:	6a3b      	ldr	r3, [r7, #32]
 8016b56:	b29b      	uxth	r3, r3
 8016b58:	f023 030f 	bic.w	r3, r3, #15
 8016b5c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8016b5e:	6a3b      	ldr	r3, [r7, #32]
 8016b60:	085b      	lsrs	r3, r3, #1
 8016b62:	b29b      	uxth	r3, r3
 8016b64:	f003 0307 	and.w	r3, r3, #7
 8016b68:	b29a      	uxth	r2, r3
 8016b6a:	8bfb      	ldrh	r3, [r7, #30]
 8016b6c:	4313      	orrs	r3, r2
 8016b6e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8016b70:	697b      	ldr	r3, [r7, #20]
 8016b72:	681b      	ldr	r3, [r3, #0]
 8016b74:	8bfa      	ldrh	r2, [r7, #30]
 8016b76:	60da      	str	r2, [r3, #12]
 8016b78:	e05a      	b.n	8016c30 <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 8016b7a:	2301      	movs	r3, #1
 8016b7c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8016b80:	e056      	b.n	8016c30 <UART_SetConfig+0x728>
      }
    }
  }
  else
  {
    switch (clocksource)
 8016b82:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8016b86:	2b08      	cmp	r3, #8
 8016b88:	d827      	bhi.n	8016bda <UART_SetConfig+0x6d2>
 8016b8a:	a201      	add	r2, pc, #4	@ (adr r2, 8016b90 <UART_SetConfig+0x688>)
 8016b8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016b90:	08016bb5 	.word	0x08016bb5
 8016b94:	08016bbd 	.word	0x08016bbd
 8016b98:	08016bc5 	.word	0x08016bc5
 8016b9c:	08016bdb 	.word	0x08016bdb
 8016ba0:	08016bcb 	.word	0x08016bcb
 8016ba4:	08016bdb 	.word	0x08016bdb
 8016ba8:	08016bdb 	.word	0x08016bdb
 8016bac:	08016bdb 	.word	0x08016bdb
 8016bb0:	08016bd3 	.word	0x08016bd3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8016bb4:	f7fd ff8e 	bl	8014ad4 <HAL_RCC_GetPCLK1Freq>
 8016bb8:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016bba:	e014      	b.n	8016be6 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8016bbc:	f7fd ffa0 	bl	8014b00 <HAL_RCC_GetPCLK2Freq>
 8016bc0:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016bc2:	e010      	b.n	8016be6 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8016bc4:	4b26      	ldr	r3, [pc, #152]	@ (8016c60 <UART_SetConfig+0x758>)
 8016bc6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016bc8:	e00d      	b.n	8016be6 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8016bca:	f7fd ff15 	bl	80149f8 <HAL_RCC_GetSysClockFreq>
 8016bce:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8016bd0:	e009      	b.n	8016be6 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8016bd2:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8016bd6:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8016bd8:	e005      	b.n	8016be6 <UART_SetConfig+0x6de>
      default:
        pclk = 0U;
 8016bda:	2300      	movs	r3, #0
 8016bdc:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8016bde:	2301      	movs	r3, #1
 8016be0:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8016be4:	bf00      	nop
    }

    if (pclk != 0U)
 8016be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016be8:	2b00      	cmp	r3, #0
 8016bea:	d021      	beq.n	8016c30 <UART_SetConfig+0x728>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8016bec:	697b      	ldr	r3, [r7, #20]
 8016bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8016bf0:	4a1a      	ldr	r2, [pc, #104]	@ (8016c5c <UART_SetConfig+0x754>)
 8016bf2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8016bf6:	461a      	mov	r2, r3
 8016bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016bfa:	fbb3 f2f2 	udiv	r2, r3, r2
 8016bfe:	697b      	ldr	r3, [r7, #20]
 8016c00:	685b      	ldr	r3, [r3, #4]
 8016c02:	085b      	lsrs	r3, r3, #1
 8016c04:	441a      	add	r2, r3
 8016c06:	697b      	ldr	r3, [r7, #20]
 8016c08:	685b      	ldr	r3, [r3, #4]
 8016c0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8016c0e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8016c10:	6a3b      	ldr	r3, [r7, #32]
 8016c12:	2b0f      	cmp	r3, #15
 8016c14:	d909      	bls.n	8016c2a <UART_SetConfig+0x722>
 8016c16:	6a3b      	ldr	r3, [r7, #32]
 8016c18:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016c1c:	d205      	bcs.n	8016c2a <UART_SetConfig+0x722>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8016c1e:	6a3b      	ldr	r3, [r7, #32]
 8016c20:	b29a      	uxth	r2, r3
 8016c22:	697b      	ldr	r3, [r7, #20]
 8016c24:	681b      	ldr	r3, [r3, #0]
 8016c26:	60da      	str	r2, [r3, #12]
 8016c28:	e002      	b.n	8016c30 <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 8016c2a:	2301      	movs	r3, #1
 8016c2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8016c30:	697b      	ldr	r3, [r7, #20]
 8016c32:	2201      	movs	r2, #1
 8016c34:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8016c38:	697b      	ldr	r3, [r7, #20]
 8016c3a:	2201      	movs	r2, #1
 8016c3c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8016c40:	697b      	ldr	r3, [r7, #20]
 8016c42:	2200      	movs	r2, #0
 8016c44:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8016c46:	697b      	ldr	r3, [r7, #20]
 8016c48:	2200      	movs	r2, #0
 8016c4a:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8016c4c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8016c50:	4618      	mov	r0, r3
 8016c52:	3730      	adds	r7, #48	@ 0x30
 8016c54:	46bd      	mov	sp, r7
 8016c56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8016c5a:	bf00      	nop
 8016c5c:	0801b20c 	.word	0x0801b20c
 8016c60:	00f42400 	.word	0x00f42400

08016c64 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8016c64:	b580      	push	{r7, lr}
 8016c66:	b082      	sub	sp, #8
 8016c68:	af00      	add	r7, sp, #0
 8016c6a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8016c6c:	687b      	ldr	r3, [r7, #4]
 8016c6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c70:	2bff      	cmp	r3, #255	@ 0xff
 8016c72:	d904      	bls.n	8016c7e <UART_AdvFeatureConfig+0x1a>
 8016c74:	f640 4198 	movw	r1, #3224	@ 0xc98
 8016c78:	488e      	ldr	r0, [pc, #568]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016c7a:	f7fb fa3d 	bl	80120f8 <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8016c7e:	687b      	ldr	r3, [r7, #4]
 8016c80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016c82:	f003 0308 	and.w	r3, r3, #8
 8016c86:	2b00      	cmp	r3, #0
 8016c88:	d018      	beq.n	8016cbc <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8016c8a:	687b      	ldr	r3, [r7, #4]
 8016c8c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c8e:	2b00      	cmp	r3, #0
 8016c90:	d009      	beq.n	8016ca6 <UART_AdvFeatureConfig+0x42>
 8016c92:	687b      	ldr	r3, [r7, #4]
 8016c94:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8016c96:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8016c9a:	d004      	beq.n	8016ca6 <UART_AdvFeatureConfig+0x42>
 8016c9c:	f640 419d 	movw	r1, #3229	@ 0xc9d
 8016ca0:	4884      	ldr	r0, [pc, #528]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016ca2:	f7fb fa29 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8016ca6:	687b      	ldr	r3, [r7, #4]
 8016ca8:	681b      	ldr	r3, [r3, #0]
 8016caa:	685b      	ldr	r3, [r3, #4]
 8016cac:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8016cb0:	687b      	ldr	r3, [r7, #4]
 8016cb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8016cb4:	687b      	ldr	r3, [r7, #4]
 8016cb6:	681b      	ldr	r3, [r3, #0]
 8016cb8:	430a      	orrs	r2, r1
 8016cba:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8016cbc:	687b      	ldr	r3, [r7, #4]
 8016cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016cc0:	f003 0301 	and.w	r3, r3, #1
 8016cc4:	2b00      	cmp	r3, #0
 8016cc6:	d018      	beq.n	8016cfa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8016cc8:	687b      	ldr	r3, [r7, #4]
 8016cca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016ccc:	2b00      	cmp	r3, #0
 8016cce:	d009      	beq.n	8016ce4 <UART_AdvFeatureConfig+0x80>
 8016cd0:	687b      	ldr	r3, [r7, #4]
 8016cd2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8016cd4:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8016cd8:	d004      	beq.n	8016ce4 <UART_AdvFeatureConfig+0x80>
 8016cda:	f640 41a4 	movw	r1, #3236	@ 0xca4
 8016cde:	4875      	ldr	r0, [pc, #468]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016ce0:	f7fb fa0a 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8016ce4:	687b      	ldr	r3, [r7, #4]
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	685b      	ldr	r3, [r3, #4]
 8016cea:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8016cee:	687b      	ldr	r3, [r7, #4]
 8016cf0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8016cf2:	687b      	ldr	r3, [r7, #4]
 8016cf4:	681b      	ldr	r3, [r3, #0]
 8016cf6:	430a      	orrs	r2, r1
 8016cf8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8016cfa:	687b      	ldr	r3, [r7, #4]
 8016cfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016cfe:	f003 0302 	and.w	r3, r3, #2
 8016d02:	2b00      	cmp	r3, #0
 8016d04:	d018      	beq.n	8016d38 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8016d06:	687b      	ldr	r3, [r7, #4]
 8016d08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d0a:	2b00      	cmp	r3, #0
 8016d0c:	d009      	beq.n	8016d22 <UART_AdvFeatureConfig+0xbe>
 8016d0e:	687b      	ldr	r3, [r7, #4]
 8016d10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8016d12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8016d16:	d004      	beq.n	8016d22 <UART_AdvFeatureConfig+0xbe>
 8016d18:	f640 41ab 	movw	r1, #3243	@ 0xcab
 8016d1c:	4865      	ldr	r0, [pc, #404]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016d1e:	f7fb f9eb 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8016d22:	687b      	ldr	r3, [r7, #4]
 8016d24:	681b      	ldr	r3, [r3, #0]
 8016d26:	685b      	ldr	r3, [r3, #4]
 8016d28:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8016d2c:	687b      	ldr	r3, [r7, #4]
 8016d2e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	681b      	ldr	r3, [r3, #0]
 8016d34:	430a      	orrs	r2, r1
 8016d36:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d3c:	f003 0304 	and.w	r3, r3, #4
 8016d40:	2b00      	cmp	r3, #0
 8016d42:	d018      	beq.n	8016d76 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8016d44:	687b      	ldr	r3, [r7, #4]
 8016d46:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d48:	2b00      	cmp	r3, #0
 8016d4a:	d009      	beq.n	8016d60 <UART_AdvFeatureConfig+0xfc>
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8016d50:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8016d54:	d004      	beq.n	8016d60 <UART_AdvFeatureConfig+0xfc>
 8016d56:	f640 41b2 	movw	r1, #3250	@ 0xcb2
 8016d5a:	4856      	ldr	r0, [pc, #344]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016d5c:	f7fb f9cc 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8016d60:	687b      	ldr	r3, [r7, #4]
 8016d62:	681b      	ldr	r3, [r3, #0]
 8016d64:	685b      	ldr	r3, [r3, #4]
 8016d66:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8016d6a:	687b      	ldr	r3, [r7, #4]
 8016d6c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8016d6e:	687b      	ldr	r3, [r7, #4]
 8016d70:	681b      	ldr	r3, [r3, #0]
 8016d72:	430a      	orrs	r2, r1
 8016d74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8016d76:	687b      	ldr	r3, [r7, #4]
 8016d78:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016d7a:	f003 0310 	and.w	r3, r3, #16
 8016d7e:	2b00      	cmp	r3, #0
 8016d80:	d018      	beq.n	8016db4 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8016d82:	687b      	ldr	r3, [r7, #4]
 8016d84:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d86:	2b00      	cmp	r3, #0
 8016d88:	d009      	beq.n	8016d9e <UART_AdvFeatureConfig+0x13a>
 8016d8a:	687b      	ldr	r3, [r7, #4]
 8016d8c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8016d8e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8016d92:	d004      	beq.n	8016d9e <UART_AdvFeatureConfig+0x13a>
 8016d94:	f640 41b9 	movw	r1, #3257	@ 0xcb9
 8016d98:	4846      	ldr	r0, [pc, #280]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016d9a:	f7fb f9ad 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8016d9e:	687b      	ldr	r3, [r7, #4]
 8016da0:	681b      	ldr	r3, [r3, #0]
 8016da2:	689b      	ldr	r3, [r3, #8]
 8016da4:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8016da8:	687b      	ldr	r3, [r7, #4]
 8016daa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8016dac:	687b      	ldr	r3, [r7, #4]
 8016dae:	681b      	ldr	r3, [r3, #0]
 8016db0:	430a      	orrs	r2, r1
 8016db2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8016db4:	687b      	ldr	r3, [r7, #4]
 8016db6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016db8:	f003 0320 	and.w	r3, r3, #32
 8016dbc:	2b00      	cmp	r3, #0
 8016dbe:	d018      	beq.n	8016df2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8016dc0:	687b      	ldr	r3, [r7, #4]
 8016dc2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016dc4:	2b00      	cmp	r3, #0
 8016dc6:	d009      	beq.n	8016ddc <UART_AdvFeatureConfig+0x178>
 8016dc8:	687b      	ldr	r3, [r7, #4]
 8016dca:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8016dcc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8016dd0:	d004      	beq.n	8016ddc <UART_AdvFeatureConfig+0x178>
 8016dd2:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8016dd6:	4837      	ldr	r0, [pc, #220]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016dd8:	f7fb f98e 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8016ddc:	687b      	ldr	r3, [r7, #4]
 8016dde:	681b      	ldr	r3, [r3, #0]
 8016de0:	689b      	ldr	r3, [r3, #8]
 8016de2:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8016de6:	687b      	ldr	r3, [r7, #4]
 8016de8:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8016dea:	687b      	ldr	r3, [r7, #4]
 8016dec:	681b      	ldr	r3, [r3, #0]
 8016dee:	430a      	orrs	r2, r1
 8016df0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8016df2:	687b      	ldr	r3, [r7, #4]
 8016df4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016df6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d064      	beq.n	8016ec8 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8016dfe:	687b      	ldr	r3, [r7, #4]
 8016e00:	681b      	ldr	r3, [r3, #0]
 8016e02:	4a2d      	ldr	r2, [pc, #180]	@ (8016eb8 <UART_AdvFeatureConfig+0x254>)
 8016e04:	4293      	cmp	r3, r2
 8016e06:	d013      	beq.n	8016e30 <UART_AdvFeatureConfig+0x1cc>
 8016e08:	687b      	ldr	r3, [r7, #4]
 8016e0a:	681b      	ldr	r3, [r3, #0]
 8016e0c:	4a2b      	ldr	r2, [pc, #172]	@ (8016ebc <UART_AdvFeatureConfig+0x258>)
 8016e0e:	4293      	cmp	r3, r2
 8016e10:	d00e      	beq.n	8016e30 <UART_AdvFeatureConfig+0x1cc>
 8016e12:	687b      	ldr	r3, [r7, #4]
 8016e14:	681b      	ldr	r3, [r3, #0]
 8016e16:	4a2a      	ldr	r2, [pc, #168]	@ (8016ec0 <UART_AdvFeatureConfig+0x25c>)
 8016e18:	4293      	cmp	r3, r2
 8016e1a:	d009      	beq.n	8016e30 <UART_AdvFeatureConfig+0x1cc>
 8016e1c:	687b      	ldr	r3, [r7, #4]
 8016e1e:	681b      	ldr	r3, [r3, #0]
 8016e20:	4a28      	ldr	r2, [pc, #160]	@ (8016ec4 <UART_AdvFeatureConfig+0x260>)
 8016e22:	4293      	cmp	r3, r2
 8016e24:	d004      	beq.n	8016e30 <UART_AdvFeatureConfig+0x1cc>
 8016e26:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 8016e2a:	4822      	ldr	r0, [pc, #136]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016e2c:	f7fb f964 	bl	80120f8 <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8016e30:	687b      	ldr	r3, [r7, #4]
 8016e32:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e34:	2b00      	cmp	r3, #0
 8016e36:	d009      	beq.n	8016e4c <UART_AdvFeatureConfig+0x1e8>
 8016e38:	687b      	ldr	r3, [r7, #4]
 8016e3a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e3c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016e40:	d004      	beq.n	8016e4c <UART_AdvFeatureConfig+0x1e8>
 8016e42:	f640 41c8 	movw	r1, #3272	@ 0xcc8
 8016e46:	481b      	ldr	r0, [pc, #108]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016e48:	f7fb f956 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8016e4c:	687b      	ldr	r3, [r7, #4]
 8016e4e:	681b      	ldr	r3, [r3, #0]
 8016e50:	685b      	ldr	r3, [r3, #4]
 8016e52:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8016e56:	687b      	ldr	r3, [r7, #4]
 8016e58:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8016e5a:	687b      	ldr	r3, [r7, #4]
 8016e5c:	681b      	ldr	r3, [r3, #0]
 8016e5e:	430a      	orrs	r2, r1
 8016e60:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8016e62:	687b      	ldr	r3, [r7, #4]
 8016e64:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8016e66:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8016e6a:	d12d      	bne.n	8016ec8 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016e70:	2b00      	cmp	r3, #0
 8016e72:	d013      	beq.n	8016e9c <UART_AdvFeatureConfig+0x238>
 8016e74:	687b      	ldr	r3, [r7, #4]
 8016e76:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016e78:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8016e7c:	d00e      	beq.n	8016e9c <UART_AdvFeatureConfig+0x238>
 8016e7e:	687b      	ldr	r3, [r7, #4]
 8016e80:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016e82:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8016e86:	d009      	beq.n	8016e9c <UART_AdvFeatureConfig+0x238>
 8016e88:	687b      	ldr	r3, [r7, #4]
 8016e8a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8016e8c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8016e90:	d004      	beq.n	8016e9c <UART_AdvFeatureConfig+0x238>
 8016e92:	f640 41cd 	movw	r1, #3277	@ 0xccd
 8016e96:	4807      	ldr	r0, [pc, #28]	@ (8016eb4 <UART_AdvFeatureConfig+0x250>)
 8016e98:	f7fb f92e 	bl	80120f8 <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8016e9c:	687b      	ldr	r3, [r7, #4]
 8016e9e:	681b      	ldr	r3, [r3, #0]
 8016ea0:	685b      	ldr	r3, [r3, #4]
 8016ea2:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8016ea6:	687b      	ldr	r3, [r7, #4]
 8016ea8:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8016eaa:	687b      	ldr	r3, [r7, #4]
 8016eac:	681b      	ldr	r3, [r3, #0]
 8016eae:	430a      	orrs	r2, r1
 8016eb0:	605a      	str	r2, [r3, #4]
 8016eb2:	e009      	b.n	8016ec8 <UART_AdvFeatureConfig+0x264>
 8016eb4:	0801adc0 	.word	0x0801adc0
 8016eb8:	40013800 	.word	0x40013800
 8016ebc:	40004400 	.word	0x40004400
 8016ec0:	40004800 	.word	0x40004800
 8016ec4:	40004c00 	.word	0x40004c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8016ec8:	687b      	ldr	r3, [r7, #4]
 8016eca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8016ecc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8016ed0:	2b00      	cmp	r3, #0
 8016ed2:	d018      	beq.n	8016f06 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8016ed4:	687b      	ldr	r3, [r7, #4]
 8016ed6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016ed8:	2b00      	cmp	r3, #0
 8016eda:	d009      	beq.n	8016ef0 <UART_AdvFeatureConfig+0x28c>
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8016ee0:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8016ee4:	d004      	beq.n	8016ef0 <UART_AdvFeatureConfig+0x28c>
 8016ee6:	f640 41d5 	movw	r1, #3285	@ 0xcd5
 8016eea:	4809      	ldr	r0, [pc, #36]	@ (8016f10 <UART_AdvFeatureConfig+0x2ac>)
 8016eec:	f7fb f904 	bl	80120f8 <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	681b      	ldr	r3, [r3, #0]
 8016ef4:	685b      	ldr	r3, [r3, #4]
 8016ef6:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8016efa:	687b      	ldr	r3, [r7, #4]
 8016efc:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8016efe:	687b      	ldr	r3, [r7, #4]
 8016f00:	681b      	ldr	r3, [r3, #0]
 8016f02:	430a      	orrs	r2, r1
 8016f04:	605a      	str	r2, [r3, #4]
  }
}
 8016f06:	bf00      	nop
 8016f08:	3708      	adds	r7, #8
 8016f0a:	46bd      	mov	sp, r7
 8016f0c:	bd80      	pop	{r7, pc}
 8016f0e:	bf00      	nop
 8016f10:	0801adc0 	.word	0x0801adc0

08016f14 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8016f14:	b580      	push	{r7, lr}
 8016f16:	b098      	sub	sp, #96	@ 0x60
 8016f18:	af02      	add	r7, sp, #8
 8016f1a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	2200      	movs	r2, #0
 8016f20:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8016f24:	f7fb fb8c 	bl	8012640 <HAL_GetTick>
 8016f28:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8016f2a:	687b      	ldr	r3, [r7, #4]
 8016f2c:	681b      	ldr	r3, [r3, #0]
 8016f2e:	681b      	ldr	r3, [r3, #0]
 8016f30:	f003 0308 	and.w	r3, r3, #8
 8016f34:	2b08      	cmp	r3, #8
 8016f36:	d12f      	bne.n	8016f98 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016f38:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016f3c:	9300      	str	r3, [sp, #0]
 8016f3e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016f40:	2200      	movs	r2, #0
 8016f42:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8016f46:	6878      	ldr	r0, [r7, #4]
 8016f48:	f000 f88e 	bl	8017068 <UART_WaitOnFlagUntilTimeout>
 8016f4c:	4603      	mov	r3, r0
 8016f4e:	2b00      	cmp	r3, #0
 8016f50:	d022      	beq.n	8016f98 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8016f52:	687b      	ldr	r3, [r7, #4]
 8016f54:	681b      	ldr	r3, [r3, #0]
 8016f56:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016f58:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8016f5a:	e853 3f00 	ldrex	r3, [r3]
 8016f5e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8016f60:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016f62:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8016f66:	653b      	str	r3, [r7, #80]	@ 0x50
 8016f68:	687b      	ldr	r3, [r7, #4]
 8016f6a:	681b      	ldr	r3, [r3, #0]
 8016f6c:	461a      	mov	r2, r3
 8016f6e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016f70:	647b      	str	r3, [r7, #68]	@ 0x44
 8016f72:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016f74:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8016f76:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8016f78:	e841 2300 	strex	r3, r2, [r1]
 8016f7c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8016f7e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8016f80:	2b00      	cmp	r3, #0
 8016f82:	d1e6      	bne.n	8016f52 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8016f84:	687b      	ldr	r3, [r7, #4]
 8016f86:	2220      	movs	r2, #32
 8016f88:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8016f8c:	687b      	ldr	r3, [r7, #4]
 8016f8e:	2200      	movs	r2, #0
 8016f90:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8016f94:	2303      	movs	r3, #3
 8016f96:	e063      	b.n	8017060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	681b      	ldr	r3, [r3, #0]
 8016f9c:	681b      	ldr	r3, [r3, #0]
 8016f9e:	f003 0304 	and.w	r3, r3, #4
 8016fa2:	2b04      	cmp	r3, #4
 8016fa4:	d149      	bne.n	801703a <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8016fa6:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8016faa:	9300      	str	r3, [sp, #0]
 8016fac:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8016fae:	2200      	movs	r2, #0
 8016fb0:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8016fb4:	6878      	ldr	r0, [r7, #4]
 8016fb6:	f000 f857 	bl	8017068 <UART_WaitOnFlagUntilTimeout>
 8016fba:	4603      	mov	r3, r0
 8016fbc:	2b00      	cmp	r3, #0
 8016fbe:	d03c      	beq.n	801703a <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8016fc0:	687b      	ldr	r3, [r7, #4]
 8016fc2:	681b      	ldr	r3, [r3, #0]
 8016fc4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016fc8:	e853 3f00 	ldrex	r3, [r3]
 8016fcc:	623b      	str	r3, [r7, #32]
   return(result);
 8016fce:	6a3b      	ldr	r3, [r7, #32]
 8016fd0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8016fd4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	681b      	ldr	r3, [r3, #0]
 8016fda:	461a      	mov	r2, r3
 8016fdc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016fde:	633b      	str	r3, [r7, #48]	@ 0x30
 8016fe0:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8016fe2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8016fe4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8016fe6:	e841 2300 	strex	r3, r2, [r1]
 8016fea:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8016fec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016fee:	2b00      	cmp	r3, #0
 8016ff0:	d1e6      	bne.n	8016fc0 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8016ff2:	687b      	ldr	r3, [r7, #4]
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	3308      	adds	r3, #8
 8016ff8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8016ffa:	693b      	ldr	r3, [r7, #16]
 8016ffc:	e853 3f00 	ldrex	r3, [r3]
 8017000:	60fb      	str	r3, [r7, #12]
   return(result);
 8017002:	68fb      	ldr	r3, [r7, #12]
 8017004:	f023 0301 	bic.w	r3, r3, #1
 8017008:	64bb      	str	r3, [r7, #72]	@ 0x48
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	681b      	ldr	r3, [r3, #0]
 801700e:	3308      	adds	r3, #8
 8017010:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8017012:	61fa      	str	r2, [r7, #28]
 8017014:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017016:	69b9      	ldr	r1, [r7, #24]
 8017018:	69fa      	ldr	r2, [r7, #28]
 801701a:	e841 2300 	strex	r3, r2, [r1]
 801701e:	617b      	str	r3, [r7, #20]
   return(result);
 8017020:	697b      	ldr	r3, [r7, #20]
 8017022:	2b00      	cmp	r3, #0
 8017024:	d1e5      	bne.n	8016ff2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8017026:	687b      	ldr	r3, [r7, #4]
 8017028:	2220      	movs	r2, #32
 801702a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 801702e:	687b      	ldr	r3, [r7, #4]
 8017030:	2200      	movs	r2, #0
 8017032:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8017036:	2303      	movs	r3, #3
 8017038:	e012      	b.n	8017060 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 801703a:	687b      	ldr	r3, [r7, #4]
 801703c:	2220      	movs	r2, #32
 801703e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	2220      	movs	r2, #32
 8017046:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801704a:	687b      	ldr	r3, [r7, #4]
 801704c:	2200      	movs	r2, #0
 801704e:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017050:	687b      	ldr	r3, [r7, #4]
 8017052:	2200      	movs	r2, #0
 8017054:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8017056:	687b      	ldr	r3, [r7, #4]
 8017058:	2200      	movs	r2, #0
 801705a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 801705e:	2300      	movs	r3, #0
}
 8017060:	4618      	mov	r0, r3
 8017062:	3758      	adds	r7, #88	@ 0x58
 8017064:	46bd      	mov	sp, r7
 8017066:	bd80      	pop	{r7, pc}

08017068 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8017068:	b580      	push	{r7, lr}
 801706a:	b084      	sub	sp, #16
 801706c:	af00      	add	r7, sp, #0
 801706e:	60f8      	str	r0, [r7, #12]
 8017070:	60b9      	str	r1, [r7, #8]
 8017072:	603b      	str	r3, [r7, #0]
 8017074:	4613      	mov	r3, r2
 8017076:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8017078:	e04f      	b.n	801711a <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 801707a:	69bb      	ldr	r3, [r7, #24]
 801707c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8017080:	d04b      	beq.n	801711a <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8017082:	f7fb fadd 	bl	8012640 <HAL_GetTick>
 8017086:	4602      	mov	r2, r0
 8017088:	683b      	ldr	r3, [r7, #0]
 801708a:	1ad3      	subs	r3, r2, r3
 801708c:	69ba      	ldr	r2, [r7, #24]
 801708e:	429a      	cmp	r2, r3
 8017090:	d302      	bcc.n	8017098 <UART_WaitOnFlagUntilTimeout+0x30>
 8017092:	69bb      	ldr	r3, [r7, #24]
 8017094:	2b00      	cmp	r3, #0
 8017096:	d101      	bne.n	801709c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8017098:	2303      	movs	r3, #3
 801709a:	e04e      	b.n	801713a <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 801709c:	68fb      	ldr	r3, [r7, #12]
 801709e:	681b      	ldr	r3, [r3, #0]
 80170a0:	681b      	ldr	r3, [r3, #0]
 80170a2:	f003 0304 	and.w	r3, r3, #4
 80170a6:	2b00      	cmp	r3, #0
 80170a8:	d037      	beq.n	801711a <UART_WaitOnFlagUntilTimeout+0xb2>
 80170aa:	68bb      	ldr	r3, [r7, #8]
 80170ac:	2b80      	cmp	r3, #128	@ 0x80
 80170ae:	d034      	beq.n	801711a <UART_WaitOnFlagUntilTimeout+0xb2>
 80170b0:	68bb      	ldr	r3, [r7, #8]
 80170b2:	2b40      	cmp	r3, #64	@ 0x40
 80170b4:	d031      	beq.n	801711a <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80170b6:	68fb      	ldr	r3, [r7, #12]
 80170b8:	681b      	ldr	r3, [r3, #0]
 80170ba:	69db      	ldr	r3, [r3, #28]
 80170bc:	f003 0308 	and.w	r3, r3, #8
 80170c0:	2b08      	cmp	r3, #8
 80170c2:	d110      	bne.n	80170e6 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80170c4:	68fb      	ldr	r3, [r7, #12]
 80170c6:	681b      	ldr	r3, [r3, #0]
 80170c8:	2208      	movs	r2, #8
 80170ca:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80170cc:	68f8      	ldr	r0, [r7, #12]
 80170ce:	f000 f95b 	bl	8017388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80170d2:	68fb      	ldr	r3, [r7, #12]
 80170d4:	2208      	movs	r2, #8
 80170d6:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80170da:	68fb      	ldr	r3, [r7, #12]
 80170dc:	2200      	movs	r2, #0
 80170de:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 80170e2:	2301      	movs	r3, #1
 80170e4:	e029      	b.n	801713a <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80170e6:	68fb      	ldr	r3, [r7, #12]
 80170e8:	681b      	ldr	r3, [r3, #0]
 80170ea:	69db      	ldr	r3, [r3, #28]
 80170ec:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80170f0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80170f4:	d111      	bne.n	801711a <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80170f6:	68fb      	ldr	r3, [r7, #12]
 80170f8:	681b      	ldr	r3, [r3, #0]
 80170fa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80170fe:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8017100:	68f8      	ldr	r0, [r7, #12]
 8017102:	f000 f941 	bl	8017388 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8017106:	68fb      	ldr	r3, [r7, #12]
 8017108:	2220      	movs	r2, #32
 801710a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 801710e:	68fb      	ldr	r3, [r7, #12]
 8017110:	2200      	movs	r2, #0
 8017112:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8017116:	2303      	movs	r3, #3
 8017118:	e00f      	b.n	801713a <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 801711a:	68fb      	ldr	r3, [r7, #12]
 801711c:	681b      	ldr	r3, [r3, #0]
 801711e:	69da      	ldr	r2, [r3, #28]
 8017120:	68bb      	ldr	r3, [r7, #8]
 8017122:	4013      	ands	r3, r2
 8017124:	68ba      	ldr	r2, [r7, #8]
 8017126:	429a      	cmp	r2, r3
 8017128:	bf0c      	ite	eq
 801712a:	2301      	moveq	r3, #1
 801712c:	2300      	movne	r3, #0
 801712e:	b2db      	uxtb	r3, r3
 8017130:	461a      	mov	r2, r3
 8017132:	79fb      	ldrb	r3, [r7, #7]
 8017134:	429a      	cmp	r2, r3
 8017136:	d0a0      	beq.n	801707a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8017138:	2300      	movs	r3, #0
}
 801713a:	4618      	mov	r0, r3
 801713c:	3710      	adds	r7, #16
 801713e:	46bd      	mov	sp, r7
 8017140:	bd80      	pop	{r7, pc}
	...

08017144 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8017144:	b480      	push	{r7}
 8017146:	b0a3      	sub	sp, #140	@ 0x8c
 8017148:	af00      	add	r7, sp, #0
 801714a:	60f8      	str	r0, [r7, #12]
 801714c:	60b9      	str	r1, [r7, #8]
 801714e:	4613      	mov	r3, r2
 8017150:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8017152:	68fb      	ldr	r3, [r7, #12]
 8017154:	68ba      	ldr	r2, [r7, #8]
 8017156:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8017158:	68fb      	ldr	r3, [r7, #12]
 801715a:	88fa      	ldrh	r2, [r7, #6]
 801715c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8017160:	68fb      	ldr	r3, [r7, #12]
 8017162:	88fa      	ldrh	r2, [r7, #6]
 8017164:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8017168:	68fb      	ldr	r3, [r7, #12]
 801716a:	2200      	movs	r2, #0
 801716c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 801716e:	68fb      	ldr	r3, [r7, #12]
 8017170:	689b      	ldr	r3, [r3, #8]
 8017172:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8017176:	d10e      	bne.n	8017196 <UART_Start_Receive_IT+0x52>
 8017178:	68fb      	ldr	r3, [r7, #12]
 801717a:	691b      	ldr	r3, [r3, #16]
 801717c:	2b00      	cmp	r3, #0
 801717e:	d105      	bne.n	801718c <UART_Start_Receive_IT+0x48>
 8017180:	68fb      	ldr	r3, [r7, #12]
 8017182:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8017186:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 801718a:	e02d      	b.n	80171e8 <UART_Start_Receive_IT+0xa4>
 801718c:	68fb      	ldr	r3, [r7, #12]
 801718e:	22ff      	movs	r2, #255	@ 0xff
 8017190:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8017194:	e028      	b.n	80171e8 <UART_Start_Receive_IT+0xa4>
 8017196:	68fb      	ldr	r3, [r7, #12]
 8017198:	689b      	ldr	r3, [r3, #8]
 801719a:	2b00      	cmp	r3, #0
 801719c:	d10d      	bne.n	80171ba <UART_Start_Receive_IT+0x76>
 801719e:	68fb      	ldr	r3, [r7, #12]
 80171a0:	691b      	ldr	r3, [r3, #16]
 80171a2:	2b00      	cmp	r3, #0
 80171a4:	d104      	bne.n	80171b0 <UART_Start_Receive_IT+0x6c>
 80171a6:	68fb      	ldr	r3, [r7, #12]
 80171a8:	22ff      	movs	r2, #255	@ 0xff
 80171aa:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80171ae:	e01b      	b.n	80171e8 <UART_Start_Receive_IT+0xa4>
 80171b0:	68fb      	ldr	r3, [r7, #12]
 80171b2:	227f      	movs	r2, #127	@ 0x7f
 80171b4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80171b8:	e016      	b.n	80171e8 <UART_Start_Receive_IT+0xa4>
 80171ba:	68fb      	ldr	r3, [r7, #12]
 80171bc:	689b      	ldr	r3, [r3, #8]
 80171be:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80171c2:	d10d      	bne.n	80171e0 <UART_Start_Receive_IT+0x9c>
 80171c4:	68fb      	ldr	r3, [r7, #12]
 80171c6:	691b      	ldr	r3, [r3, #16]
 80171c8:	2b00      	cmp	r3, #0
 80171ca:	d104      	bne.n	80171d6 <UART_Start_Receive_IT+0x92>
 80171cc:	68fb      	ldr	r3, [r7, #12]
 80171ce:	227f      	movs	r2, #127	@ 0x7f
 80171d0:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80171d4:	e008      	b.n	80171e8 <UART_Start_Receive_IT+0xa4>
 80171d6:	68fb      	ldr	r3, [r7, #12]
 80171d8:	223f      	movs	r2, #63	@ 0x3f
 80171da:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 80171de:	e003      	b.n	80171e8 <UART_Start_Receive_IT+0xa4>
 80171e0:	68fb      	ldr	r3, [r7, #12]
 80171e2:	2200      	movs	r2, #0
 80171e4:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80171e8:	68fb      	ldr	r3, [r7, #12]
 80171ea:	2200      	movs	r2, #0
 80171ec:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80171f0:	68fb      	ldr	r3, [r7, #12]
 80171f2:	2222      	movs	r2, #34	@ 0x22
 80171f4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80171f8:	68fb      	ldr	r3, [r7, #12]
 80171fa:	681b      	ldr	r3, [r3, #0]
 80171fc:	3308      	adds	r3, #8
 80171fe:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017200:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017202:	e853 3f00 	ldrex	r3, [r3]
 8017206:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8017208:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 801720a:	f043 0301 	orr.w	r3, r3, #1
 801720e:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8017212:	68fb      	ldr	r3, [r7, #12]
 8017214:	681b      	ldr	r3, [r3, #0]
 8017216:	3308      	adds	r3, #8
 8017218:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 801721c:	673a      	str	r2, [r7, #112]	@ 0x70
 801721e:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017220:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 8017222:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 8017224:	e841 2300 	strex	r3, r2, [r1]
 8017228:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 801722a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801722c:	2b00      	cmp	r3, #0
 801722e:	d1e3      	bne.n	80171f8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8017230:	68fb      	ldr	r3, [r7, #12]
 8017232:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8017234:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8017238:	d14f      	bne.n	80172da <UART_Start_Receive_IT+0x196>
 801723a:	68fb      	ldr	r3, [r7, #12]
 801723c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017240:	88fa      	ldrh	r2, [r7, #6]
 8017242:	429a      	cmp	r2, r3
 8017244:	d349      	bcc.n	80172da <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8017246:	68fb      	ldr	r3, [r7, #12]
 8017248:	689b      	ldr	r3, [r3, #8]
 801724a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 801724e:	d107      	bne.n	8017260 <UART_Start_Receive_IT+0x11c>
 8017250:	68fb      	ldr	r3, [r7, #12]
 8017252:	691b      	ldr	r3, [r3, #16]
 8017254:	2b00      	cmp	r3, #0
 8017256:	d103      	bne.n	8017260 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8017258:	68fb      	ldr	r3, [r7, #12]
 801725a:	4a47      	ldr	r2, [pc, #284]	@ (8017378 <UART_Start_Receive_IT+0x234>)
 801725c:	675a      	str	r2, [r3, #116]	@ 0x74
 801725e:	e002      	b.n	8017266 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8017260:	68fb      	ldr	r3, [r7, #12]
 8017262:	4a46      	ldr	r2, [pc, #280]	@ (801737c <UART_Start_Receive_IT+0x238>)
 8017264:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8017266:	68fb      	ldr	r3, [r7, #12]
 8017268:	691b      	ldr	r3, [r3, #16]
 801726a:	2b00      	cmp	r3, #0
 801726c:	d01a      	beq.n	80172a4 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 801726e:	68fb      	ldr	r3, [r7, #12]
 8017270:	681b      	ldr	r3, [r3, #0]
 8017272:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017274:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017276:	e853 3f00 	ldrex	r3, [r3]
 801727a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 801727c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 801727e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8017282:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8017286:	68fb      	ldr	r3, [r7, #12]
 8017288:	681b      	ldr	r3, [r3, #0]
 801728a:	461a      	mov	r2, r3
 801728c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017290:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017292:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017294:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8017296:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8017298:	e841 2300 	strex	r3, r2, [r1]
 801729c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 801729e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80172a0:	2b00      	cmp	r3, #0
 80172a2:	d1e4      	bne.n	801726e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80172a4:	68fb      	ldr	r3, [r7, #12]
 80172a6:	681b      	ldr	r3, [r3, #0]
 80172a8:	3308      	adds	r3, #8
 80172aa:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80172ac:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80172ae:	e853 3f00 	ldrex	r3, [r3]
 80172b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80172b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80172b6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80172ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80172bc:	68fb      	ldr	r3, [r7, #12]
 80172be:	681b      	ldr	r3, [r3, #0]
 80172c0:	3308      	adds	r3, #8
 80172c2:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80172c4:	64ba      	str	r2, [r7, #72]	@ 0x48
 80172c6:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80172c8:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 80172ca:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80172cc:	e841 2300 	strex	r3, r2, [r1]
 80172d0:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 80172d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	d1e5      	bne.n	80172a4 <UART_Start_Receive_IT+0x160>
 80172d8:	e046      	b.n	8017368 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80172da:	68fb      	ldr	r3, [r7, #12]
 80172dc:	689b      	ldr	r3, [r3, #8]
 80172de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80172e2:	d107      	bne.n	80172f4 <UART_Start_Receive_IT+0x1b0>
 80172e4:	68fb      	ldr	r3, [r7, #12]
 80172e6:	691b      	ldr	r3, [r3, #16]
 80172e8:	2b00      	cmp	r3, #0
 80172ea:	d103      	bne.n	80172f4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 80172ec:	68fb      	ldr	r3, [r7, #12]
 80172ee:	4a24      	ldr	r2, [pc, #144]	@ (8017380 <UART_Start_Receive_IT+0x23c>)
 80172f0:	675a      	str	r2, [r3, #116]	@ 0x74
 80172f2:	e002      	b.n	80172fa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80172f4:	68fb      	ldr	r3, [r7, #12]
 80172f6:	4a23      	ldr	r2, [pc, #140]	@ (8017384 <UART_Start_Receive_IT+0x240>)
 80172f8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80172fa:	68fb      	ldr	r3, [r7, #12]
 80172fc:	691b      	ldr	r3, [r3, #16]
 80172fe:	2b00      	cmp	r3, #0
 8017300:	d019      	beq.n	8017336 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8017302:	68fb      	ldr	r3, [r7, #12]
 8017304:	681b      	ldr	r3, [r3, #0]
 8017306:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017308:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801730a:	e853 3f00 	ldrex	r3, [r3]
 801730e:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017310:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017312:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 8017316:	677b      	str	r3, [r7, #116]	@ 0x74
 8017318:	68fb      	ldr	r3, [r7, #12]
 801731a:	681b      	ldr	r3, [r3, #0]
 801731c:	461a      	mov	r2, r3
 801731e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017320:	637b      	str	r3, [r7, #52]	@ 0x34
 8017322:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017324:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8017326:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8017328:	e841 2300 	strex	r3, r2, [r1]
 801732c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 801732e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8017330:	2b00      	cmp	r3, #0
 8017332:	d1e6      	bne.n	8017302 <UART_Start_Receive_IT+0x1be>
 8017334:	e018      	b.n	8017368 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017336:	68fb      	ldr	r3, [r7, #12]
 8017338:	681b      	ldr	r3, [r3, #0]
 801733a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801733c:	697b      	ldr	r3, [r7, #20]
 801733e:	e853 3f00 	ldrex	r3, [r3]
 8017342:	613b      	str	r3, [r7, #16]
   return(result);
 8017344:	693b      	ldr	r3, [r7, #16]
 8017346:	f043 0320 	orr.w	r3, r3, #32
 801734a:	67bb      	str	r3, [r7, #120]	@ 0x78
 801734c:	68fb      	ldr	r3, [r7, #12]
 801734e:	681b      	ldr	r3, [r3, #0]
 8017350:	461a      	mov	r2, r3
 8017352:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017354:	623b      	str	r3, [r7, #32]
 8017356:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017358:	69f9      	ldr	r1, [r7, #28]
 801735a:	6a3a      	ldr	r2, [r7, #32]
 801735c:	e841 2300 	strex	r3, r2, [r1]
 8017360:	61bb      	str	r3, [r7, #24]
   return(result);
 8017362:	69bb      	ldr	r3, [r7, #24]
 8017364:	2b00      	cmp	r3, #0
 8017366:	d1e6      	bne.n	8017336 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8017368:	2300      	movs	r3, #0
}
 801736a:	4618      	mov	r0, r3
 801736c:	378c      	adds	r7, #140	@ 0x8c
 801736e:	46bd      	mov	sp, r7
 8017370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017374:	4770      	bx	lr
 8017376:	bf00      	nop
 8017378:	08017ba9 	.word	0x08017ba9
 801737c:	08017849 	.word	0x08017849
 8017380:	08017691 	.word	0x08017691
 8017384:	080174d9 	.word	0x080174d9

08017388 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8017388:	b480      	push	{r7}
 801738a:	b095      	sub	sp, #84	@ 0x54
 801738c:	af00      	add	r7, sp, #0
 801738e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017390:	687b      	ldr	r3, [r7, #4]
 8017392:	681b      	ldr	r3, [r3, #0]
 8017394:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017396:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017398:	e853 3f00 	ldrex	r3, [r3]
 801739c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801739e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80173a0:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80173a4:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80173a6:	687b      	ldr	r3, [r7, #4]
 80173a8:	681b      	ldr	r3, [r3, #0]
 80173aa:	461a      	mov	r2, r3
 80173ac:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80173ae:	643b      	str	r3, [r7, #64]	@ 0x40
 80173b0:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173b2:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80173b4:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80173b6:	e841 2300 	strex	r3, r2, [r1]
 80173ba:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80173bc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80173be:	2b00      	cmp	r3, #0
 80173c0:	d1e6      	bne.n	8017390 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	681b      	ldr	r3, [r3, #0]
 80173c6:	3308      	adds	r3, #8
 80173c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80173ca:	6a3b      	ldr	r3, [r7, #32]
 80173cc:	e853 3f00 	ldrex	r3, [r3]
 80173d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80173d2:	69fb      	ldr	r3, [r7, #28]
 80173d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80173d8:	f023 0301 	bic.w	r3, r3, #1
 80173dc:	64bb      	str	r3, [r7, #72]	@ 0x48
 80173de:	687b      	ldr	r3, [r7, #4]
 80173e0:	681b      	ldr	r3, [r3, #0]
 80173e2:	3308      	adds	r3, #8
 80173e4:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80173e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80173e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80173ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80173ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80173ee:	e841 2300 	strex	r3, r2, [r1]
 80173f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80173f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80173f6:	2b00      	cmp	r3, #0
 80173f8:	d1e3      	bne.n	80173c2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80173fa:	687b      	ldr	r3, [r7, #4]
 80173fc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80173fe:	2b01      	cmp	r3, #1
 8017400:	d118      	bne.n	8017434 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	681b      	ldr	r3, [r3, #0]
 8017406:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017408:	68fb      	ldr	r3, [r7, #12]
 801740a:	e853 3f00 	ldrex	r3, [r3]
 801740e:	60bb      	str	r3, [r7, #8]
   return(result);
 8017410:	68bb      	ldr	r3, [r7, #8]
 8017412:	f023 0310 	bic.w	r3, r3, #16
 8017416:	647b      	str	r3, [r7, #68]	@ 0x44
 8017418:	687b      	ldr	r3, [r7, #4]
 801741a:	681b      	ldr	r3, [r3, #0]
 801741c:	461a      	mov	r2, r3
 801741e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017420:	61bb      	str	r3, [r7, #24]
 8017422:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017424:	6979      	ldr	r1, [r7, #20]
 8017426:	69ba      	ldr	r2, [r7, #24]
 8017428:	e841 2300 	strex	r3, r2, [r1]
 801742c:	613b      	str	r3, [r7, #16]
   return(result);
 801742e:	693b      	ldr	r3, [r7, #16]
 8017430:	2b00      	cmp	r3, #0
 8017432:	d1e6      	bne.n	8017402 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8017434:	687b      	ldr	r3, [r7, #4]
 8017436:	2220      	movs	r2, #32
 8017438:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801743c:	687b      	ldr	r3, [r7, #4]
 801743e:	2200      	movs	r2, #0
 8017440:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8017442:	687b      	ldr	r3, [r7, #4]
 8017444:	2200      	movs	r2, #0
 8017446:	675a      	str	r2, [r3, #116]	@ 0x74
}
 8017448:	bf00      	nop
 801744a:	3754      	adds	r7, #84	@ 0x54
 801744c:	46bd      	mov	sp, r7
 801744e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017452:	4770      	bx	lr

08017454 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8017454:	b580      	push	{r7, lr}
 8017456:	b084      	sub	sp, #16
 8017458:	af00      	add	r7, sp, #0
 801745a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 801745c:	687b      	ldr	r3, [r7, #4]
 801745e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8017460:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8017462:	68fb      	ldr	r3, [r7, #12]
 8017464:	2200      	movs	r2, #0
 8017466:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 801746a:	68fb      	ldr	r3, [r7, #12]
 801746c:	2200      	movs	r2, #0
 801746e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8017472:	68f8      	ldr	r0, [r7, #12]
 8017474:	f7ff f832 	bl	80164dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8017478:	bf00      	nop
 801747a:	3710      	adds	r7, #16
 801747c:	46bd      	mov	sp, r7
 801747e:	bd80      	pop	{r7, pc}

08017480 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8017480:	b580      	push	{r7, lr}
 8017482:	b088      	sub	sp, #32
 8017484:	af00      	add	r7, sp, #0
 8017486:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8017488:	687b      	ldr	r3, [r7, #4]
 801748a:	681b      	ldr	r3, [r3, #0]
 801748c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801748e:	68fb      	ldr	r3, [r7, #12]
 8017490:	e853 3f00 	ldrex	r3, [r3]
 8017494:	60bb      	str	r3, [r7, #8]
   return(result);
 8017496:	68bb      	ldr	r3, [r7, #8]
 8017498:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 801749c:	61fb      	str	r3, [r7, #28]
 801749e:	687b      	ldr	r3, [r7, #4]
 80174a0:	681b      	ldr	r3, [r3, #0]
 80174a2:	461a      	mov	r2, r3
 80174a4:	69fb      	ldr	r3, [r7, #28]
 80174a6:	61bb      	str	r3, [r7, #24]
 80174a8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80174aa:	6979      	ldr	r1, [r7, #20]
 80174ac:	69ba      	ldr	r2, [r7, #24]
 80174ae:	e841 2300 	strex	r3, r2, [r1]
 80174b2:	613b      	str	r3, [r7, #16]
   return(result);
 80174b4:	693b      	ldr	r3, [r7, #16]
 80174b6:	2b00      	cmp	r3, #0
 80174b8:	d1e6      	bne.n	8017488 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80174ba:	687b      	ldr	r3, [r7, #4]
 80174bc:	2220      	movs	r2, #32
 80174be:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80174c2:	687b      	ldr	r3, [r7, #4]
 80174c4:	2200      	movs	r2, #0
 80174c6:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80174c8:	6878      	ldr	r0, [r7, #4]
 80174ca:	f7fe fffd 	bl	80164c8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80174ce:	bf00      	nop
 80174d0:	3720      	adds	r7, #32
 80174d2:	46bd      	mov	sp, r7
 80174d4:	bd80      	pop	{r7, pc}
	...

080174d8 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80174d8:	b580      	push	{r7, lr}
 80174da:	b09c      	sub	sp, #112	@ 0x70
 80174dc:	af00      	add	r7, sp, #0
 80174de:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80174e0:	687b      	ldr	r3, [r7, #4]
 80174e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 80174e6:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80174ea:	687b      	ldr	r3, [r7, #4]
 80174ec:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80174f0:	2b22      	cmp	r3, #34	@ 0x22
 80174f2:	f040 80be 	bne.w	8017672 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80174f6:	687b      	ldr	r3, [r7, #4]
 80174f8:	681b      	ldr	r3, [r3, #0]
 80174fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80174fc:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8017500:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 8017504:	b2d9      	uxtb	r1, r3
 8017506:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 801750a:	b2da      	uxtb	r2, r3
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017510:	400a      	ands	r2, r1
 8017512:	b2d2      	uxtb	r2, r2
 8017514:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8017516:	687b      	ldr	r3, [r7, #4]
 8017518:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 801751a:	1c5a      	adds	r2, r3, #1
 801751c:	687b      	ldr	r3, [r7, #4]
 801751e:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8017520:	687b      	ldr	r3, [r7, #4]
 8017522:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017526:	b29b      	uxth	r3, r3
 8017528:	3b01      	subs	r3, #1
 801752a:	b29a      	uxth	r2, r3
 801752c:	687b      	ldr	r3, [r7, #4]
 801752e:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 8017532:	687b      	ldr	r3, [r7, #4]
 8017534:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017538:	b29b      	uxth	r3, r3
 801753a:	2b00      	cmp	r3, #0
 801753c:	f040 80a1 	bne.w	8017682 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	681b      	ldr	r3, [r3, #0]
 8017544:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017546:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017548:	e853 3f00 	ldrex	r3, [r3]
 801754c:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 801754e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017550:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8017554:	66bb      	str	r3, [r7, #104]	@ 0x68
 8017556:	687b      	ldr	r3, [r7, #4]
 8017558:	681b      	ldr	r3, [r3, #0]
 801755a:	461a      	mov	r2, r3
 801755c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801755e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017560:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017562:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017564:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017566:	e841 2300 	strex	r3, r2, [r1]
 801756a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 801756c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 801756e:	2b00      	cmp	r3, #0
 8017570:	d1e6      	bne.n	8017540 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8017572:	687b      	ldr	r3, [r7, #4]
 8017574:	681b      	ldr	r3, [r3, #0]
 8017576:	3308      	adds	r3, #8
 8017578:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801757a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801757c:	e853 3f00 	ldrex	r3, [r3]
 8017580:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017582:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017584:	f023 0301 	bic.w	r3, r3, #1
 8017588:	667b      	str	r3, [r7, #100]	@ 0x64
 801758a:	687b      	ldr	r3, [r7, #4]
 801758c:	681b      	ldr	r3, [r3, #0]
 801758e:	3308      	adds	r3, #8
 8017590:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8017592:	647a      	str	r2, [r7, #68]	@ 0x44
 8017594:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017596:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017598:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 801759a:	e841 2300 	strex	r3, r2, [r1]
 801759e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80175a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80175a2:	2b00      	cmp	r3, #0
 80175a4:	d1e5      	bne.n	8017572 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80175a6:	687b      	ldr	r3, [r7, #4]
 80175a8:	2220      	movs	r2, #32
 80175aa:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80175ae:	687b      	ldr	r3, [r7, #4]
 80175b0:	2200      	movs	r2, #0
 80175b2:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80175b4:	687b      	ldr	r3, [r7, #4]
 80175b6:	2200      	movs	r2, #0
 80175b8:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80175ba:	687b      	ldr	r3, [r7, #4]
 80175bc:	681b      	ldr	r3, [r3, #0]
 80175be:	4a33      	ldr	r2, [pc, #204]	@ (801768c <UART_RxISR_8BIT+0x1b4>)
 80175c0:	4293      	cmp	r3, r2
 80175c2:	d01f      	beq.n	8017604 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80175c4:	687b      	ldr	r3, [r7, #4]
 80175c6:	681b      	ldr	r3, [r3, #0]
 80175c8:	685b      	ldr	r3, [r3, #4]
 80175ca:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80175ce:	2b00      	cmp	r3, #0
 80175d0:	d018      	beq.n	8017604 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80175d2:	687b      	ldr	r3, [r7, #4]
 80175d4:	681b      	ldr	r3, [r3, #0]
 80175d6:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80175d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80175da:	e853 3f00 	ldrex	r3, [r3]
 80175de:	623b      	str	r3, [r7, #32]
   return(result);
 80175e0:	6a3b      	ldr	r3, [r7, #32]
 80175e2:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80175e6:	663b      	str	r3, [r7, #96]	@ 0x60
 80175e8:	687b      	ldr	r3, [r7, #4]
 80175ea:	681b      	ldr	r3, [r3, #0]
 80175ec:	461a      	mov	r2, r3
 80175ee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80175f0:	633b      	str	r3, [r7, #48]	@ 0x30
 80175f2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80175f4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80175f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80175f8:	e841 2300 	strex	r3, r2, [r1]
 80175fc:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80175fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017600:	2b00      	cmp	r3, #0
 8017602:	d1e6      	bne.n	80175d2 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017608:	2b01      	cmp	r3, #1
 801760a:	d12e      	bne.n	801766a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801760c:	687b      	ldr	r3, [r7, #4]
 801760e:	2200      	movs	r2, #0
 8017610:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017612:	687b      	ldr	r3, [r7, #4]
 8017614:	681b      	ldr	r3, [r3, #0]
 8017616:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017618:	693b      	ldr	r3, [r7, #16]
 801761a:	e853 3f00 	ldrex	r3, [r3]
 801761e:	60fb      	str	r3, [r7, #12]
   return(result);
 8017620:	68fb      	ldr	r3, [r7, #12]
 8017622:	f023 0310 	bic.w	r3, r3, #16
 8017626:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8017628:	687b      	ldr	r3, [r7, #4]
 801762a:	681b      	ldr	r3, [r3, #0]
 801762c:	461a      	mov	r2, r3
 801762e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017630:	61fb      	str	r3, [r7, #28]
 8017632:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017634:	69b9      	ldr	r1, [r7, #24]
 8017636:	69fa      	ldr	r2, [r7, #28]
 8017638:	e841 2300 	strex	r3, r2, [r1]
 801763c:	617b      	str	r3, [r7, #20]
   return(result);
 801763e:	697b      	ldr	r3, [r7, #20]
 8017640:	2b00      	cmp	r3, #0
 8017642:	d1e6      	bne.n	8017612 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017644:	687b      	ldr	r3, [r7, #4]
 8017646:	681b      	ldr	r3, [r3, #0]
 8017648:	69db      	ldr	r3, [r3, #28]
 801764a:	f003 0310 	and.w	r3, r3, #16
 801764e:	2b10      	cmp	r3, #16
 8017650:	d103      	bne.n	801765a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	681b      	ldr	r3, [r3, #0]
 8017656:	2210      	movs	r2, #16
 8017658:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 801765a:	687b      	ldr	r3, [r7, #4]
 801765c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017660:	4619      	mov	r1, r3
 8017662:	6878      	ldr	r0, [r7, #4]
 8017664:	f7fe ff44 	bl	80164f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017668:	e00b      	b.n	8017682 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 801766a:	6878      	ldr	r0, [r7, #4]
 801766c:	f7fa f85e 	bl	801172c <HAL_UART_RxCpltCallback>
}
 8017670:	e007      	b.n	8017682 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017672:	687b      	ldr	r3, [r7, #4]
 8017674:	681b      	ldr	r3, [r3, #0]
 8017676:	699a      	ldr	r2, [r3, #24]
 8017678:	687b      	ldr	r3, [r7, #4]
 801767a:	681b      	ldr	r3, [r3, #0]
 801767c:	f042 0208 	orr.w	r2, r2, #8
 8017680:	619a      	str	r2, [r3, #24]
}
 8017682:	bf00      	nop
 8017684:	3770      	adds	r7, #112	@ 0x70
 8017686:	46bd      	mov	sp, r7
 8017688:	bd80      	pop	{r7, pc}
 801768a:	bf00      	nop
 801768c:	40008000 	.word	0x40008000

08017690 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8017690:	b580      	push	{r7, lr}
 8017692:	b09c      	sub	sp, #112	@ 0x70
 8017694:	af00      	add	r7, sp, #0
 8017696:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8017698:	687b      	ldr	r3, [r7, #4]
 801769a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 801769e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80176a2:	687b      	ldr	r3, [r7, #4]
 80176a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80176a8:	2b22      	cmp	r3, #34	@ 0x22
 80176aa:	f040 80be 	bne.w	801782a <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80176ae:	687b      	ldr	r3, [r7, #4]
 80176b0:	681b      	ldr	r3, [r3, #0]
 80176b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80176b4:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80176b8:	687b      	ldr	r3, [r7, #4]
 80176ba:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80176bc:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 80176be:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 80176c2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80176c6:	4013      	ands	r3, r2
 80176c8:	b29a      	uxth	r2, r3
 80176ca:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80176cc:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 80176ce:	687b      	ldr	r3, [r7, #4]
 80176d0:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80176d2:	1c9a      	adds	r2, r3, #2
 80176d4:	687b      	ldr	r3, [r7, #4]
 80176d6:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80176d8:	687b      	ldr	r3, [r7, #4]
 80176da:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80176de:	b29b      	uxth	r3, r3
 80176e0:	3b01      	subs	r3, #1
 80176e2:	b29a      	uxth	r2, r3
 80176e4:	687b      	ldr	r3, [r7, #4]
 80176e6:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80176ea:	687b      	ldr	r3, [r7, #4]
 80176ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80176f0:	b29b      	uxth	r3, r3
 80176f2:	2b00      	cmp	r3, #0
 80176f4:	f040 80a1 	bne.w	801783a <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80176f8:	687b      	ldr	r3, [r7, #4]
 80176fa:	681b      	ldr	r3, [r3, #0]
 80176fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80176fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017700:	e853 3f00 	ldrex	r3, [r3]
 8017704:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8017706:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017708:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 801770c:	667b      	str	r3, [r7, #100]	@ 0x64
 801770e:	687b      	ldr	r3, [r7, #4]
 8017710:	681b      	ldr	r3, [r3, #0]
 8017712:	461a      	mov	r2, r3
 8017714:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017716:	657b      	str	r3, [r7, #84]	@ 0x54
 8017718:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801771a:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 801771c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801771e:	e841 2300 	strex	r3, r2, [r1]
 8017722:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8017724:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017726:	2b00      	cmp	r3, #0
 8017728:	d1e6      	bne.n	80176f8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801772a:	687b      	ldr	r3, [r7, #4]
 801772c:	681b      	ldr	r3, [r3, #0]
 801772e:	3308      	adds	r3, #8
 8017730:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017732:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017734:	e853 3f00 	ldrex	r3, [r3]
 8017738:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 801773a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801773c:	f023 0301 	bic.w	r3, r3, #1
 8017740:	663b      	str	r3, [r7, #96]	@ 0x60
 8017742:	687b      	ldr	r3, [r7, #4]
 8017744:	681b      	ldr	r3, [r3, #0]
 8017746:	3308      	adds	r3, #8
 8017748:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 801774a:	643a      	str	r2, [r7, #64]	@ 0x40
 801774c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 801774e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017750:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017752:	e841 2300 	strex	r3, r2, [r1]
 8017756:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017758:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801775a:	2b00      	cmp	r3, #0
 801775c:	d1e5      	bne.n	801772a <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 801775e:	687b      	ldr	r3, [r7, #4]
 8017760:	2220      	movs	r2, #32
 8017762:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8017766:	687b      	ldr	r3, [r7, #4]
 8017768:	2200      	movs	r2, #0
 801776a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 801776c:	687b      	ldr	r3, [r7, #4]
 801776e:	2200      	movs	r2, #0
 8017770:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017772:	687b      	ldr	r3, [r7, #4]
 8017774:	681b      	ldr	r3, [r3, #0]
 8017776:	4a33      	ldr	r2, [pc, #204]	@ (8017844 <UART_RxISR_16BIT+0x1b4>)
 8017778:	4293      	cmp	r3, r2
 801777a:	d01f      	beq.n	80177bc <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 801777c:	687b      	ldr	r3, [r7, #4]
 801777e:	681b      	ldr	r3, [r3, #0]
 8017780:	685b      	ldr	r3, [r3, #4]
 8017782:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017786:	2b00      	cmp	r3, #0
 8017788:	d018      	beq.n	80177bc <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 801778a:	687b      	ldr	r3, [r7, #4]
 801778c:	681b      	ldr	r3, [r3, #0]
 801778e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017790:	6a3b      	ldr	r3, [r7, #32]
 8017792:	e853 3f00 	ldrex	r3, [r3]
 8017796:	61fb      	str	r3, [r7, #28]
   return(result);
 8017798:	69fb      	ldr	r3, [r7, #28]
 801779a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 801779e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80177a0:	687b      	ldr	r3, [r7, #4]
 80177a2:	681b      	ldr	r3, [r3, #0]
 80177a4:	461a      	mov	r2, r3
 80177a6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80177a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80177aa:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177ac:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80177ae:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80177b0:	e841 2300 	strex	r3, r2, [r1]
 80177b4:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80177b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80177b8:	2b00      	cmp	r3, #0
 80177ba:	d1e6      	bne.n	801778a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80177bc:	687b      	ldr	r3, [r7, #4]
 80177be:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80177c0:	2b01      	cmp	r3, #1
 80177c2:	d12e      	bne.n	8017822 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80177c4:	687b      	ldr	r3, [r7, #4]
 80177c6:	2200      	movs	r2, #0
 80177c8:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80177ca:	687b      	ldr	r3, [r7, #4]
 80177cc:	681b      	ldr	r3, [r3, #0]
 80177ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80177d0:	68fb      	ldr	r3, [r7, #12]
 80177d2:	e853 3f00 	ldrex	r3, [r3]
 80177d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80177d8:	68bb      	ldr	r3, [r7, #8]
 80177da:	f023 0310 	bic.w	r3, r3, #16
 80177de:	65bb      	str	r3, [r7, #88]	@ 0x58
 80177e0:	687b      	ldr	r3, [r7, #4]
 80177e2:	681b      	ldr	r3, [r3, #0]
 80177e4:	461a      	mov	r2, r3
 80177e6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80177e8:	61bb      	str	r3, [r7, #24]
 80177ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80177ec:	6979      	ldr	r1, [r7, #20]
 80177ee:	69ba      	ldr	r2, [r7, #24]
 80177f0:	e841 2300 	strex	r3, r2, [r1]
 80177f4:	613b      	str	r3, [r7, #16]
   return(result);
 80177f6:	693b      	ldr	r3, [r7, #16]
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d1e6      	bne.n	80177ca <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80177fc:	687b      	ldr	r3, [r7, #4]
 80177fe:	681b      	ldr	r3, [r3, #0]
 8017800:	69db      	ldr	r3, [r3, #28]
 8017802:	f003 0310 	and.w	r3, r3, #16
 8017806:	2b10      	cmp	r3, #16
 8017808:	d103      	bne.n	8017812 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 801780a:	687b      	ldr	r3, [r7, #4]
 801780c:	681b      	ldr	r3, [r3, #0]
 801780e:	2210      	movs	r2, #16
 8017810:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017812:	687b      	ldr	r3, [r7, #4]
 8017814:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017818:	4619      	mov	r1, r3
 801781a:	6878      	ldr	r0, [r7, #4]
 801781c:	f7fe fe68 	bl	80164f0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017820:	e00b      	b.n	801783a <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 8017822:	6878      	ldr	r0, [r7, #4]
 8017824:	f7f9 ff82 	bl	801172c <HAL_UART_RxCpltCallback>
}
 8017828:	e007      	b.n	801783a <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801782a:	687b      	ldr	r3, [r7, #4]
 801782c:	681b      	ldr	r3, [r3, #0]
 801782e:	699a      	ldr	r2, [r3, #24]
 8017830:	687b      	ldr	r3, [r7, #4]
 8017832:	681b      	ldr	r3, [r3, #0]
 8017834:	f042 0208 	orr.w	r2, r2, #8
 8017838:	619a      	str	r2, [r3, #24]
}
 801783a:	bf00      	nop
 801783c:	3770      	adds	r7, #112	@ 0x70
 801783e:	46bd      	mov	sp, r7
 8017840:	bd80      	pop	{r7, pc}
 8017842:	bf00      	nop
 8017844:	40008000 	.word	0x40008000

08017848 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017848:	b580      	push	{r7, lr}
 801784a:	b0ac      	sub	sp, #176	@ 0xb0
 801784c:	af00      	add	r7, sp, #0
 801784e:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8017850:	687b      	ldr	r3, [r7, #4]
 8017852:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017856:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 801785a:	687b      	ldr	r3, [r7, #4]
 801785c:	681b      	ldr	r3, [r3, #0]
 801785e:	69db      	ldr	r3, [r3, #28]
 8017860:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017864:	687b      	ldr	r3, [r7, #4]
 8017866:	681b      	ldr	r3, [r3, #0]
 8017868:	681b      	ldr	r3, [r3, #0]
 801786a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 801786e:	687b      	ldr	r3, [r7, #4]
 8017870:	681b      	ldr	r3, [r3, #0]
 8017872:	689b      	ldr	r3, [r3, #8]
 8017874:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017878:	687b      	ldr	r3, [r7, #4]
 801787a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 801787e:	2b22      	cmp	r3, #34	@ 0x22
 8017880:	f040 8182 	bne.w	8017b88 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017884:	687b      	ldr	r3, [r7, #4]
 8017886:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 801788a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 801788e:	e125      	b.n	8017adc <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017890:	687b      	ldr	r3, [r7, #4]
 8017892:	681b      	ldr	r3, [r3, #0]
 8017894:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017896:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 801789a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 801789e:	b2d9      	uxtb	r1, r3
 80178a0:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 80178a4:	b2da      	uxtb	r2, r3
 80178a6:	687b      	ldr	r3, [r7, #4]
 80178a8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80178aa:	400a      	ands	r2, r1
 80178ac:	b2d2      	uxtb	r2, r2
 80178ae:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80178b0:	687b      	ldr	r3, [r7, #4]
 80178b2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80178b4:	1c5a      	adds	r2, r3, #1
 80178b6:	687b      	ldr	r3, [r7, #4]
 80178b8:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 80178ba:	687b      	ldr	r3, [r7, #4]
 80178bc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80178c0:	b29b      	uxth	r3, r3
 80178c2:	3b01      	subs	r3, #1
 80178c4:	b29a      	uxth	r2, r3
 80178c6:	687b      	ldr	r3, [r7, #4]
 80178c8:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80178cc:	687b      	ldr	r3, [r7, #4]
 80178ce:	681b      	ldr	r3, [r3, #0]
 80178d0:	69db      	ldr	r3, [r3, #28]
 80178d2:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80178d6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80178da:	f003 0307 	and.w	r3, r3, #7
 80178de:	2b00      	cmp	r3, #0
 80178e0:	d053      	beq.n	801798a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80178e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80178e6:	f003 0301 	and.w	r3, r3, #1
 80178ea:	2b00      	cmp	r3, #0
 80178ec:	d011      	beq.n	8017912 <UART_RxISR_8BIT_FIFOEN+0xca>
 80178ee:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80178f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d00b      	beq.n	8017912 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80178fa:	687b      	ldr	r3, [r7, #4]
 80178fc:	681b      	ldr	r3, [r3, #0]
 80178fe:	2201      	movs	r2, #1
 8017900:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017902:	687b      	ldr	r3, [r7, #4]
 8017904:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017908:	f043 0201 	orr.w	r2, r3, #1
 801790c:	687b      	ldr	r3, [r7, #4]
 801790e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017912:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017916:	f003 0302 	and.w	r3, r3, #2
 801791a:	2b00      	cmp	r3, #0
 801791c:	d011      	beq.n	8017942 <UART_RxISR_8BIT_FIFOEN+0xfa>
 801791e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017922:	f003 0301 	and.w	r3, r3, #1
 8017926:	2b00      	cmp	r3, #0
 8017928:	d00b      	beq.n	8017942 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 801792a:	687b      	ldr	r3, [r7, #4]
 801792c:	681b      	ldr	r3, [r3, #0]
 801792e:	2202      	movs	r2, #2
 8017930:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017938:	f043 0204 	orr.w	r2, r3, #4
 801793c:	687b      	ldr	r3, [r7, #4]
 801793e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017942:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017946:	f003 0304 	and.w	r3, r3, #4
 801794a:	2b00      	cmp	r3, #0
 801794c:	d011      	beq.n	8017972 <UART_RxISR_8BIT_FIFOEN+0x12a>
 801794e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017952:	f003 0301 	and.w	r3, r3, #1
 8017956:	2b00      	cmp	r3, #0
 8017958:	d00b      	beq.n	8017972 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 801795a:	687b      	ldr	r3, [r7, #4]
 801795c:	681b      	ldr	r3, [r3, #0]
 801795e:	2204      	movs	r2, #4
 8017960:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017962:	687b      	ldr	r3, [r7, #4]
 8017964:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017968:	f043 0202 	orr.w	r2, r3, #2
 801796c:	687b      	ldr	r3, [r7, #4]
 801796e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017972:	687b      	ldr	r3, [r7, #4]
 8017974:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017978:	2b00      	cmp	r3, #0
 801797a:	d006      	beq.n	801798a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 801797c:	6878      	ldr	r0, [r7, #4]
 801797e:	f7fe fdad 	bl	80164dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017982:	687b      	ldr	r3, [r7, #4]
 8017984:	2200      	movs	r2, #0
 8017986:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 801798a:	687b      	ldr	r3, [r7, #4]
 801798c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017990:	b29b      	uxth	r3, r3
 8017992:	2b00      	cmp	r3, #0
 8017994:	f040 80a2 	bne.w	8017adc <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017998:	687b      	ldr	r3, [r7, #4]
 801799a:	681b      	ldr	r3, [r3, #0]
 801799c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 801799e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80179a0:	e853 3f00 	ldrex	r3, [r3]
 80179a4:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 80179a6:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80179a8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80179ac:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80179b0:	687b      	ldr	r3, [r7, #4]
 80179b2:	681b      	ldr	r3, [r3, #0]
 80179b4:	461a      	mov	r2, r3
 80179b6:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80179ba:	67fb      	str	r3, [r7, #124]	@ 0x7c
 80179bc:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179be:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 80179c0:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 80179c2:	e841 2300 	strex	r3, r2, [r1]
 80179c6:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 80179c8:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80179ca:	2b00      	cmp	r3, #0
 80179cc:	d1e4      	bne.n	8017998 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80179ce:	687b      	ldr	r3, [r7, #4]
 80179d0:	681b      	ldr	r3, [r3, #0]
 80179d2:	3308      	adds	r3, #8
 80179d4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80179d6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80179d8:	e853 3f00 	ldrex	r3, [r3]
 80179dc:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 80179de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80179e0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80179e4:	f023 0301 	bic.w	r3, r3, #1
 80179e8:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80179ec:	687b      	ldr	r3, [r7, #4]
 80179ee:	681b      	ldr	r3, [r3, #0]
 80179f0:	3308      	adds	r3, #8
 80179f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80179f6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80179f8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80179fa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80179fc:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80179fe:	e841 2300 	strex	r3, r2, [r1]
 8017a02:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 8017a04:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017a06:	2b00      	cmp	r3, #0
 8017a08:	d1e1      	bne.n	80179ce <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017a0a:	687b      	ldr	r3, [r7, #4]
 8017a0c:	2220      	movs	r2, #32
 8017a0e:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017a12:	687b      	ldr	r3, [r7, #4]
 8017a14:	2200      	movs	r2, #0
 8017a16:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017a18:	687b      	ldr	r3, [r7, #4]
 8017a1a:	2200      	movs	r2, #0
 8017a1c:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017a1e:	687b      	ldr	r3, [r7, #4]
 8017a20:	681b      	ldr	r3, [r3, #0]
 8017a22:	4a5f      	ldr	r2, [pc, #380]	@ (8017ba0 <UART_RxISR_8BIT_FIFOEN+0x358>)
 8017a24:	4293      	cmp	r3, r2
 8017a26:	d021      	beq.n	8017a6c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017a28:	687b      	ldr	r3, [r7, #4]
 8017a2a:	681b      	ldr	r3, [r3, #0]
 8017a2c:	685b      	ldr	r3, [r3, #4]
 8017a2e:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017a32:	2b00      	cmp	r3, #0
 8017a34:	d01a      	beq.n	8017a6c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	681b      	ldr	r3, [r3, #0]
 8017a3a:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a3c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017a3e:	e853 3f00 	ldrex	r3, [r3]
 8017a42:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 8017a44:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8017a46:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017a4a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017a4e:	687b      	ldr	r3, [r7, #4]
 8017a50:	681b      	ldr	r3, [r3, #0]
 8017a52:	461a      	mov	r2, r3
 8017a54:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017a58:	657b      	str	r3, [r7, #84]	@ 0x54
 8017a5a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017a5c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 8017a5e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8017a60:	e841 2300 	strex	r3, r2, [r1]
 8017a64:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8017a66:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017a68:	2b00      	cmp	r3, #0
 8017a6a:	d1e4      	bne.n	8017a36 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017a70:	2b01      	cmp	r3, #1
 8017a72:	d130      	bne.n	8017ad6 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017a74:	687b      	ldr	r3, [r7, #4]
 8017a76:	2200      	movs	r2, #0
 8017a78:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017a7a:	687b      	ldr	r3, [r7, #4]
 8017a7c:	681b      	ldr	r3, [r3, #0]
 8017a7e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017a80:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017a82:	e853 3f00 	ldrex	r3, [r3]
 8017a86:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8017a88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8017a8a:	f023 0310 	bic.w	r3, r3, #16
 8017a8e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8017a92:	687b      	ldr	r3, [r7, #4]
 8017a94:	681b      	ldr	r3, [r3, #0]
 8017a96:	461a      	mov	r2, r3
 8017a98:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8017a9c:	643b      	str	r3, [r7, #64]	@ 0x40
 8017a9e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017aa0:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8017aa2:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8017aa4:	e841 2300 	strex	r3, r2, [r1]
 8017aa8:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8017aaa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017aac:	2b00      	cmp	r3, #0
 8017aae:	d1e4      	bne.n	8017a7a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017ab0:	687b      	ldr	r3, [r7, #4]
 8017ab2:	681b      	ldr	r3, [r3, #0]
 8017ab4:	69db      	ldr	r3, [r3, #28]
 8017ab6:	f003 0310 	and.w	r3, r3, #16
 8017aba:	2b10      	cmp	r3, #16
 8017abc:	d103      	bne.n	8017ac6 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017abe:	687b      	ldr	r3, [r7, #4]
 8017ac0:	681b      	ldr	r3, [r3, #0]
 8017ac2:	2210      	movs	r2, #16
 8017ac4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017ac6:	687b      	ldr	r3, [r7, #4]
 8017ac8:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017acc:	4619      	mov	r1, r3
 8017ace:	6878      	ldr	r0, [r7, #4]
 8017ad0:	f7fe fd0e 	bl	80164f0 <HAL_UARTEx_RxEventCallback>
 8017ad4:	e002      	b.n	8017adc <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017ad6:	6878      	ldr	r0, [r7, #4]
 8017ad8:	f7f9 fe28 	bl	801172c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017adc:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8017ae0:	2b00      	cmp	r3, #0
 8017ae2:	d006      	beq.n	8017af2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8017ae4:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017ae8:	f003 0320 	and.w	r3, r3, #32
 8017aec:	2b00      	cmp	r3, #0
 8017aee:	f47f aecf 	bne.w	8017890 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017af8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017afc:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 8017b00:	2b00      	cmp	r3, #0
 8017b02:	d049      	beq.n	8017b98 <UART_RxISR_8BIT_FIFOEN+0x350>
 8017b04:	687b      	ldr	r3, [r7, #4]
 8017b06:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017b0a:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 8017b0e:	429a      	cmp	r2, r3
 8017b10:	d242      	bcs.n	8017b98 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017b12:	687b      	ldr	r3, [r7, #4]
 8017b14:	681b      	ldr	r3, [r3, #0]
 8017b16:	3308      	adds	r3, #8
 8017b18:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b1a:	6a3b      	ldr	r3, [r7, #32]
 8017b1c:	e853 3f00 	ldrex	r3, [r3]
 8017b20:	61fb      	str	r3, [r7, #28]
   return(result);
 8017b22:	69fb      	ldr	r3, [r7, #28]
 8017b24:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017b28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	681b      	ldr	r3, [r3, #0]
 8017b30:	3308      	adds	r3, #8
 8017b32:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 8017b36:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8017b38:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b3a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8017b3c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8017b3e:	e841 2300 	strex	r3, r2, [r1]
 8017b42:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8017b44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017b46:	2b00      	cmp	r3, #0
 8017b48:	d1e3      	bne.n	8017b12 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8017b4a:	687b      	ldr	r3, [r7, #4]
 8017b4c:	4a15      	ldr	r2, [pc, #84]	@ (8017ba4 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 8017b4e:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017b50:	687b      	ldr	r3, [r7, #4]
 8017b52:	681b      	ldr	r3, [r3, #0]
 8017b54:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017b56:	68fb      	ldr	r3, [r7, #12]
 8017b58:	e853 3f00 	ldrex	r3, [r3]
 8017b5c:	60bb      	str	r3, [r7, #8]
   return(result);
 8017b5e:	68bb      	ldr	r3, [r7, #8]
 8017b60:	f043 0320 	orr.w	r3, r3, #32
 8017b64:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8017b68:	687b      	ldr	r3, [r7, #4]
 8017b6a:	681b      	ldr	r3, [r3, #0]
 8017b6c:	461a      	mov	r2, r3
 8017b6e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8017b72:	61bb      	str	r3, [r7, #24]
 8017b74:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017b76:	6979      	ldr	r1, [r7, #20]
 8017b78:	69ba      	ldr	r2, [r7, #24]
 8017b7a:	e841 2300 	strex	r3, r2, [r1]
 8017b7e:	613b      	str	r3, [r7, #16]
   return(result);
 8017b80:	693b      	ldr	r3, [r7, #16]
 8017b82:	2b00      	cmp	r3, #0
 8017b84:	d1e4      	bne.n	8017b50 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017b86:	e007      	b.n	8017b98 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	699a      	ldr	r2, [r3, #24]
 8017b8e:	687b      	ldr	r3, [r7, #4]
 8017b90:	681b      	ldr	r3, [r3, #0]
 8017b92:	f042 0208 	orr.w	r2, r2, #8
 8017b96:	619a      	str	r2, [r3, #24]
}
 8017b98:	bf00      	nop
 8017b9a:	37b0      	adds	r7, #176	@ 0xb0
 8017b9c:	46bd      	mov	sp, r7
 8017b9e:	bd80      	pop	{r7, pc}
 8017ba0:	40008000 	.word	0x40008000
 8017ba4:	080174d9 	.word	0x080174d9

08017ba8 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8017ba8:	b580      	push	{r7, lr}
 8017baa:	b0ae      	sub	sp, #184	@ 0xb8
 8017bac:	af00      	add	r7, sp, #0
 8017bae:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8017bb0:	687b      	ldr	r3, [r7, #4]
 8017bb2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8017bb6:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8017bba:	687b      	ldr	r3, [r7, #4]
 8017bbc:	681b      	ldr	r3, [r3, #0]
 8017bbe:	69db      	ldr	r3, [r3, #28]
 8017bc0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8017bc4:	687b      	ldr	r3, [r7, #4]
 8017bc6:	681b      	ldr	r3, [r3, #0]
 8017bc8:	681b      	ldr	r3, [r3, #0]
 8017bca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8017bce:	687b      	ldr	r3, [r7, #4]
 8017bd0:	681b      	ldr	r3, [r3, #0]
 8017bd2:	689b      	ldr	r3, [r3, #8]
 8017bd4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8017bd8:	687b      	ldr	r3, [r7, #4]
 8017bda:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8017bde:	2b22      	cmp	r3, #34	@ 0x22
 8017be0:	f040 8186 	bne.w	8017ef0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8017be4:	687b      	ldr	r3, [r7, #4]
 8017be6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017bea:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017bee:	e129      	b.n	8017e44 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8017bf0:	687b      	ldr	r3, [r7, #4]
 8017bf2:	681b      	ldr	r3, [r3, #0]
 8017bf4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8017bf6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8017bfa:	687b      	ldr	r3, [r7, #4]
 8017bfc:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017bfe:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8017c02:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8017c06:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8017c0a:	4013      	ands	r3, r2
 8017c0c:	b29a      	uxth	r2, r3
 8017c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8017c12:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8017c14:	687b      	ldr	r3, [r7, #4]
 8017c16:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8017c18:	1c9a      	adds	r2, r3, #2
 8017c1a:	687b      	ldr	r3, [r7, #4]
 8017c1c:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8017c1e:	687b      	ldr	r3, [r7, #4]
 8017c20:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017c24:	b29b      	uxth	r3, r3
 8017c26:	3b01      	subs	r3, #1
 8017c28:	b29a      	uxth	r2, r3
 8017c2a:	687b      	ldr	r3, [r7, #4]
 8017c2c:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8017c30:	687b      	ldr	r3, [r7, #4]
 8017c32:	681b      	ldr	r3, [r3, #0]
 8017c34:	69db      	ldr	r3, [r3, #28]
 8017c36:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8017c3a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017c3e:	f003 0307 	and.w	r3, r3, #7
 8017c42:	2b00      	cmp	r3, #0
 8017c44:	d053      	beq.n	8017cee <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8017c46:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017c4a:	f003 0301 	and.w	r3, r3, #1
 8017c4e:	2b00      	cmp	r3, #0
 8017c50:	d011      	beq.n	8017c76 <UART_RxISR_16BIT_FIFOEN+0xce>
 8017c52:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8017c56:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8017c5a:	2b00      	cmp	r3, #0
 8017c5c:	d00b      	beq.n	8017c76 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8017c5e:	687b      	ldr	r3, [r7, #4]
 8017c60:	681b      	ldr	r3, [r3, #0]
 8017c62:	2201      	movs	r2, #1
 8017c64:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8017c66:	687b      	ldr	r3, [r7, #4]
 8017c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017c6c:	f043 0201 	orr.w	r2, r3, #1
 8017c70:	687b      	ldr	r3, [r7, #4]
 8017c72:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017c76:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017c7a:	f003 0302 	and.w	r3, r3, #2
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	d011      	beq.n	8017ca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8017c82:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017c86:	f003 0301 	and.w	r3, r3, #1
 8017c8a:	2b00      	cmp	r3, #0
 8017c8c:	d00b      	beq.n	8017ca6 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8017c8e:	687b      	ldr	r3, [r7, #4]
 8017c90:	681b      	ldr	r3, [r3, #0]
 8017c92:	2202      	movs	r2, #2
 8017c94:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8017c96:	687b      	ldr	r3, [r7, #4]
 8017c98:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017c9c:	f043 0204 	orr.w	r2, r3, #4
 8017ca0:	687b      	ldr	r3, [r7, #4]
 8017ca2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8017ca6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017caa:	f003 0304 	and.w	r3, r3, #4
 8017cae:	2b00      	cmp	r3, #0
 8017cb0:	d011      	beq.n	8017cd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8017cb2:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8017cb6:	f003 0301 	and.w	r3, r3, #1
 8017cba:	2b00      	cmp	r3, #0
 8017cbc:	d00b      	beq.n	8017cd6 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8017cbe:	687b      	ldr	r3, [r7, #4]
 8017cc0:	681b      	ldr	r3, [r3, #0]
 8017cc2:	2204      	movs	r2, #4
 8017cc4:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8017cc6:	687b      	ldr	r3, [r7, #4]
 8017cc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017ccc:	f043 0202 	orr.w	r2, r3, #2
 8017cd0:	687b      	ldr	r3, [r7, #4]
 8017cd2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8017cd6:	687b      	ldr	r3, [r7, #4]
 8017cd8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d006      	beq.n	8017cee <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8017ce0:	6878      	ldr	r0, [r7, #4]
 8017ce2:	f7fe fbfb 	bl	80164dc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	2200      	movs	r2, #0
 8017cea:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8017cee:	687b      	ldr	r3, [r7, #4]
 8017cf0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017cf4:	b29b      	uxth	r3, r3
 8017cf6:	2b00      	cmp	r3, #0
 8017cf8:	f040 80a4 	bne.w	8017e44 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8017cfc:	687b      	ldr	r3, [r7, #4]
 8017cfe:	681b      	ldr	r3, [r3, #0]
 8017d00:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d02:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8017d04:	e853 3f00 	ldrex	r3, [r3]
 8017d08:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8017d0a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8017d0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8017d10:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	681b      	ldr	r3, [r3, #0]
 8017d18:	461a      	mov	r2, r3
 8017d1a:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8017d1e:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8017d22:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d24:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8017d26:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8017d2a:	e841 2300 	strex	r3, r2, [r1]
 8017d2e:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8017d30:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d1e2      	bne.n	8017cfc <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8017d36:	687b      	ldr	r3, [r7, #4]
 8017d38:	681b      	ldr	r3, [r3, #0]
 8017d3a:	3308      	adds	r3, #8
 8017d3c:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017d3e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8017d40:	e853 3f00 	ldrex	r3, [r3]
 8017d44:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8017d46:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8017d48:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017d4c:	f023 0301 	bic.w	r3, r3, #1
 8017d50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	681b      	ldr	r3, [r3, #0]
 8017d58:	3308      	adds	r3, #8
 8017d5a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8017d5e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8017d60:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017d62:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8017d64:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8017d66:	e841 2300 	strex	r3, r2, [r1]
 8017d6a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8017d6c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8017d6e:	2b00      	cmp	r3, #0
 8017d70:	d1e1      	bne.n	8017d36 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	2220      	movs	r2, #32
 8017d76:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8017d7a:	687b      	ldr	r3, [r7, #4]
 8017d7c:	2200      	movs	r2, #0
 8017d7e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8017d80:	687b      	ldr	r3, [r7, #4]
 8017d82:	2200      	movs	r2, #0
 8017d84:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8017d86:	687b      	ldr	r3, [r7, #4]
 8017d88:	681b      	ldr	r3, [r3, #0]
 8017d8a:	4a5f      	ldr	r2, [pc, #380]	@ (8017f08 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8017d8c:	4293      	cmp	r3, r2
 8017d8e:	d021      	beq.n	8017dd4 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8017d90:	687b      	ldr	r3, [r7, #4]
 8017d92:	681b      	ldr	r3, [r3, #0]
 8017d94:	685b      	ldr	r3, [r3, #4]
 8017d96:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d01a      	beq.n	8017dd4 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	681b      	ldr	r3, [r3, #0]
 8017da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017da4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8017da6:	e853 3f00 	ldrex	r3, [r3]
 8017daa:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8017dac:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8017dae:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8017db2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8017db6:	687b      	ldr	r3, [r7, #4]
 8017db8:	681b      	ldr	r3, [r3, #0]
 8017dba:	461a      	mov	r2, r3
 8017dbc:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8017dc0:	65bb      	str	r3, [r7, #88]	@ 0x58
 8017dc2:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017dc4:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8017dc6:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8017dc8:	e841 2300 	strex	r3, r2, [r1]
 8017dcc:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8017dce:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8017dd0:	2b00      	cmp	r3, #0
 8017dd2:	d1e4      	bne.n	8017d9e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8017dd4:	687b      	ldr	r3, [r7, #4]
 8017dd6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8017dd8:	2b01      	cmp	r3, #1
 8017dda:	d130      	bne.n	8017e3e <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8017ddc:	687b      	ldr	r3, [r7, #4]
 8017dde:	2200      	movs	r2, #0
 8017de0:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8017de2:	687b      	ldr	r3, [r7, #4]
 8017de4:	681b      	ldr	r3, [r3, #0]
 8017de6:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017de8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8017dea:	e853 3f00 	ldrex	r3, [r3]
 8017dee:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8017df0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8017df2:	f023 0310 	bic.w	r3, r3, #16
 8017df6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8017dfa:	687b      	ldr	r3, [r7, #4]
 8017dfc:	681b      	ldr	r3, [r3, #0]
 8017dfe:	461a      	mov	r2, r3
 8017e00:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8017e04:	647b      	str	r3, [r7, #68]	@ 0x44
 8017e06:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017e08:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8017e0a:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8017e0c:	e841 2300 	strex	r3, r2, [r1]
 8017e10:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8017e12:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8017e14:	2b00      	cmp	r3, #0
 8017e16:	d1e4      	bne.n	8017de2 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8017e18:	687b      	ldr	r3, [r7, #4]
 8017e1a:	681b      	ldr	r3, [r3, #0]
 8017e1c:	69db      	ldr	r3, [r3, #28]
 8017e1e:	f003 0310 	and.w	r3, r3, #16
 8017e22:	2b10      	cmp	r3, #16
 8017e24:	d103      	bne.n	8017e2e <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8017e26:	687b      	ldr	r3, [r7, #4]
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	2210      	movs	r2, #16
 8017e2c:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8017e34:	4619      	mov	r1, r3
 8017e36:	6878      	ldr	r0, [r7, #4]
 8017e38:	f7fe fb5a 	bl	80164f0 <HAL_UARTEx_RxEventCallback>
 8017e3c:	e002      	b.n	8017e44 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8017e3e:	6878      	ldr	r0, [r7, #4]
 8017e40:	f7f9 fc74 	bl	801172c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8017e44:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8017e48:	2b00      	cmp	r3, #0
 8017e4a:	d006      	beq.n	8017e5a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8017e4c:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8017e50:	f003 0320 	and.w	r3, r3, #32
 8017e54:	2b00      	cmp	r3, #0
 8017e56:	f47f aecb 	bne.w	8017bf0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8017e60:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8017e64:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8017e68:	2b00      	cmp	r3, #0
 8017e6a:	d049      	beq.n	8017f00 <UART_RxISR_16BIT_FIFOEN+0x358>
 8017e6c:	687b      	ldr	r3, [r7, #4]
 8017e6e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8017e72:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8017e76:	429a      	cmp	r2, r3
 8017e78:	d242      	bcs.n	8017f00 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8017e7a:	687b      	ldr	r3, [r7, #4]
 8017e7c:	681b      	ldr	r3, [r3, #0]
 8017e7e:	3308      	adds	r3, #8
 8017e80:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017e82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017e84:	e853 3f00 	ldrex	r3, [r3]
 8017e88:	623b      	str	r3, [r7, #32]
   return(result);
 8017e8a:	6a3b      	ldr	r3, [r7, #32]
 8017e8c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8017e90:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8017e94:	687b      	ldr	r3, [r7, #4]
 8017e96:	681b      	ldr	r3, [r3, #0]
 8017e98:	3308      	adds	r3, #8
 8017e9a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8017e9e:	633a      	str	r2, [r7, #48]	@ 0x30
 8017ea0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ea2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8017ea4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8017ea6:	e841 2300 	strex	r3, r2, [r1]
 8017eaa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8017eac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8017eae:	2b00      	cmp	r3, #0
 8017eb0:	d1e3      	bne.n	8017e7a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8017eb2:	687b      	ldr	r3, [r7, #4]
 8017eb4:	4a15      	ldr	r2, [pc, #84]	@ (8017f0c <UART_RxISR_16BIT_FIFOEN+0x364>)
 8017eb6:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8017eb8:	687b      	ldr	r3, [r7, #4]
 8017eba:	681b      	ldr	r3, [r3, #0]
 8017ebc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8017ebe:	693b      	ldr	r3, [r7, #16]
 8017ec0:	e853 3f00 	ldrex	r3, [r3]
 8017ec4:	60fb      	str	r3, [r7, #12]
   return(result);
 8017ec6:	68fb      	ldr	r3, [r7, #12]
 8017ec8:	f043 0320 	orr.w	r3, r3, #32
 8017ecc:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	681b      	ldr	r3, [r3, #0]
 8017ed4:	461a      	mov	r2, r3
 8017ed6:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8017eda:	61fb      	str	r3, [r7, #28]
 8017edc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8017ede:	69b9      	ldr	r1, [r7, #24]
 8017ee0:	69fa      	ldr	r2, [r7, #28]
 8017ee2:	e841 2300 	strex	r3, r2, [r1]
 8017ee6:	617b      	str	r3, [r7, #20]
   return(result);
 8017ee8:	697b      	ldr	r3, [r7, #20]
 8017eea:	2b00      	cmp	r3, #0
 8017eec:	d1e4      	bne.n	8017eb8 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8017eee:	e007      	b.n	8017f00 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	681b      	ldr	r3, [r3, #0]
 8017ef4:	699a      	ldr	r2, [r3, #24]
 8017ef6:	687b      	ldr	r3, [r7, #4]
 8017ef8:	681b      	ldr	r3, [r3, #0]
 8017efa:	f042 0208 	orr.w	r2, r2, #8
 8017efe:	619a      	str	r2, [r3, #24]
}
 8017f00:	bf00      	nop
 8017f02:	37b8      	adds	r7, #184	@ 0xb8
 8017f04:	46bd      	mov	sp, r7
 8017f06:	bd80      	pop	{r7, pc}
 8017f08:	40008000 	.word	0x40008000
 8017f0c:	08017691 	.word	0x08017691

08017f10 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8017f10:	b480      	push	{r7}
 8017f12:	b083      	sub	sp, #12
 8017f14:	af00      	add	r7, sp, #0
 8017f16:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8017f18:	bf00      	nop
 8017f1a:	370c      	adds	r7, #12
 8017f1c:	46bd      	mov	sp, r7
 8017f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f22:	4770      	bx	lr

08017f24 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8017f24:	b480      	push	{r7}
 8017f26:	b083      	sub	sp, #12
 8017f28:	af00      	add	r7, sp, #0
 8017f2a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8017f2c:	bf00      	nop
 8017f2e:	370c      	adds	r7, #12
 8017f30:	46bd      	mov	sp, r7
 8017f32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f36:	4770      	bx	lr

08017f38 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8017f38:	b480      	push	{r7}
 8017f3a:	b083      	sub	sp, #12
 8017f3c:	af00      	add	r7, sp, #0
 8017f3e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8017f40:	bf00      	nop
 8017f42:	370c      	adds	r7, #12
 8017f44:	46bd      	mov	sp, r7
 8017f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f4a:	4770      	bx	lr

08017f4c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8017f4c:	b580      	push	{r7, lr}
 8017f4e:	b084      	sub	sp, #16
 8017f50:	af00      	add	r7, sp, #0
 8017f52:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8017f54:	687b      	ldr	r3, [r7, #4]
 8017f56:	681b      	ldr	r3, [r3, #0]
 8017f58:	4a27      	ldr	r2, [pc, #156]	@ (8017ff8 <HAL_UARTEx_DisableFifoMode+0xac>)
 8017f5a:	4293      	cmp	r3, r2
 8017f5c:	d018      	beq.n	8017f90 <HAL_UARTEx_DisableFifoMode+0x44>
 8017f5e:	687b      	ldr	r3, [r7, #4]
 8017f60:	681b      	ldr	r3, [r3, #0]
 8017f62:	4a26      	ldr	r2, [pc, #152]	@ (8017ffc <HAL_UARTEx_DisableFifoMode+0xb0>)
 8017f64:	4293      	cmp	r3, r2
 8017f66:	d013      	beq.n	8017f90 <HAL_UARTEx_DisableFifoMode+0x44>
 8017f68:	687b      	ldr	r3, [r7, #4]
 8017f6a:	681b      	ldr	r3, [r3, #0]
 8017f6c:	4a24      	ldr	r2, [pc, #144]	@ (8018000 <HAL_UARTEx_DisableFifoMode+0xb4>)
 8017f6e:	4293      	cmp	r3, r2
 8017f70:	d00e      	beq.n	8017f90 <HAL_UARTEx_DisableFifoMode+0x44>
 8017f72:	687b      	ldr	r3, [r7, #4]
 8017f74:	681b      	ldr	r3, [r3, #0]
 8017f76:	4a23      	ldr	r2, [pc, #140]	@ (8018004 <HAL_UARTEx_DisableFifoMode+0xb8>)
 8017f78:	4293      	cmp	r3, r2
 8017f7a:	d009      	beq.n	8017f90 <HAL_UARTEx_DisableFifoMode+0x44>
 8017f7c:	687b      	ldr	r3, [r7, #4]
 8017f7e:	681b      	ldr	r3, [r3, #0]
 8017f80:	4a21      	ldr	r2, [pc, #132]	@ (8018008 <HAL_UARTEx_DisableFifoMode+0xbc>)
 8017f82:	4293      	cmp	r3, r2
 8017f84:	d004      	beq.n	8017f90 <HAL_UARTEx_DisableFifoMode+0x44>
 8017f86:	f240 2136 	movw	r1, #566	@ 0x236
 8017f8a:	4820      	ldr	r0, [pc, #128]	@ (801800c <HAL_UARTEx_DisableFifoMode+0xc0>)
 8017f8c:	f7fa f8b4 	bl	80120f8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8017f90:	687b      	ldr	r3, [r7, #4]
 8017f92:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8017f96:	2b01      	cmp	r3, #1
 8017f98:	d101      	bne.n	8017f9e <HAL_UARTEx_DisableFifoMode+0x52>
 8017f9a:	2302      	movs	r3, #2
 8017f9c:	e027      	b.n	8017fee <HAL_UARTEx_DisableFifoMode+0xa2>
 8017f9e:	687b      	ldr	r3, [r7, #4]
 8017fa0:	2201      	movs	r2, #1
 8017fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8017fa6:	687b      	ldr	r3, [r7, #4]
 8017fa8:	2224      	movs	r2, #36	@ 0x24
 8017faa:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	681b      	ldr	r3, [r3, #0]
 8017fb2:	681b      	ldr	r3, [r3, #0]
 8017fb4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8017fb6:	687b      	ldr	r3, [r7, #4]
 8017fb8:	681b      	ldr	r3, [r3, #0]
 8017fba:	681a      	ldr	r2, [r3, #0]
 8017fbc:	687b      	ldr	r3, [r7, #4]
 8017fbe:	681b      	ldr	r3, [r3, #0]
 8017fc0:	f022 0201 	bic.w	r2, r2, #1
 8017fc4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8017fc6:	68fb      	ldr	r3, [r7, #12]
 8017fc8:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8017fcc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8017fce:	687b      	ldr	r3, [r7, #4]
 8017fd0:	2200      	movs	r2, #0
 8017fd2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8017fd4:	687b      	ldr	r3, [r7, #4]
 8017fd6:	681b      	ldr	r3, [r3, #0]
 8017fd8:	68fa      	ldr	r2, [r7, #12]
 8017fda:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8017fdc:	687b      	ldr	r3, [r7, #4]
 8017fde:	2220      	movs	r2, #32
 8017fe0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8017fe4:	687b      	ldr	r3, [r7, #4]
 8017fe6:	2200      	movs	r2, #0
 8017fe8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8017fec:	2300      	movs	r3, #0
}
 8017fee:	4618      	mov	r0, r3
 8017ff0:	3710      	adds	r7, #16
 8017ff2:	46bd      	mov	sp, r7
 8017ff4:	bd80      	pop	{r7, pc}
 8017ff6:	bf00      	nop
 8017ff8:	40013800 	.word	0x40013800
 8017ffc:	40004400 	.word	0x40004400
 8018000:	40004800 	.word	0x40004800
 8018004:	40004c00 	.word	0x40004c00
 8018008:	40008000 	.word	0x40008000
 801800c:	0801adfc 	.word	0x0801adfc

08018010 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018010:	b580      	push	{r7, lr}
 8018012:	b084      	sub	sp, #16
 8018014:	af00      	add	r7, sp, #0
 8018016:	6078      	str	r0, [r7, #4]
 8018018:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 801801a:	687b      	ldr	r3, [r7, #4]
 801801c:	681b      	ldr	r3, [r3, #0]
 801801e:	4a38      	ldr	r2, [pc, #224]	@ (8018100 <HAL_UARTEx_SetTxFifoThreshold+0xf0>)
 8018020:	4293      	cmp	r3, r2
 8018022:	d018      	beq.n	8018056 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8018024:	687b      	ldr	r3, [r7, #4]
 8018026:	681b      	ldr	r3, [r3, #0]
 8018028:	4a36      	ldr	r2, [pc, #216]	@ (8018104 <HAL_UARTEx_SetTxFifoThreshold+0xf4>)
 801802a:	4293      	cmp	r3, r2
 801802c:	d013      	beq.n	8018056 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801802e:	687b      	ldr	r3, [r7, #4]
 8018030:	681b      	ldr	r3, [r3, #0]
 8018032:	4a35      	ldr	r2, [pc, #212]	@ (8018108 <HAL_UARTEx_SetTxFifoThreshold+0xf8>)
 8018034:	4293      	cmp	r3, r2
 8018036:	d00e      	beq.n	8018056 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8018038:	687b      	ldr	r3, [r7, #4]
 801803a:	681b      	ldr	r3, [r3, #0]
 801803c:	4a33      	ldr	r2, [pc, #204]	@ (801810c <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 801803e:	4293      	cmp	r3, r2
 8018040:	d009      	beq.n	8018056 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8018042:	687b      	ldr	r3, [r7, #4]
 8018044:	681b      	ldr	r3, [r3, #0]
 8018046:	4a32      	ldr	r2, [pc, #200]	@ (8018110 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 8018048:	4293      	cmp	r3, r2
 801804a:	d004      	beq.n	8018056 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 801804c:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8018050:	4830      	ldr	r0, [pc, #192]	@ (8018114 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8018052:	f7fa f851 	bl	80120f8 <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8018056:	683b      	ldr	r3, [r7, #0]
 8018058:	2b00      	cmp	r3, #0
 801805a:	d018      	beq.n	801808e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801805c:	683b      	ldr	r3, [r7, #0]
 801805e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8018062:	d014      	beq.n	801808e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8018064:	683b      	ldr	r3, [r7, #0]
 8018066:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 801806a:	d010      	beq.n	801808e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801806c:	683b      	ldr	r3, [r7, #0]
 801806e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8018072:	d00c      	beq.n	801808e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8018074:	683b      	ldr	r3, [r7, #0]
 8018076:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 801807a:	d008      	beq.n	801808e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 801807c:	683b      	ldr	r3, [r7, #0]
 801807e:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8018082:	d004      	beq.n	801808e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8018084:	f240 2165 	movw	r1, #613	@ 0x265
 8018088:	4822      	ldr	r0, [pc, #136]	@ (8018114 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 801808a:	f7fa f835 	bl	80120f8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 801808e:	687b      	ldr	r3, [r7, #4]
 8018090:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8018094:	2b01      	cmp	r3, #1
 8018096:	d101      	bne.n	801809c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8018098:	2302      	movs	r3, #2
 801809a:	e02d      	b.n	80180f8 <HAL_UARTEx_SetTxFifoThreshold+0xe8>
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	2201      	movs	r2, #1
 80180a0:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80180a4:	687b      	ldr	r3, [r7, #4]
 80180a6:	2224      	movs	r2, #36	@ 0x24
 80180a8:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80180ac:	687b      	ldr	r3, [r7, #4]
 80180ae:	681b      	ldr	r3, [r3, #0]
 80180b0:	681b      	ldr	r3, [r3, #0]
 80180b2:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80180b4:	687b      	ldr	r3, [r7, #4]
 80180b6:	681b      	ldr	r3, [r3, #0]
 80180b8:	681a      	ldr	r2, [r3, #0]
 80180ba:	687b      	ldr	r3, [r7, #4]
 80180bc:	681b      	ldr	r3, [r3, #0]
 80180be:	f022 0201 	bic.w	r2, r2, #1
 80180c2:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80180c4:	687b      	ldr	r3, [r7, #4]
 80180c6:	681b      	ldr	r3, [r3, #0]
 80180c8:	689b      	ldr	r3, [r3, #8]
 80180ca:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 80180ce:	687b      	ldr	r3, [r7, #4]
 80180d0:	681b      	ldr	r3, [r3, #0]
 80180d2:	683a      	ldr	r2, [r7, #0]
 80180d4:	430a      	orrs	r2, r1
 80180d6:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80180d8:	6878      	ldr	r0, [r7, #4]
 80180da:	f000 f8a1 	bl	8018220 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80180de:	687b      	ldr	r3, [r7, #4]
 80180e0:	681b      	ldr	r3, [r3, #0]
 80180e2:	68fa      	ldr	r2, [r7, #12]
 80180e4:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80180e6:	687b      	ldr	r3, [r7, #4]
 80180e8:	2220      	movs	r2, #32
 80180ea:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80180ee:	687b      	ldr	r3, [r7, #4]
 80180f0:	2200      	movs	r2, #0
 80180f2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80180f6:	2300      	movs	r3, #0
}
 80180f8:	4618      	mov	r0, r3
 80180fa:	3710      	adds	r7, #16
 80180fc:	46bd      	mov	sp, r7
 80180fe:	bd80      	pop	{r7, pc}
 8018100:	40013800 	.word	0x40013800
 8018104:	40004400 	.word	0x40004400
 8018108:	40004800 	.word	0x40004800
 801810c:	40004c00 	.word	0x40004c00
 8018110:	40008000 	.word	0x40008000
 8018114:	0801adfc 	.word	0x0801adfc

08018118 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8018118:	b580      	push	{r7, lr}
 801811a:	b084      	sub	sp, #16
 801811c:	af00      	add	r7, sp, #0
 801811e:	6078      	str	r0, [r7, #4]
 8018120:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8018122:	687b      	ldr	r3, [r7, #4]
 8018124:	681b      	ldr	r3, [r3, #0]
 8018126:	4a38      	ldr	r2, [pc, #224]	@ (8018208 <HAL_UARTEx_SetRxFifoThreshold+0xf0>)
 8018128:	4293      	cmp	r3, r2
 801812a:	d018      	beq.n	801815e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 801812c:	687b      	ldr	r3, [r7, #4]
 801812e:	681b      	ldr	r3, [r3, #0]
 8018130:	4a36      	ldr	r2, [pc, #216]	@ (801820c <HAL_UARTEx_SetRxFifoThreshold+0xf4>)
 8018132:	4293      	cmp	r3, r2
 8018134:	d013      	beq.n	801815e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8018136:	687b      	ldr	r3, [r7, #4]
 8018138:	681b      	ldr	r3, [r3, #0]
 801813a:	4a35      	ldr	r2, [pc, #212]	@ (8018210 <HAL_UARTEx_SetRxFifoThreshold+0xf8>)
 801813c:	4293      	cmp	r3, r2
 801813e:	d00e      	beq.n	801815e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8018140:	687b      	ldr	r3, [r7, #4]
 8018142:	681b      	ldr	r3, [r3, #0]
 8018144:	4a33      	ldr	r2, [pc, #204]	@ (8018214 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8018146:	4293      	cmp	r3, r2
 8018148:	d009      	beq.n	801815e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 801814a:	687b      	ldr	r3, [r7, #4]
 801814c:	681b      	ldr	r3, [r3, #0]
 801814e:	4a32      	ldr	r2, [pc, #200]	@ (8018218 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8018150:	4293      	cmp	r3, r2
 8018152:	d004      	beq.n	801815e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8018154:	f240 2195 	movw	r1, #661	@ 0x295
 8018158:	4830      	ldr	r0, [pc, #192]	@ (801821c <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 801815a:	f7f9 ffcd 	bl	80120f8 <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 801815e:	683b      	ldr	r3, [r7, #0]
 8018160:	2b00      	cmp	r3, #0
 8018162:	d018      	beq.n	8018196 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8018164:	683b      	ldr	r3, [r7, #0]
 8018166:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 801816a:	d014      	beq.n	8018196 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801816c:	683b      	ldr	r3, [r7, #0]
 801816e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8018172:	d010      	beq.n	8018196 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8018174:	683b      	ldr	r3, [r7, #0]
 8018176:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 801817a:	d00c      	beq.n	8018196 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801817c:	683b      	ldr	r3, [r7, #0]
 801817e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8018182:	d008      	beq.n	8018196 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8018184:	683b      	ldr	r3, [r7, #0]
 8018186:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 801818a:	d004      	beq.n	8018196 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 801818c:	f240 2196 	movw	r1, #662	@ 0x296
 8018190:	4822      	ldr	r0, [pc, #136]	@ (801821c <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8018192:	f7f9 ffb1 	bl	80120f8 <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8018196:	687b      	ldr	r3, [r7, #4]
 8018198:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 801819c:	2b01      	cmp	r3, #1
 801819e:	d101      	bne.n	80181a4 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 80181a0:	2302      	movs	r3, #2
 80181a2:	e02d      	b.n	8018200 <HAL_UARTEx_SetRxFifoThreshold+0xe8>
 80181a4:	687b      	ldr	r3, [r7, #4]
 80181a6:	2201      	movs	r2, #1
 80181a8:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 80181ac:	687b      	ldr	r3, [r7, #4]
 80181ae:	2224      	movs	r2, #36	@ 0x24
 80181b0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80181b4:	687b      	ldr	r3, [r7, #4]
 80181b6:	681b      	ldr	r3, [r3, #0]
 80181b8:	681b      	ldr	r3, [r3, #0]
 80181ba:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80181bc:	687b      	ldr	r3, [r7, #4]
 80181be:	681b      	ldr	r3, [r3, #0]
 80181c0:	681a      	ldr	r2, [r3, #0]
 80181c2:	687b      	ldr	r3, [r7, #4]
 80181c4:	681b      	ldr	r3, [r3, #0]
 80181c6:	f022 0201 	bic.w	r2, r2, #1
 80181ca:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80181cc:	687b      	ldr	r3, [r7, #4]
 80181ce:	681b      	ldr	r3, [r3, #0]
 80181d0:	689b      	ldr	r3, [r3, #8]
 80181d2:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 80181d6:	687b      	ldr	r3, [r7, #4]
 80181d8:	681b      	ldr	r3, [r3, #0]
 80181da:	683a      	ldr	r2, [r7, #0]
 80181dc:	430a      	orrs	r2, r1
 80181de:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80181e0:	6878      	ldr	r0, [r7, #4]
 80181e2:	f000 f81d 	bl	8018220 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80181e6:	687b      	ldr	r3, [r7, #4]
 80181e8:	681b      	ldr	r3, [r3, #0]
 80181ea:	68fa      	ldr	r2, [r7, #12]
 80181ec:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80181ee:	687b      	ldr	r3, [r7, #4]
 80181f0:	2220      	movs	r2, #32
 80181f2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80181f6:	687b      	ldr	r3, [r7, #4]
 80181f8:	2200      	movs	r2, #0
 80181fa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80181fe:	2300      	movs	r3, #0
}
 8018200:	4618      	mov	r0, r3
 8018202:	3710      	adds	r7, #16
 8018204:	46bd      	mov	sp, r7
 8018206:	bd80      	pop	{r7, pc}
 8018208:	40013800 	.word	0x40013800
 801820c:	40004400 	.word	0x40004400
 8018210:	40004800 	.word	0x40004800
 8018214:	40004c00 	.word	0x40004c00
 8018218:	40008000 	.word	0x40008000
 801821c:	0801adfc 	.word	0x0801adfc

08018220 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8018220:	b480      	push	{r7}
 8018222:	b085      	sub	sp, #20
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8018228:	687b      	ldr	r3, [r7, #4]
 801822a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 801822c:	2b00      	cmp	r3, #0
 801822e:	d108      	bne.n	8018242 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8018230:	687b      	ldr	r3, [r7, #4]
 8018232:	2201      	movs	r2, #1
 8018234:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 8018238:	687b      	ldr	r3, [r7, #4]
 801823a:	2201      	movs	r2, #1
 801823c:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8018240:	e031      	b.n	80182a6 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8018242:	2308      	movs	r3, #8
 8018244:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8018246:	2308      	movs	r3, #8
 8018248:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 801824a:	687b      	ldr	r3, [r7, #4]
 801824c:	681b      	ldr	r3, [r3, #0]
 801824e:	689b      	ldr	r3, [r3, #8]
 8018250:	0e5b      	lsrs	r3, r3, #25
 8018252:	b2db      	uxtb	r3, r3
 8018254:	f003 0307 	and.w	r3, r3, #7
 8018258:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 801825a:	687b      	ldr	r3, [r7, #4]
 801825c:	681b      	ldr	r3, [r3, #0]
 801825e:	689b      	ldr	r3, [r3, #8]
 8018260:	0f5b      	lsrs	r3, r3, #29
 8018262:	b2db      	uxtb	r3, r3
 8018264:	f003 0307 	and.w	r3, r3, #7
 8018268:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801826a:	7bbb      	ldrb	r3, [r7, #14]
 801826c:	7b3a      	ldrb	r2, [r7, #12]
 801826e:	4911      	ldr	r1, [pc, #68]	@ (80182b4 <UARTEx_SetNbDataToProcess+0x94>)
 8018270:	5c8a      	ldrb	r2, [r1, r2]
 8018272:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8018276:	7b3a      	ldrb	r2, [r7, #12]
 8018278:	490f      	ldr	r1, [pc, #60]	@ (80182b8 <UARTEx_SetNbDataToProcess+0x98>)
 801827a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 801827c:	fb93 f3f2 	sdiv	r3, r3, r2
 8018280:	b29a      	uxth	r2, r3
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8018288:	7bfb      	ldrb	r3, [r7, #15]
 801828a:	7b7a      	ldrb	r2, [r7, #13]
 801828c:	4909      	ldr	r1, [pc, #36]	@ (80182b4 <UARTEx_SetNbDataToProcess+0x94>)
 801828e:	5c8a      	ldrb	r2, [r1, r2]
 8018290:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8018294:	7b7a      	ldrb	r2, [r7, #13]
 8018296:	4908      	ldr	r1, [pc, #32]	@ (80182b8 <UARTEx_SetNbDataToProcess+0x98>)
 8018298:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 801829a:	fb93 f3f2 	sdiv	r3, r3, r2
 801829e:	b29a      	uxth	r2, r3
 80182a0:	687b      	ldr	r3, [r7, #4]
 80182a2:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 80182a6:	bf00      	nop
 80182a8:	3714      	adds	r7, #20
 80182aa:	46bd      	mov	sp, r7
 80182ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182b0:	4770      	bx	lr
 80182b2:	bf00      	nop
 80182b4:	0801b224 	.word	0x0801b224
 80182b8:	0801b22c 	.word	0x0801b22c

080182bc <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 80182bc:	b480      	push	{r7}
 80182be:	b085      	sub	sp, #20
 80182c0:	af00      	add	r7, sp, #0
 80182c2:	4603      	mov	r3, r0
 80182c4:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 80182c6:	2300      	movs	r3, #0
 80182c8:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 80182ca:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80182ce:	2b84      	cmp	r3, #132	@ 0x84
 80182d0:	d005      	beq.n	80182de <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 80182d2:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80182d6:	68fb      	ldr	r3, [r7, #12]
 80182d8:	4413      	add	r3, r2
 80182da:	3303      	adds	r3, #3
 80182dc:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 80182de:	68fb      	ldr	r3, [r7, #12]
}
 80182e0:	4618      	mov	r0, r3
 80182e2:	3714      	adds	r7, #20
 80182e4:	46bd      	mov	sp, r7
 80182e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80182ea:	4770      	bx	lr

080182ec <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 80182ec:	b580      	push	{r7, lr}
 80182ee:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80182f0:	f000 fa5c 	bl	80187ac <vTaskStartScheduler>
  
  return osOK;
 80182f4:	2300      	movs	r3, #0
}
 80182f6:	4618      	mov	r0, r3
 80182f8:	bd80      	pop	{r7, pc}

080182fa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80182fa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80182fc:	b087      	sub	sp, #28
 80182fe:	af02      	add	r7, sp, #8
 8018300:	6078      	str	r0, [r7, #4]
 8018302:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018304:	687b      	ldr	r3, [r7, #4]
 8018306:	685c      	ldr	r4, [r3, #4]
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 801830c:	687b      	ldr	r3, [r7, #4]
 801830e:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018310:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 8018312:	687b      	ldr	r3, [r7, #4]
 8018314:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 8018318:	4618      	mov	r0, r3
 801831a:	f7ff ffcf 	bl	80182bc <makeFreeRtosPriority>
 801831e:	4602      	mov	r2, r0
 8018320:	f107 030c 	add.w	r3, r7, #12
 8018324:	9301      	str	r3, [sp, #4]
 8018326:	9200      	str	r2, [sp, #0]
 8018328:	683b      	ldr	r3, [r7, #0]
 801832a:	4632      	mov	r2, r6
 801832c:	4629      	mov	r1, r5
 801832e:	4620      	mov	r0, r4
 8018330:	f000 f8d2 	bl	80184d8 <xTaskCreate>
 8018334:	4603      	mov	r3, r0
 8018336:	2b01      	cmp	r3, #1
 8018338:	d001      	beq.n	801833e <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 801833a:	2300      	movs	r3, #0
 801833c:	e000      	b.n	8018340 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 801833e:	68fb      	ldr	r3, [r7, #12]
}
 8018340:	4618      	mov	r0, r3
 8018342:	3714      	adds	r7, #20
 8018344:	46bd      	mov	sp, r7
 8018346:	bdf0      	pop	{r4, r5, r6, r7, pc}

08018348 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 8018348:	b580      	push	{r7, lr}
 801834a:	b084      	sub	sp, #16
 801834c:	af00      	add	r7, sp, #0
 801834e:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	2b00      	cmp	r3, #0
 8018358:	d001      	beq.n	801835e <osDelay+0x16>
 801835a:	68fb      	ldr	r3, [r7, #12]
 801835c:	e000      	b.n	8018360 <osDelay+0x18>
 801835e:	2301      	movs	r3, #1
 8018360:	4618      	mov	r0, r3
 8018362:	f000 f9ed 	bl	8018740 <vTaskDelay>
  
  return osOK;
 8018366:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8018368:	4618      	mov	r0, r3
 801836a:	3710      	adds	r7, #16
 801836c:	46bd      	mov	sp, r7
 801836e:	bd80      	pop	{r7, pc}

08018370 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8018370:	b480      	push	{r7}
 8018372:	b083      	sub	sp, #12
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018378:	687b      	ldr	r3, [r7, #4]
 801837a:	f103 0208 	add.w	r2, r3, #8
 801837e:	687b      	ldr	r3, [r7, #4]
 8018380:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8018382:	687b      	ldr	r3, [r7, #4]
 8018384:	f04f 32ff 	mov.w	r2, #4294967295
 8018388:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 801838a:	687b      	ldr	r3, [r7, #4]
 801838c:	f103 0208 	add.w	r2, r3, #8
 8018390:	687b      	ldr	r3, [r7, #4]
 8018392:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8018394:	687b      	ldr	r3, [r7, #4]
 8018396:	f103 0208 	add.w	r2, r3, #8
 801839a:	687b      	ldr	r3, [r7, #4]
 801839c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 801839e:	687b      	ldr	r3, [r7, #4]
 80183a0:	2200      	movs	r2, #0
 80183a2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80183a4:	bf00      	nop
 80183a6:	370c      	adds	r7, #12
 80183a8:	46bd      	mov	sp, r7
 80183aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183ae:	4770      	bx	lr

080183b0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80183b0:	b480      	push	{r7}
 80183b2:	b083      	sub	sp, #12
 80183b4:	af00      	add	r7, sp, #0
 80183b6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80183b8:	687b      	ldr	r3, [r7, #4]
 80183ba:	2200      	movs	r2, #0
 80183bc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80183be:	bf00      	nop
 80183c0:	370c      	adds	r7, #12
 80183c2:	46bd      	mov	sp, r7
 80183c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80183c8:	4770      	bx	lr

080183ca <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80183ca:	b480      	push	{r7}
 80183cc:	b085      	sub	sp, #20
 80183ce:	af00      	add	r7, sp, #0
 80183d0:	6078      	str	r0, [r7, #4]
 80183d2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80183d4:	687b      	ldr	r3, [r7, #4]
 80183d6:	685b      	ldr	r3, [r3, #4]
 80183d8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80183da:	683b      	ldr	r3, [r7, #0]
 80183dc:	68fa      	ldr	r2, [r7, #12]
 80183de:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80183e0:	68fb      	ldr	r3, [r7, #12]
 80183e2:	689a      	ldr	r2, [r3, #8]
 80183e4:	683b      	ldr	r3, [r7, #0]
 80183e6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80183e8:	68fb      	ldr	r3, [r7, #12]
 80183ea:	689b      	ldr	r3, [r3, #8]
 80183ec:	683a      	ldr	r2, [r7, #0]
 80183ee:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80183f0:	68fb      	ldr	r3, [r7, #12]
 80183f2:	683a      	ldr	r2, [r7, #0]
 80183f4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80183f6:	683b      	ldr	r3, [r7, #0]
 80183f8:	687a      	ldr	r2, [r7, #4]
 80183fa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80183fc:	687b      	ldr	r3, [r7, #4]
 80183fe:	681b      	ldr	r3, [r3, #0]
 8018400:	1c5a      	adds	r2, r3, #1
 8018402:	687b      	ldr	r3, [r7, #4]
 8018404:	601a      	str	r2, [r3, #0]
}
 8018406:	bf00      	nop
 8018408:	3714      	adds	r7, #20
 801840a:	46bd      	mov	sp, r7
 801840c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018410:	4770      	bx	lr

08018412 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8018412:	b480      	push	{r7}
 8018414:	b085      	sub	sp, #20
 8018416:	af00      	add	r7, sp, #0
 8018418:	6078      	str	r0, [r7, #4]
 801841a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 801841c:	683b      	ldr	r3, [r7, #0]
 801841e:	681b      	ldr	r3, [r3, #0]
 8018420:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8018422:	68bb      	ldr	r3, [r7, #8]
 8018424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018428:	d103      	bne.n	8018432 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 801842a:	687b      	ldr	r3, [r7, #4]
 801842c:	691b      	ldr	r3, [r3, #16]
 801842e:	60fb      	str	r3, [r7, #12]
 8018430:	e00c      	b.n	801844c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8018432:	687b      	ldr	r3, [r7, #4]
 8018434:	3308      	adds	r3, #8
 8018436:	60fb      	str	r3, [r7, #12]
 8018438:	e002      	b.n	8018440 <vListInsert+0x2e>
 801843a:	68fb      	ldr	r3, [r7, #12]
 801843c:	685b      	ldr	r3, [r3, #4]
 801843e:	60fb      	str	r3, [r7, #12]
 8018440:	68fb      	ldr	r3, [r7, #12]
 8018442:	685b      	ldr	r3, [r3, #4]
 8018444:	681b      	ldr	r3, [r3, #0]
 8018446:	68ba      	ldr	r2, [r7, #8]
 8018448:	429a      	cmp	r2, r3
 801844a:	d2f6      	bcs.n	801843a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 801844c:	68fb      	ldr	r3, [r7, #12]
 801844e:	685a      	ldr	r2, [r3, #4]
 8018450:	683b      	ldr	r3, [r7, #0]
 8018452:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8018454:	683b      	ldr	r3, [r7, #0]
 8018456:	685b      	ldr	r3, [r3, #4]
 8018458:	683a      	ldr	r2, [r7, #0]
 801845a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 801845c:	683b      	ldr	r3, [r7, #0]
 801845e:	68fa      	ldr	r2, [r7, #12]
 8018460:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8018462:	68fb      	ldr	r3, [r7, #12]
 8018464:	683a      	ldr	r2, [r7, #0]
 8018466:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8018468:	683b      	ldr	r3, [r7, #0]
 801846a:	687a      	ldr	r2, [r7, #4]
 801846c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 801846e:	687b      	ldr	r3, [r7, #4]
 8018470:	681b      	ldr	r3, [r3, #0]
 8018472:	1c5a      	adds	r2, r3, #1
 8018474:	687b      	ldr	r3, [r7, #4]
 8018476:	601a      	str	r2, [r3, #0]
}
 8018478:	bf00      	nop
 801847a:	3714      	adds	r7, #20
 801847c:	46bd      	mov	sp, r7
 801847e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018482:	4770      	bx	lr

08018484 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8018484:	b480      	push	{r7}
 8018486:	b085      	sub	sp, #20
 8018488:	af00      	add	r7, sp, #0
 801848a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 801848c:	687b      	ldr	r3, [r7, #4]
 801848e:	691b      	ldr	r3, [r3, #16]
 8018490:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8018492:	687b      	ldr	r3, [r7, #4]
 8018494:	685b      	ldr	r3, [r3, #4]
 8018496:	687a      	ldr	r2, [r7, #4]
 8018498:	6892      	ldr	r2, [r2, #8]
 801849a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 801849c:	687b      	ldr	r3, [r7, #4]
 801849e:	689b      	ldr	r3, [r3, #8]
 80184a0:	687a      	ldr	r2, [r7, #4]
 80184a2:	6852      	ldr	r2, [r2, #4]
 80184a4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80184a6:	68fb      	ldr	r3, [r7, #12]
 80184a8:	685b      	ldr	r3, [r3, #4]
 80184aa:	687a      	ldr	r2, [r7, #4]
 80184ac:	429a      	cmp	r2, r3
 80184ae:	d103      	bne.n	80184b8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80184b0:	687b      	ldr	r3, [r7, #4]
 80184b2:	689a      	ldr	r2, [r3, #8]
 80184b4:	68fb      	ldr	r3, [r7, #12]
 80184b6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2200      	movs	r2, #0
 80184bc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80184be:	68fb      	ldr	r3, [r7, #12]
 80184c0:	681b      	ldr	r3, [r3, #0]
 80184c2:	1e5a      	subs	r2, r3, #1
 80184c4:	68fb      	ldr	r3, [r7, #12]
 80184c6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80184c8:	68fb      	ldr	r3, [r7, #12]
 80184ca:	681b      	ldr	r3, [r3, #0]
}
 80184cc:	4618      	mov	r0, r3
 80184ce:	3714      	adds	r7, #20
 80184d0:	46bd      	mov	sp, r7
 80184d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80184d6:	4770      	bx	lr

080184d8 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80184d8:	b580      	push	{r7, lr}
 80184da:	b08c      	sub	sp, #48	@ 0x30
 80184dc:	af04      	add	r7, sp, #16
 80184de:	60f8      	str	r0, [r7, #12]
 80184e0:	60b9      	str	r1, [r7, #8]
 80184e2:	603b      	str	r3, [r7, #0]
 80184e4:	4613      	mov	r3, r2
 80184e6:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80184e8:	88fb      	ldrh	r3, [r7, #6]
 80184ea:	009b      	lsls	r3, r3, #2
 80184ec:	4618      	mov	r0, r3
 80184ee:	f000 fe93 	bl	8019218 <pvPortMalloc>
 80184f2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80184f4:	697b      	ldr	r3, [r7, #20]
 80184f6:	2b00      	cmp	r3, #0
 80184f8:	d00e      	beq.n	8018518 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80184fa:	2054      	movs	r0, #84	@ 0x54
 80184fc:	f000 fe8c 	bl	8019218 <pvPortMalloc>
 8018500:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8018502:	69fb      	ldr	r3, [r7, #28]
 8018504:	2b00      	cmp	r3, #0
 8018506:	d003      	beq.n	8018510 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8018508:	69fb      	ldr	r3, [r7, #28]
 801850a:	697a      	ldr	r2, [r7, #20]
 801850c:	631a      	str	r2, [r3, #48]	@ 0x30
 801850e:	e005      	b.n	801851c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8018510:	6978      	ldr	r0, [r7, #20]
 8018512:	f000 fe93 	bl	801923c <vPortFree>
 8018516:	e001      	b.n	801851c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8018518:	2300      	movs	r3, #0
 801851a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801851c:	69fb      	ldr	r3, [r7, #28]
 801851e:	2b00      	cmp	r3, #0
 8018520:	d013      	beq.n	801854a <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8018522:	88fa      	ldrh	r2, [r7, #6]
 8018524:	2300      	movs	r3, #0
 8018526:	9303      	str	r3, [sp, #12]
 8018528:	69fb      	ldr	r3, [r7, #28]
 801852a:	9302      	str	r3, [sp, #8]
 801852c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801852e:	9301      	str	r3, [sp, #4]
 8018530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8018532:	9300      	str	r3, [sp, #0]
 8018534:	683b      	ldr	r3, [r7, #0]
 8018536:	68b9      	ldr	r1, [r7, #8]
 8018538:	68f8      	ldr	r0, [r7, #12]
 801853a:	f000 f80e 	bl	801855a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801853e:	69f8      	ldr	r0, [r7, #28]
 8018540:	f000 f894 	bl	801866c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8018544:	2301      	movs	r3, #1
 8018546:	61bb      	str	r3, [r7, #24]
 8018548:	e002      	b.n	8018550 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 801854a:	f04f 33ff 	mov.w	r3, #4294967295
 801854e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8018550:	69bb      	ldr	r3, [r7, #24]
	}
 8018552:	4618      	mov	r0, r3
 8018554:	3720      	adds	r7, #32
 8018556:	46bd      	mov	sp, r7
 8018558:	bd80      	pop	{r7, pc}

0801855a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 801855a:	b580      	push	{r7, lr}
 801855c:	b088      	sub	sp, #32
 801855e:	af00      	add	r7, sp, #0
 8018560:	60f8      	str	r0, [r7, #12]
 8018562:	60b9      	str	r1, [r7, #8]
 8018564:	607a      	str	r2, [r7, #4]
 8018566:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8018568:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801856a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 801856c:	687b      	ldr	r3, [r7, #4]
 801856e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8018572:	3b01      	subs	r3, #1
 8018574:	009b      	lsls	r3, r3, #2
 8018576:	4413      	add	r3, r2
 8018578:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 801857a:	69bb      	ldr	r3, [r7, #24]
 801857c:	f023 0307 	bic.w	r3, r3, #7
 8018580:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8018582:	69bb      	ldr	r3, [r7, #24]
 8018584:	f003 0307 	and.w	r3, r3, #7
 8018588:	2b00      	cmp	r3, #0
 801858a:	d00b      	beq.n	80185a4 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 801858c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018590:	f383 8811 	msr	BASEPRI, r3
 8018594:	f3bf 8f6f 	isb	sy
 8018598:	f3bf 8f4f 	dsb	sy
 801859c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 801859e:	bf00      	nop
 80185a0:	bf00      	nop
 80185a2:	e7fd      	b.n	80185a0 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80185a4:	68bb      	ldr	r3, [r7, #8]
 80185a6:	2b00      	cmp	r3, #0
 80185a8:	d01f      	beq.n	80185ea <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80185aa:	2300      	movs	r3, #0
 80185ac:	61fb      	str	r3, [r7, #28]
 80185ae:	e012      	b.n	80185d6 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80185b0:	68ba      	ldr	r2, [r7, #8]
 80185b2:	69fb      	ldr	r3, [r7, #28]
 80185b4:	4413      	add	r3, r2
 80185b6:	7819      	ldrb	r1, [r3, #0]
 80185b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80185ba:	69fb      	ldr	r3, [r7, #28]
 80185bc:	4413      	add	r3, r2
 80185be:	3334      	adds	r3, #52	@ 0x34
 80185c0:	460a      	mov	r2, r1
 80185c2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80185c4:	68ba      	ldr	r2, [r7, #8]
 80185c6:	69fb      	ldr	r3, [r7, #28]
 80185c8:	4413      	add	r3, r2
 80185ca:	781b      	ldrb	r3, [r3, #0]
 80185cc:	2b00      	cmp	r3, #0
 80185ce:	d006      	beq.n	80185de <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80185d0:	69fb      	ldr	r3, [r7, #28]
 80185d2:	3301      	adds	r3, #1
 80185d4:	61fb      	str	r3, [r7, #28]
 80185d6:	69fb      	ldr	r3, [r7, #28]
 80185d8:	2b0f      	cmp	r3, #15
 80185da:	d9e9      	bls.n	80185b0 <prvInitialiseNewTask+0x56>
 80185dc:	e000      	b.n	80185e0 <prvInitialiseNewTask+0x86>
			{
				break;
 80185de:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80185e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185e2:	2200      	movs	r2, #0
 80185e4:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80185e8:	e003      	b.n	80185f2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80185ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185ec:	2200      	movs	r2, #0
 80185ee:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80185f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80185f4:	2b06      	cmp	r3, #6
 80185f6:	d901      	bls.n	80185fc <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80185f8:	2306      	movs	r3, #6
 80185fa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80185fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80185fe:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018600:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8018602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018604:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8018606:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8018608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801860a:	2200      	movs	r2, #0
 801860c:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801860e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018610:	3304      	adds	r3, #4
 8018612:	4618      	mov	r0, r3
 8018614:	f7ff fecc 	bl	80183b0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8018618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801861a:	3318      	adds	r3, #24
 801861c:	4618      	mov	r0, r3
 801861e:	f7ff fec7 	bl	80183b0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8018622:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018624:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018626:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018628:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801862a:	f1c3 0207 	rsb	r2, r3, #7
 801862e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018630:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8018632:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018634:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018636:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8018638:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801863a:	2200      	movs	r2, #0
 801863c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801863e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018640:	2200      	movs	r2, #0
 8018642:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8018646:	683a      	ldr	r2, [r7, #0]
 8018648:	68f9      	ldr	r1, [r7, #12]
 801864a:	69b8      	ldr	r0, [r7, #24]
 801864c:	f000 fbd6 	bl	8018dfc <pxPortInitialiseStack>
 8018650:	4602      	mov	r2, r0
 8018652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8018654:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8018656:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8018658:	2b00      	cmp	r3, #0
 801865a:	d002      	beq.n	8018662 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 801865c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801865e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8018660:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8018662:	bf00      	nop
 8018664:	3720      	adds	r7, #32
 8018666:	46bd      	mov	sp, r7
 8018668:	bd80      	pop	{r7, pc}
	...

0801866c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 801866c:	b580      	push	{r7, lr}
 801866e:	b082      	sub	sp, #8
 8018670:	af00      	add	r7, sp, #0
 8018672:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8018674:	f000 fcf0 	bl	8019058 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8018678:	4b2a      	ldr	r3, [pc, #168]	@ (8018724 <prvAddNewTaskToReadyList+0xb8>)
 801867a:	681b      	ldr	r3, [r3, #0]
 801867c:	3301      	adds	r3, #1
 801867e:	4a29      	ldr	r2, [pc, #164]	@ (8018724 <prvAddNewTaskToReadyList+0xb8>)
 8018680:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8018682:	4b29      	ldr	r3, [pc, #164]	@ (8018728 <prvAddNewTaskToReadyList+0xbc>)
 8018684:	681b      	ldr	r3, [r3, #0]
 8018686:	2b00      	cmp	r3, #0
 8018688:	d109      	bne.n	801869e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 801868a:	4a27      	ldr	r2, [pc, #156]	@ (8018728 <prvAddNewTaskToReadyList+0xbc>)
 801868c:	687b      	ldr	r3, [r7, #4]
 801868e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8018690:	4b24      	ldr	r3, [pc, #144]	@ (8018724 <prvAddNewTaskToReadyList+0xb8>)
 8018692:	681b      	ldr	r3, [r3, #0]
 8018694:	2b01      	cmp	r3, #1
 8018696:	d110      	bne.n	80186ba <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8018698:	f000 faac 	bl	8018bf4 <prvInitialiseTaskLists>
 801869c:	e00d      	b.n	80186ba <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 801869e:	4b23      	ldr	r3, [pc, #140]	@ (801872c <prvAddNewTaskToReadyList+0xc0>)
 80186a0:	681b      	ldr	r3, [r3, #0]
 80186a2:	2b00      	cmp	r3, #0
 80186a4:	d109      	bne.n	80186ba <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80186a6:	4b20      	ldr	r3, [pc, #128]	@ (8018728 <prvAddNewTaskToReadyList+0xbc>)
 80186a8:	681b      	ldr	r3, [r3, #0]
 80186aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186ac:	687b      	ldr	r3, [r7, #4]
 80186ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186b0:	429a      	cmp	r2, r3
 80186b2:	d802      	bhi.n	80186ba <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80186b4:	4a1c      	ldr	r2, [pc, #112]	@ (8018728 <prvAddNewTaskToReadyList+0xbc>)
 80186b6:	687b      	ldr	r3, [r7, #4]
 80186b8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80186ba:	4b1d      	ldr	r3, [pc, #116]	@ (8018730 <prvAddNewTaskToReadyList+0xc4>)
 80186bc:	681b      	ldr	r3, [r3, #0]
 80186be:	3301      	adds	r3, #1
 80186c0:	4a1b      	ldr	r2, [pc, #108]	@ (8018730 <prvAddNewTaskToReadyList+0xc4>)
 80186c2:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80186c4:	687b      	ldr	r3, [r7, #4]
 80186c6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80186c8:	2201      	movs	r2, #1
 80186ca:	409a      	lsls	r2, r3
 80186cc:	4b19      	ldr	r3, [pc, #100]	@ (8018734 <prvAddNewTaskToReadyList+0xc8>)
 80186ce:	681b      	ldr	r3, [r3, #0]
 80186d0:	4313      	orrs	r3, r2
 80186d2:	4a18      	ldr	r2, [pc, #96]	@ (8018734 <prvAddNewTaskToReadyList+0xc8>)
 80186d4:	6013      	str	r3, [r2, #0]
 80186d6:	687b      	ldr	r3, [r7, #4]
 80186d8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80186da:	4613      	mov	r3, r2
 80186dc:	009b      	lsls	r3, r3, #2
 80186de:	4413      	add	r3, r2
 80186e0:	009b      	lsls	r3, r3, #2
 80186e2:	4a15      	ldr	r2, [pc, #84]	@ (8018738 <prvAddNewTaskToReadyList+0xcc>)
 80186e4:	441a      	add	r2, r3
 80186e6:	687b      	ldr	r3, [r7, #4]
 80186e8:	3304      	adds	r3, #4
 80186ea:	4619      	mov	r1, r3
 80186ec:	4610      	mov	r0, r2
 80186ee:	f7ff fe6c 	bl	80183ca <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80186f2:	f000 fce3 	bl	80190bc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80186f6:	4b0d      	ldr	r3, [pc, #52]	@ (801872c <prvAddNewTaskToReadyList+0xc0>)
 80186f8:	681b      	ldr	r3, [r3, #0]
 80186fa:	2b00      	cmp	r3, #0
 80186fc:	d00e      	beq.n	801871c <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80186fe:	4b0a      	ldr	r3, [pc, #40]	@ (8018728 <prvAddNewTaskToReadyList+0xbc>)
 8018700:	681b      	ldr	r3, [r3, #0]
 8018702:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018704:	687b      	ldr	r3, [r7, #4]
 8018706:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018708:	429a      	cmp	r2, r3
 801870a:	d207      	bcs.n	801871c <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 801870c:	4b0b      	ldr	r3, [pc, #44]	@ (801873c <prvAddNewTaskToReadyList+0xd0>)
 801870e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018712:	601a      	str	r2, [r3, #0]
 8018714:	f3bf 8f4f 	dsb	sy
 8018718:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801871c:	bf00      	nop
 801871e:	3708      	adds	r7, #8
 8018720:	46bd      	mov	sp, r7
 8018722:	bd80      	pop	{r7, pc}
 8018724:	2000046c 	.word	0x2000046c
 8018728:	2000036c 	.word	0x2000036c
 801872c:	20000478 	.word	0x20000478
 8018730:	20000488 	.word	0x20000488
 8018734:	20000474 	.word	0x20000474
 8018738:	20000370 	.word	0x20000370
 801873c:	e000ed04 	.word	0xe000ed04

08018740 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8018740:	b580      	push	{r7, lr}
 8018742:	b084      	sub	sp, #16
 8018744:	af00      	add	r7, sp, #0
 8018746:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8018748:	2300      	movs	r3, #0
 801874a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 801874c:	687b      	ldr	r3, [r7, #4]
 801874e:	2b00      	cmp	r3, #0
 8018750:	d018      	beq.n	8018784 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8018752:	4b14      	ldr	r3, [pc, #80]	@ (80187a4 <vTaskDelay+0x64>)
 8018754:	681b      	ldr	r3, [r3, #0]
 8018756:	2b00      	cmp	r3, #0
 8018758:	d00b      	beq.n	8018772 <vTaskDelay+0x32>
	__asm volatile
 801875a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801875e:	f383 8811 	msr	BASEPRI, r3
 8018762:	f3bf 8f6f 	isb	sy
 8018766:	f3bf 8f4f 	dsb	sy
 801876a:	60bb      	str	r3, [r7, #8]
}
 801876c:	bf00      	nop
 801876e:	bf00      	nop
 8018770:	e7fd      	b.n	801876e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8018772:	f000 f865 	bl	8018840 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8018776:	2100      	movs	r1, #0
 8018778:	6878      	ldr	r0, [r7, #4]
 801877a:	f000 fad9 	bl	8018d30 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 801877e:	f000 f86d 	bl	801885c <xTaskResumeAll>
 8018782:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8018784:	68fb      	ldr	r3, [r7, #12]
 8018786:	2b00      	cmp	r3, #0
 8018788:	d107      	bne.n	801879a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 801878a:	4b07      	ldr	r3, [pc, #28]	@ (80187a8 <vTaskDelay+0x68>)
 801878c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018790:	601a      	str	r2, [r3, #0]
 8018792:	f3bf 8f4f 	dsb	sy
 8018796:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801879a:	bf00      	nop
 801879c:	3710      	adds	r7, #16
 801879e:	46bd      	mov	sp, r7
 80187a0:	bd80      	pop	{r7, pc}
 80187a2:	bf00      	nop
 80187a4:	20000494 	.word	0x20000494
 80187a8:	e000ed04 	.word	0xe000ed04

080187ac <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80187ac:	b580      	push	{r7, lr}
 80187ae:	b086      	sub	sp, #24
 80187b0:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 80187b2:	4b1d      	ldr	r3, [pc, #116]	@ (8018828 <vTaskStartScheduler+0x7c>)
 80187b4:	9301      	str	r3, [sp, #4]
 80187b6:	2300      	movs	r3, #0
 80187b8:	9300      	str	r3, [sp, #0]
 80187ba:	2300      	movs	r3, #0
 80187bc:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80187c0:	491a      	ldr	r1, [pc, #104]	@ (801882c <vTaskStartScheduler+0x80>)
 80187c2:	481b      	ldr	r0, [pc, #108]	@ (8018830 <vTaskStartScheduler+0x84>)
 80187c4:	f7ff fe88 	bl	80184d8 <xTaskCreate>
 80187c8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80187ca:	68fb      	ldr	r3, [r7, #12]
 80187cc:	2b01      	cmp	r3, #1
 80187ce:	d116      	bne.n	80187fe <vTaskStartScheduler+0x52>
	__asm volatile
 80187d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80187d4:	f383 8811 	msr	BASEPRI, r3
 80187d8:	f3bf 8f6f 	isb	sy
 80187dc:	f3bf 8f4f 	dsb	sy
 80187e0:	60bb      	str	r3, [r7, #8]
}
 80187e2:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80187e4:	4b13      	ldr	r3, [pc, #76]	@ (8018834 <vTaskStartScheduler+0x88>)
 80187e6:	f04f 32ff 	mov.w	r2, #4294967295
 80187ea:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80187ec:	4b12      	ldr	r3, [pc, #72]	@ (8018838 <vTaskStartScheduler+0x8c>)
 80187ee:	2201      	movs	r2, #1
 80187f0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80187f2:	4b12      	ldr	r3, [pc, #72]	@ (801883c <vTaskStartScheduler+0x90>)
 80187f4:	2200      	movs	r2, #0
 80187f6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80187f8:	f000 fb8a 	bl	8018f10 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80187fc:	e00f      	b.n	801881e <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80187fe:	68fb      	ldr	r3, [r7, #12]
 8018800:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018804:	d10b      	bne.n	801881e <vTaskStartScheduler+0x72>
	__asm volatile
 8018806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 801880a:	f383 8811 	msr	BASEPRI, r3
 801880e:	f3bf 8f6f 	isb	sy
 8018812:	f3bf 8f4f 	dsb	sy
 8018816:	607b      	str	r3, [r7, #4]
}
 8018818:	bf00      	nop
 801881a:	bf00      	nop
 801881c:	e7fd      	b.n	801881a <vTaskStartScheduler+0x6e>
}
 801881e:	bf00      	nop
 8018820:	3710      	adds	r7, #16
 8018822:	46bd      	mov	sp, r7
 8018824:	bd80      	pop	{r7, pc}
 8018826:	bf00      	nop
 8018828:	20000490 	.word	0x20000490
 801882c:	0801ae38 	.word	0x0801ae38
 8018830:	08018bc5 	.word	0x08018bc5
 8018834:	2000048c 	.word	0x2000048c
 8018838:	20000478 	.word	0x20000478
 801883c:	20000470 	.word	0x20000470

08018840 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8018840:	b480      	push	{r7}
 8018842:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8018844:	4b04      	ldr	r3, [pc, #16]	@ (8018858 <vTaskSuspendAll+0x18>)
 8018846:	681b      	ldr	r3, [r3, #0]
 8018848:	3301      	adds	r3, #1
 801884a:	4a03      	ldr	r2, [pc, #12]	@ (8018858 <vTaskSuspendAll+0x18>)
 801884c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 801884e:	bf00      	nop
 8018850:	46bd      	mov	sp, r7
 8018852:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018856:	4770      	bx	lr
 8018858:	20000494 	.word	0x20000494

0801885c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 801885c:	b580      	push	{r7, lr}
 801885e:	b084      	sub	sp, #16
 8018860:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8018862:	2300      	movs	r3, #0
 8018864:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8018866:	2300      	movs	r3, #0
 8018868:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 801886a:	4b42      	ldr	r3, [pc, #264]	@ (8018974 <xTaskResumeAll+0x118>)
 801886c:	681b      	ldr	r3, [r3, #0]
 801886e:	2b00      	cmp	r3, #0
 8018870:	d10b      	bne.n	801888a <xTaskResumeAll+0x2e>
	__asm volatile
 8018872:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018876:	f383 8811 	msr	BASEPRI, r3
 801887a:	f3bf 8f6f 	isb	sy
 801887e:	f3bf 8f4f 	dsb	sy
 8018882:	603b      	str	r3, [r7, #0]
}
 8018884:	bf00      	nop
 8018886:	bf00      	nop
 8018888:	e7fd      	b.n	8018886 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 801888a:	f000 fbe5 	bl	8019058 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 801888e:	4b39      	ldr	r3, [pc, #228]	@ (8018974 <xTaskResumeAll+0x118>)
 8018890:	681b      	ldr	r3, [r3, #0]
 8018892:	3b01      	subs	r3, #1
 8018894:	4a37      	ldr	r2, [pc, #220]	@ (8018974 <xTaskResumeAll+0x118>)
 8018896:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8018898:	4b36      	ldr	r3, [pc, #216]	@ (8018974 <xTaskResumeAll+0x118>)
 801889a:	681b      	ldr	r3, [r3, #0]
 801889c:	2b00      	cmp	r3, #0
 801889e:	d161      	bne.n	8018964 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80188a0:	4b35      	ldr	r3, [pc, #212]	@ (8018978 <xTaskResumeAll+0x11c>)
 80188a2:	681b      	ldr	r3, [r3, #0]
 80188a4:	2b00      	cmp	r3, #0
 80188a6:	d05d      	beq.n	8018964 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80188a8:	e02e      	b.n	8018908 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80188aa:	4b34      	ldr	r3, [pc, #208]	@ (801897c <xTaskResumeAll+0x120>)
 80188ac:	68db      	ldr	r3, [r3, #12]
 80188ae:	68db      	ldr	r3, [r3, #12]
 80188b0:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80188b2:	68fb      	ldr	r3, [r7, #12]
 80188b4:	3318      	adds	r3, #24
 80188b6:	4618      	mov	r0, r3
 80188b8:	f7ff fde4 	bl	8018484 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80188bc:	68fb      	ldr	r3, [r7, #12]
 80188be:	3304      	adds	r3, #4
 80188c0:	4618      	mov	r0, r3
 80188c2:	f7ff fddf 	bl	8018484 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80188c6:	68fb      	ldr	r3, [r7, #12]
 80188c8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188ca:	2201      	movs	r2, #1
 80188cc:	409a      	lsls	r2, r3
 80188ce:	4b2c      	ldr	r3, [pc, #176]	@ (8018980 <xTaskResumeAll+0x124>)
 80188d0:	681b      	ldr	r3, [r3, #0]
 80188d2:	4313      	orrs	r3, r2
 80188d4:	4a2a      	ldr	r2, [pc, #168]	@ (8018980 <xTaskResumeAll+0x124>)
 80188d6:	6013      	str	r3, [r2, #0]
 80188d8:	68fb      	ldr	r3, [r7, #12]
 80188da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80188dc:	4613      	mov	r3, r2
 80188de:	009b      	lsls	r3, r3, #2
 80188e0:	4413      	add	r3, r2
 80188e2:	009b      	lsls	r3, r3, #2
 80188e4:	4a27      	ldr	r2, [pc, #156]	@ (8018984 <xTaskResumeAll+0x128>)
 80188e6:	441a      	add	r2, r3
 80188e8:	68fb      	ldr	r3, [r7, #12]
 80188ea:	3304      	adds	r3, #4
 80188ec:	4619      	mov	r1, r3
 80188ee:	4610      	mov	r0, r2
 80188f0:	f7ff fd6b 	bl	80183ca <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80188f4:	68fb      	ldr	r3, [r7, #12]
 80188f6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80188f8:	4b23      	ldr	r3, [pc, #140]	@ (8018988 <xTaskResumeAll+0x12c>)
 80188fa:	681b      	ldr	r3, [r3, #0]
 80188fc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80188fe:	429a      	cmp	r2, r3
 8018900:	d302      	bcc.n	8018908 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8018902:	4b22      	ldr	r3, [pc, #136]	@ (801898c <xTaskResumeAll+0x130>)
 8018904:	2201      	movs	r2, #1
 8018906:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8018908:	4b1c      	ldr	r3, [pc, #112]	@ (801897c <xTaskResumeAll+0x120>)
 801890a:	681b      	ldr	r3, [r3, #0]
 801890c:	2b00      	cmp	r3, #0
 801890e:	d1cc      	bne.n	80188aa <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8018910:	68fb      	ldr	r3, [r7, #12]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d001      	beq.n	801891a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8018916:	f000 f9eb 	bl	8018cf0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 801891a:	4b1d      	ldr	r3, [pc, #116]	@ (8018990 <xTaskResumeAll+0x134>)
 801891c:	681b      	ldr	r3, [r3, #0]
 801891e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8018920:	687b      	ldr	r3, [r7, #4]
 8018922:	2b00      	cmp	r3, #0
 8018924:	d010      	beq.n	8018948 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8018926:	f000 f837 	bl	8018998 <xTaskIncrementTick>
 801892a:	4603      	mov	r3, r0
 801892c:	2b00      	cmp	r3, #0
 801892e:	d002      	beq.n	8018936 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8018930:	4b16      	ldr	r3, [pc, #88]	@ (801898c <xTaskResumeAll+0x130>)
 8018932:	2201      	movs	r2, #1
 8018934:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8018936:	687b      	ldr	r3, [r7, #4]
 8018938:	3b01      	subs	r3, #1
 801893a:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 801893c:	687b      	ldr	r3, [r7, #4]
 801893e:	2b00      	cmp	r3, #0
 8018940:	d1f1      	bne.n	8018926 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8018942:	4b13      	ldr	r3, [pc, #76]	@ (8018990 <xTaskResumeAll+0x134>)
 8018944:	2200      	movs	r2, #0
 8018946:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8018948:	4b10      	ldr	r3, [pc, #64]	@ (801898c <xTaskResumeAll+0x130>)
 801894a:	681b      	ldr	r3, [r3, #0]
 801894c:	2b00      	cmp	r3, #0
 801894e:	d009      	beq.n	8018964 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8018950:	2301      	movs	r3, #1
 8018952:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8018954:	4b0f      	ldr	r3, [pc, #60]	@ (8018994 <xTaskResumeAll+0x138>)
 8018956:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 801895a:	601a      	str	r2, [r3, #0]
 801895c:	f3bf 8f4f 	dsb	sy
 8018960:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8018964:	f000 fbaa 	bl	80190bc <vPortExitCritical>

	return xAlreadyYielded;
 8018968:	68bb      	ldr	r3, [r7, #8]
}
 801896a:	4618      	mov	r0, r3
 801896c:	3710      	adds	r7, #16
 801896e:	46bd      	mov	sp, r7
 8018970:	bd80      	pop	{r7, pc}
 8018972:	bf00      	nop
 8018974:	20000494 	.word	0x20000494
 8018978:	2000046c 	.word	0x2000046c
 801897c:	2000042c 	.word	0x2000042c
 8018980:	20000474 	.word	0x20000474
 8018984:	20000370 	.word	0x20000370
 8018988:	2000036c 	.word	0x2000036c
 801898c:	20000480 	.word	0x20000480
 8018990:	2000047c 	.word	0x2000047c
 8018994:	e000ed04 	.word	0xe000ed04

08018998 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8018998:	b580      	push	{r7, lr}
 801899a:	b086      	sub	sp, #24
 801899c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 801899e:	2300      	movs	r3, #0
 80189a0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80189a2:	4b4f      	ldr	r3, [pc, #316]	@ (8018ae0 <xTaskIncrementTick+0x148>)
 80189a4:	681b      	ldr	r3, [r3, #0]
 80189a6:	2b00      	cmp	r3, #0
 80189a8:	f040 808f 	bne.w	8018aca <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80189ac:	4b4d      	ldr	r3, [pc, #308]	@ (8018ae4 <xTaskIncrementTick+0x14c>)
 80189ae:	681b      	ldr	r3, [r3, #0]
 80189b0:	3301      	adds	r3, #1
 80189b2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80189b4:	4a4b      	ldr	r2, [pc, #300]	@ (8018ae4 <xTaskIncrementTick+0x14c>)
 80189b6:	693b      	ldr	r3, [r7, #16]
 80189b8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80189ba:	693b      	ldr	r3, [r7, #16]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d121      	bne.n	8018a04 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80189c0:	4b49      	ldr	r3, [pc, #292]	@ (8018ae8 <xTaskIncrementTick+0x150>)
 80189c2:	681b      	ldr	r3, [r3, #0]
 80189c4:	681b      	ldr	r3, [r3, #0]
 80189c6:	2b00      	cmp	r3, #0
 80189c8:	d00b      	beq.n	80189e2 <xTaskIncrementTick+0x4a>
	__asm volatile
 80189ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80189ce:	f383 8811 	msr	BASEPRI, r3
 80189d2:	f3bf 8f6f 	isb	sy
 80189d6:	f3bf 8f4f 	dsb	sy
 80189da:	603b      	str	r3, [r7, #0]
}
 80189dc:	bf00      	nop
 80189de:	bf00      	nop
 80189e0:	e7fd      	b.n	80189de <xTaskIncrementTick+0x46>
 80189e2:	4b41      	ldr	r3, [pc, #260]	@ (8018ae8 <xTaskIncrementTick+0x150>)
 80189e4:	681b      	ldr	r3, [r3, #0]
 80189e6:	60fb      	str	r3, [r7, #12]
 80189e8:	4b40      	ldr	r3, [pc, #256]	@ (8018aec <xTaskIncrementTick+0x154>)
 80189ea:	681b      	ldr	r3, [r3, #0]
 80189ec:	4a3e      	ldr	r2, [pc, #248]	@ (8018ae8 <xTaskIncrementTick+0x150>)
 80189ee:	6013      	str	r3, [r2, #0]
 80189f0:	4a3e      	ldr	r2, [pc, #248]	@ (8018aec <xTaskIncrementTick+0x154>)
 80189f2:	68fb      	ldr	r3, [r7, #12]
 80189f4:	6013      	str	r3, [r2, #0]
 80189f6:	4b3e      	ldr	r3, [pc, #248]	@ (8018af0 <xTaskIncrementTick+0x158>)
 80189f8:	681b      	ldr	r3, [r3, #0]
 80189fa:	3301      	adds	r3, #1
 80189fc:	4a3c      	ldr	r2, [pc, #240]	@ (8018af0 <xTaskIncrementTick+0x158>)
 80189fe:	6013      	str	r3, [r2, #0]
 8018a00:	f000 f976 	bl	8018cf0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8018a04:	4b3b      	ldr	r3, [pc, #236]	@ (8018af4 <xTaskIncrementTick+0x15c>)
 8018a06:	681b      	ldr	r3, [r3, #0]
 8018a08:	693a      	ldr	r2, [r7, #16]
 8018a0a:	429a      	cmp	r2, r3
 8018a0c:	d348      	bcc.n	8018aa0 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018a0e:	4b36      	ldr	r3, [pc, #216]	@ (8018ae8 <xTaskIncrementTick+0x150>)
 8018a10:	681b      	ldr	r3, [r3, #0]
 8018a12:	681b      	ldr	r3, [r3, #0]
 8018a14:	2b00      	cmp	r3, #0
 8018a16:	d104      	bne.n	8018a22 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8018a18:	4b36      	ldr	r3, [pc, #216]	@ (8018af4 <xTaskIncrementTick+0x15c>)
 8018a1a:	f04f 32ff 	mov.w	r2, #4294967295
 8018a1e:	601a      	str	r2, [r3, #0]
					break;
 8018a20:	e03e      	b.n	8018aa0 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018a22:	4b31      	ldr	r3, [pc, #196]	@ (8018ae8 <xTaskIncrementTick+0x150>)
 8018a24:	681b      	ldr	r3, [r3, #0]
 8018a26:	68db      	ldr	r3, [r3, #12]
 8018a28:	68db      	ldr	r3, [r3, #12]
 8018a2a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8018a2c:	68bb      	ldr	r3, [r7, #8]
 8018a2e:	685b      	ldr	r3, [r3, #4]
 8018a30:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8018a32:	693a      	ldr	r2, [r7, #16]
 8018a34:	687b      	ldr	r3, [r7, #4]
 8018a36:	429a      	cmp	r2, r3
 8018a38:	d203      	bcs.n	8018a42 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8018a3a:	4a2e      	ldr	r2, [pc, #184]	@ (8018af4 <xTaskIncrementTick+0x15c>)
 8018a3c:	687b      	ldr	r3, [r7, #4]
 8018a3e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8018a40:	e02e      	b.n	8018aa0 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018a42:	68bb      	ldr	r3, [r7, #8]
 8018a44:	3304      	adds	r3, #4
 8018a46:	4618      	mov	r0, r3
 8018a48:	f7ff fd1c 	bl	8018484 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8018a4c:	68bb      	ldr	r3, [r7, #8]
 8018a4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8018a50:	2b00      	cmp	r3, #0
 8018a52:	d004      	beq.n	8018a5e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8018a54:	68bb      	ldr	r3, [r7, #8]
 8018a56:	3318      	adds	r3, #24
 8018a58:	4618      	mov	r0, r3
 8018a5a:	f7ff fd13 	bl	8018484 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8018a5e:	68bb      	ldr	r3, [r7, #8]
 8018a60:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a62:	2201      	movs	r2, #1
 8018a64:	409a      	lsls	r2, r3
 8018a66:	4b24      	ldr	r3, [pc, #144]	@ (8018af8 <xTaskIncrementTick+0x160>)
 8018a68:	681b      	ldr	r3, [r3, #0]
 8018a6a:	4313      	orrs	r3, r2
 8018a6c:	4a22      	ldr	r2, [pc, #136]	@ (8018af8 <xTaskIncrementTick+0x160>)
 8018a6e:	6013      	str	r3, [r2, #0]
 8018a70:	68bb      	ldr	r3, [r7, #8]
 8018a72:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a74:	4613      	mov	r3, r2
 8018a76:	009b      	lsls	r3, r3, #2
 8018a78:	4413      	add	r3, r2
 8018a7a:	009b      	lsls	r3, r3, #2
 8018a7c:	4a1f      	ldr	r2, [pc, #124]	@ (8018afc <xTaskIncrementTick+0x164>)
 8018a7e:	441a      	add	r2, r3
 8018a80:	68bb      	ldr	r3, [r7, #8]
 8018a82:	3304      	adds	r3, #4
 8018a84:	4619      	mov	r1, r3
 8018a86:	4610      	mov	r0, r2
 8018a88:	f7ff fc9f 	bl	80183ca <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8018a8c:	68bb      	ldr	r3, [r7, #8]
 8018a8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018a90:	4b1b      	ldr	r3, [pc, #108]	@ (8018b00 <xTaskIncrementTick+0x168>)
 8018a92:	681b      	ldr	r3, [r3, #0]
 8018a94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018a96:	429a      	cmp	r2, r3
 8018a98:	d3b9      	bcc.n	8018a0e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8018a9a:	2301      	movs	r3, #1
 8018a9c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018a9e:	e7b6      	b.n	8018a0e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8018aa0:	4b17      	ldr	r3, [pc, #92]	@ (8018b00 <xTaskIncrementTick+0x168>)
 8018aa2:	681b      	ldr	r3, [r3, #0]
 8018aa4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8018aa6:	4915      	ldr	r1, [pc, #84]	@ (8018afc <xTaskIncrementTick+0x164>)
 8018aa8:	4613      	mov	r3, r2
 8018aaa:	009b      	lsls	r3, r3, #2
 8018aac:	4413      	add	r3, r2
 8018aae:	009b      	lsls	r3, r3, #2
 8018ab0:	440b      	add	r3, r1
 8018ab2:	681b      	ldr	r3, [r3, #0]
 8018ab4:	2b01      	cmp	r3, #1
 8018ab6:	d901      	bls.n	8018abc <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8018ab8:	2301      	movs	r3, #1
 8018aba:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8018abc:	4b11      	ldr	r3, [pc, #68]	@ (8018b04 <xTaskIncrementTick+0x16c>)
 8018abe:	681b      	ldr	r3, [r3, #0]
 8018ac0:	2b00      	cmp	r3, #0
 8018ac2:	d007      	beq.n	8018ad4 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8018ac4:	2301      	movs	r3, #1
 8018ac6:	617b      	str	r3, [r7, #20]
 8018ac8:	e004      	b.n	8018ad4 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8018aca:	4b0f      	ldr	r3, [pc, #60]	@ (8018b08 <xTaskIncrementTick+0x170>)
 8018acc:	681b      	ldr	r3, [r3, #0]
 8018ace:	3301      	adds	r3, #1
 8018ad0:	4a0d      	ldr	r2, [pc, #52]	@ (8018b08 <xTaskIncrementTick+0x170>)
 8018ad2:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8018ad4:	697b      	ldr	r3, [r7, #20]
}
 8018ad6:	4618      	mov	r0, r3
 8018ad8:	3718      	adds	r7, #24
 8018ada:	46bd      	mov	sp, r7
 8018adc:	bd80      	pop	{r7, pc}
 8018ade:	bf00      	nop
 8018ae0:	20000494 	.word	0x20000494
 8018ae4:	20000470 	.word	0x20000470
 8018ae8:	20000424 	.word	0x20000424
 8018aec:	20000428 	.word	0x20000428
 8018af0:	20000484 	.word	0x20000484
 8018af4:	2000048c 	.word	0x2000048c
 8018af8:	20000474 	.word	0x20000474
 8018afc:	20000370 	.word	0x20000370
 8018b00:	2000036c 	.word	0x2000036c
 8018b04:	20000480 	.word	0x20000480
 8018b08:	2000047c 	.word	0x2000047c

08018b0c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8018b0c:	b480      	push	{r7}
 8018b0e:	b087      	sub	sp, #28
 8018b10:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8018b12:	4b27      	ldr	r3, [pc, #156]	@ (8018bb0 <vTaskSwitchContext+0xa4>)
 8018b14:	681b      	ldr	r3, [r3, #0]
 8018b16:	2b00      	cmp	r3, #0
 8018b18:	d003      	beq.n	8018b22 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8018b1a:	4b26      	ldr	r3, [pc, #152]	@ (8018bb4 <vTaskSwitchContext+0xa8>)
 8018b1c:	2201      	movs	r2, #1
 8018b1e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8018b20:	e040      	b.n	8018ba4 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 8018b22:	4b24      	ldr	r3, [pc, #144]	@ (8018bb4 <vTaskSwitchContext+0xa8>)
 8018b24:	2200      	movs	r2, #0
 8018b26:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018b28:	4b23      	ldr	r3, [pc, #140]	@ (8018bb8 <vTaskSwitchContext+0xac>)
 8018b2a:	681b      	ldr	r3, [r3, #0]
 8018b2c:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8018b2e:	68fb      	ldr	r3, [r7, #12]
 8018b30:	fab3 f383 	clz	r3, r3
 8018b34:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8018b36:	7afb      	ldrb	r3, [r7, #11]
 8018b38:	f1c3 031f 	rsb	r3, r3, #31
 8018b3c:	617b      	str	r3, [r7, #20]
 8018b3e:	491f      	ldr	r1, [pc, #124]	@ (8018bbc <vTaskSwitchContext+0xb0>)
 8018b40:	697a      	ldr	r2, [r7, #20]
 8018b42:	4613      	mov	r3, r2
 8018b44:	009b      	lsls	r3, r3, #2
 8018b46:	4413      	add	r3, r2
 8018b48:	009b      	lsls	r3, r3, #2
 8018b4a:	440b      	add	r3, r1
 8018b4c:	681b      	ldr	r3, [r3, #0]
 8018b4e:	2b00      	cmp	r3, #0
 8018b50:	d10b      	bne.n	8018b6a <vTaskSwitchContext+0x5e>
	__asm volatile
 8018b52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018b56:	f383 8811 	msr	BASEPRI, r3
 8018b5a:	f3bf 8f6f 	isb	sy
 8018b5e:	f3bf 8f4f 	dsb	sy
 8018b62:	607b      	str	r3, [r7, #4]
}
 8018b64:	bf00      	nop
 8018b66:	bf00      	nop
 8018b68:	e7fd      	b.n	8018b66 <vTaskSwitchContext+0x5a>
 8018b6a:	697a      	ldr	r2, [r7, #20]
 8018b6c:	4613      	mov	r3, r2
 8018b6e:	009b      	lsls	r3, r3, #2
 8018b70:	4413      	add	r3, r2
 8018b72:	009b      	lsls	r3, r3, #2
 8018b74:	4a11      	ldr	r2, [pc, #68]	@ (8018bbc <vTaskSwitchContext+0xb0>)
 8018b76:	4413      	add	r3, r2
 8018b78:	613b      	str	r3, [r7, #16]
 8018b7a:	693b      	ldr	r3, [r7, #16]
 8018b7c:	685b      	ldr	r3, [r3, #4]
 8018b7e:	685a      	ldr	r2, [r3, #4]
 8018b80:	693b      	ldr	r3, [r7, #16]
 8018b82:	605a      	str	r2, [r3, #4]
 8018b84:	693b      	ldr	r3, [r7, #16]
 8018b86:	685a      	ldr	r2, [r3, #4]
 8018b88:	693b      	ldr	r3, [r7, #16]
 8018b8a:	3308      	adds	r3, #8
 8018b8c:	429a      	cmp	r2, r3
 8018b8e:	d104      	bne.n	8018b9a <vTaskSwitchContext+0x8e>
 8018b90:	693b      	ldr	r3, [r7, #16]
 8018b92:	685b      	ldr	r3, [r3, #4]
 8018b94:	685a      	ldr	r2, [r3, #4]
 8018b96:	693b      	ldr	r3, [r7, #16]
 8018b98:	605a      	str	r2, [r3, #4]
 8018b9a:	693b      	ldr	r3, [r7, #16]
 8018b9c:	685b      	ldr	r3, [r3, #4]
 8018b9e:	68db      	ldr	r3, [r3, #12]
 8018ba0:	4a07      	ldr	r2, [pc, #28]	@ (8018bc0 <vTaskSwitchContext+0xb4>)
 8018ba2:	6013      	str	r3, [r2, #0]
}
 8018ba4:	bf00      	nop
 8018ba6:	371c      	adds	r7, #28
 8018ba8:	46bd      	mov	sp, r7
 8018baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018bae:	4770      	bx	lr
 8018bb0:	20000494 	.word	0x20000494
 8018bb4:	20000480 	.word	0x20000480
 8018bb8:	20000474 	.word	0x20000474
 8018bbc:	20000370 	.word	0x20000370
 8018bc0:	2000036c 	.word	0x2000036c

08018bc4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8018bc4:	b580      	push	{r7, lr}
 8018bc6:	b082      	sub	sp, #8
 8018bc8:	af00      	add	r7, sp, #0
 8018bca:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8018bcc:	f000 f852 	bl	8018c74 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8018bd0:	4b06      	ldr	r3, [pc, #24]	@ (8018bec <prvIdleTask+0x28>)
 8018bd2:	681b      	ldr	r3, [r3, #0]
 8018bd4:	2b01      	cmp	r3, #1
 8018bd6:	d9f9      	bls.n	8018bcc <prvIdleTask+0x8>
			{
				taskYIELD();
 8018bd8:	4b05      	ldr	r3, [pc, #20]	@ (8018bf0 <prvIdleTask+0x2c>)
 8018bda:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8018bde:	601a      	str	r2, [r3, #0]
 8018be0:	f3bf 8f4f 	dsb	sy
 8018be4:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8018be8:	e7f0      	b.n	8018bcc <prvIdleTask+0x8>
 8018bea:	bf00      	nop
 8018bec:	20000370 	.word	0x20000370
 8018bf0:	e000ed04 	.word	0xe000ed04

08018bf4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8018bf4:	b580      	push	{r7, lr}
 8018bf6:	b082      	sub	sp, #8
 8018bf8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018bfa:	2300      	movs	r3, #0
 8018bfc:	607b      	str	r3, [r7, #4]
 8018bfe:	e00c      	b.n	8018c1a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8018c00:	687a      	ldr	r2, [r7, #4]
 8018c02:	4613      	mov	r3, r2
 8018c04:	009b      	lsls	r3, r3, #2
 8018c06:	4413      	add	r3, r2
 8018c08:	009b      	lsls	r3, r3, #2
 8018c0a:	4a12      	ldr	r2, [pc, #72]	@ (8018c54 <prvInitialiseTaskLists+0x60>)
 8018c0c:	4413      	add	r3, r2
 8018c0e:	4618      	mov	r0, r3
 8018c10:	f7ff fbae 	bl	8018370 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8018c14:	687b      	ldr	r3, [r7, #4]
 8018c16:	3301      	adds	r3, #1
 8018c18:	607b      	str	r3, [r7, #4]
 8018c1a:	687b      	ldr	r3, [r7, #4]
 8018c1c:	2b06      	cmp	r3, #6
 8018c1e:	d9ef      	bls.n	8018c00 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8018c20:	480d      	ldr	r0, [pc, #52]	@ (8018c58 <prvInitialiseTaskLists+0x64>)
 8018c22:	f7ff fba5 	bl	8018370 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8018c26:	480d      	ldr	r0, [pc, #52]	@ (8018c5c <prvInitialiseTaskLists+0x68>)
 8018c28:	f7ff fba2 	bl	8018370 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8018c2c:	480c      	ldr	r0, [pc, #48]	@ (8018c60 <prvInitialiseTaskLists+0x6c>)
 8018c2e:	f7ff fb9f 	bl	8018370 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8018c32:	480c      	ldr	r0, [pc, #48]	@ (8018c64 <prvInitialiseTaskLists+0x70>)
 8018c34:	f7ff fb9c 	bl	8018370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8018c38:	480b      	ldr	r0, [pc, #44]	@ (8018c68 <prvInitialiseTaskLists+0x74>)
 8018c3a:	f7ff fb99 	bl	8018370 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8018c3e:	4b0b      	ldr	r3, [pc, #44]	@ (8018c6c <prvInitialiseTaskLists+0x78>)
 8018c40:	4a05      	ldr	r2, [pc, #20]	@ (8018c58 <prvInitialiseTaskLists+0x64>)
 8018c42:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8018c44:	4b0a      	ldr	r3, [pc, #40]	@ (8018c70 <prvInitialiseTaskLists+0x7c>)
 8018c46:	4a05      	ldr	r2, [pc, #20]	@ (8018c5c <prvInitialiseTaskLists+0x68>)
 8018c48:	601a      	str	r2, [r3, #0]
}
 8018c4a:	bf00      	nop
 8018c4c:	3708      	adds	r7, #8
 8018c4e:	46bd      	mov	sp, r7
 8018c50:	bd80      	pop	{r7, pc}
 8018c52:	bf00      	nop
 8018c54:	20000370 	.word	0x20000370
 8018c58:	200003fc 	.word	0x200003fc
 8018c5c:	20000410 	.word	0x20000410
 8018c60:	2000042c 	.word	0x2000042c
 8018c64:	20000440 	.word	0x20000440
 8018c68:	20000458 	.word	0x20000458
 8018c6c:	20000424 	.word	0x20000424
 8018c70:	20000428 	.word	0x20000428

08018c74 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8018c74:	b580      	push	{r7, lr}
 8018c76:	b082      	sub	sp, #8
 8018c78:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018c7a:	e019      	b.n	8018cb0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8018c7c:	f000 f9ec 	bl	8019058 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018c80:	4b10      	ldr	r3, [pc, #64]	@ (8018cc4 <prvCheckTasksWaitingTermination+0x50>)
 8018c82:	68db      	ldr	r3, [r3, #12]
 8018c84:	68db      	ldr	r3, [r3, #12]
 8018c86:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8018c88:	687b      	ldr	r3, [r7, #4]
 8018c8a:	3304      	adds	r3, #4
 8018c8c:	4618      	mov	r0, r3
 8018c8e:	f7ff fbf9 	bl	8018484 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8018c92:	4b0d      	ldr	r3, [pc, #52]	@ (8018cc8 <prvCheckTasksWaitingTermination+0x54>)
 8018c94:	681b      	ldr	r3, [r3, #0]
 8018c96:	3b01      	subs	r3, #1
 8018c98:	4a0b      	ldr	r2, [pc, #44]	@ (8018cc8 <prvCheckTasksWaitingTermination+0x54>)
 8018c9a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8018c9c:	4b0b      	ldr	r3, [pc, #44]	@ (8018ccc <prvCheckTasksWaitingTermination+0x58>)
 8018c9e:	681b      	ldr	r3, [r3, #0]
 8018ca0:	3b01      	subs	r3, #1
 8018ca2:	4a0a      	ldr	r2, [pc, #40]	@ (8018ccc <prvCheckTasksWaitingTermination+0x58>)
 8018ca4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8018ca6:	f000 fa09 	bl	80190bc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8018caa:	6878      	ldr	r0, [r7, #4]
 8018cac:	f000 f810 	bl	8018cd0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8018cb0:	4b06      	ldr	r3, [pc, #24]	@ (8018ccc <prvCheckTasksWaitingTermination+0x58>)
 8018cb2:	681b      	ldr	r3, [r3, #0]
 8018cb4:	2b00      	cmp	r3, #0
 8018cb6:	d1e1      	bne.n	8018c7c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8018cb8:	bf00      	nop
 8018cba:	bf00      	nop
 8018cbc:	3708      	adds	r7, #8
 8018cbe:	46bd      	mov	sp, r7
 8018cc0:	bd80      	pop	{r7, pc}
 8018cc2:	bf00      	nop
 8018cc4:	20000440 	.word	0x20000440
 8018cc8:	2000046c 	.word	0x2000046c
 8018ccc:	20000454 	.word	0x20000454

08018cd0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8018cd0:	b580      	push	{r7, lr}
 8018cd2:	b082      	sub	sp, #8
 8018cd4:	af00      	add	r7, sp, #0
 8018cd6:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8018cd8:	687b      	ldr	r3, [r7, #4]
 8018cda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018cdc:	4618      	mov	r0, r3
 8018cde:	f000 faad 	bl	801923c <vPortFree>
			vPortFree( pxTCB );
 8018ce2:	6878      	ldr	r0, [r7, #4]
 8018ce4:	f000 faaa 	bl	801923c <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8018ce8:	bf00      	nop
 8018cea:	3708      	adds	r7, #8
 8018cec:	46bd      	mov	sp, r7
 8018cee:	bd80      	pop	{r7, pc}

08018cf0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8018cf0:	b480      	push	{r7}
 8018cf2:	b083      	sub	sp, #12
 8018cf4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8018cf6:	4b0c      	ldr	r3, [pc, #48]	@ (8018d28 <prvResetNextTaskUnblockTime+0x38>)
 8018cf8:	681b      	ldr	r3, [r3, #0]
 8018cfa:	681b      	ldr	r3, [r3, #0]
 8018cfc:	2b00      	cmp	r3, #0
 8018cfe:	d104      	bne.n	8018d0a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8018d00:	4b0a      	ldr	r3, [pc, #40]	@ (8018d2c <prvResetNextTaskUnblockTime+0x3c>)
 8018d02:	f04f 32ff 	mov.w	r2, #4294967295
 8018d06:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8018d08:	e008      	b.n	8018d1c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8018d0a:	4b07      	ldr	r3, [pc, #28]	@ (8018d28 <prvResetNextTaskUnblockTime+0x38>)
 8018d0c:	681b      	ldr	r3, [r3, #0]
 8018d0e:	68db      	ldr	r3, [r3, #12]
 8018d10:	68db      	ldr	r3, [r3, #12]
 8018d12:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8018d14:	687b      	ldr	r3, [r7, #4]
 8018d16:	685b      	ldr	r3, [r3, #4]
 8018d18:	4a04      	ldr	r2, [pc, #16]	@ (8018d2c <prvResetNextTaskUnblockTime+0x3c>)
 8018d1a:	6013      	str	r3, [r2, #0]
}
 8018d1c:	bf00      	nop
 8018d1e:	370c      	adds	r7, #12
 8018d20:	46bd      	mov	sp, r7
 8018d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018d26:	4770      	bx	lr
 8018d28:	20000424 	.word	0x20000424
 8018d2c:	2000048c 	.word	0x2000048c

08018d30 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8018d30:	b580      	push	{r7, lr}
 8018d32:	b084      	sub	sp, #16
 8018d34:	af00      	add	r7, sp, #0
 8018d36:	6078      	str	r0, [r7, #4]
 8018d38:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8018d3a:	4b29      	ldr	r3, [pc, #164]	@ (8018de0 <prvAddCurrentTaskToDelayedList+0xb0>)
 8018d3c:	681b      	ldr	r3, [r3, #0]
 8018d3e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8018d40:	4b28      	ldr	r3, [pc, #160]	@ (8018de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d42:	681b      	ldr	r3, [r3, #0]
 8018d44:	3304      	adds	r3, #4
 8018d46:	4618      	mov	r0, r3
 8018d48:	f7ff fb9c 	bl	8018484 <uxListRemove>
 8018d4c:	4603      	mov	r3, r0
 8018d4e:	2b00      	cmp	r3, #0
 8018d50:	d10b      	bne.n	8018d6a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8018d52:	4b24      	ldr	r3, [pc, #144]	@ (8018de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d54:	681b      	ldr	r3, [r3, #0]
 8018d56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018d58:	2201      	movs	r2, #1
 8018d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8018d5e:	43da      	mvns	r2, r3
 8018d60:	4b21      	ldr	r3, [pc, #132]	@ (8018de8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018d62:	681b      	ldr	r3, [r3, #0]
 8018d64:	4013      	ands	r3, r2
 8018d66:	4a20      	ldr	r2, [pc, #128]	@ (8018de8 <prvAddCurrentTaskToDelayedList+0xb8>)
 8018d68:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8018d6a:	687b      	ldr	r3, [r7, #4]
 8018d6c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018d70:	d10a      	bne.n	8018d88 <prvAddCurrentTaskToDelayedList+0x58>
 8018d72:	683b      	ldr	r3, [r7, #0]
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d007      	beq.n	8018d88 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018d78:	4b1a      	ldr	r3, [pc, #104]	@ (8018de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d7a:	681b      	ldr	r3, [r3, #0]
 8018d7c:	3304      	adds	r3, #4
 8018d7e:	4619      	mov	r1, r3
 8018d80:	481a      	ldr	r0, [pc, #104]	@ (8018dec <prvAddCurrentTaskToDelayedList+0xbc>)
 8018d82:	f7ff fb22 	bl	80183ca <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8018d86:	e026      	b.n	8018dd6 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8018d88:	68fa      	ldr	r2, [r7, #12]
 8018d8a:	687b      	ldr	r3, [r7, #4]
 8018d8c:	4413      	add	r3, r2
 8018d8e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8018d90:	4b14      	ldr	r3, [pc, #80]	@ (8018de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018d92:	681b      	ldr	r3, [r3, #0]
 8018d94:	68ba      	ldr	r2, [r7, #8]
 8018d96:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8018d98:	68ba      	ldr	r2, [r7, #8]
 8018d9a:	68fb      	ldr	r3, [r7, #12]
 8018d9c:	429a      	cmp	r2, r3
 8018d9e:	d209      	bcs.n	8018db4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018da0:	4b13      	ldr	r3, [pc, #76]	@ (8018df0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8018da2:	681a      	ldr	r2, [r3, #0]
 8018da4:	4b0f      	ldr	r3, [pc, #60]	@ (8018de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018da6:	681b      	ldr	r3, [r3, #0]
 8018da8:	3304      	adds	r3, #4
 8018daa:	4619      	mov	r1, r3
 8018dac:	4610      	mov	r0, r2
 8018dae:	f7ff fb30 	bl	8018412 <vListInsert>
}
 8018db2:	e010      	b.n	8018dd6 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8018db4:	4b0f      	ldr	r3, [pc, #60]	@ (8018df4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8018db6:	681a      	ldr	r2, [r3, #0]
 8018db8:	4b0a      	ldr	r3, [pc, #40]	@ (8018de4 <prvAddCurrentTaskToDelayedList+0xb4>)
 8018dba:	681b      	ldr	r3, [r3, #0]
 8018dbc:	3304      	adds	r3, #4
 8018dbe:	4619      	mov	r1, r3
 8018dc0:	4610      	mov	r0, r2
 8018dc2:	f7ff fb26 	bl	8018412 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8018dc6:	4b0c      	ldr	r3, [pc, #48]	@ (8018df8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018dc8:	681b      	ldr	r3, [r3, #0]
 8018dca:	68ba      	ldr	r2, [r7, #8]
 8018dcc:	429a      	cmp	r2, r3
 8018dce:	d202      	bcs.n	8018dd6 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8018dd0:	4a09      	ldr	r2, [pc, #36]	@ (8018df8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8018dd2:	68bb      	ldr	r3, [r7, #8]
 8018dd4:	6013      	str	r3, [r2, #0]
}
 8018dd6:	bf00      	nop
 8018dd8:	3710      	adds	r7, #16
 8018dda:	46bd      	mov	sp, r7
 8018ddc:	bd80      	pop	{r7, pc}
 8018dde:	bf00      	nop
 8018de0:	20000470 	.word	0x20000470
 8018de4:	2000036c 	.word	0x2000036c
 8018de8:	20000474 	.word	0x20000474
 8018dec:	20000458 	.word	0x20000458
 8018df0:	20000428 	.word	0x20000428
 8018df4:	20000424 	.word	0x20000424
 8018df8:	2000048c 	.word	0x2000048c

08018dfc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8018dfc:	b480      	push	{r7}
 8018dfe:	b085      	sub	sp, #20
 8018e00:	af00      	add	r7, sp, #0
 8018e02:	60f8      	str	r0, [r7, #12]
 8018e04:	60b9      	str	r1, [r7, #8]
 8018e06:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8018e08:	68fb      	ldr	r3, [r7, #12]
 8018e0a:	3b04      	subs	r3, #4
 8018e0c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8018e0e:	68fb      	ldr	r3, [r7, #12]
 8018e10:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8018e14:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e16:	68fb      	ldr	r3, [r7, #12]
 8018e18:	3b04      	subs	r3, #4
 8018e1a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8018e1c:	68bb      	ldr	r3, [r7, #8]
 8018e1e:	f023 0201 	bic.w	r2, r3, #1
 8018e22:	68fb      	ldr	r3, [r7, #12]
 8018e24:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8018e26:	68fb      	ldr	r3, [r7, #12]
 8018e28:	3b04      	subs	r3, #4
 8018e2a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8018e2c:	4a0c      	ldr	r2, [pc, #48]	@ (8018e60 <pxPortInitialiseStack+0x64>)
 8018e2e:	68fb      	ldr	r3, [r7, #12]
 8018e30:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8018e32:	68fb      	ldr	r3, [r7, #12]
 8018e34:	3b14      	subs	r3, #20
 8018e36:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8018e38:	687a      	ldr	r2, [r7, #4]
 8018e3a:	68fb      	ldr	r3, [r7, #12]
 8018e3c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8018e3e:	68fb      	ldr	r3, [r7, #12]
 8018e40:	3b04      	subs	r3, #4
 8018e42:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8018e44:	68fb      	ldr	r3, [r7, #12]
 8018e46:	f06f 0202 	mvn.w	r2, #2
 8018e4a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8018e4c:	68fb      	ldr	r3, [r7, #12]
 8018e4e:	3b20      	subs	r3, #32
 8018e50:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8018e52:	68fb      	ldr	r3, [r7, #12]
}
 8018e54:	4618      	mov	r0, r3
 8018e56:	3714      	adds	r7, #20
 8018e58:	46bd      	mov	sp, r7
 8018e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018e5e:	4770      	bx	lr
 8018e60:	08018e65 	.word	0x08018e65

08018e64 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8018e64:	b480      	push	{r7}
 8018e66:	b085      	sub	sp, #20
 8018e68:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8018e6a:	2300      	movs	r3, #0
 8018e6c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8018e6e:	4b13      	ldr	r3, [pc, #76]	@ (8018ebc <prvTaskExitError+0x58>)
 8018e70:	681b      	ldr	r3, [r3, #0]
 8018e72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8018e76:	d00b      	beq.n	8018e90 <prvTaskExitError+0x2c>
	__asm volatile
 8018e78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e7c:	f383 8811 	msr	BASEPRI, r3
 8018e80:	f3bf 8f6f 	isb	sy
 8018e84:	f3bf 8f4f 	dsb	sy
 8018e88:	60fb      	str	r3, [r7, #12]
}
 8018e8a:	bf00      	nop
 8018e8c:	bf00      	nop
 8018e8e:	e7fd      	b.n	8018e8c <prvTaskExitError+0x28>
	__asm volatile
 8018e90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018e94:	f383 8811 	msr	BASEPRI, r3
 8018e98:	f3bf 8f6f 	isb	sy
 8018e9c:	f3bf 8f4f 	dsb	sy
 8018ea0:	60bb      	str	r3, [r7, #8]
}
 8018ea2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8018ea4:	bf00      	nop
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	2b00      	cmp	r3, #0
 8018eaa:	d0fc      	beq.n	8018ea6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8018eac:	bf00      	nop
 8018eae:	bf00      	nop
 8018eb0:	3714      	adds	r7, #20
 8018eb2:	46bd      	mov	sp, r7
 8018eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8018eb8:	4770      	bx	lr
 8018eba:	bf00      	nop
 8018ebc:	2000002c 	.word	0x2000002c

08018ec0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8018ec0:	4b07      	ldr	r3, [pc, #28]	@ (8018ee0 <pxCurrentTCBConst2>)
 8018ec2:	6819      	ldr	r1, [r3, #0]
 8018ec4:	6808      	ldr	r0, [r1, #0]
 8018ec6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8018eca:	f380 8809 	msr	PSP, r0
 8018ece:	f3bf 8f6f 	isb	sy
 8018ed2:	f04f 0000 	mov.w	r0, #0
 8018ed6:	f380 8811 	msr	BASEPRI, r0
 8018eda:	4770      	bx	lr
 8018edc:	f3af 8000 	nop.w

08018ee0 <pxCurrentTCBConst2>:
 8018ee0:	2000036c 	.word	0x2000036c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8018ee4:	bf00      	nop
 8018ee6:	bf00      	nop

08018ee8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8018ee8:	4808      	ldr	r0, [pc, #32]	@ (8018f0c <prvPortStartFirstTask+0x24>)
 8018eea:	6800      	ldr	r0, [r0, #0]
 8018eec:	6800      	ldr	r0, [r0, #0]
 8018eee:	f380 8808 	msr	MSP, r0
 8018ef2:	f04f 0000 	mov.w	r0, #0
 8018ef6:	f380 8814 	msr	CONTROL, r0
 8018efa:	b662      	cpsie	i
 8018efc:	b661      	cpsie	f
 8018efe:	f3bf 8f4f 	dsb	sy
 8018f02:	f3bf 8f6f 	isb	sy
 8018f06:	df00      	svc	0
 8018f08:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8018f0a:	bf00      	nop
 8018f0c:	e000ed08 	.word	0xe000ed08

08018f10 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8018f10:	b580      	push	{r7, lr}
 8018f12:	b086      	sub	sp, #24
 8018f14:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8018f16:	4b47      	ldr	r3, [pc, #284]	@ (8019034 <xPortStartScheduler+0x124>)
 8018f18:	681b      	ldr	r3, [r3, #0]
 8018f1a:	4a47      	ldr	r2, [pc, #284]	@ (8019038 <xPortStartScheduler+0x128>)
 8018f1c:	4293      	cmp	r3, r2
 8018f1e:	d10b      	bne.n	8018f38 <xPortStartScheduler+0x28>
	__asm volatile
 8018f20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f24:	f383 8811 	msr	BASEPRI, r3
 8018f28:	f3bf 8f6f 	isb	sy
 8018f2c:	f3bf 8f4f 	dsb	sy
 8018f30:	613b      	str	r3, [r7, #16]
}
 8018f32:	bf00      	nop
 8018f34:	bf00      	nop
 8018f36:	e7fd      	b.n	8018f34 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8018f38:	4b3e      	ldr	r3, [pc, #248]	@ (8019034 <xPortStartScheduler+0x124>)
 8018f3a:	681b      	ldr	r3, [r3, #0]
 8018f3c:	4a3f      	ldr	r2, [pc, #252]	@ (801903c <xPortStartScheduler+0x12c>)
 8018f3e:	4293      	cmp	r3, r2
 8018f40:	d10b      	bne.n	8018f5a <xPortStartScheduler+0x4a>
	__asm volatile
 8018f42:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018f46:	f383 8811 	msr	BASEPRI, r3
 8018f4a:	f3bf 8f6f 	isb	sy
 8018f4e:	f3bf 8f4f 	dsb	sy
 8018f52:	60fb      	str	r3, [r7, #12]
}
 8018f54:	bf00      	nop
 8018f56:	bf00      	nop
 8018f58:	e7fd      	b.n	8018f56 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8018f5a:	4b39      	ldr	r3, [pc, #228]	@ (8019040 <xPortStartScheduler+0x130>)
 8018f5c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8018f5e:	697b      	ldr	r3, [r7, #20]
 8018f60:	781b      	ldrb	r3, [r3, #0]
 8018f62:	b2db      	uxtb	r3, r3
 8018f64:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8018f66:	697b      	ldr	r3, [r7, #20]
 8018f68:	22ff      	movs	r2, #255	@ 0xff
 8018f6a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8018f6c:	697b      	ldr	r3, [r7, #20]
 8018f6e:	781b      	ldrb	r3, [r3, #0]
 8018f70:	b2db      	uxtb	r3, r3
 8018f72:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8018f74:	78fb      	ldrb	r3, [r7, #3]
 8018f76:	b2db      	uxtb	r3, r3
 8018f78:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8018f7c:	b2da      	uxtb	r2, r3
 8018f7e:	4b31      	ldr	r3, [pc, #196]	@ (8019044 <xPortStartScheduler+0x134>)
 8018f80:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8018f82:	4b31      	ldr	r3, [pc, #196]	@ (8019048 <xPortStartScheduler+0x138>)
 8018f84:	2207      	movs	r2, #7
 8018f86:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f88:	e009      	b.n	8018f9e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8018f8a:	4b2f      	ldr	r3, [pc, #188]	@ (8019048 <xPortStartScheduler+0x138>)
 8018f8c:	681b      	ldr	r3, [r3, #0]
 8018f8e:	3b01      	subs	r3, #1
 8018f90:	4a2d      	ldr	r2, [pc, #180]	@ (8019048 <xPortStartScheduler+0x138>)
 8018f92:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8018f94:	78fb      	ldrb	r3, [r7, #3]
 8018f96:	b2db      	uxtb	r3, r3
 8018f98:	005b      	lsls	r3, r3, #1
 8018f9a:	b2db      	uxtb	r3, r3
 8018f9c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8018f9e:	78fb      	ldrb	r3, [r7, #3]
 8018fa0:	b2db      	uxtb	r3, r3
 8018fa2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8018fa6:	2b80      	cmp	r3, #128	@ 0x80
 8018fa8:	d0ef      	beq.n	8018f8a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8018faa:	4b27      	ldr	r3, [pc, #156]	@ (8019048 <xPortStartScheduler+0x138>)
 8018fac:	681b      	ldr	r3, [r3, #0]
 8018fae:	f1c3 0307 	rsb	r3, r3, #7
 8018fb2:	2b04      	cmp	r3, #4
 8018fb4:	d00b      	beq.n	8018fce <xPortStartScheduler+0xbe>
	__asm volatile
 8018fb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8018fba:	f383 8811 	msr	BASEPRI, r3
 8018fbe:	f3bf 8f6f 	isb	sy
 8018fc2:	f3bf 8f4f 	dsb	sy
 8018fc6:	60bb      	str	r3, [r7, #8]
}
 8018fc8:	bf00      	nop
 8018fca:	bf00      	nop
 8018fcc:	e7fd      	b.n	8018fca <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8018fce:	4b1e      	ldr	r3, [pc, #120]	@ (8019048 <xPortStartScheduler+0x138>)
 8018fd0:	681b      	ldr	r3, [r3, #0]
 8018fd2:	021b      	lsls	r3, r3, #8
 8018fd4:	4a1c      	ldr	r2, [pc, #112]	@ (8019048 <xPortStartScheduler+0x138>)
 8018fd6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8018fd8:	4b1b      	ldr	r3, [pc, #108]	@ (8019048 <xPortStartScheduler+0x138>)
 8018fda:	681b      	ldr	r3, [r3, #0]
 8018fdc:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8018fe0:	4a19      	ldr	r2, [pc, #100]	@ (8019048 <xPortStartScheduler+0x138>)
 8018fe2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8018fe4:	687b      	ldr	r3, [r7, #4]
 8018fe6:	b2da      	uxtb	r2, r3
 8018fe8:	697b      	ldr	r3, [r7, #20]
 8018fea:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8018fec:	4b17      	ldr	r3, [pc, #92]	@ (801904c <xPortStartScheduler+0x13c>)
 8018fee:	681b      	ldr	r3, [r3, #0]
 8018ff0:	4a16      	ldr	r2, [pc, #88]	@ (801904c <xPortStartScheduler+0x13c>)
 8018ff2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8018ff6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8018ff8:	4b14      	ldr	r3, [pc, #80]	@ (801904c <xPortStartScheduler+0x13c>)
 8018ffa:	681b      	ldr	r3, [r3, #0]
 8018ffc:	4a13      	ldr	r2, [pc, #76]	@ (801904c <xPortStartScheduler+0x13c>)
 8018ffe:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8019002:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8019004:	f000 f8da 	bl	80191bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8019008:	4b11      	ldr	r3, [pc, #68]	@ (8019050 <xPortStartScheduler+0x140>)
 801900a:	2200      	movs	r2, #0
 801900c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801900e:	f000 f8f9 	bl	8019204 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8019012:	4b10      	ldr	r3, [pc, #64]	@ (8019054 <xPortStartScheduler+0x144>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	4a0f      	ldr	r2, [pc, #60]	@ (8019054 <xPortStartScheduler+0x144>)
 8019018:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 801901c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801901e:	f7ff ff63 	bl	8018ee8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8019022:	f7ff fd73 	bl	8018b0c <vTaskSwitchContext>
	prvTaskExitError();
 8019026:	f7ff ff1d 	bl	8018e64 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 801902a:	2300      	movs	r3, #0
}
 801902c:	4618      	mov	r0, r3
 801902e:	3718      	adds	r7, #24
 8019030:	46bd      	mov	sp, r7
 8019032:	bd80      	pop	{r7, pc}
 8019034:	e000ed00 	.word	0xe000ed00
 8019038:	410fc271 	.word	0x410fc271
 801903c:	410fc270 	.word	0x410fc270
 8019040:	e000e400 	.word	0xe000e400
 8019044:	20000498 	.word	0x20000498
 8019048:	2000049c 	.word	0x2000049c
 801904c:	e000ed20 	.word	0xe000ed20
 8019050:	2000002c 	.word	0x2000002c
 8019054:	e000ef34 	.word	0xe000ef34

08019058 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8019058:	b480      	push	{r7}
 801905a:	b083      	sub	sp, #12
 801905c:	af00      	add	r7, sp, #0
	__asm volatile
 801905e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019062:	f383 8811 	msr	BASEPRI, r3
 8019066:	f3bf 8f6f 	isb	sy
 801906a:	f3bf 8f4f 	dsb	sy
 801906e:	607b      	str	r3, [r7, #4]
}
 8019070:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8019072:	4b10      	ldr	r3, [pc, #64]	@ (80190b4 <vPortEnterCritical+0x5c>)
 8019074:	681b      	ldr	r3, [r3, #0]
 8019076:	3301      	adds	r3, #1
 8019078:	4a0e      	ldr	r2, [pc, #56]	@ (80190b4 <vPortEnterCritical+0x5c>)
 801907a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 801907c:	4b0d      	ldr	r3, [pc, #52]	@ (80190b4 <vPortEnterCritical+0x5c>)
 801907e:	681b      	ldr	r3, [r3, #0]
 8019080:	2b01      	cmp	r3, #1
 8019082:	d110      	bne.n	80190a6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8019084:	4b0c      	ldr	r3, [pc, #48]	@ (80190b8 <vPortEnterCritical+0x60>)
 8019086:	681b      	ldr	r3, [r3, #0]
 8019088:	b2db      	uxtb	r3, r3
 801908a:	2b00      	cmp	r3, #0
 801908c:	d00b      	beq.n	80190a6 <vPortEnterCritical+0x4e>
	__asm volatile
 801908e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019092:	f383 8811 	msr	BASEPRI, r3
 8019096:	f3bf 8f6f 	isb	sy
 801909a:	f3bf 8f4f 	dsb	sy
 801909e:	603b      	str	r3, [r7, #0]
}
 80190a0:	bf00      	nop
 80190a2:	bf00      	nop
 80190a4:	e7fd      	b.n	80190a2 <vPortEnterCritical+0x4a>
	}
}
 80190a6:	bf00      	nop
 80190a8:	370c      	adds	r7, #12
 80190aa:	46bd      	mov	sp, r7
 80190ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80190b0:	4770      	bx	lr
 80190b2:	bf00      	nop
 80190b4:	2000002c 	.word	0x2000002c
 80190b8:	e000ed04 	.word	0xe000ed04

080190bc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80190bc:	b480      	push	{r7}
 80190be:	b083      	sub	sp, #12
 80190c0:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80190c2:	4b12      	ldr	r3, [pc, #72]	@ (801910c <vPortExitCritical+0x50>)
 80190c4:	681b      	ldr	r3, [r3, #0]
 80190c6:	2b00      	cmp	r3, #0
 80190c8:	d10b      	bne.n	80190e2 <vPortExitCritical+0x26>
	__asm volatile
 80190ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80190ce:	f383 8811 	msr	BASEPRI, r3
 80190d2:	f3bf 8f6f 	isb	sy
 80190d6:	f3bf 8f4f 	dsb	sy
 80190da:	607b      	str	r3, [r7, #4]
}
 80190dc:	bf00      	nop
 80190de:	bf00      	nop
 80190e0:	e7fd      	b.n	80190de <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80190e2:	4b0a      	ldr	r3, [pc, #40]	@ (801910c <vPortExitCritical+0x50>)
 80190e4:	681b      	ldr	r3, [r3, #0]
 80190e6:	3b01      	subs	r3, #1
 80190e8:	4a08      	ldr	r2, [pc, #32]	@ (801910c <vPortExitCritical+0x50>)
 80190ea:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80190ec:	4b07      	ldr	r3, [pc, #28]	@ (801910c <vPortExitCritical+0x50>)
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d105      	bne.n	8019100 <vPortExitCritical+0x44>
 80190f4:	2300      	movs	r3, #0
 80190f6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80190f8:	683b      	ldr	r3, [r7, #0]
 80190fa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80190fe:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8019100:	bf00      	nop
 8019102:	370c      	adds	r7, #12
 8019104:	46bd      	mov	sp, r7
 8019106:	f85d 7b04 	ldr.w	r7, [sp], #4
 801910a:	4770      	bx	lr
 801910c:	2000002c 	.word	0x2000002c

08019110 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8019110:	f3ef 8009 	mrs	r0, PSP
 8019114:	f3bf 8f6f 	isb	sy
 8019118:	4b15      	ldr	r3, [pc, #84]	@ (8019170 <pxCurrentTCBConst>)
 801911a:	681a      	ldr	r2, [r3, #0]
 801911c:	f01e 0f10 	tst.w	lr, #16
 8019120:	bf08      	it	eq
 8019122:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8019126:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801912a:	6010      	str	r0, [r2, #0]
 801912c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8019130:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8019134:	f380 8811 	msr	BASEPRI, r0
 8019138:	f3bf 8f4f 	dsb	sy
 801913c:	f3bf 8f6f 	isb	sy
 8019140:	f7ff fce4 	bl	8018b0c <vTaskSwitchContext>
 8019144:	f04f 0000 	mov.w	r0, #0
 8019148:	f380 8811 	msr	BASEPRI, r0
 801914c:	bc09      	pop	{r0, r3}
 801914e:	6819      	ldr	r1, [r3, #0]
 8019150:	6808      	ldr	r0, [r1, #0]
 8019152:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019156:	f01e 0f10 	tst.w	lr, #16
 801915a:	bf08      	it	eq
 801915c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8019160:	f380 8809 	msr	PSP, r0
 8019164:	f3bf 8f6f 	isb	sy
 8019168:	4770      	bx	lr
 801916a:	bf00      	nop
 801916c:	f3af 8000 	nop.w

08019170 <pxCurrentTCBConst>:
 8019170:	2000036c 	.word	0x2000036c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8019174:	bf00      	nop
 8019176:	bf00      	nop

08019178 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b082      	sub	sp, #8
 801917c:	af00      	add	r7, sp, #0
	__asm volatile
 801917e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8019182:	f383 8811 	msr	BASEPRI, r3
 8019186:	f3bf 8f6f 	isb	sy
 801918a:	f3bf 8f4f 	dsb	sy
 801918e:	607b      	str	r3, [r7, #4]
}
 8019190:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8019192:	f7ff fc01 	bl	8018998 <xTaskIncrementTick>
 8019196:	4603      	mov	r3, r0
 8019198:	2b00      	cmp	r3, #0
 801919a:	d003      	beq.n	80191a4 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 801919c:	4b06      	ldr	r3, [pc, #24]	@ (80191b8 <SysTick_Handler+0x40>)
 801919e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80191a2:	601a      	str	r2, [r3, #0]
 80191a4:	2300      	movs	r3, #0
 80191a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80191a8:	683b      	ldr	r3, [r7, #0]
 80191aa:	f383 8811 	msr	BASEPRI, r3
}
 80191ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80191b0:	bf00      	nop
 80191b2:	3708      	adds	r7, #8
 80191b4:	46bd      	mov	sp, r7
 80191b6:	bd80      	pop	{r7, pc}
 80191b8:	e000ed04 	.word	0xe000ed04

080191bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80191bc:	b480      	push	{r7}
 80191be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80191c0:	4b0b      	ldr	r3, [pc, #44]	@ (80191f0 <vPortSetupTimerInterrupt+0x34>)
 80191c2:	2200      	movs	r2, #0
 80191c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80191c6:	4b0b      	ldr	r3, [pc, #44]	@ (80191f4 <vPortSetupTimerInterrupt+0x38>)
 80191c8:	2200      	movs	r2, #0
 80191ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80191cc:	4b0a      	ldr	r3, [pc, #40]	@ (80191f8 <vPortSetupTimerInterrupt+0x3c>)
 80191ce:	681b      	ldr	r3, [r3, #0]
 80191d0:	4a0a      	ldr	r2, [pc, #40]	@ (80191fc <vPortSetupTimerInterrupt+0x40>)
 80191d2:	fba2 2303 	umull	r2, r3, r2, r3
 80191d6:	099b      	lsrs	r3, r3, #6
 80191d8:	4a09      	ldr	r2, [pc, #36]	@ (8019200 <vPortSetupTimerInterrupt+0x44>)
 80191da:	3b01      	subs	r3, #1
 80191dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80191de:	4b04      	ldr	r3, [pc, #16]	@ (80191f0 <vPortSetupTimerInterrupt+0x34>)
 80191e0:	2207      	movs	r2, #7
 80191e2:	601a      	str	r2, [r3, #0]
}
 80191e4:	bf00      	nop
 80191e6:	46bd      	mov	sp, r7
 80191e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80191ec:	4770      	bx	lr
 80191ee:	bf00      	nop
 80191f0:	e000e010 	.word	0xe000e010
 80191f4:	e000e018 	.word	0xe000e018
 80191f8:	20000000 	.word	0x20000000
 80191fc:	10624dd3 	.word	0x10624dd3
 8019200:	e000e014 	.word	0xe000e014

08019204 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8019204:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8019214 <vPortEnableVFP+0x10>
 8019208:	6801      	ldr	r1, [r0, #0]
 801920a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 801920e:	6001      	str	r1, [r0, #0]
 8019210:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8019212:	bf00      	nop
 8019214:	e000ed88 	.word	0xe000ed88

08019218 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8019218:	b580      	push	{r7, lr}
 801921a:	b084      	sub	sp, #16
 801921c:	af00      	add	r7, sp, #0
 801921e:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 8019220:	f7ff fb0e 	bl	8018840 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 8019224:	6878      	ldr	r0, [r7, #4]
 8019226:	f000 f81f 	bl	8019268 <malloc>
 801922a:	4603      	mov	r3, r0
 801922c:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 801922e:	f7ff fb15 	bl	801885c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 8019232:	68fb      	ldr	r3, [r7, #12]
}
 8019234:	4618      	mov	r0, r3
 8019236:	3710      	adds	r7, #16
 8019238:	46bd      	mov	sp, r7
 801923a:	bd80      	pop	{r7, pc}

0801923c <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 801923c:	b580      	push	{r7, lr}
 801923e:	b082      	sub	sp, #8
 8019240:	af00      	add	r7, sp, #0
 8019242:	6078      	str	r0, [r7, #4]
	if( pv )
 8019244:	687b      	ldr	r3, [r7, #4]
 8019246:	2b00      	cmp	r3, #0
 8019248:	d006      	beq.n	8019258 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 801924a:	f7ff faf9 	bl	8018840 <vTaskSuspendAll>
		{
			free( pv );
 801924e:	6878      	ldr	r0, [r7, #4]
 8019250:	f000 f812 	bl	8019278 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8019254:	f7ff fb02 	bl	801885c <xTaskResumeAll>
	}
}
 8019258:	bf00      	nop
 801925a:	3708      	adds	r7, #8
 801925c:	46bd      	mov	sp, r7
 801925e:	bd80      	pop	{r7, pc}

08019260 <atoi>:
 8019260:	220a      	movs	r2, #10
 8019262:	2100      	movs	r1, #0
 8019264:	f000 b938 	b.w	80194d8 <strtol>

08019268 <malloc>:
 8019268:	4b02      	ldr	r3, [pc, #8]	@ (8019274 <malloc+0xc>)
 801926a:	4601      	mov	r1, r0
 801926c:	6818      	ldr	r0, [r3, #0]
 801926e:	f000 b82d 	b.w	80192cc <_malloc_r>
 8019272:	bf00      	nop
 8019274:	2000003c 	.word	0x2000003c

08019278 <free>:
 8019278:	4b02      	ldr	r3, [pc, #8]	@ (8019284 <free+0xc>)
 801927a:	4601      	mov	r1, r0
 801927c:	6818      	ldr	r0, [r3, #0]
 801927e:	f000 bd09 	b.w	8019c94 <_free_r>
 8019282:	bf00      	nop
 8019284:	2000003c 	.word	0x2000003c

08019288 <sbrk_aligned>:
 8019288:	b570      	push	{r4, r5, r6, lr}
 801928a:	4e0f      	ldr	r6, [pc, #60]	@ (80192c8 <sbrk_aligned+0x40>)
 801928c:	460c      	mov	r4, r1
 801928e:	6831      	ldr	r1, [r6, #0]
 8019290:	4605      	mov	r5, r0
 8019292:	b911      	cbnz	r1, 801929a <sbrk_aligned+0x12>
 8019294:	f000 fc88 	bl	8019ba8 <_sbrk_r>
 8019298:	6030      	str	r0, [r6, #0]
 801929a:	4621      	mov	r1, r4
 801929c:	4628      	mov	r0, r5
 801929e:	f000 fc83 	bl	8019ba8 <_sbrk_r>
 80192a2:	1c43      	adds	r3, r0, #1
 80192a4:	d103      	bne.n	80192ae <sbrk_aligned+0x26>
 80192a6:	f04f 34ff 	mov.w	r4, #4294967295
 80192aa:	4620      	mov	r0, r4
 80192ac:	bd70      	pop	{r4, r5, r6, pc}
 80192ae:	1cc4      	adds	r4, r0, #3
 80192b0:	f024 0403 	bic.w	r4, r4, #3
 80192b4:	42a0      	cmp	r0, r4
 80192b6:	d0f8      	beq.n	80192aa <sbrk_aligned+0x22>
 80192b8:	1a21      	subs	r1, r4, r0
 80192ba:	4628      	mov	r0, r5
 80192bc:	f000 fc74 	bl	8019ba8 <_sbrk_r>
 80192c0:	3001      	adds	r0, #1
 80192c2:	d1f2      	bne.n	80192aa <sbrk_aligned+0x22>
 80192c4:	e7ef      	b.n	80192a6 <sbrk_aligned+0x1e>
 80192c6:	bf00      	nop
 80192c8:	200004a0 	.word	0x200004a0

080192cc <_malloc_r>:
 80192cc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80192d0:	1ccd      	adds	r5, r1, #3
 80192d2:	f025 0503 	bic.w	r5, r5, #3
 80192d6:	3508      	adds	r5, #8
 80192d8:	2d0c      	cmp	r5, #12
 80192da:	bf38      	it	cc
 80192dc:	250c      	movcc	r5, #12
 80192de:	2d00      	cmp	r5, #0
 80192e0:	4606      	mov	r6, r0
 80192e2:	db01      	blt.n	80192e8 <_malloc_r+0x1c>
 80192e4:	42a9      	cmp	r1, r5
 80192e6:	d904      	bls.n	80192f2 <_malloc_r+0x26>
 80192e8:	230c      	movs	r3, #12
 80192ea:	6033      	str	r3, [r6, #0]
 80192ec:	2000      	movs	r0, #0
 80192ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80192f2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80193c8 <_malloc_r+0xfc>
 80192f6:	f000 f869 	bl	80193cc <__malloc_lock>
 80192fa:	f8d8 3000 	ldr.w	r3, [r8]
 80192fe:	461c      	mov	r4, r3
 8019300:	bb44      	cbnz	r4, 8019354 <_malloc_r+0x88>
 8019302:	4629      	mov	r1, r5
 8019304:	4630      	mov	r0, r6
 8019306:	f7ff ffbf 	bl	8019288 <sbrk_aligned>
 801930a:	1c43      	adds	r3, r0, #1
 801930c:	4604      	mov	r4, r0
 801930e:	d158      	bne.n	80193c2 <_malloc_r+0xf6>
 8019310:	f8d8 4000 	ldr.w	r4, [r8]
 8019314:	4627      	mov	r7, r4
 8019316:	2f00      	cmp	r7, #0
 8019318:	d143      	bne.n	80193a2 <_malloc_r+0xd6>
 801931a:	2c00      	cmp	r4, #0
 801931c:	d04b      	beq.n	80193b6 <_malloc_r+0xea>
 801931e:	6823      	ldr	r3, [r4, #0]
 8019320:	4639      	mov	r1, r7
 8019322:	4630      	mov	r0, r6
 8019324:	eb04 0903 	add.w	r9, r4, r3
 8019328:	f000 fc3e 	bl	8019ba8 <_sbrk_r>
 801932c:	4581      	cmp	r9, r0
 801932e:	d142      	bne.n	80193b6 <_malloc_r+0xea>
 8019330:	6821      	ldr	r1, [r4, #0]
 8019332:	1a6d      	subs	r5, r5, r1
 8019334:	4629      	mov	r1, r5
 8019336:	4630      	mov	r0, r6
 8019338:	f7ff ffa6 	bl	8019288 <sbrk_aligned>
 801933c:	3001      	adds	r0, #1
 801933e:	d03a      	beq.n	80193b6 <_malloc_r+0xea>
 8019340:	6823      	ldr	r3, [r4, #0]
 8019342:	442b      	add	r3, r5
 8019344:	6023      	str	r3, [r4, #0]
 8019346:	f8d8 3000 	ldr.w	r3, [r8]
 801934a:	685a      	ldr	r2, [r3, #4]
 801934c:	bb62      	cbnz	r2, 80193a8 <_malloc_r+0xdc>
 801934e:	f8c8 7000 	str.w	r7, [r8]
 8019352:	e00f      	b.n	8019374 <_malloc_r+0xa8>
 8019354:	6822      	ldr	r2, [r4, #0]
 8019356:	1b52      	subs	r2, r2, r5
 8019358:	d420      	bmi.n	801939c <_malloc_r+0xd0>
 801935a:	2a0b      	cmp	r2, #11
 801935c:	d917      	bls.n	801938e <_malloc_r+0xc2>
 801935e:	1961      	adds	r1, r4, r5
 8019360:	42a3      	cmp	r3, r4
 8019362:	6025      	str	r5, [r4, #0]
 8019364:	bf18      	it	ne
 8019366:	6059      	strne	r1, [r3, #4]
 8019368:	6863      	ldr	r3, [r4, #4]
 801936a:	bf08      	it	eq
 801936c:	f8c8 1000 	streq.w	r1, [r8]
 8019370:	5162      	str	r2, [r4, r5]
 8019372:	604b      	str	r3, [r1, #4]
 8019374:	4630      	mov	r0, r6
 8019376:	f000 f82f 	bl	80193d8 <__malloc_unlock>
 801937a:	f104 000b 	add.w	r0, r4, #11
 801937e:	1d23      	adds	r3, r4, #4
 8019380:	f020 0007 	bic.w	r0, r0, #7
 8019384:	1ac2      	subs	r2, r0, r3
 8019386:	bf1c      	itt	ne
 8019388:	1a1b      	subne	r3, r3, r0
 801938a:	50a3      	strne	r3, [r4, r2]
 801938c:	e7af      	b.n	80192ee <_malloc_r+0x22>
 801938e:	6862      	ldr	r2, [r4, #4]
 8019390:	42a3      	cmp	r3, r4
 8019392:	bf0c      	ite	eq
 8019394:	f8c8 2000 	streq.w	r2, [r8]
 8019398:	605a      	strne	r2, [r3, #4]
 801939a:	e7eb      	b.n	8019374 <_malloc_r+0xa8>
 801939c:	4623      	mov	r3, r4
 801939e:	6864      	ldr	r4, [r4, #4]
 80193a0:	e7ae      	b.n	8019300 <_malloc_r+0x34>
 80193a2:	463c      	mov	r4, r7
 80193a4:	687f      	ldr	r7, [r7, #4]
 80193a6:	e7b6      	b.n	8019316 <_malloc_r+0x4a>
 80193a8:	461a      	mov	r2, r3
 80193aa:	685b      	ldr	r3, [r3, #4]
 80193ac:	42a3      	cmp	r3, r4
 80193ae:	d1fb      	bne.n	80193a8 <_malloc_r+0xdc>
 80193b0:	2300      	movs	r3, #0
 80193b2:	6053      	str	r3, [r2, #4]
 80193b4:	e7de      	b.n	8019374 <_malloc_r+0xa8>
 80193b6:	230c      	movs	r3, #12
 80193b8:	6033      	str	r3, [r6, #0]
 80193ba:	4630      	mov	r0, r6
 80193bc:	f000 f80c 	bl	80193d8 <__malloc_unlock>
 80193c0:	e794      	b.n	80192ec <_malloc_r+0x20>
 80193c2:	6005      	str	r5, [r0, #0]
 80193c4:	e7d6      	b.n	8019374 <_malloc_r+0xa8>
 80193c6:	bf00      	nop
 80193c8:	200004a4 	.word	0x200004a4

080193cc <__malloc_lock>:
 80193cc:	4801      	ldr	r0, [pc, #4]	@ (80193d4 <__malloc_lock+0x8>)
 80193ce:	f000 bc38 	b.w	8019c42 <__retarget_lock_acquire_recursive>
 80193d2:	bf00      	nop
 80193d4:	200005e8 	.word	0x200005e8

080193d8 <__malloc_unlock>:
 80193d8:	4801      	ldr	r0, [pc, #4]	@ (80193e0 <__malloc_unlock+0x8>)
 80193da:	f000 bc33 	b.w	8019c44 <__retarget_lock_release_recursive>
 80193de:	bf00      	nop
 80193e0:	200005e8 	.word	0x200005e8

080193e4 <_strtol_l.constprop.0>:
 80193e4:	2b24      	cmp	r3, #36	@ 0x24
 80193e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80193ea:	4686      	mov	lr, r0
 80193ec:	4690      	mov	r8, r2
 80193ee:	d801      	bhi.n	80193f4 <_strtol_l.constprop.0+0x10>
 80193f0:	2b01      	cmp	r3, #1
 80193f2:	d106      	bne.n	8019402 <_strtol_l.constprop.0+0x1e>
 80193f4:	f000 fbfa 	bl	8019bec <__errno>
 80193f8:	2316      	movs	r3, #22
 80193fa:	6003      	str	r3, [r0, #0]
 80193fc:	2000      	movs	r0, #0
 80193fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8019402:	4834      	ldr	r0, [pc, #208]	@ (80194d4 <_strtol_l.constprop.0+0xf0>)
 8019404:	460d      	mov	r5, r1
 8019406:	462a      	mov	r2, r5
 8019408:	f815 4b01 	ldrb.w	r4, [r5], #1
 801940c:	5d06      	ldrb	r6, [r0, r4]
 801940e:	f016 0608 	ands.w	r6, r6, #8
 8019412:	d1f8      	bne.n	8019406 <_strtol_l.constprop.0+0x22>
 8019414:	2c2d      	cmp	r4, #45	@ 0x2d
 8019416:	d12d      	bne.n	8019474 <_strtol_l.constprop.0+0x90>
 8019418:	782c      	ldrb	r4, [r5, #0]
 801941a:	2601      	movs	r6, #1
 801941c:	1c95      	adds	r5, r2, #2
 801941e:	f033 0210 	bics.w	r2, r3, #16
 8019422:	d109      	bne.n	8019438 <_strtol_l.constprop.0+0x54>
 8019424:	2c30      	cmp	r4, #48	@ 0x30
 8019426:	d12a      	bne.n	801947e <_strtol_l.constprop.0+0x9a>
 8019428:	782a      	ldrb	r2, [r5, #0]
 801942a:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 801942e:	2a58      	cmp	r2, #88	@ 0x58
 8019430:	d125      	bne.n	801947e <_strtol_l.constprop.0+0x9a>
 8019432:	786c      	ldrb	r4, [r5, #1]
 8019434:	2310      	movs	r3, #16
 8019436:	3502      	adds	r5, #2
 8019438:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 801943c:	f10c 3cff 	add.w	ip, ip, #4294967295
 8019440:	2200      	movs	r2, #0
 8019442:	fbbc f9f3 	udiv	r9, ip, r3
 8019446:	4610      	mov	r0, r2
 8019448:	fb03 ca19 	mls	sl, r3, r9, ip
 801944c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8019450:	2f09      	cmp	r7, #9
 8019452:	d81b      	bhi.n	801948c <_strtol_l.constprop.0+0xa8>
 8019454:	463c      	mov	r4, r7
 8019456:	42a3      	cmp	r3, r4
 8019458:	dd27      	ble.n	80194aa <_strtol_l.constprop.0+0xc6>
 801945a:	1c57      	adds	r7, r2, #1
 801945c:	d007      	beq.n	801946e <_strtol_l.constprop.0+0x8a>
 801945e:	4581      	cmp	r9, r0
 8019460:	d320      	bcc.n	80194a4 <_strtol_l.constprop.0+0xc0>
 8019462:	d101      	bne.n	8019468 <_strtol_l.constprop.0+0x84>
 8019464:	45a2      	cmp	sl, r4
 8019466:	db1d      	blt.n	80194a4 <_strtol_l.constprop.0+0xc0>
 8019468:	fb00 4003 	mla	r0, r0, r3, r4
 801946c:	2201      	movs	r2, #1
 801946e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8019472:	e7eb      	b.n	801944c <_strtol_l.constprop.0+0x68>
 8019474:	2c2b      	cmp	r4, #43	@ 0x2b
 8019476:	bf04      	itt	eq
 8019478:	782c      	ldrbeq	r4, [r5, #0]
 801947a:	1c95      	addeq	r5, r2, #2
 801947c:	e7cf      	b.n	801941e <_strtol_l.constprop.0+0x3a>
 801947e:	2b00      	cmp	r3, #0
 8019480:	d1da      	bne.n	8019438 <_strtol_l.constprop.0+0x54>
 8019482:	2c30      	cmp	r4, #48	@ 0x30
 8019484:	bf0c      	ite	eq
 8019486:	2308      	moveq	r3, #8
 8019488:	230a      	movne	r3, #10
 801948a:	e7d5      	b.n	8019438 <_strtol_l.constprop.0+0x54>
 801948c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8019490:	2f19      	cmp	r7, #25
 8019492:	d801      	bhi.n	8019498 <_strtol_l.constprop.0+0xb4>
 8019494:	3c37      	subs	r4, #55	@ 0x37
 8019496:	e7de      	b.n	8019456 <_strtol_l.constprop.0+0x72>
 8019498:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 801949c:	2f19      	cmp	r7, #25
 801949e:	d804      	bhi.n	80194aa <_strtol_l.constprop.0+0xc6>
 80194a0:	3c57      	subs	r4, #87	@ 0x57
 80194a2:	e7d8      	b.n	8019456 <_strtol_l.constprop.0+0x72>
 80194a4:	f04f 32ff 	mov.w	r2, #4294967295
 80194a8:	e7e1      	b.n	801946e <_strtol_l.constprop.0+0x8a>
 80194aa:	1c53      	adds	r3, r2, #1
 80194ac:	d108      	bne.n	80194c0 <_strtol_l.constprop.0+0xdc>
 80194ae:	2322      	movs	r3, #34	@ 0x22
 80194b0:	f8ce 3000 	str.w	r3, [lr]
 80194b4:	4660      	mov	r0, ip
 80194b6:	f1b8 0f00 	cmp.w	r8, #0
 80194ba:	d0a0      	beq.n	80193fe <_strtol_l.constprop.0+0x1a>
 80194bc:	1e69      	subs	r1, r5, #1
 80194be:	e006      	b.n	80194ce <_strtol_l.constprop.0+0xea>
 80194c0:	b106      	cbz	r6, 80194c4 <_strtol_l.constprop.0+0xe0>
 80194c2:	4240      	negs	r0, r0
 80194c4:	f1b8 0f00 	cmp.w	r8, #0
 80194c8:	d099      	beq.n	80193fe <_strtol_l.constprop.0+0x1a>
 80194ca:	2a00      	cmp	r2, #0
 80194cc:	d1f6      	bne.n	80194bc <_strtol_l.constprop.0+0xd8>
 80194ce:	f8c8 1000 	str.w	r1, [r8]
 80194d2:	e794      	b.n	80193fe <_strtol_l.constprop.0+0x1a>
 80194d4:	0801b235 	.word	0x0801b235

080194d8 <strtol>:
 80194d8:	4613      	mov	r3, r2
 80194da:	460a      	mov	r2, r1
 80194dc:	4601      	mov	r1, r0
 80194de:	4802      	ldr	r0, [pc, #8]	@ (80194e8 <strtol+0x10>)
 80194e0:	6800      	ldr	r0, [r0, #0]
 80194e2:	f7ff bf7f 	b.w	80193e4 <_strtol_l.constprop.0>
 80194e6:	bf00      	nop
 80194e8:	2000003c 	.word	0x2000003c

080194ec <std>:
 80194ec:	2300      	movs	r3, #0
 80194ee:	b510      	push	{r4, lr}
 80194f0:	4604      	mov	r4, r0
 80194f2:	e9c0 3300 	strd	r3, r3, [r0]
 80194f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80194fa:	6083      	str	r3, [r0, #8]
 80194fc:	8181      	strh	r1, [r0, #12]
 80194fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8019500:	81c2      	strh	r2, [r0, #14]
 8019502:	6183      	str	r3, [r0, #24]
 8019504:	4619      	mov	r1, r3
 8019506:	2208      	movs	r2, #8
 8019508:	305c      	adds	r0, #92	@ 0x5c
 801950a:	f000 fab5 	bl	8019a78 <memset>
 801950e:	4b0d      	ldr	r3, [pc, #52]	@ (8019544 <std+0x58>)
 8019510:	6263      	str	r3, [r4, #36]	@ 0x24
 8019512:	4b0d      	ldr	r3, [pc, #52]	@ (8019548 <std+0x5c>)
 8019514:	62a3      	str	r3, [r4, #40]	@ 0x28
 8019516:	4b0d      	ldr	r3, [pc, #52]	@ (801954c <std+0x60>)
 8019518:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801951a:	4b0d      	ldr	r3, [pc, #52]	@ (8019550 <std+0x64>)
 801951c:	6323      	str	r3, [r4, #48]	@ 0x30
 801951e:	4b0d      	ldr	r3, [pc, #52]	@ (8019554 <std+0x68>)
 8019520:	6224      	str	r4, [r4, #32]
 8019522:	429c      	cmp	r4, r3
 8019524:	d006      	beq.n	8019534 <std+0x48>
 8019526:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 801952a:	4294      	cmp	r4, r2
 801952c:	d002      	beq.n	8019534 <std+0x48>
 801952e:	33d0      	adds	r3, #208	@ 0xd0
 8019530:	429c      	cmp	r4, r3
 8019532:	d105      	bne.n	8019540 <std+0x54>
 8019534:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8019538:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801953c:	f000 bb80 	b.w	8019c40 <__retarget_lock_init_recursive>
 8019540:	bd10      	pop	{r4, pc}
 8019542:	bf00      	nop
 8019544:	080198c9 	.word	0x080198c9
 8019548:	080198eb 	.word	0x080198eb
 801954c:	08019923 	.word	0x08019923
 8019550:	08019947 	.word	0x08019947
 8019554:	200004a8 	.word	0x200004a8

08019558 <stdio_exit_handler>:
 8019558:	4a02      	ldr	r2, [pc, #8]	@ (8019564 <stdio_exit_handler+0xc>)
 801955a:	4903      	ldr	r1, [pc, #12]	@ (8019568 <stdio_exit_handler+0x10>)
 801955c:	4803      	ldr	r0, [pc, #12]	@ (801956c <stdio_exit_handler+0x14>)
 801955e:	f000 b869 	b.w	8019634 <_fwalk_sglue>
 8019562:	bf00      	nop
 8019564:	20000030 	.word	0x20000030
 8019568:	0801a3d1 	.word	0x0801a3d1
 801956c:	20000040 	.word	0x20000040

08019570 <cleanup_stdio>:
 8019570:	6841      	ldr	r1, [r0, #4]
 8019572:	4b0c      	ldr	r3, [pc, #48]	@ (80195a4 <cleanup_stdio+0x34>)
 8019574:	4299      	cmp	r1, r3
 8019576:	b510      	push	{r4, lr}
 8019578:	4604      	mov	r4, r0
 801957a:	d001      	beq.n	8019580 <cleanup_stdio+0x10>
 801957c:	f000 ff28 	bl	801a3d0 <_fflush_r>
 8019580:	68a1      	ldr	r1, [r4, #8]
 8019582:	4b09      	ldr	r3, [pc, #36]	@ (80195a8 <cleanup_stdio+0x38>)
 8019584:	4299      	cmp	r1, r3
 8019586:	d002      	beq.n	801958e <cleanup_stdio+0x1e>
 8019588:	4620      	mov	r0, r4
 801958a:	f000 ff21 	bl	801a3d0 <_fflush_r>
 801958e:	68e1      	ldr	r1, [r4, #12]
 8019590:	4b06      	ldr	r3, [pc, #24]	@ (80195ac <cleanup_stdio+0x3c>)
 8019592:	4299      	cmp	r1, r3
 8019594:	d004      	beq.n	80195a0 <cleanup_stdio+0x30>
 8019596:	4620      	mov	r0, r4
 8019598:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801959c:	f000 bf18 	b.w	801a3d0 <_fflush_r>
 80195a0:	bd10      	pop	{r4, pc}
 80195a2:	bf00      	nop
 80195a4:	200004a8 	.word	0x200004a8
 80195a8:	20000510 	.word	0x20000510
 80195ac:	20000578 	.word	0x20000578

080195b0 <global_stdio_init.part.0>:
 80195b0:	b510      	push	{r4, lr}
 80195b2:	4b0b      	ldr	r3, [pc, #44]	@ (80195e0 <global_stdio_init.part.0+0x30>)
 80195b4:	4c0b      	ldr	r4, [pc, #44]	@ (80195e4 <global_stdio_init.part.0+0x34>)
 80195b6:	4a0c      	ldr	r2, [pc, #48]	@ (80195e8 <global_stdio_init.part.0+0x38>)
 80195b8:	601a      	str	r2, [r3, #0]
 80195ba:	4620      	mov	r0, r4
 80195bc:	2200      	movs	r2, #0
 80195be:	2104      	movs	r1, #4
 80195c0:	f7ff ff94 	bl	80194ec <std>
 80195c4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80195c8:	2201      	movs	r2, #1
 80195ca:	2109      	movs	r1, #9
 80195cc:	f7ff ff8e 	bl	80194ec <std>
 80195d0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80195d4:	2202      	movs	r2, #2
 80195d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80195da:	2112      	movs	r1, #18
 80195dc:	f7ff bf86 	b.w	80194ec <std>
 80195e0:	200005e0 	.word	0x200005e0
 80195e4:	200004a8 	.word	0x200004a8
 80195e8:	08019559 	.word	0x08019559

080195ec <__sfp_lock_acquire>:
 80195ec:	4801      	ldr	r0, [pc, #4]	@ (80195f4 <__sfp_lock_acquire+0x8>)
 80195ee:	f000 bb28 	b.w	8019c42 <__retarget_lock_acquire_recursive>
 80195f2:	bf00      	nop
 80195f4:	200005e9 	.word	0x200005e9

080195f8 <__sfp_lock_release>:
 80195f8:	4801      	ldr	r0, [pc, #4]	@ (8019600 <__sfp_lock_release+0x8>)
 80195fa:	f000 bb23 	b.w	8019c44 <__retarget_lock_release_recursive>
 80195fe:	bf00      	nop
 8019600:	200005e9 	.word	0x200005e9

08019604 <__sinit>:
 8019604:	b510      	push	{r4, lr}
 8019606:	4604      	mov	r4, r0
 8019608:	f7ff fff0 	bl	80195ec <__sfp_lock_acquire>
 801960c:	6a23      	ldr	r3, [r4, #32]
 801960e:	b11b      	cbz	r3, 8019618 <__sinit+0x14>
 8019610:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8019614:	f7ff bff0 	b.w	80195f8 <__sfp_lock_release>
 8019618:	4b04      	ldr	r3, [pc, #16]	@ (801962c <__sinit+0x28>)
 801961a:	6223      	str	r3, [r4, #32]
 801961c:	4b04      	ldr	r3, [pc, #16]	@ (8019630 <__sinit+0x2c>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	2b00      	cmp	r3, #0
 8019622:	d1f5      	bne.n	8019610 <__sinit+0xc>
 8019624:	f7ff ffc4 	bl	80195b0 <global_stdio_init.part.0>
 8019628:	e7f2      	b.n	8019610 <__sinit+0xc>
 801962a:	bf00      	nop
 801962c:	08019571 	.word	0x08019571
 8019630:	200005e0 	.word	0x200005e0

08019634 <_fwalk_sglue>:
 8019634:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8019638:	4607      	mov	r7, r0
 801963a:	4688      	mov	r8, r1
 801963c:	4614      	mov	r4, r2
 801963e:	2600      	movs	r6, #0
 8019640:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8019644:	f1b9 0901 	subs.w	r9, r9, #1
 8019648:	d505      	bpl.n	8019656 <_fwalk_sglue+0x22>
 801964a:	6824      	ldr	r4, [r4, #0]
 801964c:	2c00      	cmp	r4, #0
 801964e:	d1f7      	bne.n	8019640 <_fwalk_sglue+0xc>
 8019650:	4630      	mov	r0, r6
 8019652:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8019656:	89ab      	ldrh	r3, [r5, #12]
 8019658:	2b01      	cmp	r3, #1
 801965a:	d907      	bls.n	801966c <_fwalk_sglue+0x38>
 801965c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8019660:	3301      	adds	r3, #1
 8019662:	d003      	beq.n	801966c <_fwalk_sglue+0x38>
 8019664:	4629      	mov	r1, r5
 8019666:	4638      	mov	r0, r7
 8019668:	47c0      	blx	r8
 801966a:	4306      	orrs	r6, r0
 801966c:	3568      	adds	r5, #104	@ 0x68
 801966e:	e7e9      	b.n	8019644 <_fwalk_sglue+0x10>

08019670 <iprintf>:
 8019670:	b40f      	push	{r0, r1, r2, r3}
 8019672:	b507      	push	{r0, r1, r2, lr}
 8019674:	4906      	ldr	r1, [pc, #24]	@ (8019690 <iprintf+0x20>)
 8019676:	ab04      	add	r3, sp, #16
 8019678:	6808      	ldr	r0, [r1, #0]
 801967a:	f853 2b04 	ldr.w	r2, [r3], #4
 801967e:	6881      	ldr	r1, [r0, #8]
 8019680:	9301      	str	r3, [sp, #4]
 8019682:	f000 fb7b 	bl	8019d7c <_vfiprintf_r>
 8019686:	b003      	add	sp, #12
 8019688:	f85d eb04 	ldr.w	lr, [sp], #4
 801968c:	b004      	add	sp, #16
 801968e:	4770      	bx	lr
 8019690:	2000003c 	.word	0x2000003c

08019694 <_puts_r>:
 8019694:	6a03      	ldr	r3, [r0, #32]
 8019696:	b570      	push	{r4, r5, r6, lr}
 8019698:	6884      	ldr	r4, [r0, #8]
 801969a:	4605      	mov	r5, r0
 801969c:	460e      	mov	r6, r1
 801969e:	b90b      	cbnz	r3, 80196a4 <_puts_r+0x10>
 80196a0:	f7ff ffb0 	bl	8019604 <__sinit>
 80196a4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196a6:	07db      	lsls	r3, r3, #31
 80196a8:	d405      	bmi.n	80196b6 <_puts_r+0x22>
 80196aa:	89a3      	ldrh	r3, [r4, #12]
 80196ac:	0598      	lsls	r0, r3, #22
 80196ae:	d402      	bmi.n	80196b6 <_puts_r+0x22>
 80196b0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196b2:	f000 fac6 	bl	8019c42 <__retarget_lock_acquire_recursive>
 80196b6:	89a3      	ldrh	r3, [r4, #12]
 80196b8:	0719      	lsls	r1, r3, #28
 80196ba:	d502      	bpl.n	80196c2 <_puts_r+0x2e>
 80196bc:	6923      	ldr	r3, [r4, #16]
 80196be:	2b00      	cmp	r3, #0
 80196c0:	d135      	bne.n	801972e <_puts_r+0x9a>
 80196c2:	4621      	mov	r1, r4
 80196c4:	4628      	mov	r0, r5
 80196c6:	f000 f981 	bl	80199cc <__swsetup_r>
 80196ca:	b380      	cbz	r0, 801972e <_puts_r+0x9a>
 80196cc:	f04f 35ff 	mov.w	r5, #4294967295
 80196d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80196d2:	07da      	lsls	r2, r3, #31
 80196d4:	d405      	bmi.n	80196e2 <_puts_r+0x4e>
 80196d6:	89a3      	ldrh	r3, [r4, #12]
 80196d8:	059b      	lsls	r3, r3, #22
 80196da:	d402      	bmi.n	80196e2 <_puts_r+0x4e>
 80196dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80196de:	f000 fab1 	bl	8019c44 <__retarget_lock_release_recursive>
 80196e2:	4628      	mov	r0, r5
 80196e4:	bd70      	pop	{r4, r5, r6, pc}
 80196e6:	2b00      	cmp	r3, #0
 80196e8:	da04      	bge.n	80196f4 <_puts_r+0x60>
 80196ea:	69a2      	ldr	r2, [r4, #24]
 80196ec:	429a      	cmp	r2, r3
 80196ee:	dc17      	bgt.n	8019720 <_puts_r+0x8c>
 80196f0:	290a      	cmp	r1, #10
 80196f2:	d015      	beq.n	8019720 <_puts_r+0x8c>
 80196f4:	6823      	ldr	r3, [r4, #0]
 80196f6:	1c5a      	adds	r2, r3, #1
 80196f8:	6022      	str	r2, [r4, #0]
 80196fa:	7019      	strb	r1, [r3, #0]
 80196fc:	68a3      	ldr	r3, [r4, #8]
 80196fe:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8019702:	3b01      	subs	r3, #1
 8019704:	60a3      	str	r3, [r4, #8]
 8019706:	2900      	cmp	r1, #0
 8019708:	d1ed      	bne.n	80196e6 <_puts_r+0x52>
 801970a:	2b00      	cmp	r3, #0
 801970c:	da11      	bge.n	8019732 <_puts_r+0x9e>
 801970e:	4622      	mov	r2, r4
 8019710:	210a      	movs	r1, #10
 8019712:	4628      	mov	r0, r5
 8019714:	f000 f91b 	bl	801994e <__swbuf_r>
 8019718:	3001      	adds	r0, #1
 801971a:	d0d7      	beq.n	80196cc <_puts_r+0x38>
 801971c:	250a      	movs	r5, #10
 801971e:	e7d7      	b.n	80196d0 <_puts_r+0x3c>
 8019720:	4622      	mov	r2, r4
 8019722:	4628      	mov	r0, r5
 8019724:	f000 f913 	bl	801994e <__swbuf_r>
 8019728:	3001      	adds	r0, #1
 801972a:	d1e7      	bne.n	80196fc <_puts_r+0x68>
 801972c:	e7ce      	b.n	80196cc <_puts_r+0x38>
 801972e:	3e01      	subs	r6, #1
 8019730:	e7e4      	b.n	80196fc <_puts_r+0x68>
 8019732:	6823      	ldr	r3, [r4, #0]
 8019734:	1c5a      	adds	r2, r3, #1
 8019736:	6022      	str	r2, [r4, #0]
 8019738:	220a      	movs	r2, #10
 801973a:	701a      	strb	r2, [r3, #0]
 801973c:	e7ee      	b.n	801971c <_puts_r+0x88>
	...

08019740 <puts>:
 8019740:	4b02      	ldr	r3, [pc, #8]	@ (801974c <puts+0xc>)
 8019742:	4601      	mov	r1, r0
 8019744:	6818      	ldr	r0, [r3, #0]
 8019746:	f7ff bfa5 	b.w	8019694 <_puts_r>
 801974a:	bf00      	nop
 801974c:	2000003c 	.word	0x2000003c

08019750 <setbuf>:
 8019750:	fab1 f281 	clz	r2, r1
 8019754:	0952      	lsrs	r2, r2, #5
 8019756:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801975a:	0052      	lsls	r2, r2, #1
 801975c:	f000 b800 	b.w	8019760 <setvbuf>

08019760 <setvbuf>:
 8019760:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8019764:	461d      	mov	r5, r3
 8019766:	4b57      	ldr	r3, [pc, #348]	@ (80198c4 <setvbuf+0x164>)
 8019768:	681f      	ldr	r7, [r3, #0]
 801976a:	4604      	mov	r4, r0
 801976c:	460e      	mov	r6, r1
 801976e:	4690      	mov	r8, r2
 8019770:	b127      	cbz	r7, 801977c <setvbuf+0x1c>
 8019772:	6a3b      	ldr	r3, [r7, #32]
 8019774:	b913      	cbnz	r3, 801977c <setvbuf+0x1c>
 8019776:	4638      	mov	r0, r7
 8019778:	f7ff ff44 	bl	8019604 <__sinit>
 801977c:	f1b8 0f02 	cmp.w	r8, #2
 8019780:	d006      	beq.n	8019790 <setvbuf+0x30>
 8019782:	f1b8 0f01 	cmp.w	r8, #1
 8019786:	f200 809a 	bhi.w	80198be <setvbuf+0x15e>
 801978a:	2d00      	cmp	r5, #0
 801978c:	f2c0 8097 	blt.w	80198be <setvbuf+0x15e>
 8019790:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8019792:	07d9      	lsls	r1, r3, #31
 8019794:	d405      	bmi.n	80197a2 <setvbuf+0x42>
 8019796:	89a3      	ldrh	r3, [r4, #12]
 8019798:	059a      	lsls	r2, r3, #22
 801979a:	d402      	bmi.n	80197a2 <setvbuf+0x42>
 801979c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801979e:	f000 fa50 	bl	8019c42 <__retarget_lock_acquire_recursive>
 80197a2:	4621      	mov	r1, r4
 80197a4:	4638      	mov	r0, r7
 80197a6:	f000 fe13 	bl	801a3d0 <_fflush_r>
 80197aa:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80197ac:	b141      	cbz	r1, 80197c0 <setvbuf+0x60>
 80197ae:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80197b2:	4299      	cmp	r1, r3
 80197b4:	d002      	beq.n	80197bc <setvbuf+0x5c>
 80197b6:	4638      	mov	r0, r7
 80197b8:	f000 fa6c 	bl	8019c94 <_free_r>
 80197bc:	2300      	movs	r3, #0
 80197be:	6363      	str	r3, [r4, #52]	@ 0x34
 80197c0:	2300      	movs	r3, #0
 80197c2:	61a3      	str	r3, [r4, #24]
 80197c4:	6063      	str	r3, [r4, #4]
 80197c6:	89a3      	ldrh	r3, [r4, #12]
 80197c8:	061b      	lsls	r3, r3, #24
 80197ca:	d503      	bpl.n	80197d4 <setvbuf+0x74>
 80197cc:	6921      	ldr	r1, [r4, #16]
 80197ce:	4638      	mov	r0, r7
 80197d0:	f000 fa60 	bl	8019c94 <_free_r>
 80197d4:	89a3      	ldrh	r3, [r4, #12]
 80197d6:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 80197da:	f023 0303 	bic.w	r3, r3, #3
 80197de:	f1b8 0f02 	cmp.w	r8, #2
 80197e2:	81a3      	strh	r3, [r4, #12]
 80197e4:	d061      	beq.n	80198aa <setvbuf+0x14a>
 80197e6:	ab01      	add	r3, sp, #4
 80197e8:	466a      	mov	r2, sp
 80197ea:	4621      	mov	r1, r4
 80197ec:	4638      	mov	r0, r7
 80197ee:	f000 fe29 	bl	801a444 <__swhatbuf_r>
 80197f2:	89a3      	ldrh	r3, [r4, #12]
 80197f4:	4318      	orrs	r0, r3
 80197f6:	81a0      	strh	r0, [r4, #12]
 80197f8:	bb2d      	cbnz	r5, 8019846 <setvbuf+0xe6>
 80197fa:	9d00      	ldr	r5, [sp, #0]
 80197fc:	4628      	mov	r0, r5
 80197fe:	f7ff fd33 	bl	8019268 <malloc>
 8019802:	4606      	mov	r6, r0
 8019804:	2800      	cmp	r0, #0
 8019806:	d152      	bne.n	80198ae <setvbuf+0x14e>
 8019808:	f8dd 9000 	ldr.w	r9, [sp]
 801980c:	45a9      	cmp	r9, r5
 801980e:	d140      	bne.n	8019892 <setvbuf+0x132>
 8019810:	f04f 35ff 	mov.w	r5, #4294967295
 8019814:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019818:	f043 0202 	orr.w	r2, r3, #2
 801981c:	81a2      	strh	r2, [r4, #12]
 801981e:	2200      	movs	r2, #0
 8019820:	60a2      	str	r2, [r4, #8]
 8019822:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 8019826:	6022      	str	r2, [r4, #0]
 8019828:	6122      	str	r2, [r4, #16]
 801982a:	2201      	movs	r2, #1
 801982c:	6162      	str	r2, [r4, #20]
 801982e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019830:	07d6      	lsls	r6, r2, #31
 8019832:	d404      	bmi.n	801983e <setvbuf+0xde>
 8019834:	0598      	lsls	r0, r3, #22
 8019836:	d402      	bmi.n	801983e <setvbuf+0xde>
 8019838:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801983a:	f000 fa03 	bl	8019c44 <__retarget_lock_release_recursive>
 801983e:	4628      	mov	r0, r5
 8019840:	b003      	add	sp, #12
 8019842:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8019846:	2e00      	cmp	r6, #0
 8019848:	d0d8      	beq.n	80197fc <setvbuf+0x9c>
 801984a:	6a3b      	ldr	r3, [r7, #32]
 801984c:	b913      	cbnz	r3, 8019854 <setvbuf+0xf4>
 801984e:	4638      	mov	r0, r7
 8019850:	f7ff fed8 	bl	8019604 <__sinit>
 8019854:	f1b8 0f01 	cmp.w	r8, #1
 8019858:	bf08      	it	eq
 801985a:	89a3      	ldrheq	r3, [r4, #12]
 801985c:	6026      	str	r6, [r4, #0]
 801985e:	bf04      	itt	eq
 8019860:	f043 0301 	orreq.w	r3, r3, #1
 8019864:	81a3      	strheq	r3, [r4, #12]
 8019866:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801986a:	f013 0208 	ands.w	r2, r3, #8
 801986e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8019872:	d01e      	beq.n	80198b2 <setvbuf+0x152>
 8019874:	07d9      	lsls	r1, r3, #31
 8019876:	bf41      	itttt	mi
 8019878:	2200      	movmi	r2, #0
 801987a:	426d      	negmi	r5, r5
 801987c:	60a2      	strmi	r2, [r4, #8]
 801987e:	61a5      	strmi	r5, [r4, #24]
 8019880:	bf58      	it	pl
 8019882:	60a5      	strpl	r5, [r4, #8]
 8019884:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8019886:	07d2      	lsls	r2, r2, #31
 8019888:	d401      	bmi.n	801988e <setvbuf+0x12e>
 801988a:	059b      	lsls	r3, r3, #22
 801988c:	d513      	bpl.n	80198b6 <setvbuf+0x156>
 801988e:	2500      	movs	r5, #0
 8019890:	e7d5      	b.n	801983e <setvbuf+0xde>
 8019892:	4648      	mov	r0, r9
 8019894:	f7ff fce8 	bl	8019268 <malloc>
 8019898:	4606      	mov	r6, r0
 801989a:	2800      	cmp	r0, #0
 801989c:	d0b8      	beq.n	8019810 <setvbuf+0xb0>
 801989e:	89a3      	ldrh	r3, [r4, #12]
 80198a0:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80198a4:	81a3      	strh	r3, [r4, #12]
 80198a6:	464d      	mov	r5, r9
 80198a8:	e7cf      	b.n	801984a <setvbuf+0xea>
 80198aa:	2500      	movs	r5, #0
 80198ac:	e7b2      	b.n	8019814 <setvbuf+0xb4>
 80198ae:	46a9      	mov	r9, r5
 80198b0:	e7f5      	b.n	801989e <setvbuf+0x13e>
 80198b2:	60a2      	str	r2, [r4, #8]
 80198b4:	e7e6      	b.n	8019884 <setvbuf+0x124>
 80198b6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80198b8:	f000 f9c4 	bl	8019c44 <__retarget_lock_release_recursive>
 80198bc:	e7e7      	b.n	801988e <setvbuf+0x12e>
 80198be:	f04f 35ff 	mov.w	r5, #4294967295
 80198c2:	e7bc      	b.n	801983e <setvbuf+0xde>
 80198c4:	2000003c 	.word	0x2000003c

080198c8 <__sread>:
 80198c8:	b510      	push	{r4, lr}
 80198ca:	460c      	mov	r4, r1
 80198cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80198d0:	f000 f958 	bl	8019b84 <_read_r>
 80198d4:	2800      	cmp	r0, #0
 80198d6:	bfab      	itete	ge
 80198d8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80198da:	89a3      	ldrhlt	r3, [r4, #12]
 80198dc:	181b      	addge	r3, r3, r0
 80198de:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80198e2:	bfac      	ite	ge
 80198e4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80198e6:	81a3      	strhlt	r3, [r4, #12]
 80198e8:	bd10      	pop	{r4, pc}

080198ea <__swrite>:
 80198ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80198ee:	461f      	mov	r7, r3
 80198f0:	898b      	ldrh	r3, [r1, #12]
 80198f2:	05db      	lsls	r3, r3, #23
 80198f4:	4605      	mov	r5, r0
 80198f6:	460c      	mov	r4, r1
 80198f8:	4616      	mov	r6, r2
 80198fa:	d505      	bpl.n	8019908 <__swrite+0x1e>
 80198fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8019900:	2302      	movs	r3, #2
 8019902:	2200      	movs	r2, #0
 8019904:	f000 f92c 	bl	8019b60 <_lseek_r>
 8019908:	89a3      	ldrh	r3, [r4, #12]
 801990a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801990e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8019912:	81a3      	strh	r3, [r4, #12]
 8019914:	4632      	mov	r2, r6
 8019916:	463b      	mov	r3, r7
 8019918:	4628      	mov	r0, r5
 801991a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801991e:	f000 b953 	b.w	8019bc8 <_write_r>

08019922 <__sseek>:
 8019922:	b510      	push	{r4, lr}
 8019924:	460c      	mov	r4, r1
 8019926:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801992a:	f000 f919 	bl	8019b60 <_lseek_r>
 801992e:	1c43      	adds	r3, r0, #1
 8019930:	89a3      	ldrh	r3, [r4, #12]
 8019932:	bf15      	itete	ne
 8019934:	6560      	strne	r0, [r4, #84]	@ 0x54
 8019936:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 801993a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 801993e:	81a3      	strheq	r3, [r4, #12]
 8019940:	bf18      	it	ne
 8019942:	81a3      	strhne	r3, [r4, #12]
 8019944:	bd10      	pop	{r4, pc}

08019946 <__sclose>:
 8019946:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801994a:	f000 b8f9 	b.w	8019b40 <_close_r>

0801994e <__swbuf_r>:
 801994e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019950:	460e      	mov	r6, r1
 8019952:	4614      	mov	r4, r2
 8019954:	4605      	mov	r5, r0
 8019956:	b118      	cbz	r0, 8019960 <__swbuf_r+0x12>
 8019958:	6a03      	ldr	r3, [r0, #32]
 801995a:	b90b      	cbnz	r3, 8019960 <__swbuf_r+0x12>
 801995c:	f7ff fe52 	bl	8019604 <__sinit>
 8019960:	69a3      	ldr	r3, [r4, #24]
 8019962:	60a3      	str	r3, [r4, #8]
 8019964:	89a3      	ldrh	r3, [r4, #12]
 8019966:	071a      	lsls	r2, r3, #28
 8019968:	d501      	bpl.n	801996e <__swbuf_r+0x20>
 801996a:	6923      	ldr	r3, [r4, #16]
 801996c:	b943      	cbnz	r3, 8019980 <__swbuf_r+0x32>
 801996e:	4621      	mov	r1, r4
 8019970:	4628      	mov	r0, r5
 8019972:	f000 f82b 	bl	80199cc <__swsetup_r>
 8019976:	b118      	cbz	r0, 8019980 <__swbuf_r+0x32>
 8019978:	f04f 37ff 	mov.w	r7, #4294967295
 801997c:	4638      	mov	r0, r7
 801997e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8019980:	6823      	ldr	r3, [r4, #0]
 8019982:	6922      	ldr	r2, [r4, #16]
 8019984:	1a98      	subs	r0, r3, r2
 8019986:	6963      	ldr	r3, [r4, #20]
 8019988:	b2f6      	uxtb	r6, r6
 801998a:	4283      	cmp	r3, r0
 801998c:	4637      	mov	r7, r6
 801998e:	dc05      	bgt.n	801999c <__swbuf_r+0x4e>
 8019990:	4621      	mov	r1, r4
 8019992:	4628      	mov	r0, r5
 8019994:	f000 fd1c 	bl	801a3d0 <_fflush_r>
 8019998:	2800      	cmp	r0, #0
 801999a:	d1ed      	bne.n	8019978 <__swbuf_r+0x2a>
 801999c:	68a3      	ldr	r3, [r4, #8]
 801999e:	3b01      	subs	r3, #1
 80199a0:	60a3      	str	r3, [r4, #8]
 80199a2:	6823      	ldr	r3, [r4, #0]
 80199a4:	1c5a      	adds	r2, r3, #1
 80199a6:	6022      	str	r2, [r4, #0]
 80199a8:	701e      	strb	r6, [r3, #0]
 80199aa:	6962      	ldr	r2, [r4, #20]
 80199ac:	1c43      	adds	r3, r0, #1
 80199ae:	429a      	cmp	r2, r3
 80199b0:	d004      	beq.n	80199bc <__swbuf_r+0x6e>
 80199b2:	89a3      	ldrh	r3, [r4, #12]
 80199b4:	07db      	lsls	r3, r3, #31
 80199b6:	d5e1      	bpl.n	801997c <__swbuf_r+0x2e>
 80199b8:	2e0a      	cmp	r6, #10
 80199ba:	d1df      	bne.n	801997c <__swbuf_r+0x2e>
 80199bc:	4621      	mov	r1, r4
 80199be:	4628      	mov	r0, r5
 80199c0:	f000 fd06 	bl	801a3d0 <_fflush_r>
 80199c4:	2800      	cmp	r0, #0
 80199c6:	d0d9      	beq.n	801997c <__swbuf_r+0x2e>
 80199c8:	e7d6      	b.n	8019978 <__swbuf_r+0x2a>
	...

080199cc <__swsetup_r>:
 80199cc:	b538      	push	{r3, r4, r5, lr}
 80199ce:	4b29      	ldr	r3, [pc, #164]	@ (8019a74 <__swsetup_r+0xa8>)
 80199d0:	4605      	mov	r5, r0
 80199d2:	6818      	ldr	r0, [r3, #0]
 80199d4:	460c      	mov	r4, r1
 80199d6:	b118      	cbz	r0, 80199e0 <__swsetup_r+0x14>
 80199d8:	6a03      	ldr	r3, [r0, #32]
 80199da:	b90b      	cbnz	r3, 80199e0 <__swsetup_r+0x14>
 80199dc:	f7ff fe12 	bl	8019604 <__sinit>
 80199e0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80199e4:	0719      	lsls	r1, r3, #28
 80199e6:	d422      	bmi.n	8019a2e <__swsetup_r+0x62>
 80199e8:	06da      	lsls	r2, r3, #27
 80199ea:	d407      	bmi.n	80199fc <__swsetup_r+0x30>
 80199ec:	2209      	movs	r2, #9
 80199ee:	602a      	str	r2, [r5, #0]
 80199f0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80199f4:	81a3      	strh	r3, [r4, #12]
 80199f6:	f04f 30ff 	mov.w	r0, #4294967295
 80199fa:	e033      	b.n	8019a64 <__swsetup_r+0x98>
 80199fc:	0758      	lsls	r0, r3, #29
 80199fe:	d512      	bpl.n	8019a26 <__swsetup_r+0x5a>
 8019a00:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8019a02:	b141      	cbz	r1, 8019a16 <__swsetup_r+0x4a>
 8019a04:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8019a08:	4299      	cmp	r1, r3
 8019a0a:	d002      	beq.n	8019a12 <__swsetup_r+0x46>
 8019a0c:	4628      	mov	r0, r5
 8019a0e:	f000 f941 	bl	8019c94 <_free_r>
 8019a12:	2300      	movs	r3, #0
 8019a14:	6363      	str	r3, [r4, #52]	@ 0x34
 8019a16:	89a3      	ldrh	r3, [r4, #12]
 8019a18:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8019a1c:	81a3      	strh	r3, [r4, #12]
 8019a1e:	2300      	movs	r3, #0
 8019a20:	6063      	str	r3, [r4, #4]
 8019a22:	6923      	ldr	r3, [r4, #16]
 8019a24:	6023      	str	r3, [r4, #0]
 8019a26:	89a3      	ldrh	r3, [r4, #12]
 8019a28:	f043 0308 	orr.w	r3, r3, #8
 8019a2c:	81a3      	strh	r3, [r4, #12]
 8019a2e:	6923      	ldr	r3, [r4, #16]
 8019a30:	b94b      	cbnz	r3, 8019a46 <__swsetup_r+0x7a>
 8019a32:	89a3      	ldrh	r3, [r4, #12]
 8019a34:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8019a38:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8019a3c:	d003      	beq.n	8019a46 <__swsetup_r+0x7a>
 8019a3e:	4621      	mov	r1, r4
 8019a40:	4628      	mov	r0, r5
 8019a42:	f000 fd25 	bl	801a490 <__smakebuf_r>
 8019a46:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8019a4a:	f013 0201 	ands.w	r2, r3, #1
 8019a4e:	d00a      	beq.n	8019a66 <__swsetup_r+0x9a>
 8019a50:	2200      	movs	r2, #0
 8019a52:	60a2      	str	r2, [r4, #8]
 8019a54:	6962      	ldr	r2, [r4, #20]
 8019a56:	4252      	negs	r2, r2
 8019a58:	61a2      	str	r2, [r4, #24]
 8019a5a:	6922      	ldr	r2, [r4, #16]
 8019a5c:	b942      	cbnz	r2, 8019a70 <__swsetup_r+0xa4>
 8019a5e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8019a62:	d1c5      	bne.n	80199f0 <__swsetup_r+0x24>
 8019a64:	bd38      	pop	{r3, r4, r5, pc}
 8019a66:	0799      	lsls	r1, r3, #30
 8019a68:	bf58      	it	pl
 8019a6a:	6962      	ldrpl	r2, [r4, #20]
 8019a6c:	60a2      	str	r2, [r4, #8]
 8019a6e:	e7f4      	b.n	8019a5a <__swsetup_r+0x8e>
 8019a70:	2000      	movs	r0, #0
 8019a72:	e7f7      	b.n	8019a64 <__swsetup_r+0x98>
 8019a74:	2000003c 	.word	0x2000003c

08019a78 <memset>:
 8019a78:	4402      	add	r2, r0
 8019a7a:	4603      	mov	r3, r0
 8019a7c:	4293      	cmp	r3, r2
 8019a7e:	d100      	bne.n	8019a82 <memset+0xa>
 8019a80:	4770      	bx	lr
 8019a82:	f803 1b01 	strb.w	r1, [r3], #1
 8019a86:	e7f9      	b.n	8019a7c <memset+0x4>

08019a88 <strtok>:
 8019a88:	4b16      	ldr	r3, [pc, #88]	@ (8019ae4 <strtok+0x5c>)
 8019a8a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8019a8e:	681f      	ldr	r7, [r3, #0]
 8019a90:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8019a92:	4605      	mov	r5, r0
 8019a94:	460e      	mov	r6, r1
 8019a96:	b9ec      	cbnz	r4, 8019ad4 <strtok+0x4c>
 8019a98:	2050      	movs	r0, #80	@ 0x50
 8019a9a:	f7ff fbe5 	bl	8019268 <malloc>
 8019a9e:	4602      	mov	r2, r0
 8019aa0:	6478      	str	r0, [r7, #68]	@ 0x44
 8019aa2:	b920      	cbnz	r0, 8019aae <strtok+0x26>
 8019aa4:	4b10      	ldr	r3, [pc, #64]	@ (8019ae8 <strtok+0x60>)
 8019aa6:	4811      	ldr	r0, [pc, #68]	@ (8019aec <strtok+0x64>)
 8019aa8:	215b      	movs	r1, #91	@ 0x5b
 8019aaa:	f000 f8d5 	bl	8019c58 <__assert_func>
 8019aae:	e9c0 4400 	strd	r4, r4, [r0]
 8019ab2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8019ab6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8019aba:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 8019abe:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8019ac2:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8019ac6:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 8019aca:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 8019ace:	6184      	str	r4, [r0, #24]
 8019ad0:	7704      	strb	r4, [r0, #28]
 8019ad2:	6244      	str	r4, [r0, #36]	@ 0x24
 8019ad4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8019ad6:	4631      	mov	r1, r6
 8019ad8:	4628      	mov	r0, r5
 8019ada:	2301      	movs	r3, #1
 8019adc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8019ae0:	f000 b806 	b.w	8019af0 <__strtok_r>
 8019ae4:	2000003c 	.word	0x2000003c
 8019ae8:	0801b335 	.word	0x0801b335
 8019aec:	0801b34c 	.word	0x0801b34c

08019af0 <__strtok_r>:
 8019af0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019af2:	4604      	mov	r4, r0
 8019af4:	b908      	cbnz	r0, 8019afa <__strtok_r+0xa>
 8019af6:	6814      	ldr	r4, [r2, #0]
 8019af8:	b144      	cbz	r4, 8019b0c <__strtok_r+0x1c>
 8019afa:	4620      	mov	r0, r4
 8019afc:	f814 5b01 	ldrb.w	r5, [r4], #1
 8019b00:	460f      	mov	r7, r1
 8019b02:	f817 6b01 	ldrb.w	r6, [r7], #1
 8019b06:	b91e      	cbnz	r6, 8019b10 <__strtok_r+0x20>
 8019b08:	b965      	cbnz	r5, 8019b24 <__strtok_r+0x34>
 8019b0a:	6015      	str	r5, [r2, #0]
 8019b0c:	2000      	movs	r0, #0
 8019b0e:	e005      	b.n	8019b1c <__strtok_r+0x2c>
 8019b10:	42b5      	cmp	r5, r6
 8019b12:	d1f6      	bne.n	8019b02 <__strtok_r+0x12>
 8019b14:	2b00      	cmp	r3, #0
 8019b16:	d1f0      	bne.n	8019afa <__strtok_r+0xa>
 8019b18:	6014      	str	r4, [r2, #0]
 8019b1a:	7003      	strb	r3, [r0, #0]
 8019b1c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019b1e:	461c      	mov	r4, r3
 8019b20:	e00c      	b.n	8019b3c <__strtok_r+0x4c>
 8019b22:	b915      	cbnz	r5, 8019b2a <__strtok_r+0x3a>
 8019b24:	f814 3b01 	ldrb.w	r3, [r4], #1
 8019b28:	460e      	mov	r6, r1
 8019b2a:	f816 5b01 	ldrb.w	r5, [r6], #1
 8019b2e:	42ab      	cmp	r3, r5
 8019b30:	d1f7      	bne.n	8019b22 <__strtok_r+0x32>
 8019b32:	2b00      	cmp	r3, #0
 8019b34:	d0f3      	beq.n	8019b1e <__strtok_r+0x2e>
 8019b36:	2300      	movs	r3, #0
 8019b38:	f804 3c01 	strb.w	r3, [r4, #-1]
 8019b3c:	6014      	str	r4, [r2, #0]
 8019b3e:	e7ed      	b.n	8019b1c <__strtok_r+0x2c>

08019b40 <_close_r>:
 8019b40:	b538      	push	{r3, r4, r5, lr}
 8019b42:	4d06      	ldr	r5, [pc, #24]	@ (8019b5c <_close_r+0x1c>)
 8019b44:	2300      	movs	r3, #0
 8019b46:	4604      	mov	r4, r0
 8019b48:	4608      	mov	r0, r1
 8019b4a:	602b      	str	r3, [r5, #0]
 8019b4c:	f7f8 fbfa 	bl	8012344 <_close>
 8019b50:	1c43      	adds	r3, r0, #1
 8019b52:	d102      	bne.n	8019b5a <_close_r+0x1a>
 8019b54:	682b      	ldr	r3, [r5, #0]
 8019b56:	b103      	cbz	r3, 8019b5a <_close_r+0x1a>
 8019b58:	6023      	str	r3, [r4, #0]
 8019b5a:	bd38      	pop	{r3, r4, r5, pc}
 8019b5c:	200005e4 	.word	0x200005e4

08019b60 <_lseek_r>:
 8019b60:	b538      	push	{r3, r4, r5, lr}
 8019b62:	4d07      	ldr	r5, [pc, #28]	@ (8019b80 <_lseek_r+0x20>)
 8019b64:	4604      	mov	r4, r0
 8019b66:	4608      	mov	r0, r1
 8019b68:	4611      	mov	r1, r2
 8019b6a:	2200      	movs	r2, #0
 8019b6c:	602a      	str	r2, [r5, #0]
 8019b6e:	461a      	mov	r2, r3
 8019b70:	f7f8 fc0f 	bl	8012392 <_lseek>
 8019b74:	1c43      	adds	r3, r0, #1
 8019b76:	d102      	bne.n	8019b7e <_lseek_r+0x1e>
 8019b78:	682b      	ldr	r3, [r5, #0]
 8019b7a:	b103      	cbz	r3, 8019b7e <_lseek_r+0x1e>
 8019b7c:	6023      	str	r3, [r4, #0]
 8019b7e:	bd38      	pop	{r3, r4, r5, pc}
 8019b80:	200005e4 	.word	0x200005e4

08019b84 <_read_r>:
 8019b84:	b538      	push	{r3, r4, r5, lr}
 8019b86:	4d07      	ldr	r5, [pc, #28]	@ (8019ba4 <_read_r+0x20>)
 8019b88:	4604      	mov	r4, r0
 8019b8a:	4608      	mov	r0, r1
 8019b8c:	4611      	mov	r1, r2
 8019b8e:	2200      	movs	r2, #0
 8019b90:	602a      	str	r2, [r5, #0]
 8019b92:	461a      	mov	r2, r3
 8019b94:	f7f8 fbb9 	bl	801230a <_read>
 8019b98:	1c43      	adds	r3, r0, #1
 8019b9a:	d102      	bne.n	8019ba2 <_read_r+0x1e>
 8019b9c:	682b      	ldr	r3, [r5, #0]
 8019b9e:	b103      	cbz	r3, 8019ba2 <_read_r+0x1e>
 8019ba0:	6023      	str	r3, [r4, #0]
 8019ba2:	bd38      	pop	{r3, r4, r5, pc}
 8019ba4:	200005e4 	.word	0x200005e4

08019ba8 <_sbrk_r>:
 8019ba8:	b538      	push	{r3, r4, r5, lr}
 8019baa:	4d06      	ldr	r5, [pc, #24]	@ (8019bc4 <_sbrk_r+0x1c>)
 8019bac:	2300      	movs	r3, #0
 8019bae:	4604      	mov	r4, r0
 8019bb0:	4608      	mov	r0, r1
 8019bb2:	602b      	str	r3, [r5, #0]
 8019bb4:	f7f8 fbfa 	bl	80123ac <_sbrk>
 8019bb8:	1c43      	adds	r3, r0, #1
 8019bba:	d102      	bne.n	8019bc2 <_sbrk_r+0x1a>
 8019bbc:	682b      	ldr	r3, [r5, #0]
 8019bbe:	b103      	cbz	r3, 8019bc2 <_sbrk_r+0x1a>
 8019bc0:	6023      	str	r3, [r4, #0]
 8019bc2:	bd38      	pop	{r3, r4, r5, pc}
 8019bc4:	200005e4 	.word	0x200005e4

08019bc8 <_write_r>:
 8019bc8:	b538      	push	{r3, r4, r5, lr}
 8019bca:	4d07      	ldr	r5, [pc, #28]	@ (8019be8 <_write_r+0x20>)
 8019bcc:	4604      	mov	r4, r0
 8019bce:	4608      	mov	r0, r1
 8019bd0:	4611      	mov	r1, r2
 8019bd2:	2200      	movs	r2, #0
 8019bd4:	602a      	str	r2, [r5, #0]
 8019bd6:	461a      	mov	r2, r3
 8019bd8:	f7f7 fd76 	bl	80116c8 <_write>
 8019bdc:	1c43      	adds	r3, r0, #1
 8019bde:	d102      	bne.n	8019be6 <_write_r+0x1e>
 8019be0:	682b      	ldr	r3, [r5, #0]
 8019be2:	b103      	cbz	r3, 8019be6 <_write_r+0x1e>
 8019be4:	6023      	str	r3, [r4, #0]
 8019be6:	bd38      	pop	{r3, r4, r5, pc}
 8019be8:	200005e4 	.word	0x200005e4

08019bec <__errno>:
 8019bec:	4b01      	ldr	r3, [pc, #4]	@ (8019bf4 <__errno+0x8>)
 8019bee:	6818      	ldr	r0, [r3, #0]
 8019bf0:	4770      	bx	lr
 8019bf2:	bf00      	nop
 8019bf4:	2000003c 	.word	0x2000003c

08019bf8 <__libc_init_array>:
 8019bf8:	b570      	push	{r4, r5, r6, lr}
 8019bfa:	4d0d      	ldr	r5, [pc, #52]	@ (8019c30 <__libc_init_array+0x38>)
 8019bfc:	4c0d      	ldr	r4, [pc, #52]	@ (8019c34 <__libc_init_array+0x3c>)
 8019bfe:	1b64      	subs	r4, r4, r5
 8019c00:	10a4      	asrs	r4, r4, #2
 8019c02:	2600      	movs	r6, #0
 8019c04:	42a6      	cmp	r6, r4
 8019c06:	d109      	bne.n	8019c1c <__libc_init_array+0x24>
 8019c08:	4d0b      	ldr	r5, [pc, #44]	@ (8019c38 <__libc_init_array+0x40>)
 8019c0a:	4c0c      	ldr	r4, [pc, #48]	@ (8019c3c <__libc_init_array+0x44>)
 8019c0c:	f000 fcea 	bl	801a5e4 <_init>
 8019c10:	1b64      	subs	r4, r4, r5
 8019c12:	10a4      	asrs	r4, r4, #2
 8019c14:	2600      	movs	r6, #0
 8019c16:	42a6      	cmp	r6, r4
 8019c18:	d105      	bne.n	8019c26 <__libc_init_array+0x2e>
 8019c1a:	bd70      	pop	{r4, r5, r6, pc}
 8019c1c:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c20:	4798      	blx	r3
 8019c22:	3601      	adds	r6, #1
 8019c24:	e7ee      	b.n	8019c04 <__libc_init_array+0xc>
 8019c26:	f855 3b04 	ldr.w	r3, [r5], #4
 8019c2a:	4798      	blx	r3
 8019c2c:	3601      	adds	r6, #1
 8019c2e:	e7f2      	b.n	8019c16 <__libc_init_array+0x1e>
 8019c30:	0801b420 	.word	0x0801b420
 8019c34:	0801b420 	.word	0x0801b420
 8019c38:	0801b420 	.word	0x0801b420
 8019c3c:	0801b424 	.word	0x0801b424

08019c40 <__retarget_lock_init_recursive>:
 8019c40:	4770      	bx	lr

08019c42 <__retarget_lock_acquire_recursive>:
 8019c42:	4770      	bx	lr

08019c44 <__retarget_lock_release_recursive>:
 8019c44:	4770      	bx	lr

08019c46 <strcpy>:
 8019c46:	4603      	mov	r3, r0
 8019c48:	f811 2b01 	ldrb.w	r2, [r1], #1
 8019c4c:	f803 2b01 	strb.w	r2, [r3], #1
 8019c50:	2a00      	cmp	r2, #0
 8019c52:	d1f9      	bne.n	8019c48 <strcpy+0x2>
 8019c54:	4770      	bx	lr
	...

08019c58 <__assert_func>:
 8019c58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8019c5a:	4614      	mov	r4, r2
 8019c5c:	461a      	mov	r2, r3
 8019c5e:	4b09      	ldr	r3, [pc, #36]	@ (8019c84 <__assert_func+0x2c>)
 8019c60:	681b      	ldr	r3, [r3, #0]
 8019c62:	4605      	mov	r5, r0
 8019c64:	68d8      	ldr	r0, [r3, #12]
 8019c66:	b954      	cbnz	r4, 8019c7e <__assert_func+0x26>
 8019c68:	4b07      	ldr	r3, [pc, #28]	@ (8019c88 <__assert_func+0x30>)
 8019c6a:	461c      	mov	r4, r3
 8019c6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8019c70:	9100      	str	r1, [sp, #0]
 8019c72:	462b      	mov	r3, r5
 8019c74:	4905      	ldr	r1, [pc, #20]	@ (8019c8c <__assert_func+0x34>)
 8019c76:	f000 fbd3 	bl	801a420 <fiprintf>
 8019c7a:	f000 fc67 	bl	801a54c <abort>
 8019c7e:	4b04      	ldr	r3, [pc, #16]	@ (8019c90 <__assert_func+0x38>)
 8019c80:	e7f4      	b.n	8019c6c <__assert_func+0x14>
 8019c82:	bf00      	nop
 8019c84:	2000003c 	.word	0x2000003c
 8019c88:	0801b3e1 	.word	0x0801b3e1
 8019c8c:	0801b3b3 	.word	0x0801b3b3
 8019c90:	0801b3a6 	.word	0x0801b3a6

08019c94 <_free_r>:
 8019c94:	b538      	push	{r3, r4, r5, lr}
 8019c96:	4605      	mov	r5, r0
 8019c98:	2900      	cmp	r1, #0
 8019c9a:	d041      	beq.n	8019d20 <_free_r+0x8c>
 8019c9c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8019ca0:	1f0c      	subs	r4, r1, #4
 8019ca2:	2b00      	cmp	r3, #0
 8019ca4:	bfb8      	it	lt
 8019ca6:	18e4      	addlt	r4, r4, r3
 8019ca8:	f7ff fb90 	bl	80193cc <__malloc_lock>
 8019cac:	4a1d      	ldr	r2, [pc, #116]	@ (8019d24 <_free_r+0x90>)
 8019cae:	6813      	ldr	r3, [r2, #0]
 8019cb0:	b933      	cbnz	r3, 8019cc0 <_free_r+0x2c>
 8019cb2:	6063      	str	r3, [r4, #4]
 8019cb4:	6014      	str	r4, [r2, #0]
 8019cb6:	4628      	mov	r0, r5
 8019cb8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8019cbc:	f7ff bb8c 	b.w	80193d8 <__malloc_unlock>
 8019cc0:	42a3      	cmp	r3, r4
 8019cc2:	d908      	bls.n	8019cd6 <_free_r+0x42>
 8019cc4:	6820      	ldr	r0, [r4, #0]
 8019cc6:	1821      	adds	r1, r4, r0
 8019cc8:	428b      	cmp	r3, r1
 8019cca:	bf01      	itttt	eq
 8019ccc:	6819      	ldreq	r1, [r3, #0]
 8019cce:	685b      	ldreq	r3, [r3, #4]
 8019cd0:	1809      	addeq	r1, r1, r0
 8019cd2:	6021      	streq	r1, [r4, #0]
 8019cd4:	e7ed      	b.n	8019cb2 <_free_r+0x1e>
 8019cd6:	461a      	mov	r2, r3
 8019cd8:	685b      	ldr	r3, [r3, #4]
 8019cda:	b10b      	cbz	r3, 8019ce0 <_free_r+0x4c>
 8019cdc:	42a3      	cmp	r3, r4
 8019cde:	d9fa      	bls.n	8019cd6 <_free_r+0x42>
 8019ce0:	6811      	ldr	r1, [r2, #0]
 8019ce2:	1850      	adds	r0, r2, r1
 8019ce4:	42a0      	cmp	r0, r4
 8019ce6:	d10b      	bne.n	8019d00 <_free_r+0x6c>
 8019ce8:	6820      	ldr	r0, [r4, #0]
 8019cea:	4401      	add	r1, r0
 8019cec:	1850      	adds	r0, r2, r1
 8019cee:	4283      	cmp	r3, r0
 8019cf0:	6011      	str	r1, [r2, #0]
 8019cf2:	d1e0      	bne.n	8019cb6 <_free_r+0x22>
 8019cf4:	6818      	ldr	r0, [r3, #0]
 8019cf6:	685b      	ldr	r3, [r3, #4]
 8019cf8:	6053      	str	r3, [r2, #4]
 8019cfa:	4408      	add	r0, r1
 8019cfc:	6010      	str	r0, [r2, #0]
 8019cfe:	e7da      	b.n	8019cb6 <_free_r+0x22>
 8019d00:	d902      	bls.n	8019d08 <_free_r+0x74>
 8019d02:	230c      	movs	r3, #12
 8019d04:	602b      	str	r3, [r5, #0]
 8019d06:	e7d6      	b.n	8019cb6 <_free_r+0x22>
 8019d08:	6820      	ldr	r0, [r4, #0]
 8019d0a:	1821      	adds	r1, r4, r0
 8019d0c:	428b      	cmp	r3, r1
 8019d0e:	bf04      	itt	eq
 8019d10:	6819      	ldreq	r1, [r3, #0]
 8019d12:	685b      	ldreq	r3, [r3, #4]
 8019d14:	6063      	str	r3, [r4, #4]
 8019d16:	bf04      	itt	eq
 8019d18:	1809      	addeq	r1, r1, r0
 8019d1a:	6021      	streq	r1, [r4, #0]
 8019d1c:	6054      	str	r4, [r2, #4]
 8019d1e:	e7ca      	b.n	8019cb6 <_free_r+0x22>
 8019d20:	bd38      	pop	{r3, r4, r5, pc}
 8019d22:	bf00      	nop
 8019d24:	200004a4 	.word	0x200004a4

08019d28 <__sfputc_r>:
 8019d28:	6893      	ldr	r3, [r2, #8]
 8019d2a:	3b01      	subs	r3, #1
 8019d2c:	2b00      	cmp	r3, #0
 8019d2e:	b410      	push	{r4}
 8019d30:	6093      	str	r3, [r2, #8]
 8019d32:	da08      	bge.n	8019d46 <__sfputc_r+0x1e>
 8019d34:	6994      	ldr	r4, [r2, #24]
 8019d36:	42a3      	cmp	r3, r4
 8019d38:	db01      	blt.n	8019d3e <__sfputc_r+0x16>
 8019d3a:	290a      	cmp	r1, #10
 8019d3c:	d103      	bne.n	8019d46 <__sfputc_r+0x1e>
 8019d3e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d42:	f7ff be04 	b.w	801994e <__swbuf_r>
 8019d46:	6813      	ldr	r3, [r2, #0]
 8019d48:	1c58      	adds	r0, r3, #1
 8019d4a:	6010      	str	r0, [r2, #0]
 8019d4c:	7019      	strb	r1, [r3, #0]
 8019d4e:	4608      	mov	r0, r1
 8019d50:	f85d 4b04 	ldr.w	r4, [sp], #4
 8019d54:	4770      	bx	lr

08019d56 <__sfputs_r>:
 8019d56:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8019d58:	4606      	mov	r6, r0
 8019d5a:	460f      	mov	r7, r1
 8019d5c:	4614      	mov	r4, r2
 8019d5e:	18d5      	adds	r5, r2, r3
 8019d60:	42ac      	cmp	r4, r5
 8019d62:	d101      	bne.n	8019d68 <__sfputs_r+0x12>
 8019d64:	2000      	movs	r0, #0
 8019d66:	e007      	b.n	8019d78 <__sfputs_r+0x22>
 8019d68:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019d6c:	463a      	mov	r2, r7
 8019d6e:	4630      	mov	r0, r6
 8019d70:	f7ff ffda 	bl	8019d28 <__sfputc_r>
 8019d74:	1c43      	adds	r3, r0, #1
 8019d76:	d1f3      	bne.n	8019d60 <__sfputs_r+0xa>
 8019d78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08019d7c <_vfiprintf_r>:
 8019d7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8019d80:	460d      	mov	r5, r1
 8019d82:	b09d      	sub	sp, #116	@ 0x74
 8019d84:	4614      	mov	r4, r2
 8019d86:	4698      	mov	r8, r3
 8019d88:	4606      	mov	r6, r0
 8019d8a:	b118      	cbz	r0, 8019d94 <_vfiprintf_r+0x18>
 8019d8c:	6a03      	ldr	r3, [r0, #32]
 8019d8e:	b90b      	cbnz	r3, 8019d94 <_vfiprintf_r+0x18>
 8019d90:	f7ff fc38 	bl	8019604 <__sinit>
 8019d94:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019d96:	07d9      	lsls	r1, r3, #31
 8019d98:	d405      	bmi.n	8019da6 <_vfiprintf_r+0x2a>
 8019d9a:	89ab      	ldrh	r3, [r5, #12]
 8019d9c:	059a      	lsls	r2, r3, #22
 8019d9e:	d402      	bmi.n	8019da6 <_vfiprintf_r+0x2a>
 8019da0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019da2:	f7ff ff4e 	bl	8019c42 <__retarget_lock_acquire_recursive>
 8019da6:	89ab      	ldrh	r3, [r5, #12]
 8019da8:	071b      	lsls	r3, r3, #28
 8019daa:	d501      	bpl.n	8019db0 <_vfiprintf_r+0x34>
 8019dac:	692b      	ldr	r3, [r5, #16]
 8019dae:	b99b      	cbnz	r3, 8019dd8 <_vfiprintf_r+0x5c>
 8019db0:	4629      	mov	r1, r5
 8019db2:	4630      	mov	r0, r6
 8019db4:	f7ff fe0a 	bl	80199cc <__swsetup_r>
 8019db8:	b170      	cbz	r0, 8019dd8 <_vfiprintf_r+0x5c>
 8019dba:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019dbc:	07dc      	lsls	r4, r3, #31
 8019dbe:	d504      	bpl.n	8019dca <_vfiprintf_r+0x4e>
 8019dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8019dc4:	b01d      	add	sp, #116	@ 0x74
 8019dc6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8019dca:	89ab      	ldrh	r3, [r5, #12]
 8019dcc:	0598      	lsls	r0, r3, #22
 8019dce:	d4f7      	bmi.n	8019dc0 <_vfiprintf_r+0x44>
 8019dd0:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019dd2:	f7ff ff37 	bl	8019c44 <__retarget_lock_release_recursive>
 8019dd6:	e7f3      	b.n	8019dc0 <_vfiprintf_r+0x44>
 8019dd8:	2300      	movs	r3, #0
 8019dda:	9309      	str	r3, [sp, #36]	@ 0x24
 8019ddc:	2320      	movs	r3, #32
 8019dde:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8019de2:	f8cd 800c 	str.w	r8, [sp, #12]
 8019de6:	2330      	movs	r3, #48	@ 0x30
 8019de8:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8019f98 <_vfiprintf_r+0x21c>
 8019dec:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8019df0:	f04f 0901 	mov.w	r9, #1
 8019df4:	4623      	mov	r3, r4
 8019df6:	469a      	mov	sl, r3
 8019df8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8019dfc:	b10a      	cbz	r2, 8019e02 <_vfiprintf_r+0x86>
 8019dfe:	2a25      	cmp	r2, #37	@ 0x25
 8019e00:	d1f9      	bne.n	8019df6 <_vfiprintf_r+0x7a>
 8019e02:	ebba 0b04 	subs.w	fp, sl, r4
 8019e06:	d00b      	beq.n	8019e20 <_vfiprintf_r+0xa4>
 8019e08:	465b      	mov	r3, fp
 8019e0a:	4622      	mov	r2, r4
 8019e0c:	4629      	mov	r1, r5
 8019e0e:	4630      	mov	r0, r6
 8019e10:	f7ff ffa1 	bl	8019d56 <__sfputs_r>
 8019e14:	3001      	adds	r0, #1
 8019e16:	f000 80a7 	beq.w	8019f68 <_vfiprintf_r+0x1ec>
 8019e1a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8019e1c:	445a      	add	r2, fp
 8019e1e:	9209      	str	r2, [sp, #36]	@ 0x24
 8019e20:	f89a 3000 	ldrb.w	r3, [sl]
 8019e24:	2b00      	cmp	r3, #0
 8019e26:	f000 809f 	beq.w	8019f68 <_vfiprintf_r+0x1ec>
 8019e2a:	2300      	movs	r3, #0
 8019e2c:	f04f 32ff 	mov.w	r2, #4294967295
 8019e30:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8019e34:	f10a 0a01 	add.w	sl, sl, #1
 8019e38:	9304      	str	r3, [sp, #16]
 8019e3a:	9307      	str	r3, [sp, #28]
 8019e3c:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8019e40:	931a      	str	r3, [sp, #104]	@ 0x68
 8019e42:	4654      	mov	r4, sl
 8019e44:	2205      	movs	r2, #5
 8019e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019e4a:	4853      	ldr	r0, [pc, #332]	@ (8019f98 <_vfiprintf_r+0x21c>)
 8019e4c:	f7f7 fa00 	bl	8011250 <memchr>
 8019e50:	9a04      	ldr	r2, [sp, #16]
 8019e52:	b9d8      	cbnz	r0, 8019e8c <_vfiprintf_r+0x110>
 8019e54:	06d1      	lsls	r1, r2, #27
 8019e56:	bf44      	itt	mi
 8019e58:	2320      	movmi	r3, #32
 8019e5a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e5e:	0713      	lsls	r3, r2, #28
 8019e60:	bf44      	itt	mi
 8019e62:	232b      	movmi	r3, #43	@ 0x2b
 8019e64:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8019e68:	f89a 3000 	ldrb.w	r3, [sl]
 8019e6c:	2b2a      	cmp	r3, #42	@ 0x2a
 8019e6e:	d015      	beq.n	8019e9c <_vfiprintf_r+0x120>
 8019e70:	9a07      	ldr	r2, [sp, #28]
 8019e72:	4654      	mov	r4, sl
 8019e74:	2000      	movs	r0, #0
 8019e76:	f04f 0c0a 	mov.w	ip, #10
 8019e7a:	4621      	mov	r1, r4
 8019e7c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8019e80:	3b30      	subs	r3, #48	@ 0x30
 8019e82:	2b09      	cmp	r3, #9
 8019e84:	d94b      	bls.n	8019f1e <_vfiprintf_r+0x1a2>
 8019e86:	b1b0      	cbz	r0, 8019eb6 <_vfiprintf_r+0x13a>
 8019e88:	9207      	str	r2, [sp, #28]
 8019e8a:	e014      	b.n	8019eb6 <_vfiprintf_r+0x13a>
 8019e8c:	eba0 0308 	sub.w	r3, r0, r8
 8019e90:	fa09 f303 	lsl.w	r3, r9, r3
 8019e94:	4313      	orrs	r3, r2
 8019e96:	9304      	str	r3, [sp, #16]
 8019e98:	46a2      	mov	sl, r4
 8019e9a:	e7d2      	b.n	8019e42 <_vfiprintf_r+0xc6>
 8019e9c:	9b03      	ldr	r3, [sp, #12]
 8019e9e:	1d19      	adds	r1, r3, #4
 8019ea0:	681b      	ldr	r3, [r3, #0]
 8019ea2:	9103      	str	r1, [sp, #12]
 8019ea4:	2b00      	cmp	r3, #0
 8019ea6:	bfbb      	ittet	lt
 8019ea8:	425b      	neglt	r3, r3
 8019eaa:	f042 0202 	orrlt.w	r2, r2, #2
 8019eae:	9307      	strge	r3, [sp, #28]
 8019eb0:	9307      	strlt	r3, [sp, #28]
 8019eb2:	bfb8      	it	lt
 8019eb4:	9204      	strlt	r2, [sp, #16]
 8019eb6:	7823      	ldrb	r3, [r4, #0]
 8019eb8:	2b2e      	cmp	r3, #46	@ 0x2e
 8019eba:	d10a      	bne.n	8019ed2 <_vfiprintf_r+0x156>
 8019ebc:	7863      	ldrb	r3, [r4, #1]
 8019ebe:	2b2a      	cmp	r3, #42	@ 0x2a
 8019ec0:	d132      	bne.n	8019f28 <_vfiprintf_r+0x1ac>
 8019ec2:	9b03      	ldr	r3, [sp, #12]
 8019ec4:	1d1a      	adds	r2, r3, #4
 8019ec6:	681b      	ldr	r3, [r3, #0]
 8019ec8:	9203      	str	r2, [sp, #12]
 8019eca:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8019ece:	3402      	adds	r4, #2
 8019ed0:	9305      	str	r3, [sp, #20]
 8019ed2:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8019fa8 <_vfiprintf_r+0x22c>
 8019ed6:	7821      	ldrb	r1, [r4, #0]
 8019ed8:	2203      	movs	r2, #3
 8019eda:	4650      	mov	r0, sl
 8019edc:	f7f7 f9b8 	bl	8011250 <memchr>
 8019ee0:	b138      	cbz	r0, 8019ef2 <_vfiprintf_r+0x176>
 8019ee2:	9b04      	ldr	r3, [sp, #16]
 8019ee4:	eba0 000a 	sub.w	r0, r0, sl
 8019ee8:	2240      	movs	r2, #64	@ 0x40
 8019eea:	4082      	lsls	r2, r0
 8019eec:	4313      	orrs	r3, r2
 8019eee:	3401      	adds	r4, #1
 8019ef0:	9304      	str	r3, [sp, #16]
 8019ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8019ef6:	4829      	ldr	r0, [pc, #164]	@ (8019f9c <_vfiprintf_r+0x220>)
 8019ef8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8019efc:	2206      	movs	r2, #6
 8019efe:	f7f7 f9a7 	bl	8011250 <memchr>
 8019f02:	2800      	cmp	r0, #0
 8019f04:	d03f      	beq.n	8019f86 <_vfiprintf_r+0x20a>
 8019f06:	4b26      	ldr	r3, [pc, #152]	@ (8019fa0 <_vfiprintf_r+0x224>)
 8019f08:	bb1b      	cbnz	r3, 8019f52 <_vfiprintf_r+0x1d6>
 8019f0a:	9b03      	ldr	r3, [sp, #12]
 8019f0c:	3307      	adds	r3, #7
 8019f0e:	f023 0307 	bic.w	r3, r3, #7
 8019f12:	3308      	adds	r3, #8
 8019f14:	9303      	str	r3, [sp, #12]
 8019f16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8019f18:	443b      	add	r3, r7
 8019f1a:	9309      	str	r3, [sp, #36]	@ 0x24
 8019f1c:	e76a      	b.n	8019df4 <_vfiprintf_r+0x78>
 8019f1e:	fb0c 3202 	mla	r2, ip, r2, r3
 8019f22:	460c      	mov	r4, r1
 8019f24:	2001      	movs	r0, #1
 8019f26:	e7a8      	b.n	8019e7a <_vfiprintf_r+0xfe>
 8019f28:	2300      	movs	r3, #0
 8019f2a:	3401      	adds	r4, #1
 8019f2c:	9305      	str	r3, [sp, #20]
 8019f2e:	4619      	mov	r1, r3
 8019f30:	f04f 0c0a 	mov.w	ip, #10
 8019f34:	4620      	mov	r0, r4
 8019f36:	f810 2b01 	ldrb.w	r2, [r0], #1
 8019f3a:	3a30      	subs	r2, #48	@ 0x30
 8019f3c:	2a09      	cmp	r2, #9
 8019f3e:	d903      	bls.n	8019f48 <_vfiprintf_r+0x1cc>
 8019f40:	2b00      	cmp	r3, #0
 8019f42:	d0c6      	beq.n	8019ed2 <_vfiprintf_r+0x156>
 8019f44:	9105      	str	r1, [sp, #20]
 8019f46:	e7c4      	b.n	8019ed2 <_vfiprintf_r+0x156>
 8019f48:	fb0c 2101 	mla	r1, ip, r1, r2
 8019f4c:	4604      	mov	r4, r0
 8019f4e:	2301      	movs	r3, #1
 8019f50:	e7f0      	b.n	8019f34 <_vfiprintf_r+0x1b8>
 8019f52:	ab03      	add	r3, sp, #12
 8019f54:	9300      	str	r3, [sp, #0]
 8019f56:	462a      	mov	r2, r5
 8019f58:	4b12      	ldr	r3, [pc, #72]	@ (8019fa4 <_vfiprintf_r+0x228>)
 8019f5a:	a904      	add	r1, sp, #16
 8019f5c:	4630      	mov	r0, r6
 8019f5e:	f3af 8000 	nop.w
 8019f62:	4607      	mov	r7, r0
 8019f64:	1c78      	adds	r0, r7, #1
 8019f66:	d1d6      	bne.n	8019f16 <_vfiprintf_r+0x19a>
 8019f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8019f6a:	07d9      	lsls	r1, r3, #31
 8019f6c:	d405      	bmi.n	8019f7a <_vfiprintf_r+0x1fe>
 8019f6e:	89ab      	ldrh	r3, [r5, #12]
 8019f70:	059a      	lsls	r2, r3, #22
 8019f72:	d402      	bmi.n	8019f7a <_vfiprintf_r+0x1fe>
 8019f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8019f76:	f7ff fe65 	bl	8019c44 <__retarget_lock_release_recursive>
 8019f7a:	89ab      	ldrh	r3, [r5, #12]
 8019f7c:	065b      	lsls	r3, r3, #25
 8019f7e:	f53f af1f 	bmi.w	8019dc0 <_vfiprintf_r+0x44>
 8019f82:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8019f84:	e71e      	b.n	8019dc4 <_vfiprintf_r+0x48>
 8019f86:	ab03      	add	r3, sp, #12
 8019f88:	9300      	str	r3, [sp, #0]
 8019f8a:	462a      	mov	r2, r5
 8019f8c:	4b05      	ldr	r3, [pc, #20]	@ (8019fa4 <_vfiprintf_r+0x228>)
 8019f8e:	a904      	add	r1, sp, #16
 8019f90:	4630      	mov	r0, r6
 8019f92:	f000 f879 	bl	801a088 <_printf_i>
 8019f96:	e7e4      	b.n	8019f62 <_vfiprintf_r+0x1e6>
 8019f98:	0801b3e2 	.word	0x0801b3e2
 8019f9c:	0801b3ec 	.word	0x0801b3ec
 8019fa0:	00000000 	.word	0x00000000
 8019fa4:	08019d57 	.word	0x08019d57
 8019fa8:	0801b3e8 	.word	0x0801b3e8

08019fac <_printf_common>:
 8019fac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8019fb0:	4616      	mov	r6, r2
 8019fb2:	4698      	mov	r8, r3
 8019fb4:	688a      	ldr	r2, [r1, #8]
 8019fb6:	690b      	ldr	r3, [r1, #16]
 8019fb8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8019fbc:	4293      	cmp	r3, r2
 8019fbe:	bfb8      	it	lt
 8019fc0:	4613      	movlt	r3, r2
 8019fc2:	6033      	str	r3, [r6, #0]
 8019fc4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8019fc8:	4607      	mov	r7, r0
 8019fca:	460c      	mov	r4, r1
 8019fcc:	b10a      	cbz	r2, 8019fd2 <_printf_common+0x26>
 8019fce:	3301      	adds	r3, #1
 8019fd0:	6033      	str	r3, [r6, #0]
 8019fd2:	6823      	ldr	r3, [r4, #0]
 8019fd4:	0699      	lsls	r1, r3, #26
 8019fd6:	bf42      	ittt	mi
 8019fd8:	6833      	ldrmi	r3, [r6, #0]
 8019fda:	3302      	addmi	r3, #2
 8019fdc:	6033      	strmi	r3, [r6, #0]
 8019fde:	6825      	ldr	r5, [r4, #0]
 8019fe0:	f015 0506 	ands.w	r5, r5, #6
 8019fe4:	d106      	bne.n	8019ff4 <_printf_common+0x48>
 8019fe6:	f104 0a19 	add.w	sl, r4, #25
 8019fea:	68e3      	ldr	r3, [r4, #12]
 8019fec:	6832      	ldr	r2, [r6, #0]
 8019fee:	1a9b      	subs	r3, r3, r2
 8019ff0:	42ab      	cmp	r3, r5
 8019ff2:	dc26      	bgt.n	801a042 <_printf_common+0x96>
 8019ff4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8019ff8:	6822      	ldr	r2, [r4, #0]
 8019ffa:	3b00      	subs	r3, #0
 8019ffc:	bf18      	it	ne
 8019ffe:	2301      	movne	r3, #1
 801a000:	0692      	lsls	r2, r2, #26
 801a002:	d42b      	bmi.n	801a05c <_printf_common+0xb0>
 801a004:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 801a008:	4641      	mov	r1, r8
 801a00a:	4638      	mov	r0, r7
 801a00c:	47c8      	blx	r9
 801a00e:	3001      	adds	r0, #1
 801a010:	d01e      	beq.n	801a050 <_printf_common+0xa4>
 801a012:	6823      	ldr	r3, [r4, #0]
 801a014:	6922      	ldr	r2, [r4, #16]
 801a016:	f003 0306 	and.w	r3, r3, #6
 801a01a:	2b04      	cmp	r3, #4
 801a01c:	bf02      	ittt	eq
 801a01e:	68e5      	ldreq	r5, [r4, #12]
 801a020:	6833      	ldreq	r3, [r6, #0]
 801a022:	1aed      	subeq	r5, r5, r3
 801a024:	68a3      	ldr	r3, [r4, #8]
 801a026:	bf0c      	ite	eq
 801a028:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801a02c:	2500      	movne	r5, #0
 801a02e:	4293      	cmp	r3, r2
 801a030:	bfc4      	itt	gt
 801a032:	1a9b      	subgt	r3, r3, r2
 801a034:	18ed      	addgt	r5, r5, r3
 801a036:	2600      	movs	r6, #0
 801a038:	341a      	adds	r4, #26
 801a03a:	42b5      	cmp	r5, r6
 801a03c:	d11a      	bne.n	801a074 <_printf_common+0xc8>
 801a03e:	2000      	movs	r0, #0
 801a040:	e008      	b.n	801a054 <_printf_common+0xa8>
 801a042:	2301      	movs	r3, #1
 801a044:	4652      	mov	r2, sl
 801a046:	4641      	mov	r1, r8
 801a048:	4638      	mov	r0, r7
 801a04a:	47c8      	blx	r9
 801a04c:	3001      	adds	r0, #1
 801a04e:	d103      	bne.n	801a058 <_printf_common+0xac>
 801a050:	f04f 30ff 	mov.w	r0, #4294967295
 801a054:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a058:	3501      	adds	r5, #1
 801a05a:	e7c6      	b.n	8019fea <_printf_common+0x3e>
 801a05c:	18e1      	adds	r1, r4, r3
 801a05e:	1c5a      	adds	r2, r3, #1
 801a060:	2030      	movs	r0, #48	@ 0x30
 801a062:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 801a066:	4422      	add	r2, r4
 801a068:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 801a06c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 801a070:	3302      	adds	r3, #2
 801a072:	e7c7      	b.n	801a004 <_printf_common+0x58>
 801a074:	2301      	movs	r3, #1
 801a076:	4622      	mov	r2, r4
 801a078:	4641      	mov	r1, r8
 801a07a:	4638      	mov	r0, r7
 801a07c:	47c8      	blx	r9
 801a07e:	3001      	adds	r0, #1
 801a080:	d0e6      	beq.n	801a050 <_printf_common+0xa4>
 801a082:	3601      	adds	r6, #1
 801a084:	e7d9      	b.n	801a03a <_printf_common+0x8e>
	...

0801a088 <_printf_i>:
 801a088:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801a08c:	7e0f      	ldrb	r7, [r1, #24]
 801a08e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 801a090:	2f78      	cmp	r7, #120	@ 0x78
 801a092:	4691      	mov	r9, r2
 801a094:	4680      	mov	r8, r0
 801a096:	460c      	mov	r4, r1
 801a098:	469a      	mov	sl, r3
 801a09a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 801a09e:	d807      	bhi.n	801a0b0 <_printf_i+0x28>
 801a0a0:	2f62      	cmp	r7, #98	@ 0x62
 801a0a2:	d80a      	bhi.n	801a0ba <_printf_i+0x32>
 801a0a4:	2f00      	cmp	r7, #0
 801a0a6:	f000 80d2 	beq.w	801a24e <_printf_i+0x1c6>
 801a0aa:	2f58      	cmp	r7, #88	@ 0x58
 801a0ac:	f000 80b9 	beq.w	801a222 <_printf_i+0x19a>
 801a0b0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a0b4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 801a0b8:	e03a      	b.n	801a130 <_printf_i+0xa8>
 801a0ba:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 801a0be:	2b15      	cmp	r3, #21
 801a0c0:	d8f6      	bhi.n	801a0b0 <_printf_i+0x28>
 801a0c2:	a101      	add	r1, pc, #4	@ (adr r1, 801a0c8 <_printf_i+0x40>)
 801a0c4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801a0c8:	0801a121 	.word	0x0801a121
 801a0cc:	0801a135 	.word	0x0801a135
 801a0d0:	0801a0b1 	.word	0x0801a0b1
 801a0d4:	0801a0b1 	.word	0x0801a0b1
 801a0d8:	0801a0b1 	.word	0x0801a0b1
 801a0dc:	0801a0b1 	.word	0x0801a0b1
 801a0e0:	0801a135 	.word	0x0801a135
 801a0e4:	0801a0b1 	.word	0x0801a0b1
 801a0e8:	0801a0b1 	.word	0x0801a0b1
 801a0ec:	0801a0b1 	.word	0x0801a0b1
 801a0f0:	0801a0b1 	.word	0x0801a0b1
 801a0f4:	0801a235 	.word	0x0801a235
 801a0f8:	0801a15f 	.word	0x0801a15f
 801a0fc:	0801a1ef 	.word	0x0801a1ef
 801a100:	0801a0b1 	.word	0x0801a0b1
 801a104:	0801a0b1 	.word	0x0801a0b1
 801a108:	0801a257 	.word	0x0801a257
 801a10c:	0801a0b1 	.word	0x0801a0b1
 801a110:	0801a15f 	.word	0x0801a15f
 801a114:	0801a0b1 	.word	0x0801a0b1
 801a118:	0801a0b1 	.word	0x0801a0b1
 801a11c:	0801a1f7 	.word	0x0801a1f7
 801a120:	6833      	ldr	r3, [r6, #0]
 801a122:	1d1a      	adds	r2, r3, #4
 801a124:	681b      	ldr	r3, [r3, #0]
 801a126:	6032      	str	r2, [r6, #0]
 801a128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 801a12c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 801a130:	2301      	movs	r3, #1
 801a132:	e09d      	b.n	801a270 <_printf_i+0x1e8>
 801a134:	6833      	ldr	r3, [r6, #0]
 801a136:	6820      	ldr	r0, [r4, #0]
 801a138:	1d19      	adds	r1, r3, #4
 801a13a:	6031      	str	r1, [r6, #0]
 801a13c:	0606      	lsls	r6, r0, #24
 801a13e:	d501      	bpl.n	801a144 <_printf_i+0xbc>
 801a140:	681d      	ldr	r5, [r3, #0]
 801a142:	e003      	b.n	801a14c <_printf_i+0xc4>
 801a144:	0645      	lsls	r5, r0, #25
 801a146:	d5fb      	bpl.n	801a140 <_printf_i+0xb8>
 801a148:	f9b3 5000 	ldrsh.w	r5, [r3]
 801a14c:	2d00      	cmp	r5, #0
 801a14e:	da03      	bge.n	801a158 <_printf_i+0xd0>
 801a150:	232d      	movs	r3, #45	@ 0x2d
 801a152:	426d      	negs	r5, r5
 801a154:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a158:	4859      	ldr	r0, [pc, #356]	@ (801a2c0 <_printf_i+0x238>)
 801a15a:	230a      	movs	r3, #10
 801a15c:	e011      	b.n	801a182 <_printf_i+0xfa>
 801a15e:	6821      	ldr	r1, [r4, #0]
 801a160:	6833      	ldr	r3, [r6, #0]
 801a162:	0608      	lsls	r0, r1, #24
 801a164:	f853 5b04 	ldr.w	r5, [r3], #4
 801a168:	d402      	bmi.n	801a170 <_printf_i+0xe8>
 801a16a:	0649      	lsls	r1, r1, #25
 801a16c:	bf48      	it	mi
 801a16e:	b2ad      	uxthmi	r5, r5
 801a170:	2f6f      	cmp	r7, #111	@ 0x6f
 801a172:	4853      	ldr	r0, [pc, #332]	@ (801a2c0 <_printf_i+0x238>)
 801a174:	6033      	str	r3, [r6, #0]
 801a176:	bf14      	ite	ne
 801a178:	230a      	movne	r3, #10
 801a17a:	2308      	moveq	r3, #8
 801a17c:	2100      	movs	r1, #0
 801a17e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 801a182:	6866      	ldr	r6, [r4, #4]
 801a184:	60a6      	str	r6, [r4, #8]
 801a186:	2e00      	cmp	r6, #0
 801a188:	bfa2      	ittt	ge
 801a18a:	6821      	ldrge	r1, [r4, #0]
 801a18c:	f021 0104 	bicge.w	r1, r1, #4
 801a190:	6021      	strge	r1, [r4, #0]
 801a192:	b90d      	cbnz	r5, 801a198 <_printf_i+0x110>
 801a194:	2e00      	cmp	r6, #0
 801a196:	d04b      	beq.n	801a230 <_printf_i+0x1a8>
 801a198:	4616      	mov	r6, r2
 801a19a:	fbb5 f1f3 	udiv	r1, r5, r3
 801a19e:	fb03 5711 	mls	r7, r3, r1, r5
 801a1a2:	5dc7      	ldrb	r7, [r0, r7]
 801a1a4:	f806 7d01 	strb.w	r7, [r6, #-1]!
 801a1a8:	462f      	mov	r7, r5
 801a1aa:	42bb      	cmp	r3, r7
 801a1ac:	460d      	mov	r5, r1
 801a1ae:	d9f4      	bls.n	801a19a <_printf_i+0x112>
 801a1b0:	2b08      	cmp	r3, #8
 801a1b2:	d10b      	bne.n	801a1cc <_printf_i+0x144>
 801a1b4:	6823      	ldr	r3, [r4, #0]
 801a1b6:	07df      	lsls	r7, r3, #31
 801a1b8:	d508      	bpl.n	801a1cc <_printf_i+0x144>
 801a1ba:	6923      	ldr	r3, [r4, #16]
 801a1bc:	6861      	ldr	r1, [r4, #4]
 801a1be:	4299      	cmp	r1, r3
 801a1c0:	bfde      	ittt	le
 801a1c2:	2330      	movle	r3, #48	@ 0x30
 801a1c4:	f806 3c01 	strble.w	r3, [r6, #-1]
 801a1c8:	f106 36ff 	addle.w	r6, r6, #4294967295
 801a1cc:	1b92      	subs	r2, r2, r6
 801a1ce:	6122      	str	r2, [r4, #16]
 801a1d0:	f8cd a000 	str.w	sl, [sp]
 801a1d4:	464b      	mov	r3, r9
 801a1d6:	aa03      	add	r2, sp, #12
 801a1d8:	4621      	mov	r1, r4
 801a1da:	4640      	mov	r0, r8
 801a1dc:	f7ff fee6 	bl	8019fac <_printf_common>
 801a1e0:	3001      	adds	r0, #1
 801a1e2:	d14a      	bne.n	801a27a <_printf_i+0x1f2>
 801a1e4:	f04f 30ff 	mov.w	r0, #4294967295
 801a1e8:	b004      	add	sp, #16
 801a1ea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801a1ee:	6823      	ldr	r3, [r4, #0]
 801a1f0:	f043 0320 	orr.w	r3, r3, #32
 801a1f4:	6023      	str	r3, [r4, #0]
 801a1f6:	4833      	ldr	r0, [pc, #204]	@ (801a2c4 <_printf_i+0x23c>)
 801a1f8:	2778      	movs	r7, #120	@ 0x78
 801a1fa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 801a1fe:	6823      	ldr	r3, [r4, #0]
 801a200:	6831      	ldr	r1, [r6, #0]
 801a202:	061f      	lsls	r7, r3, #24
 801a204:	f851 5b04 	ldr.w	r5, [r1], #4
 801a208:	d402      	bmi.n	801a210 <_printf_i+0x188>
 801a20a:	065f      	lsls	r7, r3, #25
 801a20c:	bf48      	it	mi
 801a20e:	b2ad      	uxthmi	r5, r5
 801a210:	6031      	str	r1, [r6, #0]
 801a212:	07d9      	lsls	r1, r3, #31
 801a214:	bf44      	itt	mi
 801a216:	f043 0320 	orrmi.w	r3, r3, #32
 801a21a:	6023      	strmi	r3, [r4, #0]
 801a21c:	b11d      	cbz	r5, 801a226 <_printf_i+0x19e>
 801a21e:	2310      	movs	r3, #16
 801a220:	e7ac      	b.n	801a17c <_printf_i+0xf4>
 801a222:	4827      	ldr	r0, [pc, #156]	@ (801a2c0 <_printf_i+0x238>)
 801a224:	e7e9      	b.n	801a1fa <_printf_i+0x172>
 801a226:	6823      	ldr	r3, [r4, #0]
 801a228:	f023 0320 	bic.w	r3, r3, #32
 801a22c:	6023      	str	r3, [r4, #0]
 801a22e:	e7f6      	b.n	801a21e <_printf_i+0x196>
 801a230:	4616      	mov	r6, r2
 801a232:	e7bd      	b.n	801a1b0 <_printf_i+0x128>
 801a234:	6833      	ldr	r3, [r6, #0]
 801a236:	6825      	ldr	r5, [r4, #0]
 801a238:	6961      	ldr	r1, [r4, #20]
 801a23a:	1d18      	adds	r0, r3, #4
 801a23c:	6030      	str	r0, [r6, #0]
 801a23e:	062e      	lsls	r6, r5, #24
 801a240:	681b      	ldr	r3, [r3, #0]
 801a242:	d501      	bpl.n	801a248 <_printf_i+0x1c0>
 801a244:	6019      	str	r1, [r3, #0]
 801a246:	e002      	b.n	801a24e <_printf_i+0x1c6>
 801a248:	0668      	lsls	r0, r5, #25
 801a24a:	d5fb      	bpl.n	801a244 <_printf_i+0x1bc>
 801a24c:	8019      	strh	r1, [r3, #0]
 801a24e:	2300      	movs	r3, #0
 801a250:	6123      	str	r3, [r4, #16]
 801a252:	4616      	mov	r6, r2
 801a254:	e7bc      	b.n	801a1d0 <_printf_i+0x148>
 801a256:	6833      	ldr	r3, [r6, #0]
 801a258:	1d1a      	adds	r2, r3, #4
 801a25a:	6032      	str	r2, [r6, #0]
 801a25c:	681e      	ldr	r6, [r3, #0]
 801a25e:	6862      	ldr	r2, [r4, #4]
 801a260:	2100      	movs	r1, #0
 801a262:	4630      	mov	r0, r6
 801a264:	f7f6 fff4 	bl	8011250 <memchr>
 801a268:	b108      	cbz	r0, 801a26e <_printf_i+0x1e6>
 801a26a:	1b80      	subs	r0, r0, r6
 801a26c:	6060      	str	r0, [r4, #4]
 801a26e:	6863      	ldr	r3, [r4, #4]
 801a270:	6123      	str	r3, [r4, #16]
 801a272:	2300      	movs	r3, #0
 801a274:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 801a278:	e7aa      	b.n	801a1d0 <_printf_i+0x148>
 801a27a:	6923      	ldr	r3, [r4, #16]
 801a27c:	4632      	mov	r2, r6
 801a27e:	4649      	mov	r1, r9
 801a280:	4640      	mov	r0, r8
 801a282:	47d0      	blx	sl
 801a284:	3001      	adds	r0, #1
 801a286:	d0ad      	beq.n	801a1e4 <_printf_i+0x15c>
 801a288:	6823      	ldr	r3, [r4, #0]
 801a28a:	079b      	lsls	r3, r3, #30
 801a28c:	d413      	bmi.n	801a2b6 <_printf_i+0x22e>
 801a28e:	68e0      	ldr	r0, [r4, #12]
 801a290:	9b03      	ldr	r3, [sp, #12]
 801a292:	4298      	cmp	r0, r3
 801a294:	bfb8      	it	lt
 801a296:	4618      	movlt	r0, r3
 801a298:	e7a6      	b.n	801a1e8 <_printf_i+0x160>
 801a29a:	2301      	movs	r3, #1
 801a29c:	4632      	mov	r2, r6
 801a29e:	4649      	mov	r1, r9
 801a2a0:	4640      	mov	r0, r8
 801a2a2:	47d0      	blx	sl
 801a2a4:	3001      	adds	r0, #1
 801a2a6:	d09d      	beq.n	801a1e4 <_printf_i+0x15c>
 801a2a8:	3501      	adds	r5, #1
 801a2aa:	68e3      	ldr	r3, [r4, #12]
 801a2ac:	9903      	ldr	r1, [sp, #12]
 801a2ae:	1a5b      	subs	r3, r3, r1
 801a2b0:	42ab      	cmp	r3, r5
 801a2b2:	dcf2      	bgt.n	801a29a <_printf_i+0x212>
 801a2b4:	e7eb      	b.n	801a28e <_printf_i+0x206>
 801a2b6:	2500      	movs	r5, #0
 801a2b8:	f104 0619 	add.w	r6, r4, #25
 801a2bc:	e7f5      	b.n	801a2aa <_printf_i+0x222>
 801a2be:	bf00      	nop
 801a2c0:	0801b3f3 	.word	0x0801b3f3
 801a2c4:	0801b404 	.word	0x0801b404

0801a2c8 <__sflush_r>:
 801a2c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 801a2cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801a2d0:	0716      	lsls	r6, r2, #28
 801a2d2:	4605      	mov	r5, r0
 801a2d4:	460c      	mov	r4, r1
 801a2d6:	d454      	bmi.n	801a382 <__sflush_r+0xba>
 801a2d8:	684b      	ldr	r3, [r1, #4]
 801a2da:	2b00      	cmp	r3, #0
 801a2dc:	dc02      	bgt.n	801a2e4 <__sflush_r+0x1c>
 801a2de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 801a2e0:	2b00      	cmp	r3, #0
 801a2e2:	dd48      	ble.n	801a376 <__sflush_r+0xae>
 801a2e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a2e6:	2e00      	cmp	r6, #0
 801a2e8:	d045      	beq.n	801a376 <__sflush_r+0xae>
 801a2ea:	2300      	movs	r3, #0
 801a2ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 801a2f0:	682f      	ldr	r7, [r5, #0]
 801a2f2:	6a21      	ldr	r1, [r4, #32]
 801a2f4:	602b      	str	r3, [r5, #0]
 801a2f6:	d030      	beq.n	801a35a <__sflush_r+0x92>
 801a2f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801a2fa:	89a3      	ldrh	r3, [r4, #12]
 801a2fc:	0759      	lsls	r1, r3, #29
 801a2fe:	d505      	bpl.n	801a30c <__sflush_r+0x44>
 801a300:	6863      	ldr	r3, [r4, #4]
 801a302:	1ad2      	subs	r2, r2, r3
 801a304:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801a306:	b10b      	cbz	r3, 801a30c <__sflush_r+0x44>
 801a308:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801a30a:	1ad2      	subs	r2, r2, r3
 801a30c:	2300      	movs	r3, #0
 801a30e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 801a310:	6a21      	ldr	r1, [r4, #32]
 801a312:	4628      	mov	r0, r5
 801a314:	47b0      	blx	r6
 801a316:	1c43      	adds	r3, r0, #1
 801a318:	89a3      	ldrh	r3, [r4, #12]
 801a31a:	d106      	bne.n	801a32a <__sflush_r+0x62>
 801a31c:	6829      	ldr	r1, [r5, #0]
 801a31e:	291d      	cmp	r1, #29
 801a320:	d82b      	bhi.n	801a37a <__sflush_r+0xb2>
 801a322:	4a2a      	ldr	r2, [pc, #168]	@ (801a3cc <__sflush_r+0x104>)
 801a324:	410a      	asrs	r2, r1
 801a326:	07d6      	lsls	r6, r2, #31
 801a328:	d427      	bmi.n	801a37a <__sflush_r+0xb2>
 801a32a:	2200      	movs	r2, #0
 801a32c:	6062      	str	r2, [r4, #4]
 801a32e:	04d9      	lsls	r1, r3, #19
 801a330:	6922      	ldr	r2, [r4, #16]
 801a332:	6022      	str	r2, [r4, #0]
 801a334:	d504      	bpl.n	801a340 <__sflush_r+0x78>
 801a336:	1c42      	adds	r2, r0, #1
 801a338:	d101      	bne.n	801a33e <__sflush_r+0x76>
 801a33a:	682b      	ldr	r3, [r5, #0]
 801a33c:	b903      	cbnz	r3, 801a340 <__sflush_r+0x78>
 801a33e:	6560      	str	r0, [r4, #84]	@ 0x54
 801a340:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801a342:	602f      	str	r7, [r5, #0]
 801a344:	b1b9      	cbz	r1, 801a376 <__sflush_r+0xae>
 801a346:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 801a34a:	4299      	cmp	r1, r3
 801a34c:	d002      	beq.n	801a354 <__sflush_r+0x8c>
 801a34e:	4628      	mov	r0, r5
 801a350:	f7ff fca0 	bl	8019c94 <_free_r>
 801a354:	2300      	movs	r3, #0
 801a356:	6363      	str	r3, [r4, #52]	@ 0x34
 801a358:	e00d      	b.n	801a376 <__sflush_r+0xae>
 801a35a:	2301      	movs	r3, #1
 801a35c:	4628      	mov	r0, r5
 801a35e:	47b0      	blx	r6
 801a360:	4602      	mov	r2, r0
 801a362:	1c50      	adds	r0, r2, #1
 801a364:	d1c9      	bne.n	801a2fa <__sflush_r+0x32>
 801a366:	682b      	ldr	r3, [r5, #0]
 801a368:	2b00      	cmp	r3, #0
 801a36a:	d0c6      	beq.n	801a2fa <__sflush_r+0x32>
 801a36c:	2b1d      	cmp	r3, #29
 801a36e:	d001      	beq.n	801a374 <__sflush_r+0xac>
 801a370:	2b16      	cmp	r3, #22
 801a372:	d11e      	bne.n	801a3b2 <__sflush_r+0xea>
 801a374:	602f      	str	r7, [r5, #0]
 801a376:	2000      	movs	r0, #0
 801a378:	e022      	b.n	801a3c0 <__sflush_r+0xf8>
 801a37a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a37e:	b21b      	sxth	r3, r3
 801a380:	e01b      	b.n	801a3ba <__sflush_r+0xf2>
 801a382:	690f      	ldr	r7, [r1, #16]
 801a384:	2f00      	cmp	r7, #0
 801a386:	d0f6      	beq.n	801a376 <__sflush_r+0xae>
 801a388:	0793      	lsls	r3, r2, #30
 801a38a:	680e      	ldr	r6, [r1, #0]
 801a38c:	bf08      	it	eq
 801a38e:	694b      	ldreq	r3, [r1, #20]
 801a390:	600f      	str	r7, [r1, #0]
 801a392:	bf18      	it	ne
 801a394:	2300      	movne	r3, #0
 801a396:	eba6 0807 	sub.w	r8, r6, r7
 801a39a:	608b      	str	r3, [r1, #8]
 801a39c:	f1b8 0f00 	cmp.w	r8, #0
 801a3a0:	dde9      	ble.n	801a376 <__sflush_r+0xae>
 801a3a2:	6a21      	ldr	r1, [r4, #32]
 801a3a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 801a3a6:	4643      	mov	r3, r8
 801a3a8:	463a      	mov	r2, r7
 801a3aa:	4628      	mov	r0, r5
 801a3ac:	47b0      	blx	r6
 801a3ae:	2800      	cmp	r0, #0
 801a3b0:	dc08      	bgt.n	801a3c4 <__sflush_r+0xfc>
 801a3b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 801a3ba:	81a3      	strh	r3, [r4, #12]
 801a3bc:	f04f 30ff 	mov.w	r0, #4294967295
 801a3c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801a3c4:	4407      	add	r7, r0
 801a3c6:	eba8 0800 	sub.w	r8, r8, r0
 801a3ca:	e7e7      	b.n	801a39c <__sflush_r+0xd4>
 801a3cc:	dfbffffe 	.word	0xdfbffffe

0801a3d0 <_fflush_r>:
 801a3d0:	b538      	push	{r3, r4, r5, lr}
 801a3d2:	690b      	ldr	r3, [r1, #16]
 801a3d4:	4605      	mov	r5, r0
 801a3d6:	460c      	mov	r4, r1
 801a3d8:	b913      	cbnz	r3, 801a3e0 <_fflush_r+0x10>
 801a3da:	2500      	movs	r5, #0
 801a3dc:	4628      	mov	r0, r5
 801a3de:	bd38      	pop	{r3, r4, r5, pc}
 801a3e0:	b118      	cbz	r0, 801a3ea <_fflush_r+0x1a>
 801a3e2:	6a03      	ldr	r3, [r0, #32]
 801a3e4:	b90b      	cbnz	r3, 801a3ea <_fflush_r+0x1a>
 801a3e6:	f7ff f90d 	bl	8019604 <__sinit>
 801a3ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a3ee:	2b00      	cmp	r3, #0
 801a3f0:	d0f3      	beq.n	801a3da <_fflush_r+0xa>
 801a3f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801a3f4:	07d0      	lsls	r0, r2, #31
 801a3f6:	d404      	bmi.n	801a402 <_fflush_r+0x32>
 801a3f8:	0599      	lsls	r1, r3, #22
 801a3fa:	d402      	bmi.n	801a402 <_fflush_r+0x32>
 801a3fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a3fe:	f7ff fc20 	bl	8019c42 <__retarget_lock_acquire_recursive>
 801a402:	4628      	mov	r0, r5
 801a404:	4621      	mov	r1, r4
 801a406:	f7ff ff5f 	bl	801a2c8 <__sflush_r>
 801a40a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801a40c:	07da      	lsls	r2, r3, #31
 801a40e:	4605      	mov	r5, r0
 801a410:	d4e4      	bmi.n	801a3dc <_fflush_r+0xc>
 801a412:	89a3      	ldrh	r3, [r4, #12]
 801a414:	059b      	lsls	r3, r3, #22
 801a416:	d4e1      	bmi.n	801a3dc <_fflush_r+0xc>
 801a418:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801a41a:	f7ff fc13 	bl	8019c44 <__retarget_lock_release_recursive>
 801a41e:	e7dd      	b.n	801a3dc <_fflush_r+0xc>

0801a420 <fiprintf>:
 801a420:	b40e      	push	{r1, r2, r3}
 801a422:	b503      	push	{r0, r1, lr}
 801a424:	4601      	mov	r1, r0
 801a426:	ab03      	add	r3, sp, #12
 801a428:	4805      	ldr	r0, [pc, #20]	@ (801a440 <fiprintf+0x20>)
 801a42a:	f853 2b04 	ldr.w	r2, [r3], #4
 801a42e:	6800      	ldr	r0, [r0, #0]
 801a430:	9301      	str	r3, [sp, #4]
 801a432:	f7ff fca3 	bl	8019d7c <_vfiprintf_r>
 801a436:	b002      	add	sp, #8
 801a438:	f85d eb04 	ldr.w	lr, [sp], #4
 801a43c:	b003      	add	sp, #12
 801a43e:	4770      	bx	lr
 801a440:	2000003c 	.word	0x2000003c

0801a444 <__swhatbuf_r>:
 801a444:	b570      	push	{r4, r5, r6, lr}
 801a446:	460c      	mov	r4, r1
 801a448:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801a44c:	2900      	cmp	r1, #0
 801a44e:	b096      	sub	sp, #88	@ 0x58
 801a450:	4615      	mov	r5, r2
 801a452:	461e      	mov	r6, r3
 801a454:	da0d      	bge.n	801a472 <__swhatbuf_r+0x2e>
 801a456:	89a3      	ldrh	r3, [r4, #12]
 801a458:	f013 0f80 	tst.w	r3, #128	@ 0x80
 801a45c:	f04f 0100 	mov.w	r1, #0
 801a460:	bf14      	ite	ne
 801a462:	2340      	movne	r3, #64	@ 0x40
 801a464:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 801a468:	2000      	movs	r0, #0
 801a46a:	6031      	str	r1, [r6, #0]
 801a46c:	602b      	str	r3, [r5, #0]
 801a46e:	b016      	add	sp, #88	@ 0x58
 801a470:	bd70      	pop	{r4, r5, r6, pc}
 801a472:	466a      	mov	r2, sp
 801a474:	f000 f848 	bl	801a508 <_fstat_r>
 801a478:	2800      	cmp	r0, #0
 801a47a:	dbec      	blt.n	801a456 <__swhatbuf_r+0x12>
 801a47c:	9901      	ldr	r1, [sp, #4]
 801a47e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 801a482:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 801a486:	4259      	negs	r1, r3
 801a488:	4159      	adcs	r1, r3
 801a48a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 801a48e:	e7eb      	b.n	801a468 <__swhatbuf_r+0x24>

0801a490 <__smakebuf_r>:
 801a490:	898b      	ldrh	r3, [r1, #12]
 801a492:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801a494:	079d      	lsls	r5, r3, #30
 801a496:	4606      	mov	r6, r0
 801a498:	460c      	mov	r4, r1
 801a49a:	d507      	bpl.n	801a4ac <__smakebuf_r+0x1c>
 801a49c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 801a4a0:	6023      	str	r3, [r4, #0]
 801a4a2:	6123      	str	r3, [r4, #16]
 801a4a4:	2301      	movs	r3, #1
 801a4a6:	6163      	str	r3, [r4, #20]
 801a4a8:	b003      	add	sp, #12
 801a4aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a4ac:	ab01      	add	r3, sp, #4
 801a4ae:	466a      	mov	r2, sp
 801a4b0:	f7ff ffc8 	bl	801a444 <__swhatbuf_r>
 801a4b4:	9f00      	ldr	r7, [sp, #0]
 801a4b6:	4605      	mov	r5, r0
 801a4b8:	4639      	mov	r1, r7
 801a4ba:	4630      	mov	r0, r6
 801a4bc:	f7fe ff06 	bl	80192cc <_malloc_r>
 801a4c0:	b948      	cbnz	r0, 801a4d6 <__smakebuf_r+0x46>
 801a4c2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801a4c6:	059a      	lsls	r2, r3, #22
 801a4c8:	d4ee      	bmi.n	801a4a8 <__smakebuf_r+0x18>
 801a4ca:	f023 0303 	bic.w	r3, r3, #3
 801a4ce:	f043 0302 	orr.w	r3, r3, #2
 801a4d2:	81a3      	strh	r3, [r4, #12]
 801a4d4:	e7e2      	b.n	801a49c <__smakebuf_r+0xc>
 801a4d6:	89a3      	ldrh	r3, [r4, #12]
 801a4d8:	6020      	str	r0, [r4, #0]
 801a4da:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 801a4de:	81a3      	strh	r3, [r4, #12]
 801a4e0:	9b01      	ldr	r3, [sp, #4]
 801a4e2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 801a4e6:	b15b      	cbz	r3, 801a500 <__smakebuf_r+0x70>
 801a4e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801a4ec:	4630      	mov	r0, r6
 801a4ee:	f000 f81d 	bl	801a52c <_isatty_r>
 801a4f2:	b128      	cbz	r0, 801a500 <__smakebuf_r+0x70>
 801a4f4:	89a3      	ldrh	r3, [r4, #12]
 801a4f6:	f023 0303 	bic.w	r3, r3, #3
 801a4fa:	f043 0301 	orr.w	r3, r3, #1
 801a4fe:	81a3      	strh	r3, [r4, #12]
 801a500:	89a3      	ldrh	r3, [r4, #12]
 801a502:	431d      	orrs	r5, r3
 801a504:	81a5      	strh	r5, [r4, #12]
 801a506:	e7cf      	b.n	801a4a8 <__smakebuf_r+0x18>

0801a508 <_fstat_r>:
 801a508:	b538      	push	{r3, r4, r5, lr}
 801a50a:	4d07      	ldr	r5, [pc, #28]	@ (801a528 <_fstat_r+0x20>)
 801a50c:	2300      	movs	r3, #0
 801a50e:	4604      	mov	r4, r0
 801a510:	4608      	mov	r0, r1
 801a512:	4611      	mov	r1, r2
 801a514:	602b      	str	r3, [r5, #0]
 801a516:	f7f7 ff21 	bl	801235c <_fstat>
 801a51a:	1c43      	adds	r3, r0, #1
 801a51c:	d102      	bne.n	801a524 <_fstat_r+0x1c>
 801a51e:	682b      	ldr	r3, [r5, #0]
 801a520:	b103      	cbz	r3, 801a524 <_fstat_r+0x1c>
 801a522:	6023      	str	r3, [r4, #0]
 801a524:	bd38      	pop	{r3, r4, r5, pc}
 801a526:	bf00      	nop
 801a528:	200005e4 	.word	0x200005e4

0801a52c <_isatty_r>:
 801a52c:	b538      	push	{r3, r4, r5, lr}
 801a52e:	4d06      	ldr	r5, [pc, #24]	@ (801a548 <_isatty_r+0x1c>)
 801a530:	2300      	movs	r3, #0
 801a532:	4604      	mov	r4, r0
 801a534:	4608      	mov	r0, r1
 801a536:	602b      	str	r3, [r5, #0]
 801a538:	f7f7 ff20 	bl	801237c <_isatty>
 801a53c:	1c43      	adds	r3, r0, #1
 801a53e:	d102      	bne.n	801a546 <_isatty_r+0x1a>
 801a540:	682b      	ldr	r3, [r5, #0]
 801a542:	b103      	cbz	r3, 801a546 <_isatty_r+0x1a>
 801a544:	6023      	str	r3, [r4, #0]
 801a546:	bd38      	pop	{r3, r4, r5, pc}
 801a548:	200005e4 	.word	0x200005e4

0801a54c <abort>:
 801a54c:	b508      	push	{r3, lr}
 801a54e:	2006      	movs	r0, #6
 801a550:	f000 f82c 	bl	801a5ac <raise>
 801a554:	2001      	movs	r0, #1
 801a556:	f7f7 fecd 	bl	80122f4 <_exit>

0801a55a <_raise_r>:
 801a55a:	291f      	cmp	r1, #31
 801a55c:	b538      	push	{r3, r4, r5, lr}
 801a55e:	4605      	mov	r5, r0
 801a560:	460c      	mov	r4, r1
 801a562:	d904      	bls.n	801a56e <_raise_r+0x14>
 801a564:	2316      	movs	r3, #22
 801a566:	6003      	str	r3, [r0, #0]
 801a568:	f04f 30ff 	mov.w	r0, #4294967295
 801a56c:	bd38      	pop	{r3, r4, r5, pc}
 801a56e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 801a570:	b112      	cbz	r2, 801a578 <_raise_r+0x1e>
 801a572:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801a576:	b94b      	cbnz	r3, 801a58c <_raise_r+0x32>
 801a578:	4628      	mov	r0, r5
 801a57a:	f000 f831 	bl	801a5e0 <_getpid_r>
 801a57e:	4622      	mov	r2, r4
 801a580:	4601      	mov	r1, r0
 801a582:	4628      	mov	r0, r5
 801a584:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801a588:	f000 b818 	b.w	801a5bc <_kill_r>
 801a58c:	2b01      	cmp	r3, #1
 801a58e:	d00a      	beq.n	801a5a6 <_raise_r+0x4c>
 801a590:	1c59      	adds	r1, r3, #1
 801a592:	d103      	bne.n	801a59c <_raise_r+0x42>
 801a594:	2316      	movs	r3, #22
 801a596:	6003      	str	r3, [r0, #0]
 801a598:	2001      	movs	r0, #1
 801a59a:	e7e7      	b.n	801a56c <_raise_r+0x12>
 801a59c:	2100      	movs	r1, #0
 801a59e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 801a5a2:	4620      	mov	r0, r4
 801a5a4:	4798      	blx	r3
 801a5a6:	2000      	movs	r0, #0
 801a5a8:	e7e0      	b.n	801a56c <_raise_r+0x12>
	...

0801a5ac <raise>:
 801a5ac:	4b02      	ldr	r3, [pc, #8]	@ (801a5b8 <raise+0xc>)
 801a5ae:	4601      	mov	r1, r0
 801a5b0:	6818      	ldr	r0, [r3, #0]
 801a5b2:	f7ff bfd2 	b.w	801a55a <_raise_r>
 801a5b6:	bf00      	nop
 801a5b8:	2000003c 	.word	0x2000003c

0801a5bc <_kill_r>:
 801a5bc:	b538      	push	{r3, r4, r5, lr}
 801a5be:	4d07      	ldr	r5, [pc, #28]	@ (801a5dc <_kill_r+0x20>)
 801a5c0:	2300      	movs	r3, #0
 801a5c2:	4604      	mov	r4, r0
 801a5c4:	4608      	mov	r0, r1
 801a5c6:	4611      	mov	r1, r2
 801a5c8:	602b      	str	r3, [r5, #0]
 801a5ca:	f7f7 fe83 	bl	80122d4 <_kill>
 801a5ce:	1c43      	adds	r3, r0, #1
 801a5d0:	d102      	bne.n	801a5d8 <_kill_r+0x1c>
 801a5d2:	682b      	ldr	r3, [r5, #0]
 801a5d4:	b103      	cbz	r3, 801a5d8 <_kill_r+0x1c>
 801a5d6:	6023      	str	r3, [r4, #0]
 801a5d8:	bd38      	pop	{r3, r4, r5, pc}
 801a5da:	bf00      	nop
 801a5dc:	200005e4 	.word	0x200005e4

0801a5e0 <_getpid_r>:
 801a5e0:	f7f7 be70 	b.w	80122c4 <_getpid>

0801a5e4 <_init>:
 801a5e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5e6:	bf00      	nop
 801a5e8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5ea:	bc08      	pop	{r3}
 801a5ec:	469e      	mov	lr, r3
 801a5ee:	4770      	bx	lr

0801a5f0 <_fini>:
 801a5f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801a5f2:	bf00      	nop
 801a5f4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801a5f6:	bc08      	pop	{r3}
 801a5f8:	469e      	mov	lr, r3
 801a5fa:	4770      	bx	lr
