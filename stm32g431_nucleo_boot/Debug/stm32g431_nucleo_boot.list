
stm32g431_nucleo_boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a2cc  080001e0  080001e0  000011e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000011d4  0800a4ac  0800a4ac  0000b4ac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b680  0800b680  0000d08c  2**0
                  CONTENTS
  4 .ARM          00000008  0800b680  0800b680  0000c680  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b688  0800b688  0000d08c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b688  0800b688  0000c688  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b68c  0800b68c  0000c68c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000008c  20000000  0800b690  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b8  2000008c  0800b71c  0000d08c  2**2
                  ALLOC
 10 ._user_heap_stack 00002004  20000a44  0800b71c  0000da44  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d08c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000222a8  00000000  00000000  0000d0bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000537e  00000000  00000000  0002f364  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001d80  00000000  00000000  000346e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000016de  00000000  00000000  00036468  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002658c  00000000  00000000  00037b46  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0002b378  00000000  00000000  0005e0d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000edf01  00000000  00000000  0008944a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  0017734b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000085dc  00000000  00000000  00177390  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000078  00000000  00000000  0017f96c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	@ (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	@ (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	@ (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	2000008c 	.word	0x2000008c
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800a494 	.word	0x0800a494

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	@ (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	@ (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	@ (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000090 	.word	0x20000090
 800021c:	0800a494 	.word	0x0800a494

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	@ 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b96a 	b.w	80005dc <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9d08      	ldr	r5, [sp, #32]
 8000326:	460c      	mov	r4, r1
 8000328:	2b00      	cmp	r3, #0
 800032a:	d14e      	bne.n	80003ca <__udivmoddi4+0xaa>
 800032c:	4694      	mov	ip, r2
 800032e:	458c      	cmp	ip, r1
 8000330:	4686      	mov	lr, r0
 8000332:	fab2 f282 	clz	r2, r2
 8000336:	d962      	bls.n	80003fe <__udivmoddi4+0xde>
 8000338:	b14a      	cbz	r2, 800034e <__udivmoddi4+0x2e>
 800033a:	f1c2 0320 	rsb	r3, r2, #32
 800033e:	4091      	lsls	r1, r2
 8000340:	fa20 f303 	lsr.w	r3, r0, r3
 8000344:	fa0c fc02 	lsl.w	ip, ip, r2
 8000348:	4319      	orrs	r1, r3
 800034a:	fa00 fe02 	lsl.w	lr, r0, r2
 800034e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000352:	fa1f f68c 	uxth.w	r6, ip
 8000356:	fbb1 f4f7 	udiv	r4, r1, r7
 800035a:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800035e:	fb07 1114 	mls	r1, r7, r4, r1
 8000362:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000366:	fb04 f106 	mul.w	r1, r4, r6
 800036a:	4299      	cmp	r1, r3
 800036c:	d90a      	bls.n	8000384 <__udivmoddi4+0x64>
 800036e:	eb1c 0303 	adds.w	r3, ip, r3
 8000372:	f104 30ff 	add.w	r0, r4, #4294967295
 8000376:	f080 8112 	bcs.w	800059e <__udivmoddi4+0x27e>
 800037a:	4299      	cmp	r1, r3
 800037c:	f240 810f 	bls.w	800059e <__udivmoddi4+0x27e>
 8000380:	3c02      	subs	r4, #2
 8000382:	4463      	add	r3, ip
 8000384:	1a59      	subs	r1, r3, r1
 8000386:	fa1f f38e 	uxth.w	r3, lr
 800038a:	fbb1 f0f7 	udiv	r0, r1, r7
 800038e:	fb07 1110 	mls	r1, r7, r0, r1
 8000392:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000396:	fb00 f606 	mul.w	r6, r0, r6
 800039a:	429e      	cmp	r6, r3
 800039c:	d90a      	bls.n	80003b4 <__udivmoddi4+0x94>
 800039e:	eb1c 0303 	adds.w	r3, ip, r3
 80003a2:	f100 31ff 	add.w	r1, r0, #4294967295
 80003a6:	f080 80fc 	bcs.w	80005a2 <__udivmoddi4+0x282>
 80003aa:	429e      	cmp	r6, r3
 80003ac:	f240 80f9 	bls.w	80005a2 <__udivmoddi4+0x282>
 80003b0:	4463      	add	r3, ip
 80003b2:	3802      	subs	r0, #2
 80003b4:	1b9b      	subs	r3, r3, r6
 80003b6:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80003ba:	2100      	movs	r1, #0
 80003bc:	b11d      	cbz	r5, 80003c6 <__udivmoddi4+0xa6>
 80003be:	40d3      	lsrs	r3, r2
 80003c0:	2200      	movs	r2, #0
 80003c2:	e9c5 3200 	strd	r3, r2, [r5]
 80003c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ca:	428b      	cmp	r3, r1
 80003cc:	d905      	bls.n	80003da <__udivmoddi4+0xba>
 80003ce:	b10d      	cbz	r5, 80003d4 <__udivmoddi4+0xb4>
 80003d0:	e9c5 0100 	strd	r0, r1, [r5]
 80003d4:	2100      	movs	r1, #0
 80003d6:	4608      	mov	r0, r1
 80003d8:	e7f5      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003da:	fab3 f183 	clz	r1, r3
 80003de:	2900      	cmp	r1, #0
 80003e0:	d146      	bne.n	8000470 <__udivmoddi4+0x150>
 80003e2:	42a3      	cmp	r3, r4
 80003e4:	d302      	bcc.n	80003ec <__udivmoddi4+0xcc>
 80003e6:	4290      	cmp	r0, r2
 80003e8:	f0c0 80f0 	bcc.w	80005cc <__udivmoddi4+0x2ac>
 80003ec:	1a86      	subs	r6, r0, r2
 80003ee:	eb64 0303 	sbc.w	r3, r4, r3
 80003f2:	2001      	movs	r0, #1
 80003f4:	2d00      	cmp	r5, #0
 80003f6:	d0e6      	beq.n	80003c6 <__udivmoddi4+0xa6>
 80003f8:	e9c5 6300 	strd	r6, r3, [r5]
 80003fc:	e7e3      	b.n	80003c6 <__udivmoddi4+0xa6>
 80003fe:	2a00      	cmp	r2, #0
 8000400:	f040 8090 	bne.w	8000524 <__udivmoddi4+0x204>
 8000404:	eba1 040c 	sub.w	r4, r1, ip
 8000408:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800040c:	fa1f f78c 	uxth.w	r7, ip
 8000410:	2101      	movs	r1, #1
 8000412:	fbb4 f6f8 	udiv	r6, r4, r8
 8000416:	ea4f 431e 	mov.w	r3, lr, lsr #16
 800041a:	fb08 4416 	mls	r4, r8, r6, r4
 800041e:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000422:	fb07 f006 	mul.w	r0, r7, r6
 8000426:	4298      	cmp	r0, r3
 8000428:	d908      	bls.n	800043c <__udivmoddi4+0x11c>
 800042a:	eb1c 0303 	adds.w	r3, ip, r3
 800042e:	f106 34ff 	add.w	r4, r6, #4294967295
 8000432:	d202      	bcs.n	800043a <__udivmoddi4+0x11a>
 8000434:	4298      	cmp	r0, r3
 8000436:	f200 80cd 	bhi.w	80005d4 <__udivmoddi4+0x2b4>
 800043a:	4626      	mov	r6, r4
 800043c:	1a1c      	subs	r4, r3, r0
 800043e:	fa1f f38e 	uxth.w	r3, lr
 8000442:	fbb4 f0f8 	udiv	r0, r4, r8
 8000446:	fb08 4410 	mls	r4, r8, r0, r4
 800044a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800044e:	fb00 f707 	mul.w	r7, r0, r7
 8000452:	429f      	cmp	r7, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x148>
 8000456:	eb1c 0303 	adds.w	r3, ip, r3
 800045a:	f100 34ff 	add.w	r4, r0, #4294967295
 800045e:	d202      	bcs.n	8000466 <__udivmoddi4+0x146>
 8000460:	429f      	cmp	r7, r3
 8000462:	f200 80b0 	bhi.w	80005c6 <__udivmoddi4+0x2a6>
 8000466:	4620      	mov	r0, r4
 8000468:	1bdb      	subs	r3, r3, r7
 800046a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800046e:	e7a5      	b.n	80003bc <__udivmoddi4+0x9c>
 8000470:	f1c1 0620 	rsb	r6, r1, #32
 8000474:	408b      	lsls	r3, r1
 8000476:	fa22 f706 	lsr.w	r7, r2, r6
 800047a:	431f      	orrs	r7, r3
 800047c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000480:	fa04 f301 	lsl.w	r3, r4, r1
 8000484:	ea43 030c 	orr.w	r3, r3, ip
 8000488:	40f4      	lsrs	r4, r6
 800048a:	fa00 f801 	lsl.w	r8, r0, r1
 800048e:	0c38      	lsrs	r0, r7, #16
 8000490:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000494:	fbb4 fef0 	udiv	lr, r4, r0
 8000498:	fa1f fc87 	uxth.w	ip, r7
 800049c:	fb00 441e 	mls	r4, r0, lr, r4
 80004a0:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004a4:	fb0e f90c 	mul.w	r9, lr, ip
 80004a8:	45a1      	cmp	r9, r4
 80004aa:	fa02 f201 	lsl.w	r2, r2, r1
 80004ae:	d90a      	bls.n	80004c6 <__udivmoddi4+0x1a6>
 80004b0:	193c      	adds	r4, r7, r4
 80004b2:	f10e 3aff 	add.w	sl, lr, #4294967295
 80004b6:	f080 8084 	bcs.w	80005c2 <__udivmoddi4+0x2a2>
 80004ba:	45a1      	cmp	r9, r4
 80004bc:	f240 8081 	bls.w	80005c2 <__udivmoddi4+0x2a2>
 80004c0:	f1ae 0e02 	sub.w	lr, lr, #2
 80004c4:	443c      	add	r4, r7
 80004c6:	eba4 0409 	sub.w	r4, r4, r9
 80004ca:	fa1f f983 	uxth.w	r9, r3
 80004ce:	fbb4 f3f0 	udiv	r3, r4, r0
 80004d2:	fb00 4413 	mls	r4, r0, r3, r4
 80004d6:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80004da:	fb03 fc0c 	mul.w	ip, r3, ip
 80004de:	45a4      	cmp	ip, r4
 80004e0:	d907      	bls.n	80004f2 <__udivmoddi4+0x1d2>
 80004e2:	193c      	adds	r4, r7, r4
 80004e4:	f103 30ff 	add.w	r0, r3, #4294967295
 80004e8:	d267      	bcs.n	80005ba <__udivmoddi4+0x29a>
 80004ea:	45a4      	cmp	ip, r4
 80004ec:	d965      	bls.n	80005ba <__udivmoddi4+0x29a>
 80004ee:	3b02      	subs	r3, #2
 80004f0:	443c      	add	r4, r7
 80004f2:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80004f6:	fba0 9302 	umull	r9, r3, r0, r2
 80004fa:	eba4 040c 	sub.w	r4, r4, ip
 80004fe:	429c      	cmp	r4, r3
 8000500:	46ce      	mov	lr, r9
 8000502:	469c      	mov	ip, r3
 8000504:	d351      	bcc.n	80005aa <__udivmoddi4+0x28a>
 8000506:	d04e      	beq.n	80005a6 <__udivmoddi4+0x286>
 8000508:	b155      	cbz	r5, 8000520 <__udivmoddi4+0x200>
 800050a:	ebb8 030e 	subs.w	r3, r8, lr
 800050e:	eb64 040c 	sbc.w	r4, r4, ip
 8000512:	fa04 f606 	lsl.w	r6, r4, r6
 8000516:	40cb      	lsrs	r3, r1
 8000518:	431e      	orrs	r6, r3
 800051a:	40cc      	lsrs	r4, r1
 800051c:	e9c5 6400 	strd	r6, r4, [r5]
 8000520:	2100      	movs	r1, #0
 8000522:	e750      	b.n	80003c6 <__udivmoddi4+0xa6>
 8000524:	f1c2 0320 	rsb	r3, r2, #32
 8000528:	fa20 f103 	lsr.w	r1, r0, r3
 800052c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000530:	fa24 f303 	lsr.w	r3, r4, r3
 8000534:	4094      	lsls	r4, r2
 8000536:	430c      	orrs	r4, r1
 8000538:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800053c:	fa00 fe02 	lsl.w	lr, r0, r2
 8000540:	fa1f f78c 	uxth.w	r7, ip
 8000544:	fbb3 f0f8 	udiv	r0, r3, r8
 8000548:	fb08 3110 	mls	r1, r8, r0, r3
 800054c:	0c23      	lsrs	r3, r4, #16
 800054e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000552:	fb00 f107 	mul.w	r1, r0, r7
 8000556:	4299      	cmp	r1, r3
 8000558:	d908      	bls.n	800056c <__udivmoddi4+0x24c>
 800055a:	eb1c 0303 	adds.w	r3, ip, r3
 800055e:	f100 36ff 	add.w	r6, r0, #4294967295
 8000562:	d22c      	bcs.n	80005be <__udivmoddi4+0x29e>
 8000564:	4299      	cmp	r1, r3
 8000566:	d92a      	bls.n	80005be <__udivmoddi4+0x29e>
 8000568:	3802      	subs	r0, #2
 800056a:	4463      	add	r3, ip
 800056c:	1a5b      	subs	r3, r3, r1
 800056e:	b2a4      	uxth	r4, r4
 8000570:	fbb3 f1f8 	udiv	r1, r3, r8
 8000574:	fb08 3311 	mls	r3, r8, r1, r3
 8000578:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800057c:	fb01 f307 	mul.w	r3, r1, r7
 8000580:	42a3      	cmp	r3, r4
 8000582:	d908      	bls.n	8000596 <__udivmoddi4+0x276>
 8000584:	eb1c 0404 	adds.w	r4, ip, r4
 8000588:	f101 36ff 	add.w	r6, r1, #4294967295
 800058c:	d213      	bcs.n	80005b6 <__udivmoddi4+0x296>
 800058e:	42a3      	cmp	r3, r4
 8000590:	d911      	bls.n	80005b6 <__udivmoddi4+0x296>
 8000592:	3902      	subs	r1, #2
 8000594:	4464      	add	r4, ip
 8000596:	1ae4      	subs	r4, r4, r3
 8000598:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800059c:	e739      	b.n	8000412 <__udivmoddi4+0xf2>
 800059e:	4604      	mov	r4, r0
 80005a0:	e6f0      	b.n	8000384 <__udivmoddi4+0x64>
 80005a2:	4608      	mov	r0, r1
 80005a4:	e706      	b.n	80003b4 <__udivmoddi4+0x94>
 80005a6:	45c8      	cmp	r8, r9
 80005a8:	d2ae      	bcs.n	8000508 <__udivmoddi4+0x1e8>
 80005aa:	ebb9 0e02 	subs.w	lr, r9, r2
 80005ae:	eb63 0c07 	sbc.w	ip, r3, r7
 80005b2:	3801      	subs	r0, #1
 80005b4:	e7a8      	b.n	8000508 <__udivmoddi4+0x1e8>
 80005b6:	4631      	mov	r1, r6
 80005b8:	e7ed      	b.n	8000596 <__udivmoddi4+0x276>
 80005ba:	4603      	mov	r3, r0
 80005bc:	e799      	b.n	80004f2 <__udivmoddi4+0x1d2>
 80005be:	4630      	mov	r0, r6
 80005c0:	e7d4      	b.n	800056c <__udivmoddi4+0x24c>
 80005c2:	46d6      	mov	lr, sl
 80005c4:	e77f      	b.n	80004c6 <__udivmoddi4+0x1a6>
 80005c6:	4463      	add	r3, ip
 80005c8:	3802      	subs	r0, #2
 80005ca:	e74d      	b.n	8000468 <__udivmoddi4+0x148>
 80005cc:	4606      	mov	r6, r0
 80005ce:	4623      	mov	r3, r4
 80005d0:	4608      	mov	r0, r1
 80005d2:	e70f      	b.n	80003f4 <__udivmoddi4+0xd4>
 80005d4:	3e02      	subs	r6, #2
 80005d6:	4463      	add	r3, ip
 80005d8:	e730      	b.n	800043c <__udivmoddi4+0x11c>
 80005da:	bf00      	nop

080005dc <__aeabi_idiv0>:
 80005dc:	4770      	bx	lr
 80005de:	bf00      	nop

080005e0 <uart_handle_init>:
/* Private functions ---------------------------------------------------------*/

UART_HandleTypeDef *uart_handler = NULL;

void uart_handle_init(void)
{
 80005e0:	b480      	push	{r7}
 80005e2:	af00      	add	r7, sp, #0
  if (uart_handler == NULL) {
 80005e4:	4b05      	ldr	r3, [pc, #20]	@ (80005fc <uart_handle_init+0x1c>)
 80005e6:	681b      	ldr	r3, [r3, #0]
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	d102      	bne.n	80005f2 <uart_handle_init+0x12>
    uart_handler = &hlpuart1;
 80005ec:	4b03      	ldr	r3, [pc, #12]	@ (80005fc <uart_handle_init+0x1c>)
 80005ee:	4a04      	ldr	r2, [pc, #16]	@ (8000600 <uart_handle_init+0x20>)
 80005f0:	601a      	str	r2, [r3, #0]
  }
}
 80005f2:	bf00      	nop
 80005f4:	46bd      	mov	sp, r7
 80005f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fa:	4770      	bx	lr
 80005fc:	200000a8 	.word	0x200000a8
 8000600:	2000072c 	.word	0x2000072c

08000604 <Int2Str>:
  * @param  p_str: The string output pointer
  * @param  intnum: The integer to be converted
  * @retval None
  */
void Int2Str(uint8_t *p_str, uint32_t intnum)
{
 8000604:	b480      	push	{r7}
 8000606:	b087      	sub	sp, #28
 8000608:	af00      	add	r7, sp, #0
 800060a:	6078      	str	r0, [r7, #4]
 800060c:	6039      	str	r1, [r7, #0]
  uint32_t i, divider = 1000000000, pos = 0, status = 0;
 800060e:	4b26      	ldr	r3, [pc, #152]	@ (80006a8 <Int2Str+0xa4>)
 8000610:	613b      	str	r3, [r7, #16]
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	2300      	movs	r3, #0
 8000618:	60bb      	str	r3, [r7, #8]

  for (i = 0; i < 10; i++)
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
 800061e:	e038      	b.n	8000692 <Int2Str+0x8e>
  {
    p_str[pos++] = (intnum / divider) + 48;
 8000620:	683a      	ldr	r2, [r7, #0]
 8000622:	693b      	ldr	r3, [r7, #16]
 8000624:	fbb2 f3f3 	udiv	r3, r2, r3
 8000628:	b2da      	uxtb	r2, r3
 800062a:	68fb      	ldr	r3, [r7, #12]
 800062c:	1c59      	adds	r1, r3, #1
 800062e:	60f9      	str	r1, [r7, #12]
 8000630:	6879      	ldr	r1, [r7, #4]
 8000632:	440b      	add	r3, r1
 8000634:	3230      	adds	r2, #48	@ 0x30
 8000636:	b2d2      	uxtb	r2, r2
 8000638:	701a      	strb	r2, [r3, #0]

    intnum = intnum % divider;
 800063a:	683b      	ldr	r3, [r7, #0]
 800063c:	693a      	ldr	r2, [r7, #16]
 800063e:	fbb3 f2f2 	udiv	r2, r3, r2
 8000642:	6939      	ldr	r1, [r7, #16]
 8000644:	fb01 f202 	mul.w	r2, r1, r2
 8000648:	1a9b      	subs	r3, r3, r2
 800064a:	603b      	str	r3, [r7, #0]
    divider /= 10;
 800064c:	693b      	ldr	r3, [r7, #16]
 800064e:	4a17      	ldr	r2, [pc, #92]	@ (80006ac <Int2Str+0xa8>)
 8000650:	fba2 2303 	umull	r2, r3, r2, r3
 8000654:	08db      	lsrs	r3, r3, #3
 8000656:	613b      	str	r3, [r7, #16]
    if ((p_str[pos-1] == '0') & (status == 0))
 8000658:	68fb      	ldr	r3, [r7, #12]
 800065a:	3b01      	subs	r3, #1
 800065c:	687a      	ldr	r2, [r7, #4]
 800065e:	4413      	add	r3, r2
 8000660:	781b      	ldrb	r3, [r3, #0]
 8000662:	2b30      	cmp	r3, #48	@ 0x30
 8000664:	bf0c      	ite	eq
 8000666:	2301      	moveq	r3, #1
 8000668:	2300      	movne	r3, #0
 800066a:	b2da      	uxtb	r2, r3
 800066c:	68bb      	ldr	r3, [r7, #8]
 800066e:	2b00      	cmp	r3, #0
 8000670:	bf0c      	ite	eq
 8000672:	2301      	moveq	r3, #1
 8000674:	2300      	movne	r3, #0
 8000676:	b2db      	uxtb	r3, r3
 8000678:	4013      	ands	r3, r2
 800067a:	b2db      	uxtb	r3, r3
 800067c:	2b00      	cmp	r3, #0
 800067e:	d002      	beq.n	8000686 <Int2Str+0x82>
    {
      pos = 0;
 8000680:	2300      	movs	r3, #0
 8000682:	60fb      	str	r3, [r7, #12]
 8000684:	e002      	b.n	800068c <Int2Str+0x88>
    }
    else
    {
      status++;
 8000686:	68bb      	ldr	r3, [r7, #8]
 8000688:	3301      	adds	r3, #1
 800068a:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < 10; i++)
 800068c:	697b      	ldr	r3, [r7, #20]
 800068e:	3301      	adds	r3, #1
 8000690:	617b      	str	r3, [r7, #20]
 8000692:	697b      	ldr	r3, [r7, #20]
 8000694:	2b09      	cmp	r3, #9
 8000696:	d9c3      	bls.n	8000620 <Int2Str+0x1c>
    }
  }
}
 8000698:	bf00      	nop
 800069a:	bf00      	nop
 800069c:	371c      	adds	r7, #28
 800069e:	46bd      	mov	sp, r7
 80006a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006a4:	4770      	bx	lr
 80006a6:	bf00      	nop
 80006a8:	3b9aca00 	.word	0x3b9aca00
 80006ac:	cccccccd 	.word	0xcccccccd

080006b0 <Str2Int>:
  * @param  p_intnum: The integer value
  * @retval 1: Correct
  *         0: Error
  */
uint32_t Str2Int(uint8_t *p_inputstr, uint32_t *p_intnum)
{
 80006b0:	b480      	push	{r7}
 80006b2:	b087      	sub	sp, #28
 80006b4:	af00      	add	r7, sp, #0
 80006b6:	6078      	str	r0, [r7, #4]
 80006b8:	6039      	str	r1, [r7, #0]
  uint32_t i = 0, res = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	617b      	str	r3, [r7, #20]
 80006be:	2300      	movs	r3, #0
 80006c0:	613b      	str	r3, [r7, #16]
  uint32_t val = 0;
 80006c2:	2300      	movs	r3, #0
 80006c4:	60fb      	str	r3, [r7, #12]

  if ((p_inputstr[0] == '0') && ((p_inputstr[1] == 'x') || (p_inputstr[1] == 'X')))
 80006c6:	687b      	ldr	r3, [r7, #4]
 80006c8:	781b      	ldrb	r3, [r3, #0]
 80006ca:	2b30      	cmp	r3, #48	@ 0x30
 80006cc:	f040 80d7 	bne.w	800087e <Str2Int+0x1ce>
 80006d0:	687b      	ldr	r3, [r7, #4]
 80006d2:	3301      	adds	r3, #1
 80006d4:	781b      	ldrb	r3, [r3, #0]
 80006d6:	2b78      	cmp	r3, #120	@ 0x78
 80006d8:	d005      	beq.n	80006e6 <Str2Int+0x36>
 80006da:	687b      	ldr	r3, [r7, #4]
 80006dc:	3301      	adds	r3, #1
 80006de:	781b      	ldrb	r3, [r3, #0]
 80006e0:	2b58      	cmp	r3, #88	@ 0x58
 80006e2:	f040 80cc 	bne.w	800087e <Str2Int+0x1ce>
  {
    i = 2;
 80006e6:	2302      	movs	r3, #2
 80006e8:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 80006ea:	e057      	b.n	800079c <Str2Int+0xec>
    {
      if (ISVALIDHEX(p_inputstr[i]))
 80006ec:	687a      	ldr	r2, [r7, #4]
 80006ee:	697b      	ldr	r3, [r7, #20]
 80006f0:	4413      	add	r3, r2
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	2b40      	cmp	r3, #64	@ 0x40
 80006f6:	d905      	bls.n	8000704 <Str2Int+0x54>
 80006f8:	687a      	ldr	r2, [r7, #4]
 80006fa:	697b      	ldr	r3, [r7, #20]
 80006fc:	4413      	add	r3, r2
 80006fe:	781b      	ldrb	r3, [r3, #0]
 8000700:	2b46      	cmp	r3, #70	@ 0x46
 8000702:	d917      	bls.n	8000734 <Str2Int+0x84>
 8000704:	687a      	ldr	r2, [r7, #4]
 8000706:	697b      	ldr	r3, [r7, #20]
 8000708:	4413      	add	r3, r2
 800070a:	781b      	ldrb	r3, [r3, #0]
 800070c:	2b60      	cmp	r3, #96	@ 0x60
 800070e:	d905      	bls.n	800071c <Str2Int+0x6c>
 8000710:	687a      	ldr	r2, [r7, #4]
 8000712:	697b      	ldr	r3, [r7, #20]
 8000714:	4413      	add	r3, r2
 8000716:	781b      	ldrb	r3, [r3, #0]
 8000718:	2b66      	cmp	r3, #102	@ 0x66
 800071a:	d90b      	bls.n	8000734 <Str2Int+0x84>
 800071c:	687a      	ldr	r2, [r7, #4]
 800071e:	697b      	ldr	r3, [r7, #20]
 8000720:	4413      	add	r3, r2
 8000722:	781b      	ldrb	r3, [r3, #0]
 8000724:	2b2f      	cmp	r3, #47	@ 0x2f
 8000726:	d936      	bls.n	8000796 <Str2Int+0xe6>
 8000728:	687a      	ldr	r2, [r7, #4]
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	4413      	add	r3, r2
 800072e:	781b      	ldrb	r3, [r3, #0]
 8000730:	2b39      	cmp	r3, #57	@ 0x39
 8000732:	d830      	bhi.n	8000796 <Str2Int+0xe6>
      {
        val = (val << 4) + CONVERTHEX(p_inputstr[i]);
 8000734:	68fb      	ldr	r3, [r7, #12]
 8000736:	011b      	lsls	r3, r3, #4
 8000738:	6879      	ldr	r1, [r7, #4]
 800073a:	697a      	ldr	r2, [r7, #20]
 800073c:	440a      	add	r2, r1
 800073e:	7812      	ldrb	r2, [r2, #0]
 8000740:	2a2f      	cmp	r2, #47	@ 0x2f
 8000742:	d90b      	bls.n	800075c <Str2Int+0xac>
 8000744:	6879      	ldr	r1, [r7, #4]
 8000746:	697a      	ldr	r2, [r7, #20]
 8000748:	440a      	add	r2, r1
 800074a:	7812      	ldrb	r2, [r2, #0]
 800074c:	2a39      	cmp	r2, #57	@ 0x39
 800074e:	d805      	bhi.n	800075c <Str2Int+0xac>
 8000750:	6879      	ldr	r1, [r7, #4]
 8000752:	697a      	ldr	r2, [r7, #20]
 8000754:	440a      	add	r2, r1
 8000756:	7812      	ldrb	r2, [r2, #0]
 8000758:	3a30      	subs	r2, #48	@ 0x30
 800075a:	e016      	b.n	800078a <Str2Int+0xda>
 800075c:	6879      	ldr	r1, [r7, #4]
 800075e:	697a      	ldr	r2, [r7, #20]
 8000760:	440a      	add	r2, r1
 8000762:	7812      	ldrb	r2, [r2, #0]
 8000764:	2a40      	cmp	r2, #64	@ 0x40
 8000766:	d90b      	bls.n	8000780 <Str2Int+0xd0>
 8000768:	6879      	ldr	r1, [r7, #4]
 800076a:	697a      	ldr	r2, [r7, #20]
 800076c:	440a      	add	r2, r1
 800076e:	7812      	ldrb	r2, [r2, #0]
 8000770:	2a46      	cmp	r2, #70	@ 0x46
 8000772:	d805      	bhi.n	8000780 <Str2Int+0xd0>
 8000774:	6879      	ldr	r1, [r7, #4]
 8000776:	697a      	ldr	r2, [r7, #20]
 8000778:	440a      	add	r2, r1
 800077a:	7812      	ldrb	r2, [r2, #0]
 800077c:	3a37      	subs	r2, #55	@ 0x37
 800077e:	e004      	b.n	800078a <Str2Int+0xda>
 8000780:	6879      	ldr	r1, [r7, #4]
 8000782:	697a      	ldr	r2, [r7, #20]
 8000784:	440a      	add	r2, r1
 8000786:	7812      	ldrb	r2, [r2, #0]
 8000788:	3a57      	subs	r2, #87	@ 0x57
 800078a:	4413      	add	r3, r2
 800078c:	60fb      	str	r3, [r7, #12]
      {
        /* Return 0, Invalid input */
        res = 0;
        break;
      }
      i++;
 800078e:	697b      	ldr	r3, [r7, #20]
 8000790:	3301      	adds	r3, #1
 8000792:	617b      	str	r3, [r7, #20]
 8000794:	e002      	b.n	800079c <Str2Int+0xec>
        res = 0;
 8000796:	2300      	movs	r3, #0
 8000798:	613b      	str	r3, [r7, #16]
        break;
 800079a:	e008      	b.n	80007ae <Str2Int+0xfe>
    while ( ( i < 11 ) && ( p_inputstr[i] != '\0' ) )
 800079c:	697b      	ldr	r3, [r7, #20]
 800079e:	2b0a      	cmp	r3, #10
 80007a0:	d805      	bhi.n	80007ae <Str2Int+0xfe>
 80007a2:	687a      	ldr	r2, [r7, #4]
 80007a4:	697b      	ldr	r3, [r7, #20]
 80007a6:	4413      	add	r3, r2
 80007a8:	781b      	ldrb	r3, [r3, #0]
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d19e      	bne.n	80006ec <Str2Int+0x3c>
    }

    /* valid result */
    if (p_inputstr[i] == '\0')
 80007ae:	687a      	ldr	r2, [r7, #4]
 80007b0:	697b      	ldr	r3, [r7, #20]
 80007b2:	4413      	add	r3, r2
 80007b4:	781b      	ldrb	r3, [r3, #0]
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d167      	bne.n	800088a <Str2Int+0x1da>
    {
      *p_intnum = val;
 80007ba:	683b      	ldr	r3, [r7, #0]
 80007bc:	68fa      	ldr	r2, [r7, #12]
 80007be:	601a      	str	r2, [r3, #0]
      res = 1;
 80007c0:	2301      	movs	r3, #1
 80007c2:	613b      	str	r3, [r7, #16]
    if (p_inputstr[i] == '\0')
 80007c4:	e061      	b.n	800088a <Str2Int+0x1da>
  }
  else /* max 10-digit decimal input */
  {
    while ( ( i < 11 ) && ( res != 1 ) )
    {
      if (p_inputstr[i] == '\0')
 80007c6:	687a      	ldr	r2, [r7, #4]
 80007c8:	697b      	ldr	r3, [r7, #20]
 80007ca:	4413      	add	r3, r2
 80007cc:	781b      	ldrb	r3, [r3, #0]
 80007ce:	2b00      	cmp	r3, #0
 80007d0:	d105      	bne.n	80007de <Str2Int+0x12e>
      {
        *p_intnum = val;
 80007d2:	683b      	ldr	r3, [r7, #0]
 80007d4:	68fa      	ldr	r2, [r7, #12]
 80007d6:	601a      	str	r2, [r3, #0]
        /* return 1 */
        res = 1;
 80007d8:	2301      	movs	r3, #1
 80007da:	613b      	str	r3, [r7, #16]
 80007dc:	e04c      	b.n	8000878 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'k') || (p_inputstr[i] == 'K')) && (i > 0))
 80007de:	687a      	ldr	r2, [r7, #4]
 80007e0:	697b      	ldr	r3, [r7, #20]
 80007e2:	4413      	add	r3, r2
 80007e4:	781b      	ldrb	r3, [r3, #0]
 80007e6:	2b6b      	cmp	r3, #107	@ 0x6b
 80007e8:	d005      	beq.n	80007f6 <Str2Int+0x146>
 80007ea:	687a      	ldr	r2, [r7, #4]
 80007ec:	697b      	ldr	r3, [r7, #20]
 80007ee:	4413      	add	r3, r2
 80007f0:	781b      	ldrb	r3, [r3, #0]
 80007f2:	2b4b      	cmp	r3, #75	@ 0x4b
 80007f4:	d10b      	bne.n	800080e <Str2Int+0x15e>
 80007f6:	697b      	ldr	r3, [r7, #20]
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d008      	beq.n	800080e <Str2Int+0x15e>
      {
        val = val << 10;
 80007fc:	68fb      	ldr	r3, [r7, #12]
 80007fe:	029b      	lsls	r3, r3, #10
 8000800:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000802:	683b      	ldr	r3, [r7, #0]
 8000804:	68fa      	ldr	r2, [r7, #12]
 8000806:	601a      	str	r2, [r3, #0]
        res = 1;
 8000808:	2301      	movs	r3, #1
 800080a:	613b      	str	r3, [r7, #16]
 800080c:	e034      	b.n	8000878 <Str2Int+0x1c8>
      }
      else if (((p_inputstr[i] == 'm') || (p_inputstr[i] == 'M')) && (i > 0))
 800080e:	687a      	ldr	r2, [r7, #4]
 8000810:	697b      	ldr	r3, [r7, #20]
 8000812:	4413      	add	r3, r2
 8000814:	781b      	ldrb	r3, [r3, #0]
 8000816:	2b6d      	cmp	r3, #109	@ 0x6d
 8000818:	d005      	beq.n	8000826 <Str2Int+0x176>
 800081a:	687a      	ldr	r2, [r7, #4]
 800081c:	697b      	ldr	r3, [r7, #20]
 800081e:	4413      	add	r3, r2
 8000820:	781b      	ldrb	r3, [r3, #0]
 8000822:	2b4d      	cmp	r3, #77	@ 0x4d
 8000824:	d10b      	bne.n	800083e <Str2Int+0x18e>
 8000826:	697b      	ldr	r3, [r7, #20]
 8000828:	2b00      	cmp	r3, #0
 800082a:	d008      	beq.n	800083e <Str2Int+0x18e>
      {
        val = val << 20;
 800082c:	68fb      	ldr	r3, [r7, #12]
 800082e:	051b      	lsls	r3, r3, #20
 8000830:	60fb      	str	r3, [r7, #12]
        *p_intnum = val;
 8000832:	683b      	ldr	r3, [r7, #0]
 8000834:	68fa      	ldr	r2, [r7, #12]
 8000836:	601a      	str	r2, [r3, #0]
        res = 1;
 8000838:	2301      	movs	r3, #1
 800083a:	613b      	str	r3, [r7, #16]
 800083c:	e01c      	b.n	8000878 <Str2Int+0x1c8>
      }
      else if (ISVALIDDEC(p_inputstr[i]))
 800083e:	687a      	ldr	r2, [r7, #4]
 8000840:	697b      	ldr	r3, [r7, #20]
 8000842:	4413      	add	r3, r2
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	2b2f      	cmp	r3, #47	@ 0x2f
 8000848:	d913      	bls.n	8000872 <Str2Int+0x1c2>
 800084a:	687a      	ldr	r2, [r7, #4]
 800084c:	697b      	ldr	r3, [r7, #20]
 800084e:	4413      	add	r3, r2
 8000850:	781b      	ldrb	r3, [r3, #0]
 8000852:	2b39      	cmp	r3, #57	@ 0x39
 8000854:	d80d      	bhi.n	8000872 <Str2Int+0x1c2>
      {
        val = val * 10 + CONVERTDEC(p_inputstr[i]);
 8000856:	68fa      	ldr	r2, [r7, #12]
 8000858:	4613      	mov	r3, r2
 800085a:	009b      	lsls	r3, r3, #2
 800085c:	4413      	add	r3, r2
 800085e:	005b      	lsls	r3, r3, #1
 8000860:	4619      	mov	r1, r3
 8000862:	687a      	ldr	r2, [r7, #4]
 8000864:	697b      	ldr	r3, [r7, #20]
 8000866:	4413      	add	r3, r2
 8000868:	781b      	ldrb	r3, [r3, #0]
 800086a:	440b      	add	r3, r1
 800086c:	3b30      	subs	r3, #48	@ 0x30
 800086e:	60fb      	str	r3, [r7, #12]
 8000870:	e002      	b.n	8000878 <Str2Int+0x1c8>
      }
      else
      {
        /* return 0, Invalid input */
        res = 0;
 8000872:	2300      	movs	r3, #0
 8000874:	613b      	str	r3, [r7, #16]
        break;
 8000876:	e008      	b.n	800088a <Str2Int+0x1da>
      }
      i++;
 8000878:	697b      	ldr	r3, [r7, #20]
 800087a:	3301      	adds	r3, #1
 800087c:	617b      	str	r3, [r7, #20]
    while ( ( i < 11 ) && ( res != 1 ) )
 800087e:	697b      	ldr	r3, [r7, #20]
 8000880:	2b0a      	cmp	r3, #10
 8000882:	d802      	bhi.n	800088a <Str2Int+0x1da>
 8000884:	693b      	ldr	r3, [r7, #16]
 8000886:	2b01      	cmp	r3, #1
 8000888:	d19d      	bne.n	80007c6 <Str2Int+0x116>
    }
  }

  return res;
 800088a:	693b      	ldr	r3, [r7, #16]
}
 800088c:	4618      	mov	r0, r3
 800088e:	371c      	adds	r7, #28
 8000890:	46bd      	mov	sp, r7
 8000892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000896:	4770      	bx	lr

08000898 <Serial_PutString>:
  * @brief  Print a string on the HyperTerminal
  * @param  p_string: The string to be printed
  * @retval None
  */
void Serial_PutString(uint8_t *p_string)
{
 8000898:	b580      	push	{r7, lr}
 800089a:	b084      	sub	sp, #16
 800089c:	af00      	add	r7, sp, #0
 800089e:	6078      	str	r0, [r7, #4]
  uint16_t length = 0;
 80008a0:	2300      	movs	r3, #0
 80008a2:	81fb      	strh	r3, [r7, #14]

  while (p_string[length] != '\0')
 80008a4:	e002      	b.n	80008ac <Serial_PutString+0x14>
  {
    length++;
 80008a6:	89fb      	ldrh	r3, [r7, #14]
 80008a8:	3301      	adds	r3, #1
 80008aa:	81fb      	strh	r3, [r7, #14]
  while (p_string[length] != '\0')
 80008ac:	89fb      	ldrh	r3, [r7, #14]
 80008ae:	687a      	ldr	r2, [r7, #4]
 80008b0:	4413      	add	r3, r2
 80008b2:	781b      	ldrb	r3, [r3, #0]
 80008b4:	2b00      	cmp	r3, #0
 80008b6:	d1f6      	bne.n	80008a6 <Serial_PutString+0xe>
  }
  HAL_UART_Transmit(uart_handler, p_string, length, TX_TIMEOUT);
 80008b8:	4b05      	ldr	r3, [pc, #20]	@ (80008d0 <Serial_PutString+0x38>)
 80008ba:	6818      	ldr	r0, [r3, #0]
 80008bc:	89fa      	ldrh	r2, [r7, #14]
 80008be:	2364      	movs	r3, #100	@ 0x64
 80008c0:	6879      	ldr	r1, [r7, #4]
 80008c2:	f005 f95b 	bl	8005b7c <HAL_UART_Transmit>
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	200000a8 	.word	0x200000a8

080008d4 <Serial_PutByte>:
  * @brief  Transmit a byte to the HyperTerminal
  * @param  param The byte to be sent
  * @retval HAL_StatusTypeDef HAL_OK if OK
  */
HAL_StatusTypeDef Serial_PutByte(uint8_t param)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b082      	sub	sp, #8
 80008d8:	af00      	add	r7, sp, #0
 80008da:	4603      	mov	r3, r0
 80008dc:	71fb      	strb	r3, [r7, #7]
  /* May be timeouted... */
  if ( uart_handler->gState == HAL_UART_STATE_TIMEOUT )
 80008de:	4b0b      	ldr	r3, [pc, #44]	@ (800090c <Serial_PutByte+0x38>)
 80008e0:	681b      	ldr	r3, [r3, #0]
 80008e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80008e6:	2ba0      	cmp	r3, #160	@ 0xa0
 80008e8:	d104      	bne.n	80008f4 <Serial_PutByte+0x20>
  {
	  uart_handler->gState = HAL_UART_STATE_READY;
 80008ea:	4b08      	ldr	r3, [pc, #32]	@ (800090c <Serial_PutByte+0x38>)
 80008ec:	681b      	ldr	r3, [r3, #0]
 80008ee:	2220      	movs	r2, #32
 80008f0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  }
  return HAL_UART_Transmit(uart_handler, &param, 1, TX_TIMEOUT);
 80008f4:	4b05      	ldr	r3, [pc, #20]	@ (800090c <Serial_PutByte+0x38>)
 80008f6:	6818      	ldr	r0, [r3, #0]
 80008f8:	1df9      	adds	r1, r7, #7
 80008fa:	2364      	movs	r3, #100	@ 0x64
 80008fc:	2201      	movs	r2, #1
 80008fe:	f005 f93d 	bl	8005b7c <HAL_UART_Transmit>
 8000902:	4603      	mov	r3, r0
}
 8000904:	4618      	mov	r0, r3
 8000906:	3708      	adds	r7, #8
 8000908:	46bd      	mov	sp, r7
 800090a:	bd80      	pop	{r7, pc}
 800090c:	200000a8 	.word	0x200000a8

08000910 <FLASH_If_Init>:
  * @brief  Unlocks Flash for write access
  * @param  None
  * @retval None
  */
void FLASH_If_Init(void)
{
 8000910:	b480      	push	{r7}
 8000912:	af00      	add	r7, sp, #0
    /* Clear all FLASH flags */
  __HAL_FLASH_CLEAR_FLAG( FLASH_FLAG_EOP     | FLASH_FLAG_OPERR   |
 8000914:	4b04      	ldr	r3, [pc, #16]	@ (8000928 <FLASH_If_Init+0x18>)
 8000916:	f240 32fb 	movw	r2, #1019	@ 0x3fb
 800091a:	611a      	str	r2, [r3, #16]
                          FLASH_FLAG_PGSERR  | FLASH_FLAG_PROGERR |
                          FLASH_FLAG_WRPERR  | FLASH_FLAG_PGAERR  |
                          FLASH_FLAG_SIZERR  | FLASH_FLAG_MISERR  |
                          FLASH_FLAG_FASTERR);// | FLASH_FLAG_OPTVERR );
}
 800091c:	bf00      	nop
 800091e:	46bd      	mov	sp, r7
 8000920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000924:	4770      	bx	lr
 8000926:	bf00      	nop
 8000928:	40022000 	.word	0x40022000

0800092c <FLASH_If_Erase>:
  * @param  StartSector: start of user flash area
  * @retval 0: user flash area successfully erased
  *         1: error occurred
  */
uint32_t FLASH_If_Erase(uint32_t StartPage)
{
 800092c:	b580      	push	{r7, lr}
 800092e:	b088      	sub	sp, #32
 8000930:	af00      	add	r7, sp, #0
 8000932:	6078      	str	r0, [r7, #4]
  uint32_t UserStartPage;
  uint32_t PageErr;
  FLASH_EraseInitTypeDef pEraseInit;

  if (StartPage > APPLICATION_ADDRESS_M4_END) {
 8000934:	687b      	ldr	r3, [r7, #4]
 8000936:	4a16      	ldr	r2, [pc, #88]	@ (8000990 <FLASH_If_Erase+0x64>)
 8000938:	4293      	cmp	r3, r2
 800093a:	d301      	bcc.n	8000940 <FLASH_If_Erase+0x14>
    return FALSE;
 800093c:	2300      	movs	r3, #0
 800093e:	e023      	b.n	8000988 <FLASH_If_Erase+0x5c>
  }
  
  /* Unlock the Flash to enable the flash control register access *************/ 
  HAL_FLASH_Unlock(); 
 8000940:	f002 fbcc 	bl	80030dc <HAL_FLASH_Unlock>
  FLASH_If_Init();
 8000944:	f7ff ffe4 	bl	8000910 <FLASH_If_Init>
  
  /* Get the sector where start the user flash area */
  UserStartPage           = GetPage(StartPage);
 8000948:	6878      	ldr	r0, [r7, #4]
 800094a:	f000 f86b 	bl	8000a24 <GetPage>
 800094e:	61f8      	str	r0, [r7, #28]
  pEraseInit.TypeErase    = FLASH_TYPEERASE_PAGES;
 8000950:	2300      	movs	r3, #0
 8000952:	60bb      	str	r3, [r7, #8]
  pEraseInit.Page         = UserStartPage;
 8000954:	69fb      	ldr	r3, [r7, #28]
 8000956:	613b      	str	r3, [r7, #16]
  pEraseInit.NbPages      = FLASH_PAGE_63 - UserStartPage;
 8000958:	69fb      	ldr	r3, [r7, #28]
 800095a:	f1c3 033f 	rsb	r3, r3, #63	@ 0x3f
 800095e:	617b      	str	r3, [r7, #20]
  pEraseInit.Banks        = FLASH_BANK_1;
 8000960:	2301      	movs	r3, #1
 8000962:	60fb      	str	r3, [r7, #12]
#if M4_LEGACY
  pEraseInit.VoltageRange = FLASH_VOLTAGE_RANGE_3;
#endif

  if (HAL_FLASHEx_Erase(&pEraseInit, &PageErr) != HAL_OK) {
 8000964:	f107 0218 	add.w	r2, r7, #24
 8000968:	f107 0308 	add.w	r3, r7, #8
 800096c:	4611      	mov	r1, r2
 800096e:	4618      	mov	r0, r3
 8000970:	f002 fcee 	bl	8003350 <HAL_FLASHEx_Erase>
 8000974:	4603      	mov	r3, r0
 8000976:	2b00      	cmp	r3, #0
 8000978:	d003      	beq.n	8000982 <FLASH_If_Erase+0x56>
    HAL_FLASH_Lock();
 800097a:	f002 fbd1 	bl	8003120 <HAL_FLASH_Lock>
    /* Error occurred while sector erase */
    return FALSE;
 800097e:	2300      	movs	r3, #0
 8000980:	e002      	b.n	8000988 <FLASH_If_Erase+0x5c>
  }
  HAL_FLASH_Lock();
 8000982:	f002 fbcd 	bl	8003120 <HAL_FLASH_Lock>

#if 0 // DBG
  printf("Page Number %d Target Address 0x%08lx\r\n", pEraseInit.Page, (uint32_t)StartPage);
#endif
  return TRUE;
 8000986:	2301      	movs	r3, #1
}
 8000988:	4618      	mov	r0, r3
 800098a:	3720      	adds	r7, #32
 800098c:	46bd      	mov	sp, r7
 800098e:	bd80      	pop	{r7, pc}
 8000990:	0801ffff 	.word	0x0801ffff

08000994 <FLASH_If_Write>:
  * @retval uint32_t 0: Data successfully written to Flash memory
  *         1: Error occurred while writing data in Flash memory
  *         2: Written Data in flash memory is different from expected one
  */
uint32_t FLASH_If_Write(uint32_t destination, uint32_t *p_source, uint32_t length)
{
 8000994:	b580      	push	{r7, lr}
 8000996:	b086      	sub	sp, #24
 8000998:	af00      	add	r7, sp, #0
 800099a:	60f8      	str	r0, [r7, #12]
 800099c:	60b9      	str	r1, [r7, #8]
 800099e:	607a      	str	r2, [r7, #4]
  uint32_t status = FLASHIF_OK;
 80009a0:	2300      	movs	r3, #0
 80009a2:	617b      	str	r3, [r7, #20]
  uint32_t i = 0;
 80009a4:	2300      	movs	r3, #0
 80009a6:	613b      	str	r3, [r7, #16]

  HAL_FLASH_Unlock();
 80009a8:	f002 fb98 	bl	80030dc <HAL_FLASH_Unlock>

  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 80009ac:	2300      	movs	r3, #0
 80009ae:	613b      	str	r3, [r7, #16]
 80009b0:	e026      	b.n	8000a00 <FLASH_If_Write+0x6c>
   {
     /* Device voltage range supposed to be [2.7V to 3.6V], the operation will
        be done by word */
     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, destination, *((uint64_t *)(p_source+2*i))) == HAL_OK)
 80009b2:	693b      	ldr	r3, [r7, #16]
 80009b4:	00db      	lsls	r3, r3, #3
 80009b6:	68ba      	ldr	r2, [r7, #8]
 80009b8:	4413      	add	r3, r2
 80009ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009be:	68f9      	ldr	r1, [r7, #12]
 80009c0:	2000      	movs	r0, #0
 80009c2:	f002 fb11 	bl	8002fe8 <HAL_FLASH_Program>
 80009c6:	4603      	mov	r3, r0
 80009c8:	2b00      	cmp	r3, #0
 80009ca:	d113      	bne.n	80009f4 <FLASH_If_Write+0x60>
     {
      /* Check the written value */
       if (*(uint64_t *)destination != *(uint64_t *)(p_source + 2 * i))
 80009cc:	68fb      	ldr	r3, [r7, #12]
 80009ce:	e9d3 0100 	ldrd	r0, r1, [r3]
 80009d2:	693b      	ldr	r3, [r7, #16]
 80009d4:	00db      	lsls	r3, r3, #3
 80009d6:	68ba      	ldr	r2, [r7, #8]
 80009d8:	4413      	add	r3, r2
 80009da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80009de:	4299      	cmp	r1, r3
 80009e0:	bf08      	it	eq
 80009e2:	4290      	cmpeq	r0, r2
 80009e4:	d002      	beq.n	80009ec <FLASH_If_Write+0x58>
       {
         /* Flash content doesn't match SRAM content */
         status = FLASHIF_WRITINGCTRL_ERROR;
 80009e6:	2302      	movs	r3, #2
 80009e8:	617b      	str	r3, [r7, #20]
         break;
 80009ea:	e012      	b.n	8000a12 <FLASH_If_Write+0x7e>
       }
       /* Increment FLASH destination address */
       destination += sizeof(uint64_t);
 80009ec:	68fb      	ldr	r3, [r7, #12]
 80009ee:	3308      	adds	r3, #8
 80009f0:	60fb      	str	r3, [r7, #12]
 80009f2:	e002      	b.n	80009fa <FLASH_If_Write+0x66>
     }
     else
     {
       /* Error occurred while writing data in Flash memory */
       status = FLASHIF_WRITING_ERROR;
 80009f4:	2303      	movs	r3, #3
 80009f6:	617b      	str	r3, [r7, #20]
       break;
 80009f8:	e00b      	b.n	8000a12 <FLASH_If_Write+0x7e>
  for (i = 0; (i < length/2) && (destination <= (USER_FLASH_END_ADDRESS-8)); i++)
 80009fa:	693b      	ldr	r3, [r7, #16]
 80009fc:	3301      	adds	r3, #1
 80009fe:	613b      	str	r3, [r7, #16]
 8000a00:	687b      	ldr	r3, [r7, #4]
 8000a02:	085b      	lsrs	r3, r3, #1
 8000a04:	693a      	ldr	r2, [r7, #16]
 8000a06:	429a      	cmp	r2, r3
 8000a08:	d203      	bcs.n	8000a12 <FLASH_If_Write+0x7e>
 8000a0a:	68fb      	ldr	r3, [r7, #12]
 8000a0c:	4a04      	ldr	r2, [pc, #16]	@ (8000a20 <FLASH_If_Write+0x8c>)
 8000a0e:	4293      	cmp	r3, r2
 8000a10:	d9cf      	bls.n	80009b2 <FLASH_If_Write+0x1e>
     }
   }

  HAL_FLASH_Lock();
 8000a12:	f002 fb85 	bl	8003120 <HAL_FLASH_Lock>

  return status;
 8000a16:	697b      	ldr	r3, [r7, #20]
}
 8000a18:	4618      	mov	r0, r3
 8000a1a:	3718      	adds	r7, #24
 8000a1c:	46bd      	mov	sp, r7
 8000a1e:	bd80      	pop	{r7, pc}
 8000a20:	0801fff6 	.word	0x0801fff6

08000a24 <GetPage>:
  * @brief  Gets the page of a given address
  * @param  Address: Flash address
  * @retval The page of a given address
  */
static uint32_t GetPage(uint32_t Address)
{
 8000a24:	b480      	push	{r7}
 8000a26:	b085      	sub	sp, #20
 8000a28:	af00      	add	r7, sp, #0
 8000a2a:	6078      	str	r0, [r7, #4]
  uint32_t page = FLASH_PAGE_0;
 8000a2c:	2300      	movs	r3, #0
 8000a2e:	60fb      	str	r3, [r7, #12]
  
  for (uint8_t cnt = FLASH_PAGE_0; cnt <= FLASH_PAGE_63; cnt++) {
 8000a30:	2300      	movs	r3, #0
 8000a32:	72fb      	strb	r3, [r7, #11]
 8000a34:	e01c      	b.n	8000a70 <GetPage+0x4c>
    if (flash_map[cnt].start_addr >= Address && 
 8000a36:	7afa      	ldrb	r2, [r7, #11]
 8000a38:	4912      	ldr	r1, [pc, #72]	@ (8000a84 <GetPage+0x60>)
 8000a3a:	4613      	mov	r3, r2
 8000a3c:	005b      	lsls	r3, r3, #1
 8000a3e:	4413      	add	r3, r2
 8000a40:	009b      	lsls	r3, r3, #2
 8000a42:	440b      	add	r3, r1
 8000a44:	681b      	ldr	r3, [r3, #0]
 8000a46:	687a      	ldr	r2, [r7, #4]
 8000a48:	429a      	cmp	r2, r3
 8000a4a:	d80e      	bhi.n	8000a6a <GetPage+0x46>
        flash_map[cnt].end_addr   <  Address) {
 8000a4c:	7afa      	ldrb	r2, [r7, #11]
 8000a4e:	490d      	ldr	r1, [pc, #52]	@ (8000a84 <GetPage+0x60>)
 8000a50:	4613      	mov	r3, r2
 8000a52:	005b      	lsls	r3, r3, #1
 8000a54:	4413      	add	r3, r2
 8000a56:	009b      	lsls	r3, r3, #2
 8000a58:	440b      	add	r3, r1
 8000a5a:	3304      	adds	r3, #4
 8000a5c:	681b      	ldr	r3, [r3, #0]
    if (flash_map[cnt].start_addr >= Address && 
 8000a5e:	687a      	ldr	r2, [r7, #4]
 8000a60:	429a      	cmp	r2, r3
 8000a62:	d902      	bls.n	8000a6a <GetPage+0x46>
        page = cnt;
 8000a64:	7afb      	ldrb	r3, [r7, #11]
 8000a66:	60fb      	str	r3, [r7, #12]
        break;
 8000a68:	e005      	b.n	8000a76 <GetPage+0x52>
  for (uint8_t cnt = FLASH_PAGE_0; cnt <= FLASH_PAGE_63; cnt++) {
 8000a6a:	7afb      	ldrb	r3, [r7, #11]
 8000a6c:	3301      	adds	r3, #1
 8000a6e:	72fb      	strb	r3, [r7, #11]
 8000a70:	7afb      	ldrb	r3, [r7, #11]
 8000a72:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a74:	d9df      	bls.n	8000a36 <GetPage+0x12>
    }
  }
  return page;
 8000a76:	68fb      	ldr	r3, [r7, #12]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3714      	adds	r7, #20
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a82:	4770      	bx	lr
 8000a84:	0800aec0 	.word	0x0800aec0

08000a88 <Xmodem_InitVariable>:
uint32_t guint32_tXmodem_Size;



void Xmodem_InitVariable(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
    /* 1K  */
    guint8_tPacketNumber  = 0;
 8000a8c:	4b06      	ldr	r3, [pc, #24]	@ (8000aa8 <Xmodem_InitVariable+0x20>)
 8000a8e:	2200      	movs	r2, #0
 8000a90:	701a      	strb	r2, [r3, #0]
    guint32_tPacketSize   = FALSE;
 8000a92:	4b06      	ldr	r3, [pc, #24]	@ (8000aac <Xmodem_InitVariable+0x24>)
 8000a94:	2200      	movs	r2, #0
 8000a96:	601a      	str	r2, [r3, #0]
    guint32_tXmodem_Size  = FALSE;
 8000a98:	4b05      	ldr	r3, [pc, #20]	@ (8000ab0 <Xmodem_InitVariable+0x28>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	601a      	str	r2, [r3, #0]

    uart_handle_init();
 8000a9e:	f7ff fd9f 	bl	80005e0 <uart_handle_init>
}
 8000aa2:	bf00      	nop
 8000aa4:	bd80      	pop	{r7, pc}
 8000aa6:	bf00      	nop
 8000aa8:	200000ac 	.word	0x200000ac
 8000aac:	200000b0 	.word	0x200000b0
 8000ab0:	200000b8 	.word	0x200000b8

08000ab4 <Xmodem_Getchar>:

uint8_t Xmodem_Getchar(uint8_t *retChar)
{
 8000ab4:	b480      	push	{r7}
 8000ab6:	b083      	sub	sp, #12
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	6078      	str	r0, [r7, #4]
    if ((__HAL_UART_GET_FLAG(uart_handler, UART_FLAG_RXNE) ? SET : RESET) == SET)
 8000abc:	4b0b      	ldr	r3, [pc, #44]	@ (8000aec <Xmodem_Getchar+0x38>)
 8000abe:	681b      	ldr	r3, [r3, #0]
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	69db      	ldr	r3, [r3, #28]
 8000ac4:	f003 0320 	and.w	r3, r3, #32
 8000ac8:	2b20      	cmp	r3, #32
 8000aca:	d108      	bne.n	8000ade <Xmodem_Getchar+0x2a>
    {
        *retChar = (uint8_t)uart_handler->Instance->RDR;
 8000acc:	4b07      	ldr	r3, [pc, #28]	@ (8000aec <Xmodem_Getchar+0x38>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000ad4:	b2da      	uxtb	r2, r3
 8000ad6:	687b      	ldr	r3, [r7, #4]
 8000ad8:	701a      	strb	r2, [r3, #0]
    else
    {
        return (FALSE);
    }
    
    return (TRUE);
 8000ada:	2301      	movs	r3, #1
 8000adc:	e000      	b.n	8000ae0 <Xmodem_Getchar+0x2c>
        return (FALSE);
 8000ade:	2300      	movs	r3, #0
}
 8000ae0:	4618      	mov	r0, r3
 8000ae2:	370c      	adds	r7, #12
 8000ae4:	46bd      	mov	sp, r7
 8000ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aea:	4770      	bx	lr
 8000aec:	200000a8 	.word	0x200000a8

08000af0 <XMODEM_WaitForChar>:

BOOL_e XMODEM_WaitForChar(uint8_t *uint8_tCPtr, uint32_t uint32_tProcessTime)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b084      	sub	sp, #16
 8000af4:	af00      	add	r7, sp, #0
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    uint32_t     uint32_tThisms;

    ++uint32_tProcessTime;
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	3301      	adds	r3, #1
 8000afe:	603b      	str	r3, [r7, #0]

    uint32_tThisms = uwTick;
 8000b00:	4b0f      	ldr	r3, [pc, #60]	@ (8000b40 <XMODEM_WaitForChar+0x50>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	60fb      	str	r3, [r7, #12]

    while (uint32_tProcessTime)
 8000b06:	e012      	b.n	8000b2e <XMODEM_WaitForChar+0x3e>
    {
        if (Xmodem_Getchar(uint8_tCPtr))
 8000b08:	6878      	ldr	r0, [r7, #4]
 8000b0a:	f7ff ffd3 	bl	8000ab4 <Xmodem_Getchar>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <XMODEM_WaitForChar+0x28>
        {
            return (TRUE);
 8000b14:	2301      	movs	r3, #1
 8000b16:	e00e      	b.n	8000b36 <XMODEM_WaitForChar+0x46>
        }

        if (uwTick != uint32_tThisms) {
 8000b18:	4b09      	ldr	r3, [pc, #36]	@ (8000b40 <XMODEM_WaitForChar+0x50>)
 8000b1a:	681b      	ldr	r3, [r3, #0]
 8000b1c:	68fa      	ldr	r2, [r7, #12]
 8000b1e:	429a      	cmp	r2, r3
 8000b20:	d005      	beq.n	8000b2e <XMODEM_WaitForChar+0x3e>
            --uint32_tProcessTime;
 8000b22:	683b      	ldr	r3, [r7, #0]
 8000b24:	3b01      	subs	r3, #1
 8000b26:	603b      	str	r3, [r7, #0]
            uint32_tThisms = uwTick;
 8000b28:	4b05      	ldr	r3, [pc, #20]	@ (8000b40 <XMODEM_WaitForChar+0x50>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	60fb      	str	r3, [r7, #12]
    while (uint32_tProcessTime)
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d1e9      	bne.n	8000b08 <XMODEM_WaitForChar+0x18>
        }
    }
    return (FALSE);
 8000b34:	2300      	movs	r3, #0
}
 8000b36:	4618      	mov	r0, r3
 8000b38:	3710      	adds	r7, #16
 8000b3a:	46bd      	mov	sp, r7
 8000b3c:	bd80      	pop	{r7, pc}
 8000b3e:	bf00      	nop
 8000b40:	200007c0 	.word	0x200007c0

08000b44 <XMODEM_GetRecord>:

//---------------------------------------------------------------------
// Packet Check -> Packet Inversion Check -> Data 128 or 1024 -> CRC-16
//---------------------------------------------------------------------
BOOL_e XMODEM_GetRecord(uint8_t *uint8_tDestAddress)
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b08a      	sub	sp, #40	@ 0x28
 8000b48:	af00      	add	r7, sp, #0
 8000b4a:	6078      	str	r0, [r7, #4]
    uint32_t    uint32_tSize;
    uint16_t    uint16_tCRC_check = 0;
 8000b4c:	2300      	movs	r3, #0
 8000b4e:	847b      	strh	r3, [r7, #34]	@ 0x22
    uint8_t     uint8_tGetChar    = 0;
 8000b50:	2300      	movs	r3, #0
 8000b52:	77fb      	strb	r3, [r7, #31]
    BOOL_e      bGetCheck         = FALSE;
 8000b54:	2300      	movs	r3, #0
 8000b56:	f887 3020 	strb.w	r3, [r7, #32]

#if _BUint32_tBIT_TO_64BIT_
    uint64_t flash_data     = 0;
 8000b5a:	f04f 0200 	mov.w	r2, #0
 8000b5e:	f04f 0300 	mov.w	r3, #0
 8000b62:	e9c7 2304 	strd	r2, r3, [r7, #16]
    uint8_t  byte_buffer[8] = { 0, };
 8000b66:	2300      	movs	r3, #0
 8000b68:	60bb      	str	r3, [r7, #8]
 8000b6a:	2300      	movs	r3, #0
 8000b6c:	60fb      	str	r3, [r7, #12]
    uint8_t  idx = 0;
 8000b6e:	2300      	movs	r3, #0
 8000b70:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
#endif

    /* Packet number */
    bGetCheck = XMODEM_WaitForChar(&uint8_tGetChar, DOWNLOAD_TIMEOUT);
 8000b74:	f107 031f 	add.w	r3, r7, #31
 8000b78:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000b7c:	4618      	mov	r0, r3
 8000b7e:	f7ff ffb7 	bl	8000af0 <XMODEM_WaitForChar>
 8000b82:	4603      	mov	r3, r0
 8000b84:	f887 3020 	strb.w	r3, [r7, #32]
    if ( (!bGetCheck) || (uint8_tGetChar != guint8_tPacketNumber) ) {
 8000b88:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d004      	beq.n	8000b9a <XMODEM_GetRecord+0x56>
 8000b90:	7ffa      	ldrb	r2, [r7, #31]
 8000b92:	4b50      	ldr	r3, [pc, #320]	@ (8000cd4 <XMODEM_GetRecord+0x190>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	429a      	cmp	r2, r3
 8000b98:	d001      	beq.n	8000b9e <XMODEM_GetRecord+0x5a>
        #if DBG_LED_MACRO
        // error dbg
        DBG_LED(100);
        #endif
        return (FALSE);
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	e096      	b.n	8000ccc <XMODEM_GetRecord+0x188>
    }

    bGetCheck = XMODEM_WaitForChar(&uint8_tGetChar, DOWNLOAD_TIMEOUT);
 8000b9e:	f107 031f 	add.w	r3, r7, #31
 8000ba2:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000ba6:	4618      	mov	r0, r3
 8000ba8:	f7ff ffa2 	bl	8000af0 <XMODEM_WaitForChar>
 8000bac:	4603      	mov	r3, r0
 8000bae:	f887 3020 	strb.w	r3, [r7, #32]
    if ( (!bGetCheck) || !(uint8_tGetChar != ~guint8_tPacketNumber) ) {
 8000bb2:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000bb6:	2b00      	cmp	r3, #0
 8000bb8:	d006      	beq.n	8000bc8 <XMODEM_GetRecord+0x84>
 8000bba:	7ffb      	ldrb	r3, [r7, #31]
 8000bbc:	461a      	mov	r2, r3
 8000bbe:	4b45      	ldr	r3, [pc, #276]	@ (8000cd4 <XMODEM_GetRecord+0x190>)
 8000bc0:	781b      	ldrb	r3, [r3, #0]
 8000bc2:	43db      	mvns	r3, r3
 8000bc4:	429a      	cmp	r2, r3
 8000bc6:	d101      	bne.n	8000bcc <XMODEM_GetRecord+0x88>
        #if DBG_LED_MACRO
        // error dbg
        DBG_LED(500);
        #endif
        return (FALSE);
 8000bc8:	2300      	movs	r3, #0
 8000bca:	e07f      	b.n	8000ccc <XMODEM_GetRecord+0x188>
    }
    
    HAL_FLASH_Unlock();
 8000bcc:	f002 fa86 	bl	80030dc <HAL_FLASH_Unlock>
        uint16_tCRC_check = (uint16_tCRC_check << 8) ^ crc16tab[((uint16_tCRC_check >> 8) ^ uint8_tGetChar) & 0x00FF];
        
        HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, uint8_tDestAddress++, uint8_tGetChar);
    }
#else
    for (uint32_tSize = 0; uint32_tSize < guint32_tPacketSize; ++uint32_tSize) {
 8000bd0:	2300      	movs	r3, #0
 8000bd2:	627b      	str	r3, [r7, #36]	@ 0x24
 8000bd4:	e046      	b.n	8000c64 <XMODEM_GetRecord+0x120>
        if ( !XMODEM_WaitForChar(&uint8_tGetChar, DOWNLOAD_TIMEOUT) ) {
 8000bd6:	f107 031f 	add.w	r3, r7, #31
 8000bda:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000bde:	4618      	mov	r0, r3
 8000be0:	f7ff ff86 	bl	8000af0 <XMODEM_WaitForChar>
 8000be4:	4603      	mov	r3, r0
 8000be6:	2b00      	cmp	r3, #0
 8000be8:	d101      	bne.n	8000bee <XMODEM_GetRecord+0xaa>
            return FALSE;
 8000bea:	2300      	movs	r3, #0
 8000bec:	e06e      	b.n	8000ccc <XMODEM_GetRecord+0x188>
        }
        
        byte_buffer[idx] = uint8_tGetChar;
 8000bee:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000bf2:	7ffa      	ldrb	r2, [r7, #31]
 8000bf4:	3328      	adds	r3, #40	@ 0x28
 8000bf6:	443b      	add	r3, r7
 8000bf8:	f803 2c20 	strb.w	r2, [r3, #-32]
        
        uint16_tCRC_check = (uint16_tCRC_check << 8) ^ crc16tab[((uint16_tCRC_check >> 8) ^ uint8_tGetChar) & 0x00FF];
 8000bfc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000bfe:	021b      	lsls	r3, r3, #8
 8000c00:	b21a      	sxth	r2, r3
 8000c02:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c04:	0a1b      	lsrs	r3, r3, #8
 8000c06:	b29b      	uxth	r3, r3
 8000c08:	4619      	mov	r1, r3
 8000c0a:	7ffb      	ldrb	r3, [r7, #31]
 8000c0c:	404b      	eors	r3, r1
 8000c0e:	b2db      	uxtb	r3, r3
 8000c10:	4931      	ldr	r1, [pc, #196]	@ (8000cd8 <XMODEM_GetRecord+0x194>)
 8000c12:	f831 3013 	ldrh.w	r3, [r1, r3, lsl #1]
 8000c16:	b21b      	sxth	r3, r3
 8000c18:	4053      	eors	r3, r2
 8000c1a:	b21b      	sxth	r3, r3
 8000c1c:	847b      	strh	r3, [r7, #34]	@ 0x22

        if (idx == 7) {
 8000c1e:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000c22:	2b07      	cmp	r3, #7
 8000c24:	d116      	bne.n	8000c54 <XMODEM_GetRecord+0x110>
            idx = 0;
 8000c26:	2300      	movs	r3, #0
 8000c28:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
            memcpy((uint64_t *)&flash_data, (uint64_t *)byte_buffer, sizeof(uint64_t));
 8000c2c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c30:	e9c7 2304 	strd	r2, r3, [r7, #16]
            HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)uint8_tDestAddress, flash_data);
 8000c34:	6879      	ldr	r1, [r7, #4]
 8000c36:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000c3a:	2000      	movs	r0, #0
 8000c3c:	f002 f9d4 	bl	8002fe8 <HAL_FLASH_Program>
            uint8_tDestAddress += sizeof(uint64_t);
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	3308      	adds	r3, #8
 8000c44:	607b      	str	r3, [r7, #4]
            flash_data = 0;
 8000c46:	f04f 0200 	mov.w	r2, #0
 8000c4a:	f04f 0300 	mov.w	r3, #0
 8000c4e:	e9c7 2304 	strd	r2, r3, [r7, #16]
 8000c52:	e004      	b.n	8000c5e <XMODEM_GetRecord+0x11a>
        } else {
            idx++;
 8000c54:	f897 3021 	ldrb.w	r3, [r7, #33]	@ 0x21
 8000c58:	3301      	adds	r3, #1
 8000c5a:	f887 3021 	strb.w	r3, [r7, #33]	@ 0x21
    for (uint32_tSize = 0; uint32_tSize < guint32_tPacketSize; ++uint32_tSize) {
 8000c5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000c60:	3301      	adds	r3, #1
 8000c62:	627b      	str	r3, [r7, #36]	@ 0x24
 8000c64:	4b1d      	ldr	r3, [pc, #116]	@ (8000cdc <XMODEM_GetRecord+0x198>)
 8000c66:	681b      	ldr	r3, [r3, #0]
 8000c68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000c6a:	429a      	cmp	r2, r3
 8000c6c:	d3b3      	bcc.n	8000bd6 <XMODEM_GetRecord+0x92>
        }
    }
#endif

    HAL_FLASH_Lock();
 8000c6e:	f002 fa57 	bl	8003120 <HAL_FLASH_Lock>
    
    /* high & low CRC bit */
    uint16_tCRC_check &= 0xFFFF;
    bGetCheck = XMODEM_WaitForChar(&uint8_tGetChar, DOWNLOAD_TIMEOUT);
 8000c72:	f107 031f 	add.w	r3, r7, #31
 8000c76:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	f7ff ff38 	bl	8000af0 <XMODEM_WaitForChar>
 8000c80:	4603      	mov	r3, r0
 8000c82:	f887 3020 	strb.w	r3, [r7, #32]
    if ((!bGetCheck) || (uint8_tGetChar != (uint8_t)((uint16_tCRC_check >> 8) & 0xFF)))
 8000c86:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000c8a:	2b00      	cmp	r3, #0
 8000c8c:	d006      	beq.n	8000c9c <XMODEM_GetRecord+0x158>
 8000c8e:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000c90:	0a1b      	lsrs	r3, r3, #8
 8000c92:	b29b      	uxth	r3, r3
 8000c94:	b2da      	uxtb	r2, r3
 8000c96:	7ffb      	ldrb	r3, [r7, #31]
 8000c98:	429a      	cmp	r2, r3
 8000c9a:	d001      	beq.n	8000ca0 <XMODEM_GetRecord+0x15c>
    {
        return (FALSE);
 8000c9c:	2300      	movs	r3, #0
 8000c9e:	e015      	b.n	8000ccc <XMODEM_GetRecord+0x188>
    }    

    bGetCheck = XMODEM_WaitForChar(&uint8_tGetChar, DOWNLOAD_TIMEOUT);
 8000ca0:	f107 031f 	add.w	r3, r7, #31
 8000ca4:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000ca8:	4618      	mov	r0, r3
 8000caa:	f7ff ff21 	bl	8000af0 <XMODEM_WaitForChar>
 8000cae:	4603      	mov	r3, r0
 8000cb0:	f887 3020 	strb.w	r3, [r7, #32]
    if ((!bGetCheck) || (uint8_tGetChar != (uint8_t)(uint16_tCRC_check & 0xFF)))
 8000cb4:	f897 3020 	ldrb.w	r3, [r7, #32]
 8000cb8:	2b00      	cmp	r3, #0
 8000cba:	d004      	beq.n	8000cc6 <XMODEM_GetRecord+0x182>
 8000cbc:	8c7b      	ldrh	r3, [r7, #34]	@ 0x22
 8000cbe:	b2da      	uxtb	r2, r3
 8000cc0:	7ffb      	ldrb	r3, [r7, #31]
 8000cc2:	429a      	cmp	r2, r3
 8000cc4:	d001      	beq.n	8000cca <XMODEM_GetRecord+0x186>
    {
        return (FALSE);
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e000      	b.n	8000ccc <XMODEM_GetRecord+0x188>
    }    

    return (TRUE);
 8000cca:	2301      	movs	r3, #1
}
 8000ccc:	4618      	mov	r0, r3
 8000cce:	3728      	adds	r7, #40	@ 0x28
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	bd80      	pop	{r7, pc}
 8000cd4:	200000ac 	.word	0x200000ac
 8000cd8:	0800b1c0 	.word	0x0800b1c0
 8000cdc:	200000b0 	.word	0x200000b0

08000ce0 <XMODEM_Rx>:

 // 128 or 1024 xmodem Rx

BOOL_e XMODEM_Rx(uint32_t *p_size, uint8_t *uint8_tDestAddress)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b086      	sub	sp, #24
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
 8000ce8:	6039      	str	r1, [r7, #0]
    uint32_t     uint32_tState;
    uint32_t     uint32_tRetrynum = 10;                            
 8000cea:	230a      	movs	r3, #10
 8000cec:	613b      	str	r3, [r7, #16]
    uint8_t      uint8_tGetChar;
    uint8_t     *uint8_tStartAddress =  uint8_tDestAddress;
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	60fb      	str	r3, [r7, #12]

    guint32_tPacketTSize = 0;
 8000cf2:	4b4f      	ldr	r3, [pc, #316]	@ (8000e30 <XMODEM_Rx+0x150>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
    guint8_tPacketNumber = 1;
 8000cf8:	4b4e      	ldr	r3, [pc, #312]	@ (8000e34 <XMODEM_Rx+0x154>)
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	701a      	strb	r2, [r3, #0]
    uint32_tState        = WAITING_START;
 8000cfe:	2301      	movs	r3, #1
 8000d00:	617b      	str	r3, [r7, #20]
    
    while (uint32_tRetrynum) 
 8000d02:	e08b      	b.n	8000e1c <XMODEM_Rx+0x13c>
    {                              
        if (uint32_tState == WAITING_START)                 
 8000d04:	697b      	ldr	r3, [r7, #20]
 8000d06:	2b01      	cmp	r3, #1
 8000d08:	d125      	bne.n	8000d56 <XMODEM_Rx+0x76>
        {
            Serial_PutByte('C');
 8000d0a:	2043      	movs	r0, #67	@ 0x43
 8000d0c:	f7ff fde2 	bl	80008d4 <Serial_PutByte>

            if (XMODEM_WaitForChar(&uint8_tGetChar, DOWNLOAD_TIMEOUT))
 8000d10:	f107 030b 	add.w	r3, r7, #11
 8000d14:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000d18:	4618      	mov	r0, r3
 8000d1a:	f7ff fee9 	bl	8000af0 <XMODEM_WaitForChar>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	2b00      	cmp	r3, #0
 8000d22:	d018      	beq.n	8000d56 <XMODEM_Rx+0x76>
            {
                /* packet head packet size  */
                if (uint8_tGetChar == XMODEM_SOH)
 8000d24:	7afb      	ldrb	r3, [r7, #11]
 8000d26:	2b01      	cmp	r3, #1
 8000d28:	d104      	bne.n	8000d34 <XMODEM_Rx+0x54>
                {
                    guint32_tPacketSize = PACKET_SIZE_SOH;
 8000d2a:	4b43      	ldr	r3, [pc, #268]	@ (8000e38 <XMODEM_Rx+0x158>)
 8000d2c:	2280      	movs	r2, #128	@ 0x80
 8000d2e:	601a      	str	r2, [r3, #0]
                    ChangeState(uint32_tState, RX_PACKET);
 8000d30:	2303      	movs	r3, #3
 8000d32:	617b      	str	r3, [r7, #20]
                }
                
                // x modem 1024byte
                if (uint8_tGetChar == XMODEM_STX)
 8000d34:	7afb      	ldrb	r3, [r7, #11]
 8000d36:	2b02      	cmp	r3, #2
 8000d38:	d105      	bne.n	8000d46 <XMODEM_Rx+0x66>
                {
                    guint32_tPacketSize = PACKET_SIZE_STX;
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	@ (8000e38 <XMODEM_Rx+0x158>)
 8000d3c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d40:	601a      	str	r2, [r3, #0]
                    ChangeState(uint32_tState, RX_PACKET);
 8000d42:	2303      	movs	r3, #3
 8000d44:	617b      	str	r3, [r7, #20]
                }

                if ((uint8_tGetChar == ABORT1) || (uint8_tGetChar == ABORT2))
 8000d46:	7afb      	ldrb	r3, [r7, #11]
 8000d48:	2b41      	cmp	r3, #65	@ 0x41
 8000d4a:	d002      	beq.n	8000d52 <XMODEM_Rx+0x72>
 8000d4c:	7afb      	ldrb	r3, [r7, #11]
 8000d4e:	2b61      	cmp	r3, #97	@ 0x61
 8000d50:	d101      	bne.n	8000d56 <XMODEM_Rx+0x76>
                {
                    return (FALSE);
 8000d52:	2300      	movs	r3, #0
 8000d54:	e067      	b.n	8000e26 <XMODEM_Rx+0x146>
                }
            }
        }

        if (uint32_tState == WAIT_HEAD)                      
 8000d56:	697b      	ldr	r3, [r7, #20]
 8000d58:	2b02      	cmp	r3, #2
 8000d5a:	d136      	bne.n	8000dca <XMODEM_Rx+0xea>
        {
            if (!XMODEM_WaitForChar(&uint8_tGetChar, DOWNLOAD_TIMEOUT))     
 8000d5c:	f107 030b 	add.w	r3, r7, #11
 8000d60:	f640 31b8 	movw	r1, #3000	@ 0xbb8
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff fec3 	bl	8000af0 <XMODEM_WaitForChar>
 8000d6a:	4603      	mov	r3, r0
 8000d6c:	2b00      	cmp	r3, #0
 8000d6e:	d106      	bne.n	8000d7e <XMODEM_Rx+0x9e>
            {                                           
                Serial_PutByte(XMODEM_NAK);
 8000d70:	2015      	movs	r0, #21
 8000d72:	f7ff fdaf 	bl	80008d4 <Serial_PutByte>

                uint32_tRetrynum--;                         
 8000d76:	693b      	ldr	r3, [r7, #16]
 8000d78:	3b01      	subs	r3, #1
 8000d7a:	613b      	str	r3, [r7, #16]
 8000d7c:	e020      	b.n	8000dc0 <XMODEM_Rx+0xe0>
            }
            else if (uint8_tGetChar == XMODEM_SOH)
 8000d7e:	7afb      	ldrb	r3, [r7, #11]
 8000d80:	2b01      	cmp	r3, #1
 8000d82:	d105      	bne.n	8000d90 <XMODEM_Rx+0xb0>
            {
                guint32_tPacketSize = PACKET_SIZE_SOH;
 8000d84:	4b2c      	ldr	r3, [pc, #176]	@ (8000e38 <XMODEM_Rx+0x158>)
 8000d86:	2280      	movs	r2, #128	@ 0x80
 8000d88:	601a      	str	r2, [r3, #0]
                ChangeState(uint32_tState, RX_PACKET);
 8000d8a:	2303      	movs	r3, #3
 8000d8c:	617b      	str	r3, [r7, #20]
 8000d8e:	e017      	b.n	8000dc0 <XMODEM_Rx+0xe0>
            }
            else if (uint8_tGetChar == XMODEM_STX)
 8000d90:	7afb      	ldrb	r3, [r7, #11]
 8000d92:	2b02      	cmp	r3, #2
 8000d94:	d106      	bne.n	8000da4 <XMODEM_Rx+0xc4>
            {
                guint32_tPacketSize = PACKET_SIZE_STX;
 8000d96:	4b28      	ldr	r3, [pc, #160]	@ (8000e38 <XMODEM_Rx+0x158>)
 8000d98:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8000d9c:	601a      	str	r2, [r3, #0]
                ChangeState(uint32_tState, RX_PACKET);
 8000d9e:	2303      	movs	r3, #3
 8000da0:	617b      	str	r3, [r7, #20]
 8000da2:	e00d      	b.n	8000dc0 <XMODEM_Rx+0xe0>
            }
            else if (uint8_tGetChar == XMODEM_EOT) 
 8000da4:	7afb      	ldrb	r3, [r7, #11]
 8000da6:	2b04      	cmp	r3, #4
 8000da8:	d10a      	bne.n	8000dc0 <XMODEM_Rx+0xe0>
            {
                Serial_PutByte(XMODEM_ACK);
 8000daa:	2006      	movs	r0, #6
 8000dac:	f7ff fd92 	bl	80008d4 <Serial_PutByte>

                *p_size = (uint8_tDestAddress - uint8_tStartAddress);
 8000db0:	683a      	ldr	r2, [r7, #0]
 8000db2:	68fb      	ldr	r3, [r7, #12]
 8000db4:	1ad3      	subs	r3, r2, r3
 8000db6:	461a      	mov	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	601a      	str	r2, [r3, #0]
                //*p_size = guint32_tPacketTSize;
                return (TRUE);
 8000dbc:	2301      	movs	r3, #1
 8000dbe:	e032      	b.n	8000e26 <XMODEM_Rx+0x146>
            }

            if (uint8_tGetChar == XMODEM_CAN) /* CANCEL */
 8000dc0:	7afb      	ldrb	r3, [r7, #11]
 8000dc2:	2b18      	cmp	r3, #24
 8000dc4:	d101      	bne.n	8000dca <XMODEM_Rx+0xea>
            {
                return (FALSE);                        
 8000dc6:	2300      	movs	r3, #0
 8000dc8:	e02d      	b.n	8000e26 <XMODEM_Rx+0x146>
            }
        }

        if (uint32_tState == RX_PACKET)
 8000dca:	697b      	ldr	r3, [r7, #20]
 8000dcc:	2b03      	cmp	r3, #3
 8000dce:	d125      	bne.n	8000e1c <XMODEM_Rx+0x13c>
        {
            if (XMODEM_GetRecord(uint8_tDestAddress))
 8000dd0:	6838      	ldr	r0, [r7, #0]
 8000dd2:	f7ff feb7 	bl	8000b44 <XMODEM_GetRecord>
 8000dd6:	4603      	mov	r3, r0
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d017      	beq.n	8000e0c <XMODEM_Rx+0x12c>
            {
                Serial_PutByte(XMODEM_ACK);
 8000ddc:	2006      	movs	r0, #6
 8000dde:	f7ff fd79 	bl	80008d4 <Serial_PutByte>
                uint8_tDestAddress += guint32_tPacketSize;
 8000de2:	4b15      	ldr	r3, [pc, #84]	@ (8000e38 <XMODEM_Rx+0x158>)
 8000de4:	681b      	ldr	r3, [r3, #0]
 8000de6:	683a      	ldr	r2, [r7, #0]
 8000de8:	4413      	add	r3, r2
 8000dea:	603b      	str	r3, [r7, #0]
                guint32_tPacketTSize += guint32_tPacketSize;
 8000dec:	4b10      	ldr	r3, [pc, #64]	@ (8000e30 <XMODEM_Rx+0x150>)
 8000dee:	681a      	ldr	r2, [r3, #0]
 8000df0:	4b11      	ldr	r3, [pc, #68]	@ (8000e38 <XMODEM_Rx+0x158>)
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4413      	add	r3, r2
 8000df6:	4a0e      	ldr	r2, [pc, #56]	@ (8000e30 <XMODEM_Rx+0x150>)
 8000df8:	6013      	str	r3, [r2, #0]
                ++guint8_tPacketNumber;
 8000dfa:	4b0e      	ldr	r3, [pc, #56]	@ (8000e34 <XMODEM_Rx+0x154>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	3301      	adds	r3, #1
 8000e00:	b2da      	uxtb	r2, r3
 8000e02:	4b0c      	ldr	r3, [pc, #48]	@ (8000e34 <XMODEM_Rx+0x154>)
 8000e04:	701a      	strb	r2, [r3, #0]
                ChangeState(uint32_tState, WAIT_HEAD);
 8000e06:	2302      	movs	r3, #2
 8000e08:	617b      	str	r3, [r7, #20]
 8000e0a:	e007      	b.n	8000e1c <XMODEM_Rx+0x13c>
            }
            else
            {
                Serial_PutByte(XMODEM_ACK);
 8000e0c:	2006      	movs	r0, #6
 8000e0e:	f7ff fd61 	bl	80008d4 <Serial_PutByte>
                uint32_tRetrynum--;
 8000e12:	693b      	ldr	r3, [r7, #16]
 8000e14:	3b01      	subs	r3, #1
 8000e16:	613b      	str	r3, [r7, #16]
                ChangeState(uint32_tState, WAIT_HEAD);
 8000e18:	2302      	movs	r3, #2
 8000e1a:	617b      	str	r3, [r7, #20]
    while (uint32_tRetrynum) 
 8000e1c:	693b      	ldr	r3, [r7, #16]
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	f47f af70 	bne.w	8000d04 <XMODEM_Rx+0x24>
            }
        }
    }

    return (FALSE);
 8000e24:	2300      	movs	r3, #0
}
 8000e26:	4618      	mov	r0, r3
 8000e28:	3718      	adds	r7, #24
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	200000b4 	.word	0x200000b4
 8000e34:	200000ac 	.word	0x200000ac
 8000e38:	200000b0 	.word	0x200000b0

08000e3c <Ymodem_InitVariable>:




void Ymodem_InitVariable(void)
{
 8000e3c:	b580      	push	{r7, lr}
 8000e3e:	af00      	add	r7, sp, #0
    uart_handle_init();
 8000e40:	f7ff fbce 	bl	80005e0 <uart_handle_init>
}
 8000e44:	bf00      	nop
 8000e46:	bd80      	pop	{r7, pc}

08000e48 <Ymodem_Getchar>:

uint8_t Ymodem_Getchar(uint8_t *retChar)
{
 8000e48:	b480      	push	{r7}
 8000e4a:	b083      	sub	sp, #12
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
    if ((__HAL_UART_GET_FLAG(uart_handler, UART_FLAG_RXNE) ? SET : RESET) == SET) {
 8000e50:	4b0b      	ldr	r3, [pc, #44]	@ (8000e80 <Ymodem_Getchar+0x38>)
 8000e52:	681b      	ldr	r3, [r3, #0]
 8000e54:	681b      	ldr	r3, [r3, #0]
 8000e56:	69db      	ldr	r3, [r3, #28]
 8000e58:	f003 0320 	and.w	r3, r3, #32
 8000e5c:	2b20      	cmp	r3, #32
 8000e5e:	d108      	bne.n	8000e72 <Ymodem_Getchar+0x2a>
        *retChar = (uint8_t)uart_handler->Instance->RDR;
 8000e60:	4b07      	ldr	r3, [pc, #28]	@ (8000e80 <Ymodem_Getchar+0x38>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	681b      	ldr	r3, [r3, #0]
 8000e66:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000e68:	b2da      	uxtb	r2, r3
 8000e6a:	687b      	ldr	r3, [r7, #4]
 8000e6c:	701a      	strb	r2, [r3, #0]
    } else {
        return (FALSE);
    }    
    return (TRUE);
 8000e6e:	2301      	movs	r3, #1
 8000e70:	e000      	b.n	8000e74 <Ymodem_Getchar+0x2c>
        return (FALSE);
 8000e72:	2300      	movs	r3, #0
}
 8000e74:	4618      	mov	r0, r3
 8000e76:	370c      	adds	r7, #12
 8000e78:	46bd      	mov	sp, r7
 8000e7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e7e:	4770      	bx	lr
 8000e80:	200000a8 	.word	0x200000a8

08000e84 <YMODEM_WaitForChar>:

BOOL_e YMODEM_WaitForChar(uint8_t *uint8_tCPtr, uint32_t uint32_tProcessTime)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b084      	sub	sp, #16
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
 8000e8c:	6039      	str	r1, [r7, #0]
    uint32_t     uint32_tThisms;
    ++uint32_tProcessTime;
 8000e8e:	683b      	ldr	r3, [r7, #0]
 8000e90:	3301      	adds	r3, #1
 8000e92:	603b      	str	r3, [r7, #0]

    uint32_tThisms = uwTick;
 8000e94:	4b0f      	ldr	r3, [pc, #60]	@ (8000ed4 <YMODEM_WaitForChar+0x50>)
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	60fb      	str	r3, [r7, #12]

    while (uint32_tProcessTime) {
 8000e9a:	e012      	b.n	8000ec2 <YMODEM_WaitForChar+0x3e>
        if (Ymodem_Getchar(uint8_tCPtr)) {
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff ffd3 	bl	8000e48 <Ymodem_Getchar>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d001      	beq.n	8000eac <YMODEM_WaitForChar+0x28>
            return (TRUE);
 8000ea8:	2301      	movs	r3, #1
 8000eaa:	e00e      	b.n	8000eca <YMODEM_WaitForChar+0x46>
        }

        if (uwTick != uint32_tThisms) {
 8000eac:	4b09      	ldr	r3, [pc, #36]	@ (8000ed4 <YMODEM_WaitForChar+0x50>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	68fa      	ldr	r2, [r7, #12]
 8000eb2:	429a      	cmp	r2, r3
 8000eb4:	d005      	beq.n	8000ec2 <YMODEM_WaitForChar+0x3e>
            --uint32_tProcessTime;
 8000eb6:	683b      	ldr	r3, [r7, #0]
 8000eb8:	3b01      	subs	r3, #1
 8000eba:	603b      	str	r3, [r7, #0]
            uint32_tThisms = uwTick;
 8000ebc:	4b05      	ldr	r3, [pc, #20]	@ (8000ed4 <YMODEM_WaitForChar+0x50>)
 8000ebe:	681b      	ldr	r3, [r3, #0]
 8000ec0:	60fb      	str	r3, [r7, #12]
    while (uint32_tProcessTime) {
 8000ec2:	683b      	ldr	r3, [r7, #0]
 8000ec4:	2b00      	cmp	r3, #0
 8000ec6:	d1e9      	bne.n	8000e9c <YMODEM_WaitForChar+0x18>
        }
    }
    return (FALSE);
 8000ec8:	2300      	movs	r3, #0
}
 8000eca:	4618      	mov	r0, r3
 8000ecc:	3710      	adds	r7, #16
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	200007c0 	.word	0x200007c0

08000ed8 <ReceivePacket>:
  * @param  timeout
  * @retval HAL_OK: normally return
  *         HAL_BUSY: abort by user
  */
static HAL_StatusTypeDef ReceivePacket(uint8_t *p_data, uint32_t *p_length, uint32_t timeout)
{
 8000ed8:	b580      	push	{r7, lr}
 8000eda:	b088      	sub	sp, #32
 8000edc:	af00      	add	r7, sp, #0
 8000ede:	60f8      	str	r0, [r7, #12]
 8000ee0:	60b9      	str	r1, [r7, #8]
 8000ee2:	607a      	str	r2, [r7, #4]
  uint32_t crc;
  uint32_t packet_size = 0;
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	61fb      	str	r3, [r7, #28]
  HAL_StatusTypeDef status;
  uint8_t char1 = 0;
 8000ee8:	2300      	movs	r3, #0
 8000eea:	747b      	strb	r3, [r7, #17]
  #ifndef CRC16_F
  uint16_t temp_crc;
  #endif

  *p_length = 0;
 8000eec:	68bb      	ldr	r3, [r7, #8]
 8000eee:	2200      	movs	r2, #0
 8000ef0:	601a      	str	r2, [r3, #0]

  if (YMODEM_WaitForChar((uint8_t *)&char1, timeout) == TRUE) {
 8000ef2:	f107 0311 	add.w	r3, r7, #17
 8000ef6:	6879      	ldr	r1, [r7, #4]
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f7ff ffc3 	bl	8000e84 <YMODEM_WaitForChar>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b01      	cmp	r3, #1
 8000f02:	d106      	bne.n	8000f12 <ReceivePacket+0x3a>
    status = HAL_OK;
 8000f04:	2300      	movs	r3, #0
 8000f06:	76fb      	strb	r3, [r7, #27]
  } else {
    status = HAL_ERROR;
    return status;
  }

  if (status == HAL_OK)
 8000f08:	7efb      	ldrb	r3, [r7, #27]
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	f040 80bd 	bne.w	800108a <ReceivePacket+0x1b2>
 8000f10:	e003      	b.n	8000f1a <ReceivePacket+0x42>
    status = HAL_ERROR;
 8000f12:	2301      	movs	r3, #1
 8000f14:	76fb      	strb	r3, [r7, #27]
    return status;
 8000f16:	7efb      	ldrb	r3, [r7, #27]
 8000f18:	e0bb      	b.n	8001092 <ReceivePacket+0x1ba>
  {
    switch (char1)
 8000f1a:	7c7b      	ldrb	r3, [r7, #17]
 8000f1c:	2b61      	cmp	r3, #97	@ 0x61
 8000f1e:	d057      	beq.n	8000fd0 <ReceivePacket+0xf8>
 8000f20:	2b61      	cmp	r3, #97	@ 0x61
 8000f22:	dc58      	bgt.n	8000fd6 <ReceivePacket+0xfe>
 8000f24:	2b18      	cmp	r3, #24
 8000f26:	dc37      	bgt.n	8000f98 <ReceivePacket+0xc0>
 8000f28:	2b00      	cmp	r3, #0
 8000f2a:	dd54      	ble.n	8000fd6 <ReceivePacket+0xfe>
 8000f2c:	3b01      	subs	r3, #1
 8000f2e:	2b17      	cmp	r3, #23
 8000f30:	d851      	bhi.n	8000fd6 <ReceivePacket+0xfe>
 8000f32:	a201      	add	r2, pc, #4	@ (adr r2, 8000f38 <ReceivePacket+0x60>)
 8000f34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000f38:	08000f9f 	.word	0x08000f9f
 8000f3c:	08000fa5 	.word	0x08000fa5
 8000f40:	08000fd7 	.word	0x08000fd7
 8000f44:	08000fdd 	.word	0x08000fdd
 8000f48:	08000fd7 	.word	0x08000fd7
 8000f4c:	08000fd7 	.word	0x08000fd7
 8000f50:	08000fd7 	.word	0x08000fd7
 8000f54:	08000fd7 	.word	0x08000fd7
 8000f58:	08000fd7 	.word	0x08000fd7
 8000f5c:	08000fd7 	.word	0x08000fd7
 8000f60:	08000fd7 	.word	0x08000fd7
 8000f64:	08000fd7 	.word	0x08000fd7
 8000f68:	08000fd7 	.word	0x08000fd7
 8000f6c:	08000fd7 	.word	0x08000fd7
 8000f70:	08000fd7 	.word	0x08000fd7
 8000f74:	08000fd7 	.word	0x08000fd7
 8000f78:	08000fd7 	.word	0x08000fd7
 8000f7c:	08000fd7 	.word	0x08000fd7
 8000f80:	08000fd7 	.word	0x08000fd7
 8000f84:	08000fd7 	.word	0x08000fd7
 8000f88:	08000fd7 	.word	0x08000fd7
 8000f8c:	08000fd7 	.word	0x08000fd7
 8000f90:	08000fd7 	.word	0x08000fd7
 8000f94:	08000fad 	.word	0x08000fad
 8000f98:	2b41      	cmp	r3, #65	@ 0x41
 8000f9a:	d019      	beq.n	8000fd0 <ReceivePacket+0xf8>
 8000f9c:	e01b      	b.n	8000fd6 <ReceivePacket+0xfe>
    {
      case SOH:
        packet_size = PACKET_SIZE;
 8000f9e:	2380      	movs	r3, #128	@ 0x80
 8000fa0:	61fb      	str	r3, [r7, #28]
        break;
 8000fa2:	e01c      	b.n	8000fde <ReceivePacket+0x106>

      case STX:
        packet_size = PACKET_1K_SIZE;
 8000fa4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fa8:	61fb      	str	r3, [r7, #28]
        break;
 8000faa:	e018      	b.n	8000fde <ReceivePacket+0x106>

      case EOT:
        break;

      case CA:
        if ((YMODEM_WaitForChar((uint8_t *)&char1, timeout) == TRUE) && (char1 == CA)) {
 8000fac:	f107 0311 	add.w	r3, r7, #17
 8000fb0:	6879      	ldr	r1, [r7, #4]
 8000fb2:	4618      	mov	r0, r3
 8000fb4:	f7ff ff66 	bl	8000e84 <YMODEM_WaitForChar>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b01      	cmp	r3, #1
 8000fbc:	d105      	bne.n	8000fca <ReceivePacket+0xf2>
 8000fbe:	7c7b      	ldrb	r3, [r7, #17]
 8000fc0:	2b18      	cmp	r3, #24
 8000fc2:	d102      	bne.n	8000fca <ReceivePacket+0xf2>
          packet_size = 2;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61fb      	str	r3, [r7, #28]
        } else {
          status = HAL_ERROR;
        }
        break;
 8000fc8:	e009      	b.n	8000fde <ReceivePacket+0x106>
          status = HAL_ERROR;
 8000fca:	2301      	movs	r3, #1
 8000fcc:	76fb      	strb	r3, [r7, #27]
        break;
 8000fce:	e006      	b.n	8000fde <ReceivePacket+0x106>

      case ABORT1:
      case ABORT2:
        status = HAL_BUSY;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	76fb      	strb	r3, [r7, #27]
        break;
 8000fd4:	e003      	b.n	8000fde <ReceivePacket+0x106>

      default:
        status = HAL_ERROR;
 8000fd6:	2301      	movs	r3, #1
 8000fd8:	76fb      	strb	r3, [r7, #27]
        break;
 8000fda:	e000      	b.n	8000fde <ReceivePacket+0x106>
        break;
 8000fdc:	bf00      	nop
    }
    
    *p_data = char1;
 8000fde:	7c7a      	ldrb	r2, [r7, #17]
 8000fe0:	68fb      	ldr	r3, [r7, #12]
 8000fe2:	701a      	strb	r2, [r3, #0]

    if (packet_size >= PACKET_SIZE )
 8000fe4:	69fb      	ldr	r3, [r7, #28]
 8000fe6:	2b7f      	cmp	r3, #127	@ 0x7f
 8000fe8:	d94f      	bls.n	800108a <ReceivePacket+0x1b2>
    {
      #if 0
      status = HAL_UART_Receive(uart_handler, &p_data[PACKET_NUMBER_INDEX], packet_size + PACKET_OVERHEAD_SIZE, timeout);
      #else
      // Get Packet
      for (uint16_t cnt = 0; cnt < packet_size + PACKET_OVERHEAD_SIZE; cnt++) {
 8000fea:	2300      	movs	r3, #0
 8000fec:	833b      	strh	r3, [r7, #24]
 8000fee:	e010      	b.n	8001012 <ReceivePacket+0x13a>
          if (YMODEM_WaitForChar((uint8_t *)&p_data[cnt + PACKET_NUMBER_INDEX], timeout) != TRUE) {
 8000ff0:	8b3b      	ldrh	r3, [r7, #24]
 8000ff2:	3302      	adds	r3, #2
 8000ff4:	68fa      	ldr	r2, [r7, #12]
 8000ff6:	4413      	add	r3, r2
 8000ff8:	6879      	ldr	r1, [r7, #4]
 8000ffa:	4618      	mov	r0, r3
 8000ffc:	f7ff ff42 	bl	8000e84 <YMODEM_WaitForChar>
 8001000:	4603      	mov	r3, r0
 8001002:	2b01      	cmp	r3, #1
 8001004:	d002      	beq.n	800100c <ReceivePacket+0x134>
            status = HAL_ERROR;
 8001006:	2301      	movs	r3, #1
 8001008:	76fb      	strb	r3, [r7, #27]
            break;
 800100a:	e007      	b.n	800101c <ReceivePacket+0x144>
      for (uint16_t cnt = 0; cnt < packet_size + PACKET_OVERHEAD_SIZE; cnt++) {
 800100c:	8b3b      	ldrh	r3, [r7, #24]
 800100e:	3301      	adds	r3, #1
 8001010:	833b      	strh	r3, [r7, #24]
 8001012:	8b3a      	ldrh	r2, [r7, #24]
 8001014:	69fb      	ldr	r3, [r7, #28]
 8001016:	3304      	adds	r3, #4
 8001018:	429a      	cmp	r2, r3
 800101a:	d3e9      	bcc.n	8000ff0 <ReceivePacket+0x118>
          }
      }
      status = HAL_OK;
 800101c:	2300      	movs	r3, #0
 800101e:	76fb      	strb	r3, [r7, #27]
      #endif

      /* Simple packet sanity check */
      if (status == HAL_OK )
 8001020:	7efb      	ldrb	r3, [r7, #27]
 8001022:	2b00      	cmp	r3, #0
 8001024:	d12f      	bne.n	8001086 <ReceivePacket+0x1ae>
      {
        if (p_data[PACKET_NUMBER_INDEX] != ((p_data[PACKET_CNUMBER_INDEX]) ^ NEGATIVE_BYTE))
 8001026:	68fb      	ldr	r3, [r7, #12]
 8001028:	3302      	adds	r3, #2
 800102a:	781a      	ldrb	r2, [r3, #0]
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	3303      	adds	r3, #3
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	43db      	mvns	r3, r3
 8001034:	b2db      	uxtb	r3, r3
 8001036:	429a      	cmp	r2, r3
 8001038:	d004      	beq.n	8001044 <ReceivePacket+0x16c>
        {
          packet_size = 0;
 800103a:	2300      	movs	r3, #0
 800103c:	61fb      	str	r3, [r7, #28]
          status = HAL_ERROR;
 800103e:	2301      	movs	r3, #1
 8001040:	76fb      	strb	r3, [r7, #27]
 8001042:	e022      	b.n	800108a <ReceivePacket+0x1b2>
        }
        else
        {
          /* Check packet CRC */
          crc  = p_data[ packet_size + PACKET_DATA_INDEX ] << 8;
 8001044:	69fb      	ldr	r3, [r7, #28]
 8001046:	3304      	adds	r3, #4
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	4413      	add	r3, r2
 800104c:	781b      	ldrb	r3, [r3, #0]
 800104e:	021b      	lsls	r3, r3, #8
 8001050:	617b      	str	r3, [r7, #20]
          crc += p_data[ packet_size + PACKET_DATA_INDEX + 1 ];
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3305      	adds	r3, #5
 8001056:	68fa      	ldr	r2, [r7, #12]
 8001058:	4413      	add	r3, r2
 800105a:	781b      	ldrb	r3, [r3, #0]
 800105c:	461a      	mov	r2, r3
 800105e:	697b      	ldr	r3, [r7, #20]
 8001060:	4413      	add	r3, r2
 8001062:	617b      	str	r3, [r7, #20]
          {
            packet_size = 0;
            status = HAL_ERROR;
          }
          #else
          temp_crc = Cal_CRC16(&p_data[PACKET_DATA_INDEX], packet_size);
 8001064:	68fb      	ldr	r3, [r7, #12]
 8001066:	3304      	adds	r3, #4
 8001068:	69f9      	ldr	r1, [r7, #28]
 800106a:	4618      	mov	r0, r3
 800106c:	f000 f84a 	bl	8001104 <Cal_CRC16>
 8001070:	4603      	mov	r3, r0
 8001072:	827b      	strh	r3, [r7, #18]
          if (temp_crc != crc) {
 8001074:	8a7b      	ldrh	r3, [r7, #18]
 8001076:	697a      	ldr	r2, [r7, #20]
 8001078:	429a      	cmp	r2, r3
 800107a:	d006      	beq.n	800108a <ReceivePacket+0x1b2>
            packet_size = 0;
 800107c:	2300      	movs	r3, #0
 800107e:	61fb      	str	r3, [r7, #28]
            status = HAL_ERROR;
 8001080:	2301      	movs	r3, #1
 8001082:	76fb      	strb	r3, [r7, #27]
 8001084:	e001      	b.n	800108a <ReceivePacket+0x1b2>
          #endif
        }
      }
      else
      {
        packet_size = 0;
 8001086:	2300      	movs	r3, #0
 8001088:	61fb      	str	r3, [r7, #28]
      }
    }
  }
  *p_length = packet_size;
 800108a:	68bb      	ldr	r3, [r7, #8]
 800108c:	69fa      	ldr	r2, [r7, #28]
 800108e:	601a      	str	r2, [r3, #0]
  return status;
 8001090:	7efb      	ldrb	r3, [r7, #27]
}
 8001092:	4618      	mov	r0, r3
 8001094:	3720      	adds	r7, #32
 8001096:	46bd      	mov	sp, r7
 8001098:	bd80      	pop	{r7, pc}
 800109a:	bf00      	nop

0800109c <UpdateCRC16>:
  * @param  crc_in input value
  * @param  input byte
  * @retval None
  */
uint16_t UpdateCRC16(uint16_t crc_in, uint8_t byte)
{
 800109c:	b480      	push	{r7}
 800109e:	b085      	sub	sp, #20
 80010a0:	af00      	add	r7, sp, #0
 80010a2:	4603      	mov	r3, r0
 80010a4:	460a      	mov	r2, r1
 80010a6:	80fb      	strh	r3, [r7, #6]
 80010a8:	4613      	mov	r3, r2
 80010aa:	717b      	strb	r3, [r7, #5]
  uint32_t crc = crc_in;
 80010ac:	88fb      	ldrh	r3, [r7, #6]
 80010ae:	60fb      	str	r3, [r7, #12]
  uint32_t in = byte | 0x100;
 80010b0:	797b      	ldrb	r3, [r7, #5]
 80010b2:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80010b6:	60bb      	str	r3, [r7, #8]

  do
  {
    crc <<= 1;
 80010b8:	68fb      	ldr	r3, [r7, #12]
 80010ba:	005b      	lsls	r3, r3, #1
 80010bc:	60fb      	str	r3, [r7, #12]
    in <<= 1;
 80010be:	68bb      	ldr	r3, [r7, #8]
 80010c0:	005b      	lsls	r3, r3, #1
 80010c2:	60bb      	str	r3, [r7, #8]
    if(in & 0x100)
 80010c4:	68bb      	ldr	r3, [r7, #8]
 80010c6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d002      	beq.n	80010d4 <UpdateCRC16+0x38>
      ++crc;
 80010ce:	68fb      	ldr	r3, [r7, #12]
 80010d0:	3301      	adds	r3, #1
 80010d2:	60fb      	str	r3, [r7, #12]
    if(crc & 0x10000)
 80010d4:	68fb      	ldr	r3, [r7, #12]
 80010d6:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010da:	2b00      	cmp	r3, #0
 80010dc:	d005      	beq.n	80010ea <UpdateCRC16+0x4e>
      crc ^= 0x1021;
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	f483 5381 	eor.w	r3, r3, #4128	@ 0x1020
 80010e4:	f083 0301 	eor.w	r3, r3, #1
 80010e8:	60fb      	str	r3, [r7, #12]
  }

  while(!(in & 0x10000));
 80010ea:	68bb      	ldr	r3, [r7, #8]
 80010ec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d0e1      	beq.n	80010b8 <UpdateCRC16+0x1c>

  return crc & 0xffffu;
 80010f4:	68fb      	ldr	r3, [r7, #12]
 80010f6:	b29b      	uxth	r3, r3
}
 80010f8:	4618      	mov	r0, r3
 80010fa:	3714      	adds	r7, #20
 80010fc:	46bd      	mov	sp, r7
 80010fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001102:	4770      	bx	lr

08001104 <Cal_CRC16>:
  * @param  data
  * @param  length
  * @retval None
  */
uint16_t Cal_CRC16(const uint8_t* p_data, uint32_t size)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	b084      	sub	sp, #16
 8001108:	af00      	add	r7, sp, #0
 800110a:	6078      	str	r0, [r7, #4]
 800110c:	6039      	str	r1, [r7, #0]
  uint32_t crc = 0;
 800110e:	2300      	movs	r3, #0
 8001110:	60fb      	str	r3, [r7, #12]
  const uint8_t* dataEnd = p_data+size;
 8001112:	687a      	ldr	r2, [r7, #4]
 8001114:	683b      	ldr	r3, [r7, #0]
 8001116:	4413      	add	r3, r2
 8001118:	60bb      	str	r3, [r7, #8]

  while(p_data < dataEnd)
 800111a:	e00a      	b.n	8001132 <Cal_CRC16+0x2e>
    crc = UpdateCRC16(crc, *p_data++);
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	b298      	uxth	r0, r3
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	1c5a      	adds	r2, r3, #1
 8001124:	607a      	str	r2, [r7, #4]
 8001126:	781b      	ldrb	r3, [r3, #0]
 8001128:	4619      	mov	r1, r3
 800112a:	f7ff ffb7 	bl	800109c <UpdateCRC16>
 800112e:	4603      	mov	r3, r0
 8001130:	60fb      	str	r3, [r7, #12]
  while(p_data < dataEnd)
 8001132:	687a      	ldr	r2, [r7, #4]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	429a      	cmp	r2, r3
 8001138:	d3f0      	bcc.n	800111c <Cal_CRC16+0x18>

  crc = UpdateCRC16(crc, 0);
 800113a:	68fb      	ldr	r3, [r7, #12]
 800113c:	b29b      	uxth	r3, r3
 800113e:	2100      	movs	r1, #0
 8001140:	4618      	mov	r0, r3
 8001142:	f7ff ffab 	bl	800109c <UpdateCRC16>
 8001146:	4603      	mov	r3, r0
 8001148:	60fb      	str	r3, [r7, #12]
  crc = UpdateCRC16(crc, 0);
 800114a:	68fb      	ldr	r3, [r7, #12]
 800114c:	b29b      	uxth	r3, r3
 800114e:	2100      	movs	r1, #0
 8001150:	4618      	mov	r0, r3
 8001152:	f7ff ffa3 	bl	800109c <UpdateCRC16>
 8001156:	4603      	mov	r3, r0
 8001158:	60fb      	str	r3, [r7, #12]

  return crc&0xffffu;
 800115a:	68fb      	ldr	r3, [r7, #12]
 800115c:	b29b      	uxth	r3, r3
}
 800115e:	4618      	mov	r0, r3
 8001160:	3710      	adds	r7, #16
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
	...

08001168 <Ymodem_Receive>:
  * @brief  Receive a file using the ymodem protocol with CRC16.
  * @param  p_size The size of the file.
  * @retval COM_StatusTypeDef result of reception/programming
  */
COM_StatusTypeDef Ymodem_Receive ( uint32_t *p_size )
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b092      	sub	sp, #72	@ 0x48
 800116c:	af00      	add	r7, sp, #0
 800116e:	6078      	str	r0, [r7, #4]
  uint32_t i, packet_length, session_done = 0, file_done, errors = 0, session_begin = 0;
 8001170:	2300      	movs	r3, #0
 8001172:	643b      	str	r3, [r7, #64]	@ 0x40
 8001174:	2300      	movs	r3, #0
 8001176:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001178:	2300      	movs	r3, #0
 800117a:	637b      	str	r3, [r7, #52]	@ 0x34
  uint32_t flashdestination, ramsource, filesize;
  uint8_t *file_ptr;
  uint8_t file_size[FILE_SIZE_LENGTH], packets_received;
  COM_StatusTypeDef result = COM_OK;
 800117c:	2300      	movs	r3, #0
 800117e:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a

  /* Initialize flashdestination variable */
  flashdestination = APPLICATION_ADDRESS;
 8001182:	4b7f      	ldr	r3, [pc, #508]	@ (8001380 <Ymodem_Receive+0x218>)
 8001184:	633b      	str	r3, [r7, #48]	@ 0x30

  while ((session_done == 0) && (result == COM_OK))
 8001186:	e0ec      	b.n	8001362 <Ymodem_Receive+0x1fa>
  {
    packets_received = 0;
 8001188:	2300      	movs	r3, #0
 800118a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    file_done = 0;
 800118e:	2300      	movs	r3, #0
 8001190:	63fb      	str	r3, [r7, #60]	@ 0x3c
    while ((file_done == 0) && (result == COM_OK))
 8001192:	e0de      	b.n	8001352 <Ymodem_Receive+0x1ea>
    {
      switch (ReceivePacket(aPacketData, &packet_length, DOWNLOAD_TIMEOUT_SEC))
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 800119c:	4619      	mov	r1, r3
 800119e:	4879      	ldr	r0, [pc, #484]	@ (8001384 <Ymodem_Receive+0x21c>)
 80011a0:	f7ff fe9a 	bl	8000ed8 <ReceivePacket>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d003      	beq.n	80011b2 <Ymodem_Receive+0x4a>
 80011aa:	2b02      	cmp	r3, #2
 80011ac:	f000 80b3 	beq.w	8001316 <Ymodem_Receive+0x1ae>
 80011b0:	e0bb      	b.n	800132a <Ymodem_Receive+0x1c2>
      {
        case HAL_OK:
          errors = 0;
 80011b2:	2300      	movs	r3, #0
 80011b4:	63bb      	str	r3, [r7, #56]	@ 0x38
          switch (packet_length)
 80011b6:	6a3b      	ldr	r3, [r7, #32]
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d008      	beq.n	80011ce <Ymodem_Receive+0x66>
 80011bc:	2b02      	cmp	r3, #2
 80011be:	d10c      	bne.n	80011da <Ymodem_Receive+0x72>
          {
            case 2: /* Abort by sender */              
              Serial_PutByte(ACK);
 80011c0:	2006      	movs	r0, #6
 80011c2:	f7ff fb87 	bl	80008d4 <Serial_PutByte>
              result = COM_ABORT;
 80011c6:	2302      	movs	r3, #2
 80011c8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
              break;
 80011cc:	e0a2      	b.n	8001314 <Ymodem_Receive+0x1ac>

            case 0: /* End of transmission */              
              Serial_PutByte(ACK);
 80011ce:	2006      	movs	r0, #6
 80011d0:	f7ff fb80 	bl	80008d4 <Serial_PutByte>
              file_done = 1;
 80011d4:	2301      	movs	r3, #1
 80011d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
              break;
 80011d8:	e09c      	b.n	8001314 <Ymodem_Receive+0x1ac>

            default: /* Normal packet */              
              if (aPacketData[PACKET_NUMBER_INDEX] != packets_received)
 80011da:	4b6a      	ldr	r3, [pc, #424]	@ (8001384 <Ymodem_Receive+0x21c>)
 80011dc:	789b      	ldrb	r3, [r3, #2]
 80011de:	f897 202b 	ldrb.w	r2, [r7, #43]	@ 0x2b
 80011e2:	429a      	cmp	r2, r3
 80011e4:	d003      	beq.n	80011ee <Ymodem_Receive+0x86>
              {
                Serial_PutByte(NAK);
 80011e6:	2015      	movs	r0, #21
 80011e8:	f7ff fb74 	bl	80008d4 <Serial_PutByte>
                  }
                }
                packets_received ++;
                session_begin = 1;
              }
              break;
 80011ec:	e091      	b.n	8001312 <Ymodem_Receive+0x1aa>
                if (packets_received == 0)
 80011ee:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 80011f2:	2b00      	cmp	r3, #0
 80011f4:	d169      	bne.n	80012ca <Ymodem_Receive+0x162>
                  if (aPacketData[PACKET_DATA_INDEX] != 0)
 80011f6:	4b63      	ldr	r3, [pc, #396]	@ (8001384 <Ymodem_Receive+0x21c>)
 80011f8:	791b      	ldrb	r3, [r3, #4]
 80011fa:	2b00      	cmp	r3, #0
 80011fc:	d05d      	beq.n	80012ba <Ymodem_Receive+0x152>
                    i = 0;
 80011fe:	2300      	movs	r3, #0
 8001200:	647b      	str	r3, [r7, #68]	@ 0x44
                    file_ptr = aPacketData + PACKET_DATA_INDEX;
 8001202:	4b61      	ldr	r3, [pc, #388]	@ (8001388 <Ymodem_Receive+0x220>)
 8001204:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 8001206:	e008      	b.n	800121a <Ymodem_Receive+0xb2>
                      aFileName[i++] = *file_ptr++;
 8001208:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800120a:	1c53      	adds	r3, r2, #1
 800120c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800120e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001210:	1c59      	adds	r1, r3, #1
 8001212:	6479      	str	r1, [r7, #68]	@ 0x44
 8001214:	7811      	ldrb	r1, [r2, #0]
 8001216:	4a5d      	ldr	r2, [pc, #372]	@ (800138c <Ymodem_Receive+0x224>)
 8001218:	54d1      	strb	r1, [r2, r3]
                    while ( (*file_ptr != 0) && (i < FILE_NAME_LENGTH))
 800121a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	2b00      	cmp	r3, #0
 8001220:	d002      	beq.n	8001228 <Ymodem_Receive+0xc0>
 8001222:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001224:	2b3f      	cmp	r3, #63	@ 0x3f
 8001226:	d9ef      	bls.n	8001208 <Ymodem_Receive+0xa0>
                    aFileName[i++] = '\0';
 8001228:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800122a:	1c5a      	adds	r2, r3, #1
 800122c:	647a      	str	r2, [r7, #68]	@ 0x44
 800122e:	4a57      	ldr	r2, [pc, #348]	@ (800138c <Ymodem_Receive+0x224>)
 8001230:	2100      	movs	r1, #0
 8001232:	54d1      	strb	r1, [r2, r3]
                    i = 0;
 8001234:	2300      	movs	r3, #0
 8001236:	647b      	str	r3, [r7, #68]	@ 0x44
                    file_ptr ++;
 8001238:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800123a:	3301      	adds	r3, #1
 800123c:	62fb      	str	r3, [r7, #44]	@ 0x2c
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 800123e:	e00a      	b.n	8001256 <Ymodem_Receive+0xee>
                      file_size[i++] = *file_ptr++;
 8001240:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8001242:	1c53      	adds	r3, r2, #1
 8001244:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001246:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001248:	1c59      	adds	r1, r3, #1
 800124a:	6479      	str	r1, [r7, #68]	@ 0x44
 800124c:	7812      	ldrb	r2, [r2, #0]
 800124e:	3348      	adds	r3, #72	@ 0x48
 8001250:	443b      	add	r3, r7
 8001252:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    while ( (*file_ptr != ' ') && (i < FILE_SIZE_LENGTH))
 8001256:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001258:	781b      	ldrb	r3, [r3, #0]
 800125a:	2b20      	cmp	r3, #32
 800125c:	d002      	beq.n	8001264 <Ymodem_Receive+0xfc>
 800125e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001260:	2b0f      	cmp	r3, #15
 8001262:	d9ed      	bls.n	8001240 <Ymodem_Receive+0xd8>
                    file_size[i++] = '\0';
 8001264:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001266:	1c5a      	adds	r2, r3, #1
 8001268:	647a      	str	r2, [r7, #68]	@ 0x44
 800126a:	3348      	adds	r3, #72	@ 0x48
 800126c:	443b      	add	r3, r7
 800126e:	2200      	movs	r2, #0
 8001270:	f803 2c3c 	strb.w	r2, [r3, #-60]
                    Str2Int(file_size, &filesize);
 8001274:	f107 021c 	add.w	r2, r7, #28
 8001278:	f107 030c 	add.w	r3, r7, #12
 800127c:	4611      	mov	r1, r2
 800127e:	4618      	mov	r0, r3
 8001280:	f7ff fa16 	bl	80006b0 <Str2Int>
                    if (*p_size > (USER_FLASH_SIZE + 1))
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	681b      	ldr	r3, [r3, #0]
 8001288:	f5b3 4f70 	cmp.w	r3, #61440	@ 0xf000
 800128c:	d908      	bls.n	80012a0 <Ymodem_Receive+0x138>
                      Serial_PutByte(CA);
 800128e:	2018      	movs	r0, #24
 8001290:	f7ff fb20 	bl	80008d4 <Serial_PutByte>
                      Serial_PutByte(CA);
 8001294:	2018      	movs	r0, #24
 8001296:	f7ff fb1d 	bl	80008d4 <Serial_PutByte>
                      result = COM_LIMIT;
 800129a:	2305      	movs	r3, #5
 800129c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                    FLASH_If_Erase(APPLICATION_ADDRESS);
 80012a0:	4837      	ldr	r0, [pc, #220]	@ (8001380 <Ymodem_Receive+0x218>)
 80012a2:	f7ff fb43 	bl	800092c <FLASH_If_Erase>
                    *p_size = filesize;
 80012a6:	69fa      	ldr	r2, [r7, #28]
 80012a8:	687b      	ldr	r3, [r7, #4]
 80012aa:	601a      	str	r2, [r3, #0]
                    Serial_PutByte(ACK);
 80012ac:	2006      	movs	r0, #6
 80012ae:	f7ff fb11 	bl	80008d4 <Serial_PutByte>
                    Serial_PutByte(CRC16);
 80012b2:	2043      	movs	r0, #67	@ 0x43
 80012b4:	f7ff fb0e 	bl	80008d4 <Serial_PutByte>
 80012b8:	e024      	b.n	8001304 <Ymodem_Receive+0x19c>
                    Serial_PutByte(ACK);
 80012ba:	2006      	movs	r0, #6
 80012bc:	f7ff fb0a 	bl	80008d4 <Serial_PutByte>
                    file_done = 1;
 80012c0:	2301      	movs	r3, #1
 80012c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
                    session_done = 1;
 80012c4:	2301      	movs	r3, #1
 80012c6:	643b      	str	r3, [r7, #64]	@ 0x40
                    break;
 80012c8:	e024      	b.n	8001314 <Ymodem_Receive+0x1ac>
                  ramsource = (uint32_t) & aPacketData[PACKET_DATA_INDEX];
 80012ca:	4b2f      	ldr	r3, [pc, #188]	@ (8001388 <Ymodem_Receive+0x220>)
 80012cc:	627b      	str	r3, [r7, #36]	@ 0x24
                  if (FLASH_If_Write(flashdestination, (uint32_t*) ramsource, packet_length/4) == FLASHIF_OK)
 80012ce:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80012d0:	6a3b      	ldr	r3, [r7, #32]
 80012d2:	089b      	lsrs	r3, r3, #2
 80012d4:	461a      	mov	r2, r3
 80012d6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80012d8:	f7ff fb5c 	bl	8000994 <FLASH_If_Write>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d107      	bne.n	80012f2 <Ymodem_Receive+0x18a>
                    flashdestination += packet_length;
 80012e2:	6a3b      	ldr	r3, [r7, #32]
 80012e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80012e6:	4413      	add	r3, r2
 80012e8:	633b      	str	r3, [r7, #48]	@ 0x30
                    Serial_PutByte(ACK);
 80012ea:	2006      	movs	r0, #6
 80012ec:	f7ff faf2 	bl	80008d4 <Serial_PutByte>
 80012f0:	e008      	b.n	8001304 <Ymodem_Receive+0x19c>
                    Serial_PutByte(CA);
 80012f2:	2018      	movs	r0, #24
 80012f4:	f7ff faee 	bl	80008d4 <Serial_PutByte>
                    Serial_PutByte(CA);
 80012f8:	2018      	movs	r0, #24
 80012fa:	f7ff faeb 	bl	80008d4 <Serial_PutByte>
                    result = COM_DATA;
 80012fe:	2304      	movs	r3, #4
 8001300:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
                packets_received ++;
 8001304:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8001308:	3301      	adds	r3, #1
 800130a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                session_begin = 1;
 800130e:	2301      	movs	r3, #1
 8001310:	637b      	str	r3, [r7, #52]	@ 0x34
              break;
 8001312:	bf00      	nop
          } // sub switch-case end
          break;
 8001314:	e01d      	b.n	8001352 <Ymodem_Receive+0x1ea>

        case HAL_BUSY: /* Abort actually */
          Serial_PutByte(CA);
 8001316:	2018      	movs	r0, #24
 8001318:	f7ff fadc 	bl	80008d4 <Serial_PutByte>
          Serial_PutByte(CA);
 800131c:	2018      	movs	r0, #24
 800131e:	f7ff fad9 	bl	80008d4 <Serial_PutByte>
          result = COM_ABORT;
 8001322:	2302      	movs	r3, #2
 8001324:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
          break;
 8001328:	e013      	b.n	8001352 <Ymodem_Receive+0x1ea>
        case HAL_TIMEOUT:
          //DBG_LED(1100);
          //break;

        default: 
          if (session_begin > 0) {
 800132a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800132c:	2b00      	cmp	r3, #0
 800132e:	d002      	beq.n	8001336 <Ymodem_Receive+0x1ce>
            errors ++;
 8001330:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001332:	3301      	adds	r3, #1
 8001334:	63bb      	str	r3, [r7, #56]	@ 0x38
          }

          if (errors > MAX_ERRORS) {
 8001336:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001338:	2b05      	cmp	r3, #5
 800133a:	d906      	bls.n	800134a <Ymodem_Receive+0x1e2>
            /* Abort communication */
            Serial_PutByte(CA);
 800133c:	2018      	movs	r0, #24
 800133e:	f7ff fac9 	bl	80008d4 <Serial_PutByte>
            Serial_PutByte(CA);
 8001342:	2018      	movs	r0, #24
 8001344:	f7ff fac6 	bl	80008d4 <Serial_PutByte>
          } else {
            Serial_PutByte(CRC16); /* Ask for a packet */
            //Serial_PutByte(ACK); //BFM
          }
          break;
 8001348:	e002      	b.n	8001350 <Ymodem_Receive+0x1e8>
            Serial_PutByte(CRC16); /* Ask for a packet */
 800134a:	2043      	movs	r0, #67	@ 0x43
 800134c:	f7ff fac2 	bl	80008d4 <Serial_PutByte>
          break;
 8001350:	bf00      	nop
    while ((file_done == 0) && (result == COM_OK))
 8001352:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001354:	2b00      	cmp	r3, #0
 8001356:	d104      	bne.n	8001362 <Ymodem_Receive+0x1fa>
 8001358:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800135c:	2b00      	cmp	r3, #0
 800135e:	f43f af19 	beq.w	8001194 <Ymodem_Receive+0x2c>
  while ((session_done == 0) && (result == COM_OK))
 8001362:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001364:	2b00      	cmp	r3, #0
 8001366:	d104      	bne.n	8001372 <Ymodem_Receive+0x20a>
 8001368:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 800136c:	2b00      	cmp	r3, #0
 800136e:	f43f af0b 	beq.w	8001188 <Ymodem_Receive+0x20>
      } // main switch-case end
    }
  }
  return result;
 8001372:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8001376:	4618      	mov	r0, r3
 8001378:	3748      	adds	r7, #72	@ 0x48
 800137a:	46bd      	mov	sp, r7
 800137c:	bd80      	pop	{r7, pc}
 800137e:	bf00      	nop
 8001380:	08011000 	.word	0x08011000
 8001384:	200000bc 	.word	0x200000bc
 8001388:	200000c0 	.word	0x200000c0
 800138c:	200004c4 	.word	0x200004c4

08001390 <_write>:
//----------------------------------------
// retarget
//----------------------------------------
extern UART_HandleTypeDef hlpuart1;
int _write(int32_t file, uint8_t *ptr, int32_t len)
{
 8001390:	b580      	push	{r7, lr}
 8001392:	b084      	sub	sp, #16
 8001394:	af00      	add	r7, sp, #0
 8001396:	60f8      	str	r0, [r7, #12]
 8001398:	60b9      	str	r1, [r7, #8]
 800139a:	607a      	str	r2, [r7, #4]
    if ( HAL_UART_Transmit(&hlpuart1, ptr, len, len) == HAL_OK ) return len;
 800139c:	687b      	ldr	r3, [r7, #4]
 800139e:	b29a      	uxth	r2, r3
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	68b9      	ldr	r1, [r7, #8]
 80013a4:	4806      	ldr	r0, [pc, #24]	@ (80013c0 <_write+0x30>)
 80013a6:	f004 fbe9 	bl	8005b7c <HAL_UART_Transmit>
 80013aa:	4603      	mov	r3, r0
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d101      	bne.n	80013b4 <_write+0x24>
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	e000      	b.n	80013b6 <_write+0x26>
    else return 0;
 80013b4:	2300      	movs	r3, #0
}
 80013b6:	4618      	mov	r0, r3
 80013b8:	3710      	adds	r7, #16
 80013ba:	46bd      	mov	sp, r7
 80013bc:	bd80      	pop	{r7, pc}
 80013be:	bf00      	nop
 80013c0:	2000072c 	.word	0x2000072c

080013c4 <Convert_Char>:
//----------------------------------------
// CLI UART CALLBACK for stm32f
//----------------------------------------
/* USER CODE BEGIN 1 */
void Convert_Char(uint8_t *byte)
{
 80013c4:	b480      	push	{r7}
 80013c6:	b083      	sub	sp, #12
 80013c8:	af00      	add	r7, sp, #0
 80013ca:	6078      	str	r0, [r7, #4]
    #if 1 // LOW to UP
    if ((*byte >= LOWER_A) && (*byte <= LOWER_Z)) {
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	781b      	ldrb	r3, [r3, #0]
 80013d0:	2b60      	cmp	r3, #96	@ 0x60
 80013d2:	d909      	bls.n	80013e8 <Convert_Char+0x24>
 80013d4:	687b      	ldr	r3, [r7, #4]
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	2b7a      	cmp	r3, #122	@ 0x7a
 80013da:	d805      	bhi.n	80013e8 <Convert_Char+0x24>
        *byte -= CONVERT_CHAR_OFFSET;
 80013dc:	687b      	ldr	r3, [r7, #4]
 80013de:	781b      	ldrb	r3, [r3, #0]
 80013e0:	3b20      	subs	r3, #32
 80013e2:	b2da      	uxtb	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	701a      	strb	r2, [r3, #0]
    #else
    if ((*byte >= UPPER_A) && (*byte <= UPPER_Z)) {
        *byte += CONVERT_CHAR_OFFSET;
    }
    #endif
}
 80013e8:	bf00      	nop
 80013ea:	370c      	adds	r7, #12
 80013ec:	46bd      	mov	sp, r7
 80013ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013f2:	4770      	bx	lr

080013f4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
    if(huart->Instance == LPUART1) {
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a2c      	ldr	r2, [pc, #176]	@ (80014b4 <HAL_UART_RxCpltCallback+0xc0>)
 8001402:	4293      	cmp	r3, r2
 8001404:	d151      	bne.n	80014aa <HAL_UART_RxCpltCallback+0xb6>
        if (uart_rx_byte == ASCII_LF || uart_rx_byte == ASCII_CR || uart_rx_byte == ASTERISK) {
 8001406:	4b2c      	ldr	r3, [pc, #176]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 8001408:	781b      	ldrb	r3, [r3, #0]
 800140a:	2b0a      	cmp	r3, #10
 800140c:	d007      	beq.n	800141e <HAL_UART_RxCpltCallback+0x2a>
 800140e:	4b2a      	ldr	r3, [pc, #168]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 8001410:	781b      	ldrb	r3, [r3, #0]
 8001412:	2b0d      	cmp	r3, #13
 8001414:	d003      	beq.n	800141e <HAL_UART_RxCpltCallback+0x2a>
 8001416:	4b28      	ldr	r3, [pc, #160]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	2b2a      	cmp	r3, #42	@ 0x2a
 800141c:	d104      	bne.n	8001428 <HAL_UART_RxCpltCallback+0x34>
            cli.rx_done  = CLI_READY;
 800141e:	4b27      	ldr	r3, [pc, #156]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 8001420:	2201      	movs	r2, #1
 8001422:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
 8001426:	e03b      	b.n	80014a0 <HAL_UART_RxCpltCallback+0xac>
        } else if (uart_rx_byte == ASCII_BACKSPACE || uart_rx_byte == ASCII_DEL) {
 8001428:	4b23      	ldr	r3, [pc, #140]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 800142a:	781b      	ldrb	r3, [r3, #0]
 800142c:	2b08      	cmp	r3, #8
 800142e:	d003      	beq.n	8001438 <HAL_UART_RxCpltCallback+0x44>
 8001430:	4b21      	ldr	r3, [pc, #132]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 8001432:	781b      	ldrb	r3, [r3, #0]
 8001434:	2b7f      	cmp	r3, #127	@ 0x7f
 8001436:	d119      	bne.n	800146c <HAL_UART_RxCpltCallback+0x78>
            if (cli.rx_index > 0) {
 8001438:	4b20      	ldr	r3, [pc, #128]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 800143a:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 800143e:	2b00      	cmp	r3, #0
 8001440:	d02e      	beq.n	80014a0 <HAL_UART_RxCpltCallback+0xac>
                cli.buffer[--cli.rx_index] = 0;
 8001442:	4b1e      	ldr	r3, [pc, #120]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 8001444:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001448:	3b01      	subs	r3, #1
 800144a:	b2da      	uxtb	r2, r3
 800144c:	4b1b      	ldr	r3, [pc, #108]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 800144e:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
 8001452:	4b1a      	ldr	r3, [pc, #104]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 8001454:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001458:	461a      	mov	r2, r3
 800145a:	4b18      	ldr	r3, [pc, #96]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 800145c:	2100      	movs	r1, #0
 800145e:	5499      	strb	r1, [r3, r2]
                printf("%c %c", ASCII_BACKSPACE, ASCII_BACKSPACE);
 8001460:	2208      	movs	r2, #8
 8001462:	2108      	movs	r1, #8
 8001464:	4816      	ldr	r0, [pc, #88]	@ (80014c0 <HAL_UART_RxCpltCallback+0xcc>)
 8001466:	f008 f85b 	bl	8009520 <iprintf>
            if (cli.rx_index > 0) {
 800146a:	e019      	b.n	80014a0 <HAL_UART_RxCpltCallback+0xac>
            }
        } else {
            Convert_Char(&uart_rx_byte);
 800146c:	4812      	ldr	r0, [pc, #72]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 800146e:	f7ff ffa9 	bl	80013c4 <Convert_Char>
            cli.buffer[cli.rx_index] = uart_rx_byte;
 8001472:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 8001474:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001478:	461a      	mov	r2, r3
 800147a:	4b0f      	ldr	r3, [pc, #60]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 800147c:	7819      	ldrb	r1, [r3, #0]
 800147e:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 8001480:	5499      	strb	r1, [r3, r2]
            cli.rx_index = (cli.rx_index + 1) % UART_BUF_MAX;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 8001484:	f893 3080 	ldrb.w	r3, [r3, #128]	@ 0x80
 8001488:	3301      	adds	r3, #1
 800148a:	425a      	negs	r2, r3
 800148c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001490:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8001494:	bf58      	it	pl
 8001496:	4253      	negpl	r3, r2
 8001498:	b2da      	uxtb	r2, r3
 800149a:	4b08      	ldr	r3, [pc, #32]	@ (80014bc <HAL_UART_RxCpltCallback+0xc8>)
 800149c:	f883 2080 	strb.w	r2, [r3, #128]	@ 0x80
        }
        // uart rxne pending clear
        HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 80014a0:	2201      	movs	r2, #1
 80014a2:	4905      	ldr	r1, [pc, #20]	@ (80014b8 <HAL_UART_RxCpltCallback+0xc4>)
 80014a4:	4807      	ldr	r0, [pc, #28]	@ (80014c4 <HAL_UART_RxCpltCallback+0xd0>)
 80014a6:	f004 fbf7 	bl	8005c98 <HAL_UART_Receive_IT>
    }
}
 80014aa:	bf00      	nop
 80014ac:	3708      	adds	r7, #8
 80014ae:	46bd      	mov	sp, r7
 80014b0:	bd80      	pop	{r7, pc}
 80014b2:	bf00      	nop
 80014b4:	40008000 	.word	0x40008000
 80014b8:	20000504 	.word	0x20000504
 80014bc:	20000508 	.word	0x20000508
 80014c0:	0800a5ec 	.word	0x0800a5ec
 80014c4:	2000072c 	.word	0x2000072c

080014c8 <CLI_Init>:
//----------------------------------------


void CLI_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
    setbuf(stdin, NULL);
 80014cc:	4b0e      	ldr	r3, [pc, #56]	@ (8001508 <CLI_Init+0x40>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	685b      	ldr	r3, [r3, #4]
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f008 f893 	bl	8009600 <setbuf>
    setbuf(stdout,NULL);
 80014da:	4b0b      	ldr	r3, [pc, #44]	@ (8001508 <CLI_Init+0x40>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	689b      	ldr	r3, [r3, #8]
 80014e0:	2100      	movs	r1, #0
 80014e2:	4618      	mov	r0, r3
 80014e4:	f008 f88c 	bl	8009600 <setbuf>
    memset(&cli, 0x0, sizeof(CLI_t));
 80014e8:	2283      	movs	r2, #131	@ 0x83
 80014ea:	2100      	movs	r1, #0
 80014ec:	4807      	ldr	r0, [pc, #28]	@ (800150c <CLI_Init+0x44>)
 80014ee:	f008 fa1b 	bl	8009928 <memset>
    HAL_UART_Receive_IT(&hlpuart1, &uart_rx_byte, UART_BYTE);
 80014f2:	2201      	movs	r2, #1
 80014f4:	4906      	ldr	r1, [pc, #24]	@ (8001510 <CLI_Init+0x48>)
 80014f6:	4807      	ldr	r0, [pc, #28]	@ (8001514 <CLI_Init+0x4c>)
 80014f8:	f004 fbce 	bl	8005c98 <HAL_UART_Receive_IT>
    cbf_boot_logo(0, NULL);
 80014fc:	2100      	movs	r1, #0
 80014fe:	2000      	movs	r0, #0
 8001500:	f000 f8dc 	bl	80016bc <cbf_boot_logo>
}
 8001504:	bf00      	nop
 8001506:	bd80      	pop	{r7, pc}
 8001508:	2000003c 	.word	0x2000003c
 800150c:	20000508 	.word	0x20000508
 8001510:	20000504 	.word	0x20000504
 8001514:	2000072c 	.word	0x2000072c

08001518 <parser>:


/* CLI PARSER */
#define DBG_CMD 0
int parser(char *cmd)
{
 8001518:	b590      	push	{r4, r7, lr}
 800151a:	b091      	sub	sp, #68	@ 0x44
 800151c:	af00      	add	r7, sp, #0
 800151e:	6078      	str	r0, [r7, #4]
    int     argc = 0;
 8001520:	2300      	movs	r3, #0
 8001522:	63fb      	str	r3, [r7, #60]	@ 0x3c
    char   *argv[NUMBER_OF_DELIMITER_VALUE];
    char   **ppStr  = NULL;
 8001524:	2300      	movs	r3, #0
 8001526:	63bb      	str	r3, [r7, #56]	@ 0x38
    short   str_len = 0;
 8001528:	2300      	movs	r3, #0
 800152a:	867b      	strh	r3, [r7, #50]	@ 0x32
    
    if (cmd == NULL) {
 800152c:	687b      	ldr	r3, [r7, #4]
 800152e:	2b00      	cmp	r3, #0
 8001530:	d102      	bne.n	8001538 <parser+0x20>
        printf("CMD Error\r\n");
 8001532:	485a      	ldr	r0, [pc, #360]	@ (800169c <parser+0x184>)
 8001534:	f008 f85c 	bl	80095f0 <puts>
    }
    
    // is cmd repeat?
    if (uart_rx_byte == ASTERISK) {
 8001538:	4b59      	ldr	r3, [pc, #356]	@ (80016a0 <parser+0x188>)
 800153a:	781b      	ldrb	r3, [r3, #0]
 800153c:	2b2a      	cmp	r3, #42	@ 0x2a
 800153e:	d10b      	bne.n	8001558 <parser+0x40>
        strcpy(cmd, (char *)&gRx_cmd_repeat[0]);
 8001540:	4958      	ldr	r1, [pc, #352]	@ (80016a4 <parser+0x18c>)
 8001542:	6878      	ldr	r0, [r7, #4]
 8001544:	f008 fad7 	bl	8009af6 <strcpy>
        #if DBG_CMD
        printf("STR:%s", gRx_cmd_repeat);
        #endif
        printf("\r\n");
 8001548:	4857      	ldr	r0, [pc, #348]	@ (80016a8 <parser+0x190>)
 800154a:	f008 f851 	bl	80095f0 <puts>
        cli.is_cmd_repeat = TRUE;
 800154e:	4b57      	ldr	r3, [pc, #348]	@ (80016ac <parser+0x194>)
 8001550:	2201      	movs	r2, #1
 8001552:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
 8001556:	e003      	b.n	8001560 <parser+0x48>
    } else {
        cli.is_cmd_repeat = FALSE;
 8001558:	4b54      	ldr	r3, [pc, #336]	@ (80016ac <parser+0x194>)
 800155a:	2200      	movs	r2, #0
 800155c:	f883 2082 	strb.w	r2, [r3, #130]	@ 0x82
    }

	//----------------------------------------
    // SPLIT THE UART RX STRING
    //----------------------------------------
    argv[argc++] = strtok(cmd, D_DELIMITER);
 8001560:	6bfc      	ldr	r4, [r7, #60]	@ 0x3c
 8001562:	1c63      	adds	r3, r4, #1
 8001564:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001566:	4952      	ldr	r1, [pc, #328]	@ (80016b0 <parser+0x198>)
 8001568:	6878      	ldr	r0, [r7, #4]
 800156a:	f008 f9e5 	bl	8009938 <strtok>
 800156e:	4602      	mov	r2, r0
 8001570:	00a3      	lsls	r3, r4, #2
 8001572:	3340      	adds	r3, #64	@ 0x40
 8001574:	443b      	add	r3, r7
 8001576:	f843 2c38 	str.w	r2, [r3, #-56]

    while (1) {
        argv[argc] = strtok(NULL, D_DELIMITER);
 800157a:	494d      	ldr	r1, [pc, #308]	@ (80016b0 <parser+0x198>)
 800157c:	2000      	movs	r0, #0
 800157e:	f008 f9db 	bl	8009938 <strtok>
 8001582:	4602      	mov	r2, r0
 8001584:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001586:	009b      	lsls	r3, r3, #2
 8001588:	3340      	adds	r3, #64	@ 0x40
 800158a:	443b      	add	r3, r7
 800158c:	f843 2c38 	str.w	r2, [r3, #-56]
        
        if (argv[argc] == NULL) {
 8001590:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8001592:	009b      	lsls	r3, r3, #2
 8001594:	3340      	adds	r3, #64	@ 0x40
 8001596:	443b      	add	r3, r7
 8001598:	f853 3c38 	ldr.w	r3, [r3, #-56]
 800159c:	2b00      	cmp	r3, #0
 800159e:	d006      	beq.n	80015ae <parser+0x96>
            break;
        }

        if (++argc >= NUMBER_OF_DELIMITER_VALUE) {
 80015a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a2:	3301      	adds	r3, #1
 80015a4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80015a6:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80015a8:	2b09      	cmp	r3, #9
 80015aa:	dc02      	bgt.n	80015b2 <parser+0x9a>
        argv[argc] = strtok(NULL, D_DELIMITER);
 80015ac:	e7e5      	b.n	800157a <parser+0x62>
            break;
 80015ae:	bf00      	nop
 80015b0:	e000      	b.n	80015b4 <parser+0x9c>
            break;
 80015b2:	bf00      	nop
    }

    //----------------------------------------
    // FIND THE MATCHED STRING
    //----------------------------------------
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 80015b4:	2300      	movs	r3, #0
 80015b6:	86fb      	strh	r3, [r7, #54]	@ 0x36
 80015b8:	e025      	b.n	8001606 <parser+0xee>
        if (strcmp(cmd_list[cnt].name, argv[0]) == CLI_MATCH) {
 80015ba:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80015be:	493d      	ldr	r1, [pc, #244]	@ (80016b4 <parser+0x19c>)
 80015c0:	4613      	mov	r3, r2
 80015c2:	005b      	lsls	r3, r3, #1
 80015c4:	4413      	add	r3, r2
 80015c6:	009b      	lsls	r3, r3, #2
 80015c8:	440b      	add	r3, r1
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	68ba      	ldr	r2, [r7, #8]
 80015ce:	4611      	mov	r1, r2
 80015d0:	4618      	mov	r0, r3
 80015d2:	f7fe fe25 	bl	8000220 <strcmp>
 80015d6:	4603      	mov	r3, r0
 80015d8:	2b00      	cmp	r3, #0
 80015da:	d10e      	bne.n	80015fa <parser+0xe2>
            cmd_list[cnt].func(argc, argv);
 80015dc:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 80015e0:	4934      	ldr	r1, [pc, #208]	@ (80016b4 <parser+0x19c>)
 80015e2:	4613      	mov	r3, r2
 80015e4:	005b      	lsls	r3, r3, #1
 80015e6:	4413      	add	r3, r2
 80015e8:	009b      	lsls	r3, r3, #2
 80015ea:	440b      	add	r3, r1
 80015ec:	3304      	adds	r3, #4
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	f107 0208 	add.w	r2, r7, #8
 80015f4:	4611      	mov	r1, r2
 80015f6:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 80015f8:	4798      	blx	r3
    for (short cnt = 0; cmd_list[cnt].name != NULL; cnt++) {
 80015fa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	@ 0x36
 80015fe:	b29b      	uxth	r3, r3
 8001600:	3301      	adds	r3, #1
 8001602:	b29b      	uxth	r3, r3
 8001604:	86fb      	strh	r3, [r7, #54]	@ 0x36
 8001606:	f9b7 2036 	ldrsh.w	r2, [r7, #54]	@ 0x36
 800160a:	492a      	ldr	r1, [pc, #168]	@ (80016b4 <parser+0x19c>)
 800160c:	4613      	mov	r3, r2
 800160e:	005b      	lsls	r3, r3, #1
 8001610:	4413      	add	r3, r2
 8001612:	009b      	lsls	r3, r3, #2
 8001614:	440b      	add	r3, r1
 8001616:	681b      	ldr	r3, [r3, #0]
 8001618:	2b00      	cmp	r3, #0
 800161a:	d1ce      	bne.n	80015ba <parser+0xa2>
        }
    }
    
    // Cpy Last Command...
    if (cli.is_cmd_repeat == FALSE) {
 800161c:	4b23      	ldr	r3, [pc, #140]	@ (80016ac <parser+0x194>)
 800161e:	f893 3082 	ldrb.w	r3, [r3, #130]	@ 0x82
 8001622:	2b00      	cmp	r3, #0
 8001624:	d12c      	bne.n	8001680 <parser+0x168>
        memset((char *)&gRx_cmd_repeat[0], (char)'\0', sizeof(gRx_cmd_repeat));
 8001626:	2280      	movs	r2, #128	@ 0x80
 8001628:	2100      	movs	r1, #0
 800162a:	481e      	ldr	r0, [pc, #120]	@ (80016a4 <parser+0x18c>)
 800162c:	f008 f97c 	bl	8009928 <memset>
        ppStr = &argv[0];
 8001630:	f107 0308 	add.w	r3, r7, #8
 8001634:	63bb      	str	r3, [r7, #56]	@ 0x38
        for (short cnt = 0; cnt < argc; cnt++) {
 8001636:	2300      	movs	r3, #0
 8001638:	86bb      	strh	r3, [r7, #52]	@ 0x34
 800163a:	e01c      	b.n	8001676 <parser+0x15e>
            strcpy(&gRx_cmd_repeat[0] + strlen(&gRx_cmd_repeat[0]), *ppStr++);
 800163c:	4819      	ldr	r0, [pc, #100]	@ (80016a4 <parser+0x18c>)
 800163e:	f7fe fdf9 	bl	8000234 <strlen>
 8001642:	4603      	mov	r3, r0
 8001644:	4a17      	ldr	r2, [pc, #92]	@ (80016a4 <parser+0x18c>)
 8001646:	1898      	adds	r0, r3, r2
 8001648:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800164a:	1d1a      	adds	r2, r3, #4
 800164c:	63ba      	str	r2, [r7, #56]	@ 0x38
 800164e:	681b      	ldr	r3, [r3, #0]
 8001650:	4619      	mov	r1, r3
 8001652:	f008 fa50 	bl	8009af6 <strcpy>
            str_len = strlen(&gRx_cmd_repeat[0]);
 8001656:	4813      	ldr	r0, [pc, #76]	@ (80016a4 <parser+0x18c>)
 8001658:	f7fe fdec 	bl	8000234 <strlen>
 800165c:	4603      	mov	r3, r0
 800165e:	867b      	strh	r3, [r7, #50]	@ 0x32
            gRx_cmd_repeat[str_len] = SPACE_BAR;
 8001660:	f9b7 3032 	ldrsh.w	r3, [r7, #50]	@ 0x32
 8001664:	4a0f      	ldr	r2, [pc, #60]	@ (80016a4 <parser+0x18c>)
 8001666:	2120      	movs	r1, #32
 8001668:	54d1      	strb	r1, [r2, r3]
        for (short cnt = 0; cnt < argc; cnt++) {
 800166a:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800166e:	b29b      	uxth	r3, r3
 8001670:	3301      	adds	r3, #1
 8001672:	b29b      	uxth	r3, r3
 8001674:	86bb      	strh	r3, [r7, #52]	@ 0x34
 8001676:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	@ 0x34
 800167a:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800167c:	429a      	cmp	r2, r3
 800167e:	dcdd      	bgt.n	800163c <parser+0x124>
        #if DBG_CMD
        printf("cpy str:%s\r\n", gRx_cmd_repeat);
        #endif
    }

    memset(&cli, 0x0, sizeof(CLI_t));
 8001680:	2283      	movs	r2, #131	@ 0x83
 8001682:	2100      	movs	r1, #0
 8001684:	4809      	ldr	r0, [pc, #36]	@ (80016ac <parser+0x194>)
 8001686:	f008 f94f 	bl	8009928 <memset>
    printf(" $Fish >> ");
 800168a:	480b      	ldr	r0, [pc, #44]	@ (80016b8 <parser+0x1a0>)
 800168c:	f007 ff48 	bl	8009520 <iprintf>
    
    return LIST_NOT_FOUND;
 8001690:	2301      	movs	r3, #1
}
 8001692:	4618      	mov	r0, r3
 8001694:	3744      	adds	r7, #68	@ 0x44
 8001696:	46bd      	mov	sp, r7
 8001698:	bd90      	pop	{r4, r7, pc}
 800169a:	bf00      	nop
 800169c:	0800a5f4 	.word	0x0800a5f4
 80016a0:	20000504 	.word	0x20000504
 80016a4:	2000058c 	.word	0x2000058c
 80016a8:	0800a600 	.word	0x0800a600
 80016ac:	20000508 	.word	0x20000508
 80016b0:	0800a604 	.word	0x0800a604
 80016b4:	0800b3c0 	.word	0x0800b3c0
 80016b8:	0800a608 	.word	0x0800a608

080016bc <cbf_boot_logo>:

//----------------------------------------
// CALL BACK FUNCTION
//----------------------------------------
int cbf_boot_logo(int argc, char *argv[])
{
 80016bc:	b580      	push	{r7, lr}
 80016be:	b082      	sub	sp, #8
 80016c0:	af00      	add	r7, sp, #0
 80016c2:	6078      	str	r0, [r7, #4]
 80016c4:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 80016c6:	4812      	ldr	r0, [pc, #72]	@ (8001710 <cbf_boot_logo+0x54>)
 80016c8:	f007 ff92 	bl	80095f0 <puts>
    printf("+==========================================================+\r\n");
 80016cc:	4811      	ldr	r0, [pc, #68]	@ (8001714 <cbf_boot_logo+0x58>)
 80016ce:	f007 ff8f 	bl	80095f0 <puts>
    printf("|,------.   ,--.             ,--.                          |\r\n");
 80016d2:	4811      	ldr	r0, [pc, #68]	@ (8001718 <cbf_boot_logo+0x5c>)
 80016d4:	f007 ff8c 	bl	80095f0 <puts>
    printf("||  .---'   `--'    ,---.    |  ,---.                      |\r\n");
 80016d8:	4810      	ldr	r0, [pc, #64]	@ (800171c <cbf_boot_logo+0x60>)
 80016da:	f007 ff89 	bl	80095f0 <puts>
    printf("||  `--,    ,--.   (  .-'    |  .-.  |                     |\r\n");
 80016de:	4810      	ldr	r0, [pc, #64]	@ (8001720 <cbf_boot_logo+0x64>)
 80016e0:	f007 ff86 	bl	80095f0 <puts>
    printf("||  |`      |  |   .-'  `)   |  | |  |   BootLoader V1.0   |\r\n");
 80016e4:	480f      	ldr	r0, [pc, #60]	@ (8001724 <cbf_boot_logo+0x68>)
 80016e6:	f007 ff83 	bl	80095f0 <puts>
    printf("|`--'       `--'   `----'    `--' `--'   %s       |\r\n", __DATE__);
 80016ea:	490f      	ldr	r1, [pc, #60]	@ (8001728 <cbf_boot_logo+0x6c>)
 80016ec:	480f      	ldr	r0, [pc, #60]	@ (800172c <cbf_boot_logo+0x70>)
 80016ee:	f007 ff17 	bl	8009520 <iprintf>
    printf("+==========================================================+\r\n");
 80016f2:	4808      	ldr	r0, [pc, #32]	@ (8001714 <cbf_boot_logo+0x58>)
 80016f4:	f007 ff7c 	bl	80095f0 <puts>
    CONSOLE_SPLIT;
 80016f8:	4805      	ldr	r0, [pc, #20]	@ (8001710 <cbf_boot_logo+0x54>)
 80016fa:	f007 ff79 	bl	80095f0 <puts>
    printf(" $Fish >> ");
 80016fe:	480c      	ldr	r0, [pc, #48]	@ (8001730 <cbf_boot_logo+0x74>)
 8001700:	f007 ff0e 	bl	8009520 <iprintf>
    return 0;
 8001704:	2300      	movs	r3, #0
}
 8001706:	4618      	mov	r0, r3
 8001708:	3708      	adds	r7, #8
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	0800a614 	.word	0x0800a614
 8001714:	0800a648 	.word	0x0800a648
 8001718:	0800a688 	.word	0x0800a688
 800171c:	0800a6c8 	.word	0x0800a6c8
 8001720:	0800a708 	.word	0x0800a708
 8001724:	0800a748 	.word	0x0800a748
 8001728:	0800a788 	.word	0x0800a788
 800172c:	0800a794 	.word	0x0800a794
 8001730:	0800a608 	.word	0x0800a608

08001734 <cbf_sn>:

int cbf_sn(int argc, char *argv[])
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
 800173c:	6039      	str	r1, [r7, #0]
#if LEGACY
    printf("SN : %s\r\n", (char *)tag->fw_sn);
#else
    printf("%s\r\n", __DATE__);
 800173e:	4904      	ldr	r1, [pc, #16]	@ (8001750 <cbf_sn+0x1c>)
 8001740:	4804      	ldr	r0, [pc, #16]	@ (8001754 <cbf_sn+0x20>)
 8001742:	f007 feed 	bl	8009520 <iprintf>
#endif
    return 0;
 8001746:	2300      	movs	r3, #0
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}
 8001750:	0800a788 	.word	0x0800a788
 8001754:	0800a7cc 	.word	0x0800a7cc

08001758 <cbf_help>:

int cbf_help(int argc, char *argv[])
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
 8001760:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8001762:	481c      	ldr	r0, [pc, #112]	@ (80017d4 <cbf_help+0x7c>)
 8001764:	f007 ff44 	bl	80095f0 <puts>
    printf("Command List %-6s Description\r\n", "||");
 8001768:	491b      	ldr	r1, [pc, #108]	@ (80017d8 <cbf_help+0x80>)
 800176a:	481c      	ldr	r0, [pc, #112]	@ (80017dc <cbf_help+0x84>)
 800176c:	f007 fed8 	bl	8009520 <iprintf>
    CONSOLE_SPLIT;
 8001770:	4818      	ldr	r0, [pc, #96]	@ (80017d4 <cbf_help+0x7c>)
 8001772:	f007 ff3d 	bl	80095f0 <puts>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 8001776:	2301      	movs	r3, #1
 8001778:	60fb      	str	r3, [r7, #12]
 800177a:	e01b      	b.n	80017b4 <cbf_help+0x5c>
        printf("%-20s", cmd_list[cnt].name);
 800177c:	4918      	ldr	r1, [pc, #96]	@ (80017e0 <cbf_help+0x88>)
 800177e:	68fa      	ldr	r2, [r7, #12]
 8001780:	4613      	mov	r3, r2
 8001782:	005b      	lsls	r3, r3, #1
 8001784:	4413      	add	r3, r2
 8001786:	009b      	lsls	r3, r3, #2
 8001788:	440b      	add	r3, r1
 800178a:	681b      	ldr	r3, [r3, #0]
 800178c:	4619      	mov	r1, r3
 800178e:	4815      	ldr	r0, [pc, #84]	@ (80017e4 <cbf_help+0x8c>)
 8001790:	f007 fec6 	bl	8009520 <iprintf>
        printf("%-30s\r", cmd_list[cnt].description);
 8001794:	4912      	ldr	r1, [pc, #72]	@ (80017e0 <cbf_help+0x88>)
 8001796:	68fa      	ldr	r2, [r7, #12]
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	3308      	adds	r3, #8
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	4619      	mov	r1, r3
 80017a8:	480f      	ldr	r0, [pc, #60]	@ (80017e8 <cbf_help+0x90>)
 80017aa:	f007 feb9 	bl	8009520 <iprintf>
    for (int cnt = 1; cmd_list[cnt].name != NULL; cnt++) {
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	3301      	adds	r3, #1
 80017b2:	60fb      	str	r3, [r7, #12]
 80017b4:	490a      	ldr	r1, [pc, #40]	@ (80017e0 <cbf_help+0x88>)
 80017b6:	68fa      	ldr	r2, [r7, #12]
 80017b8:	4613      	mov	r3, r2
 80017ba:	005b      	lsls	r3, r3, #1
 80017bc:	4413      	add	r3, r2
 80017be:	009b      	lsls	r3, r3, #2
 80017c0:	440b      	add	r3, r1
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	2b00      	cmp	r3, #0
 80017c6:	d1d9      	bne.n	800177c <cbf_help+0x24>
    }
    return 0;
 80017c8:	2300      	movs	r3, #0
}
 80017ca:	4618      	mov	r0, r3
 80017cc:	3710      	adds	r7, #16
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bd80      	pop	{r7, pc}
 80017d2:	bf00      	nop
 80017d4:	0800a614 	.word	0x0800a614
 80017d8:	0800a7d4 	.word	0x0800a7d4
 80017dc:	0800a7d8 	.word	0x0800a7d8
 80017e0:	0800b3c0 	.word	0x0800b3c0
 80017e4:	0800a7f8 	.word	0x0800a7f8
 80017e8:	0800a800 	.word	0x0800a800

080017ec <cbf_reset>:

int cbf_reset(int argc, char *argv[])
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b082      	sub	sp, #8
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
 80017f4:	6039      	str	r1, [r7, #0]
    // software reset
    HAL_NVIC_SystemReset();
 80017f6:	f001 fa83 	bl	8002d00 <HAL_NVIC_SystemReset>
    return 0;
 80017fa:	2300      	movs	r3, #0
}
 80017fc:	4618      	mov	r0, r3
 80017fe:	3708      	adds	r7, #8
 8001800:	46bd      	mov	sp, r7
 8001802:	bd80      	pop	{r7, pc}

08001804 <cbf_test>:

int cbf_test(int argc, char *argv[])
{
 8001804:	b580      	push	{r7, lr}
 8001806:	b082      	sub	sp, #8
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
 800180c:	6039      	str	r1, [r7, #0]
	printf("argv : %s \r\n", argv[0]);
 800180e:	683b      	ldr	r3, [r7, #0]
 8001810:	681b      	ldr	r3, [r3, #0]
 8001812:	4619      	mov	r1, r3
 8001814:	4805      	ldr	r0, [pc, #20]	@ (800182c <cbf_test+0x28>)
 8001816:	f007 fe83 	bl	8009520 <iprintf>
	//printf("argc : %d , argv : %s \r\n", argc, argv[1]);
	printf("TEST \r\n");    
 800181a:	4805      	ldr	r0, [pc, #20]	@ (8001830 <cbf_test+0x2c>)
 800181c:	f007 fee8 	bl	80095f0 <puts>
	return 0;
 8001820:	2300      	movs	r3, #0
}
 8001822:	4618      	mov	r0, r3
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	0800a808 	.word	0x0800a808
 8001830:	0800a818 	.word	0x0800a818

08001834 <cbf_xmodem>:


int cbf_xmodem(int argc, char *argv[])
{
 8001834:	b580      	push	{r7, lr}
 8001836:	b086      	sub	sp, #24
 8001838:	af00      	add	r7, sp, #0
 800183a:	6078      	str	r0, [r7, #4]
 800183c:	6039      	str	r1, [r7, #0]
#if BOOT_MODE
    uint32_t x_modem_size = 0;
 800183e:	2300      	movs	r3, #0
 8001840:	60fb      	str	r3, [r7, #12]
    uint32_t flash_ret    = 0;
 8001842:	2300      	movs	r3, #0
 8001844:	617b      	str	r3, [r7, #20]

    // f/w update using uart polling
    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 8001846:	205b      	movs	r0, #91	@ 0x5b
 8001848:	f001 fa42 	bl	8002cd0 <HAL_NVIC_DisableIRQ>

    flash_ret = FLASH_If_Erase(APPLICATION_ADDRESS);
 800184c:	481c      	ldr	r0, [pc, #112]	@ (80018c0 <cbf_xmodem+0x8c>)
 800184e:	f7ff f86d 	bl	800092c <FLASH_If_Erase>
 8001852:	6178      	str	r0, [r7, #20]
    if (flash_ret == FALSE) {
 8001854:	697b      	ldr	r3, [r7, #20]
 8001856:	2b00      	cmp	r3, #0
 8001858:	d102      	bne.n	8001860 <cbf_xmodem+0x2c>
        printf("Flash Erase Error\r\n");
 800185a:	481a      	ldr	r0, [pc, #104]	@ (80018c4 <cbf_xmodem+0x90>)
 800185c:	f007 fec8 	bl	80095f0 <puts>
    }

    // entering x-modem ...
    Xmodem_InitVariable();
 8001860:	f7ff f912 	bl	8000a88 <Xmodem_InitVariable>
    
    uint8_t ret = XMODEM_Rx(&x_modem_size, (uint8_t *)APPLICATION_ADDRESS);
 8001864:	f107 030c 	add.w	r3, r7, #12
 8001868:	4915      	ldr	r1, [pc, #84]	@ (80018c0 <cbf_xmodem+0x8c>)
 800186a:	4618      	mov	r0, r3
 800186c:	f7ff fa38 	bl	8000ce0 <XMODEM_Rx>
 8001870:	4603      	mov	r3, r0
 8001872:	74fb      	strb	r3, [r7, #19]
    
    HAL_FLASH_Lock();
 8001874:	f001 fc54 	bl	8003120 <HAL_FLASH_Lock>

    printf("\r\n");
 8001878:	4813      	ldr	r0, [pc, #76]	@ (80018c8 <cbf_xmodem+0x94>)
 800187a:	f007 feb9 	bl	80095f0 <puts>
    CONSOLE_SPLIT;
 800187e:	4813      	ldr	r0, [pc, #76]	@ (80018cc <cbf_xmodem+0x98>)
 8001880:	f007 feb6 	bl	80095f0 <puts>
    if (ret == FALSE) {
 8001884:	7cfb      	ldrb	r3, [r7, #19]
 8001886:	2b00      	cmp	r3, #0
 8001888:	d103      	bne.n	8001892 <cbf_xmodem+0x5e>
        printf("X-Modem Failed\r\n");
 800188a:	4811      	ldr	r0, [pc, #68]	@ (80018d0 <cbf_xmodem+0x9c>)
 800188c:	f007 feb0 	bl	80095f0 <puts>
 8001890:	e004      	b.n	800189c <cbf_xmodem+0x68>
    } else {
        printf("X-Modem Completed size : %u byte\r\n", (int)x_modem_size);
 8001892:	68fb      	ldr	r3, [r7, #12]
 8001894:	4619      	mov	r1, r3
 8001896:	480f      	ldr	r0, [pc, #60]	@ (80018d4 <cbf_xmodem+0xa0>)
 8001898:	f007 fe42 	bl	8009520 <iprintf>
    }
    CONSOLE_SPLIT;
 800189c:	480b      	ldr	r0, [pc, #44]	@ (80018cc <cbf_xmodem+0x98>)
 800189e:	f007 fea7 	bl	80095f0 <puts>

    // resetting uart isr
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 80018a2:	2200      	movs	r2, #0
 80018a4:	2100      	movs	r1, #0
 80018a6:	205b      	movs	r0, #91	@ 0x5b
 80018a8:	f001 f9d0 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 80018ac:	205b      	movs	r0, #91	@ 0x5b
 80018ae:	f001 f9f7 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
#else
    CONSOLE_SPLIT;
    printf("You should update f/w in the boot mode.\r\nboot mode is being entered... \r\n");
    CONSOLE_SPLIT;
#endif
    HAL_NVIC_SystemReset();
 80018b2:	f001 fa25 	bl	8002d00 <HAL_NVIC_SystemReset>
    return 0;
 80018b6:	2300      	movs	r3, #0
}
 80018b8:	4618      	mov	r0, r3
 80018ba:	3718      	adds	r7, #24
 80018bc:	46bd      	mov	sp, r7
 80018be:	bd80      	pop	{r7, pc}
 80018c0:	08011000 	.word	0x08011000
 80018c4:	0800a820 	.word	0x0800a820
 80018c8:	0800a600 	.word	0x0800a600
 80018cc:	0800a614 	.word	0x0800a614
 80018d0:	0800a834 	.word	0x0800a834
 80018d4:	0800a844 	.word	0x0800a844

080018d8 <cbf_ymodem>:

int cbf_ymodem(int argc, char *argv[])
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b088      	sub	sp, #32
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
#if BOOT_MODE
    COM_StatusTypeDef result;
    uint32_t Size = 0;
 80018e2:	2300      	movs	r3, #0
 80018e4:	61bb      	str	r3, [r7, #24]
    uint8_t number[11] = { 0, };
 80018e6:	2300      	movs	r3, #0
 80018e8:	60fb      	str	r3, [r7, #12]
 80018ea:	f107 0310 	add.w	r3, r7, #16
 80018ee:	2200      	movs	r2, #0
 80018f0:	601a      	str	r2, [r3, #0]
 80018f2:	f8c3 2003 	str.w	r2, [r3, #3]
    
    Ymodem_InitVariable();
 80018f6:	f7ff faa1 	bl	8000e3c <Ymodem_InitVariable>

    HAL_NVIC_DisableIRQ(LPUART1_IRQn);
 80018fa:	205b      	movs	r0, #91	@ 0x5b
 80018fc:	f001 f9e8 	bl	8002cd0 <HAL_NVIC_DisableIRQ>

    // entering y-modem ...
    result = Ymodem_Receive(&Size);
 8001900:	f107 0318 	add.w	r3, r7, #24
 8001904:	4618      	mov	r0, r3
 8001906:	f7ff fc2f 	bl	8001168 <Ymodem_Receive>
 800190a:	4603      	mov	r3, r0
 800190c:	77fb      	strb	r3, [r7, #31]
    if (result == COM_OK) {
 800190e:	7ffb      	ldrb	r3, [r7, #31]
 8001910:	2b00      	cmp	r3, #0
 8001912:	d11b      	bne.n	800194c <cbf_ymodem+0x74>
        Serial_PutString((uint8_t *)"\n\n\r Programming Completed Successfully!\n\r--------------------------------\r\n Name: ");
 8001914:	4821      	ldr	r0, [pc, #132]	@ (800199c <cbf_ymodem+0xc4>)
 8001916:	f7fe ffbf 	bl	8000898 <Serial_PutString>
        Serial_PutString((uint8_t *)aFileName);
 800191a:	4821      	ldr	r0, [pc, #132]	@ (80019a0 <cbf_ymodem+0xc8>)
 800191c:	f7fe ffbc 	bl	8000898 <Serial_PutString>
        Int2Str(number, Size);
 8001920:	69ba      	ldr	r2, [r7, #24]
 8001922:	f107 030c 	add.w	r3, r7, #12
 8001926:	4611      	mov	r1, r2
 8001928:	4618      	mov	r0, r3
 800192a:	f7fe fe6b 	bl	8000604 <Int2Str>
        Serial_PutString((uint8_t *)"\n\r Size: ");
 800192e:	481d      	ldr	r0, [pc, #116]	@ (80019a4 <cbf_ymodem+0xcc>)
 8001930:	f7fe ffb2 	bl	8000898 <Serial_PutString>
        Serial_PutString((uint8_t *)number);
 8001934:	f107 030c 	add.w	r3, r7, #12
 8001938:	4618      	mov	r0, r3
 800193a:	f7fe ffad 	bl	8000898 <Serial_PutString>
        Serial_PutString((uint8_t *)" Bytes\r\n");
 800193e:	481a      	ldr	r0, [pc, #104]	@ (80019a8 <cbf_ymodem+0xd0>)
 8001940:	f7fe ffaa 	bl	8000898 <Serial_PutString>
        Serial_PutString((uint8_t *)"-------------------\n");
 8001944:	4819      	ldr	r0, [pc, #100]	@ (80019ac <cbf_ymodem+0xd4>)
 8001946:	f7fe ffa7 	bl	8000898 <Serial_PutString>
 800194a:	e017      	b.n	800197c <cbf_ymodem+0xa4>
    } else if (result == COM_LIMIT) {
 800194c:	7ffb      	ldrb	r3, [r7, #31]
 800194e:	2b05      	cmp	r3, #5
 8001950:	d103      	bne.n	800195a <cbf_ymodem+0x82>
        Serial_PutString((uint8_t *)"\n\n\rThe image size is higher than the allowed space memory!\n\r");
 8001952:	4817      	ldr	r0, [pc, #92]	@ (80019b0 <cbf_ymodem+0xd8>)
 8001954:	f7fe ffa0 	bl	8000898 <Serial_PutString>
 8001958:	e010      	b.n	800197c <cbf_ymodem+0xa4>
    } else if (result == COM_DATA) {
 800195a:	7ffb      	ldrb	r3, [r7, #31]
 800195c:	2b04      	cmp	r3, #4
 800195e:	d103      	bne.n	8001968 <cbf_ymodem+0x90>
        Serial_PutString((uint8_t *)"\n\n\rVerification failed!\n\r");
 8001960:	4814      	ldr	r0, [pc, #80]	@ (80019b4 <cbf_ymodem+0xdc>)
 8001962:	f7fe ff99 	bl	8000898 <Serial_PutString>
 8001966:	e009      	b.n	800197c <cbf_ymodem+0xa4>
    } else if (result == COM_ABORT) {
 8001968:	7ffb      	ldrb	r3, [r7, #31]
 800196a:	2b02      	cmp	r3, #2
 800196c:	d103      	bne.n	8001976 <cbf_ymodem+0x9e>
        Serial_PutString((uint8_t *)"\r\n\nAborted by user.\n\r");
 800196e:	4812      	ldr	r0, [pc, #72]	@ (80019b8 <cbf_ymodem+0xe0>)
 8001970:	f7fe ff92 	bl	8000898 <Serial_PutString>
 8001974:	e002      	b.n	800197c <cbf_ymodem+0xa4>
    } else {
        Serial_PutString((uint8_t *)"\n\rFailed to receive the file!\n\r");
 8001976:	4811      	ldr	r0, [pc, #68]	@ (80019bc <cbf_ymodem+0xe4>)
 8001978:	f7fe ff8e 	bl	8000898 <Serial_PutString>
    }

    // resetting uart isr
    HAL_NVIC_SetPriority(LPUART1_IRQn, 0, 0);
 800197c:	2200      	movs	r2, #0
 800197e:	2100      	movs	r1, #0
 8001980:	205b      	movs	r0, #91	@ 0x5b
 8001982:	f001 f963 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8001986:	205b      	movs	r0, #91	@ 0x5b
 8001988:	f001 f98a 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
#else
    CONSOLE_SPLIT;
    printf("You should update f/w in the boot mode.\r\nboot mode is being entered... \r\n");
    CONSOLE_SPLIT;
#endif
    HAL_NVIC_SystemReset();
 800198c:	f001 f9b8 	bl	8002d00 <HAL_NVIC_SystemReset>
    return 0;
 8001990:	2300      	movs	r3, #0
}
 8001992:	4618      	mov	r0, r3
 8001994:	3720      	adds	r7, #32
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	0800a868 	.word	0x0800a868
 80019a0:	200004c4 	.word	0x200004c4
 80019a4:	0800a8bc 	.word	0x0800a8bc
 80019a8:	0800a8c8 	.word	0x0800a8c8
 80019ac:	0800a8d4 	.word	0x0800a8d4
 80019b0:	0800a8ec 	.word	0x0800a8ec
 80019b4:	0800a92c 	.word	0x0800a92c
 80019b8:	0800a948 	.word	0x0800a948
 80019bc:	0800a960 	.word	0x0800a960

080019c0 <check_memory_range>:

static uint8_t check_memory_range(uint32_t address)
{
 80019c0:	b480      	push	{r7}
 80019c2:	b083      	sub	sp, #12
 80019c4:	af00      	add	r7, sp, #0
 80019c6:	6078      	str	r0, [r7, #4]
    if ( ((address >= (uint32_t )FLASH_RANGE_START)        && (address <= (uint32_t )FLASH_RANGE_END)) ||
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80019ce:	d303      	bcc.n	80019d8 <check_memory_range+0x18>
 80019d0:	687b      	ldr	r3, [r7, #4]
 80019d2:	4a0a      	ldr	r2, [pc, #40]	@ (80019fc <check_memory_range+0x3c>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d307      	bcc.n	80019e8 <check_memory_range+0x28>
 80019d8:	687b      	ldr	r3, [r7, #4]
 80019da:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80019de:	d305      	bcc.n	80019ec <check_memory_range+0x2c>
         ((address >= (uint32_t )ADDR_INTERNAL_SRAM_START) && (address <= (uint32_t )ADDR_INTERNAL_SRAM_END))) {
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	4a07      	ldr	r2, [pc, #28]	@ (8001a00 <check_memory_range+0x40>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d201      	bcs.n	80019ec <check_memory_range+0x2c>
        return TRUE;
 80019e8:	2301      	movs	r3, #1
 80019ea:	e000      	b.n	80019ee <check_memory_range+0x2e>
    } else {
        return FALSE;
 80019ec:	2300      	movs	r3, #0
    }
}
 80019ee:	4618      	mov	r0, r3
 80019f0:	370c      	adds	r7, #12
 80019f2:	46bd      	mov	sp, r7
 80019f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f8:	4770      	bx	lr
 80019fa:	bf00      	nop
 80019fc:	0801ffff 	.word	0x0801ffff
 8001a00:	20024000 	.word	0x20024000

08001a04 <cbf_dump>:
#define CHAR_SPACE          ' '
#define CHAR_z              'z'
#define CHAR_dot            '.'
#define ASCII_CHAR_DUMP     0
int cbf_dump(int argc, char *argv[])
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	6078      	str	r0, [r7, #4]
 8001a0c:	6039      	str	r1, [r7, #0]
    uint32_t size  = atoi(argv[2]);
 8001a0e:	683b      	ldr	r3, [r7, #0]
 8001a10:	3308      	adds	r3, #8
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4618      	mov	r0, r3
 8001a16:	f007 fb7b 	bl	8009110 <atoi>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	60fb      	str	r3, [r7, #12]
    uint32_t *addr = (uint32_t *) strtol(argv[1], NULL, 16);
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	3304      	adds	r3, #4
 8001a22:	681b      	ldr	r3, [r3, #0]
 8001a24:	2210      	movs	r2, #16
 8001a26:	2100      	movs	r1, #0
 8001a28:	4618      	mov	r0, r3
 8001a2a:	f007 fcad 	bl	8009388 <strtol>
 8001a2e:	4603      	mov	r3, r0
 8001a30:	617b      	str	r3, [r7, #20]
    uint32_t is_range_ok = (uint32_t)addr;
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	60bb      	str	r3, [r7, #8]
    #if ASCII_CHAR_DUMP
    uint8_t buffer[LINE] = { 0, };
    #endif

    if (check_memory_range(is_range_ok) == TRUE) {
 8001a36:	68b8      	ldr	r0, [r7, #8]
 8001a38:	f7ff ffc2 	bl	80019c0 <check_memory_range>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	2b01      	cmp	r3, #1
 8001a40:	d110      	bne.n	8001a64 <cbf_dump+0x60>
        CONSOLE_SPLIT;
 8001a42:	4825      	ldr	r0, [pc, #148]	@ (8001ad8 <cbf_dump+0xd4>)
 8001a44:	f007 fdd4 	bl	80095f0 <puts>
        printf("Base Addrr // dump data ... \n");
 8001a48:	4824      	ldr	r0, [pc, #144]	@ (8001adc <cbf_dump+0xd8>)
 8001a4a:	f007 fdd1 	bl	80095f0 <puts>
        CONSOLE_SPLIT;
 8001a4e:	4822      	ldr	r0, [pc, #136]	@ (8001ad8 <cbf_dump+0xd4>)
 8001a50:	f007 fdce 	bl	80095f0 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", (long)FLASH_RANGE_START, (long)FLASH_RANGE_END);
        printf("SRAM  Range is 0x%08lx ~ 0x%08lx\r\n", (long)ADDR_INTERNAL_SRAM_START, (long)ADDR_INTERNAL_SRAM_END);
        return FALSE;
    }

    printf("0x%08lx : ", (uint32_t)addr);
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	4619      	mov	r1, r3
 8001a58:	4821      	ldr	r0, [pc, #132]	@ (8001ae0 <cbf_dump+0xdc>)
 8001a5a:	f007 fd61 	bl	8009520 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8001a5e:	2301      	movs	r3, #1
 8001a60:	827b      	strh	r3, [r7, #18]
 8001a62:	e02c      	b.n	8001abe <cbf_dump+0xba>
        printf("Command Ex is ""dump [Address] [ReadSize Byte] ->""");
 8001a64:	481f      	ldr	r0, [pc, #124]	@ (8001ae4 <cbf_dump+0xe0>)
 8001a66:	f007 fd5b 	bl	8009520 <iprintf>
        printf("dump 128 0x08010000\r\n");
 8001a6a:	481f      	ldr	r0, [pc, #124]	@ (8001ae8 <cbf_dump+0xe4>)
 8001a6c:	f007 fdc0 	bl	80095f0 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", (long)FLASH_RANGE_START, (long)FLASH_RANGE_END);
 8001a70:	4a1e      	ldr	r2, [pc, #120]	@ (8001aec <cbf_dump+0xe8>)
 8001a72:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001a76:	481e      	ldr	r0, [pc, #120]	@ (8001af0 <cbf_dump+0xec>)
 8001a78:	f007 fd52 	bl	8009520 <iprintf>
        printf("SRAM  Range is 0x%08lx ~ 0x%08lx\r\n", (long)ADDR_INTERNAL_SRAM_START, (long)ADDR_INTERNAL_SRAM_END);
 8001a7c:	4a1d      	ldr	r2, [pc, #116]	@ (8001af4 <cbf_dump+0xf0>)
 8001a7e:	f04f 5100 	mov.w	r1, #536870912	@ 0x20000000
 8001a82:	481d      	ldr	r0, [pc, #116]	@ (8001af8 <cbf_dump+0xf4>)
 8001a84:	f007 fd4c 	bl	8009520 <iprintf>
        return FALSE;
 8001a88:	2300      	movs	r3, #0
 8001a8a:	e020      	b.n	8001ace <cbf_dump+0xca>
        } else { 
            buffer[range - 1] = CHAR_dot;
        }
        #endif

        printf("%04lx\t",  *(addr++));
 8001a8c:	697b      	ldr	r3, [r7, #20]
 8001a8e:	1d1a      	adds	r2, r3, #4
 8001a90:	617a      	str	r2, [r7, #20]
 8001a92:	681b      	ldr	r3, [r3, #0]
 8001a94:	4619      	mov	r1, r3
 8001a96:	4819      	ldr	r0, [pc, #100]	@ (8001afc <cbf_dump+0xf8>)
 8001a98:	f007 fd42 	bl	8009520 <iprintf>
        if (range % LINE == 0) {
 8001a9c:	8a7b      	ldrh	r3, [r7, #18]
 8001a9e:	f003 0303 	and.w	r3, r3, #3
 8001aa2:	b29b      	uxth	r3, r3
 8001aa4:	2b00      	cmp	r3, #0
 8001aa6:	d107      	bne.n	8001ab8 <cbf_dump+0xb4>
            #if ASCII_CHAR_DUMP
            printf("\t: %s", buffer);
            #endif
            printf("\r\n");
 8001aa8:	4815      	ldr	r0, [pc, #84]	@ (8001b00 <cbf_dump+0xfc>)
 8001aaa:	f007 fda1 	bl	80095f0 <puts>
            printf("0x%08lx : ", (uint32_t)addr);
 8001aae:	697b      	ldr	r3, [r7, #20]
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	480b      	ldr	r0, [pc, #44]	@ (8001ae0 <cbf_dump+0xdc>)
 8001ab4:	f007 fd34 	bl	8009520 <iprintf>
    for (uint16_t range = 1; range <= size; range++) {
 8001ab8:	8a7b      	ldrh	r3, [r7, #18]
 8001aba:	3301      	adds	r3, #1
 8001abc:	827b      	strh	r3, [r7, #18]
 8001abe:	8a7b      	ldrh	r3, [r7, #18]
 8001ac0:	68fa      	ldr	r2, [r7, #12]
 8001ac2:	429a      	cmp	r2, r3
 8001ac4:	d2e2      	bcs.n	8001a8c <cbf_dump+0x88>
        }
    }
    printf("\r\n");
 8001ac6:	480e      	ldr	r0, [pc, #56]	@ (8001b00 <cbf_dump+0xfc>)
 8001ac8:	f007 fd92 	bl	80095f0 <puts>
    return 0;
 8001acc:	2300      	movs	r3, #0
}
 8001ace:	4618      	mov	r0, r3
 8001ad0:	3718      	adds	r7, #24
 8001ad2:	46bd      	mov	sp, r7
 8001ad4:	bd80      	pop	{r7, pc}
 8001ad6:	bf00      	nop
 8001ad8:	0800a614 	.word	0x0800a614
 8001adc:	0800a980 	.word	0x0800a980
 8001ae0:	0800aa30 	.word	0x0800aa30
 8001ae4:	0800a9a0 	.word	0x0800a9a0
 8001ae8:	0800a9d0 	.word	0x0800a9d0
 8001aec:	0801fffe 	.word	0x0801fffe
 8001af0:	0800a9e8 	.word	0x0800a9e8
 8001af4:	20023fff 	.word	0x20023fff
 8001af8:	0800aa0c 	.word	0x0800aa0c
 8001afc:	0800aa3c 	.word	0x0800aa3c
 8001b00:	0800a600 	.word	0x0800a600

08001b04 <cbf_flash_test>:

int cbf_flash_test(int argc, char *argv[])
{
 8001b04:	b5b0      	push	{r4, r5, r7, lr}
 8001b06:	b088      	sub	sp, #32
 8001b08:	af00      	add	r7, sp, #0
 8001b0a:	6078      	str	r0, [r7, #4]
 8001b0c:	6039      	str	r1, [r7, #0]
    volatile uint32_t *flash_addr = (volatile uint32_t *) strtol(argv[1], NULL, 16);
 8001b0e:	683b      	ldr	r3, [r7, #0]
 8001b10:	3304      	adds	r3, #4
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	2210      	movs	r2, #16
 8001b16:	2100      	movs	r1, #0
 8001b18:	4618      	mov	r0, r3
 8001b1a:	f007 fc35 	bl	8009388 <strtol>
 8001b1e:	4603      	mov	r3, r0
 8001b20:	61fb      	str	r3, [r7, #28]
    uint32_t addr = (uint32_t)flash_addr;
 8001b22:	69fb      	ldr	r3, [r7, #28]
 8001b24:	61bb      	str	r3, [r7, #24]
    uint64_t data = atoi(argv[2]);
 8001b26:	683b      	ldr	r3, [r7, #0]
 8001b28:	3308      	adds	r3, #8
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4618      	mov	r0, r3
 8001b2e:	f007 faef 	bl	8009110 <atoi>
 8001b32:	4603      	mov	r3, r0
 8001b34:	17da      	asrs	r2, r3, #31
 8001b36:	461c      	mov	r4, r3
 8001b38:	4615      	mov	r5, r2
 8001b3a:	e9c7 4504 	strd	r4, r5, [r7, #16]
    if (check_memory_range(addr) == FALSE) {
 8001b3e:	69b8      	ldr	r0, [r7, #24]
 8001b40:	f7ff ff3e 	bl	80019c0 <check_memory_range>
 8001b44:	4603      	mov	r3, r0
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d10a      	bne.n	8001b60 <cbf_flash_test+0x5c>
        printf("Command is ""flash_test [Address] [Data]\r\n");
 8001b4a:	4817      	ldr	r0, [pc, #92]	@ (8001ba8 <cbf_flash_test+0xa4>)
 8001b4c:	f007 fd50 	bl	80095f0 <puts>
        printf("Flash Range is 0x%08lx ~ 0x%08lx\r\n", FLASH_RANGE_START, FLASH_RANGE_END);
 8001b50:	4a16      	ldr	r2, [pc, #88]	@ (8001bac <cbf_flash_test+0xa8>)
 8001b52:	f04f 6100 	mov.w	r1, #134217728	@ 0x8000000
 8001b56:	4816      	ldr	r0, [pc, #88]	@ (8001bb0 <cbf_flash_test+0xac>)
 8001b58:	f007 fce2 	bl	8009520 <iprintf>
        return FALSE;
 8001b5c:	2300      	movs	r3, #0
 8001b5e:	e01e      	b.n	8001b9e <cbf_flash_test+0x9a>
    }

    printf("Before : Address 0x%08lx : WR Data : 0x%08lx\r\n", (long)addr, (long)data);
 8001b60:	69bb      	ldr	r3, [r7, #24]
 8001b62:	693a      	ldr	r2, [r7, #16]
 8001b64:	4619      	mov	r1, r3
 8001b66:	4813      	ldr	r0, [pc, #76]	@ (8001bb4 <cbf_flash_test+0xb0>)
 8001b68:	f007 fcda 	bl	8009520 <iprintf>

    BOOL_e ret = FLASH_If_Erase(addr);
 8001b6c:	69b8      	ldr	r0, [r7, #24]
 8001b6e:	f7fe fedd 	bl	800092c <FLASH_If_Erase>
 8001b72:	4603      	mov	r3, r0
 8001b74:	73fb      	strb	r3, [r7, #15]
    }
#else
    UNUSED(ret);
#endif

    HAL_FLASH_Unlock();
 8001b76:	f001 fab1 	bl	80030dc <HAL_FLASH_Unlock>
    ret = HAL_FLASH_Program(FLASH_TYPEPROGRAM_DOUBLEWORD, (uint32_t)flash_addr, (uint64_t)data);
 8001b7a:	69f9      	ldr	r1, [r7, #28]
 8001b7c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001b80:	2000      	movs	r0, #0
 8001b82:	f001 fa31 	bl	8002fe8 <HAL_FLASH_Program>
 8001b86:	4603      	mov	r3, r0
 8001b88:	73fb      	strb	r3, [r7, #15]
    HAL_FLASH_Lock();
 8001b8a:	f001 fac9 	bl	8003120 <HAL_FLASH_Lock>
    if (ret != TRUE) {
        printf("Flash Test Error\r\n");
    } 
#endif

    printf("Result : 0x%08lx - 0x%08lx\r\n", (uint32_t)flash_addr, (uint32_t)*flash_addr);
 8001b8e:	69f9      	ldr	r1, [r7, #28]
 8001b90:	69fb      	ldr	r3, [r7, #28]
 8001b92:	681b      	ldr	r3, [r3, #0]
 8001b94:	461a      	mov	r2, r3
 8001b96:	4808      	ldr	r0, [pc, #32]	@ (8001bb8 <cbf_flash_test+0xb4>)
 8001b98:	f007 fcc2 	bl	8009520 <iprintf>
    return 0;
 8001b9c:	2300      	movs	r3, #0
}
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	3720      	adds	r7, #32
 8001ba2:	46bd      	mov	sp, r7
 8001ba4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ba6:	bf00      	nop
 8001ba8:	0800aa44 	.word	0x0800aa44
 8001bac:	0801fffe 	.word	0x0801fffe
 8001bb0:	0800a9e8 	.word	0x0800a9e8
 8001bb4:	0800aa6c 	.word	0x0800aa6c
 8001bb8:	0800aa9c 	.word	0x0800aa9c

08001bbc <cbf_app_fw_jump>:

#define VCCTOR_TABLE_OFFSET     4
int cbf_app_fw_jump(int argc, char *argv[])
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b086      	sub	sp, #24
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
 8001bc4:	6039      	str	r1, [r7, #0]
    printf("System Start...\r\n");
 8001bc6:	480c      	ldr	r0, [pc, #48]	@ (8001bf8 <cbf_app_fw_jump+0x3c>)
 8001bc8:	f007 fd12 	bl	80095f0 <puts>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001bcc:	b672      	cpsid	i
}
 8001bce:	bf00      	nop

    __disable_irq();
    
    pFunction Jump_To_Application;

    volatile uint32_t JumpAddress = *(__IO uint32_t*) (APPLICATION_ADDRESS + VCCTOR_TABLE_OFFSET);
 8001bd0:	4b0a      	ldr	r3, [pc, #40]	@ (8001bfc <cbf_app_fw_jump+0x40>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	60fb      	str	r3, [r7, #12]
    /* Jump to user application */
    Jump_To_Application = (pFunction) JumpAddress;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	617b      	str	r3, [r7, #20]
    /* Initialize user application's Stack Pointer */
    __set_MSP(*(__IO uint32_t*) APPLICATION_ADDRESS);
 8001bda:	4b09      	ldr	r3, [pc, #36]	@ (8001c00 <cbf_app_fw_jump+0x44>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	613b      	str	r3, [r7, #16]
  \details Assigns the given value to the Main Stack Pointer (MSP).
  \param [in]    topOfMainStack  Main Stack Pointer value to set
 */
__STATIC_FORCEINLINE void __set_MSP(uint32_t topOfMainStack)
{
  __ASM volatile ("MSR msp, %0" : : "r" (topOfMainStack) : );
 8001be0:	693b      	ldr	r3, [r7, #16]
 8001be2:	f383 8808 	msr	MSP, r3
}
 8001be6:	bf00      	nop
    Jump_To_Application(); 
 8001be8:	697b      	ldr	r3, [r7, #20]
 8001bea:	4798      	blx	r3
    return 0;
 8001bec:	2300      	movs	r3, #0
}
 8001bee:	4618      	mov	r0, r3
 8001bf0:	3718      	adds	r7, #24
 8001bf2:	46bd      	mov	sp, r7
 8001bf4:	bd80      	pop	{r7, pc}
 8001bf6:	bf00      	nop
 8001bf8:	0800aabc 	.word	0x0800aabc
 8001bfc:	08011004 	.word	0x08011004
 8001c00:	08011000 	.word	0x08011000

08001c04 <cbf_tag>:

int cbf_tag(int argc, char *argv[])
{
 8001c04:	b580      	push	{r7, lr}
 8001c06:	b082      	sub	sp, #8
 8001c08:	af00      	add	r7, sp, #0
 8001c0a:	6078      	str	r0, [r7, #4]
 8001c0c:	6039      	str	r1, [r7, #0]
    CONSOLE_SPLIT;
 8001c0e:	4807      	ldr	r0, [pc, #28]	@ (8001c2c <cbf_tag+0x28>)
 8001c10:	f007 fcee 	bl	80095f0 <puts>
    printf("FW SN\t\t\t%s\r\n", tag->fw_sn );
    printf("FW Version\t\t%s\r\n", tag->fw_version );
    printf("FW Compiled date\t%s\r\n", tag->fw_compile_data);
    printf("FW Compiled time\t%s\r\n", tag->fw_compile_time);
#else
    printf(" S M I L E  ~  :) \r\n");
 8001c14:	4806      	ldr	r0, [pc, #24]	@ (8001c30 <cbf_tag+0x2c>)
 8001c16:	f007 fceb 	bl	80095f0 <puts>
#endif
    CONSOLE_SPLIT;
 8001c1a:	4804      	ldr	r0, [pc, #16]	@ (8001c2c <cbf_tag+0x28>)
 8001c1c:	f007 fce8 	bl	80095f0 <puts>
    return 0;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	0800a614 	.word	0x0800a614
 8001c30:	0800aad0 	.word	0x0800aad0

08001c34 <cbf_test_assert>:

int cbf_test_assert(int argc, char *argv[])
{
 8001c34:	b480      	push	{r7}
 8001c36:	b083      	sub	sp, #12
 8001c38:	af00      	add	r7, sp, #0
 8001c3a:	6078      	str	r0, [r7, #4]
 8001c3c:	6039      	str	r1, [r7, #0]
	int ret = atoi(argv[1]);
    assert_param(ret);
	#endif

    //printf("sizeof(uint32_t) %d, sizeof(uint64_t) %d \r\n", sizeof(uint32_t), sizeof(uint64_t));
    return 0;
 8001c3e:	2300      	movs	r3, #0
}
 8001c40:	4618      	mov	r0, r3
 8001c42:	370c      	adds	r7, #12
 8001c44:	46bd      	mov	sp, r7
 8001c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c4a:	4770      	bx	lr

08001c4c <MX_FREERTOS_Init>:
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void)
{
 8001c4c:	b5b0      	push	{r4, r5, r7, lr}
 8001c4e:	b086      	sub	sp, #24
 8001c50:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, CLI_Task, osPriorityNormal, 0, 128);
 8001c52:	4b09      	ldr	r3, [pc, #36]	@ (8001c78 <MX_FREERTOS_Init+0x2c>)
 8001c54:	1d3c      	adds	r4, r7, #4
 8001c56:	461d      	mov	r5, r3
 8001c58:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001c5a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001c5c:	682b      	ldr	r3, [r5, #0]
 8001c5e:	6023      	str	r3, [r4, #0]
  CLI_TaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8001c60:	1d3b      	adds	r3, r7, #4
 8001c62:	2100      	movs	r1, #0
 8001c64:	4618      	mov	r0, r3
 8001c66:	f006 faa0 	bl	80081aa <osThreadCreate>
 8001c6a:	4603      	mov	r3, r0
 8001c6c:	4a03      	ldr	r2, [pc, #12]	@ (8001c7c <MX_FREERTOS_Init+0x30>)
 8001c6e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8001c70:	bf00      	nop
 8001c72:	3718      	adds	r7, #24
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bdb0      	pop	{r4, r5, r7, pc}
 8001c78:	0800ab68 	.word	0x0800ab68
 8001c7c:	200006d8 	.word	0x200006d8

08001c80 <CLI_Task>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void CLI_Task(void const * argument)
{
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    if (cli.rx_done == CLI_READY) {
 8001c88:	4b07      	ldr	r3, [pc, #28]	@ (8001ca8 <CLI_Task+0x28>)
 8001c8a:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001c8e:	2b01      	cmp	r3, #1
 8001c90:	d106      	bne.n	8001ca0 <CLI_Task+0x20>
        cli.rx_done = CLI_CLEAR;
 8001c92:	4b05      	ldr	r3, [pc, #20]	@ (8001ca8 <CLI_Task+0x28>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	f883 2081 	strb.w	r2, [r3, #129]	@ 0x81
        parser((char *)&cli.buffer[0]);
 8001c9a:	4803      	ldr	r0, [pc, #12]	@ (8001ca8 <CLI_Task+0x28>)
 8001c9c:	f7ff fc3c 	bl	8001518 <parser>
    }
    osDelay(1);
 8001ca0:	2001      	movs	r0, #1
 8001ca2:	f006 faa9 	bl	80081f8 <osDelay>
    if (cli.rx_done == CLI_READY) {
 8001ca6:	e7ef      	b.n	8001c88 <CLI_Task+0x8>
 8001ca8:	20000508 	.word	0x20000508

08001cac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001cac:	b580      	push	{r7, lr}
 8001cae:	b08a      	sub	sp, #40	@ 0x28
 8001cb0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	601a      	str	r2, [r3, #0]
 8001cba:	605a      	str	r2, [r3, #4]
 8001cbc:	609a      	str	r2, [r3, #8]
 8001cbe:	60da      	str	r2, [r3, #12]
 8001cc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001cc2:	4b28      	ldr	r3, [pc, #160]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001cc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cc6:	4a27      	ldr	r2, [pc, #156]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001cc8:	f043 0304 	orr.w	r3, r3, #4
 8001ccc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cce:	4b25      	ldr	r3, [pc, #148]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001cd0:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cd2:	f003 0304 	and.w	r3, r3, #4
 8001cd6:	613b      	str	r3, [r7, #16]
 8001cd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001cda:	4b22      	ldr	r3, [pc, #136]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001cdc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cde:	4a21      	ldr	r2, [pc, #132]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001ce0:	f043 0320 	orr.w	r3, r3, #32
 8001ce4:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001ce6:	4b1f      	ldr	r3, [pc, #124]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001ce8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cea:	f003 0320 	and.w	r3, r3, #32
 8001cee:	60fb      	str	r3, [r7, #12]
 8001cf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001cf2:	4b1c      	ldr	r3, [pc, #112]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001cf4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001cf6:	4a1b      	ldr	r2, [pc, #108]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001cf8:	f043 0301 	orr.w	r3, r3, #1
 8001cfc:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001cfe:	4b19      	ldr	r3, [pc, #100]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001d00:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d02:	f003 0301 	and.w	r3, r3, #1
 8001d06:	60bb      	str	r3, [r7, #8]
 8001d08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d0a:	4b16      	ldr	r3, [pc, #88]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001d0c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d0e:	4a15      	ldr	r2, [pc, #84]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001d10:	f043 0302 	orr.w	r3, r3, #2
 8001d14:	64d3      	str	r3, [r2, #76]	@ 0x4c
 8001d16:	4b13      	ldr	r3, [pc, #76]	@ (8001d64 <MX_GPIO_Init+0xb8>)
 8001d18:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001d1a:	f003 0302 	and.w	r3, r3, #2
 8001d1e:	607b      	str	r3, [r7, #4]
 8001d20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin  = B1_Pin;
 8001d22:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001d26:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001d28:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001d2c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001d2e:	2300      	movs	r3, #0
 8001d30:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001d32:	f107 0314 	add.w	r3, r7, #20
 8001d36:	4619      	mov	r1, r3
 8001d38:	480b      	ldr	r0, [pc, #44]	@ (8001d68 <MX_GPIO_Init+0xbc>)
 8001d3a:	f001 fc71 	bl	8003620 <HAL_GPIO_Init>


  GPIO_InitStruct.Pin   = NUCLEO431RB_LED;
 8001d3e:	2320      	movs	r3, #32
 8001d40:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode  = GPIO_MODE_OUTPUT_PP;
 8001d42:	2301      	movs	r3, #1
 8001d44:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull  = GPIO_NOPULL;
 8001d46:	2300      	movs	r3, #0
 8001d48:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NUCLEO431RB_LED_PORT, &GPIO_InitStruct);
 8001d4e:	f107 0314 	add.w	r3, r7, #20
 8001d52:	4619      	mov	r1, r3
 8001d54:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8001d58:	f001 fc62 	bl	8003620 <HAL_GPIO_Init>

}
 8001d5c:	bf00      	nop
 8001d5e:	3728      	adds	r7, #40	@ 0x28
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	40021000 	.word	0x40021000
 8001d68:	48000800 	.word	0x48000800

08001d6c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b082      	sub	sp, #8
 8001d70:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001d72:	f000 fb3c 	bl	80023ee <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001d76:	f000 f85d 	bl	8001e34 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001d7a:	f7ff ff97 	bl	8001cac <MX_GPIO_Init>
  MX_ADC1_Init();
  MX_I2C1_Init();
  MX_SPI1_Init();
  MX_DAC1_Init();
#endif
  MX_LPUART1_UART_Init();
 8001d7e:	f000 fa63 	bl	8002248 <MX_LPUART1_UART_Init>
  /* USER CODE BEGIN 2 */
  CLI_Init();
 8001d82:	f7ff fba1 	bl	80014c8 <CLI_Init>
  CONSOLE_SPLIT;
 8001d86:	4823      	ldr	r0, [pc, #140]	@ (8001e14 <main+0xa8>)
 8001d88:	f007 fc32 	bl	80095f0 <puts>
  printf("if you don't want to enter the app, press any key in 3sec\r\n");
 8001d8c:	4822      	ldr	r0, [pc, #136]	@ (8001e18 <main+0xac>)
 8001d8e:	f007 fc2f 	bl	80095f0 <puts>
  printf("timer started...\r\n");
 8001d92:	4822      	ldr	r0, [pc, #136]	@ (8001e1c <main+0xb0>)
 8001d94:	f007 fc2c 	bl	80095f0 <puts>
  CONSOLE_SPLIT;
 8001d98:	481e      	ldr	r0, [pc, #120]	@ (8001e14 <main+0xa8>)
 8001d9a:	f007 fc29 	bl	80095f0 <puts>
  
  uint16_t sec = 3, time = 0;
 8001d9e:	2303      	movs	r3, #3
 8001da0:	80fb      	strh	r3, [r7, #6]
 8001da2:	2300      	movs	r3, #0
 8001da4:	80bb      	strh	r3, [r7, #4]
  time = HAL_GetTick();
 8001da6:	f000 fb4d 	bl	8002444 <HAL_GetTick>
 8001daa:	4603      	mov	r3, r0
 8001dac:	80bb      	strh	r3, [r7, #4]
  do {
    // key detection
    if (cli.rx_done == CLI_READY) {
 8001dae:	4b1c      	ldr	r3, [pc, #112]	@ (8001e20 <main+0xb4>)
 8001db0:	f893 3081 	ldrb.w	r3, [r3, #129]	@ 0x81
 8001db4:	2b01      	cmp	r3, #1
 8001db6:	d025      	beq.n	8001e04 <main+0x98>
      break;
    }

    // Check Time sec
    if (HAL_GetTick() - time >= 1000) {
 8001db8:	f000 fb44 	bl	8002444 <HAL_GetTick>
 8001dbc:	4602      	mov	r2, r0
 8001dbe:	88bb      	ldrh	r3, [r7, #4]
 8001dc0:	1ad3      	subs	r3, r2, r3
 8001dc2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001dc6:	d311      	bcc.n	8001dec <main+0x80>
      time = HAL_GetTick();
 8001dc8:	f000 fb3c 	bl	8002444 <HAL_GetTick>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	80bb      	strh	r3, [r7, #4]
      printf("%d\r\n", sec--);
 8001dd0:	88fb      	ldrh	r3, [r7, #6]
 8001dd2:	1e5a      	subs	r2, r3, #1
 8001dd4:	80fa      	strh	r2, [r7, #6]
 8001dd6:	4619      	mov	r1, r3
 8001dd8:	4812      	ldr	r0, [pc, #72]	@ (8001e24 <main+0xb8>)
 8001dda:	f007 fba1 	bl	8009520 <iprintf>
      
      // time over & jump main app
      if (sec <= 0) {
 8001dde:	88fb      	ldrh	r3, [r7, #6]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d103      	bne.n	8001dec <main+0x80>
        cbf_app_fw_jump(0, NULL);
 8001de4:	2100      	movs	r1, #0
 8001de6:	2000      	movs	r0, #0
 8001de8:	f7ff fee8 	bl	8001bbc <cbf_app_fw_jump>
      }
    }
#if 1 // check flash bricks @ f/w app addr
    if ( *(uint32_t *)FLASH_BASE_MAIN_APP == 0xFFFFFFFF ) {
 8001dec:	4b0e      	ldr	r3, [pc, #56]	@ (8001e28 <main+0xbc>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001df4:	d1db      	bne.n	8001dae <main+0x42>
      printf("Main F/W is not found\r\n");
 8001df6:	480d      	ldr	r0, [pc, #52]	@ (8001e2c <main+0xc0>)
 8001df8:	f007 fbfa 	bl	80095f0 <puts>
      CONSOLE_AUTHEN;
 8001dfc:	480c      	ldr	r0, [pc, #48]	@ (8001e30 <main+0xc4>)
 8001dfe:	f007 fb8f 	bl	8009520 <iprintf>
      break;
 8001e02:	e000      	b.n	8001e06 <main+0x9a>
      break;
 8001e04:	bf00      	nop
#endif
  } while (1);
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in cmsis_os2.c) */
  MX_FREERTOS_Init();
 8001e06:	f7ff ff21 	bl	8001c4c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8001e0a:	f006 f9c7 	bl	800819c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001e0e:	bf00      	nop
 8001e10:	e7fd      	b.n	8001e0e <main+0xa2>
 8001e12:	bf00      	nop
 8001e14:	0800ab7c 	.word	0x0800ab7c
 8001e18:	0800abb0 	.word	0x0800abb0
 8001e1c:	0800abec 	.word	0x0800abec
 8001e20:	20000508 	.word	0x20000508
 8001e24:	0800ac00 	.word	0x0800ac00
 8001e28:	08011000 	.word	0x08011000
 8001e2c:	0800ac08 	.word	0x0800ac08
 8001e30:	0800ac20 	.word	0x0800ac20

08001e34 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b094      	sub	sp, #80	@ 0x50
 8001e38:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001e3a:	f107 0318 	add.w	r3, r7, #24
 8001e3e:	2238      	movs	r2, #56	@ 0x38
 8001e40:	2100      	movs	r1, #0
 8001e42:	4618      	mov	r0, r3
 8001e44:	f007 fd70 	bl	8009928 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001e48:	1d3b      	adds	r3, r7, #4
 8001e4a:	2200      	movs	r2, #0
 8001e4c:	601a      	str	r2, [r3, #0]
 8001e4e:	605a      	str	r2, [r3, #4]
 8001e50:	609a      	str	r2, [r3, #8]
 8001e52:	60da      	str	r2, [r3, #12]
 8001e54:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001e56:	2000      	movs	r0, #0
 8001e58:	f001 fe58 	bl	8003b0c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001e5c:	2302      	movs	r3, #2
 8001e5e:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001e60:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001e64:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001e66:	2340      	movs	r3, #64	@ 0x40
 8001e68:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001e6a:	2302      	movs	r3, #2
 8001e6c:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001e6e:	2302      	movs	r3, #2
 8001e70:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV4;
 8001e72:	2304      	movs	r3, #4
 8001e74:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8001e76:	2355      	movs	r3, #85	@ 0x55
 8001e78:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001e7a:	2302      	movs	r3, #2
 8001e7c:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001e7e:	2302      	movs	r3, #2
 8001e80:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8001e82:	2302      	movs	r3, #2
 8001e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001e86:	f107 0318 	add.w	r3, r7, #24
 8001e8a:	4618      	mov	r0, r3
 8001e8c:	f001 ff02 	bl	8003c94 <HAL_RCC_OscConfig>
 8001e90:	4603      	mov	r3, r0
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	d001      	beq.n	8001e9a <SystemClock_Config+0x66>
  {
    Error_Handler();
 8001e96:	f000 f82b 	bl	8001ef0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001e9a:	230f      	movs	r3, #15
 8001e9c:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001e9e:	2303      	movs	r3, #3
 8001ea0:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001eaa:	2300      	movs	r3, #0
 8001eac:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001eae:	1d3b      	adds	r3, r7, #4
 8001eb0:	2104      	movs	r1, #4
 8001eb2:	4618      	mov	r0, r3
 8001eb4:	f002 fafa 	bl	80044ac <HAL_RCC_ClockConfig>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d001      	beq.n	8001ec2 <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001ebe:	f000 f817 	bl	8001ef0 <Error_Handler>
  }
}
 8001ec2:	bf00      	nop
 8001ec4:	3750      	adds	r7, #80	@ 0x50
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	bd80      	pop	{r7, pc}
	...

08001ecc <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b082      	sub	sp, #8
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4a04      	ldr	r2, [pc, #16]	@ (8001eec <HAL_TIM_PeriodElapsedCallback+0x20>)
 8001eda:	4293      	cmp	r3, r2
 8001edc:	d101      	bne.n	8001ee2 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001ede:	f000 fa9f 	bl	8002420 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001ee2:	bf00      	nop
 8001ee4:	3708      	adds	r7, #8
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	40012c00 	.word	0x40012c00

08001ef0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001ef0:	b480      	push	{r7}
 8001ef2:	af00      	add	r7, sp, #0
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef4:	b672      	cpsid	i
}
 8001ef6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef8:	bf00      	nop
 8001efa:	e7fd      	b.n	8001ef8 <Error_Handler+0x8>

08001efc <assert_failed>:
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
 8001efc:	b480      	push	{r7}
 8001efe:	b083      	sub	sp, #12
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
 8001f04:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  /* User can add his own implementation to report the file name and line number,
     ex: printf("Wrong parameters value: file %s on line %d\r\n", file, line) */
  /* USER CODE END 6 */
}
 8001f06:	bf00      	nop
 8001f08:	370c      	adds	r7, #12
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f10:	4770      	bx	lr
	...

08001f14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001f14:	b580      	push	{r7, lr}
 8001f16:	b082      	sub	sp, #8
 8001f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001f1a:	4b12      	ldr	r3, [pc, #72]	@ (8001f64 <HAL_MspInit+0x50>)
 8001f1c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f1e:	4a11      	ldr	r2, [pc, #68]	@ (8001f64 <HAL_MspInit+0x50>)
 8001f20:	f043 0301 	orr.w	r3, r3, #1
 8001f24:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f26:	4b0f      	ldr	r3, [pc, #60]	@ (8001f64 <HAL_MspInit+0x50>)
 8001f28:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f2a:	f003 0301 	and.w	r3, r3, #1
 8001f2e:	607b      	str	r3, [r7, #4]
 8001f30:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001f32:	4b0c      	ldr	r3, [pc, #48]	@ (8001f64 <HAL_MspInit+0x50>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f36:	4a0b      	ldr	r2, [pc, #44]	@ (8001f64 <HAL_MspInit+0x50>)
 8001f38:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001f3c:	6593      	str	r3, [r2, #88]	@ 0x58
 8001f3e:	4b09      	ldr	r3, [pc, #36]	@ (8001f64 <HAL_MspInit+0x50>)
 8001f40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001f42:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001f46:	603b      	str	r3, [r7, #0]
 8001f48:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001f4a:	2200      	movs	r2, #0
 8001f4c:	210f      	movs	r1, #15
 8001f4e:	f06f 0001 	mvn.w	r0, #1
 8001f52:	f000 fe7b 	bl	8002c4c <HAL_NVIC_SetPriority>

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001f56:	f001 fe8d 	bl	8003c74 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001f5a:	bf00      	nop
 8001f5c:	3708      	adds	r7, #8
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40021000 	.word	0x40021000

08001f68 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	b08c      	sub	sp, #48	@ 0x30
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8001f70:	2300      	movs	r3, #0
 8001f72:	62bb      	str	r3, [r7, #40]	@ 0x28
  uint32_t              uwPrescalerValue = 0;
 8001f74:	2300      	movs	r3, #0
 8001f76:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001f78:	4b2c      	ldr	r3, [pc, #176]	@ (800202c <HAL_InitTick+0xc4>)
 8001f7a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f7c:	4a2b      	ldr	r2, [pc, #172]	@ (800202c <HAL_InitTick+0xc4>)
 8001f7e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8001f82:	6613      	str	r3, [r2, #96]	@ 0x60
 8001f84:	4b29      	ldr	r3, [pc, #164]	@ (800202c <HAL_InitTick+0xc4>)
 8001f86:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8001f88:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001f8c:	60bb      	str	r3, [r7, #8]
 8001f8e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001f90:	f107 020c 	add.w	r2, r7, #12
 8001f94:	f107 0310 	add.w	r3, r7, #16
 8001f98:	4611      	mov	r1, r2
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f002 fd1e 	bl	80049dc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
  uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001fa0:	f002 fd06 	bl	80049b0 <HAL_RCC_GetPCLK2Freq>
 8001fa4:	62b8      	str	r0, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001fa6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001fa8:	4a21      	ldr	r2, [pc, #132]	@ (8002030 <HAL_InitTick+0xc8>)
 8001faa:	fba2 2303 	umull	r2, r3, r2, r3
 8001fae:	0c9b      	lsrs	r3, r3, #18
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001fb4:	4b1f      	ldr	r3, [pc, #124]	@ (8002034 <HAL_InitTick+0xcc>)
 8001fb6:	4a20      	ldr	r2, [pc, #128]	@ (8002038 <HAL_InitTick+0xd0>)
 8001fb8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001fba:	4b1e      	ldr	r3, [pc, #120]	@ (8002034 <HAL_InitTick+0xcc>)
 8001fbc:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001fc0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001fc2:	4a1c      	ldr	r2, [pc, #112]	@ (8002034 <HAL_InitTick+0xcc>)
 8001fc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fc6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001fc8:	4b1a      	ldr	r3, [pc, #104]	@ (8002034 <HAL_InitTick+0xcc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fce:	4b19      	ldr	r3, [pc, #100]	@ (8002034 <HAL_InitTick+0xcc>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim1);
 8001fd4:	4817      	ldr	r0, [pc, #92]	@ (8002034 <HAL_InitTick+0xcc>)
 8001fd6:	f003 f929 	bl	800522c <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001fe0:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d11b      	bne.n	8002020 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001fe8:	4812      	ldr	r0, [pc, #72]	@ (8002034 <HAL_InitTick+0xcc>)
 8001fea:	f003 fa27 	bl	800543c <HAL_TIM_Base_Start_IT>
 8001fee:	4603      	mov	r3, r0
 8001ff0:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001ff4:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d111      	bne.n	8002020 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001ffc:	2019      	movs	r0, #25
 8001ffe:	f000 fe4f 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	2b0f      	cmp	r3, #15
 8002006:	d808      	bhi.n	800201a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, TickPriority, 0U);
 8002008:	2200      	movs	r2, #0
 800200a:	6879      	ldr	r1, [r7, #4]
 800200c:	2019      	movs	r0, #25
 800200e:	f000 fe1d 	bl	8002c4c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002012:	4a0a      	ldr	r2, [pc, #40]	@ (800203c <HAL_InitTick+0xd4>)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	6013      	str	r3, [r2, #0]
 8002018:	e002      	b.n	8002020 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800201a:	2301      	movs	r3, #1
 800201c:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002020:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002024:	4618      	mov	r0, r3
 8002026:	3730      	adds	r7, #48	@ 0x30
 8002028:	46bd      	mov	sp, r7
 800202a:	bd80      	pop	{r7, pc}
 800202c:	40021000 	.word	0x40021000
 8002030:	431bde83 	.word	0x431bde83
 8002034:	200006dc 	.word	0x200006dc
 8002038:	40012c00 	.word	0x40012c00
 800203c:	20000004 	.word	0x20000004

08002040 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002040:	b480      	push	{r7}
 8002042:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002044:	bf00      	nop
 8002046:	e7fd      	b.n	8002044 <NMI_Handler+0x4>

08002048 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002048:	b580      	push	{r7, lr}
 800204a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */
  HAL_GPIO_TogglePin(NUCLEO431RB_LED_PORT, NUCLEO431RB_LED);
 800204c:	2120      	movs	r1, #32
 800204e:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002052:	f001 fd39 	bl	8003ac8 <HAL_GPIO_TogglePin>
  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002056:	bf00      	nop
 8002058:	e7fd      	b.n	8002056 <HardFault_Handler+0xe>

0800205a <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800205a:	b480      	push	{r7}
 800205c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800205e:	bf00      	nop
 8002060:	e7fd      	b.n	800205e <MemManage_Handler+0x4>

08002062 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002062:	b480      	push	{r7}
 8002064:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002066:	bf00      	nop
 8002068:	e7fd      	b.n	8002066 <BusFault_Handler+0x4>

0800206a <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800206a:	b480      	push	{r7}
 800206c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800206e:	bf00      	nop
 8002070:	e7fd      	b.n	800206e <UsageFault_Handler+0x4>

08002072 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002072:	b480      	push	{r7}
 8002074:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002076:	bf00      	nop
 8002078:	46bd      	mov	sp, r7
 800207a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207e:	4770      	bx	lr

08002080 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8002084:	4802      	ldr	r0, [pc, #8]	@ (8002090 <DMA1_Channel1_IRQHandler+0x10>)
 8002086:	f000 feff 	bl	8002e88 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 800208a:	bf00      	nop
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	20000678 	.word	0x20000678

08002094 <ADC1_2_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupt.
  */
void ADC1_2_IRQHandler(void)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC1_2_IRQn 0 */

  /* USER CODE END ADC1_2_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8002098:	4802      	ldr	r0, [pc, #8]	@ (80020a4 <ADC1_2_IRQHandler+0x10>)
 800209a:	f000 fa47 	bl	800252c <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC1_2_IRQn 1 */

  /* USER CODE END ADC1_2_IRQn 1 */
}
 800209e:	bf00      	nop
 80020a0:	bd80      	pop	{r7, pc}
 80020a2:	bf00      	nop
 80020a4:	2000060c 	.word	0x2000060c

080020a8 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80020ac:	4802      	ldr	r0, [pc, #8]	@ (80020b8 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80020ae:	f003 fa6d 	bl	800558c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80020b2:	bf00      	nop
 80020b4:	bd80      	pop	{r7, pc}
 80020b6:	bf00      	nop
 80020b8:	200006dc 	.word	0x200006dc

080020bc <LPUART1_IRQHandler>:

/**
  * @brief This function handles LPUART1 global interrupt.
  */
void LPUART1_IRQHandler(void)
{
 80020bc:	b580      	push	{r7, lr}
 80020be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN LPUART1_IRQn 0 */

  /* USER CODE END LPUART1_IRQn 0 */
  HAL_UART_IRQHandler(&hlpuart1);
 80020c0:	4802      	ldr	r0, [pc, #8]	@ (80020cc <LPUART1_IRQHandler+0x10>)
 80020c2:	f003 fe35 	bl	8005d30 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN LPUART1_IRQn 1 */

  /* USER CODE END LPUART1_IRQn 1 */
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	2000072c 	.word	0x2000072c

080020d0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80020d0:	b480      	push	{r7}
 80020d2:	af00      	add	r7, sp, #0
  return 1;
 80020d4:	2301      	movs	r3, #1
}
 80020d6:	4618      	mov	r0, r3
 80020d8:	46bd      	mov	sp, r7
 80020da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020de:	4770      	bx	lr

080020e0 <_kill>:

int _kill(int pid, int sig)
{
 80020e0:	b580      	push	{r7, lr}
 80020e2:	b082      	sub	sp, #8
 80020e4:	af00      	add	r7, sp, #0
 80020e6:	6078      	str	r0, [r7, #4]
 80020e8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80020ea:	f007 fcd7 	bl	8009a9c <__errno>
 80020ee:	4603      	mov	r3, r0
 80020f0:	2216      	movs	r2, #22
 80020f2:	601a      	str	r2, [r3, #0]
  return -1;
 80020f4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f8:	4618      	mov	r0, r3
 80020fa:	3708      	adds	r7, #8
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bd80      	pop	{r7, pc}

08002100 <_exit>:

void _exit (int status)
{
 8002100:	b580      	push	{r7, lr}
 8002102:	b082      	sub	sp, #8
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002108:	f04f 31ff 	mov.w	r1, #4294967295
 800210c:	6878      	ldr	r0, [r7, #4]
 800210e:	f7ff ffe7 	bl	80020e0 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002112:	bf00      	nop
 8002114:	e7fd      	b.n	8002112 <_exit+0x12>

08002116 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002116:	b580      	push	{r7, lr}
 8002118:	b086      	sub	sp, #24
 800211a:	af00      	add	r7, sp, #0
 800211c:	60f8      	str	r0, [r7, #12]
 800211e:	60b9      	str	r1, [r7, #8]
 8002120:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002122:	2300      	movs	r3, #0
 8002124:	617b      	str	r3, [r7, #20]
 8002126:	e00a      	b.n	800213e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002128:	f3af 8000 	nop.w
 800212c:	4601      	mov	r1, r0
 800212e:	68bb      	ldr	r3, [r7, #8]
 8002130:	1c5a      	adds	r2, r3, #1
 8002132:	60ba      	str	r2, [r7, #8]
 8002134:	b2ca      	uxtb	r2, r1
 8002136:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002138:	697b      	ldr	r3, [r7, #20]
 800213a:	3301      	adds	r3, #1
 800213c:	617b      	str	r3, [r7, #20]
 800213e:	697a      	ldr	r2, [r7, #20]
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	429a      	cmp	r2, r3
 8002144:	dbf0      	blt.n	8002128 <_read+0x12>
  }

  return len;
 8002146:	687b      	ldr	r3, [r7, #4]
}
 8002148:	4618      	mov	r0, r3
 800214a:	3718      	adds	r7, #24
 800214c:	46bd      	mov	sp, r7
 800214e:	bd80      	pop	{r7, pc}

08002150 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002150:	b480      	push	{r7}
 8002152:	b083      	sub	sp, #12
 8002154:	af00      	add	r7, sp, #0
 8002156:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002158:	f04f 33ff 	mov.w	r3, #4294967295
}
 800215c:	4618      	mov	r0, r3
 800215e:	370c      	adds	r7, #12
 8002160:	46bd      	mov	sp, r7
 8002162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002166:	4770      	bx	lr

08002168 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002168:	b480      	push	{r7}
 800216a:	b083      	sub	sp, #12
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
 8002170:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002178:	605a      	str	r2, [r3, #4]
  return 0;
 800217a:	2300      	movs	r3, #0
}
 800217c:	4618      	mov	r0, r3
 800217e:	370c      	adds	r7, #12
 8002180:	46bd      	mov	sp, r7
 8002182:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002186:	4770      	bx	lr

08002188 <_isatty>:

int _isatty(int file)
{
 8002188:	b480      	push	{r7}
 800218a:	b083      	sub	sp, #12
 800218c:	af00      	add	r7, sp, #0
 800218e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002190:	2301      	movs	r3, #1
}
 8002192:	4618      	mov	r0, r3
 8002194:	370c      	adds	r7, #12
 8002196:	46bd      	mov	sp, r7
 8002198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800219c:	4770      	bx	lr

0800219e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800219e:	b480      	push	{r7}
 80021a0:	b085      	sub	sp, #20
 80021a2:	af00      	add	r7, sp, #0
 80021a4:	60f8      	str	r0, [r7, #12]
 80021a6:	60b9      	str	r1, [r7, #8]
 80021a8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80021aa:	2300      	movs	r3, #0
}
 80021ac:	4618      	mov	r0, r3
 80021ae:	3714      	adds	r7, #20
 80021b0:	46bd      	mov	sp, r7
 80021b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b6:	4770      	bx	lr

080021b8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b086      	sub	sp, #24
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80021c0:	4a14      	ldr	r2, [pc, #80]	@ (8002214 <_sbrk+0x5c>)
 80021c2:	4b15      	ldr	r3, [pc, #84]	@ (8002218 <_sbrk+0x60>)
 80021c4:	1ad3      	subs	r3, r2, r3
 80021c6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021c8:	697b      	ldr	r3, [r7, #20]
 80021ca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021cc:	4b13      	ldr	r3, [pc, #76]	@ (800221c <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d102      	bne.n	80021da <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021d4:	4b11      	ldr	r3, [pc, #68]	@ (800221c <_sbrk+0x64>)
 80021d6:	4a12      	ldr	r2, [pc, #72]	@ (8002220 <_sbrk+0x68>)
 80021d8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021da:	4b10      	ldr	r3, [pc, #64]	@ (800221c <_sbrk+0x64>)
 80021dc:	681a      	ldr	r2, [r3, #0]
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	4413      	add	r3, r2
 80021e2:	693a      	ldr	r2, [r7, #16]
 80021e4:	429a      	cmp	r2, r3
 80021e6:	d207      	bcs.n	80021f8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80021e8:	f007 fc58 	bl	8009a9c <__errno>
 80021ec:	4603      	mov	r3, r0
 80021ee:	220c      	movs	r2, #12
 80021f0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021f2:	f04f 33ff 	mov.w	r3, #4294967295
 80021f6:	e009      	b.n	800220c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80021f8:	4b08      	ldr	r3, [pc, #32]	@ (800221c <_sbrk+0x64>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021fe:	4b07      	ldr	r3, [pc, #28]	@ (800221c <_sbrk+0x64>)
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	4413      	add	r3, r2
 8002206:	4a05      	ldr	r2, [pc, #20]	@ (800221c <_sbrk+0x64>)
 8002208:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800220a:	68fb      	ldr	r3, [r7, #12]
}
 800220c:	4618      	mov	r0, r3
 800220e:	3718      	adds	r7, #24
 8002210:	46bd      	mov	sp, r7
 8002212:	bd80      	pop	{r7, pc}
 8002214:	20008000 	.word	0x20008000
 8002218:	00001000 	.word	0x00001000
 800221c:	20000728 	.word	0x20000728
 8002220:	20000a48 	.word	0x20000a48

08002224 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8002224:	b480      	push	{r7}
 8002226:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8002228:	4b06      	ldr	r3, [pc, #24]	@ (8002244 <SystemInit+0x20>)
 800222a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800222e:	4a05      	ldr	r2, [pc, #20]	@ (8002244 <SystemInit+0x20>)
 8002230:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002234:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002238:	bf00      	nop
 800223a:	46bd      	mov	sp, r7
 800223c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002240:	4770      	bx	lr
 8002242:	bf00      	nop
 8002244:	e000ed00 	.word	0xe000ed00

08002248 <MX_LPUART1_UART_Init>:
UART_HandleTypeDef hlpuart1;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 8002248:	b580      	push	{r7, lr}
 800224a:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800224c:	4b21      	ldr	r3, [pc, #132]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 800224e:	4a22      	ldr	r2, [pc, #136]	@ (80022d8 <MX_LPUART1_UART_Init+0x90>)
 8002250:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 8002252:	4b20      	ldr	r3, [pc, #128]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 8002254:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002258:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800225a:	4b1e      	ldr	r3, [pc, #120]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 800225c:	2200      	movs	r2, #0
 800225e:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 8002260:	4b1c      	ldr	r3, [pc, #112]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 8002262:	2200      	movs	r2, #0
 8002264:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 8002266:	4b1b      	ldr	r3, [pc, #108]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 8002268:	2200      	movs	r2, #0
 800226a:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800226c:	4b19      	ldr	r3, [pc, #100]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 800226e:	220c      	movs	r2, #12
 8002270:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8002272:	4b18      	ldr	r3, [pc, #96]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 8002274:	2200      	movs	r2, #0
 8002276:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8002278:	4b16      	ldr	r3, [pc, #88]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 800227a:	2200      	movs	r2, #0
 800227c:	621a      	str	r2, [r3, #32]
  hlpuart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 800227e:	4b15      	ldr	r3, [pc, #84]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 8002280:	2200      	movs	r2, #0
 8002282:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002284:	4b13      	ldr	r3, [pc, #76]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 8002286:	2200      	movs	r2, #0
 8002288:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800228a:	4812      	ldr	r0, [pc, #72]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 800228c:	f003 fbd8 	bl	8005a40 <HAL_UART_Init>
 8002290:	4603      	mov	r3, r0
 8002292:	2b00      	cmp	r3, #0
 8002294:	d001      	beq.n	800229a <MX_LPUART1_UART_Init+0x52>
  {
    Error_Handler();
 8002296:	f7ff fe2b 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&hlpuart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800229a:	2100      	movs	r1, #0
 800229c:	480d      	ldr	r0, [pc, #52]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 800229e:	f005 fe0f 	bl	8007ec0 <HAL_UARTEx_SetTxFifoThreshold>
 80022a2:	4603      	mov	r3, r0
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d001      	beq.n	80022ac <MX_LPUART1_UART_Init+0x64>
  {
    Error_Handler();
 80022a8:	f7ff fe22 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&hlpuart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80022ac:	2100      	movs	r1, #0
 80022ae:	4809      	ldr	r0, [pc, #36]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 80022b0:	f005 fe8a 	bl	8007fc8 <HAL_UARTEx_SetRxFifoThreshold>
 80022b4:	4603      	mov	r3, r0
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d001      	beq.n	80022be <MX_LPUART1_UART_Init+0x76>
  {
    Error_Handler();
 80022ba:	f7ff fe19 	bl	8001ef0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&hlpuart1) != HAL_OK)
 80022be:	4805      	ldr	r0, [pc, #20]	@ (80022d4 <MX_LPUART1_UART_Init+0x8c>)
 80022c0:	f005 fd9c 	bl	8007dfc <HAL_UARTEx_DisableFifoMode>
 80022c4:	4603      	mov	r3, r0
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d001      	beq.n	80022ce <MX_LPUART1_UART_Init+0x86>
  {
    Error_Handler();
 80022ca:	f7ff fe11 	bl	8001ef0 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 80022ce:	bf00      	nop
 80022d0:	bd80      	pop	{r7, pc}
 80022d2:	bf00      	nop
 80022d4:	2000072c 	.word	0x2000072c
 80022d8:	40008000 	.word	0x40008000

080022dc <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80022dc:	b580      	push	{r7, lr}
 80022de:	b09a      	sub	sp, #104	@ 0x68
 80022e0:	af00      	add	r7, sp, #0
 80022e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80022e4:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 80022e8:	2200      	movs	r2, #0
 80022ea:	601a      	str	r2, [r3, #0]
 80022ec:	605a      	str	r2, [r3, #4]
 80022ee:	609a      	str	r2, [r3, #8]
 80022f0:	60da      	str	r2, [r3, #12]
 80022f2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80022f4:	f107 0310 	add.w	r3, r7, #16
 80022f8:	2244      	movs	r2, #68	@ 0x44
 80022fa:	2100      	movs	r1, #0
 80022fc:	4618      	mov	r0, r3
 80022fe:	f007 fb13 	bl	8009928 <memset>
  if(uartHandle->Instance==LPUART1)
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	4a23      	ldr	r2, [pc, #140]	@ (8002394 <HAL_UART_MspInit+0xb8>)
 8002308:	4293      	cmp	r3, r2
 800230a:	d13e      	bne.n	800238a <HAL_UART_MspInit+0xae>

  /* USER CODE END LPUART1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_LPUART1;
 800230c:	2320      	movs	r3, #32
 800230e:	613b      	str	r3, [r7, #16]
    PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8002310:	2300      	movs	r3, #0
 8002312:	627b      	str	r3, [r7, #36]	@ 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8002314:	f107 0310 	add.w	r3, r7, #16
 8002318:	4618      	mov	r0, r3
 800231a:	f002 fbe7 	bl	8004aec <HAL_RCCEx_PeriphCLKConfig>
 800231e:	4603      	mov	r3, r0
 8002320:	2b00      	cmp	r3, #0
 8002322:	d001      	beq.n	8002328 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8002324:	f7ff fde4 	bl	8001ef0 <Error_Handler>
    }

    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 8002328:	4b1b      	ldr	r3, [pc, #108]	@ (8002398 <HAL_UART_MspInit+0xbc>)
 800232a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800232c:	4a1a      	ldr	r2, [pc, #104]	@ (8002398 <HAL_UART_MspInit+0xbc>)
 800232e:	f043 0301 	orr.w	r3, r3, #1
 8002332:	65d3      	str	r3, [r2, #92]	@ 0x5c
 8002334:	4b18      	ldr	r3, [pc, #96]	@ (8002398 <HAL_UART_MspInit+0xbc>)
 8002336:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002338:	f003 0301 	and.w	r3, r3, #1
 800233c:	60fb      	str	r3, [r7, #12]
 800233e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002340:	4b15      	ldr	r3, [pc, #84]	@ (8002398 <HAL_UART_MspInit+0xbc>)
 8002342:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002344:	4a14      	ldr	r2, [pc, #80]	@ (8002398 <HAL_UART_MspInit+0xbc>)
 8002346:	f043 0301 	orr.w	r3, r3, #1
 800234a:	64d3      	str	r3, [r2, #76]	@ 0x4c
 800234c:	4b12      	ldr	r3, [pc, #72]	@ (8002398 <HAL_UART_MspInit+0xbc>)
 800234e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002350:	f003 0301 	and.w	r3, r3, #1
 8002354:	60bb      	str	r3, [r7, #8]
 8002356:	68bb      	ldr	r3, [r7, #8]
    /**LPUART1 GPIO Configuration
    PA2     ------> LPUART1_TX
    PA3     ------> LPUART1_RX
    */
    GPIO_InitStruct.Pin = LPUART1_TX_Pin|LPUART1_RX_Pin;
 8002358:	230c      	movs	r3, #12
 800235a:	657b      	str	r3, [r7, #84]	@ 0x54
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800235c:	2302      	movs	r3, #2
 800235e:	65bb      	str	r3, [r7, #88]	@ 0x58
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002360:	2300      	movs	r3, #0
 8002362:	65fb      	str	r3, [r7, #92]	@ 0x5c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002364:	2300      	movs	r3, #0
 8002366:	663b      	str	r3, [r7, #96]	@ 0x60
    GPIO_InitStruct.Alternate = GPIO_AF12_LPUART1;
 8002368:	230c      	movs	r3, #12
 800236a:	667b      	str	r3, [r7, #100]	@ 0x64
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800236c:	f107 0354 	add.w	r3, r7, #84	@ 0x54
 8002370:	4619      	mov	r1, r3
 8002372:	f04f 4090 	mov.w	r0, #1207959552	@ 0x48000000
 8002376:	f001 f953 	bl	8003620 <HAL_GPIO_Init>

    /* LPUART1 interrupt Init */
    HAL_NVIC_SetPriority(LPUART1_IRQn, 5, 0);
 800237a:	2200      	movs	r2, #0
 800237c:	2105      	movs	r1, #5
 800237e:	205b      	movs	r0, #91	@ 0x5b
 8002380:	f000 fc64 	bl	8002c4c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(LPUART1_IRQn);
 8002384:	205b      	movs	r0, #91	@ 0x5b
 8002386:	f000 fc8b 	bl	8002ca0 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN LPUART1_MspInit 1 */

  /* USER CODE END LPUART1_MspInit 1 */
  }
}
 800238a:	bf00      	nop
 800238c:	3768      	adds	r7, #104	@ 0x68
 800238e:	46bd      	mov	sp, r7
 8002390:	bd80      	pop	{r7, pc}
 8002392:	bf00      	nop
 8002394:	40008000 	.word	0x40008000
 8002398:	40021000 	.word	0x40021000

0800239c <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 800239c:	480d      	ldr	r0, [pc, #52]	@ (80023d4 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800239e:	4685      	mov	sp, r0
  
/* Call the clock system initialization function.*/
    bl  SystemInit
 80023a0:	f7ff ff40 	bl	8002224 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80023a4:	480c      	ldr	r0, [pc, #48]	@ (80023d8 <LoopForever+0x6>)
  ldr r1, =_edata
 80023a6:	490d      	ldr	r1, [pc, #52]	@ (80023dc <LoopForever+0xa>)
  ldr r2, =_sidata
 80023a8:	4a0d      	ldr	r2, [pc, #52]	@ (80023e0 <LoopForever+0xe>)
  movs r3, #0
 80023aa:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 80023ac:	e002      	b.n	80023b4 <LoopCopyDataInit>

080023ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80023ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80023b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80023b2:	3304      	adds	r3, #4

080023b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80023b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80023b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80023b8:	d3f9      	bcc.n	80023ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80023ba:	4a0a      	ldr	r2, [pc, #40]	@ (80023e4 <LoopForever+0x12>)
  ldr r4, =_ebss
 80023bc:	4c0a      	ldr	r4, [pc, #40]	@ (80023e8 <LoopForever+0x16>)
  movs r3, #0
 80023be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80023c0:	e001      	b.n	80023c6 <LoopFillZerobss>

080023c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80023c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80023c4:	3204      	adds	r2, #4

080023c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80023c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80023c8:	d3fb      	bcc.n	80023c2 <FillZerobss>
/* Call static constructors */
    bl __libc_init_array
 80023ca:	f007 fb6d 	bl	8009aa8 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80023ce:	f7ff fccd 	bl	8001d6c <main>

080023d2 <LoopForever>:

LoopForever:
    b LoopForever
 80023d2:	e7fe      	b.n	80023d2 <LoopForever>
  ldr   r0, =_estack
 80023d4:	20008000 	.word	0x20008000
  ldr r0, =_sdata
 80023d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80023dc:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 80023e0:	0800b690 	.word	0x0800b690
  ldr r2, =_sbss
 80023e4:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 80023e8:	20000a44 	.word	0x20000a44

080023ec <COMP1_2_3_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80023ec:	e7fe      	b.n	80023ec <COMP1_2_3_IRQHandler>

080023ee <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80023ee:	b580      	push	{r7, lr}
 80023f0:	b082      	sub	sp, #8
 80023f2:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80023f4:	2300      	movs	r3, #0
 80023f6:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80023f8:	2003      	movs	r0, #3
 80023fa:	f000 fc07 	bl	8002c0c <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80023fe:	200f      	movs	r0, #15
 8002400:	f7ff fdb2 	bl	8001f68 <HAL_InitTick>
 8002404:	4603      	mov	r3, r0
 8002406:	2b00      	cmp	r3, #0
 8002408:	d002      	beq.n	8002410 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800240a:	2301      	movs	r3, #1
 800240c:	71fb      	strb	r3, [r7, #7]
 800240e:	e001      	b.n	8002414 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002410:	f7ff fd80 	bl	8001f14 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002414:	79fb      	ldrb	r3, [r7, #7]

}
 8002416:	4618      	mov	r0, r3
 8002418:	3708      	adds	r7, #8
 800241a:	46bd      	mov	sp, r7
 800241c:	bd80      	pop	{r7, pc}
	...

08002420 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002424:	4b05      	ldr	r3, [pc, #20]	@ (800243c <HAL_IncTick+0x1c>)
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	4b05      	ldr	r3, [pc, #20]	@ (8002440 <HAL_IncTick+0x20>)
 800242a:	681b      	ldr	r3, [r3, #0]
 800242c:	4413      	add	r3, r2
 800242e:	4a03      	ldr	r2, [pc, #12]	@ (800243c <HAL_IncTick+0x1c>)
 8002430:	6013      	str	r3, [r2, #0]
}
 8002432:	bf00      	nop
 8002434:	46bd      	mov	sp, r7
 8002436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800243a:	4770      	bx	lr
 800243c:	200007c0 	.word	0x200007c0
 8002440:	20000008 	.word	0x20000008

08002444 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002444:	b480      	push	{r7}
 8002446:	af00      	add	r7, sp, #0
  return uwTick;
 8002448:	4b03      	ldr	r3, [pc, #12]	@ (8002458 <HAL_GetTick+0x14>)
 800244a:	681b      	ldr	r3, [r3, #0]
}
 800244c:	4618      	mov	r0, r3
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
 8002456:	bf00      	nop
 8002458:	200007c0 	.word	0x200007c0

0800245c <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 800245c:	b480      	push	{r7}
 800245e:	b083      	sub	sp, #12
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	68db      	ldr	r3, [r3, #12]
 8002468:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 800246c:	2b00      	cmp	r3, #0
 800246e:	d101      	bne.n	8002474 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002470:	2301      	movs	r3, #1
 8002472:	e000      	b.n	8002476 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	370c      	adds	r7, #12
 800247a:	46bd      	mov	sp, r7
 800247c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002480:	4770      	bx	lr

08002482 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 8002482:	b480      	push	{r7}
 8002484:	b083      	sub	sp, #12
 8002486:	af00      	add	r7, sp, #0
 8002488:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800248e:	f403 73c0 	and.w	r3, r3, #384	@ 0x180
 8002492:	2b00      	cmp	r3, #0
 8002494:	d101      	bne.n	800249a <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 8002496:	2301      	movs	r3, #1
 8002498:	e000      	b.n	800249c <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800249a:	2300      	movs	r3, #0
}
 800249c:	4618      	mov	r0, r3
 800249e:	370c      	adds	r7, #12
 80024a0:	46bd      	mov	sp, r7
 80024a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024a6:	4770      	bx	lr

080024a8 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024a8:	b480      	push	{r7}
 80024aa:	b083      	sub	sp, #12
 80024ac:	af00      	add	r7, sp, #0
 80024ae:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80024b0:	687b      	ldr	r3, [r7, #4]
 80024b2:	689b      	ldr	r3, [r3, #8]
 80024b4:	f003 031f 	and.w	r3, r3, #31
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	370c      	adds	r7, #12
 80024bc:	46bd      	mov	sp, r7
 80024be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c2:	4770      	bx	lr

080024c4 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_LIMIT_RES8_6B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES12_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_UNLMT_RES8_6B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 80024c4:	b480      	push	{r7}
 80024c6:	b083      	sub	sp, #12
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG));
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	689b      	ldr	r3, [r3, #8]
 80024d0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
}
 80024d4:	4618      	mov	r0, r3
 80024d6:	370c      	adds	r7, #12
 80024d8:	46bd      	mov	sp, r7
 80024da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024de:	4770      	bx	lr

080024e0 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80024e0:	b480      	push	{r7}
 80024e2:	b083      	sub	sp, #12
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	689b      	ldr	r3, [r3, #8]
 80024ec:	f003 0304 	and.w	r3, r3, #4
 80024f0:	2b04      	cmp	r3, #4
 80024f2:	d101      	bne.n	80024f8 <LL_ADC_REG_IsConversionOngoing+0x18>
 80024f4:	2301      	movs	r3, #1
 80024f6:	e000      	b.n	80024fa <LL_ADC_REG_IsConversionOngoing+0x1a>
 80024f8:	2300      	movs	r3, #0
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	370c      	adds	r7, #12
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr

08002506 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8002506:	b480      	push	{r7}
 8002508:	b083      	sub	sp, #12
 800250a:	af00      	add	r7, sp, #0
 800250c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	689b      	ldr	r3, [r3, #8]
 8002512:	f003 0308 	and.w	r3, r3, #8
 8002516:	2b08      	cmp	r3, #8
 8002518:	d101      	bne.n	800251e <LL_ADC_INJ_IsConversionOngoing+0x18>
 800251a:	2301      	movs	r3, #1
 800251c:	e000      	b.n	8002520 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 800251e:	2300      	movs	r3, #0
}
 8002520:	4618      	mov	r0, r3
 8002522:	370c      	adds	r7, #12
 8002524:	46bd      	mov	sp, r7
 8002526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800252a:	4770      	bx	lr

0800252c <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 800252c:	b580      	push	{r7, lr}
 800252e:	b08a      	sub	sp, #40	@ 0x28
 8002530:	af00      	add	r7, sp, #0
 8002532:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8002534:	2300      	movs	r3, #0
 8002536:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8002538:	687b      	ldr	r3, [r7, #4]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	685b      	ldr	r3, [r3, #4]
 8002546:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
#if defined(ADC_MULTIMODE_SUPPORT)
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002548:	4891      	ldr	r0, [pc, #580]	@ (8002790 <HAL_ADC_IRQHandler+0x264>)
 800254a:	f7ff ffad 	bl	80024a8 <LL_ADC_GetMultimode>
 800254e:	6178      	str	r0, [r7, #20]
#endif /* ADC_MULTIMODE_SUPPORT */

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	f1b3 4fa0 	cmp.w	r3, #1342177280	@ 0x50000000
 8002558:	d009      	beq.n	800256e <HAL_ADC_IRQHandler+0x42>
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	4a8d      	ldr	r2, [pc, #564]	@ (8002794 <HAL_ADC_IRQHandler+0x268>)
 8002560:	4293      	cmp	r3, r2
 8002562:	d004      	beq.n	800256e <HAL_ADC_IRQHandler+0x42>
 8002564:	f44f 6110 	mov.w	r1, #2304	@ 0x900
 8002568:	488b      	ldr	r0, [pc, #556]	@ (8002798 <HAL_ADC_IRQHandler+0x26c>)
 800256a:	f7ff fcc7 	bl	8001efc <assert_failed>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	699b      	ldr	r3, [r3, #24]
 8002572:	2b04      	cmp	r3, #4
 8002574:	d008      	beq.n	8002588 <HAL_ADC_IRQHandler+0x5c>
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	699b      	ldr	r3, [r3, #24]
 800257a:	2b08      	cmp	r3, #8
 800257c:	d004      	beq.n	8002588 <HAL_ADC_IRQHandler+0x5c>
 800257e:	f640 1101 	movw	r1, #2305	@ 0x901
 8002582:	4885      	ldr	r0, [pc, #532]	@ (8002798 <HAL_ADC_IRQHandler+0x26c>)
 8002584:	f7ff fcba 	bl	8001efc <assert_failed>

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0302 	and.w	r3, r3, #2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d017      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x96>
 8002592:	69bb      	ldr	r3, [r7, #24]
 8002594:	f003 0302 	and.w	r3, r3, #2
 8002598:	2b00      	cmp	r3, #0
 800259a:	d012      	beq.n	80025c2 <HAL_ADC_IRQHandler+0x96>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800259c:	687b      	ldr	r3, [r7, #4]
 800259e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025a0:	f003 0310 	and.w	r3, r3, #16
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_ADC_IRQHandler+0x88>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025ac:	f443 6200 	orr.w	r2, r3, #2048	@ 0x800
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 80025b4:	6878      	ldr	r0, [r7, #4]
 80025b6:	f000 fa37 	bl	8002a28 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	2202      	movs	r2, #2
 80025c0:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025c2:	69fb      	ldr	r3, [r7, #28]
 80025c4:	f003 0304 	and.w	r3, r3, #4
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	d004      	beq.n	80025d6 <HAL_ADC_IRQHandler+0xaa>
 80025cc:	69bb      	ldr	r3, [r7, #24]
 80025ce:	f003 0304 	and.w	r3, r3, #4
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d10a      	bne.n	80025ec <HAL_ADC_IRQHandler+0xc0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025d6:	69fb      	ldr	r3, [r7, #28]
 80025d8:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 80025dc:	2b00      	cmp	r3, #0
 80025de:	f000 8085 	beq.w	80026ec <HAL_ADC_IRQHandler+0x1c0>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f003 0308 	and.w	r3, r3, #8
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d07f      	beq.n	80026ec <HAL_ADC_IRQHandler+0x1c0>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025f0:	f003 0310 	and.w	r3, r3, #16
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d105      	bne.n	8002604 <HAL_ADC_IRQHandler+0xd8>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80025fc:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002600:	687b      	ldr	r3, [r7, #4]
 8002602:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	681b      	ldr	r3, [r3, #0]
 8002608:	4618      	mov	r0, r3
 800260a:	f7ff ff27 	bl	800245c <LL_ADC_REG_IsTriggerSourceSWStart>
 800260e:	4603      	mov	r3, r0
 8002610:	2b00      	cmp	r3, #0
 8002612:	d064      	beq.n	80026de <HAL_ADC_IRQHandler+0x1b2>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
#if defined(ADC_MULTIMODE_SUPPORT)
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	681b      	ldr	r3, [r3, #0]
 8002618:	4a5e      	ldr	r2, [pc, #376]	@ (8002794 <HAL_ADC_IRQHandler+0x268>)
 800261a:	4293      	cmp	r3, r2
 800261c:	d002      	beq.n	8002624 <HAL_ADC_IRQHandler+0xf8>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	681b      	ldr	r3, [r3, #0]
 8002622:	e001      	b.n	8002628 <HAL_ADC_IRQHandler+0xfc>
 8002624:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002628:	687a      	ldr	r2, [r7, #4]
 800262a:	6812      	ldr	r2, [r2, #0]
 800262c:	4293      	cmp	r3, r2
 800262e:	d008      	beq.n	8002642 <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002630:	697b      	ldr	r3, [r7, #20]
 8002632:	2b00      	cmp	r3, #0
 8002634:	d005      	beq.n	8002642 <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002636:	697b      	ldr	r3, [r7, #20]
 8002638:	2b05      	cmp	r3, #5
 800263a:	d002      	beq.n	8002642 <HAL_ADC_IRQHandler+0x116>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 800263c:	697b      	ldr	r3, [r7, #20]
 800263e:	2b09      	cmp	r3, #9
 8002640:	d104      	bne.n	800264c <HAL_ADC_IRQHandler+0x120>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	68db      	ldr	r3, [r3, #12]
 8002648:	623b      	str	r3, [r7, #32]
 800264a:	e00d      	b.n	8002668 <HAL_ADC_IRQHandler+0x13c>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a50      	ldr	r2, [pc, #320]	@ (8002794 <HAL_ADC_IRQHandler+0x268>)
 8002652:	4293      	cmp	r3, r2
 8002654:	d002      	beq.n	800265c <HAL_ADC_IRQHandler+0x130>
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	e001      	b.n	8002660 <HAL_ADC_IRQHandler+0x134>
 800265c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 8002660:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	623b      	str	r3, [r7, #32]
#else
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
#endif /* ADC_MULTIMODE_SUPPORT */

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8002668:	6a3b      	ldr	r3, [r7, #32]
 800266a:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800266e:	2b00      	cmp	r3, #0
 8002670:	d135      	bne.n	80026de <HAL_ADC_IRQHandler+0x1b2>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f003 0308 	and.w	r3, r3, #8
 800267c:	2b08      	cmp	r3, #8
 800267e:	d12e      	bne.n	80026de <HAL_ADC_IRQHandler+0x1b2>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	4618      	mov	r0, r3
 8002686:	f7ff ff2b 	bl	80024e0 <LL_ADC_REG_IsConversionOngoing>
 800268a:	4603      	mov	r3, r0
 800268c:	2b00      	cmp	r3, #0
 800268e:	d11a      	bne.n	80026c6 <HAL_ADC_IRQHandler+0x19a>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	685a      	ldr	r2, [r3, #4]
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	f022 020c 	bic.w	r2, r2, #12
 800269e:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026a4:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	65da      	str	r2, [r3, #92]	@ 0x5c

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026b0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d112      	bne.n	80026de <HAL_ADC_IRQHandler+0x1b2>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026bc:	f043 0201 	orr.w	r2, r3, #1
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80026c4:	e00b      	b.n	80026de <HAL_ADC_IRQHandler+0x1b2>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80026ca:	f043 0210 	orr.w	r2, r3, #16
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	65da      	str	r2, [r3, #92]	@ 0x5c

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 80026d6:	f043 0201 	orr.w	r2, r3, #1
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	661a      	str	r2, [r3, #96]	@ 0x60
    /*       possibility to use:                                              */
    /*        " if ( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "               */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80026de:	6878      	ldr	r0, [r7, #4]
 80026e0:	f000 f95c 	bl	800299c <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	681b      	ldr	r3, [r3, #0]
 80026e8:	220c      	movs	r2, #12
 80026ea:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 80026ec:	69fb      	ldr	r3, [r7, #28]
 80026ee:	f003 0320 	and.w	r3, r3, #32
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d004      	beq.n	8002700 <HAL_ADC_IRQHandler+0x1d4>
 80026f6:	69bb      	ldr	r3, [r7, #24]
 80026f8:	f003 0320 	and.w	r3, r3, #32
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d10b      	bne.n	8002718 <HAL_ADC_IRQHandler+0x1ec>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8002700:	69fb      	ldr	r3, [r7, #28]
 8002702:	f003 0340 	and.w	r3, r3, #64	@ 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8002706:	2b00      	cmp	r3, #0
 8002708:	f000 80a0 	beq.w	800284c <HAL_ADC_IRQHandler+0x320>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002712:	2b00      	cmp	r3, #0
 8002714:	f000 809a 	beq.w	800284c <HAL_ADC_IRQHandler+0x320>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800271c:	f003 0310 	and.w	r3, r3, #16
 8002720:	2b00      	cmp	r3, #0
 8002722:	d105      	bne.n	8002730 <HAL_ADC_IRQHandler+0x204>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8002724:	687b      	ldr	r3, [r7, #4]
 8002726:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002728:	f443 5200 	orr.w	r2, r3, #8192	@ 0x2000
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	65da      	str	r2, [r3, #92]	@ 0x5c
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	4618      	mov	r0, r3
 8002736:	f7ff fea4 	bl	8002482 <LL_ADC_INJ_IsTriggerSourceSWStart>
 800273a:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	4618      	mov	r0, r3
 8002742:	f7ff fe8b 	bl	800245c <LL_ADC_REG_IsTriggerSourceSWStart>
 8002746:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
#if defined(ADC_MULTIMODE_SUPPORT)
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4a11      	ldr	r2, [pc, #68]	@ (8002794 <HAL_ADC_IRQHandler+0x268>)
 800274e:	4293      	cmp	r3, r2
 8002750:	d002      	beq.n	8002758 <HAL_ADC_IRQHandler+0x22c>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	e001      	b.n	800275c <HAL_ADC_IRQHandler+0x230>
 8002758:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 800275c:	687a      	ldr	r2, [r7, #4]
 800275e:	6812      	ldr	r2, [r2, #0]
 8002760:	4293      	cmp	r3, r2
 8002762:	d008      	beq.n	8002776 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002764:	697b      	ldr	r3, [r7, #20]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d005      	beq.n	8002776 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 800276a:	697b      	ldr	r3, [r7, #20]
 800276c:	2b06      	cmp	r3, #6
 800276e:	d002      	beq.n	8002776 <HAL_ADC_IRQHandler+0x24a>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8002770:	697b      	ldr	r3, [r7, #20]
 8002772:	2b07      	cmp	r3, #7
 8002774:	d104      	bne.n	8002780 <HAL_ADC_IRQHandler+0x254>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8002776:	687b      	ldr	r3, [r7, #4]
 8002778:	681b      	ldr	r3, [r3, #0]
 800277a:	68db      	ldr	r3, [r3, #12]
 800277c:	623b      	str	r3, [r7, #32]
 800277e:	e013      	b.n	80027a8 <HAL_ADC_IRQHandler+0x27c>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	4a03      	ldr	r2, [pc, #12]	@ (8002794 <HAL_ADC_IRQHandler+0x268>)
 8002786:	4293      	cmp	r3, r2
 8002788:	d008      	beq.n	800279c <HAL_ADC_IRQHandler+0x270>
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	681b      	ldr	r3, [r3, #0]
 800278e:	e007      	b.n	80027a0 <HAL_ADC_IRQHandler+0x274>
 8002790:	50000300 	.word	0x50000300
 8002794:	50000100 	.word	0x50000100
 8002798:	0800ac2c 	.word	0x0800ac2c
 800279c:	f04f 43a0 	mov.w	r3, #1342177280	@ 0x50000000
 80027a0:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 80027a2:	693b      	ldr	r3, [r7, #16]
 80027a4:	68db      	ldr	r3, [r3, #12]
 80027a6:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d047      	beq.n	800283e <HAL_ADC_IRQHandler+0x312>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 80027ae:	6a3b      	ldr	r3, [r7, #32]
 80027b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d007      	beq.n	80027c8 <HAL_ADC_IRQHandler+0x29c>
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d03f      	beq.n	800283e <HAL_ADC_IRQHandler+0x312>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 80027be:	6a3b      	ldr	r3, [r7, #32]
 80027c0:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	d13a      	bne.n	800283e <HAL_ADC_IRQHandler+0x312>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80027d2:	2b40      	cmp	r3, #64	@ 0x40
 80027d4:	d133      	bne.n	800283e <HAL_ADC_IRQHandler+0x312>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 80027d6:	6a3b      	ldr	r3, [r7, #32]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d12e      	bne.n	800283e <HAL_ADC_IRQHandler+0x312>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7ff fe8e 	bl	8002506 <LL_ADC_INJ_IsConversionOngoing>
 80027ea:	4603      	mov	r3, r0
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d11a      	bne.n	8002826 <HAL_ADC_IRQHandler+0x2fa>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	685a      	ldr	r2, [r3, #4]
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	f022 0260 	bic.w	r2, r2, #96	@ 0x60
 80027fe:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002804:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	65da      	str	r2, [r3, #92]	@ 0x5c

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002810:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002814:	2b00      	cmp	r3, #0
 8002816:	d112      	bne.n	800283e <HAL_ADC_IRQHandler+0x312>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800281c:	f043 0201 	orr.w	r2, r3, #1
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	65da      	str	r2, [r3, #92]	@ 0x5c
 8002824:	e00b      	b.n	800283e <HAL_ADC_IRQHandler+0x312>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800282a:	f043 0210 	orr.w	r2, r3, #16
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	65da      	str	r2, [r3, #92]	@ 0x5c

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002836:	f043 0201 	orr.w	r2, r3, #1
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	661a      	str	r2, [r3, #96]	@ 0x60
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 800283e:	6878      	ldr	r0, [r7, #4]
 8002840:	f000 f8ca 	bl	80029d8 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	2260      	movs	r2, #96	@ 0x60
 800284a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 800284c:	69fb      	ldr	r3, [r7, #28]
 800284e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002852:	2b00      	cmp	r3, #0
 8002854:	d011      	beq.n	800287a <HAL_ADC_IRQHandler+0x34e>
 8002856:	69bb      	ldr	r3, [r7, #24]
 8002858:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800285c:	2b00      	cmp	r3, #0
 800285e:	d00c      	beq.n	800287a <HAL_ADC_IRQHandler+0x34e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002864:	f443 3280 	orr.w	r2, r3, #65536	@ 0x10000
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 800286c:	6878      	ldr	r0, [r7, #4]
 800286e:	f000 f89f 	bl	80029b0 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	2280      	movs	r2, #128	@ 0x80
 8002878:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 800287a:	69fb      	ldr	r3, [r7, #28]
 800287c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002880:	2b00      	cmp	r3, #0
 8002882:	d012      	beq.n	80028aa <HAL_ADC_IRQHandler+0x37e>
 8002884:	69bb      	ldr	r3, [r7, #24]
 8002886:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00d      	beq.n	80028aa <HAL_ADC_IRQHandler+0x37e>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 800288e:	687b      	ldr	r3, [r7, #4]
 8002890:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002892:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 800289a:	6878      	ldr	r0, [r7, #4]
 800289c:	f000 f8b0 	bl	8002a00 <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80028a8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 80028aa:	69fb      	ldr	r3, [r7, #28]
 80028ac:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d012      	beq.n	80028da <HAL_ADC_IRQHandler+0x3ae>
 80028b4:	69bb      	ldr	r3, [r7, #24]
 80028b6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d00d      	beq.n	80028da <HAL_ADC_IRQHandler+0x3ae>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 80028c2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 80028ca:	6878      	ldr	r0, [r7, #4]
 80028cc:	f000 f8a2 	bl	8002a14 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	681b      	ldr	r3, [r3, #0]
 80028d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80028d8:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 80028da:	69fb      	ldr	r3, [r7, #28]
 80028dc:	f003 0310 	and.w	r3, r3, #16
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d036      	beq.n	8002952 <HAL_ADC_IRQHandler+0x426>
 80028e4:	69bb      	ldr	r3, [r7, #24]
 80028e6:	f003 0310 	and.w	r3, r3, #16
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d031      	beq.n	8002952 <HAL_ADC_IRQHandler+0x426>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d102      	bne.n	80028fc <HAL_ADC_IRQHandler+0x3d0>
    {
      overrun_error = 1UL;
 80028f6:	2301      	movs	r3, #1
 80028f8:	627b      	str	r3, [r7, #36]	@ 0x24
 80028fa:	e014      	b.n	8002926 <HAL_ADC_IRQHandler+0x3fa>
    }
    else
    {
      /* Check DMA configuration */
#if defined(ADC_MULTIMODE_SUPPORT)
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 80028fc:	697b      	ldr	r3, [r7, #20]
 80028fe:	2b00      	cmp	r3, #0
 8002900:	d008      	beq.n	8002914 <HAL_ADC_IRQHandler+0x3e8>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8002902:	4825      	ldr	r0, [pc, #148]	@ (8002998 <HAL_ADC_IRQHandler+0x46c>)
 8002904:	f7ff fdde 	bl	80024c4 <LL_ADC_GetMultiDMATransfer>
 8002908:	4603      	mov	r3, r0
 800290a:	2b00      	cmp	r3, #0
 800290c:	d00b      	beq.n	8002926 <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 800290e:	2301      	movs	r3, #1
 8002910:	627b      	str	r3, [r7, #36]	@ 0x24
 8002912:	e008      	b.n	8002926 <HAL_ADC_IRQHandler+0x3fa>
      }
      else
#endif /* ADC_MULTIMODE_SUPPORT */
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMAEN) != 0UL)
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	68db      	ldr	r3, [r3, #12]
 800291a:	f003 0301 	and.w	r3, r3, #1
 800291e:	2b00      	cmp	r3, #0
 8002920:	d001      	beq.n	8002926 <HAL_ADC_IRQHandler+0x3fa>
        {
          overrun_error = 1UL;
 8002922:	2301      	movs	r3, #1
 8002924:	627b      	str	r3, [r7, #36]	@ 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8002926:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002928:	2b01      	cmp	r3, #1
 800292a:	d10e      	bne.n	800294a <HAL_ADC_IRQHandler+0x41e>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002930:	f443 6280 	orr.w	r2, r3, #1024	@ 0x400
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	65da      	str	r2, [r3, #92]	@ 0x5c

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800293c:	f043 0202 	orr.w	r2, r3, #2
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	661a      	str	r2, [r3, #96]	@ 0x60
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8002944:	6878      	ldr	r0, [r7, #4]
 8002946:	f000 f83d 	bl	80029c4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	2210      	movs	r2, #16
 8002950:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002958:	2b00      	cmp	r3, #0
 800295a:	d018      	beq.n	800298e <HAL_ADC_IRQHandler+0x462>
 800295c:	69bb      	ldr	r3, [r7, #24]
 800295e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002962:	2b00      	cmp	r3, #0
 8002964:	d013      	beq.n	800298e <HAL_ADC_IRQHandler+0x462>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 800296a:	f443 4280 	orr.w	r2, r3, #16384	@ 0x4000
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	65da      	str	r2, [r3, #92]	@ 0x5c

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8002976:	f043 0208 	orr.w	r2, r3, #8
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	661a      	str	r2, [r3, #96]	@ 0x60

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8002986:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8002988:	6878      	ldr	r0, [r7, #4]
 800298a:	f000 f82f 	bl	80029ec <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 800298e:	bf00      	nop
 8002990:	3728      	adds	r7, #40	@ 0x28
 8002992:	46bd      	mov	sp, r7
 8002994:	bd80      	pop	{r7, pc}
 8002996:	bf00      	nop
 8002998:	50000300 	.word	0x50000300

0800299c <HAL_ADC_ConvCpltCallback>:
  * @brief  Conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 800299c:	b480      	push	{r7}
 800299e:	b083      	sub	sp, #12
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvCpltCallback must be implemented in the user file.
   */
}
 80029a4:	bf00      	nop
 80029a6:	370c      	adds	r7, #12
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b083      	sub	sp, #12
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 80029b8:	bf00      	nop
 80029ba:	370c      	adds	r7, #12
 80029bc:	46bd      	mov	sp, r7
 80029be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c2:	4770      	bx	lr

080029c4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b083      	sub	sp, #12
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80029cc:	bf00      	nop
 80029ce:	370c      	adds	r7, #12
 80029d0:	46bd      	mov	sp, r7
 80029d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d6:	4770      	bx	lr

080029d8 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80029d8:	b480      	push	{r7}
 80029da:	b083      	sub	sp, #12
 80029dc:	af00      	add	r7, sp, #0
 80029de:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80029e0:	bf00      	nop
 80029e2:	370c      	adds	r7, #12
 80029e4:	46bd      	mov	sp, r7
 80029e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ea:	4770      	bx	lr

080029ec <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b083      	sub	sp, #12
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 80029f4:	bf00      	nop
 80029f6:	370c      	adds	r7, #12
 80029f8:	46bd      	mov	sp, r7
 80029fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fe:	4770      	bx	lr

08002a00 <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002a08:	bf00      	nop
 8002a0a:	370c      	adds	r7, #12
 8002a0c:	46bd      	mov	sp, r7
 8002a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a12:	4770      	bx	lr

08002a14 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b083      	sub	sp, #12
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002a1c:	bf00      	nop
 8002a1e:	370c      	adds	r7, #12
 8002a20:	46bd      	mov	sp, r7
 8002a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a26:	4770      	bx	lr

08002a28 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002a28:	b480      	push	{r7}
 8002a2a:	b083      	sub	sp, #12
 8002a2c:	af00      	add	r7, sp, #0
 8002a2e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 8002a30:	bf00      	nop
 8002a32:	370c      	adds	r7, #12
 8002a34:	46bd      	mov	sp, r7
 8002a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3a:	4770      	bx	lr

08002a3c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	b085      	sub	sp, #20
 8002a40:	af00      	add	r7, sp, #0
 8002a42:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	f003 0307 	and.w	r3, r3, #7
 8002a4a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a4c:	4b0c      	ldr	r3, [pc, #48]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a4e:	68db      	ldr	r3, [r3, #12]
 8002a50:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a52:	68ba      	ldr	r2, [r7, #8]
 8002a54:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a58:	4013      	ands	r3, r2
 8002a5a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a5c:	68fb      	ldr	r3, [r7, #12]
 8002a5e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a60:	68bb      	ldr	r3, [r7, #8]
 8002a62:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a64:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a68:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a6c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a6e:	4a04      	ldr	r2, [pc, #16]	@ (8002a80 <__NVIC_SetPriorityGrouping+0x44>)
 8002a70:	68bb      	ldr	r3, [r7, #8]
 8002a72:	60d3      	str	r3, [r2, #12]
}
 8002a74:	bf00      	nop
 8002a76:	3714      	adds	r7, #20
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a7e:	4770      	bx	lr
 8002a80:	e000ed00 	.word	0xe000ed00

08002a84 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a84:	b480      	push	{r7}
 8002a86:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a88:	4b04      	ldr	r3, [pc, #16]	@ (8002a9c <__NVIC_GetPriorityGrouping+0x18>)
 8002a8a:	68db      	ldr	r3, [r3, #12]
 8002a8c:	0a1b      	lsrs	r3, r3, #8
 8002a8e:	f003 0307 	and.w	r3, r3, #7
}
 8002a92:	4618      	mov	r0, r3
 8002a94:	46bd      	mov	sp, r7
 8002a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9a:	4770      	bx	lr
 8002a9c:	e000ed00 	.word	0xe000ed00

08002aa0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	b083      	sub	sp, #12
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	2b00      	cmp	r3, #0
 8002ab0:	db0b      	blt.n	8002aca <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ab2:	79fb      	ldrb	r3, [r7, #7]
 8002ab4:	f003 021f 	and.w	r2, r3, #31
 8002ab8:	4907      	ldr	r1, [pc, #28]	@ (8002ad8 <__NVIC_EnableIRQ+0x38>)
 8002aba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002abe:	095b      	lsrs	r3, r3, #5
 8002ac0:	2001      	movs	r0, #1
 8002ac2:	fa00 f202 	lsl.w	r2, r0, r2
 8002ac6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad4:	4770      	bx	lr
 8002ad6:	bf00      	nop
 8002ad8:	e000e100 	.word	0xe000e100

08002adc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b083      	sub	sp, #12
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	4603      	mov	r3, r0
 8002ae4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	db12      	blt.n	8002b14 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002aee:	79fb      	ldrb	r3, [r7, #7]
 8002af0:	f003 021f 	and.w	r2, r3, #31
 8002af4:	490a      	ldr	r1, [pc, #40]	@ (8002b20 <__NVIC_DisableIRQ+0x44>)
 8002af6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afa:	095b      	lsrs	r3, r3, #5
 8002afc:	2001      	movs	r0, #1
 8002afe:	fa00 f202 	lsl.w	r2, r0, r2
 8002b02:	3320      	adds	r3, #32
 8002b04:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b08:	f3bf 8f4f 	dsb	sy
}
 8002b0c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b0e:	f3bf 8f6f 	isb	sy
}
 8002b12:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b14:	bf00      	nop
 8002b16:	370c      	adds	r7, #12
 8002b18:	46bd      	mov	sp, r7
 8002b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b1e:	4770      	bx	lr
 8002b20:	e000e100 	.word	0xe000e100

08002b24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b24:	b480      	push	{r7}
 8002b26:	b083      	sub	sp, #12
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	4603      	mov	r3, r0
 8002b2c:	6039      	str	r1, [r7, #0]
 8002b2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	db0a      	blt.n	8002b4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b38:	683b      	ldr	r3, [r7, #0]
 8002b3a:	b2da      	uxtb	r2, r3
 8002b3c:	490c      	ldr	r1, [pc, #48]	@ (8002b70 <__NVIC_SetPriority+0x4c>)
 8002b3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b42:	0112      	lsls	r2, r2, #4
 8002b44:	b2d2      	uxtb	r2, r2
 8002b46:	440b      	add	r3, r1
 8002b48:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b4c:	e00a      	b.n	8002b64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b4e:	683b      	ldr	r3, [r7, #0]
 8002b50:	b2da      	uxtb	r2, r3
 8002b52:	4908      	ldr	r1, [pc, #32]	@ (8002b74 <__NVIC_SetPriority+0x50>)
 8002b54:	79fb      	ldrb	r3, [r7, #7]
 8002b56:	f003 030f 	and.w	r3, r3, #15
 8002b5a:	3b04      	subs	r3, #4
 8002b5c:	0112      	lsls	r2, r2, #4
 8002b5e:	b2d2      	uxtb	r2, r2
 8002b60:	440b      	add	r3, r1
 8002b62:	761a      	strb	r2, [r3, #24]
}
 8002b64:	bf00      	nop
 8002b66:	370c      	adds	r7, #12
 8002b68:	46bd      	mov	sp, r7
 8002b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6e:	4770      	bx	lr
 8002b70:	e000e100 	.word	0xe000e100
 8002b74:	e000ed00 	.word	0xe000ed00

08002b78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b089      	sub	sp, #36	@ 0x24
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	60f8      	str	r0, [r7, #12]
 8002b80:	60b9      	str	r1, [r7, #8]
 8002b82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b84:	68fb      	ldr	r3, [r7, #12]
 8002b86:	f003 0307 	and.w	r3, r3, #7
 8002b8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b8c:	69fb      	ldr	r3, [r7, #28]
 8002b8e:	f1c3 0307 	rsb	r3, r3, #7
 8002b92:	2b04      	cmp	r3, #4
 8002b94:	bf28      	it	cs
 8002b96:	2304      	movcs	r3, #4
 8002b98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b9a:	69fb      	ldr	r3, [r7, #28]
 8002b9c:	3304      	adds	r3, #4
 8002b9e:	2b06      	cmp	r3, #6
 8002ba0:	d902      	bls.n	8002ba8 <NVIC_EncodePriority+0x30>
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	3b03      	subs	r3, #3
 8002ba6:	e000      	b.n	8002baa <NVIC_EncodePriority+0x32>
 8002ba8:	2300      	movs	r3, #0
 8002baa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bac:	f04f 32ff 	mov.w	r2, #4294967295
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002bb6:	43da      	mvns	r2, r3
 8002bb8:	68bb      	ldr	r3, [r7, #8]
 8002bba:	401a      	ands	r2, r3
 8002bbc:	697b      	ldr	r3, [r7, #20]
 8002bbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bc0:	f04f 31ff 	mov.w	r1, #4294967295
 8002bc4:	697b      	ldr	r3, [r7, #20]
 8002bc6:	fa01 f303 	lsl.w	r3, r1, r3
 8002bca:	43d9      	mvns	r1, r3
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd0:	4313      	orrs	r3, r2
         );
}
 8002bd2:	4618      	mov	r0, r3
 8002bd4:	3724      	adds	r7, #36	@ 0x24
 8002bd6:	46bd      	mov	sp, r7
 8002bd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bdc:	4770      	bx	lr
	...

08002be0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  __ASM volatile ("dsb 0xF":::"memory");
 8002be4:	f3bf 8f4f 	dsb	sy
}
 8002be8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8002bea:	4b06      	ldr	r3, [pc, #24]	@ (8002c04 <__NVIC_SystemReset+0x24>)
 8002bec:	68db      	ldr	r3, [r3, #12]
 8002bee:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8002bf2:	4904      	ldr	r1, [pc, #16]	@ (8002c04 <__NVIC_SystemReset+0x24>)
 8002bf4:	4b04      	ldr	r3, [pc, #16]	@ (8002c08 <__NVIC_SystemReset+0x28>)
 8002bf6:	4313      	orrs	r3, r2
 8002bf8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8002bfa:	f3bf 8f4f 	dsb	sy
}
 8002bfe:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8002c00:	bf00      	nop
 8002c02:	e7fd      	b.n	8002c00 <__NVIC_SystemReset+0x20>
 8002c04:	e000ed00 	.word	0xe000ed00
 8002c08:	05fa0004 	.word	0x05fa0004

08002c0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	b082      	sub	sp, #8
 8002c10:	af00      	add	r7, sp, #0
 8002c12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2b07      	cmp	r3, #7
 8002c18:	d00f      	beq.n	8002c3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2b06      	cmp	r3, #6
 8002c1e:	d00c      	beq.n	8002c3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2b05      	cmp	r3, #5
 8002c24:	d009      	beq.n	8002c3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2b04      	cmp	r3, #4
 8002c2a:	d006      	beq.n	8002c3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	2b03      	cmp	r3, #3
 8002c30:	d003      	beq.n	8002c3a <HAL_NVIC_SetPriorityGrouping+0x2e>
 8002c32:	21a6      	movs	r1, #166	@ 0xa6
 8002c34:	4804      	ldr	r0, [pc, #16]	@ (8002c48 <HAL_NVIC_SetPriorityGrouping+0x3c>)
 8002c36:	f7ff f961 	bl	8001efc <assert_failed>

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c3a:	6878      	ldr	r0, [r7, #4]
 8002c3c:	f7ff fefe 	bl	8002a3c <__NVIC_SetPriorityGrouping>
}
 8002c40:	bf00      	nop
 8002c42:	3708      	adds	r7, #8
 8002c44:	46bd      	mov	sp, r7
 8002c46:	bd80      	pop	{r7, pc}
 8002c48:	0800ac64 	.word	0x0800ac64

08002c4c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b086      	sub	sp, #24
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	4603      	mov	r3, r0
 8002c54:	60b9      	str	r1, [r7, #8]
 8002c56:	607a      	str	r2, [r7, #4]
 8002c58:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup;

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	2b0f      	cmp	r3, #15
 8002c5e:	d903      	bls.n	8002c68 <HAL_NVIC_SetPriority+0x1c>
 8002c60:	21be      	movs	r1, #190	@ 0xbe
 8002c62:	480e      	ldr	r0, [pc, #56]	@ (8002c9c <HAL_NVIC_SetPriority+0x50>)
 8002c64:	f7ff f94a 	bl	8001efc <assert_failed>
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
 8002c68:	68bb      	ldr	r3, [r7, #8]
 8002c6a:	2b0f      	cmp	r3, #15
 8002c6c:	d903      	bls.n	8002c76 <HAL_NVIC_SetPriority+0x2a>
 8002c6e:	21bf      	movs	r1, #191	@ 0xbf
 8002c70:	480a      	ldr	r0, [pc, #40]	@ (8002c9c <HAL_NVIC_SetPriority+0x50>)
 8002c72:	f7ff f943 	bl	8001efc <assert_failed>

  prioritygroup = NVIC_GetPriorityGrouping();
 8002c76:	f7ff ff05 	bl	8002a84 <__NVIC_GetPriorityGrouping>
 8002c7a:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7c:	687a      	ldr	r2, [r7, #4]
 8002c7e:	68b9      	ldr	r1, [r7, #8]
 8002c80:	6978      	ldr	r0, [r7, #20]
 8002c82:	f7ff ff79 	bl	8002b78 <NVIC_EncodePriority>
 8002c86:	4602      	mov	r2, r0
 8002c88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8c:	4611      	mov	r1, r2
 8002c8e:	4618      	mov	r0, r3
 8002c90:	f7ff ff48 	bl	8002b24 <__NVIC_SetPriority>
}
 8002c94:	bf00      	nop
 8002c96:	3718      	adds	r7, #24
 8002c98:	46bd      	mov	sp, r7
 8002c9a:	bd80      	pop	{r7, pc}
 8002c9c:	0800ac64 	.word	0x0800ac64

08002ca0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ca0:	b580      	push	{r7, lr}
 8002ca2:	b082      	sub	sp, #8
 8002ca4:	af00      	add	r7, sp, #0
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002caa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	da03      	bge.n	8002cba <HAL_NVIC_EnableIRQ+0x1a>
 8002cb2:	21d2      	movs	r1, #210	@ 0xd2
 8002cb4:	4805      	ldr	r0, [pc, #20]	@ (8002ccc <HAL_NVIC_EnableIRQ+0x2c>)
 8002cb6:	f7ff f921 	bl	8001efc <assert_failed>
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cbe:	4618      	mov	r0, r3
 8002cc0:	f7ff feee 	bl	8002aa0 <__NVIC_EnableIRQ>
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}
 8002ccc:	0800ac64 	.word	0x0800ac64

08002cd0 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	b082      	sub	sp, #8
 8002cd4:	af00      	add	r7, sp, #0
 8002cd6:	4603      	mov	r3, r0
 8002cd8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
 8002cda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cde:	2b00      	cmp	r3, #0
 8002ce0:	da03      	bge.n	8002cea <HAL_NVIC_DisableIRQ+0x1a>
 8002ce2:	21e2      	movs	r1, #226	@ 0xe2
 8002ce4:	4805      	ldr	r0, [pc, #20]	@ (8002cfc <HAL_NVIC_DisableIRQ+0x2c>)
 8002ce6:	f7ff f909 	bl	8001efc <assert_failed>
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cee:	4618      	mov	r0, r3
 8002cf0:	f7ff fef4 	bl	8002adc <__NVIC_DisableIRQ>
}
 8002cf4:	bf00      	nop
 8002cf6:	3708      	adds	r7, #8
 8002cf8:	46bd      	mov	sp, r7
 8002cfa:	bd80      	pop	{r7, pc}
 8002cfc:	0800ac64 	.word	0x0800ac64

08002d00 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiate a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8002d04:	f7ff ff6c 	bl	8002be0 <__NVIC_SystemReset>

08002d08 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d08:	b480      	push	{r7}
 8002d0a:	b085      	sub	sp, #20
 8002d0c:	af00      	add	r7, sp, #0
 8002d0e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d10:	2300      	movs	r3, #0
 8002d12:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d14:	687b      	ldr	r3, [r7, #4]
 8002d16:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002d1a:	b2db      	uxtb	r3, r3
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d005      	beq.n	8002d2c <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	2204      	movs	r2, #4
 8002d24:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	73fb      	strb	r3, [r7, #15]
 8002d2a:	e037      	b.n	8002d9c <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	681b      	ldr	r3, [r3, #0]
 8002d30:	681a      	ldr	r2, [r3, #0]
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	f022 020e 	bic.w	r2, r2, #14
 8002d3a:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002d46:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d4a:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	681a      	ldr	r2, [r3, #0]
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f022 0201 	bic.w	r2, r2, #1
 8002d5a:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d60:	f003 021f 	and.w	r2, r3, #31
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d68:	2101      	movs	r1, #1
 8002d6a:	fa01 f202 	lsl.w	r2, r1, r2
 8002d6e:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002d74:	687a      	ldr	r2, [r7, #4]
 8002d76:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002d78:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d00c      	beq.n	8002d9c <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d86:	681a      	ldr	r2, [r3, #0]
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002d8c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002d90:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002d96:	687a      	ldr	r2, [r7, #4]
 8002d98:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002d9a:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	2201      	movs	r2, #1
 8002da0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	2200      	movs	r2, #0
 8002da8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

  return status;
 8002dac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dae:	4618      	mov	r0, r3
 8002db0:	3714      	adds	r7, #20
 8002db2:	46bd      	mov	sp, r7
 8002db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db8:	4770      	bx	lr

08002dba <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dba:	b580      	push	{r7, lr}
 8002dbc:	b084      	sub	sp, #16
 8002dbe:	af00      	add	r7, sp, #0
 8002dc0:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	f893 3025 	ldrb.w	r3, [r3, #37]	@ 0x25
 8002dcc:	b2db      	uxtb	r3, r3
 8002dce:	2b02      	cmp	r3, #2
 8002dd0:	d00d      	beq.n	8002dee <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2204      	movs	r2, #4
 8002dd6:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2201      	movs	r2, #1
 8002ddc:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	2200      	movs	r2, #0
 8002de4:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    status = HAL_ERROR;
 8002de8:	2301      	movs	r3, #1
 8002dea:	73fb      	strb	r3, [r7, #15]
 8002dec:	e047      	b.n	8002e7e <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	681a      	ldr	r2, [r3, #0]
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f022 020e 	bic.w	r2, r2, #14
 8002dfc:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	681a      	ldr	r2, [r3, #0]
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	f022 0201 	bic.w	r2, r2, #1
 8002e0c:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e1c:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002e22:	f003 021f 	and.w	r2, r3, #31
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e2a:	2101      	movs	r1, #1
 8002e2c:	fa01 f202 	lsl.w	r2, r1, r2
 8002e30:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8002e36:	687a      	ldr	r2, [r7, #4]
 8002e38:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 8002e3a:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d00c      	beq.n	8002e5e <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e48:	681a      	ldr	r2, [r3, #0]
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e4e:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8002e52:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002e58:	687a      	ldr	r2, [r7, #4]
 8002e5a:	6dd2      	ldr	r2, [r2, #92]	@ 0x5c
 8002e5c:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	2201      	movs	r2, #1
 8002e62:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e72:	2b00      	cmp	r3, #0
 8002e74:	d003      	beq.n	8002e7e <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002e7a:	6878      	ldr	r0, [r7, #4]
 8002e7c:	4798      	blx	r3
    }
  }
  return status;
 8002e7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e80:	4618      	mov	r0, r3
 8002e82:	3710      	adds	r7, #16
 8002e84:	46bd      	mov	sp, r7
 8002e86:	bd80      	pop	{r7, pc}

08002e88 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002e88:	b580      	push	{r7, lr}
 8002e8a:	b084      	sub	sp, #16
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ea4:	f003 031f 	and.w	r3, r3, #31
 8002ea8:	2204      	movs	r2, #4
 8002eaa:	409a      	lsls	r2, r3
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	2b00      	cmp	r3, #0
 8002eb2:	d026      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x7a>
 8002eb4:	68bb      	ldr	r3, [r7, #8]
 8002eb6:	f003 0304 	and.w	r3, r3, #4
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d021      	beq.n	8002f02 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	f003 0320 	and.w	r3, r3, #32
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	d107      	bne.n	8002edc <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	681a      	ldr	r2, [r3, #0]
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f022 0204 	bic.w	r2, r2, #4
 8002eda:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ee0:	f003 021f 	and.w	r2, r3, #31
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002ee8:	2104      	movs	r1, #4
 8002eea:	fa01 f202 	lsl.w	r2, r1, r2
 8002eee:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d071      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002efc:	6878      	ldr	r0, [r7, #4]
 8002efe:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 8002f00:	e06c      	b.n	8002fdc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f06:	f003 031f 	and.w	r3, r3, #31
 8002f0a:	2202      	movs	r2, #2
 8002f0c:	409a      	lsls	r2, r3
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	4013      	ands	r3, r2
 8002f12:	2b00      	cmp	r3, #0
 8002f14:	d02e      	beq.n	8002f74 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	f003 0302 	and.w	r3, r3, #2
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	d029      	beq.n	8002f74 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	f003 0320 	and.w	r3, r3, #32
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d10b      	bne.n	8002f46 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	681a      	ldr	r2, [r3, #0]
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 020a 	bic.w	r2, r2, #10
 8002f3c:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	2201      	movs	r2, #1
 8002f42:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f4a:	f003 021f 	and.w	r2, r3, #31
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002f52:	2102      	movs	r1, #2
 8002f54:	fa01 f202 	lsl.w	r2, r1, r2
 8002f58:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	2200      	movs	r2, #0
 8002f5e:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferCpltCallback != NULL)
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d038      	beq.n	8002fdc <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002f6e:	6878      	ldr	r0, [r7, #4]
 8002f70:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8002f72:	e033      	b.n	8002fdc <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002f78:	f003 031f 	and.w	r3, r3, #31
 8002f7c:	2208      	movs	r2, #8
 8002f7e:	409a      	lsls	r2, r3
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	4013      	ands	r3, r2
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d02a      	beq.n	8002fde <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8002f88:	68bb      	ldr	r3, [r7, #8]
 8002f8a:	f003 0308 	and.w	r3, r3, #8
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d025      	beq.n	8002fde <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	681a      	ldr	r2, [r3, #0]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f022 020e 	bic.w	r2, r2, #14
 8002fa0:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002fa6:	f003 021f 	and.w	r2, r3, #31
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fae:	2101      	movs	r1, #1
 8002fb0:	fa01 f202 	lsl.w	r2, r1, r2
 8002fb4:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	2201      	movs	r2, #1
 8002fba:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2201      	movs	r2, #1
 8002fc0:	f883 2025 	strb.w	r2, [r3, #37]	@ 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	2200      	movs	r2, #0
 8002fc8:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

    if (hdma->XferErrorCallback != NULL)
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd0:	2b00      	cmp	r3, #0
 8002fd2:	d004      	beq.n	8002fde <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002fd8:	6878      	ldr	r0, [r7, #4]
 8002fda:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8002fdc:	bf00      	nop
 8002fde:	bf00      	nop
}
 8002fe0:	3710      	adds	r7, #16
 8002fe2:	46bd      	mov	sp, r7
 8002fe4:	bd80      	pop	{r7, pc}
	...

08002fe8 <HAL_FLASH_Program>:
  *         are stored the data for the row fast program.
  *
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b086      	sub	sp, #24
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	60f8      	str	r0, [r7, #12]
 8002ff0:	60b9      	str	r1, [r7, #8]
 8002ff2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status;
  uint32_t prog_bit = 0;
 8002ff6:	2300      	movs	r3, #0
 8002ff8:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d009      	beq.n	8003014 <HAL_FLASH_Program+0x2c>
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	2b01      	cmp	r3, #1
 8003004:	d006      	beq.n	8003014 <HAL_FLASH_Program+0x2c>
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	2b02      	cmp	r3, #2
 800300a:	d003      	beq.n	8003014 <HAL_FLASH_Program+0x2c>
 800300c:	21b3      	movs	r1, #179	@ 0xb3
 800300e:	4830      	ldr	r0, [pc, #192]	@ (80030d0 <HAL_FLASH_Program+0xe8>)
 8003010:	f7fe ff74 	bl	8001efc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003014:	4b2f      	ldr	r3, [pc, #188]	@ (80030d4 <HAL_FLASH_Program+0xec>)
 8003016:	781b      	ldrb	r3, [r3, #0]
 8003018:	2b01      	cmp	r3, #1
 800301a:	d101      	bne.n	8003020 <HAL_FLASH_Program+0x38>
 800301c:	2302      	movs	r3, #2
 800301e:	e053      	b.n	80030c8 <HAL_FLASH_Program+0xe0>
 8003020:	4b2c      	ldr	r3, [pc, #176]	@ (80030d4 <HAL_FLASH_Program+0xec>)
 8003022:	2201      	movs	r2, #1
 8003024:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003026:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800302a:	f000 f893 	bl	8003154 <FLASH_WaitForLastOperation>
 800302e:	4603      	mov	r3, r0
 8003030:	75fb      	strb	r3, [r7, #23]

  if (status == HAL_OK)
 8003032:	7dfb      	ldrb	r3, [r7, #23]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d143      	bne.n	80030c0 <HAL_FLASH_Program+0xd8>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003038:	4b26      	ldr	r3, [pc, #152]	@ (80030d4 <HAL_FLASH_Program+0xec>)
 800303a:	2200      	movs	r2, #0
 800303c:	605a      	str	r2, [r3, #4]

    /* Deactivate the data cache if they are activated to avoid data misbehavior */
    if(READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 800303e:	4b26      	ldr	r3, [pc, #152]	@ (80030d8 <HAL_FLASH_Program+0xf0>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003046:	2b00      	cmp	r3, #0
 8003048:	d009      	beq.n	800305e <HAL_FLASH_Program+0x76>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 800304a:	4b23      	ldr	r3, [pc, #140]	@ (80030d8 <HAL_FLASH_Program+0xf0>)
 800304c:	681b      	ldr	r3, [r3, #0]
 800304e:	4a22      	ldr	r2, [pc, #136]	@ (80030d8 <HAL_FLASH_Program+0xf0>)
 8003050:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003054:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 8003056:	4b1f      	ldr	r3, [pc, #124]	@ (80030d4 <HAL_FLASH_Program+0xec>)
 8003058:	2202      	movs	r2, #2
 800305a:	771a      	strb	r2, [r3, #28]
 800305c:	e002      	b.n	8003064 <HAL_FLASH_Program+0x7c>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 800305e:	4b1d      	ldr	r3, [pc, #116]	@ (80030d4 <HAL_FLASH_Program+0xec>)
 8003060:	2200      	movs	r2, #0
 8003062:	771a      	strb	r2, [r3, #28]
    }
    if (TypeProgram == FLASH_TYPEPROGRAM_DOUBLEWORD)
 8003064:	68fb      	ldr	r3, [r7, #12]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d107      	bne.n	800307a <HAL_FLASH_Program+0x92>
    {
      /* Program double-word (64-bit) at a specified address */
      FLASH_Program_DoubleWord(Address, Data);
 800306a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800306e:	68b8      	ldr	r0, [r7, #8]
 8003070:	f000 f8c2 	bl	80031f8 <FLASH_Program_DoubleWord>
      prog_bit = FLASH_CR_PG;
 8003074:	2301      	movs	r3, #1
 8003076:	613b      	str	r3, [r7, #16]
 8003078:	e010      	b.n	800309c <HAL_FLASH_Program+0xb4>
    }
    else if ((TypeProgram == FLASH_TYPEPROGRAM_FAST) || (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST))
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d002      	beq.n	8003086 <HAL_FLASH_Program+0x9e>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	2b02      	cmp	r3, #2
 8003084:	d10a      	bne.n	800309c <HAL_FLASH_Program+0xb4>
    {
      /* Fast program a 32 row double-word (64-bit) at a specified address */
      FLASH_Program_Fast(Address, (uint32_t)Data);
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	4619      	mov	r1, r3
 800308a:	68b8      	ldr	r0, [r7, #8]
 800308c:	f000 f908 	bl	80032a0 <FLASH_Program_Fast>

      /* If it is the last row, the bit will be cleared at the end of the operation */
      if (TypeProgram == FLASH_TYPEPROGRAM_FAST_AND_LAST)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	2b02      	cmp	r3, #2
 8003094:	d102      	bne.n	800309c <HAL_FLASH_Program+0xb4>
      {
        prog_bit = FLASH_CR_FSTPG;
 8003096:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 800309a:	613b      	str	r3, [r7, #16]
    {
      /* Nothing to do */
    }

    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800309c:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 80030a0:	f000 f858 	bl	8003154 <FLASH_WaitForLastOperation>
 80030a4:	4603      	mov	r3, r0
 80030a6:	75fb      	strb	r3, [r7, #23]

    /* If the program operation is completed, disable the PG or FSTPG Bit */
    if (prog_bit != 0U)
 80030a8:	693b      	ldr	r3, [r7, #16]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d006      	beq.n	80030bc <HAL_FLASH_Program+0xd4>
    {
      CLEAR_BIT(FLASH->CR, prog_bit);
 80030ae:	4b0a      	ldr	r3, [pc, #40]	@ (80030d8 <HAL_FLASH_Program+0xf0>)
 80030b0:	695a      	ldr	r2, [r3, #20]
 80030b2:	693b      	ldr	r3, [r7, #16]
 80030b4:	43db      	mvns	r3, r3
 80030b6:	4908      	ldr	r1, [pc, #32]	@ (80030d8 <HAL_FLASH_Program+0xf0>)
 80030b8:	4013      	ands	r3, r2
 80030ba:	614b      	str	r3, [r1, #20]
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80030bc:	f000 fa66 	bl	800358c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80030c0:	4b04      	ldr	r3, [pc, #16]	@ (80030d4 <HAL_FLASH_Program+0xec>)
 80030c2:	2200      	movs	r2, #0
 80030c4:	701a      	strb	r2, [r3, #0]

  /* return status */
  return status;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	0800aca0 	.word	0x0800aca0
 80030d4:	2000000c 	.word	0x2000000c
 80030d8:	40022000 	.word	0x40022000

080030dc <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80030dc:	b480      	push	{r7}
 80030de:	b083      	sub	sp, #12
 80030e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80030e2:	2300      	movs	r3, #0
 80030e4:	71fb      	strb	r3, [r7, #7]

  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030e6:	4b0b      	ldr	r3, [pc, #44]	@ (8003114 <HAL_FLASH_Unlock+0x38>)
 80030e8:	695b      	ldr	r3, [r3, #20]
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	da0b      	bge.n	8003106 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80030ee:	4b09      	ldr	r3, [pc, #36]	@ (8003114 <HAL_FLASH_Unlock+0x38>)
 80030f0:	4a09      	ldr	r2, [pc, #36]	@ (8003118 <HAL_FLASH_Unlock+0x3c>)
 80030f2:	609a      	str	r2, [r3, #8]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80030f4:	4b07      	ldr	r3, [pc, #28]	@ (8003114 <HAL_FLASH_Unlock+0x38>)
 80030f6:	4a09      	ldr	r2, [pc, #36]	@ (800311c <HAL_FLASH_Unlock+0x40>)
 80030f8:	609a      	str	r2, [r3, #8]

    /* verify Flash is unlocked */
    if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 80030fa:	4b06      	ldr	r3, [pc, #24]	@ (8003114 <HAL_FLASH_Unlock+0x38>)
 80030fc:	695b      	ldr	r3, [r3, #20]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	da01      	bge.n	8003106 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8003106:	79fb      	ldrb	r3, [r7, #7]
}
 8003108:	4618      	mov	r0, r3
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	40022000 	.word	0x40022000
 8003118:	45670123 	.word	0x45670123
 800311c:	cdef89ab 	.word	0xcdef89ab

08003120 <HAL_FLASH_Lock>:
/**
  * @brief  Lock the FLASH control register access.
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8003120:	b480      	push	{r7}
 8003122:	b083      	sub	sp, #12
 8003124:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_ERROR;
 8003126:	2301      	movs	r3, #1
 8003128:	71fb      	strb	r3, [r7, #7]

  /* Set the LOCK Bit to lock the FLASH Registers access */
  SET_BIT(FLASH->CR, FLASH_CR_LOCK);
 800312a:	4b09      	ldr	r3, [pc, #36]	@ (8003150 <HAL_FLASH_Lock+0x30>)
 800312c:	695b      	ldr	r3, [r3, #20]
 800312e:	4a08      	ldr	r2, [pc, #32]	@ (8003150 <HAL_FLASH_Lock+0x30>)
 8003130:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8003134:	6153      	str	r3, [r2, #20]

  /* verify Flash is locked */
  if (READ_BIT(FLASH->CR, FLASH_CR_LOCK) != 0U)
 8003136:	4b06      	ldr	r3, [pc, #24]	@ (8003150 <HAL_FLASH_Lock+0x30>)
 8003138:	695b      	ldr	r3, [r3, #20]
 800313a:	2b00      	cmp	r3, #0
 800313c:	da01      	bge.n	8003142 <HAL_FLASH_Lock+0x22>
  {
    status = HAL_OK;
 800313e:	2300      	movs	r3, #0
 8003140:	71fb      	strb	r3, [r7, #7]
  }

  return status;
 8003142:	79fb      	ldrb	r3, [r7, #7]
}
 8003144:	4618      	mov	r0, r3
 8003146:	370c      	adds	r7, #12
 8003148:	46bd      	mov	sp, r7
 800314a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800314e:	4770      	bx	lr
 8003150:	40022000 	.word	0x40022000

08003154 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operation timeout.
  * @retval HAL_Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 8003154:	b580      	push	{r7, lr}
 8003156:	b084      	sub	sp, #16
 8003158:	af00      	add	r7, sp, #0
 800315a:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */

  uint32_t tickstart = HAL_GetTick();
 800315c:	f7ff f972 	bl	8002444 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]
  uint32_t error;

  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003162:	e009      	b.n	8003178 <FLASH_WaitForLastOperation+0x24>
  {
    if ((HAL_GetTick() - tickstart) > Timeout)
 8003164:	f7ff f96e 	bl	8002444 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	687a      	ldr	r2, [r7, #4]
 8003170:	429a      	cmp	r2, r3
 8003172:	d201      	bcs.n	8003178 <FLASH_WaitForLastOperation+0x24>
    {
      return HAL_TIMEOUT;
 8003174:	2303      	movs	r3, #3
 8003176:	e037      	b.n	80031e8 <FLASH_WaitForLastOperation+0x94>
  while (__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY))
 8003178:	4b1d      	ldr	r3, [pc, #116]	@ (80031f0 <FLASH_WaitForLastOperation+0x9c>)
 800317a:	691b      	ldr	r3, [r3, #16]
 800317c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003184:	d0ee      	beq.n	8003164 <FLASH_WaitForLastOperation+0x10>
    }
  }

  /* Check FLASH operation error flags */
  error = (FLASH->SR & FLASH_FLAG_SR_ERRORS);
 8003186:	4b1a      	ldr	r3, [pc, #104]	@ (80031f0 <FLASH_WaitForLastOperation+0x9c>)
 8003188:	691a      	ldr	r2, [r3, #16]
 800318a:	f24c 33fa 	movw	r3, #50170	@ 0xc3fa
 800318e:	4013      	ands	r3, r2
 8003190:	60bb      	str	r3, [r7, #8]
  if (error != 0u)
 8003192:	68bb      	ldr	r3, [r7, #8]
 8003194:	2b00      	cmp	r3, #0
 8003196:	d01d      	beq.n	80031d4 <FLASH_WaitForLastOperation+0x80>
  {
    /* Save the error code */
    pFlash.ErrorCode |= error;
 8003198:	4b16      	ldr	r3, [pc, #88]	@ (80031f4 <FLASH_WaitForLastOperation+0xa0>)
 800319a:	685a      	ldr	r2, [r3, #4]
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	4313      	orrs	r3, r2
 80031a0:	4a14      	ldr	r2, [pc, #80]	@ (80031f4 <FLASH_WaitForLastOperation+0xa0>)
 80031a2:	6053      	str	r3, [r2, #4]

    /* Clear error programming flags */
    __HAL_FLASH_CLEAR_FLAG(error);
 80031a4:	68bb      	ldr	r3, [r7, #8]
 80031a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031aa:	d307      	bcc.n	80031bc <FLASH_WaitForLastOperation+0x68>
 80031ac:	4b10      	ldr	r3, [pc, #64]	@ (80031f0 <FLASH_WaitForLastOperation+0x9c>)
 80031ae:	699a      	ldr	r2, [r3, #24]
 80031b0:	68bb      	ldr	r3, [r7, #8]
 80031b2:	f003 4340 	and.w	r3, r3, #3221225472	@ 0xc0000000
 80031b6:	490e      	ldr	r1, [pc, #56]	@ (80031f0 <FLASH_WaitForLastOperation+0x9c>)
 80031b8:	4313      	orrs	r3, r2
 80031ba:	618b      	str	r3, [r1, #24]
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d004      	beq.n	80031d0 <FLASH_WaitForLastOperation+0x7c>
 80031c6:	4a0a      	ldr	r2, [pc, #40]	@ (80031f0 <FLASH_WaitForLastOperation+0x9c>)
 80031c8:	68bb      	ldr	r3, [r7, #8]
 80031ca:	f023 4340 	bic.w	r3, r3, #3221225472	@ 0xc0000000
 80031ce:	6113      	str	r3, [r2, #16]

    return HAL_ERROR;
 80031d0:	2301      	movs	r3, #1
 80031d2:	e009      	b.n	80031e8 <FLASH_WaitForLastOperation+0x94>
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 80031d4:	4b06      	ldr	r3, [pc, #24]	@ (80031f0 <FLASH_WaitForLastOperation+0x9c>)
 80031d6:	691b      	ldr	r3, [r3, #16]
 80031d8:	f003 0301 	and.w	r3, r3, #1
 80031dc:	2b01      	cmp	r3, #1
 80031de:	d102      	bne.n	80031e6 <FLASH_WaitForLastOperation+0x92>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80031e0:	4b03      	ldr	r3, [pc, #12]	@ (80031f0 <FLASH_WaitForLastOperation+0x9c>)
 80031e2:	2201      	movs	r2, #1
 80031e4:	611a      	str	r2, [r3, #16]
  }

  /* If there is an error flag set */
  return HAL_OK;
 80031e6:	2300      	movs	r3, #0
}
 80031e8:	4618      	mov	r0, r3
 80031ea:	3710      	adds	r7, #16
 80031ec:	46bd      	mov	sp, r7
 80031ee:	bd80      	pop	{r7, pc}
 80031f0:	40022000 	.word	0x40022000
 80031f4:	2000000c 	.word	0x2000000c

080031f8 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80031f8:	b580      	push	{r7, lr}
 80031fa:	b084      	sub	sp, #16
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	60f8      	str	r0, [r7, #12]
 8003200:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_PROGRAM_ADDRESS(Address));
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800320a:	d311      	bcc.n	8003230 <FLASH_Program_DoubleWord+0x38>
 800320c:	4b1d      	ldr	r3, [pc, #116]	@ (8003284 <FLASH_Program_DoubleWord+0x8c>)
 800320e:	881b      	ldrh	r3, [r3, #0]
 8003210:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003214:	4293      	cmp	r3, r2
 8003216:	d007      	beq.n	8003228 <FLASH_Program_DoubleWord+0x30>
 8003218:	4b1a      	ldr	r3, [pc, #104]	@ (8003284 <FLASH_Program_DoubleWord+0x8c>)
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	029a      	lsls	r2, r3, #10
 800321e:	4b1a      	ldr	r3, [pc, #104]	@ (8003288 <FLASH_Program_DoubleWord+0x90>)
 8003220:	4013      	ands	r3, r2
 8003222:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 8003226:	e000      	b.n	800322a <FLASH_Program_DoubleWord+0x32>
 8003228:	4b18      	ldr	r3, [pc, #96]	@ (800328c <FLASH_Program_DoubleWord+0x94>)
 800322a:	68fa      	ldr	r2, [r7, #12]
 800322c:	4293      	cmp	r3, r2
 800322e:	d80c      	bhi.n	800324a <FLASH_Program_DoubleWord+0x52>
 8003230:	68fb      	ldr	r3, [r7, #12]
 8003232:	4a17      	ldr	r2, [pc, #92]	@ (8003290 <FLASH_Program_DoubleWord+0x98>)
 8003234:	4293      	cmp	r3, r2
 8003236:	d903      	bls.n	8003240 <FLASH_Program_DoubleWord+0x48>
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	4a16      	ldr	r2, [pc, #88]	@ (8003294 <FLASH_Program_DoubleWord+0x9c>)
 800323c:	4293      	cmp	r3, r2
 800323e:	d904      	bls.n	800324a <FLASH_Program_DoubleWord+0x52>
 8003240:	f44f 7136 	mov.w	r1, #728	@ 0x2d8
 8003244:	4814      	ldr	r0, [pc, #80]	@ (8003298 <FLASH_Program_DoubleWord+0xa0>)
 8003246:	f7fe fe59 	bl	8001efc <assert_failed>

  /* Set PG bit */
  SET_BIT(FLASH->CR, FLASH_CR_PG);
 800324a:	4b14      	ldr	r3, [pc, #80]	@ (800329c <FLASH_Program_DoubleWord+0xa4>)
 800324c:	695b      	ldr	r3, [r3, #20]
 800324e:	4a13      	ldr	r2, [pc, #76]	@ (800329c <FLASH_Program_DoubleWord+0xa4>)
 8003250:	f043 0301 	orr.w	r3, r3, #1
 8003254:	6153      	str	r3, [r2, #20]

  /* Program first word */
  *(uint32_t *)Address = (uint32_t)Data;
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	683a      	ldr	r2, [r7, #0]
 800325a:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800325c:	f3bf 8f6f 	isb	sy
}
 8003260:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(uint32_t *)(Address + 4U) = (uint32_t)(Data >> 32U);
 8003262:	e9d7 0100 	ldrd	r0, r1, [r7]
 8003266:	f04f 0200 	mov.w	r2, #0
 800326a:	f04f 0300 	mov.w	r3, #0
 800326e:	000a      	movs	r2, r1
 8003270:	2300      	movs	r3, #0
 8003272:	68f9      	ldr	r1, [r7, #12]
 8003274:	3104      	adds	r1, #4
 8003276:	4613      	mov	r3, r2
 8003278:	600b      	str	r3, [r1, #0]
}
 800327a:	bf00      	nop
 800327c:	3710      	adds	r7, #16
 800327e:	46bd      	mov	sp, r7
 8003280:	bd80      	pop	{r7, pc}
 8003282:	bf00      	nop
 8003284:	1fff75e0 	.word	0x1fff75e0
 8003288:	03fffc00 	.word	0x03fffc00
 800328c:	08020000 	.word	0x08020000
 8003290:	1fff6fff 	.word	0x1fff6fff
 8003294:	1fff73ff 	.word	0x1fff73ff
 8003298:	0800aca0 	.word	0x0800aca0
 800329c:	40022000 	.word	0x40022000

080032a0 <FLASH_Program_Fast>:
  * @param  Address specifies the address to be programmed.
  * @param  DataAddress specifies the address where the data are stored.
  * @retval None
  */
static void FLASH_Program_Fast(uint32_t Address, uint32_t DataAddress)
{
 80032a0:	b580      	push	{r7, lr}
 80032a2:	b088      	sub	sp, #32
 80032a4:	af00      	add	r7, sp, #0
 80032a6:	6078      	str	r0, [r7, #4]
 80032a8:	6039      	str	r1, [r7, #0]
  uint8_t row_index = (2 * FLASH_NB_DOUBLE_WORDS_IN_ROW);
 80032aa:	2340      	movs	r3, #64	@ 0x40
 80032ac:	77fb      	strb	r3, [r7, #31]
  uint32_t *dest_addr = (uint32_t *)Address;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	61bb      	str	r3, [r7, #24]
  uint32_t *src_addr = (uint32_t *)DataAddress;
 80032b2:	683b      	ldr	r3, [r7, #0]
 80032b4:	617b      	str	r3, [r7, #20]
  uint32_t primask_bit;

  /* Check the parameters */
  assert_param(IS_FLASH_MAIN_MEM_ADDRESS(Address));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80032bc:	d311      	bcc.n	80032e2 <FLASH_Program_Fast+0x42>
 80032be:	4b1f      	ldr	r3, [pc, #124]	@ (800333c <FLASH_Program_Fast+0x9c>)
 80032c0:	881b      	ldrh	r3, [r3, #0]
 80032c2:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80032c6:	4293      	cmp	r3, r2
 80032c8:	d007      	beq.n	80032da <FLASH_Program_Fast+0x3a>
 80032ca:	4b1c      	ldr	r3, [pc, #112]	@ (800333c <FLASH_Program_Fast+0x9c>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	029a      	lsls	r2, r3, #10
 80032d0:	4b1b      	ldr	r3, [pc, #108]	@ (8003340 <FLASH_Program_Fast+0xa0>)
 80032d2:	4013      	ands	r3, r2
 80032d4:	f103 6300 	add.w	r3, r3, #134217728	@ 0x8000000
 80032d8:	e000      	b.n	80032dc <FLASH_Program_Fast+0x3c>
 80032da:	4b1a      	ldr	r3, [pc, #104]	@ (8003344 <FLASH_Program_Fast+0xa4>)
 80032dc:	687a      	ldr	r2, [r7, #4]
 80032de:	4293      	cmp	r3, r2
 80032e0:	d804      	bhi.n	80032ec <FLASH_Program_Fast+0x4c>
 80032e2:	f240 21f6 	movw	r1, #758	@ 0x2f6
 80032e6:	4818      	ldr	r0, [pc, #96]	@ (8003348 <FLASH_Program_Fast+0xa8>)
 80032e8:	f7fe fe08 	bl	8001efc <assert_failed>

  /* Set FSTPG bit */
  SET_BIT(FLASH->CR, FLASH_CR_FSTPG);
 80032ec:	4b17      	ldr	r3, [pc, #92]	@ (800334c <FLASH_Program_Fast+0xac>)
 80032ee:	695b      	ldr	r3, [r3, #20]
 80032f0:	4a16      	ldr	r2, [pc, #88]	@ (800334c <FLASH_Program_Fast+0xac>)
 80032f2:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80032f6:	6153      	str	r3, [r2, #20]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80032f8:	f3ef 8310 	mrs	r3, PRIMASK
 80032fc:	60fb      	str	r3, [r7, #12]
  return(result);
 80032fe:	68fb      	ldr	r3, [r7, #12]

  /* Enter critical section: Disable interrupts to avoid any interruption during the loop */
  primask_bit = __get_PRIMASK();
 8003300:	613b      	str	r3, [r7, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8003302:	b672      	cpsid	i
}
 8003304:	bf00      	nop
  __disable_irq();

  /* Program the double words of the row */
  do
  {
    *dest_addr = *src_addr;
 8003306:	697b      	ldr	r3, [r7, #20]
 8003308:	681a      	ldr	r2, [r3, #0]
 800330a:	69bb      	ldr	r3, [r7, #24]
 800330c:	601a      	str	r2, [r3, #0]
    dest_addr++;
 800330e:	69bb      	ldr	r3, [r7, #24]
 8003310:	3304      	adds	r3, #4
 8003312:	61bb      	str	r3, [r7, #24]
    src_addr++;
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	3304      	adds	r3, #4
 8003318:	617b      	str	r3, [r7, #20]
    row_index--;
 800331a:	7ffb      	ldrb	r3, [r7, #31]
 800331c:	3b01      	subs	r3, #1
 800331e:	77fb      	strb	r3, [r7, #31]
  }
  while (row_index != 0U);
 8003320:	7ffb      	ldrb	r3, [r7, #31]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d1ef      	bne.n	8003306 <FLASH_Program_Fast+0x66>
 8003326:	693b      	ldr	r3, [r7, #16]
 8003328:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800332a:	68bb      	ldr	r3, [r7, #8]
 800332c:	f383 8810 	msr	PRIMASK, r3
}
 8003330:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);
}
 8003332:	bf00      	nop
 8003334:	3720      	adds	r7, #32
 8003336:	46bd      	mov	sp, r7
 8003338:	bd80      	pop	{r7, pc}
 800333a:	bf00      	nop
 800333c:	1fff75e0 	.word	0x1fff75e0
 8003340:	03fffc00 	.word	0x03fffc00
 8003344:	08020000 	.word	0x08020000
 8003348:	0800aca0 	.word	0x0800aca0
 800334c:	40022000 	.word	0x40022000

08003350 <HAL_FLASHEx_Erase>:
  *         information on faulty page in case of error (0xFFFFFFFF means that all
  *         the pages have been correctly erased).
  * @retval HAL_Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *PageError)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b084      	sub	sp, #16
 8003354:	af00      	add	r7, sp, #0
 8003356:	6078      	str	r0, [r7, #4]
 8003358:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status;
  uint32_t page_index;

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	2b00      	cmp	r3, #0
 8003360:	d007      	beq.n	8003372 <HAL_FLASHEx_Erase+0x22>
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	2b01      	cmp	r3, #1
 8003368:	d003      	beq.n	8003372 <HAL_FLASHEx_Erase+0x22>
 800336a:	2190      	movs	r1, #144	@ 0x90
 800336c:	4848      	ldr	r0, [pc, #288]	@ (8003490 <HAL_FLASHEx_Erase+0x140>)
 800336e:	f7fe fdc5 	bl	8001efc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8003372:	4b48      	ldr	r3, [pc, #288]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 8003374:	781b      	ldrb	r3, [r3, #0]
 8003376:	2b01      	cmp	r3, #1
 8003378:	d101      	bne.n	800337e <HAL_FLASHEx_Erase+0x2e>
 800337a:	2302      	movs	r3, #2
 800337c:	e083      	b.n	8003486 <HAL_FLASHEx_Erase+0x136>
 800337e:	4b45      	ldr	r3, [pc, #276]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 8003380:	2201      	movs	r2, #1
 8003382:	701a      	strb	r2, [r3, #0]

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003384:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003388:	f7ff fee4 	bl	8003154 <FLASH_WaitForLastOperation>
 800338c:	4603      	mov	r3, r0
 800338e:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8003390:	7bfb      	ldrb	r3, [r7, #15]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d173      	bne.n	800347e <HAL_FLASHEx_Erase+0x12e>
  {
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8003396:	4b3f      	ldr	r3, [pc, #252]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 8003398:	2200      	movs	r2, #0
 800339a:	605a      	str	r2, [r3, #4]

    /* Deactivate the cache if they are activated to avoid data misbehavior */
    if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != 0U)
 800339c:	4b3e      	ldr	r3, [pc, #248]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80033a4:	2b00      	cmp	r3, #0
 80033a6:	d013      	beq.n	80033d0 <HAL_FLASHEx_Erase+0x80>
    {
      if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80033a8:	4b3b      	ldr	r3, [pc, #236]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d009      	beq.n	80033c8 <HAL_FLASHEx_Erase+0x78>
      {
        /* Disable data cache  */
        __HAL_FLASH_DATA_CACHE_DISABLE();
 80033b4:	4b38      	ldr	r3, [pc, #224]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	4a37      	ldr	r2, [pc, #220]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 80033ba:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033be:	6013      	str	r3, [r2, #0]
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_DCACHE_ENABLED;
 80033c0:	4b34      	ldr	r3, [pc, #208]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 80033c2:	2203      	movs	r2, #3
 80033c4:	771a      	strb	r2, [r3, #28]
 80033c6:	e016      	b.n	80033f6 <HAL_FLASHEx_Erase+0xa6>
      }
      else
      {
        pFlash.CacheToReactivate = FLASH_CACHE_ICACHE_ENABLED;
 80033c8:	4b32      	ldr	r3, [pc, #200]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	771a      	strb	r2, [r3, #28]
 80033ce:	e012      	b.n	80033f6 <HAL_FLASHEx_Erase+0xa6>
      }
    }
    else if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != 0U)
 80033d0:	4b31      	ldr	r3, [pc, #196]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80033d8:	2b00      	cmp	r3, #0
 80033da:	d009      	beq.n	80033f0 <HAL_FLASHEx_Erase+0xa0>
    {
      /* Disable data cache  */
      __HAL_FLASH_DATA_CACHE_DISABLE();
 80033dc:	4b2e      	ldr	r3, [pc, #184]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a2d      	ldr	r2, [pc, #180]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 80033e2:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033e6:	6013      	str	r3, [r2, #0]
      pFlash.CacheToReactivate = FLASH_CACHE_DCACHE_ENABLED;
 80033e8:	4b2a      	ldr	r3, [pc, #168]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 80033ea:	2202      	movs	r2, #2
 80033ec:	771a      	strb	r2, [r3, #28]
 80033ee:	e002      	b.n	80033f6 <HAL_FLASHEx_Erase+0xa6>
    }
    else
    {
      pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 80033f0:	4b28      	ldr	r3, [pc, #160]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 80033f2:	2200      	movs	r2, #0
 80033f4:	771a      	strb	r2, [r3, #28]
    }

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	2b01      	cmp	r3, #1
 80033fc:	d111      	bne.n	8003422 <HAL_FLASHEx_Erase+0xd2>
    {
      /* Mass erase to be done */
      FLASH_MassErase(pEraseInit->Banks);
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	4618      	mov	r0, r3
 8003404:	f000 f84a 	bl	800349c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8003408:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800340c:	f7ff fea2 	bl	8003154 <FLASH_WaitForLastOperation>
 8003410:	4603      	mov	r3, r0
 8003412:	73fb      	strb	r3, [r7, #15]
#if defined (FLASH_OPTR_DBANK)
      /* If the erase operation is completed, disable the MER1 and MER2 Bits */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
#else
      /* If the erase operation is completed, disable the MER1 Bit */
      CLEAR_BIT(FLASH->CR, (FLASH_CR_MER1));
 8003414:	4b20      	ldr	r3, [pc, #128]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 8003416:	695b      	ldr	r3, [r3, #20]
 8003418:	4a1f      	ldr	r2, [pc, #124]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 800341a:	f023 0304 	bic.w	r3, r3, #4
 800341e:	6153      	str	r3, [r2, #20]
 8003420:	e02b      	b.n	800347a <HAL_FLASHEx_Erase+0x12a>
#endif
    }
    else
    {
      /*Initialization of PageError variable*/
      *PageError = 0xFFFFFFFFU;
 8003422:	683b      	ldr	r3, [r7, #0]
 8003424:	f04f 32ff 	mov.w	r2, #4294967295
 8003428:	601a      	str	r2, [r3, #0]

      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	60bb      	str	r3, [r7, #8]
 8003430:	e01b      	b.n	800346a <HAL_FLASHEx_Erase+0x11a>
      {
        FLASH_PageErase(page_index, pEraseInit->Banks);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	4619      	mov	r1, r3
 8003438:	68b8      	ldr	r0, [r7, #8]
 800343a:	f000 f855 	bl	80034e8 <FLASH_PageErase>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800343e:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8003442:	f7ff fe87 	bl	8003154 <FLASH_WaitForLastOperation>
 8003446:	4603      	mov	r3, r0
 8003448:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the PER Bit */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_PER | FLASH_CR_PNB));
 800344a:	4b13      	ldr	r3, [pc, #76]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 800344c:	695b      	ldr	r3, [r3, #20]
 800344e:	4a12      	ldr	r2, [pc, #72]	@ (8003498 <HAL_FLASHEx_Erase+0x148>)
 8003450:	f423 73fd 	bic.w	r3, r3, #506	@ 0x1fa
 8003454:	6153      	str	r3, [r2, #20]

        if (status != HAL_OK)
 8003456:	7bfb      	ldrb	r3, [r7, #15]
 8003458:	2b00      	cmp	r3, #0
 800345a:	d003      	beq.n	8003464 <HAL_FLASHEx_Erase+0x114>
        {
          /* In case of error, stop erase procedure and return the faulty page */
          *PageError = page_index;
 800345c:	683b      	ldr	r3, [r7, #0]
 800345e:	68ba      	ldr	r2, [r7, #8]
 8003460:	601a      	str	r2, [r3, #0]
          break;
 8003462:	e00a      	b.n	800347a <HAL_FLASHEx_Erase+0x12a>
      for (page_index = pEraseInit->Page; page_index < (pEraseInit->Page + pEraseInit->NbPages); page_index++)
 8003464:	68bb      	ldr	r3, [r7, #8]
 8003466:	3301      	adds	r3, #1
 8003468:	60bb      	str	r3, [r7, #8]
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	689a      	ldr	r2, [r3, #8]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	68db      	ldr	r3, [r3, #12]
 8003472:	4413      	add	r3, r2
 8003474:	68ba      	ldr	r2, [r7, #8]
 8003476:	429a      	cmp	r2, r3
 8003478:	d3db      	bcc.n	8003432 <HAL_FLASHEx_Erase+0xe2>
        }
      }
    }

    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 800347a:	f000 f887 	bl	800358c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800347e:	4b05      	ldr	r3, [pc, #20]	@ (8003494 <HAL_FLASHEx_Erase+0x144>)
 8003480:	2200      	movs	r2, #0
 8003482:	701a      	strb	r2, [r3, #0]

  return status;
 8003484:	7bfb      	ldrb	r3, [r7, #15]
}
 8003486:	4618      	mov	r0, r3
 8003488:	3710      	adds	r7, #16
 800348a:	46bd      	mov	sp, r7
 800348c:	bd80      	pop	{r7, pc}
 800348e:	bf00      	nop
 8003490:	0800acdc 	.word	0x0800acdc
 8003494:	2000000c 	.word	0x2000000c
 8003498:	40022000 	.word	0x40022000

0800349c <FLASH_MassErase>:
  *            @arg FLASH_BANK_BOTH: Bank1 and Bank2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
static void FLASH_MassErase(uint32_t Banks)
{
 800349c:	b580      	push	{r7, lr}
 800349e:	b082      	sub	sp, #8
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
#if defined (FLASH_OPTR_DBANK)
  if (READ_BIT(FLASH->OPTR, FLASH_OPTR_DBANK) != 0U)
#endif
  {
    /* Check the parameters */
    assert_param(IS_FLASH_BANK(Banks));
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	2b01      	cmp	r3, #1
 80034a8:	d004      	beq.n	80034b4 <FLASH_MassErase+0x18>
 80034aa:	f44f 7108 	mov.w	r1, #544	@ 0x220
 80034ae:	480c      	ldr	r0, [pc, #48]	@ (80034e0 <FLASH_MassErase+0x44>)
 80034b0:	f7fe fd24 	bl	8001efc <assert_failed>

    /* Set the Mass Erase Bit for the bank 1 if requested */
    if ((Banks & FLASH_BANK_1) != 0U)
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	f003 0301 	and.w	r3, r3, #1
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d005      	beq.n	80034ca <FLASH_MassErase+0x2e>
    {
      SET_BIT(FLASH->CR, FLASH_CR_MER1);
 80034be:	4b09      	ldr	r3, [pc, #36]	@ (80034e4 <FLASH_MassErase+0x48>)
 80034c0:	695b      	ldr	r3, [r3, #20]
 80034c2:	4a08      	ldr	r2, [pc, #32]	@ (80034e4 <FLASH_MassErase+0x48>)
 80034c4:	f043 0304 	orr.w	r3, r3, #4
 80034c8:	6153      	str	r3, [r2, #20]
    SET_BIT(FLASH->CR, (FLASH_CR_MER1 | FLASH_CR_MER2));
  }
#endif

  /* Proceed to erase all sectors */
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 80034ca:	4b06      	ldr	r3, [pc, #24]	@ (80034e4 <FLASH_MassErase+0x48>)
 80034cc:	695b      	ldr	r3, [r3, #20]
 80034ce:	4a05      	ldr	r2, [pc, #20]	@ (80034e4 <FLASH_MassErase+0x48>)
 80034d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034d4:	6153      	str	r3, [r2, #20]
}
 80034d6:	bf00      	nop
 80034d8:	3708      	adds	r7, #8
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	0800acdc 	.word	0x0800acdc
 80034e4:	40022000 	.word	0x40022000

080034e8 <FLASH_PageErase>:
  *            @arg FLASH_BANK_2: Page in bank 2 to be erased (*)
  * @note   (*) availability depends on devices
  * @retval None
  */
void FLASH_PageErase(uint32_t Page, uint32_t Banks)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b082      	sub	sp, #8
 80034ec:	af00      	add	r7, sp, #0
 80034ee:	6078      	str	r0, [r7, #4]
 80034f0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_PAGE(Page));
 80034f2:	4b22      	ldr	r3, [pc, #136]	@ (800357c <FLASH_PageErase+0x94>)
 80034f4:	881b      	ldrh	r3, [r3, #0]
 80034f6:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 80034fa:	4293      	cmp	r3, r2
 80034fc:	d007      	beq.n	800350e <FLASH_PageErase+0x26>
 80034fe:	4b1f      	ldr	r3, [pc, #124]	@ (800357c <FLASH_PageErase+0x94>)
 8003500:	681b      	ldr	r3, [r3, #0]
 8003502:	029a      	lsls	r2, r3, #10
 8003504:	4b1e      	ldr	r3, [pc, #120]	@ (8003580 <FLASH_PageErase+0x98>)
 8003506:	4013      	ands	r3, r2
 8003508:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 800350c:	d011      	beq.n	8003532 <FLASH_PageErase+0x4a>
 800350e:	4b1b      	ldr	r3, [pc, #108]	@ (800357c <FLASH_PageErase+0x94>)
 8003510:	881b      	ldrh	r3, [r3, #0]
 8003512:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8003516:	4293      	cmp	r3, r2
 8003518:	d009      	beq.n	800352e <FLASH_PageErase+0x46>
 800351a:	4b18      	ldr	r3, [pc, #96]	@ (800357c <FLASH_PageErase+0x94>)
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	029a      	lsls	r2, r3, #10
 8003520:	4b17      	ldr	r3, [pc, #92]	@ (8003580 <FLASH_PageErase+0x98>)
 8003522:	4013      	ands	r3, r2
 8003524:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8003528:	d101      	bne.n	800352e <FLASH_PageErase+0x46>
 800352a:	2380      	movs	r3, #128	@ 0x80
 800352c:	e003      	b.n	8003536 <FLASH_PageErase+0x4e>
 800352e:	2340      	movs	r3, #64	@ 0x40
 8003530:	e001      	b.n	8003536 <FLASH_PageErase+0x4e>
 8003532:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8003536:	687a      	ldr	r2, [r7, #4]
 8003538:	4293      	cmp	r3, r2
 800353a:	d804      	bhi.n	8003546 <FLASH_PageErase+0x5e>
 800353c:	f240 2149 	movw	r1, #585	@ 0x249
 8003540:	4810      	ldr	r0, [pc, #64]	@ (8003584 <FLASH_PageErase+0x9c>)
 8003542:	f7fe fcdb 	bl	8001efc <assert_failed>
  /* Prevent unused argument(s) compilation warning */
  UNUSED(Banks);
#endif /* FLASH_OPTR_DBANK */

  /* Proceed to erase the page */
  MODIFY_REG(FLASH->CR, FLASH_CR_PNB, ((Page & 0xFFU) << FLASH_CR_PNB_Pos));
 8003546:	4b10      	ldr	r3, [pc, #64]	@ (8003588 <FLASH_PageErase+0xa0>)
 8003548:	695b      	ldr	r3, [r3, #20]
 800354a:	f423 72fc 	bic.w	r2, r3, #504	@ 0x1f8
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	00db      	lsls	r3, r3, #3
 8003552:	f403 63ff 	and.w	r3, r3, #2040	@ 0x7f8
 8003556:	490c      	ldr	r1, [pc, #48]	@ (8003588 <FLASH_PageErase+0xa0>)
 8003558:	4313      	orrs	r3, r2
 800355a:	614b      	str	r3, [r1, #20]
  SET_BIT(FLASH->CR, FLASH_CR_PER);
 800355c:	4b0a      	ldr	r3, [pc, #40]	@ (8003588 <FLASH_PageErase+0xa0>)
 800355e:	695b      	ldr	r3, [r3, #20]
 8003560:	4a09      	ldr	r2, [pc, #36]	@ (8003588 <FLASH_PageErase+0xa0>)
 8003562:	f043 0302 	orr.w	r3, r3, #2
 8003566:	6153      	str	r3, [r2, #20]
  SET_BIT(FLASH->CR, FLASH_CR_STRT);
 8003568:	4b07      	ldr	r3, [pc, #28]	@ (8003588 <FLASH_PageErase+0xa0>)
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	4a06      	ldr	r2, [pc, #24]	@ (8003588 <FLASH_PageErase+0xa0>)
 800356e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003572:	6153      	str	r3, [r2, #20]
}
 8003574:	bf00      	nop
 8003576:	3708      	adds	r7, #8
 8003578:	46bd      	mov	sp, r7
 800357a:	bd80      	pop	{r7, pc}
 800357c:	1fff75e0 	.word	0x1fff75e0
 8003580:	03fffc00 	.word	0x03fffc00
 8003584:	0800acdc 	.word	0x0800acdc
 8003588:	40022000 	.word	0x40022000

0800358c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches.
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 800358c:	b480      	push	{r7}
 800358e:	b083      	sub	sp, #12
 8003590:	af00      	add	r7, sp, #0
  FLASH_CacheTypeDef cache = pFlash.CacheToReactivate;
 8003592:	4b21      	ldr	r3, [pc, #132]	@ (8003618 <FLASH_FlushCaches+0x8c>)
 8003594:	7f1b      	ldrb	r3, [r3, #28]
 8003596:	71fb      	strb	r3, [r7, #7]

  /* Flush instruction cache  */
  if ((cache == FLASH_CACHE_ICACHE_ENABLED) ||
 8003598:	79fb      	ldrb	r3, [r7, #7]
 800359a:	2b01      	cmp	r3, #1
 800359c:	d002      	beq.n	80035a4 <FLASH_FlushCaches+0x18>
 800359e:	79fb      	ldrb	r3, [r7, #7]
 80035a0:	2b03      	cmp	r3, #3
 80035a2:	d117      	bne.n	80035d4 <FLASH_FlushCaches+0x48>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Disable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80035a4:	4b1d      	ldr	r3, [pc, #116]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035a6:	681b      	ldr	r3, [r3, #0]
 80035a8:	4a1c      	ldr	r2, [pc, #112]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035aa:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80035ae:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80035b0:	4b1a      	ldr	r3, [pc, #104]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a19      	ldr	r2, [pc, #100]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035b6:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	4b17      	ldr	r3, [pc, #92]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a16      	ldr	r2, [pc, #88]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035c2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80035c6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80035c8:	4b14      	ldr	r3, [pc, #80]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a13      	ldr	r2, [pc, #76]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035ce:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80035d2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if ((cache == FLASH_CACHE_DCACHE_ENABLED) ||
 80035d4:	79fb      	ldrb	r3, [r7, #7]
 80035d6:	2b02      	cmp	r3, #2
 80035d8:	d002      	beq.n	80035e0 <FLASH_FlushCaches+0x54>
 80035da:	79fb      	ldrb	r3, [r7, #7]
 80035dc:	2b03      	cmp	r3, #3
 80035de:	d111      	bne.n	8003604 <FLASH_FlushCaches+0x78>
      (cache == FLASH_CACHE_ICACHE_DCACHE_ENABLED))
  {
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80035e0:	4b0e      	ldr	r3, [pc, #56]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a0d      	ldr	r2, [pc, #52]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035e6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80035ea:	6013      	str	r3, [r2, #0]
 80035ec:	4b0b      	ldr	r3, [pc, #44]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4a0a      	ldr	r2, [pc, #40]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035f2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80035f6:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80035f8:	4b08      	ldr	r3, [pc, #32]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a07      	ldr	r2, [pc, #28]	@ (800361c <FLASH_FlushCaches+0x90>)
 80035fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003602:	6013      	str	r3, [r2, #0]
  }

  /* Reset internal variable */
  pFlash.CacheToReactivate = FLASH_CACHE_DISABLED;
 8003604:	4b04      	ldr	r3, [pc, #16]	@ (8003618 <FLASH_FlushCaches+0x8c>)
 8003606:	2200      	movs	r2, #0
 8003608:	771a      	strb	r2, [r3, #28]
}
 800360a:	bf00      	nop
 800360c:	370c      	adds	r7, #12
 800360e:	46bd      	mov	sp, r7
 8003610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003614:	4770      	bx	lr
 8003616:	bf00      	nop
 8003618:	2000000c 	.word	0x2000000c
 800361c:	40022000 	.word	0x40022000

08003620 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b086      	sub	sp, #24
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
 8003628:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800362a:	2300      	movs	r3, #0
 800362c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent;
  uint32_t temp;

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003634:	d01b      	beq.n	800366e <HAL_GPIO_Init+0x4e>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	4a37      	ldr	r2, [pc, #220]	@ (8003718 <HAL_GPIO_Init+0xf8>)
 800363a:	4293      	cmp	r3, r2
 800363c:	d017      	beq.n	800366e <HAL_GPIO_Init+0x4e>
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	4a36      	ldr	r2, [pc, #216]	@ (800371c <HAL_GPIO_Init+0xfc>)
 8003642:	4293      	cmp	r3, r2
 8003644:	d013      	beq.n	800366e <HAL_GPIO_Init+0x4e>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	4a35      	ldr	r2, [pc, #212]	@ (8003720 <HAL_GPIO_Init+0x100>)
 800364a:	4293      	cmp	r3, r2
 800364c:	d00f      	beq.n	800366e <HAL_GPIO_Init+0x4e>
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	4a34      	ldr	r2, [pc, #208]	@ (8003724 <HAL_GPIO_Init+0x104>)
 8003652:	4293      	cmp	r3, r2
 8003654:	d00b      	beq.n	800366e <HAL_GPIO_Init+0x4e>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	4a33      	ldr	r2, [pc, #204]	@ (8003728 <HAL_GPIO_Init+0x108>)
 800365a:	4293      	cmp	r3, r2
 800365c:	d007      	beq.n	800366e <HAL_GPIO_Init+0x4e>
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	4a32      	ldr	r2, [pc, #200]	@ (800372c <HAL_GPIO_Init+0x10c>)
 8003662:	4293      	cmp	r3, r2
 8003664:	d003      	beq.n	800366e <HAL_GPIO_Init+0x4e>
 8003666:	21a9      	movs	r1, #169	@ 0xa9
 8003668:	4831      	ldr	r0, [pc, #196]	@ (8003730 <HAL_GPIO_Init+0x110>)
 800366a:	f7fe fc47 	bl	8001efc <assert_failed>
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
 800366e:	683b      	ldr	r3, [r7, #0]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	b29b      	uxth	r3, r3
 8003674:	2b00      	cmp	r3, #0
 8003676:	d004      	beq.n	8003682 <HAL_GPIO_Init+0x62>
 8003678:	683b      	ldr	r3, [r7, #0]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003680:	d303      	bcc.n	800368a <HAL_GPIO_Init+0x6a>
 8003682:	21aa      	movs	r1, #170	@ 0xaa
 8003684:	482a      	ldr	r0, [pc, #168]	@ (8003730 <HAL_GPIO_Init+0x110>)
 8003686:	f7fe fc39 	bl	8001efc <assert_failed>
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	685b      	ldr	r3, [r3, #4]
 800368e:	2b00      	cmp	r3, #0
 8003690:	f000 8209 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	685b      	ldr	r3, [r3, #4]
 8003698:	2b01      	cmp	r3, #1
 800369a:	f000 8204 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 800369e:	683b      	ldr	r3, [r7, #0]
 80036a0:	685b      	ldr	r3, [r3, #4]
 80036a2:	2b11      	cmp	r3, #17
 80036a4:	f000 81ff 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036a8:	683b      	ldr	r3, [r7, #0]
 80036aa:	685b      	ldr	r3, [r3, #4]
 80036ac:	2b02      	cmp	r3, #2
 80036ae:	f000 81fa 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	685b      	ldr	r3, [r3, #4]
 80036b6:	2b12      	cmp	r3, #18
 80036b8:	f000 81f5 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036bc:	683b      	ldr	r3, [r7, #0]
 80036be:	685b      	ldr	r3, [r3, #4]
 80036c0:	f5b3 1f88 	cmp.w	r3, #1114112	@ 0x110000
 80036c4:	f000 81ef 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	685b      	ldr	r3, [r3, #4]
 80036cc:	f5b3 1f04 	cmp.w	r3, #2162688	@ 0x210000
 80036d0:	f000 81e9 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f5b3 1f44 	cmp.w	r3, #3211264	@ 0x310000
 80036dc:	f000 81e3 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	f5b3 1f90 	cmp.w	r3, #1179648	@ 0x120000
 80036e8:	f000 81dd 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036ec:	683b      	ldr	r3, [r7, #0]
 80036ee:	685b      	ldr	r3, [r3, #4]
 80036f0:	f5b3 1f08 	cmp.w	r3, #2228224	@ 0x220000
 80036f4:	f000 81d7 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 80036f8:	683b      	ldr	r3, [r7, #0]
 80036fa:	685b      	ldr	r3, [r3, #4]
 80036fc:	f5b3 1f48 	cmp.w	r3, #3276800	@ 0x320000
 8003700:	f000 81d1 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 8003704:	683b      	ldr	r3, [r7, #0]
 8003706:	685b      	ldr	r3, [r3, #4]
 8003708:	2b03      	cmp	r3, #3
 800370a:	f000 81cc 	beq.w	8003aa6 <HAL_GPIO_Init+0x486>
 800370e:	21ab      	movs	r1, #171	@ 0xab
 8003710:	4807      	ldr	r0, [pc, #28]	@ (8003730 <HAL_GPIO_Init+0x110>)
 8003712:	f7fe fbf3 	bl	8001efc <assert_failed>

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003716:	e1c6      	b.n	8003aa6 <HAL_GPIO_Init+0x486>
 8003718:	48000400 	.word	0x48000400
 800371c:	48000800 	.word	0x48000800
 8003720:	48000c00 	.word	0x48000c00
 8003724:	48001000 	.word	0x48001000
 8003728:	48001400 	.word	0x48001400
 800372c:	48001800 	.word	0x48001800
 8003730:	0800ad1c 	.word	0x0800ad1c
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8003734:	683b      	ldr	r3, [r7, #0]
 8003736:	681a      	ldr	r2, [r3, #0]
 8003738:	2101      	movs	r1, #1
 800373a:	697b      	ldr	r3, [r7, #20]
 800373c:	fa01 f303 	lsl.w	r3, r1, r3
 8003740:	4013      	ands	r3, r2
 8003742:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8003744:	68fb      	ldr	r3, [r7, #12]
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 81aa 	beq.w	8003aa0 <HAL_GPIO_Init+0x480>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800374c:	683b      	ldr	r3, [r7, #0]
 800374e:	685b      	ldr	r3, [r3, #4]
 8003750:	f003 0303 	and.w	r3, r3, #3
 8003754:	2b01      	cmp	r3, #1
 8003756:	d005      	beq.n	8003764 <HAL_GPIO_Init+0x144>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	685b      	ldr	r3, [r3, #4]
 800375c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8003760:	2b02      	cmp	r3, #2
 8003762:	d144      	bne.n	80037ee <HAL_GPIO_Init+0x1ce>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	68db      	ldr	r3, [r3, #12]
 8003768:	2b00      	cmp	r3, #0
 800376a:	d00f      	beq.n	800378c <HAL_GPIO_Init+0x16c>
 800376c:	683b      	ldr	r3, [r7, #0]
 800376e:	68db      	ldr	r3, [r3, #12]
 8003770:	2b01      	cmp	r3, #1
 8003772:	d00b      	beq.n	800378c <HAL_GPIO_Init+0x16c>
 8003774:	683b      	ldr	r3, [r7, #0]
 8003776:	68db      	ldr	r3, [r3, #12]
 8003778:	2b02      	cmp	r3, #2
 800377a:	d007      	beq.n	800378c <HAL_GPIO_Init+0x16c>
 800377c:	683b      	ldr	r3, [r7, #0]
 800377e:	68db      	ldr	r3, [r3, #12]
 8003780:	2b03      	cmp	r3, #3
 8003782:	d003      	beq.n	800378c <HAL_GPIO_Init+0x16c>
 8003784:	21bb      	movs	r1, #187	@ 0xbb
 8003786:	488b      	ldr	r0, [pc, #556]	@ (80039b4 <HAL_GPIO_Init+0x394>)
 8003788:	f7fe fbb8 	bl	8001efc <assert_failed>
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	689b      	ldr	r3, [r3, #8]
 8003790:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	005b      	lsls	r3, r3, #1
 8003796:	2203      	movs	r2, #3
 8003798:	fa02 f303 	lsl.w	r3, r2, r3
 800379c:	43db      	mvns	r3, r3
 800379e:	693a      	ldr	r2, [r7, #16]
 80037a0:	4013      	ands	r3, r2
 80037a2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68da      	ldr	r2, [r3, #12]
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	005b      	lsls	r3, r3, #1
 80037ac:	fa02 f303 	lsl.w	r3, r2, r3
 80037b0:	693a      	ldr	r2, [r7, #16]
 80037b2:	4313      	orrs	r3, r2
 80037b4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	693a      	ldr	r2, [r7, #16]
 80037ba:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	685b      	ldr	r3, [r3, #4]
 80037c0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80037c2:	2201      	movs	r2, #1
 80037c4:	697b      	ldr	r3, [r7, #20]
 80037c6:	fa02 f303 	lsl.w	r3, r2, r3
 80037ca:	43db      	mvns	r3, r3
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	4013      	ands	r3, r2
 80037d0:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80037d2:	683b      	ldr	r3, [r7, #0]
 80037d4:	685b      	ldr	r3, [r3, #4]
 80037d6:	091b      	lsrs	r3, r3, #4
 80037d8:	f003 0201 	and.w	r2, r3, #1
 80037dc:	697b      	ldr	r3, [r7, #20]
 80037de:	fa02 f303 	lsl.w	r3, r2, r3
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	693a      	ldr	r2, [r7, #16]
 80037ec:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80037ee:	683b      	ldr	r3, [r7, #0]
 80037f0:	685b      	ldr	r3, [r3, #4]
 80037f2:	f003 0303 	and.w	r3, r3, #3
 80037f6:	2b03      	cmp	r3, #3
 80037f8:	d027      	beq.n	800384a <HAL_GPIO_Init+0x22a>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
 80037fa:	683b      	ldr	r3, [r7, #0]
 80037fc:	689b      	ldr	r3, [r3, #8]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d00b      	beq.n	800381a <HAL_GPIO_Init+0x1fa>
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	2b01      	cmp	r3, #1
 8003808:	d007      	beq.n	800381a <HAL_GPIO_Init+0x1fa>
 800380a:	683b      	ldr	r3, [r7, #0]
 800380c:	689b      	ldr	r3, [r3, #8]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d003      	beq.n	800381a <HAL_GPIO_Init+0x1fa>
 8003812:	21cc      	movs	r1, #204	@ 0xcc
 8003814:	4867      	ldr	r0, [pc, #412]	@ (80039b4 <HAL_GPIO_Init+0x394>)
 8003816:	f7fe fb71 	bl	8001efc <assert_failed>

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	68db      	ldr	r3, [r3, #12]
 800381e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8003820:	697b      	ldr	r3, [r7, #20]
 8003822:	005b      	lsls	r3, r3, #1
 8003824:	2203      	movs	r2, #3
 8003826:	fa02 f303 	lsl.w	r3, r2, r3
 800382a:	43db      	mvns	r3, r3
 800382c:	693a      	ldr	r2, [r7, #16]
 800382e:	4013      	ands	r3, r2
 8003830:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	689a      	ldr	r2, [r3, #8]
 8003836:	697b      	ldr	r3, [r7, #20]
 8003838:	005b      	lsls	r3, r3, #1
 800383a:	fa02 f303 	lsl.w	r3, r2, r3
 800383e:	693a      	ldr	r2, [r7, #16]
 8003840:	4313      	orrs	r3, r2
 8003842:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	693a      	ldr	r2, [r7, #16]
 8003848:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	685b      	ldr	r3, [r3, #4]
 800384e:	f003 0303 	and.w	r3, r3, #3
 8003852:	2b02      	cmp	r3, #2
 8003854:	d14b      	bne.n	80038ee <HAL_GPIO_Init+0x2ce>
      {
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 800385c:	d01b      	beq.n	8003896 <HAL_GPIO_Init+0x276>
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	4a55      	ldr	r2, [pc, #340]	@ (80039b8 <HAL_GPIO_Init+0x398>)
 8003862:	4293      	cmp	r3, r2
 8003864:	d017      	beq.n	8003896 <HAL_GPIO_Init+0x276>
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	4a54      	ldr	r2, [pc, #336]	@ (80039bc <HAL_GPIO_Init+0x39c>)
 800386a:	4293      	cmp	r3, r2
 800386c:	d013      	beq.n	8003896 <HAL_GPIO_Init+0x276>
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	4a53      	ldr	r2, [pc, #332]	@ (80039c0 <HAL_GPIO_Init+0x3a0>)
 8003872:	4293      	cmp	r3, r2
 8003874:	d00f      	beq.n	8003896 <HAL_GPIO_Init+0x276>
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	4a52      	ldr	r2, [pc, #328]	@ (80039c4 <HAL_GPIO_Init+0x3a4>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00b      	beq.n	8003896 <HAL_GPIO_Init+0x276>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	4a51      	ldr	r2, [pc, #324]	@ (80039c8 <HAL_GPIO_Init+0x3a8>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d007      	beq.n	8003896 <HAL_GPIO_Init+0x276>
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	4a50      	ldr	r2, [pc, #320]	@ (80039cc <HAL_GPIO_Init+0x3ac>)
 800388a:	4293      	cmp	r3, r2
 800388c:	d003      	beq.n	8003896 <HAL_GPIO_Init+0x276>
 800388e:	21d9      	movs	r1, #217	@ 0xd9
 8003890:	4848      	ldr	r0, [pc, #288]	@ (80039b4 <HAL_GPIO_Init+0x394>)
 8003892:	f7fe fb33 	bl	8001efc <assert_failed>
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
 8003896:	683b      	ldr	r3, [r7, #0]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	2b0f      	cmp	r3, #15
 800389c:	d903      	bls.n	80038a6 <HAL_GPIO_Init+0x286>
 800389e:	21da      	movs	r1, #218	@ 0xda
 80038a0:	4844      	ldr	r0, [pc, #272]	@ (80039b4 <HAL_GPIO_Init+0x394>)
 80038a2:	f7fe fb2b 	bl	8001efc <assert_failed>

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80038a6:	697b      	ldr	r3, [r7, #20]
 80038a8:	08da      	lsrs	r2, r3, #3
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	3208      	adds	r2, #8
 80038ae:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80038b2:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80038b4:	697b      	ldr	r3, [r7, #20]
 80038b6:	f003 0307 	and.w	r3, r3, #7
 80038ba:	009b      	lsls	r3, r3, #2
 80038bc:	220f      	movs	r2, #15
 80038be:	fa02 f303 	lsl.w	r3, r2, r3
 80038c2:	43db      	mvns	r3, r3
 80038c4:	693a      	ldr	r2, [r7, #16]
 80038c6:	4013      	ands	r3, r2
 80038c8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80038ca:	683b      	ldr	r3, [r7, #0]
 80038cc:	691a      	ldr	r2, [r3, #16]
 80038ce:	697b      	ldr	r3, [r7, #20]
 80038d0:	f003 0307 	and.w	r3, r3, #7
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	fa02 f303 	lsl.w	r3, r2, r3
 80038da:	693a      	ldr	r2, [r7, #16]
 80038dc:	4313      	orrs	r3, r2
 80038de:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 80038e0:	697b      	ldr	r3, [r7, #20]
 80038e2:	08da      	lsrs	r2, r3, #3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3208      	adds	r2, #8
 80038e8:	6939      	ldr	r1, [r7, #16]
 80038ea:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 80038f4:	697b      	ldr	r3, [r7, #20]
 80038f6:	005b      	lsls	r3, r3, #1
 80038f8:	2203      	movs	r2, #3
 80038fa:	fa02 f303 	lsl.w	r3, r2, r3
 80038fe:	43db      	mvns	r3, r3
 8003900:	693a      	ldr	r2, [r7, #16]
 8003902:	4013      	ands	r3, r2
 8003904:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003906:	683b      	ldr	r3, [r7, #0]
 8003908:	685b      	ldr	r3, [r3, #4]
 800390a:	f003 0203 	and.w	r2, r3, #3
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	005b      	lsls	r3, r3, #1
 8003912:	fa02 f303 	lsl.w	r3, r2, r3
 8003916:	693a      	ldr	r2, [r7, #16]
 8003918:	4313      	orrs	r3, r2
 800391a:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	693a      	ldr	r2, [r7, #16]
 8003920:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	685b      	ldr	r3, [r3, #4]
 8003926:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800392a:	2b00      	cmp	r3, #0
 800392c:	f000 80b8 	beq.w	8003aa0 <HAL_GPIO_Init+0x480>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003930:	4b27      	ldr	r3, [pc, #156]	@ (80039d0 <HAL_GPIO_Init+0x3b0>)
 8003932:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003934:	4a26      	ldr	r2, [pc, #152]	@ (80039d0 <HAL_GPIO_Init+0x3b0>)
 8003936:	f043 0301 	orr.w	r3, r3, #1
 800393a:	6613      	str	r3, [r2, #96]	@ 0x60
 800393c:	4b24      	ldr	r3, [pc, #144]	@ (80039d0 <HAL_GPIO_Init+0x3b0>)
 800393e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8003940:	f003 0301 	and.w	r3, r3, #1
 8003944:	60bb      	str	r3, [r7, #8]
 8003946:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003948:	4a22      	ldr	r2, [pc, #136]	@ (80039d4 <HAL_GPIO_Init+0x3b4>)
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	089b      	lsrs	r3, r3, #2
 800394e:	3302      	adds	r3, #2
 8003950:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003954:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003956:	697b      	ldr	r3, [r7, #20]
 8003958:	f003 0303 	and.w	r3, r3, #3
 800395c:	009b      	lsls	r3, r3, #2
 800395e:	220f      	movs	r2, #15
 8003960:	fa02 f303 	lsl.w	r3, r2, r3
 8003964:	43db      	mvns	r3, r3
 8003966:	693a      	ldr	r2, [r7, #16]
 8003968:	4013      	ands	r3, r2
 800396a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f1b3 4f90 	cmp.w	r3, #1207959552	@ 0x48000000
 8003972:	d031      	beq.n	80039d8 <HAL_GPIO_Init+0x3b8>
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	4a10      	ldr	r2, [pc, #64]	@ (80039b8 <HAL_GPIO_Init+0x398>)
 8003978:	4293      	cmp	r3, r2
 800397a:	d019      	beq.n	80039b0 <HAL_GPIO_Init+0x390>
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	4a0f      	ldr	r2, [pc, #60]	@ (80039bc <HAL_GPIO_Init+0x39c>)
 8003980:	4293      	cmp	r3, r2
 8003982:	d013      	beq.n	80039ac <HAL_GPIO_Init+0x38c>
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	4a0e      	ldr	r2, [pc, #56]	@ (80039c0 <HAL_GPIO_Init+0x3a0>)
 8003988:	4293      	cmp	r3, r2
 800398a:	d00d      	beq.n	80039a8 <HAL_GPIO_Init+0x388>
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0d      	ldr	r2, [pc, #52]	@ (80039c4 <HAL_GPIO_Init+0x3a4>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d007      	beq.n	80039a4 <HAL_GPIO_Init+0x384>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0c      	ldr	r2, [pc, #48]	@ (80039c8 <HAL_GPIO_Init+0x3a8>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d101      	bne.n	80039a0 <HAL_GPIO_Init+0x380>
 800399c:	2305      	movs	r3, #5
 800399e:	e01c      	b.n	80039da <HAL_GPIO_Init+0x3ba>
 80039a0:	2306      	movs	r3, #6
 80039a2:	e01a      	b.n	80039da <HAL_GPIO_Init+0x3ba>
 80039a4:	2304      	movs	r3, #4
 80039a6:	e018      	b.n	80039da <HAL_GPIO_Init+0x3ba>
 80039a8:	2303      	movs	r3, #3
 80039aa:	e016      	b.n	80039da <HAL_GPIO_Init+0x3ba>
 80039ac:	2302      	movs	r3, #2
 80039ae:	e014      	b.n	80039da <HAL_GPIO_Init+0x3ba>
 80039b0:	2301      	movs	r3, #1
 80039b2:	e012      	b.n	80039da <HAL_GPIO_Init+0x3ba>
 80039b4:	0800ad1c 	.word	0x0800ad1c
 80039b8:	48000400 	.word	0x48000400
 80039bc:	48000800 	.word	0x48000800
 80039c0:	48000c00 	.word	0x48000c00
 80039c4:	48001000 	.word	0x48001000
 80039c8:	48001400 	.word	0x48001400
 80039cc:	48001800 	.word	0x48001800
 80039d0:	40021000 	.word	0x40021000
 80039d4:	40010000 	.word	0x40010000
 80039d8:	2300      	movs	r3, #0
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	f002 0203 	and.w	r2, r2, #3
 80039e0:	0092      	lsls	r2, r2, #2
 80039e2:	4093      	lsls	r3, r2
 80039e4:	693a      	ldr	r2, [r7, #16]
 80039e6:	4313      	orrs	r3, r2
 80039e8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80039ea:	4935      	ldr	r1, [pc, #212]	@ (8003ac0 <HAL_GPIO_Init+0x4a0>)
 80039ec:	697b      	ldr	r3, [r7, #20]
 80039ee:	089b      	lsrs	r3, r3, #2
 80039f0:	3302      	adds	r3, #2
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80039f8:	4b32      	ldr	r3, [pc, #200]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	43db      	mvns	r3, r3
 8003a02:	693a      	ldr	r2, [r7, #16]
 8003a04:	4013      	ands	r3, r2
 8003a06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	685b      	ldr	r3, [r3, #4]
 8003a0c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d003      	beq.n	8003a1c <HAL_GPIO_Init+0x3fc>
        {
          temp |= iocurrent;
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	4313      	orrs	r3, r2
 8003a1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8003a1c:	4a29      	ldr	r2, [pc, #164]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8003a22:	4b28      	ldr	r3, [pc, #160]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 8003a24:	68db      	ldr	r3, [r3, #12]
 8003a26:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	43db      	mvns	r3, r3
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	4013      	ands	r3, r2
 8003a30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003a32:	683b      	ldr	r3, [r7, #0]
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d003      	beq.n	8003a46 <HAL_GPIO_Init+0x426>
        {
          temp |= iocurrent;
 8003a3e:	693a      	ldr	r2, [r7, #16]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	4313      	orrs	r3, r2
 8003a44:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003a46:	4a1f      	ldr	r2, [pc, #124]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 8003a48:	693b      	ldr	r3, [r7, #16]
 8003a4a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003a4c:	4b1d      	ldr	r3, [pc, #116]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	43db      	mvns	r3, r3
 8003a56:	693a      	ldr	r2, [r7, #16]
 8003a58:	4013      	ands	r3, r2
 8003a5a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685b      	ldr	r3, [r3, #4]
 8003a60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003a64:	2b00      	cmp	r3, #0
 8003a66:	d003      	beq.n	8003a70 <HAL_GPIO_Init+0x450>
        {
          temp |= iocurrent;
 8003a68:	693a      	ldr	r2, [r7, #16]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	4313      	orrs	r3, r2
 8003a6e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8003a70:	4a14      	ldr	r2, [pc, #80]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 8003a72:	693b      	ldr	r3, [r7, #16]
 8003a74:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003a76:	4b13      	ldr	r3, [pc, #76]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	43db      	mvns	r3, r3
 8003a80:	693a      	ldr	r2, [r7, #16]
 8003a82:	4013      	ands	r3, r2
 8003a84:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003a86:	683b      	ldr	r3, [r7, #0]
 8003a88:	685b      	ldr	r3, [r3, #4]
 8003a8a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d003      	beq.n	8003a9a <HAL_GPIO_Init+0x47a>
        {
          temp |= iocurrent;
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003a9a:	4a0a      	ldr	r2, [pc, #40]	@ (8003ac4 <HAL_GPIO_Init+0x4a4>)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	3301      	adds	r3, #1
 8003aa4:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003aa6:	683b      	ldr	r3, [r7, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	fa22 f303 	lsr.w	r3, r2, r3
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	f47f ae3f 	bne.w	8003734 <HAL_GPIO_Init+0x114>
  }
}
 8003ab6:	bf00      	nop
 8003ab8:	bf00      	nop
 8003aba:	3718      	adds	r7, #24
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}
 8003ac0:	40010000 	.word	0x40010000
 8003ac4:	40010400 	.word	0x40010400

08003ac8 <HAL_GPIO_TogglePin>:
  * @param  GPIO_Pin specifies the pin to be toggled.
  *         This parameter can be any combination of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	6078      	str	r0, [r7, #4]
 8003ad0:	460b      	mov	r3, r1
 8003ad2:	807b      	strh	r3, [r7, #2]
  uint32_t odr;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
 8003ad4:	887b      	ldrh	r3, [r7, #2]
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d104      	bne.n	8003ae4 <HAL_GPIO_TogglePin+0x1c>
 8003ada:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8003ade:	480a      	ldr	r0, [pc, #40]	@ (8003b08 <HAL_GPIO_TogglePin+0x40>)
 8003ae0:	f7fe fa0c 	bl	8001efc <assert_failed>

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	695b      	ldr	r3, [r3, #20]
 8003ae8:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8003aea:	887a      	ldrh	r2, [r7, #2]
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	4013      	ands	r3, r2
 8003af0:	041a      	lsls	r2, r3, #16
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	43d9      	mvns	r1, r3
 8003af6:	887b      	ldrh	r3, [r7, #2]
 8003af8:	400b      	ands	r3, r1
 8003afa:	431a      	orrs	r2, r3
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	619a      	str	r2, [r3, #24]
}
 8003b00:	bf00      	nop
 8003b02:	3710      	adds	r7, #16
 8003b04:	46bd      	mov	sp, r7
 8003b06:	bd80      	pop	{r7, pc}
 8003b08:	0800ad1c 	.word	0x0800ad1c

08003b0c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	b084      	sub	sp, #16
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d00b      	beq.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x26>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003b20:	d007      	beq.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x26>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b28:	d003      	beq.n	8003b32 <HAL_PWREx_ControlVoltageScaling+0x26>
 8003b2a:	219d      	movs	r1, #157	@ 0x9d
 8003b2c:	484d      	ldr	r0, [pc, #308]	@ (8003c64 <HAL_PWREx_ControlVoltageScaling+0x158>)
 8003b2e:	f7fe f9e5 	bl	8001efc <assert_failed>

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d141      	bne.n	8003bbc <HAL_PWREx_ControlVoltageScaling+0xb0>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003b38:	4b4b      	ldr	r3, [pc, #300]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b44:	d131      	bne.n	8003baa <HAL_PWREx_ControlVoltageScaling+0x9e>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003b46:	4b48      	ldr	r3, [pc, #288]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003b48:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003b4c:	4a46      	ldr	r2, [pc, #280]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003b4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003b52:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003b56:	4b44      	ldr	r3, [pc, #272]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003b5e:	4a42      	ldr	r2, [pc, #264]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003b60:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003b64:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003b66:	4b41      	ldr	r3, [pc, #260]	@ (8003c6c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	2232      	movs	r2, #50	@ 0x32
 8003b6c:	fb02 f303 	mul.w	r3, r2, r3
 8003b70:	4a3f      	ldr	r2, [pc, #252]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003b72:	fba2 2303 	umull	r2, r3, r2, r3
 8003b76:	0c9b      	lsrs	r3, r3, #18
 8003b78:	3301      	adds	r3, #1
 8003b7a:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b7c:	e002      	b.n	8003b84 <HAL_PWREx_ControlVoltageScaling+0x78>
      {
        wait_loop_index--;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	3b01      	subs	r3, #1
 8003b82:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003b84:	4b38      	ldr	r3, [pc, #224]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003b86:	695b      	ldr	r3, [r3, #20]
 8003b88:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003b8c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003b90:	d102      	bne.n	8003b98 <HAL_PWREx_ControlVoltageScaling+0x8c>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2b00      	cmp	r3, #0
 8003b96:	d1f2      	bne.n	8003b7e <HAL_PWREx_ControlVoltageScaling+0x72>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003b98:	4b33      	ldr	r3, [pc, #204]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ba0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003ba4:	d158      	bne.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003ba6:	2303      	movs	r3, #3
 8003ba8:	e057      	b.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003baa:	4b2f      	ldr	r3, [pc, #188]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003bac:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bb0:	4a2d      	ldr	r2, [pc, #180]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003bb2:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003bb6:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003bba:	e04d      	b.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003bc2:	d141      	bne.n	8003c48 <HAL_PWREx_ControlVoltageScaling+0x13c>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003bc4:	4b28      	ldr	r3, [pc, #160]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8003bcc:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bd0:	d131      	bne.n	8003c36 <HAL_PWREx_ControlVoltageScaling+0x12a>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003bd2:	4b25      	ldr	r3, [pc, #148]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003bd4:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003bd8:	4a23      	ldr	r2, [pc, #140]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003bda:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003bde:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003be2:	4b21      	ldr	r3, [pc, #132]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003bea:	4a1f      	ldr	r2, [pc, #124]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003bec:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8003bf0:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003bf2:	4b1e      	ldr	r3, [pc, #120]	@ (8003c6c <HAL_PWREx_ControlVoltageScaling+0x160>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	2232      	movs	r2, #50	@ 0x32
 8003bf8:	fb02 f303 	mul.w	r3, r2, r3
 8003bfc:	4a1c      	ldr	r2, [pc, #112]	@ (8003c70 <HAL_PWREx_ControlVoltageScaling+0x164>)
 8003bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8003c02:	0c9b      	lsrs	r3, r3, #18
 8003c04:	3301      	adds	r3, #1
 8003c06:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c08:	e002      	b.n	8003c10 <HAL_PWREx_ControlVoltageScaling+0x104>
      {
        wait_loop_index--;
 8003c0a:	68fb      	ldr	r3, [r7, #12]
 8003c0c:	3b01      	subs	r3, #1
 8003c0e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003c10:	4b15      	ldr	r3, [pc, #84]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003c12:	695b      	ldr	r3, [r3, #20]
 8003c14:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c18:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c1c:	d102      	bne.n	8003c24 <HAL_PWREx_ControlVoltageScaling+0x118>
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	2b00      	cmp	r3, #0
 8003c22:	d1f2      	bne.n	8003c0a <HAL_PWREx_ControlVoltageScaling+0xfe>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003c24:	4b10      	ldr	r3, [pc, #64]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003c26:	695b      	ldr	r3, [r3, #20]
 8003c28:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003c2c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003c30:	d112      	bne.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x14c>
      {
        return HAL_TIMEOUT;
 8003c32:	2303      	movs	r3, #3
 8003c34:	e011      	b.n	8003c5a <HAL_PWREx_ControlVoltageScaling+0x14e>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003c36:	4b0c      	ldr	r3, [pc, #48]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003c38:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8003c3c:	4a0a      	ldr	r2, [pc, #40]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003c3e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003c42:	f8c2 3080 	str.w	r3, [r2, #128]	@ 0x80
 8003c46:	e007      	b.n	8003c58 <HAL_PWREx_ControlVoltageScaling+0x14c>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003c48:	4b07      	ldr	r3, [pc, #28]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	f423 63c0 	bic.w	r3, r3, #1536	@ 0x600
 8003c50:	4a05      	ldr	r2, [pc, #20]	@ (8003c68 <HAL_PWREx_ControlVoltageScaling+0x15c>)
 8003c52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003c56:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003c58:	2300      	movs	r3, #0
}
 8003c5a:	4618      	mov	r0, r3
 8003c5c:	3710      	adds	r7, #16
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	bd80      	pop	{r7, pc}
 8003c62:	bf00      	nop
 8003c64:	0800ad58 	.word	0x0800ad58
 8003c68:	40007000 	.word	0x40007000
 8003c6c:	20000000 	.word	0x20000000
 8003c70:	431bde83 	.word	0x431bde83

08003c74 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003c74:	b480      	push	{r7}
 8003c76:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003c78:	4b05      	ldr	r3, [pc, #20]	@ (8003c90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	4a04      	ldr	r2, [pc, #16]	@ (8003c90 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003c7e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003c82:	6093      	str	r3, [r2, #8]
}
 8003c84:	bf00      	nop
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40007000 	.word	0x40007000

08003c94 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003c94:	b580      	push	{r7, lr}
 8003c96:	b088      	sub	sp, #32
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	2b00      	cmp	r3, #0
 8003ca0:	d101      	bne.n	8003ca6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003ca2:	2301      	movs	r3, #1
 8003ca4:	e3fc      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d022      	beq.n	8003cf4 <HAL_RCC_OscConfig+0x60>
 8003cae:	687b      	ldr	r3, [r7, #4]
 8003cb0:	681b      	ldr	r3, [r3, #0]
 8003cb2:	f003 0301 	and.w	r3, r3, #1
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d11c      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x60>
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f003 0302 	and.w	r3, r3, #2
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d116      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x60>
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f003 0320 	and.w	r3, r3, #32
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	d110      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x60>
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f003 0308 	and.w	r3, r3, #8
 8003cda:	2b00      	cmp	r3, #0
 8003cdc:	d10a      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x60>
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	f003 0304 	and.w	r3, r3, #4
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	d104      	bne.n	8003cf4 <HAL_RCC_OscConfig+0x60>
 8003cea:	f240 1145 	movw	r1, #325	@ 0x145
 8003cee:	4893      	ldr	r0, [pc, #588]	@ (8003f3c <HAL_RCC_OscConfig+0x2a8>)
 8003cf0:	f7fe f904 	bl	8001efc <assert_failed>

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	f000 8089 	beq.w	8003e14 <HAL_RCC_OscConfig+0x180>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	685b      	ldr	r3, [r3, #4]
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d00e      	beq.n	8003d28 <HAL_RCC_OscConfig+0x94>
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	685b      	ldr	r3, [r3, #4]
 8003d0e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d12:	d009      	beq.n	8003d28 <HAL_RCC_OscConfig+0x94>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	685b      	ldr	r3, [r3, #4]
 8003d18:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d1c:	d004      	beq.n	8003d28 <HAL_RCC_OscConfig+0x94>
 8003d1e:	f240 114b 	movw	r1, #331	@ 0x14b
 8003d22:	4886      	ldr	r0, [pc, #536]	@ (8003f3c <HAL_RCC_OscConfig+0x2a8>)
 8003d24:	f7fe f8ea 	bl	8001efc <assert_failed>

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003d28:	4b85      	ldr	r3, [pc, #532]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d2a:	689b      	ldr	r3, [r3, #8]
 8003d2c:	f003 030c 	and.w	r3, r3, #12
 8003d30:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003d32:	4b83      	ldr	r3, [pc, #524]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d34:	68db      	ldr	r3, [r3, #12]
 8003d36:	f003 0303 	and.w	r3, r3, #3
 8003d3a:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8003d3c:	69bb      	ldr	r3, [r7, #24]
 8003d3e:	2b0c      	cmp	r3, #12
 8003d40:	d102      	bne.n	8003d48 <HAL_RCC_OscConfig+0xb4>
 8003d42:	697b      	ldr	r3, [r7, #20]
 8003d44:	2b03      	cmp	r3, #3
 8003d46:	d002      	beq.n	8003d4e <HAL_RCC_OscConfig+0xba>
 8003d48:	69bb      	ldr	r3, [r7, #24]
 8003d4a:	2b08      	cmp	r3, #8
 8003d4c:	d10b      	bne.n	8003d66 <HAL_RCC_OscConfig+0xd2>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003d4e:	4b7c      	ldr	r3, [pc, #496]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d05b      	beq.n	8003e12 <HAL_RCC_OscConfig+0x17e>
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	685b      	ldr	r3, [r3, #4]
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d157      	bne.n	8003e12 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 8003d62:	2301      	movs	r3, #1
 8003d64:	e39c      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	685b      	ldr	r3, [r3, #4]
 8003d6a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003d6e:	d106      	bne.n	8003d7e <HAL_RCC_OscConfig+0xea>
 8003d70:	4b73      	ldr	r3, [pc, #460]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	4a72      	ldr	r2, [pc, #456]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d76:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d7a:	6013      	str	r3, [r2, #0]
 8003d7c:	e01d      	b.n	8003dba <HAL_RCC_OscConfig+0x126>
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	685b      	ldr	r3, [r3, #4]
 8003d82:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003d86:	d10c      	bne.n	8003da2 <HAL_RCC_OscConfig+0x10e>
 8003d88:	4b6d      	ldr	r3, [pc, #436]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	4a6c      	ldr	r2, [pc, #432]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d8e:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003d92:	6013      	str	r3, [r2, #0]
 8003d94:	4b6a      	ldr	r3, [pc, #424]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	4a69      	ldr	r2, [pc, #420]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003d9a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003d9e:	6013      	str	r3, [r2, #0]
 8003da0:	e00b      	b.n	8003dba <HAL_RCC_OscConfig+0x126>
 8003da2:	4b67      	ldr	r3, [pc, #412]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	4a66      	ldr	r2, [pc, #408]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003da8:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003dac:	6013      	str	r3, [r2, #0]
 8003dae:	4b64      	ldr	r3, [pc, #400]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003db0:	681b      	ldr	r3, [r3, #0]
 8003db2:	4a63      	ldr	r2, [pc, #396]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003db4:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003db8:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	685b      	ldr	r3, [r3, #4]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d013      	beq.n	8003dea <HAL_RCC_OscConfig+0x156>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dc2:	f7fe fb3f 	bl	8002444 <HAL_GetTick>
 8003dc6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003dc8:	e008      	b.n	8003ddc <HAL_RCC_OscConfig+0x148>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003dca:	f7fe fb3b 	bl	8002444 <HAL_GetTick>
 8003dce:	4602      	mov	r2, r0
 8003dd0:	693b      	ldr	r3, [r7, #16]
 8003dd2:	1ad3      	subs	r3, r2, r3
 8003dd4:	2b64      	cmp	r3, #100	@ 0x64
 8003dd6:	d901      	bls.n	8003ddc <HAL_RCC_OscConfig+0x148>
          {
            return HAL_TIMEOUT;
 8003dd8:	2303      	movs	r3, #3
 8003dda:	e361      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ddc:	4b58      	ldr	r3, [pc, #352]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d0f0      	beq.n	8003dca <HAL_RCC_OscConfig+0x136>
 8003de8:	e014      	b.n	8003e14 <HAL_RCC_OscConfig+0x180>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003dea:	f7fe fb2b 	bl	8002444 <HAL_GetTick>
 8003dee:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003df0:	e008      	b.n	8003e04 <HAL_RCC_OscConfig+0x170>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003df2:	f7fe fb27 	bl	8002444 <HAL_GetTick>
 8003df6:	4602      	mov	r2, r0
 8003df8:	693b      	ldr	r3, [r7, #16]
 8003dfa:	1ad3      	subs	r3, r2, r3
 8003dfc:	2b64      	cmp	r3, #100	@ 0x64
 8003dfe:	d901      	bls.n	8003e04 <HAL_RCC_OscConfig+0x170>
          {
            return HAL_TIMEOUT;
 8003e00:	2303      	movs	r3, #3
 8003e02:	e34d      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003e04:	4b4e      	ldr	r3, [pc, #312]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	d1f0      	bne.n	8003df2 <HAL_RCC_OscConfig+0x15e>
 8003e10:	e000      	b.n	8003e14 <HAL_RCC_OscConfig+0x180>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003e12:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f003 0302 	and.w	r3, r3, #2
 8003e1c:	2b00      	cmp	r3, #0
 8003e1e:	f000 8094 	beq.w	8003f4a <HAL_RCC_OscConfig+0x2b6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	68db      	ldr	r3, [r3, #12]
 8003e26:	2b00      	cmp	r3, #0
 8003e28:	d009      	beq.n	8003e3e <HAL_RCC_OscConfig+0x1aa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	68db      	ldr	r3, [r3, #12]
 8003e2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e32:	d004      	beq.n	8003e3e <HAL_RCC_OscConfig+0x1aa>
 8003e34:	f44f 71c0 	mov.w	r1, #384	@ 0x180
 8003e38:	4840      	ldr	r0, [pc, #256]	@ (8003f3c <HAL_RCC_OscConfig+0x2a8>)
 8003e3a:	f7fe f85f 	bl	8001efc <assert_failed>
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	691b      	ldr	r3, [r3, #16]
 8003e42:	2b7f      	cmp	r3, #127	@ 0x7f
 8003e44:	d904      	bls.n	8003e50 <HAL_RCC_OscConfig+0x1bc>
 8003e46:	f240 1181 	movw	r1, #385	@ 0x181
 8003e4a:	483c      	ldr	r0, [pc, #240]	@ (8003f3c <HAL_RCC_OscConfig+0x2a8>)
 8003e4c:	f7fe f856 	bl	8001efc <assert_failed>

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003e50:	4b3b      	ldr	r3, [pc, #236]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e52:	689b      	ldr	r3, [r3, #8]
 8003e54:	f003 030c 	and.w	r3, r3, #12
 8003e58:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8003e5a:	4b39      	ldr	r3, [pc, #228]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e5c:	68db      	ldr	r3, [r3, #12]
 8003e5e:	f003 0303 	and.w	r3, r3, #3
 8003e62:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8003e64:	69bb      	ldr	r3, [r7, #24]
 8003e66:	2b0c      	cmp	r3, #12
 8003e68:	d102      	bne.n	8003e70 <HAL_RCC_OscConfig+0x1dc>
 8003e6a:	697b      	ldr	r3, [r7, #20]
 8003e6c:	2b02      	cmp	r3, #2
 8003e6e:	d002      	beq.n	8003e76 <HAL_RCC_OscConfig+0x1e2>
 8003e70:	69bb      	ldr	r3, [r7, #24]
 8003e72:	2b04      	cmp	r3, #4
 8003e74:	d11f      	bne.n	8003eb6 <HAL_RCC_OscConfig+0x222>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003e76:	4b32      	ldr	r3, [pc, #200]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d005      	beq.n	8003e8e <HAL_RCC_OscConfig+0x1fa>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	68db      	ldr	r3, [r3, #12]
 8003e86:	2b00      	cmp	r3, #0
 8003e88:	d101      	bne.n	8003e8e <HAL_RCC_OscConfig+0x1fa>
      {
        return HAL_ERROR;
 8003e8a:	2301      	movs	r3, #1
 8003e8c:	e308      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003e8e:	4b2c      	ldr	r3, [pc, #176]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e90:	685b      	ldr	r3, [r3, #4]
 8003e92:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	691b      	ldr	r3, [r3, #16]
 8003e9a:	061b      	lsls	r3, r3, #24
 8003e9c:	4928      	ldr	r1, [pc, #160]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003e9e:	4313      	orrs	r3, r2
 8003ea0:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8003ea2:	4b28      	ldr	r3, [pc, #160]	@ (8003f44 <HAL_RCC_OscConfig+0x2b0>)
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4618      	mov	r0, r3
 8003ea8:	f7fe f85e 	bl	8001f68 <HAL_InitTick>
 8003eac:	4603      	mov	r3, r0
 8003eae:	2b00      	cmp	r3, #0
 8003eb0:	d04a      	beq.n	8003f48 <HAL_RCC_OscConfig+0x2b4>
        {
          return HAL_ERROR;
 8003eb2:	2301      	movs	r3, #1
 8003eb4:	e2f4      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	68db      	ldr	r3, [r3, #12]
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d023      	beq.n	8003f06 <HAL_RCC_OscConfig+0x272>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ebe:	4b20      	ldr	r3, [pc, #128]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1f      	ldr	r2, [pc, #124]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ec4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003ec8:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003eca:	f7fe fabb 	bl	8002444 <HAL_GetTick>
 8003ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ed0:	e008      	b.n	8003ee4 <HAL_RCC_OscConfig+0x250>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003ed2:	f7fe fab7 	bl	8002444 <HAL_GetTick>
 8003ed6:	4602      	mov	r2, r0
 8003ed8:	693b      	ldr	r3, [r7, #16]
 8003eda:	1ad3      	subs	r3, r2, r3
 8003edc:	2b02      	cmp	r3, #2
 8003ede:	d901      	bls.n	8003ee4 <HAL_RCC_OscConfig+0x250>
          {
            return HAL_TIMEOUT;
 8003ee0:	2303      	movs	r3, #3
 8003ee2:	e2dd      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003ee4:	4b16      	ldr	r3, [pc, #88]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d0f0      	beq.n	8003ed2 <HAL_RCC_OscConfig+0x23e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ef0:	4b13      	ldr	r3, [pc, #76]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f023 42fe 	bic.w	r2, r3, #2130706432	@ 0x7f000000
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	691b      	ldr	r3, [r3, #16]
 8003efc:	061b      	lsls	r3, r3, #24
 8003efe:	4910      	ldr	r1, [pc, #64]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003f00:	4313      	orrs	r3, r2
 8003f02:	604b      	str	r3, [r1, #4]
 8003f04:	e021      	b.n	8003f4a <HAL_RCC_OscConfig+0x2b6>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003f06:	4b0e      	ldr	r3, [pc, #56]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	4a0d      	ldr	r2, [pc, #52]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003f0c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003f10:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f12:	f7fe fa97 	bl	8002444 <HAL_GetTick>
 8003f16:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f18:	e008      	b.n	8003f2c <HAL_RCC_OscConfig+0x298>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003f1a:	f7fe fa93 	bl	8002444 <HAL_GetTick>
 8003f1e:	4602      	mov	r2, r0
 8003f20:	693b      	ldr	r3, [r7, #16]
 8003f22:	1ad3      	subs	r3, r2, r3
 8003f24:	2b02      	cmp	r3, #2
 8003f26:	d901      	bls.n	8003f2c <HAL_RCC_OscConfig+0x298>
          {
            return HAL_TIMEOUT;
 8003f28:	2303      	movs	r3, #3
 8003f2a:	e2b9      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003f2c:	4b04      	ldr	r3, [pc, #16]	@ (8003f40 <HAL_RCC_OscConfig+0x2ac>)
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d1f0      	bne.n	8003f1a <HAL_RCC_OscConfig+0x286>
 8003f38:	e007      	b.n	8003f4a <HAL_RCC_OscConfig+0x2b6>
 8003f3a:	bf00      	nop
 8003f3c:	0800ad94 	.word	0x0800ad94
 8003f40:	40021000 	.word	0x40021000
 8003f44:	20000004 	.word	0x20000004
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003f48:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	f003 0308 	and.w	r3, r3, #8
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d049      	beq.n	8003fea <HAL_RCC_OscConfig+0x356>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	695b      	ldr	r3, [r3, #20]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d008      	beq.n	8003f70 <HAL_RCC_OscConfig+0x2dc>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	695b      	ldr	r3, [r3, #20]
 8003f62:	2b01      	cmp	r3, #1
 8003f64:	d004      	beq.n	8003f70 <HAL_RCC_OscConfig+0x2dc>
 8003f66:	f44f 71e4 	mov.w	r1, #456	@ 0x1c8
 8003f6a:	48a3      	ldr	r0, [pc, #652]	@ (80041f8 <HAL_RCC_OscConfig+0x564>)
 8003f6c:	f7fd ffc6 	bl	8001efc <assert_failed>

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	695b      	ldr	r3, [r3, #20]
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d01c      	beq.n	8003fb2 <HAL_RCC_OscConfig+0x31e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003f78:	4ba0      	ldr	r3, [pc, #640]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8003f7a:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003f7e:	4a9f      	ldr	r2, [pc, #636]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8003f80:	f043 0301 	orr.w	r3, r3, #1
 8003f84:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003f88:	f7fe fa5c 	bl	8002444 <HAL_GetTick>
 8003f8c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003f8e:	e008      	b.n	8003fa2 <HAL_RCC_OscConfig+0x30e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003f90:	f7fe fa58 	bl	8002444 <HAL_GetTick>
 8003f94:	4602      	mov	r2, r0
 8003f96:	693b      	ldr	r3, [r7, #16]
 8003f98:	1ad3      	subs	r3, r2, r3
 8003f9a:	2b02      	cmp	r3, #2
 8003f9c:	d901      	bls.n	8003fa2 <HAL_RCC_OscConfig+0x30e>
        {
          return HAL_TIMEOUT;
 8003f9e:	2303      	movs	r3, #3
 8003fa0:	e27e      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003fa2:	4b96      	ldr	r3, [pc, #600]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8003fa4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fa8:	f003 0302 	and.w	r3, r3, #2
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d0ef      	beq.n	8003f90 <HAL_RCC_OscConfig+0x2fc>
 8003fb0:	e01b      	b.n	8003fea <HAL_RCC_OscConfig+0x356>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003fb2:	4b92      	ldr	r3, [pc, #584]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8003fb4:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fb8:	4a90      	ldr	r2, [pc, #576]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8003fba:	f023 0301 	bic.w	r3, r3, #1
 8003fbe:	f8c2 3094 	str.w	r3, [r2, #148]	@ 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003fc2:	f7fe fa3f 	bl	8002444 <HAL_GetTick>
 8003fc6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fc8:	e008      	b.n	8003fdc <HAL_RCC_OscConfig+0x348>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003fca:	f7fe fa3b 	bl	8002444 <HAL_GetTick>
 8003fce:	4602      	mov	r2, r0
 8003fd0:	693b      	ldr	r3, [r7, #16]
 8003fd2:	1ad3      	subs	r3, r2, r3
 8003fd4:	2b02      	cmp	r3, #2
 8003fd6:	d901      	bls.n	8003fdc <HAL_RCC_OscConfig+0x348>
        {
          return HAL_TIMEOUT;
 8003fd8:	2303      	movs	r3, #3
 8003fda:	e261      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003fdc:	4b87      	ldr	r3, [pc, #540]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8003fde:	f8d3 3094 	ldr.w	r3, [r3, #148]	@ 0x94
 8003fe2:	f003 0302 	and.w	r3, r3, #2
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d1ef      	bne.n	8003fca <HAL_RCC_OscConfig+0x336>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	f003 0304 	and.w	r3, r3, #4
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	f000 80b7 	beq.w	8004166 <HAL_RCC_OscConfig+0x4d2>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003ff8:	2300      	movs	r3, #0
 8003ffa:	77fb      	strb	r3, [r7, #31]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	689b      	ldr	r3, [r3, #8]
 8004000:	2b00      	cmp	r3, #0
 8004002:	d00c      	beq.n	800401e <HAL_RCC_OscConfig+0x38a>
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	689b      	ldr	r3, [r3, #8]
 8004008:	2b01      	cmp	r3, #1
 800400a:	d008      	beq.n	800401e <HAL_RCC_OscConfig+0x38a>
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	689b      	ldr	r3, [r3, #8]
 8004010:	2b05      	cmp	r3, #5
 8004012:	d004      	beq.n	800401e <HAL_RCC_OscConfig+0x38a>
 8004014:	f44f 71fa 	mov.w	r1, #500	@ 0x1f4
 8004018:	4877      	ldr	r0, [pc, #476]	@ (80041f8 <HAL_RCC_OscConfig+0x564>)
 800401a:	f7fd ff6f 	bl	8001efc <assert_failed>

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 800401e:	4b77      	ldr	r3, [pc, #476]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8004020:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004022:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004026:	2b00      	cmp	r3, #0
 8004028:	d101      	bne.n	800402e <HAL_RCC_OscConfig+0x39a>
 800402a:	2301      	movs	r3, #1
 800402c:	e000      	b.n	8004030 <HAL_RCC_OscConfig+0x39c>
 800402e:	2300      	movs	r3, #0
 8004030:	2b00      	cmp	r3, #0
 8004032:	d00d      	beq.n	8004050 <HAL_RCC_OscConfig+0x3bc>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004034:	4b71      	ldr	r3, [pc, #452]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8004036:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004038:	4a70      	ldr	r2, [pc, #448]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 800403a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800403e:	6593      	str	r3, [r2, #88]	@ 0x58
 8004040:	4b6e      	ldr	r3, [pc, #440]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8004042:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004044:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004048:	60fb      	str	r3, [r7, #12]
 800404a:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 800404c:	2301      	movs	r3, #1
 800404e:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004050:	4b6b      	ldr	r3, [pc, #428]	@ (8004200 <HAL_RCC_OscConfig+0x56c>)
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004058:	2b00      	cmp	r3, #0
 800405a:	d118      	bne.n	800408e <HAL_RCC_OscConfig+0x3fa>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800405c:	4b68      	ldr	r3, [pc, #416]	@ (8004200 <HAL_RCC_OscConfig+0x56c>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4a67      	ldr	r2, [pc, #412]	@ (8004200 <HAL_RCC_OscConfig+0x56c>)
 8004062:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004066:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004068:	f7fe f9ec 	bl	8002444 <HAL_GetTick>
 800406c:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800406e:	e008      	b.n	8004082 <HAL_RCC_OscConfig+0x3ee>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004070:	f7fe f9e8 	bl	8002444 <HAL_GetTick>
 8004074:	4602      	mov	r2, r0
 8004076:	693b      	ldr	r3, [r7, #16]
 8004078:	1ad3      	subs	r3, r2, r3
 800407a:	2b02      	cmp	r3, #2
 800407c:	d901      	bls.n	8004082 <HAL_RCC_OscConfig+0x3ee>
        {
          return HAL_TIMEOUT;
 800407e:	2303      	movs	r3, #3
 8004080:	e20e      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004082:	4b5f      	ldr	r3, [pc, #380]	@ (8004200 <HAL_RCC_OscConfig+0x56c>)
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d0f0      	beq.n	8004070 <HAL_RCC_OscConfig+0x3dc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	689b      	ldr	r3, [r3, #8]
 8004092:	2b01      	cmp	r3, #1
 8004094:	d108      	bne.n	80040a8 <HAL_RCC_OscConfig+0x414>
 8004096:	4b59      	ldr	r3, [pc, #356]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8004098:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800409c:	4a57      	ldr	r2, [pc, #348]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 800409e:	f043 0301 	orr.w	r3, r3, #1
 80040a2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040a6:	e024      	b.n	80040f2 <HAL_RCC_OscConfig+0x45e>
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	2b05      	cmp	r3, #5
 80040ae:	d110      	bne.n	80040d2 <HAL_RCC_OscConfig+0x43e>
 80040b0:	4b52      	ldr	r3, [pc, #328]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040b2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040b6:	4a51      	ldr	r2, [pc, #324]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040b8:	f043 0304 	orr.w	r3, r3, #4
 80040bc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040c0:	4b4e      	ldr	r3, [pc, #312]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040c6:	4a4d      	ldr	r2, [pc, #308]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040d0:	e00f      	b.n	80040f2 <HAL_RCC_OscConfig+0x45e>
 80040d2:	4b4a      	ldr	r3, [pc, #296]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040d4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040d8:	4a48      	ldr	r2, [pc, #288]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040da:	f023 0301 	bic.w	r3, r3, #1
 80040de:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
 80040e2:	4b46      	ldr	r3, [pc, #280]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80040e8:	4a44      	ldr	r2, [pc, #272]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80040ea:	f023 0304 	bic.w	r3, r3, #4
 80040ee:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	689b      	ldr	r3, [r3, #8]
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d016      	beq.n	8004128 <HAL_RCC_OscConfig+0x494>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80040fa:	f7fe f9a3 	bl	8002444 <HAL_GetTick>
 80040fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004100:	e00a      	b.n	8004118 <HAL_RCC_OscConfig+0x484>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004102:	f7fe f99f 	bl	8002444 <HAL_GetTick>
 8004106:	4602      	mov	r2, r0
 8004108:	693b      	ldr	r3, [r7, #16]
 800410a:	1ad3      	subs	r3, r2, r3
 800410c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004110:	4293      	cmp	r3, r2
 8004112:	d901      	bls.n	8004118 <HAL_RCC_OscConfig+0x484>
        {
          return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e1c3      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004118:	4b38      	ldr	r3, [pc, #224]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 800411a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800411e:	f003 0302 	and.w	r3, r3, #2
 8004122:	2b00      	cmp	r3, #0
 8004124:	d0ed      	beq.n	8004102 <HAL_RCC_OscConfig+0x46e>
 8004126:	e015      	b.n	8004154 <HAL_RCC_OscConfig+0x4c0>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004128:	f7fe f98c 	bl	8002444 <HAL_GetTick>
 800412c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800412e:	e00a      	b.n	8004146 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004130:	f7fe f988 	bl	8002444 <HAL_GetTick>
 8004134:	4602      	mov	r2, r0
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	1ad3      	subs	r3, r2, r3
 800413a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800413e:	4293      	cmp	r3, r2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e1ac      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8004146:	4b2d      	ldr	r3, [pc, #180]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8004148:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d1ed      	bne.n	8004130 <HAL_RCC_OscConfig+0x49c>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004154:	7ffb      	ldrb	r3, [r7, #31]
 8004156:	2b01      	cmp	r3, #1
 8004158:	d105      	bne.n	8004166 <HAL_RCC_OscConfig+0x4d2>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800415a:	4b28      	ldr	r3, [pc, #160]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 800415c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800415e:	4a27      	ldr	r2, [pc, #156]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8004160:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004164:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f003 0320 	and.w	r3, r3, #32
 800416e:	2b00      	cmp	r3, #0
 8004170:	d04f      	beq.n	8004212 <HAL_RCC_OscConfig+0x57e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	699b      	ldr	r3, [r3, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d008      	beq.n	800418c <HAL_RCC_OscConfig+0x4f8>
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	699b      	ldr	r3, [r3, #24]
 800417e:	2b01      	cmp	r3, #1
 8004180:	d004      	beq.n	800418c <HAL_RCC_OscConfig+0x4f8>
 8004182:	f240 213b 	movw	r1, #571	@ 0x23b
 8004186:	481c      	ldr	r0, [pc, #112]	@ (80041f8 <HAL_RCC_OscConfig+0x564>)
 8004188:	f7fd feb8 	bl	8001efc <assert_failed>

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	2b00      	cmp	r3, #0
 8004192:	d01c      	beq.n	80041ce <HAL_RCC_OscConfig+0x53a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8004194:	4b19      	ldr	r3, [pc, #100]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 8004196:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800419a:	4a18      	ldr	r2, [pc, #96]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 800419c:	f043 0301 	orr.w	r3, r3, #1
 80041a0:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041a4:	f7fe f94e 	bl	8002444 <HAL_GetTick>
 80041a8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041aa:	e008      	b.n	80041be <HAL_RCC_OscConfig+0x52a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041ac:	f7fe f94a 	bl	8002444 <HAL_GetTick>
 80041b0:	4602      	mov	r2, r0
 80041b2:	693b      	ldr	r3, [r7, #16]
 80041b4:	1ad3      	subs	r3, r2, r3
 80041b6:	2b02      	cmp	r3, #2
 80041b8:	d901      	bls.n	80041be <HAL_RCC_OscConfig+0x52a>
        {
          return HAL_TIMEOUT;
 80041ba:	2303      	movs	r3, #3
 80041bc:	e170      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80041be:	4b0f      	ldr	r3, [pc, #60]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80041c0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041c4:	f003 0302 	and.w	r3, r3, #2
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d0ef      	beq.n	80041ac <HAL_RCC_OscConfig+0x518>
 80041cc:	e021      	b.n	8004212 <HAL_RCC_OscConfig+0x57e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80041ce:	4b0b      	ldr	r3, [pc, #44]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80041d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 80041d4:	4a09      	ldr	r2, [pc, #36]	@ (80041fc <HAL_RCC_OscConfig+0x568>)
 80041d6:	f023 0301 	bic.w	r3, r3, #1
 80041da:	f8c2 3098 	str.w	r3, [r2, #152]	@ 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80041de:	f7fe f931 	bl	8002444 <HAL_GetTick>
 80041e2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80041e4:	e00e      	b.n	8004204 <HAL_RCC_OscConfig+0x570>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80041e6:	f7fe f92d 	bl	8002444 <HAL_GetTick>
 80041ea:	4602      	mov	r2, r0
 80041ec:	693b      	ldr	r3, [r7, #16]
 80041ee:	1ad3      	subs	r3, r2, r3
 80041f0:	2b02      	cmp	r3, #2
 80041f2:	d907      	bls.n	8004204 <HAL_RCC_OscConfig+0x570>
        {
          return HAL_TIMEOUT;
 80041f4:	2303      	movs	r3, #3
 80041f6:	e153      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
 80041f8:	0800ad94 	.word	0x0800ad94
 80041fc:	40021000 	.word	0x40021000
 8004200:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8004204:	4b85      	ldr	r3, [pc, #532]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004206:	f8d3 3098 	ldr.w	r3, [r3, #152]	@ 0x98
 800420a:	f003 0302 	and.w	r3, r3, #2
 800420e:	2b00      	cmp	r3, #0
 8004210:	d1e9      	bne.n	80041e6 <HAL_RCC_OscConfig+0x552>
    }
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	69db      	ldr	r3, [r3, #28]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d00c      	beq.n	8004234 <HAL_RCC_OscConfig+0x5a0>
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	69db      	ldr	r3, [r3, #28]
 800421e:	2b01      	cmp	r3, #1
 8004220:	d008      	beq.n	8004234 <HAL_RCC_OscConfig+0x5a0>
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	69db      	ldr	r3, [r3, #28]
 8004226:	2b02      	cmp	r3, #2
 8004228:	d004      	beq.n	8004234 <HAL_RCC_OscConfig+0x5a0>
 800422a:	f44f 7119 	mov.w	r1, #612	@ 0x264
 800422e:	487c      	ldr	r0, [pc, #496]	@ (8004420 <HAL_RCC_OscConfig+0x78c>)
 8004230:	f7fd fe64 	bl	8001efc <assert_failed>

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	69db      	ldr	r3, [r3, #28]
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8130 	beq.w	800449e <HAL_RCC_OscConfig+0x80a>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800423e:	4b77      	ldr	r3, [pc, #476]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004240:	689b      	ldr	r3, [r3, #8]
 8004242:	f003 030c 	and.w	r3, r3, #12
 8004246:	2b0c      	cmp	r3, #12
 8004248:	f000 80e2 	beq.w	8004410 <HAL_RCC_OscConfig+0x77c>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	69db      	ldr	r3, [r3, #28]
 8004250:	2b02      	cmp	r3, #2
 8004252:	f040 80bd 	bne.w	80043d0 <HAL_RCC_OscConfig+0x73c>
      {
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	6a1b      	ldr	r3, [r3, #32]
 800425a:	2b00      	cmp	r3, #0
 800425c:	d00c      	beq.n	8004278 <HAL_RCC_OscConfig+0x5e4>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	2b02      	cmp	r3, #2
 8004264:	d008      	beq.n	8004278 <HAL_RCC_OscConfig+0x5e4>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	2b03      	cmp	r3, #3
 800426c:	d004      	beq.n	8004278 <HAL_RCC_OscConfig+0x5e4>
 800426e:	f240 216e 	movw	r1, #622	@ 0x26e
 8004272:	486b      	ldr	r0, [pc, #428]	@ (8004420 <HAL_RCC_OscConfig+0x78c>)
 8004274:	f7fd fe42 	bl	8001efc <assert_failed>
        assert_param(IS_RCC_PLLM_VALUE(RCC_OscInitStruct->PLL.PLLM));
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800427c:	2b00      	cmp	r3, #0
 800427e:	d003      	beq.n	8004288 <HAL_RCC_OscConfig+0x5f4>
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004284:	2b10      	cmp	r3, #16
 8004286:	d904      	bls.n	8004292 <HAL_RCC_OscConfig+0x5fe>
 8004288:	f240 216f 	movw	r1, #623	@ 0x26f
 800428c:	4864      	ldr	r0, [pc, #400]	@ (8004420 <HAL_RCC_OscConfig+0x78c>)
 800428e:	f7fd fe35 	bl	8001efc <assert_failed>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004296:	2b07      	cmp	r3, #7
 8004298:	d903      	bls.n	80042a2 <HAL_RCC_OscConfig+0x60e>
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800429e:	2b7f      	cmp	r3, #127	@ 0x7f
 80042a0:	d904      	bls.n	80042ac <HAL_RCC_OscConfig+0x618>
 80042a2:	f44f 711c 	mov.w	r1, #624	@ 0x270
 80042a6:	485e      	ldr	r0, [pc, #376]	@ (8004420 <HAL_RCC_OscConfig+0x78c>)
 80042a8:	f7fd fe28 	bl	8001efc <assert_failed>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b0:	2b01      	cmp	r3, #1
 80042b2:	d903      	bls.n	80042bc <HAL_RCC_OscConfig+0x628>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80042b8:	2b1f      	cmp	r3, #31
 80042ba:	d904      	bls.n	80042c6 <HAL_RCC_OscConfig+0x632>
 80042bc:	f240 2171 	movw	r1, #625	@ 0x271
 80042c0:	4857      	ldr	r0, [pc, #348]	@ (8004420 <HAL_RCC_OscConfig+0x78c>)
 80042c2:	f7fd fe1b 	bl	8001efc <assert_failed>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042ca:	2b02      	cmp	r3, #2
 80042cc:	d010      	beq.n	80042f0 <HAL_RCC_OscConfig+0x65c>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d00c      	beq.n	80042f0 <HAL_RCC_OscConfig+0x65c>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042da:	2b06      	cmp	r3, #6
 80042dc:	d008      	beq.n	80042f0 <HAL_RCC_OscConfig+0x65c>
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042e2:	2b08      	cmp	r3, #8
 80042e4:	d004      	beq.n	80042f0 <HAL_RCC_OscConfig+0x65c>
 80042e6:	f240 2172 	movw	r1, #626	@ 0x272
 80042ea:	484d      	ldr	r0, [pc, #308]	@ (8004420 <HAL_RCC_OscConfig+0x78c>)
 80042ec:	f7fd fe06 	bl	8001efc <assert_failed>
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042f4:	2b02      	cmp	r3, #2
 80042f6:	d010      	beq.n	800431a <HAL_RCC_OscConfig+0x686>
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80042fc:	2b04      	cmp	r3, #4
 80042fe:	d00c      	beq.n	800431a <HAL_RCC_OscConfig+0x686>
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004304:	2b06      	cmp	r3, #6
 8004306:	d008      	beq.n	800431a <HAL_RCC_OscConfig+0x686>
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800430c:	2b08      	cmp	r3, #8
 800430e:	d004      	beq.n	800431a <HAL_RCC_OscConfig+0x686>
 8004310:	f240 2173 	movw	r1, #627	@ 0x273
 8004314:	4842      	ldr	r0, [pc, #264]	@ (8004420 <HAL_RCC_OscConfig+0x78c>)
 8004316:	f7fd fdf1 	bl	8001efc <assert_failed>

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800431a:	4b40      	ldr	r3, [pc, #256]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a3f      	ldr	r2, [pc, #252]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004320:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 8004324:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004326:	f7fe f88d 	bl	8002444 <HAL_GetTick>
 800432a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800432c:	e008      	b.n	8004340 <HAL_RCC_OscConfig+0x6ac>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800432e:	f7fe f889 	bl	8002444 <HAL_GetTick>
 8004332:	4602      	mov	r2, r0
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	1ad3      	subs	r3, r2, r3
 8004338:	2b02      	cmp	r3, #2
 800433a:	d901      	bls.n	8004340 <HAL_RCC_OscConfig+0x6ac>
          {
            return HAL_TIMEOUT;
 800433c:	2303      	movs	r3, #3
 800433e:	e0af      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8004340:	4b36      	ldr	r3, [pc, #216]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004348:	2b00      	cmp	r3, #0
 800434a:	d1f0      	bne.n	800432e <HAL_RCC_OscConfig+0x69a>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800434c:	4b33      	ldr	r3, [pc, #204]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 800434e:	68da      	ldr	r2, [r3, #12]
 8004350:	4b34      	ldr	r3, [pc, #208]	@ (8004424 <HAL_RCC_OscConfig+0x790>)
 8004352:	4013      	ands	r3, r2
 8004354:	687a      	ldr	r2, [r7, #4]
 8004356:	6a11      	ldr	r1, [r2, #32]
 8004358:	687a      	ldr	r2, [r7, #4]
 800435a:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800435c:	3a01      	subs	r2, #1
 800435e:	0112      	lsls	r2, r2, #4
 8004360:	4311      	orrs	r1, r2
 8004362:	687a      	ldr	r2, [r7, #4]
 8004364:	6a92      	ldr	r2, [r2, #40]	@ 0x28
 8004366:	0212      	lsls	r2, r2, #8
 8004368:	4311      	orrs	r1, r2
 800436a:	687a      	ldr	r2, [r7, #4]
 800436c:	6b12      	ldr	r2, [r2, #48]	@ 0x30
 800436e:	0852      	lsrs	r2, r2, #1
 8004370:	3a01      	subs	r2, #1
 8004372:	0552      	lsls	r2, r2, #21
 8004374:	4311      	orrs	r1, r2
 8004376:	687a      	ldr	r2, [r7, #4]
 8004378:	6b52      	ldr	r2, [r2, #52]	@ 0x34
 800437a:	0852      	lsrs	r2, r2, #1
 800437c:	3a01      	subs	r2, #1
 800437e:	0652      	lsls	r2, r2, #25
 8004380:	4311      	orrs	r1, r2
 8004382:	687a      	ldr	r2, [r7, #4]
 8004384:	6ad2      	ldr	r2, [r2, #44]	@ 0x2c
 8004386:	06d2      	lsls	r2, r2, #27
 8004388:	430a      	orrs	r2, r1
 800438a:	4924      	ldr	r1, [pc, #144]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 800438c:	4313      	orrs	r3, r2
 800438e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004390:	4b22      	ldr	r3, [pc, #136]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	4a21      	ldr	r2, [pc, #132]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004396:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 800439a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800439c:	4b1f      	ldr	r3, [pc, #124]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 800439e:	68db      	ldr	r3, [r3, #12]
 80043a0:	4a1e      	ldr	r2, [pc, #120]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 80043a2:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80043a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043a8:	f7fe f84c 	bl	8002444 <HAL_GetTick>
 80043ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043ae:	e008      	b.n	80043c2 <HAL_RCC_OscConfig+0x72e>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043b0:	f7fe f848 	bl	8002444 <HAL_GetTick>
 80043b4:	4602      	mov	r2, r0
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	1ad3      	subs	r3, r2, r3
 80043ba:	2b02      	cmp	r3, #2
 80043bc:	d901      	bls.n	80043c2 <HAL_RCC_OscConfig+0x72e>
          {
            return HAL_TIMEOUT;
 80043be:	2303      	movs	r3, #3
 80043c0:	e06e      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80043c2:	4b16      	ldr	r3, [pc, #88]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d0f0      	beq.n	80043b0 <HAL_RCC_OscConfig+0x71c>
 80043ce:	e066      	b.n	800449e <HAL_RCC_OscConfig+0x80a>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043d0:	4b12      	ldr	r3, [pc, #72]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a11      	ldr	r2, [pc, #68]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 80043d6:	f023 7380 	bic.w	r3, r3, #16777216	@ 0x1000000
 80043da:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80043dc:	f7fe f832 	bl	8002444 <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0x762>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80043e4:	f7fe f82e 	bl	8002444 <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0x762>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e054      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80043f6:	4b09      	ldr	r3, [pc, #36]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d1f0      	bne.n	80043e4 <HAL_RCC_OscConfig+0x750>
          }
        }

        /* Unselect PLL clock source and disable outputs to save power */
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8004402:	4b06      	ldr	r3, [pc, #24]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004404:	68da      	ldr	r2, [r3, #12]
 8004406:	4905      	ldr	r1, [pc, #20]	@ (800441c <HAL_RCC_OscConfig+0x788>)
 8004408:	4b07      	ldr	r3, [pc, #28]	@ (8004428 <HAL_RCC_OscConfig+0x794>)
 800440a:	4013      	ands	r3, r2
 800440c:	60cb      	str	r3, [r1, #12]
 800440e:	e046      	b.n	800449e <HAL_RCC_OscConfig+0x80a>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
 8004414:	2b01      	cmp	r3, #1
 8004416:	d109      	bne.n	800442c <HAL_RCC_OscConfig+0x798>
      {
        return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e041      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
 800441c:	40021000 	.word	0x40021000
 8004420:	0800ad94 	.word	0x0800ad94
 8004424:	019f800c 	.word	0x019f800c
 8004428:	feeefffc 	.word	0xfeeefffc
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800442c:	4b1e      	ldr	r3, [pc, #120]	@ (80044a8 <HAL_RCC_OscConfig+0x814>)
 800442e:	68db      	ldr	r3, [r3, #12]
 8004430:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004432:	697b      	ldr	r3, [r7, #20]
 8004434:	f003 0203 	and.w	r2, r3, #3
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	429a      	cmp	r2, r3
 800443e:	d12c      	bne.n	800449a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800444a:	3b01      	subs	r3, #1
 800444c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800444e:	429a      	cmp	r2, r3
 8004450:	d123      	bne.n	800449a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8004452:	697b      	ldr	r3, [r7, #20]
 8004454:	f403 42fe 	and.w	r2, r3, #32512	@ 0x7f00
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800445c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800445e:	429a      	cmp	r2, r3
 8004460:	d11b      	bne.n	800449a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f003 4278 	and.w	r2, r3, #4160749568	@ 0xf8000000
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800446c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800446e:	429a      	cmp	r2, r3
 8004470:	d113      	bne.n	800449a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004472:	697b      	ldr	r3, [r7, #20]
 8004474:	f403 02c0 	and.w	r2, r3, #6291456	@ 0x600000
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800447c:	085b      	lsrs	r3, r3, #1
 800447e:	3b01      	subs	r3, #1
 8004480:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8004482:	429a      	cmp	r2, r3
 8004484:	d109      	bne.n	800449a <HAL_RCC_OscConfig+0x806>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f003 62c0 	and.w	r2, r3, #100663296	@ 0x6000000
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8004490:	085b      	lsrs	r3, r3, #1
 8004492:	3b01      	subs	r3, #1
 8004494:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8004496:	429a      	cmp	r2, r3
 8004498:	d001      	beq.n	800449e <HAL_RCC_OscConfig+0x80a>
      {
        return HAL_ERROR;
 800449a:	2301      	movs	r3, #1
 800449c:	e000      	b.n	80044a0 <HAL_RCC_OscConfig+0x80c>
      }
    }
  }
  }

  return HAL_OK;
 800449e:	2300      	movs	r3, #0
}
 80044a0:	4618      	mov	r0, r3
 80044a2:	3720      	adds	r7, #32
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bd80      	pop	{r7, pc}
 80044a8:	40021000 	.word	0x40021000

080044ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80044b6:	2300      	movs	r3, #0
 80044b8:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d101      	bne.n	80044c4 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80044c0:	2301      	movs	r3, #1
 80044c2:	e1e0      	b.n	8004886 <HAL_RCC_ClockConfig+0x3da>
  }

  /* Check the parameters */
  assert_param(IS_RCC_CLOCKTYPE(RCC_ClkInitStruct->ClockType));
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	681b      	ldr	r3, [r3, #0]
 80044c8:	f003 030f 	and.w	r3, r3, #15
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d003      	beq.n	80044d8 <HAL_RCC_ClockConfig+0x2c>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	2b0f      	cmp	r3, #15
 80044d6:	d904      	bls.n	80044e2 <HAL_RCC_ClockConfig+0x36>
 80044d8:	f240 310b 	movw	r1, #779	@ 0x30b
 80044dc:	4869      	ldr	r0, [pc, #420]	@ (8004684 <HAL_RCC_ClockConfig+0x1d8>)
 80044de:	f7fd fd0d 	bl	8001efc <assert_failed>
  assert_param(IS_FLASH_LATENCY(FLatency));
 80044e2:	683b      	ldr	r3, [r7, #0]
 80044e4:	2b00      	cmp	r3, #0
 80044e6:	d031      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	2b01      	cmp	r3, #1
 80044ec:	d02e      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	2b02      	cmp	r3, #2
 80044f2:	d02b      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	2b03      	cmp	r3, #3
 80044f8:	d028      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	2b04      	cmp	r3, #4
 80044fe:	d025      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004500:	683b      	ldr	r3, [r7, #0]
 8004502:	2b05      	cmp	r3, #5
 8004504:	d022      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004506:	683b      	ldr	r3, [r7, #0]
 8004508:	2b06      	cmp	r3, #6
 800450a:	d01f      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 800450c:	683b      	ldr	r3, [r7, #0]
 800450e:	2b07      	cmp	r3, #7
 8004510:	d01c      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	2b08      	cmp	r3, #8
 8004516:	d019      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	2b09      	cmp	r3, #9
 800451c:	d016      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 800451e:	683b      	ldr	r3, [r7, #0]
 8004520:	2b0a      	cmp	r3, #10
 8004522:	d013      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004524:	683b      	ldr	r3, [r7, #0]
 8004526:	2b0b      	cmp	r3, #11
 8004528:	d010      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 800452a:	683b      	ldr	r3, [r7, #0]
 800452c:	2b0c      	cmp	r3, #12
 800452e:	d00d      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	2b0d      	cmp	r3, #13
 8004534:	d00a      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	2b0e      	cmp	r3, #14
 800453a:	d007      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	2b0f      	cmp	r3, #15
 8004540:	d004      	beq.n	800454c <HAL_RCC_ClockConfig+0xa0>
 8004542:	f44f 7143 	mov.w	r1, #780	@ 0x30c
 8004546:	484f      	ldr	r0, [pc, #316]	@ (8004684 <HAL_RCC_ClockConfig+0x1d8>)
 8004548:	f7fd fcd8 	bl	8001efc <assert_failed>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800454c:	4b4e      	ldr	r3, [pc, #312]	@ (8004688 <HAL_RCC_ClockConfig+0x1dc>)
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 030f 	and.w	r3, r3, #15
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	429a      	cmp	r2, r3
 8004558:	d910      	bls.n	800457c <HAL_RCC_ClockConfig+0xd0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800455a:	4b4b      	ldr	r3, [pc, #300]	@ (8004688 <HAL_RCC_ClockConfig+0x1dc>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f023 020f 	bic.w	r2, r3, #15
 8004562:	4949      	ldr	r1, [pc, #292]	@ (8004688 <HAL_RCC_ClockConfig+0x1dc>)
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	4313      	orrs	r3, r2
 8004568:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800456a:	4b47      	ldr	r3, [pc, #284]	@ (8004688 <HAL_RCC_ClockConfig+0x1dc>)
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f003 030f 	and.w	r3, r3, #15
 8004572:	683a      	ldr	r2, [r7, #0]
 8004574:	429a      	cmp	r2, r3
 8004576:	d001      	beq.n	800457c <HAL_RCC_ClockConfig+0xd0>
    {
      return HAL_ERROR;
 8004578:	2301      	movs	r3, #1
 800457a:	e184      	b.n	8004886 <HAL_RCC_ClockConfig+0x3da>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0301 	and.w	r3, r3, #1
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 808e 	beq.w	80046a6 <HAL_RCC_ClockConfig+0x1fa>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	685b      	ldr	r3, [r3, #4]
 800458e:	2b01      	cmp	r3, #1
 8004590:	d00c      	beq.n	80045ac <HAL_RCC_ClockConfig+0x100>
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	685b      	ldr	r3, [r3, #4]
 8004596:	2b02      	cmp	r3, #2
 8004598:	d008      	beq.n	80045ac <HAL_RCC_ClockConfig+0x100>
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b03      	cmp	r3, #3
 80045a0:	d004      	beq.n	80045ac <HAL_RCC_ClockConfig+0x100>
 80045a2:	f240 3123 	movw	r1, #803	@ 0x323
 80045a6:	4837      	ldr	r0, [pc, #220]	@ (8004684 <HAL_RCC_ClockConfig+0x1d8>)
 80045a8:	f7fd fca8 	bl	8001efc <assert_failed>

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	685b      	ldr	r3, [r3, #4]
 80045b0:	2b03      	cmp	r3, #3
 80045b2:	d129      	bne.n	8004608 <HAL_RCC_ClockConfig+0x15c>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80045b4:	4b35      	ldr	r3, [pc, #212]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80045bc:	2b00      	cmp	r3, #0
 80045be:	d101      	bne.n	80045c4 <HAL_RCC_ClockConfig+0x118>
      {
        return HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	e160      	b.n	8004886 <HAL_RCC_ClockConfig+0x3da>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 80045c4:	f000 fa4c 	bl	8004a60 <RCC_GetSysClockFreqFromPLLSource>
 80045c8:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	4a30      	ldr	r2, [pc, #192]	@ (8004690 <HAL_RCC_ClockConfig+0x1e4>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d93f      	bls.n	8004652 <HAL_RCC_ClockConfig+0x1a6>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045d2:	4b2e      	ldr	r3, [pc, #184]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d009      	beq.n	80045f2 <HAL_RCC_ClockConfig+0x146>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d033      	beq.n	8004652 <HAL_RCC_ClockConfig+0x1a6>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d12f      	bne.n	8004652 <HAL_RCC_ClockConfig+0x1a6>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80045f2:	4b26      	ldr	r3, [pc, #152]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 80045f4:	689b      	ldr	r3, [r3, #8]
 80045f6:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80045fa:	4a24      	ldr	r2, [pc, #144]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 80045fc:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8004600:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8004602:	2380      	movs	r3, #128	@ 0x80
 8004604:	617b      	str	r3, [r7, #20]
 8004606:	e024      	b.n	8004652 <HAL_RCC_ClockConfig+0x1a6>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	2b02      	cmp	r3, #2
 800460e:	d107      	bne.n	8004620 <HAL_RCC_ClockConfig+0x174>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004610:	4b1e      	ldr	r3, [pc, #120]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004618:	2b00      	cmp	r3, #0
 800461a:	d109      	bne.n	8004630 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 800461c:	2301      	movs	r3, #1
 800461e:	e132      	b.n	8004886 <HAL_RCC_ClockConfig+0x3da>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004620:	4b1a      	ldr	r3, [pc, #104]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004628:	2b00      	cmp	r3, #0
 800462a:	d101      	bne.n	8004630 <HAL_RCC_ClockConfig+0x184>
        {
          return HAL_ERROR;
 800462c:	2301      	movs	r3, #1
 800462e:	e12a      	b.n	8004886 <HAL_RCC_ClockConfig+0x3da>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8004630:	f000 f93a 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8004634:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8004636:	693b      	ldr	r3, [r7, #16]
 8004638:	4a15      	ldr	r2, [pc, #84]	@ (8004690 <HAL_RCC_ClockConfig+0x1e4>)
 800463a:	4293      	cmp	r3, r2
 800463c:	d909      	bls.n	8004652 <HAL_RCC_ClockConfig+0x1a6>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800463e:	4b13      	ldr	r3, [pc, #76]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 8004640:	689b      	ldr	r3, [r3, #8]
 8004642:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004646:	4a11      	ldr	r2, [pc, #68]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 8004648:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800464c:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 800464e:	2380      	movs	r3, #128	@ 0x80
 8004650:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8004652:	4b0e      	ldr	r3, [pc, #56]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	f023 0203 	bic.w	r2, r3, #3
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	685b      	ldr	r3, [r3, #4]
 800465e:	490b      	ldr	r1, [pc, #44]	@ (800468c <HAL_RCC_ClockConfig+0x1e0>)
 8004660:	4313      	orrs	r3, r2
 8004662:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8004664:	f7fd feee 	bl	8002444 <HAL_GetTick>
 8004668:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800466a:	e013      	b.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800466c:	f7fd feea 	bl	8002444 <HAL_GetTick>
 8004670:	4602      	mov	r2, r0
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	1ad3      	subs	r3, r2, r3
 8004676:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467a:	4293      	cmp	r3, r2
 800467c:	d90a      	bls.n	8004694 <HAL_RCC_ClockConfig+0x1e8>
      {
        return HAL_TIMEOUT;
 800467e:	2303      	movs	r3, #3
 8004680:	e101      	b.n	8004886 <HAL_RCC_ClockConfig+0x3da>
 8004682:	bf00      	nop
 8004684:	0800ad94 	.word	0x0800ad94
 8004688:	40022000 	.word	0x40022000
 800468c:	40021000 	.word	0x40021000
 8004690:	04c4b400 	.word	0x04c4b400
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004694:	4b7e      	ldr	r3, [pc, #504]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 8004696:	689b      	ldr	r3, [r3, #8]
 8004698:	f003 020c 	and.w	r2, r3, #12
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	685b      	ldr	r3, [r3, #4]
 80046a0:	009b      	lsls	r3, r3, #2
 80046a2:	429a      	cmp	r2, r3
 80046a4:	d1e2      	bne.n	800466c <HAL_RCC_ClockConfig+0x1c0>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	f003 0302 	and.w	r3, r3, #2
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d04c      	beq.n	800474c <HAL_RCC_ClockConfig+0x2a0>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	f003 0304 	and.w	r3, r3, #4
 80046ba:	2b00      	cmp	r3, #0
 80046bc:	d005      	beq.n	80046ca <HAL_RCC_ClockConfig+0x21e>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80046be:	4b74      	ldr	r3, [pc, #464]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 80046c0:	689b      	ldr	r3, [r3, #8]
 80046c2:	4a73      	ldr	r2, [pc, #460]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 80046c4:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046c8:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	f003 0308 	and.w	r3, r3, #8
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d007      	beq.n	80046e6 <HAL_RCC_ClockConfig+0x23a>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 80046d6:	4b6e      	ldr	r3, [pc, #440]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 80046d8:	689b      	ldr	r3, [r3, #8]
 80046da:	f423 537c 	bic.w	r3, r3, #16128	@ 0x3f00
 80046de:	4a6c      	ldr	r2, [pc, #432]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 80046e0:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80046e4:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	689b      	ldr	r3, [r3, #8]
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d024      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	689b      	ldr	r3, [r3, #8]
 80046f2:	2b80      	cmp	r3, #128	@ 0x80
 80046f4:	d020      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	2b90      	cmp	r3, #144	@ 0x90
 80046fc:	d01c      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	689b      	ldr	r3, [r3, #8]
 8004702:	2ba0      	cmp	r3, #160	@ 0xa0
 8004704:	d018      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	2bb0      	cmp	r3, #176	@ 0xb0
 800470c:	d014      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	2bc0      	cmp	r3, #192	@ 0xc0
 8004714:	d010      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	689b      	ldr	r3, [r3, #8]
 800471a:	2bd0      	cmp	r3, #208	@ 0xd0
 800471c:	d00c      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	689b      	ldr	r3, [r3, #8]
 8004722:	2be0      	cmp	r3, #224	@ 0xe0
 8004724:	d008      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	689b      	ldr	r3, [r3, #8]
 800472a:	2bf0      	cmp	r3, #240	@ 0xf0
 800472c:	d004      	beq.n	8004738 <HAL_RCC_ClockConfig+0x28c>
 800472e:	f240 317a 	movw	r1, #890	@ 0x37a
 8004732:	4858      	ldr	r0, [pc, #352]	@ (8004894 <HAL_RCC_ClockConfig+0x3e8>)
 8004734:	f7fd fbe2 	bl	8001efc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004738:	4b55      	ldr	r3, [pc, #340]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 800473a:	689b      	ldr	r3, [r3, #8]
 800473c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	689b      	ldr	r3, [r3, #8]
 8004744:	4952      	ldr	r1, [pc, #328]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 8004746:	4313      	orrs	r3, r2
 8004748:	608b      	str	r3, [r1, #8]
 800474a:	e008      	b.n	800475e <HAL_RCC_ClockConfig+0x2b2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	2b80      	cmp	r3, #128	@ 0x80
 8004750:	d105      	bne.n	800475e <HAL_RCC_ClockConfig+0x2b2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8004752:	4b4f      	ldr	r3, [pc, #316]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 8004754:	689b      	ldr	r3, [r3, #8]
 8004756:	4a4e      	ldr	r2, [pc, #312]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 8004758:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800475c:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800475e:	4b4e      	ldr	r3, [pc, #312]	@ (8004898 <HAL_RCC_ClockConfig+0x3ec>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	f003 030f 	and.w	r3, r3, #15
 8004766:	683a      	ldr	r2, [r7, #0]
 8004768:	429a      	cmp	r2, r3
 800476a:	d21d      	bcs.n	80047a8 <HAL_RCC_ClockConfig+0x2fc>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800476c:	4b4a      	ldr	r3, [pc, #296]	@ (8004898 <HAL_RCC_ClockConfig+0x3ec>)
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f023 020f 	bic.w	r2, r3, #15
 8004774:	4948      	ldr	r1, [pc, #288]	@ (8004898 <HAL_RCC_ClockConfig+0x3ec>)
 8004776:	683b      	ldr	r3, [r7, #0]
 8004778:	4313      	orrs	r3, r2
 800477a:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800477c:	f7fd fe62 	bl	8002444 <HAL_GetTick>
 8004780:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004782:	e00a      	b.n	800479a <HAL_RCC_ClockConfig+0x2ee>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004784:	f7fd fe5e 	bl	8002444 <HAL_GetTick>
 8004788:	4602      	mov	r2, r0
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	1ad3      	subs	r3, r2, r3
 800478e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004792:	4293      	cmp	r3, r2
 8004794:	d901      	bls.n	800479a <HAL_RCC_ClockConfig+0x2ee>
      {
        return HAL_TIMEOUT;
 8004796:	2303      	movs	r3, #3
 8004798:	e075      	b.n	8004886 <HAL_RCC_ClockConfig+0x3da>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800479a:	4b3f      	ldr	r3, [pc, #252]	@ (8004898 <HAL_RCC_ClockConfig+0x3ec>)
 800479c:	681b      	ldr	r3, [r3, #0]
 800479e:	f003 030f 	and.w	r3, r3, #15
 80047a2:	683a      	ldr	r2, [r7, #0]
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d1ed      	bne.n	8004784 <HAL_RCC_ClockConfig+0x2d8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	f003 0304 	and.w	r3, r3, #4
 80047b0:	2b00      	cmp	r3, #0
 80047b2:	d025      	beq.n	8004800 <HAL_RCC_ClockConfig+0x354>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	68db      	ldr	r3, [r3, #12]
 80047b8:	2b00      	cmp	r3, #0
 80047ba:	d018      	beq.n	80047ee <HAL_RCC_ClockConfig+0x342>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80047c4:	d013      	beq.n	80047ee <HAL_RCC_ClockConfig+0x342>
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	68db      	ldr	r3, [r3, #12]
 80047ca:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80047ce:	d00e      	beq.n	80047ee <HAL_RCC_ClockConfig+0x342>
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	68db      	ldr	r3, [r3, #12]
 80047d4:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80047d8:	d009      	beq.n	80047ee <HAL_RCC_ClockConfig+0x342>
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	68db      	ldr	r3, [r3, #12]
 80047de:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 80047e2:	d004      	beq.n	80047ee <HAL_RCC_ClockConfig+0x342>
 80047e4:	f44f 7167 	mov.w	r1, #924	@ 0x39c
 80047e8:	482a      	ldr	r0, [pc, #168]	@ (8004894 <HAL_RCC_ClockConfig+0x3e8>)
 80047ea:	f7fd fb87 	bl	8001efc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80047ee:	4b28      	ldr	r3, [pc, #160]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 80047f0:	689b      	ldr	r3, [r3, #8]
 80047f2:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	68db      	ldr	r3, [r3, #12]
 80047fa:	4925      	ldr	r1, [pc, #148]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 80047fc:	4313      	orrs	r3, r2
 80047fe:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	f003 0308 	and.w	r3, r3, #8
 8004808:	2b00      	cmp	r3, #0
 800480a:	d026      	beq.n	800485a <HAL_RCC_ClockConfig+0x3ae>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	691b      	ldr	r3, [r3, #16]
 8004810:	2b00      	cmp	r3, #0
 8004812:	d018      	beq.n	8004846 <HAL_RCC_ClockConfig+0x39a>
 8004814:	687b      	ldr	r3, [r7, #4]
 8004816:	691b      	ldr	r3, [r3, #16]
 8004818:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800481c:	d013      	beq.n	8004846 <HAL_RCC_ClockConfig+0x39a>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	691b      	ldr	r3, [r3, #16]
 8004822:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8004826:	d00e      	beq.n	8004846 <HAL_RCC_ClockConfig+0x39a>
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	691b      	ldr	r3, [r3, #16]
 800482c:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8004830:	d009      	beq.n	8004846 <HAL_RCC_ClockConfig+0x39a>
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	691b      	ldr	r3, [r3, #16]
 8004836:	f5b3 6fe0 	cmp.w	r3, #1792	@ 0x700
 800483a:	d004      	beq.n	8004846 <HAL_RCC_ClockConfig+0x39a>
 800483c:	f240 31a3 	movw	r1, #931	@ 0x3a3
 8004840:	4814      	ldr	r0, [pc, #80]	@ (8004894 <HAL_RCC_ClockConfig+0x3e8>)
 8004842:	f7fd fb5b 	bl	8001efc <assert_failed>
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004846:	4b12      	ldr	r3, [pc, #72]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	691b      	ldr	r3, [r3, #16]
 8004852:	00db      	lsls	r3, r3, #3
 8004854:	490e      	ldr	r1, [pc, #56]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 8004856:	4313      	orrs	r3, r2
 8004858:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 800485a:	f000 f825 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 800485e:	4602      	mov	r2, r0
 8004860:	4b0b      	ldr	r3, [pc, #44]	@ (8004890 <HAL_RCC_ClockConfig+0x3e4>)
 8004862:	689b      	ldr	r3, [r3, #8]
 8004864:	091b      	lsrs	r3, r3, #4
 8004866:	f003 030f 	and.w	r3, r3, #15
 800486a:	490c      	ldr	r1, [pc, #48]	@ (800489c <HAL_RCC_ClockConfig+0x3f0>)
 800486c:	5ccb      	ldrb	r3, [r1, r3]
 800486e:	f003 031f 	and.w	r3, r3, #31
 8004872:	fa22 f303 	lsr.w	r3, r2, r3
 8004876:	4a0a      	ldr	r2, [pc, #40]	@ (80048a0 <HAL_RCC_ClockConfig+0x3f4>)
 8004878:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800487a:	4b0a      	ldr	r3, [pc, #40]	@ (80048a4 <HAL_RCC_ClockConfig+0x3f8>)
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	4618      	mov	r0, r3
 8004880:	f7fd fb72 	bl	8001f68 <HAL_InitTick>
 8004884:	4603      	mov	r3, r0
}
 8004886:	4618      	mov	r0, r3
 8004888:	3718      	adds	r7, #24
 800488a:	46bd      	mov	sp, r7
 800488c:	bd80      	pop	{r7, pc}
 800488e:	bf00      	nop
 8004890:	40021000 	.word	0x40021000
 8004894:	0800ad94 	.word	0x0800ad94
 8004898:	40022000 	.word	0x40022000
 800489c:	0800b45c 	.word	0x0800b45c
 80048a0:	20000000 	.word	0x20000000
 80048a4:	20000004 	.word	0x20000004

080048a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80048a8:	b480      	push	{r7}
 80048aa:	b087      	sub	sp, #28
 80048ac:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 80048ae:	4b2c      	ldr	r3, [pc, #176]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	f003 030c 	and.w	r3, r3, #12
 80048b6:	2b04      	cmp	r3, #4
 80048b8:	d102      	bne.n	80048c0 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80048ba:	4b2a      	ldr	r3, [pc, #168]	@ (8004964 <HAL_RCC_GetSysClockFreq+0xbc>)
 80048bc:	613b      	str	r3, [r7, #16]
 80048be:	e047      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 80048c0:	4b27      	ldr	r3, [pc, #156]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048c2:	689b      	ldr	r3, [r3, #8]
 80048c4:	f003 030c 	and.w	r3, r3, #12
 80048c8:	2b08      	cmp	r3, #8
 80048ca:	d102      	bne.n	80048d2 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80048cc:	4b26      	ldr	r3, [pc, #152]	@ (8004968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048ce:	613b      	str	r3, [r7, #16]
 80048d0:	e03e      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 80048d2:	4b23      	ldr	r3, [pc, #140]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048d4:	689b      	ldr	r3, [r3, #8]
 80048d6:	f003 030c 	and.w	r3, r3, #12
 80048da:	2b0c      	cmp	r3, #12
 80048dc:	d136      	bne.n	800494c <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80048de:	4b20      	ldr	r3, [pc, #128]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048e0:	68db      	ldr	r3, [r3, #12]
 80048e2:	f003 0303 	and.w	r3, r3, #3
 80048e6:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80048e8:	4b1d      	ldr	r3, [pc, #116]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 80048ea:	68db      	ldr	r3, [r3, #12]
 80048ec:	091b      	lsrs	r3, r3, #4
 80048ee:	f003 030f 	and.w	r3, r3, #15
 80048f2:	3301      	adds	r3, #1
 80048f4:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	2b03      	cmp	r3, #3
 80048fa:	d10c      	bne.n	8004916 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80048fc:	4a1a      	ldr	r2, [pc, #104]	@ (8004968 <HAL_RCC_GetSysClockFreq+0xc0>)
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	fbb2 f3f3 	udiv	r3, r2, r3
 8004904:	4a16      	ldr	r2, [pc, #88]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004906:	68d2      	ldr	r2, [r2, #12]
 8004908:	0a12      	lsrs	r2, r2, #8
 800490a:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 800490e:	fb02 f303 	mul.w	r3, r2, r3
 8004912:	617b      	str	r3, [r7, #20]
      break;
 8004914:	e00c      	b.n	8004930 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004916:	4a13      	ldr	r2, [pc, #76]	@ (8004964 <HAL_RCC_GetSysClockFreq+0xbc>)
 8004918:	68bb      	ldr	r3, [r7, #8]
 800491a:	fbb2 f3f3 	udiv	r3, r2, r3
 800491e:	4a10      	ldr	r2, [pc, #64]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004920:	68d2      	ldr	r2, [r2, #12]
 8004922:	0a12      	lsrs	r2, r2, #8
 8004924:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004928:	fb02 f303 	mul.w	r3, r2, r3
 800492c:	617b      	str	r3, [r7, #20]
      break;
 800492e:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004930:	4b0b      	ldr	r3, [pc, #44]	@ (8004960 <HAL_RCC_GetSysClockFreq+0xb8>)
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	0e5b      	lsrs	r3, r3, #25
 8004936:	f003 0303 	and.w	r3, r3, #3
 800493a:	3301      	adds	r3, #1
 800493c:	005b      	lsls	r3, r3, #1
 800493e:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8004940:	697a      	ldr	r2, [r7, #20]
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	fbb2 f3f3 	udiv	r3, r2, r3
 8004948:	613b      	str	r3, [r7, #16]
 800494a:	e001      	b.n	8004950 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 800494c:	2300      	movs	r3, #0
 800494e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8004950:	693b      	ldr	r3, [r7, #16]
}
 8004952:	4618      	mov	r0, r3
 8004954:	371c      	adds	r7, #28
 8004956:	46bd      	mov	sp, r7
 8004958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800495c:	4770      	bx	lr
 800495e:	bf00      	nop
 8004960:	40021000 	.word	0x40021000
 8004964:	00f42400 	.word	0x00f42400
 8004968:	016e3600 	.word	0x016e3600

0800496c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800496c:	b480      	push	{r7}
 800496e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004970:	4b03      	ldr	r3, [pc, #12]	@ (8004980 <HAL_RCC_GetHCLKFreq+0x14>)
 8004972:	681b      	ldr	r3, [r3, #0]
}
 8004974:	4618      	mov	r0, r3
 8004976:	46bd      	mov	sp, r7
 8004978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497c:	4770      	bx	lr
 800497e:	bf00      	nop
 8004980:	20000000 	.word	0x20000000

08004984 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004984:	b580      	push	{r7, lr}
 8004986:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004988:	f7ff fff0 	bl	800496c <HAL_RCC_GetHCLKFreq>
 800498c:	4602      	mov	r2, r0
 800498e:	4b06      	ldr	r3, [pc, #24]	@ (80049a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004990:	689b      	ldr	r3, [r3, #8]
 8004992:	0a1b      	lsrs	r3, r3, #8
 8004994:	f003 0307 	and.w	r3, r3, #7
 8004998:	4904      	ldr	r1, [pc, #16]	@ (80049ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800499a:	5ccb      	ldrb	r3, [r1, r3]
 800499c:	f003 031f 	and.w	r3, r3, #31
 80049a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049a4:	4618      	mov	r0, r3
 80049a6:	bd80      	pop	{r7, pc}
 80049a8:	40021000 	.word	0x40021000
 80049ac:	0800b46c 	.word	0x0800b46c

080049b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80049b0:	b580      	push	{r7, lr}
 80049b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80049b4:	f7ff ffda 	bl	800496c <HAL_RCC_GetHCLKFreq>
 80049b8:	4602      	mov	r2, r0
 80049ba:	4b06      	ldr	r3, [pc, #24]	@ (80049d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80049bc:	689b      	ldr	r3, [r3, #8]
 80049be:	0adb      	lsrs	r3, r3, #11
 80049c0:	f003 0307 	and.w	r3, r3, #7
 80049c4:	4904      	ldr	r1, [pc, #16]	@ (80049d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80049c6:	5ccb      	ldrb	r3, [r1, r3]
 80049c8:	f003 031f 	and.w	r3, r3, #31
 80049cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80049d0:	4618      	mov	r0, r3
 80049d2:	bd80      	pop	{r7, pc}
 80049d4:	40021000 	.word	0x40021000
 80049d8:	0800b46c 	.word	0x0800b46c

080049dc <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80049dc:	b580      	push	{r7, lr}
 80049de:	b082      	sub	sp, #8
 80049e0:	af00      	add	r7, sp, #0
 80049e2:	6078      	str	r0, [r7, #4]
 80049e4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	2b00      	cmp	r3, #0
 80049ea:	d104      	bne.n	80049f6 <HAL_RCC_GetClockConfig+0x1a>
 80049ec:	f240 41e3 	movw	r1, #1251	@ 0x4e3
 80049f0:	4818      	ldr	r0, [pc, #96]	@ (8004a54 <HAL_RCC_GetClockConfig+0x78>)
 80049f2:	f7fd fa83 	bl	8001efc <assert_failed>
  assert_param(pFLatency != (void *)NULL);
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d104      	bne.n	8004a06 <HAL_RCC_GetClockConfig+0x2a>
 80049fc:	f240 41e4 	movw	r1, #1252	@ 0x4e4
 8004a00:	4814      	ldr	r0, [pc, #80]	@ (8004a54 <HAL_RCC_GetClockConfig+0x78>)
 8004a02:	f7fd fa7b 	bl	8001efc <assert_failed>

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	220f      	movs	r2, #15
 8004a0a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8004a0c:	4b12      	ldr	r3, [pc, #72]	@ (8004a58 <HAL_RCC_GetClockConfig+0x7c>)
 8004a0e:	689b      	ldr	r3, [r3, #8]
 8004a10:	f003 0203 	and.w	r2, r3, #3
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8004a18:	4b0f      	ldr	r3, [pc, #60]	@ (8004a58 <HAL_RCC_GetClockConfig+0x7c>)
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8004a24:	4b0c      	ldr	r3, [pc, #48]	@ (8004a58 <HAL_RCC_GetClockConfig+0x7c>)
 8004a26:	689b      	ldr	r3, [r3, #8]
 8004a28:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8004a30:	4b09      	ldr	r3, [pc, #36]	@ (8004a58 <HAL_RCC_GetClockConfig+0x7c>)
 8004a32:	689b      	ldr	r3, [r3, #8]
 8004a34:	08db      	lsrs	r3, r3, #3
 8004a36:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8004a3e:	4b07      	ldr	r3, [pc, #28]	@ (8004a5c <HAL_RCC_GetClockConfig+0x80>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	f003 020f 	and.w	r2, r3, #15
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	601a      	str	r2, [r3, #0]
}
 8004a4a:	bf00      	nop
 8004a4c:	3708      	adds	r7, #8
 8004a4e:	46bd      	mov	sp, r7
 8004a50:	bd80      	pop	{r7, pc}
 8004a52:	bf00      	nop
 8004a54:	0800ad94 	.word	0x0800ad94
 8004a58:	40021000 	.word	0x40021000
 8004a5c:	40022000 	.word	0x40022000

08004a60 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8004a60:	b480      	push	{r7}
 8004a62:	b087      	sub	sp, #28
 8004a64:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8004a66:	4b1e      	ldr	r3, [pc, #120]	@ (8004ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a68:	68db      	ldr	r3, [r3, #12]
 8004a6a:	f003 0303 	and.w	r3, r3, #3
 8004a6e:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8004a70:	4b1b      	ldr	r3, [pc, #108]	@ (8004ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a72:	68db      	ldr	r3, [r3, #12]
 8004a74:	091b      	lsrs	r3, r3, #4
 8004a76:	f003 030f 	and.w	r3, r3, #15
 8004a7a:	3301      	adds	r3, #1
 8004a7c:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	2b03      	cmp	r3, #3
 8004a82:	d10c      	bne.n	8004a9e <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a84:	4a17      	ldr	r2, [pc, #92]	@ (8004ae4 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8004a86:	68fb      	ldr	r3, [r7, #12]
 8004a88:	fbb2 f3f3 	udiv	r3, r2, r3
 8004a8c:	4a14      	ldr	r2, [pc, #80]	@ (8004ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004a8e:	68d2      	ldr	r2, [r2, #12]
 8004a90:	0a12      	lsrs	r2, r2, #8
 8004a92:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004a96:	fb02 f303 	mul.w	r3, r2, r3
 8004a9a:	617b      	str	r3, [r7, #20]
    break;
 8004a9c:	e00c      	b.n	8004ab8 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8004a9e:	4a12      	ldr	r2, [pc, #72]	@ (8004ae8 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	fbb2 f3f3 	udiv	r3, r2, r3
 8004aa6:	4a0e      	ldr	r2, [pc, #56]	@ (8004ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aa8:	68d2      	ldr	r2, [r2, #12]
 8004aaa:	0a12      	lsrs	r2, r2, #8
 8004aac:	f002 027f 	and.w	r2, r2, #127	@ 0x7f
 8004ab0:	fb02 f303 	mul.w	r3, r2, r3
 8004ab4:	617b      	str	r3, [r7, #20]
    break;
 8004ab6:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004ab8:	4b09      	ldr	r3, [pc, #36]	@ (8004ae0 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8004aba:	68db      	ldr	r3, [r3, #12]
 8004abc:	0e5b      	lsrs	r3, r3, #25
 8004abe:	f003 0303 	and.w	r3, r3, #3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	005b      	lsls	r3, r3, #1
 8004ac6:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8004ac8:	697a      	ldr	r2, [r7, #20]
 8004aca:	68bb      	ldr	r3, [r7, #8]
 8004acc:	fbb2 f3f3 	udiv	r3, r2, r3
 8004ad0:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8004ad2:	687b      	ldr	r3, [r7, #4]
}
 8004ad4:	4618      	mov	r0, r3
 8004ad6:	371c      	adds	r7, #28
 8004ad8:	46bd      	mov	sp, r7
 8004ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ade:	4770      	bx	lr
 8004ae0:	40021000 	.word	0x40021000
 8004ae4:	016e3600 	.word	0x016e3600
 8004ae8:	00f42400 	.word	0x00f42400

08004aec <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004aec:	b580      	push	{r7, lr}
 8004aee:	b086      	sub	sp, #24
 8004af0:	af00      	add	r7, sp, #0
 8004af2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8004af4:	2300      	movs	r3, #0
 8004af6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004af8:	2300      	movs	r3, #0
 8004afa:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f003 0301 	and.w	r3, r3, #1
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d15d      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f003 0302 	and.w	r3, r3, #2
 8004b10:	2b00      	cmp	r3, #0
 8004b12:	d157      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f003 0304 	and.w	r3, r3, #4
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d151      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f003 0308 	and.w	r3, r3, #8
 8004b28:	2b00      	cmp	r3, #0
 8004b2a:	d14b      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f003 0320 	and.w	r3, r3, #32
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d145      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d13f      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d139      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	681b      	ldr	r3, [r3, #0]
 8004b54:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b58:	2b00      	cmp	r3, #0
 8004b5a:	d133      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	681b      	ldr	r3, [r3, #0]
 8004b60:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004b64:	2b00      	cmp	r3, #0
 8004b66:	d12d      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d127      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	681b      	ldr	r3, [r3, #0]
 8004b78:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d121      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d11b      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d115      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d10f      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d109      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d103      	bne.n	8004bc4 <HAL_RCCEx_PeriphCLKConfig+0xd8>
 8004bbc:	2183      	movs	r1, #131	@ 0x83
 8004bbe:	4855      	ldr	r0, [pc, #340]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004bc0:	f7fd f99c 	bl	8001efc <assert_failed>

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8004bcc:	2b00      	cmp	r3, #0
 8004bce:	f000 80b2 	beq.w	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004bd2:	2300      	movs	r3, #0
 8004bd4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d012      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004be2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004be6:	d00d      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8004bf0:	d008      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bf6:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8004bfa:	d003      	beq.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0x118>
 8004bfc:	218b      	movs	r1, #139	@ 0x8b
 8004bfe:	4845      	ldr	r0, [pc, #276]	@ (8004d14 <HAL_RCCEx_PeriphCLKConfig+0x228>)
 8004c00:	f7fd f97c 	bl	8001efc <assert_failed>

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c04:	4b44      	ldr	r3, [pc, #272]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c06:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c08:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	d10d      	bne.n	8004c2c <HAL_RCCEx_PeriphCLKConfig+0x140>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c10:	4b41      	ldr	r3, [pc, #260]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c12:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c14:	4a40      	ldr	r2, [pc, #256]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c16:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c1a:	6593      	str	r3, [r2, #88]	@ 0x58
 8004c1c:	4b3e      	ldr	r3, [pc, #248]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c1e:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004c20:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c28:	2301      	movs	r3, #1
 8004c2a:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004c2c:	4b3b      	ldr	r3, [pc, #236]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a3a      	ldr	r2, [pc, #232]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c32:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c36:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8004c38:	f7fd fc04 	bl	8002444 <HAL_GetTick>
 8004c3c:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c3e:	e009      	b.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x168>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c40:	f7fd fc00 	bl	8002444 <HAL_GetTick>
 8004c44:	4602      	mov	r2, r0
 8004c46:	68fb      	ldr	r3, [r7, #12]
 8004c48:	1ad3      	subs	r3, r2, r3
 8004c4a:	2b02      	cmp	r3, #2
 8004c4c:	d902      	bls.n	8004c54 <HAL_RCCEx_PeriphCLKConfig+0x168>
      {
        ret = HAL_TIMEOUT;
 8004c4e:	2303      	movs	r3, #3
 8004c50:	74fb      	strb	r3, [r7, #19]
        break;
 8004c52:	e005      	b.n	8004c60 <HAL_RCCEx_PeriphCLKConfig+0x174>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8004c54:	4b31      	ldr	r3, [pc, #196]	@ (8004d1c <HAL_RCCEx_PeriphCLKConfig+0x230>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d0ef      	beq.n	8004c40 <HAL_RCCEx_PeriphCLKConfig+0x154>
      }
    }

    if(ret == HAL_OK)
 8004c60:	7cfb      	ldrb	r3, [r7, #19]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d15c      	bne.n	8004d20 <HAL_RCCEx_PeriphCLKConfig+0x234>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8004c66:	4b2c      	ldr	r3, [pc, #176]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c6c:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004c70:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004c72:	697b      	ldr	r3, [r7, #20]
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d01e      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c7c:	697a      	ldr	r2, [r7, #20]
 8004c7e:	429a      	cmp	r2, r3
 8004c80:	d019      	beq.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0x1ca>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004c82:	4b25      	ldr	r3, [pc, #148]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c84:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c88:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004c8c:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004c8e:	4b22      	ldr	r3, [pc, #136]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c90:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004c94:	4a20      	ldr	r2, [pc, #128]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004c96:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004c9a:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004c9e:	4b1e      	ldr	r3, [pc, #120]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ca0:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ca4:	4a1c      	ldr	r2, [pc, #112]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ca6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004caa:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004cae:	4a1a      	ldr	r2, [pc, #104]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cb0:	697b      	ldr	r3, [r7, #20]
 8004cb2:	f8c2 3090 	str.w	r3, [r2, #144]	@ 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8004cb6:	697b      	ldr	r3, [r7, #20]
 8004cb8:	f003 0301 	and.w	r3, r3, #1
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d016      	beq.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x202>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc0:	f7fd fbc0 	bl	8002444 <HAL_GetTick>
 8004cc4:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004cc6:	e00b      	b.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004cc8:	f7fd fbbc 	bl	8002444 <HAL_GetTick>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	1ad3      	subs	r3, r2, r3
 8004cd2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cd6:	4293      	cmp	r3, r2
 8004cd8:	d902      	bls.n	8004ce0 <HAL_RCCEx_PeriphCLKConfig+0x1f4>
          {
            ret = HAL_TIMEOUT;
 8004cda:	2303      	movs	r3, #3
 8004cdc:	74fb      	strb	r3, [r7, #19]
            break;
 8004cde:	e006      	b.n	8004cee <HAL_RCCEx_PeriphCLKConfig+0x202>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8004ce0:	4b0d      	ldr	r3, [pc, #52]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004ce2:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004ce6:	f003 0302 	and.w	r3, r3, #2
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d0ec      	beq.n	8004cc8 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
          }
        }
      }
      
      if(ret == HAL_OK)
 8004cee:	7cfb      	ldrb	r3, [r7, #19]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d10b      	bne.n	8004d0c <HAL_RCCEx_PeriphCLKConfig+0x220>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004cf4:	4b08      	ldr	r3, [pc, #32]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004cf6:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8004cfa:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d02:	4905      	ldr	r1, [pc, #20]	@ (8004d18 <HAL_RCCEx_PeriphCLKConfig+0x22c>)
 8004d04:	4313      	orrs	r3, r2
 8004d06:	f8c1 3090 	str.w	r3, [r1, #144]	@ 0x90
 8004d0a:	e00b      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004d0c:	7cfb      	ldrb	r3, [r7, #19]
 8004d0e:	74bb      	strb	r3, [r7, #18]
 8004d10:	e008      	b.n	8004d24 <HAL_RCCEx_PeriphCLKConfig+0x238>
 8004d12:	bf00      	nop
 8004d14:	0800adcc 	.word	0x0800adcc
 8004d18:	40021000 	.word	0x40021000
 8004d1c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d20:	7cfb      	ldrb	r3, [r7, #19]
 8004d22:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004d24:	7c7b      	ldrb	r3, [r7, #17]
 8004d26:	2b01      	cmp	r3, #1
 8004d28:	d105      	bne.n	8004d36 <HAL_RCCEx_PeriphCLKConfig+0x24a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d2a:	4b98      	ldr	r3, [pc, #608]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d2c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8004d2e:	4a97      	ldr	r2, [pc, #604]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d30:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d34:	6593      	str	r3, [r2, #88]	@ 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	f003 0301 	and.w	r3, r3, #1
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d01e      	beq.n	8004d80 <HAL_RCCEx_PeriphCLKConfig+0x294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	685b      	ldr	r3, [r3, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d00f      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	2b01      	cmp	r3, #1
 8004d50:	d00b      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	685b      	ldr	r3, [r3, #4]
 8004d56:	2b03      	cmp	r3, #3
 8004d58:	d007      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	685b      	ldr	r3, [r3, #4]
 8004d5e:	2b02      	cmp	r3, #2
 8004d60:	d003      	beq.n	8004d6a <HAL_RCCEx_PeriphCLKConfig+0x27e>
 8004d62:	21e0      	movs	r1, #224	@ 0xe0
 8004d64:	488a      	ldr	r0, [pc, #552]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004d66:	f7fd f8c9 	bl	8001efc <assert_failed>

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004d6a:	4b88      	ldr	r3, [pc, #544]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004d70:	f023 0203 	bic.w	r2, r3, #3
 8004d74:	687b      	ldr	r3, [r7, #4]
 8004d76:	685b      	ldr	r3, [r3, #4]
 8004d78:	4984      	ldr	r1, [pc, #528]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004d7a:	4313      	orrs	r3, r2
 8004d7c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	f003 0302 	and.w	r3, r3, #2
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d01e      	beq.n	8004dca <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	689b      	ldr	r3, [r3, #8]
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d00f      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	689b      	ldr	r3, [r3, #8]
 8004d98:	2b04      	cmp	r3, #4
 8004d9a:	d00b      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	689b      	ldr	r3, [r3, #8]
 8004da0:	2b0c      	cmp	r3, #12
 8004da2:	d007      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	689b      	ldr	r3, [r3, #8]
 8004da8:	2b08      	cmp	r3, #8
 8004daa:	d003      	beq.n	8004db4 <HAL_RCCEx_PeriphCLKConfig+0x2c8>
 8004dac:	21ea      	movs	r1, #234	@ 0xea
 8004dae:	4878      	ldr	r0, [pc, #480]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004db0:	f7fd f8a4 	bl	8001efc <assert_failed>

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004db4:	4b75      	ldr	r3, [pc, #468]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004db6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004dba:	f023 020c 	bic.w	r2, r3, #12
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	689b      	ldr	r3, [r3, #8]
 8004dc2:	4972      	ldr	r1, [pc, #456]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004dc4:	4313      	orrs	r3, r2
 8004dc6:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	f003 0304 	and.w	r3, r3, #4
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01e      	beq.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	68db      	ldr	r3, [r3, #12]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d00f      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	68db      	ldr	r3, [r3, #12]
 8004de2:	2b10      	cmp	r3, #16
 8004de4:	d00b      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	68db      	ldr	r3, [r3, #12]
 8004dea:	2b30      	cmp	r3, #48	@ 0x30
 8004dec:	d007      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	68db      	ldr	r3, [r3, #12]
 8004df2:	2b20      	cmp	r3, #32
 8004df4:	d003      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0x312>
 8004df6:	21f4      	movs	r1, #244	@ 0xf4
 8004df8:	4865      	ldr	r0, [pc, #404]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004dfa:	f7fd f87f 	bl	8001efc <assert_failed>

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8004dfe:	4b63      	ldr	r3, [pc, #396]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e00:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e04:	f023 0230 	bic.w	r2, r3, #48	@ 0x30
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	68db      	ldr	r3, [r3, #12]
 8004e0c:	495f      	ldr	r1, [pc, #380]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f003 0308 	and.w	r3, r3, #8
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d01e      	beq.n	8004e5e <HAL_RCCEx_PeriphCLKConfig+0x372>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d00f      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	691b      	ldr	r3, [r3, #16]
 8004e2c:	2b40      	cmp	r3, #64	@ 0x40
 8004e2e:	d00b      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	691b      	ldr	r3, [r3, #16]
 8004e34:	2bc0      	cmp	r3, #192	@ 0xc0
 8004e36:	d007      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	691b      	ldr	r3, [r3, #16]
 8004e3c:	2b80      	cmp	r3, #128	@ 0x80
 8004e3e:	d003      	beq.n	8004e48 <HAL_RCCEx_PeriphCLKConfig+0x35c>
 8004e40:	21ff      	movs	r1, #255	@ 0xff
 8004e42:	4853      	ldr	r0, [pc, #332]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e44:	f7fd f85a 	bl	8001efc <assert_failed>

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8004e48:	4b50      	ldr	r3, [pc, #320]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004e4e:	f023 02c0 	bic.w	r2, r3, #192	@ 0xc0
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	691b      	ldr	r3, [r3, #16]
 8004e56:	494d      	ldr	r1, [pc, #308]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e58:	4313      	orrs	r3, r2
 8004e5a:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	f003 0320 	and.w	r3, r3, #32
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d022      	beq.n	8004eb0 <HAL_RCCEx_PeriphCLKConfig+0x3c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	695b      	ldr	r3, [r3, #20]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d013      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004e72:	687b      	ldr	r3, [r7, #4]
 8004e74:	695b      	ldr	r3, [r3, #20]
 8004e76:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004e7a:	d00e      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	695b      	ldr	r3, [r3, #20]
 8004e80:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 8004e84:	d009      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	695b      	ldr	r3, [r3, #20]
 8004e8a:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8004e8e:	d004      	beq.n	8004e9a <HAL_RCCEx_PeriphCLKConfig+0x3ae>
 8004e90:	f44f 718c 	mov.w	r1, #280	@ 0x118
 8004e94:	483e      	ldr	r0, [pc, #248]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004e96:	f7fd f831 	bl	8001efc <assert_failed>

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004e9a:	4b3c      	ldr	r3, [pc, #240]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004e9c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ea0:	f423 6240 	bic.w	r2, r3, #3072	@ 0xc00
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	695b      	ldr	r3, [r3, #20]
 8004ea8:	4938      	ldr	r1, [pc, #224]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004eaa:	4313      	orrs	r3, r2
 8004eac:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d01d      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0x40c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	699b      	ldr	r3, [r3, #24]
 8004ec0:	2b00      	cmp	r3, #0
 8004ec2:	d00e      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004ec4:	687b      	ldr	r3, [r7, #4]
 8004ec6:	699b      	ldr	r3, [r3, #24]
 8004ec8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004ecc:	d009      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	699b      	ldr	r3, [r3, #24]
 8004ed2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004ed6:	d004      	beq.n	8004ee2 <HAL_RCCEx_PeriphCLKConfig+0x3f6>
 8004ed8:	f44f 7191 	mov.w	r1, #290	@ 0x122
 8004edc:	482c      	ldr	r0, [pc, #176]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004ede:	f7fd f80d 	bl	8001efc <assert_failed>

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004ee2:	4b2a      	ldr	r3, [pc, #168]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ee4:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004ee8:	f423 5240 	bic.w	r2, r3, #12288	@ 0x3000
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	699b      	ldr	r3, [r3, #24]
 8004ef0:	4926      	ldr	r1, [pc, #152]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004ef2:	4313      	orrs	r3, r2
 8004ef4:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d01d      	beq.n	8004f40 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	69db      	ldr	r3, [r3, #28]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d00e      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	69db      	ldr	r3, [r3, #28]
 8004f10:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004f14:	d009      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	69db      	ldr	r3, [r3, #28]
 8004f1a:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004f1e:	d004      	beq.n	8004f2a <HAL_RCCEx_PeriphCLKConfig+0x43e>
 8004f20:	f44f 7196 	mov.w	r1, #300	@ 0x12c
 8004f24:	481a      	ldr	r0, [pc, #104]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f26:	f7fc ffe9 	bl	8001efc <assert_failed>

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004f2a:	4b18      	ldr	r3, [pc, #96]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f2c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f30:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	69db      	ldr	r3, [r3, #28]
 8004f38:	4914      	ldr	r1, [pc, #80]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d023      	beq.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6a1b      	ldr	r3, [r3, #32]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d00e      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	6a1b      	ldr	r3, [r3, #32]
 8004f58:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004f5c:	d009      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	6a1b      	ldr	r3, [r3, #32]
 8004f62:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8004f66:	d004      	beq.n	8004f72 <HAL_RCCEx_PeriphCLKConfig+0x486>
 8004f68:	f44f 719b 	mov.w	r1, #310	@ 0x136
 8004f6c:	4808      	ldr	r0, [pc, #32]	@ (8004f90 <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8004f6e:	f7fc ffc5 	bl	8001efc <assert_failed>

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8004f72:	4b06      	ldr	r3, [pc, #24]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f74:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004f78:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6a1b      	ldr	r3, [r3, #32]
 8004f80:	4902      	ldr	r1, [pc, #8]	@ (8004f8c <HAL_RCCEx_PeriphCLKConfig+0x4a0>)
 8004f82:	4313      	orrs	r3, r2
 8004f84:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
 8004f88:	e004      	b.n	8004f94 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
 8004f8a:	bf00      	nop
 8004f8c:	40021000 	.word	0x40021000
 8004f90:	0800adcc 	.word	0x0800adcc
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d022      	beq.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0x4fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fa4:	2b00      	cmp	r3, #0
 8004fa6:	d013      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fac:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8004fb0:	d00e      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fb6:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8004fba:	d009      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fc0:	f5b3 2f40 	cmp.w	r3, #786432	@ 0xc0000
 8004fc4:	d004      	beq.n	8004fd0 <HAL_RCCEx_PeriphCLKConfig+0x4e4>
 8004fc6:	f44f 71a7 	mov.w	r1, #334	@ 0x14e
 8004fca:	4896      	ldr	r0, [pc, #600]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8004fcc:	f7fc ff96 	bl	8001efc <assert_failed>

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004fd0:	4b95      	ldr	r3, [pc, #596]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004fd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8004fd6:	f423 2240 	bic.w	r2, r3, #786432	@ 0xc0000
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004fde:	4992      	ldr	r1, [pc, #584]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8004fe0:	4313      	orrs	r3, r2
 8004fe2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	681b      	ldr	r3, [r3, #0]
 8004fea:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d02d      	beq.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x562>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ff6:	2b00      	cmp	r3, #0
 8004ff8:	d013      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004ffe:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005002:	d00e      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005008:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 800500c:	d009      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x536>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005012:	f5b3 1f40 	cmp.w	r3, #3145728	@ 0x300000
 8005016:	d004      	beq.n	8005022 <HAL_RCCEx_PeriphCLKConfig+0x536>
 8005018:	f44f 71ac 	mov.w	r1, #344	@ 0x158
 800501c:	4881      	ldr	r0, [pc, #516]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800501e:	f7fc ff6d 	bl	8001efc <assert_failed>

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005022:	4b81      	ldr	r3, [pc, #516]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005024:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005028:	f423 1240 	bic.w	r2, r3, #3145728	@ 0x300000
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005030:	497d      	ldr	r1, [pc, #500]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005032:	4313      	orrs	r3, r2
 8005034:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800503c:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8005040:	d105      	bne.n	800504e <HAL_RCCEx_PeriphCLKConfig+0x562>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005042:	4b79      	ldr	r3, [pc, #484]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005044:	68db      	ldr	r3, [r3, #12]
 8005046:	4a78      	ldr	r2, [pc, #480]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005048:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 800504c:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005056:	2b00      	cmp	r3, #0
 8005058:	d02d      	beq.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800505e:	2b00      	cmp	r3, #0
 8005060:	d013      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005066:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800506a:	d00e      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005070:	f5b3 0f00 	cmp.w	r3, #8388608	@ 0x800000
 8005074:	d009      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800507a:	f5b3 0f40 	cmp.w	r3, #12582912	@ 0xc00000
 800507e:	d004      	beq.n	800508a <HAL_RCCEx_PeriphCLKConfig+0x59e>
 8005080:	f44f 71b4 	mov.w	r1, #360	@ 0x168
 8005084:	4867      	ldr	r0, [pc, #412]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005086:	f7fc ff39 	bl	8001efc <assert_failed>

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 800508a:	4b67      	ldr	r3, [pc, #412]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800508c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005090:	f423 0240 	bic.w	r2, r3, #12582912	@ 0xc00000
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005098:	4963      	ldr	r1, [pc, #396]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800509a:	4313      	orrs	r3, r2
 800509c:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80050a4:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80050a8:	d105      	bne.n	80050b6 <HAL_RCCEx_PeriphCLKConfig+0x5ca>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80050aa:	4b5f      	ldr	r3, [pc, #380]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80050ac:	68db      	ldr	r3, [r3, #12]
 80050ae:	4a5e      	ldr	r2, [pc, #376]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80050b0:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80050b4:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d028      	beq.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x628>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050c6:	2b00      	cmp	r3, #0
 80050c8:	d00e      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050ce:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80050d2:	d009      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050d8:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 80050dc:	d004      	beq.n	80050e8 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
 80050de:	f240 1179 	movw	r1, #377	@ 0x179
 80050e2:	4850      	ldr	r0, [pc, #320]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80050e4:	f7fc ff0a 	bl	8001efc <assert_failed>

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80050e8:	4b4f      	ldr	r3, [pc, #316]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80050ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80050ee:	f023 7240 	bic.w	r2, r3, #50331648	@ 0x3000000
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80050f6:	494c      	ldr	r1, [pc, #304]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80050f8:	4313      	orrs	r3, r2
 80050fa:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005102:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8005106:	d105      	bne.n	8005114 <HAL_RCCEx_PeriphCLKConfig+0x628>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005108:	4b47      	ldr	r3, [pc, #284]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800510a:	68db      	ldr	r3, [r3, #12]
 800510c:	4a46      	ldr	r2, [pc, #280]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800510e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005112:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
 800511c:	2b00      	cmp	r3, #0
 800511e:	d023      	beq.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x67c>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005124:	2b00      	cmp	r3, #0
 8005126:	d009      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800512c:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005130:	d004      	beq.n	800513c <HAL_RCCEx_PeriphCLKConfig+0x650>
 8005132:	f240 118b 	movw	r1, #395	@ 0x18b
 8005136:	483b      	ldr	r0, [pc, #236]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 8005138:	f7fc fee0 	bl	8001efc <assert_failed>
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800513c:	4b3a      	ldr	r3, [pc, #232]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800513e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005142:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800514a:	4937      	ldr	r1, [pc, #220]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800514c:	4313      	orrs	r3, r2
 800514e:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8005156:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 800515a:	d105      	bne.n	8005168 <HAL_RCCEx_PeriphCLKConfig+0x67c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800515c:	4b32      	ldr	r3, [pc, #200]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 800515e:	68db      	ldr	r3, [r3, #12]
 8005160:	4a31      	ldr	r2, [pc, #196]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005162:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8005166:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8005170:	2b00      	cmp	r3, #0
 8005172:	d023      	beq.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005178:	2b00      	cmp	r3, #0
 800517a:	d009      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005180:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8005184:	d004      	beq.n	8005190 <HAL_RCCEx_PeriphCLKConfig+0x6a4>
 8005186:	f44f 71cd 	mov.w	r1, #410	@ 0x19a
 800518a:	4826      	ldr	r0, [pc, #152]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 800518c:	f7fc feb6 	bl	8001efc <assert_failed>
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005190:	4b25      	ldr	r3, [pc, #148]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005192:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005196:	f023 6240 	bic.w	r2, r3, #201326592	@ 0xc000000
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800519e:	4922      	ldr	r1, [pc, #136]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80051a0:	4313      	orrs	r3, r2
 80051a2:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051aa:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 80051ae:	d105      	bne.n	80051bc <HAL_RCCEx_PeriphCLKConfig+0x6d0>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80051b0:	4b1d      	ldr	r3, [pc, #116]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80051b2:	68db      	ldr	r3, [r3, #12]
 80051b4:	4a1c      	ldr	r2, [pc, #112]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80051b6:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80051ba:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	681b      	ldr	r3, [r3, #0]
 80051c0:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 80051c4:	2b00      	cmp	r3, #0
 80051c6:	d028      	beq.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x72e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051cc:	2b00      	cmp	r3, #0
 80051ce:	d00e      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x702>
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051d4:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80051d8:	d009      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x702>
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051de:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80051e2:	d004      	beq.n	80051ee <HAL_RCCEx_PeriphCLKConfig+0x702>
 80051e4:	f44f 71d4 	mov.w	r1, #424	@ 0x1a8
 80051e8:	480e      	ldr	r0, [pc, #56]	@ (8005224 <HAL_RCCEx_PeriphCLKConfig+0x738>)
 80051ea:	f7fc fe87 	bl	8001efc <assert_failed>

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 80051ee:	4b0e      	ldr	r3, [pc, #56]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80051f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80051f4:	f023 5240 	bic.w	r2, r3, #805306368	@ 0x30000000
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80051fc:	490a      	ldr	r1, [pc, #40]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 80051fe:	4313      	orrs	r3, r2
 8005200:	f8c1 3088 	str.w	r3, [r1, #136]	@ 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005208:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 800520c:	d105      	bne.n	800521a <HAL_RCCEx_PeriphCLKConfig+0x72e>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800520e:	4b06      	ldr	r3, [pc, #24]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005210:	68db      	ldr	r3, [r3, #12]
 8005212:	4a05      	ldr	r2, [pc, #20]	@ (8005228 <HAL_RCCEx_PeriphCLKConfig+0x73c>)
 8005214:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8005218:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 800521a:	7cbb      	ldrb	r3, [r7, #18]
}
 800521c:	4618      	mov	r0, r3
 800521e:	3718      	adds	r7, #24
 8005220:	46bd      	mov	sp, r7
 8005222:	bd80      	pop	{r7, pc}
 8005224:	0800adcc 	.word	0x0800adcc
 8005228:	40021000 	.word	0x40021000

0800522c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800522c:	b580      	push	{r7, lr}
 800522e:	b082      	sub	sp, #8
 8005230:	af00      	add	r7, sp, #0
 8005232:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	2b00      	cmp	r3, #0
 8005238:	d101      	bne.n	800523e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e0dc      	b.n	80053f8 <HAL_TIM_Base_Init+0x1cc>
  }

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	4a6f      	ldr	r2, [pc, #444]	@ (8005400 <HAL_TIM_Base_Init+0x1d4>)
 8005244:	4293      	cmp	r3, r2
 8005246:	d031      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005250:	d02c      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	681b      	ldr	r3, [r3, #0]
 8005256:	4a6b      	ldr	r2, [pc, #428]	@ (8005404 <HAL_TIM_Base_Init+0x1d8>)
 8005258:	4293      	cmp	r3, r2
 800525a:	d027      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	4a69      	ldr	r2, [pc, #420]	@ (8005408 <HAL_TIM_Base_Init+0x1dc>)
 8005262:	4293      	cmp	r3, r2
 8005264:	d022      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a68      	ldr	r2, [pc, #416]	@ (800540c <HAL_TIM_Base_Init+0x1e0>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d01d      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	4a66      	ldr	r2, [pc, #408]	@ (8005410 <HAL_TIM_Base_Init+0x1e4>)
 8005276:	4293      	cmp	r3, r2
 8005278:	d018      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a65      	ldr	r2, [pc, #404]	@ (8005414 <HAL_TIM_Base_Init+0x1e8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d013      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	4a63      	ldr	r2, [pc, #396]	@ (8005418 <HAL_TIM_Base_Init+0x1ec>)
 800528a:	4293      	cmp	r3, r2
 800528c:	d00e      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	4a62      	ldr	r2, [pc, #392]	@ (800541c <HAL_TIM_Base_Init+0x1f0>)
 8005294:	4293      	cmp	r3, r2
 8005296:	d009      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a60      	ldr	r2, [pc, #384]	@ (8005420 <HAL_TIM_Base_Init+0x1f4>)
 800529e:	4293      	cmp	r3, r2
 80052a0:	d004      	beq.n	80052ac <HAL_TIM_Base_Init+0x80>
 80052a2:	f44f 7191 	mov.w	r1, #290	@ 0x122
 80052a6:	485f      	ldr	r0, [pc, #380]	@ (8005424 <HAL_TIM_Base_Init+0x1f8>)
 80052a8:	f7fc fe28 	bl	8001efc <assert_failed>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	689b      	ldr	r3, [r3, #8]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d014      	beq.n	80052de <HAL_TIM_Base_Init+0xb2>
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	689b      	ldr	r3, [r3, #8]
 80052b8:	2b10      	cmp	r3, #16
 80052ba:	d010      	beq.n	80052de <HAL_TIM_Base_Init+0xb2>
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	689b      	ldr	r3, [r3, #8]
 80052c0:	2b20      	cmp	r3, #32
 80052c2:	d00c      	beq.n	80052de <HAL_TIM_Base_Init+0xb2>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	689b      	ldr	r3, [r3, #8]
 80052c8:	2b40      	cmp	r3, #64	@ 0x40
 80052ca:	d008      	beq.n	80052de <HAL_TIM_Base_Init+0xb2>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	689b      	ldr	r3, [r3, #8]
 80052d0:	2b60      	cmp	r3, #96	@ 0x60
 80052d2:	d004      	beq.n	80052de <HAL_TIM_Base_Init+0xb2>
 80052d4:	f240 1123 	movw	r1, #291	@ 0x123
 80052d8:	4852      	ldr	r0, [pc, #328]	@ (8005424 <HAL_TIM_Base_Init+0x1f8>)
 80052da:	f7fc fe0f 	bl	8001efc <assert_failed>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	691b      	ldr	r3, [r3, #16]
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d00e      	beq.n	8005304 <HAL_TIM_Base_Init+0xd8>
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80052ee:	d009      	beq.n	8005304 <HAL_TIM_Base_Init+0xd8>
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	691b      	ldr	r3, [r3, #16]
 80052f4:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80052f8:	d004      	beq.n	8005304 <HAL_TIM_Base_Init+0xd8>
 80052fa:	f44f 7192 	mov.w	r1, #292	@ 0x124
 80052fe:	4849      	ldr	r0, [pc, #292]	@ (8005424 <HAL_TIM_Base_Init+0x1f8>)
 8005300:	f7fc fdfc 	bl	8001efc <assert_failed>
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800530c:	d00f      	beq.n	800532e <HAL_TIM_Base_Init+0x102>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	68db      	ldr	r3, [r3, #12]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d006      	beq.n	8005324 <HAL_TIM_Base_Init+0xf8>
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	68db      	ldr	r3, [r3, #12]
 800531a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800531e:	d201      	bcs.n	8005324 <HAL_TIM_Base_Init+0xf8>
 8005320:	2301      	movs	r3, #1
 8005322:	e000      	b.n	8005326 <HAL_TIM_Base_Init+0xfa>
 8005324:	2300      	movs	r3, #0
 8005326:	f003 0301 	and.w	r3, r3, #1
 800532a:	b2db      	uxtb	r3, r3
 800532c:	e006      	b.n	800533c <HAL_TIM_Base_Init+0x110>
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	68db      	ldr	r3, [r3, #12]
 8005332:	2b00      	cmp	r3, #0
 8005334:	bf14      	ite	ne
 8005336:	2301      	movne	r3, #1
 8005338:	2300      	moveq	r3, #0
 800533a:	b2db      	uxtb	r3, r3
 800533c:	2b00      	cmp	r3, #0
 800533e:	d104      	bne.n	800534a <HAL_TIM_Base_Init+0x11e>
 8005340:	f240 1125 	movw	r1, #293	@ 0x125
 8005344:	4837      	ldr	r0, [pc, #220]	@ (8005424 <HAL_TIM_Base_Init+0x1f8>)
 8005346:	f7fc fdd9 	bl	8001efc <assert_failed>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	699b      	ldr	r3, [r3, #24]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d008      	beq.n	8005364 <HAL_TIM_Base_Init+0x138>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	699b      	ldr	r3, [r3, #24]
 8005356:	2b80      	cmp	r3, #128	@ 0x80
 8005358:	d004      	beq.n	8005364 <HAL_TIM_Base_Init+0x138>
 800535a:	f44f 7193 	mov.w	r1, #294	@ 0x126
 800535e:	4831      	ldr	r0, [pc, #196]	@ (8005424 <HAL_TIM_Base_Init+0x1f8>)
 8005360:	f7fc fdcc 	bl	8001efc <assert_failed>

  if (htim->State == HAL_TIM_STATE_RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800536a:	b2db      	uxtb	r3, r3
 800536c:	2b00      	cmp	r3, #0
 800536e:	d106      	bne.n	800537e <HAL_TIM_Base_Init+0x152>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	2200      	movs	r2, #0
 8005374:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005378:	6878      	ldr	r0, [r7, #4]
 800537a:	f000 f855 	bl	8005428 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2202      	movs	r2, #2
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681a      	ldr	r2, [r3, #0]
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	3304      	adds	r3, #4
 800538e:	4619      	mov	r1, r3
 8005390:	4610      	mov	r0, r2
 8005392:	f000 fa73 	bl	800587c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2201      	movs	r2, #1
 800539a:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	2201      	movs	r2, #1
 80053a2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2201      	movs	r2, #1
 80053aa:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80053ae:	687b      	ldr	r3, [r7, #4]
 80053b0:	2201      	movs	r2, #1
 80053b2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	2201      	movs	r2, #1
 80053ba:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	2201      	movs	r2, #1
 80053c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	2201      	movs	r2, #1
 80053ca:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80053ce:	687b      	ldr	r3, [r7, #4]
 80053d0:	2201      	movs	r2, #1
 80053d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	2201      	movs	r2, #1
 80053da:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	2201      	movs	r2, #1
 80053e2:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	2201      	movs	r2, #1
 80053ea:	f883 2047 	strb.w	r2, [r3, #71]	@ 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2201      	movs	r2, #1
 80053f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80053f6:	2300      	movs	r3, #0
}
 80053f8:	4618      	mov	r0, r3
 80053fa:	3708      	adds	r7, #8
 80053fc:	46bd      	mov	sp, r7
 80053fe:	bd80      	pop	{r7, pc}
 8005400:	40012c00 	.word	0x40012c00
 8005404:	40000400 	.word	0x40000400
 8005408:	40000800 	.word	0x40000800
 800540c:	40001000 	.word	0x40001000
 8005410:	40001400 	.word	0x40001400
 8005414:	40013400 	.word	0x40013400
 8005418:	40014000 	.word	0x40014000
 800541c:	40014400 	.word	0x40014400
 8005420:	40014800 	.word	0x40014800
 8005424:	0800ae08 	.word	0x0800ae08

08005428 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005428:	b480      	push	{r7}
 800542a:	b083      	sub	sp, #12
 800542c:	af00      	add	r7, sp, #0
 800542e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005430:	bf00      	nop
 8005432:	370c      	adds	r7, #12
 8005434:	46bd      	mov	sp, r7
 8005436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800543a:	4770      	bx	lr

0800543c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800543c:	b580      	push	{r7, lr}
 800543e:	b084      	sub	sp, #16
 8005440:	af00      	add	r7, sp, #0
 8005442:	6078      	str	r0, [r7, #4]
  uint32_t tmpsmcr;

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	681b      	ldr	r3, [r3, #0]
 8005448:	4a45      	ldr	r2, [pc, #276]	@ (8005560 <HAL_TIM_Base_Start_IT+0x124>)
 800544a:	4293      	cmp	r3, r2
 800544c:	d031      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	681b      	ldr	r3, [r3, #0]
 8005452:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005456:	d02c      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	4a41      	ldr	r2, [pc, #260]	@ (8005564 <HAL_TIM_Base_Start_IT+0x128>)
 800545e:	4293      	cmp	r3, r2
 8005460:	d027      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	4a40      	ldr	r2, [pc, #256]	@ (8005568 <HAL_TIM_Base_Start_IT+0x12c>)
 8005468:	4293      	cmp	r3, r2
 800546a:	d022      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	4a3e      	ldr	r2, [pc, #248]	@ (800556c <HAL_TIM_Base_Start_IT+0x130>)
 8005472:	4293      	cmp	r3, r2
 8005474:	d01d      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	4a3d      	ldr	r2, [pc, #244]	@ (8005570 <HAL_TIM_Base_Start_IT+0x134>)
 800547c:	4293      	cmp	r3, r2
 800547e:	d018      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	4a3b      	ldr	r2, [pc, #236]	@ (8005574 <HAL_TIM_Base_Start_IT+0x138>)
 8005486:	4293      	cmp	r3, r2
 8005488:	d013      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	4a3a      	ldr	r2, [pc, #232]	@ (8005578 <HAL_TIM_Base_Start_IT+0x13c>)
 8005490:	4293      	cmp	r3, r2
 8005492:	d00e      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	4a38      	ldr	r2, [pc, #224]	@ (800557c <HAL_TIM_Base_Start_IT+0x140>)
 800549a:	4293      	cmp	r3, r2
 800549c:	d009      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	681b      	ldr	r3, [r3, #0]
 80054a2:	4a37      	ldr	r2, [pc, #220]	@ (8005580 <HAL_TIM_Base_Start_IT+0x144>)
 80054a4:	4293      	cmp	r3, r2
 80054a6:	d004      	beq.n	80054b2 <HAL_TIM_Base_Start_IT+0x76>
 80054a8:	f240 11df 	movw	r1, #479	@ 0x1df
 80054ac:	4835      	ldr	r0, [pc, #212]	@ (8005584 <HAL_TIM_Base_Start_IT+0x148>)
 80054ae:	f7fc fd25 	bl	8001efc <assert_failed>

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80054b8:	b2db      	uxtb	r3, r3
 80054ba:	2b01      	cmp	r3, #1
 80054bc:	d001      	beq.n	80054c2 <HAL_TIM_Base_Start_IT+0x86>
  {
    return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e04a      	b.n	8005558 <HAL_TIM_Base_Start_IT+0x11c>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80054c2:	687b      	ldr	r3, [r7, #4]
 80054c4:	2202      	movs	r2, #2
 80054c6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	68da      	ldr	r2, [r3, #12]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f042 0201 	orr.w	r2, r2, #1
 80054d8:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	681b      	ldr	r3, [r3, #0]
 80054de:	4a20      	ldr	r2, [pc, #128]	@ (8005560 <HAL_TIM_Base_Start_IT+0x124>)
 80054e0:	4293      	cmp	r3, r2
 80054e2:	d018      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xda>
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80054ec:	d013      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xda>
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	681b      	ldr	r3, [r3, #0]
 80054f2:	4a1c      	ldr	r2, [pc, #112]	@ (8005564 <HAL_TIM_Base_Start_IT+0x128>)
 80054f4:	4293      	cmp	r3, r2
 80054f6:	d00e      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xda>
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4a1a      	ldr	r2, [pc, #104]	@ (8005568 <HAL_TIM_Base_Start_IT+0x12c>)
 80054fe:	4293      	cmp	r3, r2
 8005500:	d009      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xda>
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	4a1b      	ldr	r2, [pc, #108]	@ (8005574 <HAL_TIM_Base_Start_IT+0x138>)
 8005508:	4293      	cmp	r3, r2
 800550a:	d004      	beq.n	8005516 <HAL_TIM_Base_Start_IT+0xda>
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	4a19      	ldr	r2, [pc, #100]	@ (8005578 <HAL_TIM_Base_Start_IT+0x13c>)
 8005512:	4293      	cmp	r3, r2
 8005514:	d115      	bne.n	8005542 <HAL_TIM_Base_Start_IT+0x106>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	689a      	ldr	r2, [r3, #8]
 800551c:	4b1a      	ldr	r3, [pc, #104]	@ (8005588 <HAL_TIM_Base_Start_IT+0x14c>)
 800551e:	4013      	ands	r3, r2
 8005520:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005522:	68fb      	ldr	r3, [r7, #12]
 8005524:	2b06      	cmp	r3, #6
 8005526:	d015      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x118>
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800552e:	d011      	beq.n	8005554 <HAL_TIM_Base_Start_IT+0x118>
    {
      __HAL_TIM_ENABLE(htim);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	681a      	ldr	r2, [r3, #0]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f042 0201 	orr.w	r2, r2, #1
 800553e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005540:	e008      	b.n	8005554 <HAL_TIM_Base_Start_IT+0x118>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	681a      	ldr	r2, [r3, #0]
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f042 0201 	orr.w	r2, r2, #1
 8005550:	601a      	str	r2, [r3, #0]
 8005552:	e000      	b.n	8005556 <HAL_TIM_Base_Start_IT+0x11a>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005554:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005556:	2300      	movs	r3, #0
}
 8005558:	4618      	mov	r0, r3
 800555a:	3710      	adds	r7, #16
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40012c00 	.word	0x40012c00
 8005564:	40000400 	.word	0x40000400
 8005568:	40000800 	.word	0x40000800
 800556c:	40001000 	.word	0x40001000
 8005570:	40001400 	.word	0x40001400
 8005574:	40013400 	.word	0x40013400
 8005578:	40014000 	.word	0x40014000
 800557c:	40014400 	.word	0x40014400
 8005580:	40014800 	.word	0x40014800
 8005584:	0800ae08 	.word	0x0800ae08
 8005588:	00010007 	.word	0x00010007

0800558c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800558c:	b580      	push	{r7, lr}
 800558e:	b084      	sub	sp, #16
 8005590:	af00      	add	r7, sp, #0
 8005592:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	68db      	ldr	r3, [r3, #12]
 800559a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	691b      	ldr	r3, [r3, #16]
 80055a2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80055a4:	68bb      	ldr	r3, [r7, #8]
 80055a6:	f003 0302 	and.w	r3, r3, #2
 80055aa:	2b00      	cmp	r3, #0
 80055ac:	d020      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	f003 0302 	and.w	r3, r3, #2
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01b      	beq.n	80055f0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f06f 0202 	mvn.w	r2, #2
 80055c0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	2201      	movs	r2, #1
 80055c6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	699b      	ldr	r3, [r3, #24]
 80055ce:	f003 0303 	and.w	r3, r3, #3
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d003      	beq.n	80055de <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80055d6:	6878      	ldr	r0, [r7, #4]
 80055d8:	f000 f931 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 80055dc:	e005      	b.n	80055ea <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f000 f923 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80055e4:	6878      	ldr	r0, [r7, #4]
 80055e6:	f000 f934 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	2200      	movs	r2, #0
 80055ee:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80055f0:	68bb      	ldr	r3, [r7, #8]
 80055f2:	f003 0304 	and.w	r3, r3, #4
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d020      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	f003 0304 	and.w	r3, r3, #4
 8005600:	2b00      	cmp	r3, #0
 8005602:	d01b      	beq.n	800563c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f06f 0204 	mvn.w	r2, #4
 800560c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	2202      	movs	r2, #2
 8005612:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800561e:	2b00      	cmp	r3, #0
 8005620:	d003      	beq.n	800562a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005622:	6878      	ldr	r0, [r7, #4]
 8005624:	f000 f90b 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 8005628:	e005      	b.n	8005636 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800562a:	6878      	ldr	r0, [r7, #4]
 800562c:	f000 f8fd 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f000 f90e 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2200      	movs	r2, #0
 800563a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	f003 0308 	and.w	r3, r3, #8
 8005642:	2b00      	cmp	r3, #0
 8005644:	d020      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8005646:	68fb      	ldr	r3, [r7, #12]
 8005648:	f003 0308 	and.w	r3, r3, #8
 800564c:	2b00      	cmp	r3, #0
 800564e:	d01b      	beq.n	8005688 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f06f 0208 	mvn.w	r2, #8
 8005658:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	2204      	movs	r2, #4
 800565e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	69db      	ldr	r3, [r3, #28]
 8005666:	f003 0303 	and.w	r3, r3, #3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d003      	beq.n	8005676 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f000 f8e5 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 8005674:	e005      	b.n	8005682 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005676:	6878      	ldr	r0, [r7, #4]
 8005678:	f000 f8d7 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800567c:	6878      	ldr	r0, [r7, #4]
 800567e:	f000 f8e8 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	2200      	movs	r2, #0
 8005686:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005688:	68bb      	ldr	r3, [r7, #8]
 800568a:	f003 0310 	and.w	r3, r3, #16
 800568e:	2b00      	cmp	r3, #0
 8005690:	d020      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	f003 0310 	and.w	r3, r3, #16
 8005698:	2b00      	cmp	r3, #0
 800569a:	d01b      	beq.n	80056d4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	f06f 0210 	mvn.w	r2, #16
 80056a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	2208      	movs	r2, #8
 80056aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	69db      	ldr	r3, [r3, #28]
 80056b2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d003      	beq.n	80056c2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f000 f8bf 	bl	800583e <HAL_TIM_IC_CaptureCallback>
 80056c0:	e005      	b.n	80056ce <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f000 f8b1 	bl	800582a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056c8:	6878      	ldr	r0, [r7, #4]
 80056ca:	f000 f8c2 	bl	8005852 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	2200      	movs	r2, #0
 80056d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80056d4:	68bb      	ldr	r3, [r7, #8]
 80056d6:	f003 0301 	and.w	r3, r3, #1
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d00c      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	f003 0301 	and.w	r3, r3, #1
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d007      	beq.n	80056f8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	f06f 0201 	mvn.w	r2, #1
 80056f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80056f2:	6878      	ldr	r0, [r7, #4]
 80056f4:	f7fc fbea 	bl	8001ecc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80056f8:	68bb      	ldr	r3, [r7, #8]
 80056fa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d104      	bne.n	800570c <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 8005702:	68bb      	ldr	r3, [r7, #8]
 8005704:	f403 5300 	and.w	r3, r3, #8192	@ 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8005708:	2b00      	cmp	r3, #0
 800570a:	d00c      	beq.n	8005726 <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005712:	2b00      	cmp	r3, #0
 8005714:	d007      	beq.n	8005726 <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	f46f 5202 	mvn.w	r2, #8320	@ 0x2080
 800571e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005720:	6878      	ldr	r0, [r7, #4]
 8005722:	f000 f951 	bl	80059c8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8005726:	68bb      	ldr	r3, [r7, #8]
 8005728:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800572c:	2b00      	cmp	r3, #0
 800572e:	d00c      	beq.n	800574a <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005736:	2b00      	cmp	r3, #0
 8005738:	d007      	beq.n	800574a <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800573a:	687b      	ldr	r3, [r7, #4]
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	f46f 7280 	mvn.w	r2, #256	@ 0x100
 8005742:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f000 f949 	bl	80059dc <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800574a:	68bb      	ldr	r3, [r7, #8]
 800574c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005750:	2b00      	cmp	r3, #0
 8005752:	d00c      	beq.n	800576e <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800575a:	2b00      	cmp	r3, #0
 800575c:	d007      	beq.n	800576e <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	681b      	ldr	r3, [r3, #0]
 8005762:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8005766:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005768:	6878      	ldr	r0, [r7, #4]
 800576a:	f000 f87c 	bl	8005866 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f003 0320 	and.w	r3, r3, #32
 8005774:	2b00      	cmp	r3, #0
 8005776:	d00c      	beq.n	8005792 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	f003 0320 	and.w	r3, r3, #32
 800577e:	2b00      	cmp	r3, #0
 8005780:	d007      	beq.n	8005792 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	681b      	ldr	r3, [r3, #0]
 8005786:	f06f 0220 	mvn.w	r2, #32
 800578a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 f911 	bl	80059b4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if ((itflag & (TIM_FLAG_IDX)) == (TIM_FLAG_IDX))
 8005792:	68bb      	ldr	r3, [r7, #8]
 8005794:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8005798:	2b00      	cmp	r3, #0
 800579a:	d00c      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x22a>
  {
    if ((itsource & (TIM_IT_IDX)) == (TIM_IT_IDX))
 800579c:	68fb      	ldr	r3, [r7, #12]
 800579e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d007      	beq.n	80057b6 <HAL_TIM_IRQHandler+0x22a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IDX);
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	f46f 1280 	mvn.w	r2, #1048576	@ 0x100000
 80057ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80057b0:	6878      	ldr	r0, [r7, #4]
 80057b2:	f000 f91d 	bl	80059f0 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if ((itflag & (TIM_FLAG_DIR)) == (TIM_FLAG_DIR))
 80057b6:	68bb      	ldr	r3, [r7, #8]
 80057b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057bc:	2b00      	cmp	r3, #0
 80057be:	d00c      	beq.n	80057da <HAL_TIM_IRQHandler+0x24e>
  {
    if ((itsource & (TIM_IT_DIR)) == (TIM_IT_DIR))
 80057c0:	68fb      	ldr	r3, [r7, #12]
 80057c2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d007      	beq.n	80057da <HAL_TIM_IRQHandler+0x24e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_DIR);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	f46f 1200 	mvn.w	r2, #2097152	@ 0x200000
 80057d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80057d4:	6878      	ldr	r0, [r7, #4]
 80057d6:	f000 f915 	bl	8005a04 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if ((itflag & (TIM_FLAG_IERR)) == (TIM_FLAG_IERR))
 80057da:	68bb      	ldr	r3, [r7, #8]
 80057dc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d00c      	beq.n	80057fe <HAL_TIM_IRQHandler+0x272>
  {
    if ((itsource & (TIM_IT_IERR)) == (TIM_IT_IERR))
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d007      	beq.n	80057fe <HAL_TIM_IRQHandler+0x272>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_IERR);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f46f 0280 	mvn.w	r2, #4194304	@ 0x400000
 80057f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80057f8:	6878      	ldr	r0, [r7, #4]
 80057fa:	f000 f90d 	bl	8005a18 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if ((itflag & (TIM_FLAG_TERR)) == (TIM_FLAG_TERR))
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005804:	2b00      	cmp	r3, #0
 8005806:	d00c      	beq.n	8005822 <HAL_TIM_IRQHandler+0x296>
  {
    if ((itsource & (TIM_IT_TERR)) == (TIM_IT_TERR))
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800580e:	2b00      	cmp	r3, #0
 8005810:	d007      	beq.n	8005822 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TERR);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	f46f 0200 	mvn.w	r2, #8388608	@ 0x800000
 800581a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 800581c:	6878      	ldr	r0, [r7, #4]
 800581e:	f000 f905 	bl	8005a2c <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005822:	bf00      	nop
 8005824:	3710      	adds	r7, #16
 8005826:	46bd      	mov	sp, r7
 8005828:	bd80      	pop	{r7, pc}

0800582a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800582a:	b480      	push	{r7}
 800582c:	b083      	sub	sp, #12
 800582e:	af00      	add	r7, sp, #0
 8005830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005832:	bf00      	nop
 8005834:	370c      	adds	r7, #12
 8005836:	46bd      	mov	sp, r7
 8005838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800583c:	4770      	bx	lr

0800583e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800583e:	b480      	push	{r7}
 8005840:	b083      	sub	sp, #12
 8005842:	af00      	add	r7, sp, #0
 8005844:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005846:	bf00      	nop
 8005848:	370c      	adds	r7, #12
 800584a:	46bd      	mov	sp, r7
 800584c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005850:	4770      	bx	lr

08005852 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005852:	b480      	push	{r7}
 8005854:	b083      	sub	sp, #12
 8005856:	af00      	add	r7, sp, #0
 8005858:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800585a:	bf00      	nop
 800585c:	370c      	adds	r7, #12
 800585e:	46bd      	mov	sp, r7
 8005860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005864:	4770      	bx	lr

08005866 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005866:	b480      	push	{r7}
 8005868:	b083      	sub	sp, #12
 800586a:	af00      	add	r7, sp, #0
 800586c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800586e:	bf00      	nop
 8005870:	370c      	adds	r7, #12
 8005872:	46bd      	mov	sp, r7
 8005874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005878:	4770      	bx	lr
	...

0800587c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800587c:	b480      	push	{r7}
 800587e:	b085      	sub	sp, #20
 8005880:	af00      	add	r7, sp, #0
 8005882:	6078      	str	r0, [r7, #4]
 8005884:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	4a42      	ldr	r2, [pc, #264]	@ (8005998 <TIM_Base_SetConfig+0x11c>)
 8005890:	4293      	cmp	r3, r2
 8005892:	d00f      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 8005894:	687b      	ldr	r3, [r7, #4]
 8005896:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800589a:	d00b      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a3f      	ldr	r2, [pc, #252]	@ (800599c <TIM_Base_SetConfig+0x120>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d007      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	4a3e      	ldr	r2, [pc, #248]	@ (80059a0 <TIM_Base_SetConfig+0x124>)
 80058a8:	4293      	cmp	r3, r2
 80058aa:	d003      	beq.n	80058b4 <TIM_Base_SetConfig+0x38>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a3d      	ldr	r2, [pc, #244]	@ (80059a4 <TIM_Base_SetConfig+0x128>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d108      	bne.n	80058c6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058b4:	68fb      	ldr	r3, [r7, #12]
 80058b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058ba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	685b      	ldr	r3, [r3, #4]
 80058c0:	68fa      	ldr	r2, [r7, #12]
 80058c2:	4313      	orrs	r3, r2
 80058c4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	4a33      	ldr	r2, [pc, #204]	@ (8005998 <TIM_Base_SetConfig+0x11c>)
 80058ca:	4293      	cmp	r3, r2
 80058cc:	d01b      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80058d4:	d017      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a30      	ldr	r2, [pc, #192]	@ (800599c <TIM_Base_SetConfig+0x120>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d013      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	4a2f      	ldr	r2, [pc, #188]	@ (80059a0 <TIM_Base_SetConfig+0x124>)
 80058e2:	4293      	cmp	r3, r2
 80058e4:	d00f      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a2e      	ldr	r2, [pc, #184]	@ (80059a4 <TIM_Base_SetConfig+0x128>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d00b      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a2d      	ldr	r2, [pc, #180]	@ (80059a8 <TIM_Base_SetConfig+0x12c>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d007      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a2c      	ldr	r2, [pc, #176]	@ (80059ac <TIM_Base_SetConfig+0x130>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d003      	beq.n	8005906 <TIM_Base_SetConfig+0x8a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a2b      	ldr	r2, [pc, #172]	@ (80059b0 <TIM_Base_SetConfig+0x134>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d108      	bne.n	8005918 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005906:	68fb      	ldr	r3, [r7, #12]
 8005908:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800590c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800590e:	683b      	ldr	r3, [r7, #0]
 8005910:	68db      	ldr	r3, [r3, #12]
 8005912:	68fa      	ldr	r2, [r7, #12]
 8005914:	4313      	orrs	r3, r2
 8005916:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005918:	68fb      	ldr	r3, [r7, #12]
 800591a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	695b      	ldr	r3, [r3, #20]
 8005922:	4313      	orrs	r3, r2
 8005924:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	68fa      	ldr	r2, [r7, #12]
 800592a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800592c:	683b      	ldr	r3, [r7, #0]
 800592e:	689a      	ldr	r2, [r3, #8]
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	681a      	ldr	r2, [r3, #0]
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	4a16      	ldr	r2, [pc, #88]	@ (8005998 <TIM_Base_SetConfig+0x11c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d00f      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	4a17      	ldr	r2, [pc, #92]	@ (80059a4 <TIM_Base_SetConfig+0x128>)
 8005948:	4293      	cmp	r3, r2
 800594a:	d00b      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a16      	ldr	r2, [pc, #88]	@ (80059a8 <TIM_Base_SetConfig+0x12c>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d007      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	4a15      	ldr	r2, [pc, #84]	@ (80059ac <TIM_Base_SetConfig+0x130>)
 8005958:	4293      	cmp	r3, r2
 800595a:	d003      	beq.n	8005964 <TIM_Base_SetConfig+0xe8>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	4a14      	ldr	r2, [pc, #80]	@ (80059b0 <TIM_Base_SetConfig+0x134>)
 8005960:	4293      	cmp	r3, r2
 8005962:	d103      	bne.n	800596c <TIM_Base_SetConfig+0xf0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005964:	683b      	ldr	r3, [r7, #0]
 8005966:	691a      	ldr	r2, [r3, #16]
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	2201      	movs	r2, #1
 8005970:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	691b      	ldr	r3, [r3, #16]
 8005976:	f003 0301 	and.w	r3, r3, #1
 800597a:	2b01      	cmp	r3, #1
 800597c:	d105      	bne.n	800598a <TIM_Base_SetConfig+0x10e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	691b      	ldr	r3, [r3, #16]
 8005982:	f023 0201 	bic.w	r2, r3, #1
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	611a      	str	r2, [r3, #16]
  }
}
 800598a:	bf00      	nop
 800598c:	3714      	adds	r7, #20
 800598e:	46bd      	mov	sp, r7
 8005990:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005994:	4770      	bx	lr
 8005996:	bf00      	nop
 8005998:	40012c00 	.word	0x40012c00
 800599c:	40000400 	.word	0x40000400
 80059a0:	40000800 	.word	0x40000800
 80059a4:	40013400 	.word	0x40013400
 80059a8:	40014000 	.word	0x40014000
 80059ac:	40014400 	.word	0x40014400
 80059b0:	40014800 	.word	0x40014800

080059b4 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80059b4:	b480      	push	{r7}
 80059b6:	b083      	sub	sp, #12
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80059bc:	bf00      	nop
 80059be:	370c      	adds	r7, #12
 80059c0:	46bd      	mov	sp, r7
 80059c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059c6:	4770      	bx	lr

080059c8 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80059c8:	b480      	push	{r7}
 80059ca:	b083      	sub	sp, #12
 80059cc:	af00      	add	r7, sp, #0
 80059ce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80059d0:	bf00      	nop
 80059d2:	370c      	adds	r7, #12
 80059d4:	46bd      	mov	sp, r7
 80059d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059da:	4770      	bx	lr

080059dc <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 80059dc:	b480      	push	{r7}
 80059de:	b083      	sub	sp, #12
 80059e0:	af00      	add	r7, sp, #0
 80059e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 80059e4:	bf00      	nop
 80059e6:	370c      	adds	r7, #12
 80059e8:	46bd      	mov	sp, r7
 80059ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ee:	4770      	bx	lr

080059f0 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80059f0:	b480      	push	{r7}
 80059f2:	b083      	sub	sp, #12
 80059f4:	af00      	add	r7, sp, #0
 80059f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b083      	sub	sp, #12
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005a0c:	bf00      	nop
 8005a0e:	370c      	adds	r7, #12
 8005a10:	46bd      	mov	sp, r7
 8005a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a16:	4770      	bx	lr

08005a18 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a18:	b480      	push	{r7}
 8005a1a:	b083      	sub	sp, #12
 8005a1c:	af00      	add	r7, sp, #0
 8005a1e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005a20:	bf00      	nop
 8005a22:	370c      	adds	r7, #12
 8005a24:	46bd      	mov	sp, r7
 8005a26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2a:	4770      	bx	lr

08005a2c <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005a2c:	b480      	push	{r7}
 8005a2e:	b083      	sub	sp, #12
 8005a30:	af00      	add	r7, sp, #0
 8005a32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005a34:	bf00      	nop
 8005a36:	370c      	adds	r7, #12
 8005a38:	46bd      	mov	sp, r7
 8005a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3e:	4770      	bx	lr

08005a40 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005a40:	b580      	push	{r7, lr}
 8005a42:	b082      	sub	sp, #8
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d101      	bne.n	8005a52 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005a4e:	2301      	movs	r3, #1
 8005a50:	e083      	b.n	8005b5a <HAL_UART_Init+0x11a>
  }

  if (huart->Init.HwFlowCtl != UART_HWCONTROL_NONE)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	699b      	ldr	r3, [r3, #24]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d01e      	beq.n	8005a98 <HAL_UART_Init+0x58>
  {
    /* Check the parameters */
    assert_param(IS_UART_HWFLOW_INSTANCE(huart->Instance));
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	681b      	ldr	r3, [r3, #0]
 8005a5e:	4a41      	ldr	r2, [pc, #260]	@ (8005b64 <HAL_UART_Init+0x124>)
 8005a60:	4293      	cmp	r3, r2
 8005a62:	d037      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	681b      	ldr	r3, [r3, #0]
 8005a68:	4a3f      	ldr	r2, [pc, #252]	@ (8005b68 <HAL_UART_Init+0x128>)
 8005a6a:	4293      	cmp	r3, r2
 8005a6c:	d032      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	4a3e      	ldr	r2, [pc, #248]	@ (8005b6c <HAL_UART_Init+0x12c>)
 8005a74:	4293      	cmp	r3, r2
 8005a76:	d02d      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	681b      	ldr	r3, [r3, #0]
 8005a7c:	4a3c      	ldr	r2, [pc, #240]	@ (8005b70 <HAL_UART_Init+0x130>)
 8005a7e:	4293      	cmp	r3, r2
 8005a80:	d028      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005a82:	687b      	ldr	r3, [r7, #4]
 8005a84:	681b      	ldr	r3, [r3, #0]
 8005a86:	4a3b      	ldr	r2, [pc, #236]	@ (8005b74 <HAL_UART_Init+0x134>)
 8005a88:	4293      	cmp	r3, r2
 8005a8a:	d023      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005a8c:	f44f 719f 	mov.w	r1, #318	@ 0x13e
 8005a90:	4839      	ldr	r0, [pc, #228]	@ (8005b78 <HAL_UART_Init+0x138>)
 8005a92:	f7fc fa33 	bl	8001efc <assert_failed>
 8005a96:	e01d      	b.n	8005ad4 <HAL_UART_Init+0x94>
  }
  else
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a31      	ldr	r2, [pc, #196]	@ (8005b64 <HAL_UART_Init+0x124>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d018      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a30      	ldr	r2, [pc, #192]	@ (8005b68 <HAL_UART_Init+0x128>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d013      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8005b6c <HAL_UART_Init+0x12c>)
 8005ab2:	4293      	cmp	r3, r2
 8005ab4:	d00e      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	4a2d      	ldr	r2, [pc, #180]	@ (8005b70 <HAL_UART_Init+0x130>)
 8005abc:	4293      	cmp	r3, r2
 8005abe:	d009      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	4a2b      	ldr	r2, [pc, #172]	@ (8005b74 <HAL_UART_Init+0x134>)
 8005ac6:	4293      	cmp	r3, r2
 8005ac8:	d004      	beq.n	8005ad4 <HAL_UART_Init+0x94>
 8005aca:	f240 1143 	movw	r1, #323	@ 0x143
 8005ace:	482a      	ldr	r0, [pc, #168]	@ (8005b78 <HAL_UART_Init+0x138>)
 8005ad0:	f7fc fa14 	bl	8001efc <assert_failed>
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005ada:	2b00      	cmp	r3, #0
 8005adc:	d106      	bne.n	8005aec <HAL_UART_Init+0xac>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	2200      	movs	r2, #0
 8005ae2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ae6:	6878      	ldr	r0, [r7, #4]
 8005ae8:	f7fc fbf8 	bl	80022dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	2224      	movs	r2, #36	@ 0x24
 8005af0:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  __HAL_UART_DISABLE(huart);
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	681b      	ldr	r3, [r3, #0]
 8005af8:	681a      	ldr	r2, [r3, #0]
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f022 0201 	bic.w	r2, r2, #1
 8005b02:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d002      	beq.n	8005b12 <HAL_UART_Init+0xd2>
  {
    UART_AdvFeatureConfig(huart);
 8005b0c:	6878      	ldr	r0, [r7, #4]
 8005b0e:	f001 f801 	bl	8006b14 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005b12:	6878      	ldr	r0, [r7, #4]
 8005b14:	f000 fc50 	bl	80063b8 <UART_SetConfig>
 8005b18:	4603      	mov	r3, r0
 8005b1a:	2b01      	cmp	r3, #1
 8005b1c:	d101      	bne.n	8005b22 <HAL_UART_Init+0xe2>
  {
    return HAL_ERROR;
 8005b1e:	2301      	movs	r3, #1
 8005b20:	e01b      	b.n	8005b5a <HAL_UART_Init+0x11a>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	685a      	ldr	r2, [r3, #4]
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005b30:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005b32:	687b      	ldr	r3, [r7, #4]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	689a      	ldr	r2, [r3, #8]
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005b40:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f042 0201 	orr.w	r2, r2, #1
 8005b50:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005b52:	6878      	ldr	r0, [r7, #4]
 8005b54:	f001 f936 	bl	8006dc4 <UART_CheckIdleState>
 8005b58:	4603      	mov	r3, r0
}
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	3708      	adds	r7, #8
 8005b5e:	46bd      	mov	sp, r7
 8005b60:	bd80      	pop	{r7, pc}
 8005b62:	bf00      	nop
 8005b64:	40013800 	.word	0x40013800
 8005b68:	40004400 	.word	0x40004400
 8005b6c:	40004800 	.word	0x40004800
 8005b70:	40004c00 	.word	0x40004c00
 8005b74:	40008000 	.word	0x40008000
 8005b78:	0800ae40 	.word	0x0800ae40

08005b7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005b7c:	b580      	push	{r7, lr}
 8005b7e:	b08a      	sub	sp, #40	@ 0x28
 8005b80:	af02      	add	r7, sp, #8
 8005b82:	60f8      	str	r0, [r7, #12]
 8005b84:	60b9      	str	r1, [r7, #8]
 8005b86:	603b      	str	r3, [r7, #0]
 8005b88:	4613      	mov	r3, r2
 8005b8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8005b92:	2b20      	cmp	r3, #32
 8005b94:	d17b      	bne.n	8005c8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8005b96:	68bb      	ldr	r3, [r7, #8]
 8005b98:	2b00      	cmp	r3, #0
 8005b9a:	d002      	beq.n	8005ba2 <HAL_UART_Transmit+0x26>
 8005b9c:	88fb      	ldrh	r3, [r7, #6]
 8005b9e:	2b00      	cmp	r3, #0
 8005ba0:	d101      	bne.n	8005ba6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8005ba2:	2301      	movs	r3, #1
 8005ba4:	e074      	b.n	8005c90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ba6:	68fb      	ldr	r3, [r7, #12]
 8005ba8:	2200      	movs	r2, #0
 8005baa:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005bae:	68fb      	ldr	r3, [r7, #12]
 8005bb0:	2221      	movs	r2, #33	@ 0x21
 8005bb2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005bb6:	f7fc fc45 	bl	8002444 <HAL_GetTick>
 8005bba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	88fa      	ldrh	r2, [r7, #6]
 8005bc0:	f8a3 2054 	strh.w	r2, [r3, #84]	@ 0x54
    huart->TxXferCount = Size;
 8005bc4:	68fb      	ldr	r3, [r7, #12]
 8005bc6:	88fa      	ldrh	r2, [r7, #6]
 8005bc8:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005bcc:	68fb      	ldr	r3, [r7, #12]
 8005bce:	689b      	ldr	r3, [r3, #8]
 8005bd0:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005bd4:	d108      	bne.n	8005be8 <HAL_UART_Transmit+0x6c>
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	691b      	ldr	r3, [r3, #16]
 8005bda:	2b00      	cmp	r3, #0
 8005bdc:	d104      	bne.n	8005be8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005bde:	2300      	movs	r3, #0
 8005be0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005be2:	68bb      	ldr	r3, [r7, #8]
 8005be4:	61bb      	str	r3, [r7, #24]
 8005be6:	e003      	b.n	8005bf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005bec:	2300      	movs	r3, #0
 8005bee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005bf0:	e030      	b.n	8005c54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005bf2:	683b      	ldr	r3, [r7, #0]
 8005bf4:	9300      	str	r3, [sp, #0]
 8005bf6:	697b      	ldr	r3, [r7, #20]
 8005bf8:	2200      	movs	r2, #0
 8005bfa:	2180      	movs	r1, #128	@ 0x80
 8005bfc:	68f8      	ldr	r0, [r7, #12]
 8005bfe:	f001 f98b 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8005c02:	4603      	mov	r3, r0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d005      	beq.n	8005c14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	2220      	movs	r2, #32
 8005c0c:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

        return HAL_TIMEOUT;
 8005c10:	2303      	movs	r3, #3
 8005c12:	e03d      	b.n	8005c90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8005c14:	69fb      	ldr	r3, [r7, #28]
 8005c16:	2b00      	cmp	r3, #0
 8005c18:	d10b      	bne.n	8005c32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005c1a:	69bb      	ldr	r3, [r7, #24]
 8005c1c:	881b      	ldrh	r3, [r3, #0]
 8005c1e:	461a      	mov	r2, r3
 8005c20:	68fb      	ldr	r3, [r7, #12]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005c28:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8005c2a:	69bb      	ldr	r3, [r7, #24]
 8005c2c:	3302      	adds	r3, #2
 8005c2e:	61bb      	str	r3, [r7, #24]
 8005c30:	e007      	b.n	8005c42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005c32:	69fb      	ldr	r3, [r7, #28]
 8005c34:	781a      	ldrb	r2, [r3, #0]
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	681b      	ldr	r3, [r3, #0]
 8005c3a:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
 8005c3e:	3301      	adds	r3, #1
 8005c40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005c42:	68fb      	ldr	r3, [r7, #12]
 8005c44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c48:	b29b      	uxth	r3, r3
 8005c4a:	3b01      	subs	r3, #1
 8005c4c:	b29a      	uxth	r2, r3
 8005c4e:	68fb      	ldr	r3, [r7, #12]
 8005c50:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
    while (huart->TxXferCount > 0U)
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	@ 0x56
 8005c5a:	b29b      	uxth	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d1c8      	bne.n	8005bf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005c60:	683b      	ldr	r3, [r7, #0]
 8005c62:	9300      	str	r3, [sp, #0]
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	2200      	movs	r2, #0
 8005c68:	2140      	movs	r1, #64	@ 0x40
 8005c6a:	68f8      	ldr	r0, [r7, #12]
 8005c6c:	f001 f954 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8005c70:	4603      	mov	r3, r0
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d005      	beq.n	8005c82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	2220      	movs	r2, #32
 8005c7a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      return HAL_TIMEOUT;
 8005c7e:	2303      	movs	r3, #3
 8005c80:	e006      	b.n	8005c90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	2220      	movs	r2, #32
 8005c86:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

    return HAL_OK;
 8005c8a:	2300      	movs	r3, #0
 8005c8c:	e000      	b.n	8005c90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8005c8e:	2302      	movs	r3, #2
  }
}
 8005c90:	4618      	mov	r0, r3
 8005c92:	3720      	adds	r7, #32
 8005c94:	46bd      	mov	sp, r7
 8005c96:	bd80      	pop	{r7, pc}

08005c98 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005c98:	b580      	push	{r7, lr}
 8005c9a:	b08a      	sub	sp, #40	@ 0x28
 8005c9c:	af00      	add	r7, sp, #0
 8005c9e:	60f8      	str	r0, [r7, #12]
 8005ca0:	60b9      	str	r1, [r7, #8]
 8005ca2:	4613      	mov	r3, r2
 8005ca4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005ca6:	68fb      	ldr	r3, [r7, #12]
 8005ca8:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8005cac:	2b20      	cmp	r3, #32
 8005cae:	d137      	bne.n	8005d20 <HAL_UART_Receive_IT+0x88>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cb0:	68bb      	ldr	r3, [r7, #8]
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d002      	beq.n	8005cbc <HAL_UART_Receive_IT+0x24>
 8005cb6:	88fb      	ldrh	r3, [r7, #6]
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d101      	bne.n	8005cc0 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005cbc:	2301      	movs	r3, #1
 8005cbe:	e030      	b.n	8005d22 <HAL_UART_Receive_IT+0x8a>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	2200      	movs	r2, #0
 8005cc4:	66da      	str	r2, [r3, #108]	@ 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	4a18      	ldr	r2, [pc, #96]	@ (8005d2c <HAL_UART_Receive_IT+0x94>)
 8005ccc:	4293      	cmp	r3, r2
 8005cce:	d01f      	beq.n	8005d10 <HAL_UART_Receive_IT+0x78>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	685b      	ldr	r3, [r3, #4]
 8005cd6:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8005cda:	2b00      	cmp	r3, #0
 8005cdc:	d018      	beq.n	8005d10 <HAL_UART_Receive_IT+0x78>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005cde:	68fb      	ldr	r3, [r7, #12]
 8005ce0:	681b      	ldr	r3, [r3, #0]
 8005ce2:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005ce4:	697b      	ldr	r3, [r7, #20]
 8005ce6:	e853 3f00 	ldrex	r3, [r3]
 8005cea:	613b      	str	r3, [r7, #16]
   return(result);
 8005cec:	693b      	ldr	r3, [r7, #16]
 8005cee:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8005cf2:	627b      	str	r3, [r7, #36]	@ 0x24
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	461a      	mov	r2, r3
 8005cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005cfc:	623b      	str	r3, [r7, #32]
 8005cfe:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005d00:	69f9      	ldr	r1, [r7, #28]
 8005d02:	6a3a      	ldr	r2, [r7, #32]
 8005d04:	e841 2300 	strex	r3, r2, [r1]
 8005d08:	61bb      	str	r3, [r7, #24]
   return(result);
 8005d0a:	69bb      	ldr	r3, [r7, #24]
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d1e6      	bne.n	8005cde <HAL_UART_Receive_IT+0x46>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005d10:	88fb      	ldrh	r3, [r7, #6]
 8005d12:	461a      	mov	r2, r3
 8005d14:	68b9      	ldr	r1, [r7, #8]
 8005d16:	68f8      	ldr	r0, [r7, #12]
 8005d18:	f001 f96c 	bl	8006ff4 <UART_Start_Receive_IT>
 8005d1c:	4603      	mov	r3, r0
 8005d1e:	e000      	b.n	8005d22 <HAL_UART_Receive_IT+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8005d20:	2302      	movs	r3, #2
  }
}
 8005d22:	4618      	mov	r0, r3
 8005d24:	3728      	adds	r7, #40	@ 0x28
 8005d26:	46bd      	mov	sp, r7
 8005d28:	bd80      	pop	{r7, pc}
 8005d2a:	bf00      	nop
 8005d2c:	40008000 	.word	0x40008000

08005d30 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b0ba      	sub	sp, #232	@ 0xe8
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	69db      	ldr	r3, [r3, #28]
 8005d3e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	689b      	ldr	r3, [r3, #8]
 8005d52:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005d56:	f8d7 20e4 	ldr.w	r2, [r7, #228]	@ 0xe4
 8005d5a:	f640 030f 	movw	r3, #2063	@ 0x80f
 8005d5e:	4013      	ands	r3, r2
 8005d60:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == 0U)
 8005d64:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005d68:	2b00      	cmp	r3, #0
 8005d6a:	d11b      	bne.n	8005da4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005d6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005d70:	f003 0320 	and.w	r3, r3, #32
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d015      	beq.n	8005da4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005d78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005d7c:	f003 0320 	and.w	r3, r3, #32
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d105      	bne.n	8005d90 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005d84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005d8c:	2b00      	cmp	r3, #0
 8005d8e:	d009      	beq.n	8005da4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	f000 82e3 	beq.w	8006360 <HAL_UART_IRQHandler+0x630>
      {
        huart->RxISR(huart);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005d9e:	6878      	ldr	r0, [r7, #4]
 8005da0:	4798      	blx	r3
      }
      return;
 8005da2:	e2dd      	b.n	8006360 <HAL_UART_IRQHandler+0x630>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005da4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005da8:	2b00      	cmp	r3, #0
 8005daa:	f000 8123 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x2c4>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005dae:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005db2:	4b8d      	ldr	r3, [pc, #564]	@ (8005fe8 <HAL_UART_IRQHandler+0x2b8>)
 8005db4:	4013      	ands	r3, r2
 8005db6:	2b00      	cmp	r3, #0
 8005db8:	d106      	bne.n	8005dc8 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005dba:	f8d7 20e0 	ldr.w	r2, [r7, #224]	@ 0xe0
 8005dbe:	4b8b      	ldr	r3, [pc, #556]	@ (8005fec <HAL_UART_IRQHandler+0x2bc>)
 8005dc0:	4013      	ands	r3, r2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	f000 8116 	beq.w	8005ff4 <HAL_UART_IRQHandler+0x2c4>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005dc8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dcc:	f003 0301 	and.w	r3, r3, #1
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d011      	beq.n	8005df8 <HAL_UART_IRQHandler+0xc8>
 8005dd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005dd8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d00b      	beq.n	8005df8 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	2201      	movs	r2, #1
 8005de6:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005dee:	f043 0201 	orr.w	r2, r3, #1
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005df8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005dfc:	f003 0302 	and.w	r3, r3, #2
 8005e00:	2b00      	cmp	r3, #0
 8005e02:	d011      	beq.n	8005e28 <HAL_UART_IRQHandler+0xf8>
 8005e04:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e08:	f003 0301 	and.w	r3, r3, #1
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d00b      	beq.n	8005e28 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	681b      	ldr	r3, [r3, #0]
 8005e14:	2202      	movs	r2, #2
 8005e16:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e1e:	f043 0204 	orr.w	r2, r3, #4
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005e28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e2c:	f003 0304 	and.w	r3, r3, #4
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d011      	beq.n	8005e58 <HAL_UART_IRQHandler+0x128>
 8005e34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005e38:	f003 0301 	and.w	r3, r3, #1
 8005e3c:	2b00      	cmp	r3, #0
 8005e3e:	d00b      	beq.n	8005e58 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	2204      	movs	r2, #4
 8005e46:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e4e:	f043 0202 	orr.w	r2, r3, #2
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005e58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e5c:	f003 0308 	and.w	r3, r3, #8
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d017      	beq.n	8005e94 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005e68:	f003 0320 	and.w	r3, r3, #32
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d105      	bne.n	8005e7c <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005e70:	f8d7 20dc 	ldr.w	r2, [r7, #220]	@ 0xdc
 8005e74:	4b5c      	ldr	r3, [pc, #368]	@ (8005fe8 <HAL_UART_IRQHandler+0x2b8>)
 8005e76:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d00b      	beq.n	8005e94 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2208      	movs	r2, #8
 8005e82:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005e8a:	f043 0208 	orr.w	r2, r3, #8
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005e94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005e98:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d012      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x196>
 8005ea0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ea4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d00c      	beq.n	8005ec6 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8005eb4:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ebc:	f043 0220 	orr.w	r2, r3, #32
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	f000 8249 	beq.w	8006364 <HAL_UART_IRQHandler+0x634>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ed2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ed6:	f003 0320 	and.w	r3, r3, #32
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d013      	beq.n	8005f06 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ede:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005ee2:	f003 0320 	and.w	r3, r3, #32
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d105      	bne.n	8005ef6 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005eea:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005eee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d007      	beq.n	8005f06 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005efa:	2b00      	cmp	r3, #0
 8005efc:	d003      	beq.n	8005f06 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8005f02:	6878      	ldr	r0, [r7, #4]
 8005f04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8005f06:	687b      	ldr	r3, [r7, #4]
 8005f08:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8005f0c:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	689b      	ldr	r3, [r3, #8]
 8005f16:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f1a:	2b40      	cmp	r3, #64	@ 0x40
 8005f1c:	d005      	beq.n	8005f2a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8005f1e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8005f22:	f003 0328 	and.w	r3, r3, #40	@ 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8005f26:	2b00      	cmp	r3, #0
 8005f28:	d054      	beq.n	8005fd4 <HAL_UART_IRQHandler+0x2a4>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8005f2a:	6878      	ldr	r0, [r7, #4]
 8005f2c:	f001 f984 	bl	8007238 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	689b      	ldr	r3, [r3, #8]
 8005f36:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005f3a:	2b40      	cmp	r3, #64	@ 0x40
 8005f3c:	d146      	bne.n	8005fcc <HAL_UART_IRQHandler+0x29c>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005f3e:	687b      	ldr	r3, [r7, #4]
 8005f40:	681b      	ldr	r3, [r3, #0]
 8005f42:	3308      	adds	r3, #8
 8005f44:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005f4c:	e853 3f00 	ldrex	r3, [r3]
 8005f50:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005f58:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	3308      	adds	r3, #8
 8005f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8005f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005f7a:	e841 2300 	strex	r3, r2, [r1]
 8005f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8005f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d1d9      	bne.n	8005f3e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d017      	beq.n	8005fc4 <HAL_UART_IRQHandler+0x294>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005f9a:	4a15      	ldr	r2, [pc, #84]	@ (8005ff0 <HAL_UART_IRQHandler+0x2c0>)
 8005f9c:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005f9e:	687b      	ldr	r3, [r7, #4]
 8005fa0:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fa4:	4618      	mov	r0, r3
 8005fa6:	f7fc ff08 	bl	8002dba <HAL_DMA_Abort_IT>
 8005faa:	4603      	mov	r3, r0
 8005fac:	2b00      	cmp	r3, #0
 8005fae:	d019      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x2b4>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8005fb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fb8:	687a      	ldr	r2, [r7, #4]
 8005fba:	f8d2 2080 	ldr.w	r2, [r2, #128]	@ 0x80
 8005fbe:	4610      	mov	r0, r2
 8005fc0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fc2:	e00f      	b.n	8005fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005fc4:	6878      	ldr	r0, [r7, #4]
 8005fc6:	f000 f9e1 	bl	800638c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fca:	e00b      	b.n	8005fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005fcc:	6878      	ldr	r0, [r7, #4]
 8005fce:	f000 f9dd 	bl	800638c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fd2:	e007      	b.n	8005fe4 <HAL_UART_IRQHandler+0x2b4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005fd4:	6878      	ldr	r0, [r7, #4]
 8005fd6:	f000 f9d9 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
      }
    }
    return;
 8005fe2:	e1bf      	b.n	8006364 <HAL_UART_IRQHandler+0x634>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005fe4:	bf00      	nop
    return;
 8005fe6:	e1bd      	b.n	8006364 <HAL_UART_IRQHandler+0x634>
 8005fe8:	10000001 	.word	0x10000001
 8005fec:	04000120 	.word	0x04000120
 8005ff0:	08007305 	.word	0x08007305

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8005ff8:	2b01      	cmp	r3, #1
 8005ffa:	f040 8153 	bne.w	80062a4 <HAL_UART_IRQHandler+0x574>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8005ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006002:	f003 0310 	and.w	r3, r3, #16
 8006006:	2b00      	cmp	r3, #0
 8006008:	f000 814c 	beq.w	80062a4 <HAL_UART_IRQHandler+0x574>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800600c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006010:	f003 0310 	and.w	r3, r3, #16
 8006014:	2b00      	cmp	r3, #0
 8006016:	f000 8145 	beq.w	80062a4 <HAL_UART_IRQHandler+0x574>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	2210      	movs	r2, #16
 8006020:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	689b      	ldr	r3, [r3, #8]
 8006028:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800602c:	2b40      	cmp	r3, #64	@ 0x40
 800602e:	f040 80bb 	bne.w	80061a8 <HAL_UART_IRQHandler+0x478>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685b      	ldr	r3, [r3, #4]
 800603c:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006040:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8006044:	2b00      	cmp	r3, #0
 8006046:	f000 818f 	beq.w	8006368 <HAL_UART_IRQHandler+0x638>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8006050:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006054:	429a      	cmp	r2, r3
 8006056:	f080 8187 	bcs.w	8006368 <HAL_UART_IRQHandler+0x638>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006060:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8006064:	687b      	ldr	r3, [r7, #4]
 8006066:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0320 	and.w	r3, r3, #32
 8006072:	2b00      	cmp	r3, #0
 8006074:	f040 8087 	bne.w	8006186 <HAL_UART_IRQHandler+0x456>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006080:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006084:	e853 3f00 	ldrex	r3, [r3]
 8006088:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800608c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006090:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006094:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	461a      	mov	r2, r3
 800609e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 80060a2:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 80060a6:	f8c7 2090 	str.w	r2, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80060ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80060b2:	e841 2300 	strex	r3, r2, [r1]
 80060b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80060ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d1da      	bne.n	8006078 <HAL_UART_IRQHandler+0x348>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	3308      	adds	r3, #8
 80060c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80060ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80060cc:	e853 3f00 	ldrex	r3, [r3]
 80060d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80060d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80060d4:	f023 0301 	bic.w	r3, r3, #1
 80060d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	681b      	ldr	r3, [r3, #0]
 80060e0:	3308      	adds	r3, #8
 80060e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80060e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80060ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80060ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80060f2:	e841 2300 	strex	r3, r2, [r1]
 80060f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80060f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d1e1      	bne.n	80060c2 <HAL_UART_IRQHandler+0x392>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	3308      	adds	r3, #8
 8006104:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006106:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006108:	e853 3f00 	ldrex	r3, [r3]
 800610c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800610e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006110:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006114:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	681b      	ldr	r3, [r3, #0]
 800611c:	3308      	adds	r3, #8
 800611e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006122:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006124:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006126:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006128:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800612a:	e841 2300 	strex	r3, r2, [r1]
 800612e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006130:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006132:	2b00      	cmp	r3, #0
 8006134:	d1e3      	bne.n	80060fe <HAL_UART_IRQHandler+0x3ce>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2220      	movs	r2, #32
 800613a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	2200      	movs	r2, #0
 8006142:	66da      	str	r2, [r3, #108]	@ 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	681b      	ldr	r3, [r3, #0]
 8006148:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800614a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800614c:	e853 3f00 	ldrex	r3, [r3]
 8006150:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006152:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006154:	f023 0310 	bic.w	r3, r3, #16
 8006158:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	461a      	mov	r2, r3
 8006162:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8006166:	65bb      	str	r3, [r7, #88]	@ 0x58
 8006168:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800616a:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800616c:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 800616e:	e841 2300 	strex	r3, r2, [r1]
 8006172:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006174:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006176:	2b00      	cmp	r3, #0
 8006178:	d1e4      	bne.n	8006144 <HAL_UART_IRQHandler+0x414>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	f8d3 3080 	ldr.w	r3, [r3, #128]	@ 0x80
 8006180:	4618      	mov	r0, r3
 8006182:	f7fc fdc1 	bl	8002d08 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	2202      	movs	r2, #2
 800618a:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8006198:	b29b      	uxth	r3, r3
 800619a:	1ad3      	subs	r3, r2, r3
 800619c:	b29b      	uxth	r3, r3
 800619e:	4619      	mov	r1, r3
 80061a0:	6878      	ldr	r0, [r7, #4]
 80061a2:	f000 f8fd 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80061a6:	e0df      	b.n	8006368 <HAL_UART_IRQHandler+0x638>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	f8b3 205c 	ldrh.w	r2, [r3, #92]	@ 0x5c
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061b4:	b29b      	uxth	r3, r3
 80061b6:	1ad3      	subs	r3, r2, r3
 80061b8:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80061c2:	b29b      	uxth	r3, r3
 80061c4:	2b00      	cmp	r3, #0
 80061c6:	f000 80d1 	beq.w	800636c <HAL_UART_IRQHandler+0x63c>
          && (nb_rx_data > 0U))
 80061ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80061ce:	2b00      	cmp	r3, #0
 80061d0:	f000 80cc 	beq.w	800636c <HAL_UART_IRQHandler+0x63c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061da:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061dc:	e853 3f00 	ldrex	r3, [r3]
 80061e0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80061e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061e4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80061e8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	681b      	ldr	r3, [r3, #0]
 80061f0:	461a      	mov	r2, r3
 80061f2:	f8d7 30c8 	ldr.w	r3, [r7, #200]	@ 0xc8
 80061f6:	647b      	str	r3, [r7, #68]	@ 0x44
 80061f8:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061fa:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80061fc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80061fe:	e841 2300 	strex	r3, r2, [r1]
 8006202:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006204:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006206:	2b00      	cmp	r3, #0
 8006208:	d1e4      	bne.n	80061d4 <HAL_UART_IRQHandler+0x4a4>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	681b      	ldr	r3, [r3, #0]
 800620e:	3308      	adds	r3, #8
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	e853 3f00 	ldrex	r3, [r3]
 8006218:	623b      	str	r3, [r7, #32]
   return(result);
 800621a:	6a3b      	ldr	r3, [r7, #32]
 800621c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8006220:	f023 0301 	bic.w	r3, r3, #1
 8006224:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	3308      	adds	r3, #8
 800622e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8006232:	633a      	str	r2, [r7, #48]	@ 0x30
 8006234:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006236:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006238:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800623a:	e841 2300 	strex	r3, r2, [r1]
 800623e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006240:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006242:	2b00      	cmp	r3, #0
 8006244:	d1e1      	bne.n	800620a <HAL_UART_IRQHandler+0x4da>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2220      	movs	r2, #32
 800624a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	2200      	movs	r2, #0
 8006252:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2200      	movs	r2, #0
 8006258:	675a      	str	r2, [r3, #116]	@ 0x74

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006260:	693b      	ldr	r3, [r7, #16]
 8006262:	e853 3f00 	ldrex	r3, [r3]
 8006266:	60fb      	str	r3, [r7, #12]
   return(result);
 8006268:	68fb      	ldr	r3, [r7, #12]
 800626a:	f023 0310 	bic.w	r3, r3, #16
 800626e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	461a      	mov	r2, r3
 8006278:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800627c:	61fb      	str	r3, [r7, #28]
 800627e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006280:	69b9      	ldr	r1, [r7, #24]
 8006282:	69fa      	ldr	r2, [r7, #28]
 8006284:	e841 2300 	strex	r3, r2, [r1]
 8006288:	617b      	str	r3, [r7, #20]
   return(result);
 800628a:	697b      	ldr	r3, [r7, #20]
 800628c:	2b00      	cmp	r3, #0
 800628e:	d1e4      	bne.n	800625a <HAL_UART_IRQHandler+0x52a>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	2202      	movs	r2, #2
 8006294:	671a      	str	r2, [r3, #112]	@ 0x70
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006296:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f87f 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062a2:	e063      	b.n	800636c <HAL_UART_IRQHandler+0x63c>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80062a4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062a8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80062ac:	2b00      	cmp	r3, #0
 80062ae:	d00e      	beq.n	80062ce <HAL_UART_IRQHandler+0x59e>
 80062b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062b4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d008      	beq.n	80062ce <HAL_UART_IRQHandler+0x59e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f44f 1280 	mov.w	r2, #1048576	@ 0x100000
 80062c4:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80062c6:	6878      	ldr	r0, [r7, #4]
 80062c8:	f001 fd7a 	bl	8007dc0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 80062cc:	e051      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 80062ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80062d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d014      	beq.n	8006304 <HAL_UART_IRQHandler+0x5d4>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 80062da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80062de:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80062e2:	2b00      	cmp	r3, #0
 80062e4:	d105      	bne.n	80062f2 <HAL_UART_IRQHandler+0x5c2>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80062e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80062ea:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d008      	beq.n	8006304 <HAL_UART_IRQHandler+0x5d4>
  {
    if (huart->TxISR != NULL)
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d03a      	beq.n	8006370 <HAL_UART_IRQHandler+0x640>
    {
      huart->TxISR(huart);
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 80062fe:	6878      	ldr	r0, [r7, #4]
 8006300:	4798      	blx	r3
    }
    return;
 8006302:	e035      	b.n	8006370 <HAL_UART_IRQHandler+0x640>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8006304:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006308:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800630c:	2b00      	cmp	r3, #0
 800630e:	d009      	beq.n	8006324 <HAL_UART_IRQHandler+0x5f4>
 8006310:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006314:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006318:	2b00      	cmp	r3, #0
 800631a:	d003      	beq.n	8006324 <HAL_UART_IRQHandler+0x5f4>
  {
    UART_EndTransmit_IT(huart);
 800631c:	6878      	ldr	r0, [r7, #4]
 800631e:	f001 f807 	bl	8007330 <UART_EndTransmit_IT>
    return;
 8006322:	e026      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8006324:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006328:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800632c:	2b00      	cmp	r3, #0
 800632e:	d009      	beq.n	8006344 <HAL_UART_IRQHandler+0x614>
 8006330:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006334:	f003 4380 	and.w	r3, r3, #1073741824	@ 0x40000000
 8006338:	2b00      	cmp	r3, #0
 800633a:	d003      	beq.n	8006344 <HAL_UART_IRQHandler+0x614>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f001 fd53 	bl	8007de8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006342:	e016      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8006344:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8006348:	f003 7380 	and.w	r3, r3, #16777216	@ 0x1000000
 800634c:	2b00      	cmp	r3, #0
 800634e:	d010      	beq.n	8006372 <HAL_UART_IRQHandler+0x642>
 8006350:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006354:	2b00      	cmp	r3, #0
 8006356:	da0c      	bge.n	8006372 <HAL_UART_IRQHandler+0x642>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8006358:	6878      	ldr	r0, [r7, #4]
 800635a:	f001 fd3b 	bl	8007dd4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800635e:	e008      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
      return;
 8006360:	bf00      	nop
 8006362:	e006      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
    return;
 8006364:	bf00      	nop
 8006366:	e004      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
      return;
 8006368:	bf00      	nop
 800636a:	e002      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
      return;
 800636c:	bf00      	nop
 800636e:	e000      	b.n	8006372 <HAL_UART_IRQHandler+0x642>
    return;
 8006370:	bf00      	nop
  }
}
 8006372:	37e8      	adds	r7, #232	@ 0xe8
 8006374:	46bd      	mov	sp, r7
 8006376:	bd80      	pop	{r7, pc}

08006378 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006378:	b480      	push	{r7}
 800637a:	b083      	sub	sp, #12
 800637c:	af00      	add	r7, sp, #0
 800637e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8006380:	bf00      	nop
 8006382:	370c      	adds	r7, #12
 8006384:	46bd      	mov	sp, r7
 8006386:	f85d 7b04 	ldr.w	r7, [sp], #4
 800638a:	4770      	bx	lr

0800638c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800638c:	b480      	push	{r7}
 800638e:	b083      	sub	sp, #12
 8006390:	af00      	add	r7, sp, #0
 8006392:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8006394:	bf00      	nop
 8006396:	370c      	adds	r7, #12
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b083      	sub	sp, #12
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	6078      	str	r0, [r7, #4]
 80063a8:	460b      	mov	r3, r1
 80063aa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80063ac:	bf00      	nop
 80063ae:	370c      	adds	r7, #12
 80063b0:	46bd      	mov	sp, r7
 80063b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063b6:	4770      	bx	lr

080063b8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80063b8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80063bc:	b08c      	sub	sp, #48	@ 0x30
 80063be:	af00      	add	r7, sp, #0
 80063c0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80063c2:	2300      	movs	r3, #0
 80063c4:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
  uint32_t lpuart_ker_ck_pres;
  uint32_t pclk;

  /* Check the parameters */
  assert_param(IS_UART_BAUDRATE(huart->Init.BaudRate));
 80063c8:	697b      	ldr	r3, [r7, #20]
 80063ca:	685b      	ldr	r3, [r3, #4]
 80063cc:	4a17      	ldr	r2, [pc, #92]	@ (800642c <UART_SetConfig+0x74>)
 80063ce:	4293      	cmp	r3, r2
 80063d0:	d904      	bls.n	80063dc <UART_SetConfig+0x24>
 80063d2:	f640 31c7 	movw	r1, #3015	@ 0xbc7
 80063d6:	4816      	ldr	r0, [pc, #88]	@ (8006430 <UART_SetConfig+0x78>)
 80063d8:	f7fb fd90 	bl	8001efc <assert_failed>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
 80063dc:	697b      	ldr	r3, [r7, #20]
 80063de:	689b      	ldr	r3, [r3, #8]
 80063e0:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 80063e4:	d00d      	beq.n	8006402 <UART_SetConfig+0x4a>
 80063e6:	697b      	ldr	r3, [r7, #20]
 80063e8:	689b      	ldr	r3, [r3, #8]
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d009      	beq.n	8006402 <UART_SetConfig+0x4a>
 80063ee:	697b      	ldr	r3, [r7, #20]
 80063f0:	689b      	ldr	r3, [r3, #8]
 80063f2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80063f6:	d004      	beq.n	8006402 <UART_SetConfig+0x4a>
 80063f8:	f640 31c8 	movw	r1, #3016	@ 0xbc8
 80063fc:	480c      	ldr	r0, [pc, #48]	@ (8006430 <UART_SetConfig+0x78>)
 80063fe:	f7fb fd7d 	bl	8001efc <assert_failed>
  if (UART_INSTANCE_LOWPOWER(huart))
 8006402:	697b      	ldr	r3, [r7, #20]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	4a0b      	ldr	r2, [pc, #44]	@ (8006434 <UART_SetConfig+0x7c>)
 8006408:	4293      	cmp	r3, r2
 800640a:	d115      	bne.n	8006438 <UART_SetConfig+0x80>
  {
    assert_param(IS_LPUART_STOPBITS(huart->Init.StopBits));
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	68db      	ldr	r3, [r3, #12]
 8006410:	2b00      	cmp	r3, #0
 8006412:	d037      	beq.n	8006484 <UART_SetConfig+0xcc>
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	68db      	ldr	r3, [r3, #12]
 8006418:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800641c:	d032      	beq.n	8006484 <UART_SetConfig+0xcc>
 800641e:	f640 31cb 	movw	r1, #3019	@ 0xbcb
 8006422:	4803      	ldr	r0, [pc, #12]	@ (8006430 <UART_SetConfig+0x78>)
 8006424:	f7fb fd6a 	bl	8001efc <assert_failed>
 8006428:	e02c      	b.n	8006484 <UART_SetConfig+0xcc>
 800642a:	bf00      	nop
 800642c:	011e1a30 	.word	0x011e1a30
 8006430:	0800ae40 	.word	0x0800ae40
 8006434:	40008000 	.word	0x40008000
  }
  else
  {
    assert_param(IS_UART_STOPBITS(huart->Init.StopBits));
 8006438:	697b      	ldr	r3, [r7, #20]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006440:	d012      	beq.n	8006468 <UART_SetConfig+0xb0>
 8006442:	697b      	ldr	r3, [r7, #20]
 8006444:	68db      	ldr	r3, [r3, #12]
 8006446:	2b00      	cmp	r3, #0
 8006448:	d00e      	beq.n	8006468 <UART_SetConfig+0xb0>
 800644a:	697b      	ldr	r3, [r7, #20]
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	f5b3 5f40 	cmp.w	r3, #12288	@ 0x3000
 8006452:	d009      	beq.n	8006468 <UART_SetConfig+0xb0>
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	68db      	ldr	r3, [r3, #12]
 8006458:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800645c:	d004      	beq.n	8006468 <UART_SetConfig+0xb0>
 800645e:	f640 31cf 	movw	r1, #3023	@ 0xbcf
 8006462:	489e      	ldr	r0, [pc, #632]	@ (80066dc <UART_SetConfig+0x324>)
 8006464:	f7fb fd4a 	bl	8001efc <assert_failed>
    assert_param(IS_UART_ONE_BIT_SAMPLE(huart->Init.OneBitSampling));
 8006468:	697b      	ldr	r3, [r7, #20]
 800646a:	6a1b      	ldr	r3, [r3, #32]
 800646c:	2b00      	cmp	r3, #0
 800646e:	d009      	beq.n	8006484 <UART_SetConfig+0xcc>
 8006470:	697b      	ldr	r3, [r7, #20]
 8006472:	6a1b      	ldr	r3, [r3, #32]
 8006474:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006478:	d004      	beq.n	8006484 <UART_SetConfig+0xcc>
 800647a:	f44f 613d 	mov.w	r1, #3024	@ 0xbd0
 800647e:	4897      	ldr	r0, [pc, #604]	@ (80066dc <UART_SetConfig+0x324>)
 8006480:	f7fb fd3c 	bl	8001efc <assert_failed>
  }

  assert_param(IS_UART_PARITY(huart->Init.Parity));
 8006484:	697b      	ldr	r3, [r7, #20]
 8006486:	691b      	ldr	r3, [r3, #16]
 8006488:	2b00      	cmp	r3, #0
 800648a:	d00e      	beq.n	80064aa <UART_SetConfig+0xf2>
 800648c:	697b      	ldr	r3, [r7, #20]
 800648e:	691b      	ldr	r3, [r3, #16]
 8006490:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8006494:	d009      	beq.n	80064aa <UART_SetConfig+0xf2>
 8006496:	697b      	ldr	r3, [r7, #20]
 8006498:	691b      	ldr	r3, [r3, #16]
 800649a:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 800649e:	d004      	beq.n	80064aa <UART_SetConfig+0xf2>
 80064a0:	f640 31d3 	movw	r1, #3027	@ 0xbd3
 80064a4:	488d      	ldr	r0, [pc, #564]	@ (80066dc <UART_SetConfig+0x324>)
 80064a6:	f7fb fd29 	bl	8001efc <assert_failed>
  assert_param(IS_UART_MODE(huart->Init.Mode));
 80064aa:	697b      	ldr	r3, [r7, #20]
 80064ac:	695b      	ldr	r3, [r3, #20]
 80064ae:	f023 030c 	bic.w	r3, r3, #12
 80064b2:	2b00      	cmp	r3, #0
 80064b4:	d103      	bne.n	80064be <UART_SetConfig+0x106>
 80064b6:	697b      	ldr	r3, [r7, #20]
 80064b8:	695b      	ldr	r3, [r3, #20]
 80064ba:	2b00      	cmp	r3, #0
 80064bc:	d104      	bne.n	80064c8 <UART_SetConfig+0x110>
 80064be:	f640 31d4 	movw	r1, #3028	@ 0xbd4
 80064c2:	4886      	ldr	r0, [pc, #536]	@ (80066dc <UART_SetConfig+0x324>)
 80064c4:	f7fb fd1a 	bl	8001efc <assert_failed>
  assert_param(IS_UART_HARDWARE_FLOW_CONTROL(huart->Init.HwFlowCtl));
 80064c8:	697b      	ldr	r3, [r7, #20]
 80064ca:	699b      	ldr	r3, [r3, #24]
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d013      	beq.n	80064f8 <UART_SetConfig+0x140>
 80064d0:	697b      	ldr	r3, [r7, #20]
 80064d2:	699b      	ldr	r3, [r3, #24]
 80064d4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80064d8:	d00e      	beq.n	80064f8 <UART_SetConfig+0x140>
 80064da:	697b      	ldr	r3, [r7, #20]
 80064dc:	699b      	ldr	r3, [r3, #24]
 80064de:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80064e2:	d009      	beq.n	80064f8 <UART_SetConfig+0x140>
 80064e4:	697b      	ldr	r3, [r7, #20]
 80064e6:	699b      	ldr	r3, [r3, #24]
 80064e8:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 80064ec:	d004      	beq.n	80064f8 <UART_SetConfig+0x140>
 80064ee:	f640 31d5 	movw	r1, #3029	@ 0xbd5
 80064f2:	487a      	ldr	r0, [pc, #488]	@ (80066dc <UART_SetConfig+0x324>)
 80064f4:	f7fb fd02 	bl	8001efc <assert_failed>
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
 80064f8:	697b      	ldr	r3, [r7, #20]
 80064fa:	69db      	ldr	r3, [r3, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d009      	beq.n	8006514 <UART_SetConfig+0x15c>
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	69db      	ldr	r3, [r3, #28]
 8006504:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006508:	d004      	beq.n	8006514 <UART_SetConfig+0x15c>
 800650a:	f640 31d6 	movw	r1, #3030	@ 0xbd6
 800650e:	4873      	ldr	r0, [pc, #460]	@ (80066dc <UART_SetConfig+0x324>)
 8006510:	f7fb fcf4 	bl	8001efc <assert_failed>
  assert_param(IS_UART_PRESCALER(huart->Init.ClockPrescaler));
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006518:	2b00      	cmp	r3, #0
 800651a:	d030      	beq.n	800657e <UART_SetConfig+0x1c6>
 800651c:	697b      	ldr	r3, [r7, #20]
 800651e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006520:	2b01      	cmp	r3, #1
 8006522:	d02c      	beq.n	800657e <UART_SetConfig+0x1c6>
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006528:	2b02      	cmp	r3, #2
 800652a:	d028      	beq.n	800657e <UART_SetConfig+0x1c6>
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006530:	2b03      	cmp	r3, #3
 8006532:	d024      	beq.n	800657e <UART_SetConfig+0x1c6>
 8006534:	697b      	ldr	r3, [r7, #20]
 8006536:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006538:	2b04      	cmp	r3, #4
 800653a:	d020      	beq.n	800657e <UART_SetConfig+0x1c6>
 800653c:	697b      	ldr	r3, [r7, #20]
 800653e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006540:	2b05      	cmp	r3, #5
 8006542:	d01c      	beq.n	800657e <UART_SetConfig+0x1c6>
 8006544:	697b      	ldr	r3, [r7, #20]
 8006546:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006548:	2b06      	cmp	r3, #6
 800654a:	d018      	beq.n	800657e <UART_SetConfig+0x1c6>
 800654c:	697b      	ldr	r3, [r7, #20]
 800654e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006550:	2b07      	cmp	r3, #7
 8006552:	d014      	beq.n	800657e <UART_SetConfig+0x1c6>
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006558:	2b08      	cmp	r3, #8
 800655a:	d010      	beq.n	800657e <UART_SetConfig+0x1c6>
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006560:	2b09      	cmp	r3, #9
 8006562:	d00c      	beq.n	800657e <UART_SetConfig+0x1c6>
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006568:	2b0a      	cmp	r3, #10
 800656a:	d008      	beq.n	800657e <UART_SetConfig+0x1c6>
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006570:	2b0b      	cmp	r3, #11
 8006572:	d004      	beq.n	800657e <UART_SetConfig+0x1c6>
 8006574:	f640 31d7 	movw	r1, #3031	@ 0xbd7
 8006578:	4858      	ldr	r0, [pc, #352]	@ (80066dc <UART_SetConfig+0x324>)
 800657a:	f7fb fcbf 	bl	8001efc <assert_failed>
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	689a      	ldr	r2, [r3, #8]
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	691b      	ldr	r3, [r3, #16]
 8006586:	431a      	orrs	r2, r3
 8006588:	697b      	ldr	r3, [r7, #20]
 800658a:	695b      	ldr	r3, [r3, #20]
 800658c:	431a      	orrs	r2, r3
 800658e:	697b      	ldr	r3, [r7, #20]
 8006590:	69db      	ldr	r3, [r3, #28]
 8006592:	4313      	orrs	r3, r2
 8006594:	62fb      	str	r3, [r7, #44]	@ 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006596:	697b      	ldr	r3, [r7, #20]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	4b50      	ldr	r3, [pc, #320]	@ (80066e0 <UART_SetConfig+0x328>)
 800659e:	4013      	ands	r3, r2
 80065a0:	697a      	ldr	r2, [r7, #20]
 80065a2:	6812      	ldr	r2, [r2, #0]
 80065a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065a6:	430b      	orrs	r3, r1
 80065a8:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80065aa:	697b      	ldr	r3, [r7, #20]
 80065ac:	681b      	ldr	r3, [r3, #0]
 80065ae:	685b      	ldr	r3, [r3, #4]
 80065b0:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80065b4:	697b      	ldr	r3, [r7, #20]
 80065b6:	68da      	ldr	r2, [r3, #12]
 80065b8:	697b      	ldr	r3, [r7, #20]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	430a      	orrs	r2, r1
 80065be:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	699b      	ldr	r3, [r3, #24]
 80065c4:	62fb      	str	r3, [r7, #44]	@ 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80065c6:	697b      	ldr	r3, [r7, #20]
 80065c8:	681b      	ldr	r3, [r3, #0]
 80065ca:	4a46      	ldr	r2, [pc, #280]	@ (80066e4 <UART_SetConfig+0x32c>)
 80065cc:	4293      	cmp	r3, r2
 80065ce:	d004      	beq.n	80065da <UART_SetConfig+0x222>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80065d0:	697b      	ldr	r3, [r7, #20]
 80065d2:	6a1b      	ldr	r3, [r3, #32]
 80065d4:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065d6:	4313      	orrs	r3, r2
 80065d8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	689b      	ldr	r3, [r3, #8]
 80065e0:	f023 436e 	bic.w	r3, r3, #3992977408	@ 0xee000000
 80065e4:	f423 6330 	bic.w	r3, r3, #2816	@ 0xb00
 80065e8:	697a      	ldr	r2, [r7, #20]
 80065ea:	6812      	ldr	r2, [r2, #0]
 80065ec:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80065ee:	430b      	orrs	r3, r1
 80065f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80065f2:	697b      	ldr	r3, [r7, #20]
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065f8:	f023 010f 	bic.w	r1, r3, #15
 80065fc:	697b      	ldr	r3, [r7, #20]
 80065fe:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	430a      	orrs	r2, r1
 8006606:	62da      	str	r2, [r3, #44]	@ 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006608:	697b      	ldr	r3, [r7, #20]
 800660a:	681b      	ldr	r3, [r3, #0]
 800660c:	4a36      	ldr	r2, [pc, #216]	@ (80066e8 <UART_SetConfig+0x330>)
 800660e:	4293      	cmp	r3, r2
 8006610:	d126      	bne.n	8006660 <UART_SetConfig+0x2a8>
 8006612:	4b36      	ldr	r3, [pc, #216]	@ (80066ec <UART_SetConfig+0x334>)
 8006614:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006618:	f003 0303 	and.w	r3, r3, #3
 800661c:	2b03      	cmp	r3, #3
 800661e:	d81b      	bhi.n	8006658 <UART_SetConfig+0x2a0>
 8006620:	a201      	add	r2, pc, #4	@ (adr r2, 8006628 <UART_SetConfig+0x270>)
 8006622:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006626:	bf00      	nop
 8006628:	08006639 	.word	0x08006639
 800662c:	08006649 	.word	0x08006649
 8006630:	08006641 	.word	0x08006641
 8006634:	08006651 	.word	0x08006651
 8006638:	2301      	movs	r3, #1
 800663a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800663e:	e0e2      	b.n	8006806 <UART_SetConfig+0x44e>
 8006640:	2302      	movs	r3, #2
 8006642:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006646:	e0de      	b.n	8006806 <UART_SetConfig+0x44e>
 8006648:	2304      	movs	r3, #4
 800664a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800664e:	e0da      	b.n	8006806 <UART_SetConfig+0x44e>
 8006650:	2308      	movs	r3, #8
 8006652:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006656:	e0d6      	b.n	8006806 <UART_SetConfig+0x44e>
 8006658:	2310      	movs	r3, #16
 800665a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800665e:	e0d2      	b.n	8006806 <UART_SetConfig+0x44e>
 8006660:	697b      	ldr	r3, [r7, #20]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	4a22      	ldr	r2, [pc, #136]	@ (80066f0 <UART_SetConfig+0x338>)
 8006666:	4293      	cmp	r3, r2
 8006668:	d144      	bne.n	80066f4 <UART_SetConfig+0x33c>
 800666a:	4b20      	ldr	r3, [pc, #128]	@ (80066ec <UART_SetConfig+0x334>)
 800666c:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006670:	f003 030c 	and.w	r3, r3, #12
 8006674:	2b0c      	cmp	r3, #12
 8006676:	d82d      	bhi.n	80066d4 <UART_SetConfig+0x31c>
 8006678:	a201      	add	r2, pc, #4	@ (adr r2, 8006680 <UART_SetConfig+0x2c8>)
 800667a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800667e:	bf00      	nop
 8006680:	080066b5 	.word	0x080066b5
 8006684:	080066d5 	.word	0x080066d5
 8006688:	080066d5 	.word	0x080066d5
 800668c:	080066d5 	.word	0x080066d5
 8006690:	080066c5 	.word	0x080066c5
 8006694:	080066d5 	.word	0x080066d5
 8006698:	080066d5 	.word	0x080066d5
 800669c:	080066d5 	.word	0x080066d5
 80066a0:	080066bd 	.word	0x080066bd
 80066a4:	080066d5 	.word	0x080066d5
 80066a8:	080066d5 	.word	0x080066d5
 80066ac:	080066d5 	.word	0x080066d5
 80066b0:	080066cd 	.word	0x080066cd
 80066b4:	2300      	movs	r3, #0
 80066b6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ba:	e0a4      	b.n	8006806 <UART_SetConfig+0x44e>
 80066bc:	2302      	movs	r3, #2
 80066be:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066c2:	e0a0      	b.n	8006806 <UART_SetConfig+0x44e>
 80066c4:	2304      	movs	r3, #4
 80066c6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066ca:	e09c      	b.n	8006806 <UART_SetConfig+0x44e>
 80066cc:	2308      	movs	r3, #8
 80066ce:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066d2:	e098      	b.n	8006806 <UART_SetConfig+0x44e>
 80066d4:	2310      	movs	r3, #16
 80066d6:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80066da:	e094      	b.n	8006806 <UART_SetConfig+0x44e>
 80066dc:	0800ae40 	.word	0x0800ae40
 80066e0:	cfff69f3 	.word	0xcfff69f3
 80066e4:	40008000 	.word	0x40008000
 80066e8:	40013800 	.word	0x40013800
 80066ec:	40021000 	.word	0x40021000
 80066f0:	40004400 	.word	0x40004400
 80066f4:	697b      	ldr	r3, [r7, #20]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	4aaa      	ldr	r2, [pc, #680]	@ (80069a4 <UART_SetConfig+0x5ec>)
 80066fa:	4293      	cmp	r3, r2
 80066fc:	d125      	bne.n	800674a <UART_SetConfig+0x392>
 80066fe:	4baa      	ldr	r3, [pc, #680]	@ (80069a8 <UART_SetConfig+0x5f0>)
 8006700:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8006704:	f003 0330 	and.w	r3, r3, #48	@ 0x30
 8006708:	2b30      	cmp	r3, #48	@ 0x30
 800670a:	d016      	beq.n	800673a <UART_SetConfig+0x382>
 800670c:	2b30      	cmp	r3, #48	@ 0x30
 800670e:	d818      	bhi.n	8006742 <UART_SetConfig+0x38a>
 8006710:	2b20      	cmp	r3, #32
 8006712:	d00a      	beq.n	800672a <UART_SetConfig+0x372>
 8006714:	2b20      	cmp	r3, #32
 8006716:	d814      	bhi.n	8006742 <UART_SetConfig+0x38a>
 8006718:	2b00      	cmp	r3, #0
 800671a:	d002      	beq.n	8006722 <UART_SetConfig+0x36a>
 800671c:	2b10      	cmp	r3, #16
 800671e:	d008      	beq.n	8006732 <UART_SetConfig+0x37a>
 8006720:	e00f      	b.n	8006742 <UART_SetConfig+0x38a>
 8006722:	2300      	movs	r3, #0
 8006724:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006728:	e06d      	b.n	8006806 <UART_SetConfig+0x44e>
 800672a:	2302      	movs	r3, #2
 800672c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006730:	e069      	b.n	8006806 <UART_SetConfig+0x44e>
 8006732:	2304      	movs	r3, #4
 8006734:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006738:	e065      	b.n	8006806 <UART_SetConfig+0x44e>
 800673a:	2308      	movs	r3, #8
 800673c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006740:	e061      	b.n	8006806 <UART_SetConfig+0x44e>
 8006742:	2310      	movs	r3, #16
 8006744:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006748:	e05d      	b.n	8006806 <UART_SetConfig+0x44e>
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	681b      	ldr	r3, [r3, #0]
 800674e:	4a97      	ldr	r2, [pc, #604]	@ (80069ac <UART_SetConfig+0x5f4>)
 8006750:	4293      	cmp	r3, r2
 8006752:	d125      	bne.n	80067a0 <UART_SetConfig+0x3e8>
 8006754:	4b94      	ldr	r3, [pc, #592]	@ (80069a8 <UART_SetConfig+0x5f0>)
 8006756:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800675a:	f003 03c0 	and.w	r3, r3, #192	@ 0xc0
 800675e:	2bc0      	cmp	r3, #192	@ 0xc0
 8006760:	d016      	beq.n	8006790 <UART_SetConfig+0x3d8>
 8006762:	2bc0      	cmp	r3, #192	@ 0xc0
 8006764:	d818      	bhi.n	8006798 <UART_SetConfig+0x3e0>
 8006766:	2b80      	cmp	r3, #128	@ 0x80
 8006768:	d00a      	beq.n	8006780 <UART_SetConfig+0x3c8>
 800676a:	2b80      	cmp	r3, #128	@ 0x80
 800676c:	d814      	bhi.n	8006798 <UART_SetConfig+0x3e0>
 800676e:	2b00      	cmp	r3, #0
 8006770:	d002      	beq.n	8006778 <UART_SetConfig+0x3c0>
 8006772:	2b40      	cmp	r3, #64	@ 0x40
 8006774:	d008      	beq.n	8006788 <UART_SetConfig+0x3d0>
 8006776:	e00f      	b.n	8006798 <UART_SetConfig+0x3e0>
 8006778:	2300      	movs	r3, #0
 800677a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800677e:	e042      	b.n	8006806 <UART_SetConfig+0x44e>
 8006780:	2302      	movs	r3, #2
 8006782:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006786:	e03e      	b.n	8006806 <UART_SetConfig+0x44e>
 8006788:	2304      	movs	r3, #4
 800678a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800678e:	e03a      	b.n	8006806 <UART_SetConfig+0x44e>
 8006790:	2308      	movs	r3, #8
 8006792:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 8006796:	e036      	b.n	8006806 <UART_SetConfig+0x44e>
 8006798:	2310      	movs	r3, #16
 800679a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 800679e:	e032      	b.n	8006806 <UART_SetConfig+0x44e>
 80067a0:	697b      	ldr	r3, [r7, #20]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a82      	ldr	r2, [pc, #520]	@ (80069b0 <UART_SetConfig+0x5f8>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d12a      	bne.n	8006800 <UART_SetConfig+0x448>
 80067aa:	4b7f      	ldr	r3, [pc, #508]	@ (80069a8 <UART_SetConfig+0x5f0>)
 80067ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80067b0:	f403 6340 	and.w	r3, r3, #3072	@ 0xc00
 80067b4:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067b8:	d01a      	beq.n	80067f0 <UART_SetConfig+0x438>
 80067ba:	f5b3 6f40 	cmp.w	r3, #3072	@ 0xc00
 80067be:	d81b      	bhi.n	80067f8 <UART_SetConfig+0x440>
 80067c0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067c4:	d00c      	beq.n	80067e0 <UART_SetConfig+0x428>
 80067c6:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80067ca:	d815      	bhi.n	80067f8 <UART_SetConfig+0x440>
 80067cc:	2b00      	cmp	r3, #0
 80067ce:	d003      	beq.n	80067d8 <UART_SetConfig+0x420>
 80067d0:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80067d4:	d008      	beq.n	80067e8 <UART_SetConfig+0x430>
 80067d6:	e00f      	b.n	80067f8 <UART_SetConfig+0x440>
 80067d8:	2300      	movs	r3, #0
 80067da:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067de:	e012      	b.n	8006806 <UART_SetConfig+0x44e>
 80067e0:	2302      	movs	r3, #2
 80067e2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067e6:	e00e      	b.n	8006806 <UART_SetConfig+0x44e>
 80067e8:	2304      	movs	r3, #4
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067ee:	e00a      	b.n	8006806 <UART_SetConfig+0x44e>
 80067f0:	2308      	movs	r3, #8
 80067f2:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067f6:	e006      	b.n	8006806 <UART_SetConfig+0x44e>
 80067f8:	2310      	movs	r3, #16
 80067fa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80067fe:	e002      	b.n	8006806 <UART_SetConfig+0x44e>
 8006800:	2310      	movs	r3, #16
 8006802:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 8006806:	697b      	ldr	r3, [r7, #20]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	4a69      	ldr	r2, [pc, #420]	@ (80069b0 <UART_SetConfig+0x5f8>)
 800680c:	4293      	cmp	r3, r2
 800680e:	f040 8097 	bne.w	8006940 <UART_SetConfig+0x588>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8006812:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006816:	2b08      	cmp	r3, #8
 8006818:	d823      	bhi.n	8006862 <UART_SetConfig+0x4aa>
 800681a:	a201      	add	r2, pc, #4	@ (adr r2, 8006820 <UART_SetConfig+0x468>)
 800681c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006820:	08006845 	.word	0x08006845
 8006824:	08006863 	.word	0x08006863
 8006828:	0800684d 	.word	0x0800684d
 800682c:	08006863 	.word	0x08006863
 8006830:	08006853 	.word	0x08006853
 8006834:	08006863 	.word	0x08006863
 8006838:	08006863 	.word	0x08006863
 800683c:	08006863 	.word	0x08006863
 8006840:	0800685b 	.word	0x0800685b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006844:	f7fe f89e 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006848:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800684a:	e010      	b.n	800686e <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800684c:	4b59      	ldr	r3, [pc, #356]	@ (80069b4 <UART_SetConfig+0x5fc>)
 800684e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006850:	e00d      	b.n	800686e <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006852:	f7fe f829 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006856:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006858:	e009      	b.n	800686e <UART_SetConfig+0x4b6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800685a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800685e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006860:	e005      	b.n	800686e <UART_SetConfig+0x4b6>
      default:
        pclk = 0U;
 8006862:	2300      	movs	r3, #0
 8006864:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006866:	2301      	movs	r3, #1
 8006868:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 800686c:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 800686e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006870:	2b00      	cmp	r3, #0
 8006872:	f000 8135 	beq.w	8006ae0 <UART_SetConfig+0x728>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8006876:	697b      	ldr	r3, [r7, #20]
 8006878:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800687a:	4a4f      	ldr	r2, [pc, #316]	@ (80069b8 <UART_SetConfig+0x600>)
 800687c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006880:	461a      	mov	r2, r3
 8006882:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006884:	fbb3 f3f2 	udiv	r3, r3, r2
 8006888:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800688a:	697b      	ldr	r3, [r7, #20]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	4613      	mov	r3, r2
 8006890:	005b      	lsls	r3, r3, #1
 8006892:	4413      	add	r3, r2
 8006894:	69ba      	ldr	r2, [r7, #24]
 8006896:	429a      	cmp	r2, r3
 8006898:	d305      	bcc.n	80068a6 <UART_SetConfig+0x4ee>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800689a:	697b      	ldr	r3, [r7, #20]
 800689c:	685b      	ldr	r3, [r3, #4]
 800689e:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80068a0:	69ba      	ldr	r2, [r7, #24]
 80068a2:	429a      	cmp	r2, r3
 80068a4:	d903      	bls.n	80068ae <UART_SetConfig+0x4f6>
      {
        ret = HAL_ERROR;
 80068a6:	2301      	movs	r3, #1
 80068a8:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 80068ac:	e118      	b.n	8006ae0 <UART_SetConfig+0x728>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80068ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80068b0:	2200      	movs	r2, #0
 80068b2:	60bb      	str	r3, [r7, #8]
 80068b4:	60fa      	str	r2, [r7, #12]
 80068b6:	697b      	ldr	r3, [r7, #20]
 80068b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80068ba:	4a3f      	ldr	r2, [pc, #252]	@ (80069b8 <UART_SetConfig+0x600>)
 80068bc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068c0:	b29b      	uxth	r3, r3
 80068c2:	2200      	movs	r2, #0
 80068c4:	603b      	str	r3, [r7, #0]
 80068c6:	607a      	str	r2, [r7, #4]
 80068c8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068d0:	f7f9 fd0e 	bl	80002f0 <__aeabi_uldivmod>
 80068d4:	4602      	mov	r2, r0
 80068d6:	460b      	mov	r3, r1
 80068d8:	4610      	mov	r0, r2
 80068da:	4619      	mov	r1, r3
 80068dc:	f04f 0200 	mov.w	r2, #0
 80068e0:	f04f 0300 	mov.w	r3, #0
 80068e4:	020b      	lsls	r3, r1, #8
 80068e6:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068ea:	0202      	lsls	r2, r0, #8
 80068ec:	6979      	ldr	r1, [r7, #20]
 80068ee:	6849      	ldr	r1, [r1, #4]
 80068f0:	0849      	lsrs	r1, r1, #1
 80068f2:	2000      	movs	r0, #0
 80068f4:	460c      	mov	r4, r1
 80068f6:	4605      	mov	r5, r0
 80068f8:	eb12 0804 	adds.w	r8, r2, r4
 80068fc:	eb43 0905 	adc.w	r9, r3, r5
 8006900:	697b      	ldr	r3, [r7, #20]
 8006902:	685b      	ldr	r3, [r3, #4]
 8006904:	2200      	movs	r2, #0
 8006906:	469a      	mov	sl, r3
 8006908:	4693      	mov	fp, r2
 800690a:	4652      	mov	r2, sl
 800690c:	465b      	mov	r3, fp
 800690e:	4640      	mov	r0, r8
 8006910:	4649      	mov	r1, r9
 8006912:	f7f9 fced 	bl	80002f0 <__aeabi_uldivmod>
 8006916:	4602      	mov	r2, r0
 8006918:	460b      	mov	r3, r1
 800691a:	4613      	mov	r3, r2
 800691c:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 800691e:	6a3b      	ldr	r3, [r7, #32]
 8006920:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8006924:	d308      	bcc.n	8006938 <UART_SetConfig+0x580>
 8006926:	6a3b      	ldr	r3, [r7, #32]
 8006928:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 800692c:	d204      	bcs.n	8006938 <UART_SetConfig+0x580>
        {
          huart->Instance->BRR = usartdiv;
 800692e:	697b      	ldr	r3, [r7, #20]
 8006930:	681b      	ldr	r3, [r3, #0]
 8006932:	6a3a      	ldr	r2, [r7, #32]
 8006934:	60da      	str	r2, [r3, #12]
 8006936:	e0d3      	b.n	8006ae0 <UART_SetConfig+0x728>
        }
        else
        {
          ret = HAL_ERROR;
 8006938:	2301      	movs	r3, #1
 800693a:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 800693e:	e0cf      	b.n	8006ae0 <UART_SetConfig+0x728>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	69db      	ldr	r3, [r3, #28]
 8006944:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006948:	d173      	bne.n	8006a32 <UART_SetConfig+0x67a>
  {
    switch (clocksource)
 800694a:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 800694e:	2b08      	cmp	r3, #8
 8006950:	d834      	bhi.n	80069bc <UART_SetConfig+0x604>
 8006952:	a201      	add	r2, pc, #4	@ (adr r2, 8006958 <UART_SetConfig+0x5a0>)
 8006954:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006958:	0800697d 	.word	0x0800697d
 800695c:	08006985 	.word	0x08006985
 8006960:	0800698d 	.word	0x0800698d
 8006964:	080069bd 	.word	0x080069bd
 8006968:	08006993 	.word	0x08006993
 800696c:	080069bd 	.word	0x080069bd
 8006970:	080069bd 	.word	0x080069bd
 8006974:	080069bd 	.word	0x080069bd
 8006978:	0800699b 	.word	0x0800699b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800697c:	f7fe f802 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006980:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006982:	e021      	b.n	80069c8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006984:	f7fe f814 	bl	80049b0 <HAL_RCC_GetPCLK2Freq>
 8006988:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 800698a:	e01d      	b.n	80069c8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800698c:	4b09      	ldr	r3, [pc, #36]	@ (80069b4 <UART_SetConfig+0x5fc>)
 800698e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006990:	e01a      	b.n	80069c8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006992:	f7fd ff89 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006996:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006998:	e016      	b.n	80069c8 <UART_SetConfig+0x610>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800699a:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 800699e:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 80069a0:	e012      	b.n	80069c8 <UART_SetConfig+0x610>
 80069a2:	bf00      	nop
 80069a4:	40004800 	.word	0x40004800
 80069a8:	40021000 	.word	0x40021000
 80069ac:	40004c00 	.word	0x40004c00
 80069b0:	40008000 	.word	0x40008000
 80069b4:	00f42400 	.word	0x00f42400
 80069b8:	0800b474 	.word	0x0800b474
      default:
        pclk = 0U;
 80069bc:	2300      	movs	r3, #0
 80069be:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 80069c0:	2301      	movs	r3, #1
 80069c2:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 80069c6:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80069c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069ca:	2b00      	cmp	r3, #0
 80069cc:	f000 8088 	beq.w	8006ae0 <UART_SetConfig+0x728>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80069d0:	697b      	ldr	r3, [r7, #20]
 80069d2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80069d4:	4a4d      	ldr	r2, [pc, #308]	@ (8006b0c <UART_SetConfig+0x754>)
 80069d6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069da:	461a      	mov	r2, r3
 80069dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80069de:	fbb3 f3f2 	udiv	r3, r3, r2
 80069e2:	005a      	lsls	r2, r3, #1
 80069e4:	697b      	ldr	r3, [r7, #20]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	085b      	lsrs	r3, r3, #1
 80069ea:	441a      	add	r2, r3
 80069ec:	697b      	ldr	r3, [r7, #20]
 80069ee:	685b      	ldr	r3, [r3, #4]
 80069f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f4:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069f6:	6a3b      	ldr	r3, [r7, #32]
 80069f8:	2b0f      	cmp	r3, #15
 80069fa:	d916      	bls.n	8006a2a <UART_SetConfig+0x672>
 80069fc:	6a3b      	ldr	r3, [r7, #32]
 80069fe:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006a02:	d212      	bcs.n	8006a2a <UART_SetConfig+0x672>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006a04:	6a3b      	ldr	r3, [r7, #32]
 8006a06:	b29b      	uxth	r3, r3
 8006a08:	f023 030f 	bic.w	r3, r3, #15
 8006a0c:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006a0e:	6a3b      	ldr	r3, [r7, #32]
 8006a10:	085b      	lsrs	r3, r3, #1
 8006a12:	b29b      	uxth	r3, r3
 8006a14:	f003 0307 	and.w	r3, r3, #7
 8006a18:	b29a      	uxth	r2, r3
 8006a1a:	8bfb      	ldrh	r3, [r7, #30]
 8006a1c:	4313      	orrs	r3, r2
 8006a1e:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8006a20:	697b      	ldr	r3, [r7, #20]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	8bfa      	ldrh	r2, [r7, #30]
 8006a26:	60da      	str	r2, [r3, #12]
 8006a28:	e05a      	b.n	8006ae0 <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
 8006a30:	e056      	b.n	8006ae0 <UART_SetConfig+0x728>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a32:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8006a36:	2b08      	cmp	r3, #8
 8006a38:	d827      	bhi.n	8006a8a <UART_SetConfig+0x6d2>
 8006a3a:	a201      	add	r2, pc, #4	@ (adr r2, 8006a40 <UART_SetConfig+0x688>)
 8006a3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a40:	08006a65 	.word	0x08006a65
 8006a44:	08006a6d 	.word	0x08006a6d
 8006a48:	08006a75 	.word	0x08006a75
 8006a4c:	08006a8b 	.word	0x08006a8b
 8006a50:	08006a7b 	.word	0x08006a7b
 8006a54:	08006a8b 	.word	0x08006a8b
 8006a58:	08006a8b 	.word	0x08006a8b
 8006a5c:	08006a8b 	.word	0x08006a8b
 8006a60:	08006a83 	.word	0x08006a83
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a64:	f7fd ff8e 	bl	8004984 <HAL_RCC_GetPCLK1Freq>
 8006a68:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a6a:	e014      	b.n	8006a96 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a6c:	f7fd ffa0 	bl	80049b0 <HAL_RCC_GetPCLK2Freq>
 8006a70:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a72:	e010      	b.n	8006a96 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a74:	4b26      	ldr	r3, [pc, #152]	@ (8006b10 <UART_SetConfig+0x758>)
 8006a76:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a78:	e00d      	b.n	8006a96 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a7a:	f7fd ff15 	bl	80048a8 <HAL_RCC_GetSysClockFreq>
 8006a7e:	6278      	str	r0, [r7, #36]	@ 0x24
        break;
 8006a80:	e009      	b.n	8006a96 <UART_SetConfig+0x6de>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a82:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 8006a86:	627b      	str	r3, [r7, #36]	@ 0x24
        break;
 8006a88:	e005      	b.n	8006a96 <UART_SetConfig+0x6de>
      default:
        pclk = 0U;
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	627b      	str	r3, [r7, #36]	@ 0x24
        ret = HAL_ERROR;
 8006a8e:	2301      	movs	r3, #1
 8006a90:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
        break;
 8006a94:	bf00      	nop
    }

    if (pclk != 0U)
 8006a96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006a98:	2b00      	cmp	r3, #0
 8006a9a:	d021      	beq.n	8006ae0 <UART_SetConfig+0x728>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a9c:	697b      	ldr	r3, [r7, #20]
 8006a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006aa0:	4a1a      	ldr	r2, [pc, #104]	@ (8006b0c <UART_SetConfig+0x754>)
 8006aa2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006aa6:	461a      	mov	r2, r3
 8006aa8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006aaa:	fbb3 f2f2 	udiv	r2, r3, r2
 8006aae:	697b      	ldr	r3, [r7, #20]
 8006ab0:	685b      	ldr	r3, [r3, #4]
 8006ab2:	085b      	lsrs	r3, r3, #1
 8006ab4:	441a      	add	r2, r3
 8006ab6:	697b      	ldr	r3, [r7, #20]
 8006ab8:	685b      	ldr	r3, [r3, #4]
 8006aba:	fbb2 f3f3 	udiv	r3, r2, r3
 8006abe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006ac0:	6a3b      	ldr	r3, [r7, #32]
 8006ac2:	2b0f      	cmp	r3, #15
 8006ac4:	d909      	bls.n	8006ada <UART_SetConfig+0x722>
 8006ac6:	6a3b      	ldr	r3, [r7, #32]
 8006ac8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006acc:	d205      	bcs.n	8006ada <UART_SetConfig+0x722>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006ace:	6a3b      	ldr	r3, [r7, #32]
 8006ad0:	b29a      	uxth	r2, r3
 8006ad2:	697b      	ldr	r3, [r7, #20]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	60da      	str	r2, [r3, #12]
 8006ad8:	e002      	b.n	8006ae0 <UART_SetConfig+0x728>
      }
      else
      {
        ret = HAL_ERROR;
 8006ada:	2301      	movs	r3, #1
 8006adc:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006ae0:	697b      	ldr	r3, [r7, #20]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
  huart->NbRxDataToProcess = 1;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	2201      	movs	r2, #1
 8006aec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006af0:	697b      	ldr	r3, [r7, #20]
 8006af2:	2200      	movs	r2, #0
 8006af4:	675a      	str	r2, [r3, #116]	@ 0x74
  huart->TxISR = NULL;
 8006af6:	697b      	ldr	r3, [r7, #20]
 8006af8:	2200      	movs	r2, #0
 8006afa:	679a      	str	r2, [r3, #120]	@ 0x78

  return ret;
 8006afc:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
}
 8006b00:	4618      	mov	r0, r3
 8006b02:	3730      	adds	r7, #48	@ 0x30
 8006b04:	46bd      	mov	sp, r7
 8006b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006b0a:	bf00      	nop
 8006b0c:	0800b474 	.word	0x0800b474
 8006b10:	00f42400 	.word	0x00f42400

08006b14 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006b14:	b580      	push	{r7, lr}
 8006b16:	b082      	sub	sp, #8
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b20:	2bff      	cmp	r3, #255	@ 0xff
 8006b22:	d904      	bls.n	8006b2e <UART_AdvFeatureConfig+0x1a>
 8006b24:	f640 4198 	movw	r1, #3224	@ 0xc98
 8006b28:	488e      	ldr	r0, [pc, #568]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006b2a:	f7fb f9e7 	bl	8001efc <assert_failed>

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b32:	f003 0308 	and.w	r3, r3, #8
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d018      	beq.n	8006b6c <UART_AdvFeatureConfig+0x58>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b3e:	2b00      	cmp	r3, #0
 8006b40:	d009      	beq.n	8006b56 <UART_AdvFeatureConfig+0x42>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006b46:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006b4a:	d004      	beq.n	8006b56 <UART_AdvFeatureConfig+0x42>
 8006b4c:	f640 419d 	movw	r1, #3229	@ 0xc9d
 8006b50:	4884      	ldr	r0, [pc, #528]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006b52:	f7fb f9d3 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	685b      	ldr	r3, [r3, #4]
 8006b5c:	f423 4100 	bic.w	r1, r3, #32768	@ 0x8000
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	430a      	orrs	r2, r1
 8006b6a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b70:	f003 0301 	and.w	r3, r3, #1
 8006b74:	2b00      	cmp	r3, #0
 8006b76:	d018      	beq.n	8006baa <UART_AdvFeatureConfig+0x96>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b7c:	2b00      	cmp	r3, #0
 8006b7e:	d009      	beq.n	8006b94 <UART_AdvFeatureConfig+0x80>
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b84:	f5b3 3f00 	cmp.w	r3, #131072	@ 0x20000
 8006b88:	d004      	beq.n	8006b94 <UART_AdvFeatureConfig+0x80>
 8006b8a:	f640 41a4 	movw	r1, #3236	@ 0xca4
 8006b8e:	4875      	ldr	r0, [pc, #468]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006b90:	f7fb f9b4 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006b94:	687b      	ldr	r3, [r7, #4]
 8006b96:	681b      	ldr	r3, [r3, #0]
 8006b98:	685b      	ldr	r3, [r3, #4]
 8006b9a:	f423 3100 	bic.w	r1, r3, #131072	@ 0x20000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	681b      	ldr	r3, [r3, #0]
 8006ba6:	430a      	orrs	r2, r1
 8006ba8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bae:	f003 0302 	and.w	r3, r3, #2
 8006bb2:	2b00      	cmp	r3, #0
 8006bb4:	d018      	beq.n	8006be8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d009      	beq.n	8006bd2 <UART_AdvFeatureConfig+0xbe>
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006bc2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8006bc6:	d004      	beq.n	8006bd2 <UART_AdvFeatureConfig+0xbe>
 8006bc8:	f640 41ab 	movw	r1, #3243	@ 0xcab
 8006bcc:	4865      	ldr	r0, [pc, #404]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006bce:	f7fb f995 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	685b      	ldr	r3, [r3, #4]
 8006bd8:	f423 3180 	bic.w	r1, r3, #65536	@ 0x10000
 8006bdc:	687b      	ldr	r3, [r7, #4]
 8006bde:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	430a      	orrs	r2, r1
 8006be6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006bec:	f003 0304 	and.w	r3, r3, #4
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d018      	beq.n	8006c26 <UART_AdvFeatureConfig+0x112>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006bf8:	2b00      	cmp	r3, #0
 8006bfa:	d009      	beq.n	8006c10 <UART_AdvFeatureConfig+0xfc>
 8006bfc:	687b      	ldr	r3, [r7, #4]
 8006bfe:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8006c00:	f5b3 2f80 	cmp.w	r3, #262144	@ 0x40000
 8006c04:	d004      	beq.n	8006c10 <UART_AdvFeatureConfig+0xfc>
 8006c06:	f640 41b2 	movw	r1, #3250	@ 0xcb2
 8006c0a:	4856      	ldr	r0, [pc, #344]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006c0c:	f7fb f976 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	681b      	ldr	r3, [r3, #0]
 8006c14:	685b      	ldr	r3, [r3, #4]
 8006c16:	f423 2180 	bic.w	r1, r3, #262144	@ 0x40000
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	681b      	ldr	r3, [r3, #0]
 8006c22:	430a      	orrs	r2, r1
 8006c24:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c2a:	f003 0310 	and.w	r3, r3, #16
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d018      	beq.n	8006c64 <UART_AdvFeatureConfig+0x150>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c36:	2b00      	cmp	r3, #0
 8006c38:	d009      	beq.n	8006c4e <UART_AdvFeatureConfig+0x13a>
 8006c3a:	687b      	ldr	r3, [r7, #4]
 8006c3c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006c3e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006c42:	d004      	beq.n	8006c4e <UART_AdvFeatureConfig+0x13a>
 8006c44:	f640 41b9 	movw	r1, #3257	@ 0xcb9
 8006c48:	4846      	ldr	r0, [pc, #280]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006c4a:	f7fb f957 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	681b      	ldr	r3, [r3, #0]
 8006c52:	689b      	ldr	r3, [r3, #8]
 8006c54:	f423 5180 	bic.w	r1, r3, #4096	@ 0x1000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	430a      	orrs	r2, r1
 8006c62:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006c68:	f003 0320 	and.w	r3, r3, #32
 8006c6c:	2b00      	cmp	r3, #0
 8006c6e:	d018      	beq.n	8006ca2 <UART_AdvFeatureConfig+0x18e>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d009      	beq.n	8006c8c <UART_AdvFeatureConfig+0x178>
 8006c78:	687b      	ldr	r3, [r7, #4]
 8006c7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006c7c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8006c80:	d004      	beq.n	8006c8c <UART_AdvFeatureConfig+0x178>
 8006c82:	f44f 614c 	mov.w	r1, #3264	@ 0xcc0
 8006c86:	4837      	ldr	r0, [pc, #220]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006c88:	f7fb f938 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	689b      	ldr	r3, [r3, #8]
 8006c92:	f423 5100 	bic.w	r1, r3, #8192	@ 0x2000
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	681b      	ldr	r3, [r3, #0]
 8006c9e:	430a      	orrs	r2, r1
 8006ca0:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006ca6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006caa:	2b00      	cmp	r3, #0
 8006cac:	d064      	beq.n	8006d78 <UART_AdvFeatureConfig+0x264>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	4a2d      	ldr	r2, [pc, #180]	@ (8006d68 <UART_AdvFeatureConfig+0x254>)
 8006cb4:	4293      	cmp	r3, r2
 8006cb6:	d013      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x1cc>
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	4a2b      	ldr	r2, [pc, #172]	@ (8006d6c <UART_AdvFeatureConfig+0x258>)
 8006cbe:	4293      	cmp	r3, r2
 8006cc0:	d00e      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x1cc>
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	4a2a      	ldr	r2, [pc, #168]	@ (8006d70 <UART_AdvFeatureConfig+0x25c>)
 8006cc8:	4293      	cmp	r3, r2
 8006cca:	d009      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x1cc>
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	4a28      	ldr	r2, [pc, #160]	@ (8006d74 <UART_AdvFeatureConfig+0x260>)
 8006cd2:	4293      	cmp	r3, r2
 8006cd4:	d004      	beq.n	8006ce0 <UART_AdvFeatureConfig+0x1cc>
 8006cd6:	f640 41c7 	movw	r1, #3271	@ 0xcc7
 8006cda:	4822      	ldr	r0, [pc, #136]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006cdc:	f7fb f90e 	bl	8001efc <assert_failed>
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d009      	beq.n	8006cfc <UART_AdvFeatureConfig+0x1e8>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006cec:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006cf0:	d004      	beq.n	8006cfc <UART_AdvFeatureConfig+0x1e8>
 8006cf2:	f640 41c8 	movw	r1, #3272	@ 0xcc8
 8006cf6:	481b      	ldr	r0, [pc, #108]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006cf8:	f7fb f900 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	f423 1180 	bic.w	r1, r3, #1048576	@ 0x100000
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8006d0a:	687b      	ldr	r3, [r7, #4]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	430a      	orrs	r2, r1
 8006d10:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8006d16:	f5b3 1f80 	cmp.w	r3, #1048576	@ 0x100000
 8006d1a:	d12d      	bne.n	8006d78 <UART_AdvFeatureConfig+0x264>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d20:	2b00      	cmp	r3, #0
 8006d22:	d013      	beq.n	8006d4c <UART_AdvFeatureConfig+0x238>
 8006d24:	687b      	ldr	r3, [r7, #4]
 8006d26:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d28:	f5b3 1f00 	cmp.w	r3, #2097152	@ 0x200000
 8006d2c:	d00e      	beq.n	8006d4c <UART_AdvFeatureConfig+0x238>
 8006d2e:	687b      	ldr	r3, [r7, #4]
 8006d30:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d32:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8006d36:	d009      	beq.n	8006d4c <UART_AdvFeatureConfig+0x238>
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8006d3c:	f5b3 0fc0 	cmp.w	r3, #6291456	@ 0x600000
 8006d40:	d004      	beq.n	8006d4c <UART_AdvFeatureConfig+0x238>
 8006d42:	f640 41cd 	movw	r1, #3277	@ 0xccd
 8006d46:	4807      	ldr	r0, [pc, #28]	@ (8006d64 <UART_AdvFeatureConfig+0x250>)
 8006d48:	f7fb f8d8 	bl	8001efc <assert_failed>
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	685b      	ldr	r3, [r3, #4]
 8006d52:	f423 01c0 	bic.w	r1, r3, #6291456	@ 0x600000
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	430a      	orrs	r2, r1
 8006d60:	605a      	str	r2, [r3, #4]
 8006d62:	e009      	b.n	8006d78 <UART_AdvFeatureConfig+0x264>
 8006d64:	0800ae40 	.word	0x0800ae40
 8006d68:	40013800 	.word	0x40013800
 8006d6c:	40004400 	.word	0x40004400
 8006d70:	40004800 	.word	0x40004800
 8006d74:	40004c00 	.word	0x40004c00
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d018      	beq.n	8006db6 <UART_AdvFeatureConfig+0x2a2>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d88:	2b00      	cmp	r3, #0
 8006d8a:	d009      	beq.n	8006da0 <UART_AdvFeatureConfig+0x28c>
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006d90:	f5b3 2f00 	cmp.w	r3, #524288	@ 0x80000
 8006d94:	d004      	beq.n	8006da0 <UART_AdvFeatureConfig+0x28c>
 8006d96:	f640 41d5 	movw	r1, #3285	@ 0xcd5
 8006d9a:	4809      	ldr	r0, [pc, #36]	@ (8006dc0 <UART_AdvFeatureConfig+0x2ac>)
 8006d9c:	f7fb f8ae 	bl	8001efc <assert_failed>
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	685b      	ldr	r3, [r3, #4]
 8006da6:	f423 2100 	bic.w	r1, r3, #524288	@ 0x80000
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	430a      	orrs	r2, r1
 8006db4:	605a      	str	r2, [r3, #4]
  }
}
 8006db6:	bf00      	nop
 8006db8:	3708      	adds	r7, #8
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	bd80      	pop	{r7, pc}
 8006dbe:	bf00      	nop
 8006dc0:	0800ae40 	.word	0x0800ae40

08006dc4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006dc4:	b580      	push	{r7, lr}
 8006dc6:	b098      	sub	sp, #96	@ 0x60
 8006dc8:	af02      	add	r7, sp, #8
 8006dca:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	2200      	movs	r2, #0
 8006dd0:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006dd4:	f7fb fb36 	bl	8002444 <HAL_GetTick>
 8006dd8:	6578      	str	r0, [r7, #84]	@ 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f003 0308 	and.w	r3, r3, #8
 8006de4:	2b08      	cmp	r3, #8
 8006de6:	d12f      	bne.n	8006e48 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006de8:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006dec:	9300      	str	r3, [sp, #0]
 8006dee:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006df0:	2200      	movs	r2, #0
 8006df2:	f44f 1100 	mov.w	r1, #2097152	@ 0x200000
 8006df6:	6878      	ldr	r0, [r7, #4]
 8006df8:	f000 f88e 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006dfc:	4603      	mov	r3, r0
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d022      	beq.n	8006e48 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8006e02:	687b      	ldr	r3, [r7, #4]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006e0a:	e853 3f00 	ldrex	r3, [r3]
 8006e0e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8006e10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006e12:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8006e16:	653b      	str	r3, [r7, #80]	@ 0x50
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	461a      	mov	r2, r3
 8006e1e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006e20:	647b      	str	r3, [r7, #68]	@ 0x44
 8006e22:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e24:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006e26:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006e28:	e841 2300 	strex	r3, r2, [r1]
 8006e2c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006e2e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d1e6      	bne.n	8006e02 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8006e34:	687b      	ldr	r3, [r7, #4]
 8006e36:	2220      	movs	r2, #32
 8006e38:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

      __HAL_UNLOCK(huart);
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006e44:	2303      	movs	r3, #3
 8006e46:	e063      	b.n	8006f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006e48:	687b      	ldr	r3, [r7, #4]
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	681b      	ldr	r3, [r3, #0]
 8006e4e:	f003 0304 	and.w	r3, r3, #4
 8006e52:	2b04      	cmp	r3, #4
 8006e54:	d149      	bne.n	8006eea <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006e56:	f06f 437e 	mvn.w	r3, #4261412864	@ 0xfe000000
 8006e5a:	9300      	str	r3, [sp, #0]
 8006e5c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8006e5e:	2200      	movs	r2, #0
 8006e60:	f44f 0180 	mov.w	r1, #4194304	@ 0x400000
 8006e64:	6878      	ldr	r0, [r7, #4]
 8006e66:	f000 f857 	bl	8006f18 <UART_WaitOnFlagUntilTimeout>
 8006e6a:	4603      	mov	r3, r0
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d03c      	beq.n	8006eea <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006e70:	687b      	ldr	r3, [r7, #4]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e76:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006e78:	e853 3f00 	ldrex	r3, [r3]
 8006e7c:	623b      	str	r3, [r7, #32]
   return(result);
 8006e7e:	6a3b      	ldr	r3, [r7, #32]
 8006e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006e84:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	681b      	ldr	r3, [r3, #0]
 8006e8a:	461a      	mov	r2, r3
 8006e8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8006e8e:	633b      	str	r3, [r7, #48]	@ 0x30
 8006e90:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e92:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006e94:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006e96:	e841 2300 	strex	r3, r2, [r1]
 8006e9a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006e9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006e9e:	2b00      	cmp	r3, #0
 8006ea0:	d1e6      	bne.n	8006e70 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	681b      	ldr	r3, [r3, #0]
 8006ea6:	3308      	adds	r3, #8
 8006ea8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eaa:	693b      	ldr	r3, [r7, #16]
 8006eac:	e853 3f00 	ldrex	r3, [r3]
 8006eb0:	60fb      	str	r3, [r7, #12]
   return(result);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f023 0301 	bic.w	r3, r3, #1
 8006eb8:	64bb      	str	r3, [r7, #72]	@ 0x48
 8006eba:	687b      	ldr	r3, [r7, #4]
 8006ebc:	681b      	ldr	r3, [r3, #0]
 8006ebe:	3308      	adds	r3, #8
 8006ec0:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8006ec2:	61fa      	str	r2, [r7, #28]
 8006ec4:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec6:	69b9      	ldr	r1, [r7, #24]
 8006ec8:	69fa      	ldr	r2, [r7, #28]
 8006eca:	e841 2300 	strex	r3, r2, [r1]
 8006ece:	617b      	str	r3, [r7, #20]
   return(result);
 8006ed0:	697b      	ldr	r3, [r7, #20]
 8006ed2:	2b00      	cmp	r3, #0
 8006ed4:	d1e5      	bne.n	8006ea2 <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	2220      	movs	r2, #32
 8006eda:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      __HAL_UNLOCK(huart);
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2200      	movs	r2, #0
 8006ee2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006ee6:	2303      	movs	r3, #3
 8006ee8:	e012      	b.n	8006f10 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006eea:	687b      	ldr	r3, [r7, #4]
 8006eec:	2220      	movs	r2, #32
 8006eee:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8006ef2:	687b      	ldr	r3, [r7, #4]
 8006ef4:	2220      	movs	r2, #32
 8006ef6:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006efa:	687b      	ldr	r3, [r7, #4]
 8006efc:	2200      	movs	r2, #0
 8006efe:	66da      	str	r2, [r3, #108]	@ 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006f00:	687b      	ldr	r3, [r7, #4]
 8006f02:	2200      	movs	r2, #0
 8006f04:	671a      	str	r2, [r3, #112]	@ 0x70

  __HAL_UNLOCK(huart);
 8006f06:	687b      	ldr	r3, [r7, #4]
 8006f08:	2200      	movs	r2, #0
 8006f0a:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8006f0e:	2300      	movs	r3, #0
}
 8006f10:	4618      	mov	r0, r3
 8006f12:	3758      	adds	r7, #88	@ 0x58
 8006f14:	46bd      	mov	sp, r7
 8006f16:	bd80      	pop	{r7, pc}

08006f18 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006f18:	b580      	push	{r7, lr}
 8006f1a:	b084      	sub	sp, #16
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	60f8      	str	r0, [r7, #12]
 8006f20:	60b9      	str	r1, [r7, #8]
 8006f22:	603b      	str	r3, [r7, #0]
 8006f24:	4613      	mov	r3, r2
 8006f26:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006f28:	e04f      	b.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006f2a:	69bb      	ldr	r3, [r7, #24]
 8006f2c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f30:	d04b      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006f32:	f7fb fa87 	bl	8002444 <HAL_GetTick>
 8006f36:	4602      	mov	r2, r0
 8006f38:	683b      	ldr	r3, [r7, #0]
 8006f3a:	1ad3      	subs	r3, r2, r3
 8006f3c:	69ba      	ldr	r2, [r7, #24]
 8006f3e:	429a      	cmp	r2, r3
 8006f40:	d302      	bcc.n	8006f48 <UART_WaitOnFlagUntilTimeout+0x30>
 8006f42:	69bb      	ldr	r3, [r7, #24]
 8006f44:	2b00      	cmp	r3, #0
 8006f46:	d101      	bne.n	8006f4c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006f48:	2303      	movs	r3, #3
 8006f4a:	e04e      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8006f4c:	68fb      	ldr	r3, [r7, #12]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	f003 0304 	and.w	r3, r3, #4
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d037      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	2b80      	cmp	r3, #128	@ 0x80
 8006f5e:	d034      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
 8006f60:	68bb      	ldr	r3, [r7, #8]
 8006f62:	2b40      	cmp	r3, #64	@ 0x40
 8006f64:	d031      	beq.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	681b      	ldr	r3, [r3, #0]
 8006f6a:	69db      	ldr	r3, [r3, #28]
 8006f6c:	f003 0308 	and.w	r3, r3, #8
 8006f70:	2b08      	cmp	r3, #8
 8006f72:	d110      	bne.n	8006f96 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	2208      	movs	r2, #8
 8006f7a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006f7c:	68f8      	ldr	r0, [r7, #12]
 8006f7e:	f000 f95b 	bl	8007238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8006f82:	68fb      	ldr	r3, [r7, #12]
 8006f84:	2208      	movs	r2, #8
 8006f86:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_ERROR;
 8006f92:	2301      	movs	r3, #1
 8006f94:	e029      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	69db      	ldr	r3, [r3, #28]
 8006f9c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8006fa0:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8006fa4:	d111      	bne.n	8006fca <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8006fae:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8006fb0:	68f8      	ldr	r0, [r7, #12]
 8006fb2:	f000 f941 	bl	8007238 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	2220      	movs	r2, #32
 8006fba:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	2200      	movs	r2, #0
 8006fc2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

          return HAL_TIMEOUT;
 8006fc6:	2303      	movs	r3, #3
 8006fc8:	e00f      	b.n	8006fea <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fca:	68fb      	ldr	r3, [r7, #12]
 8006fcc:	681b      	ldr	r3, [r3, #0]
 8006fce:	69da      	ldr	r2, [r3, #28]
 8006fd0:	68bb      	ldr	r3, [r7, #8]
 8006fd2:	4013      	ands	r3, r2
 8006fd4:	68ba      	ldr	r2, [r7, #8]
 8006fd6:	429a      	cmp	r2, r3
 8006fd8:	bf0c      	ite	eq
 8006fda:	2301      	moveq	r3, #1
 8006fdc:	2300      	movne	r3, #0
 8006fde:	b2db      	uxtb	r3, r3
 8006fe0:	461a      	mov	r2, r3
 8006fe2:	79fb      	ldrb	r3, [r7, #7]
 8006fe4:	429a      	cmp	r2, r3
 8006fe6:	d0a0      	beq.n	8006f2a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006fe8:	2300      	movs	r3, #0
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b0a3      	sub	sp, #140	@ 0x8c
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	4613      	mov	r3, r2
 8007000:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8007002:	68fb      	ldr	r3, [r7, #12]
 8007004:	68ba      	ldr	r2, [r7, #8]
 8007006:	659a      	str	r2, [r3, #88]	@ 0x58
  huart->RxXferSize  = Size;
 8007008:	68fb      	ldr	r3, [r7, #12]
 800700a:	88fa      	ldrh	r2, [r7, #6]
 800700c:	f8a3 205c 	strh.w	r2, [r3, #92]	@ 0x5c
  huart->RxXferCount = Size;
 8007010:	68fb      	ldr	r3, [r7, #12]
 8007012:	88fa      	ldrh	r2, [r7, #6]
 8007014:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->RxISR       = NULL;
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	2200      	movs	r2, #0
 800701c:	675a      	str	r2, [r3, #116]	@ 0x74

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	689b      	ldr	r3, [r3, #8]
 8007022:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007026:	d10e      	bne.n	8007046 <UART_Start_Receive_IT+0x52>
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	691b      	ldr	r3, [r3, #16]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d105      	bne.n	800703c <UART_Start_Receive_IT+0x48>
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	f240 12ff 	movw	r2, #511	@ 0x1ff
 8007036:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800703a:	e02d      	b.n	8007098 <UART_Start_Receive_IT+0xa4>
 800703c:	68fb      	ldr	r3, [r7, #12]
 800703e:	22ff      	movs	r2, #255	@ 0xff
 8007040:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007044:	e028      	b.n	8007098 <UART_Start_Receive_IT+0xa4>
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	689b      	ldr	r3, [r3, #8]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d10d      	bne.n	800706a <UART_Start_Receive_IT+0x76>
 800704e:	68fb      	ldr	r3, [r7, #12]
 8007050:	691b      	ldr	r3, [r3, #16]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d104      	bne.n	8007060 <UART_Start_Receive_IT+0x6c>
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	22ff      	movs	r2, #255	@ 0xff
 800705a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800705e:	e01b      	b.n	8007098 <UART_Start_Receive_IT+0xa4>
 8007060:	68fb      	ldr	r3, [r7, #12]
 8007062:	227f      	movs	r2, #127	@ 0x7f
 8007064:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007068:	e016      	b.n	8007098 <UART_Start_Receive_IT+0xa4>
 800706a:	68fb      	ldr	r3, [r7, #12]
 800706c:	689b      	ldr	r3, [r3, #8]
 800706e:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007072:	d10d      	bne.n	8007090 <UART_Start_Receive_IT+0x9c>
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	691b      	ldr	r3, [r3, #16]
 8007078:	2b00      	cmp	r3, #0
 800707a:	d104      	bne.n	8007086 <UART_Start_Receive_IT+0x92>
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	227f      	movs	r2, #127	@ 0x7f
 8007080:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 8007084:	e008      	b.n	8007098 <UART_Start_Receive_IT+0xa4>
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	223f      	movs	r2, #63	@ 0x3f
 800708a:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60
 800708e:	e003      	b.n	8007098 <UART_Start_Receive_IT+0xa4>
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	2200      	movs	r2, #0
 8007094:	f8a3 2060 	strh.w	r2, [r3, #96]	@ 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	2200      	movs	r2, #0
 800709c:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070a0:	68fb      	ldr	r3, [r7, #12]
 80070a2:	2222      	movs	r2, #34	@ 0x22
 80070a4:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	681b      	ldr	r3, [r3, #0]
 80070ac:	3308      	adds	r3, #8
 80070ae:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80070b2:	e853 3f00 	ldrex	r3, [r3]
 80070b6:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80070b8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80070ba:	f043 0301 	orr.w	r3, r3, #1
 80070be:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	3308      	adds	r3, #8
 80070c8:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80070cc:	673a      	str	r2, [r7, #112]	@ 0x70
 80070ce:	66fb      	str	r3, [r7, #108]	@ 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d0:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 80070d2:	6f3a      	ldr	r2, [r7, #112]	@ 0x70
 80070d4:	e841 2300 	strex	r3, r2, [r1]
 80070d8:	66bb      	str	r3, [r7, #104]	@ 0x68
   return(result);
 80070da:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80070dc:	2b00      	cmp	r3, #0
 80070de:	d1e3      	bne.n	80070a8 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80070e4:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 80070e8:	d14f      	bne.n	800718a <UART_Start_Receive_IT+0x196>
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80070f0:	88fa      	ldrh	r2, [r7, #6]
 80070f2:	429a      	cmp	r2, r3
 80070f4:	d349      	bcc.n	800718a <UART_Start_Receive_IT+0x196>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	689b      	ldr	r3, [r3, #8]
 80070fa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80070fe:	d107      	bne.n	8007110 <UART_Start_Receive_IT+0x11c>
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	691b      	ldr	r3, [r3, #16]
 8007104:	2b00      	cmp	r3, #0
 8007106:	d103      	bne.n	8007110 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8007108:	68fb      	ldr	r3, [r7, #12]
 800710a:	4a47      	ldr	r2, [pc, #284]	@ (8007228 <UART_Start_Receive_IT+0x234>)
 800710c:	675a      	str	r2, [r3, #116]	@ 0x74
 800710e:	e002      	b.n	8007116 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8007110:	68fb      	ldr	r3, [r7, #12]
 8007112:	4a46      	ldr	r2, [pc, #280]	@ (800722c <UART_Start_Receive_IT+0x238>)
 8007114:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8007116:	68fb      	ldr	r3, [r7, #12]
 8007118:	691b      	ldr	r3, [r3, #16]
 800711a:	2b00      	cmp	r3, #0
 800711c:	d01a      	beq.n	8007154 <UART_Start_Receive_IT+0x160>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	653b      	str	r3, [r7, #80]	@ 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007124:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007126:	e853 3f00 	ldrex	r3, [r3]
 800712a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 800712c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800712e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8007132:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	681b      	ldr	r3, [r3, #0]
 800713a:	461a      	mov	r2, r3
 800713c:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007140:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007142:	65ba      	str	r2, [r7, #88]	@ 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6db9      	ldr	r1, [r7, #88]	@ 0x58
 8007146:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	657b      	str	r3, [r7, #84]	@ 0x54
   return(result);
 800714e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e4      	bne.n	800711e <UART_Start_Receive_IT+0x12a>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007154:	68fb      	ldr	r3, [r7, #12]
 8007156:	681b      	ldr	r3, [r3, #0]
 8007158:	3308      	adds	r3, #8
 800715a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800715c:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800715e:	e853 3f00 	ldrex	r3, [r3]
 8007162:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007164:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007166:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800716a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800716c:	68fb      	ldr	r3, [r7, #12]
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	3308      	adds	r3, #8
 8007172:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007174:	64ba      	str	r2, [r7, #72]	@ 0x48
 8007176:	647b      	str	r3, [r7, #68]	@ 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007178:	6c79      	ldr	r1, [r7, #68]	@ 0x44
 800717a:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800717c:	e841 2300 	strex	r3, r2, [r1]
 8007180:	643b      	str	r3, [r7, #64]	@ 0x40
   return(result);
 8007182:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8007184:	2b00      	cmp	r3, #0
 8007186:	d1e5      	bne.n	8007154 <UART_Start_Receive_IT+0x160>
 8007188:	e046      	b.n	8007218 <UART_Start_Receive_IT+0x224>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8007192:	d107      	bne.n	80071a4 <UART_Start_Receive_IT+0x1b0>
 8007194:	68fb      	ldr	r3, [r7, #12]
 8007196:	691b      	ldr	r3, [r3, #16]
 8007198:	2b00      	cmp	r3, #0
 800719a:	d103      	bne.n	80071a4 <UART_Start_Receive_IT+0x1b0>
    {
      huart->RxISR = UART_RxISR_16BIT;
 800719c:	68fb      	ldr	r3, [r7, #12]
 800719e:	4a24      	ldr	r2, [pc, #144]	@ (8007230 <UART_Start_Receive_IT+0x23c>)
 80071a0:	675a      	str	r2, [r3, #116]	@ 0x74
 80071a2:	e002      	b.n	80071aa <UART_Start_Receive_IT+0x1b6>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	4a23      	ldr	r2, [pc, #140]	@ (8007234 <UART_Start_Receive_IT+0x240>)
 80071a8:	675a      	str	r2, [r3, #116]	@ 0x74
    }

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80071aa:	68fb      	ldr	r3, [r7, #12]
 80071ac:	691b      	ldr	r3, [r3, #16]
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d019      	beq.n	80071e6 <UART_Start_Receive_IT+0x1f2>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80071b2:	68fb      	ldr	r3, [r7, #12]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80071ba:	e853 3f00 	ldrex	r3, [r3]
 80071be:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80071c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80071c2:	f443 7390 	orr.w	r3, r3, #288	@ 0x120
 80071c6:	677b      	str	r3, [r7, #116]	@ 0x74
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	461a      	mov	r2, r3
 80071ce:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80071d0:	637b      	str	r3, [r7, #52]	@ 0x34
 80071d2:	633a      	str	r2, [r7, #48]	@ 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071d4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80071d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80071d8:	e841 2300 	strex	r3, r2, [r1]
 80071dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   return(result);
 80071de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d1e6      	bne.n	80071b2 <UART_Start_Receive_IT+0x1be>
 80071e4:	e018      	b.n	8007218 <UART_Start_Receive_IT+0x224>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ec:	697b      	ldr	r3, [r7, #20]
 80071ee:	e853 3f00 	ldrex	r3, [r3]
 80071f2:	613b      	str	r3, [r7, #16]
   return(result);
 80071f4:	693b      	ldr	r3, [r7, #16]
 80071f6:	f043 0320 	orr.w	r3, r3, #32
 80071fa:	67bb      	str	r3, [r7, #120]	@ 0x78
 80071fc:	68fb      	ldr	r3, [r7, #12]
 80071fe:	681b      	ldr	r3, [r3, #0]
 8007200:	461a      	mov	r2, r3
 8007202:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007204:	623b      	str	r3, [r7, #32]
 8007206:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007208:	69f9      	ldr	r1, [r7, #28]
 800720a:	6a3a      	ldr	r2, [r7, #32]
 800720c:	e841 2300 	strex	r3, r2, [r1]
 8007210:	61bb      	str	r3, [r7, #24]
   return(result);
 8007212:	69bb      	ldr	r3, [r7, #24]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d1e6      	bne.n	80071e6 <UART_Start_Receive_IT+0x1f2>
    }
  }
  return HAL_OK;
 8007218:	2300      	movs	r3, #0
}
 800721a:	4618      	mov	r0, r3
 800721c:	378c      	adds	r7, #140	@ 0x8c
 800721e:	46bd      	mov	sp, r7
 8007220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007224:	4770      	bx	lr
 8007226:	bf00      	nop
 8007228:	08007a59 	.word	0x08007a59
 800722c:	080076f9 	.word	0x080076f9
 8007230:	08007541 	.word	0x08007541
 8007234:	08007389 	.word	0x08007389

08007238 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007238:	b480      	push	{r7}
 800723a:	b095      	sub	sp, #84	@ 0x54
 800723c:	af00      	add	r7, sp, #0
 800723e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007246:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007248:	e853 3f00 	ldrex	r3, [r3]
 800724c:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800724e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8007250:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007254:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	681b      	ldr	r3, [r3, #0]
 800725a:	461a      	mov	r2, r3
 800725c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800725e:	643b      	str	r3, [r7, #64]	@ 0x40
 8007260:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007262:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007264:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007266:	e841 2300 	strex	r3, r2, [r1]
 800726a:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800726c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800726e:	2b00      	cmp	r3, #0
 8007270:	d1e6      	bne.n	8007240 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	3308      	adds	r3, #8
 8007278:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800727a:	6a3b      	ldr	r3, [r7, #32]
 800727c:	e853 3f00 	ldrex	r3, [r3]
 8007280:	61fb      	str	r3, [r7, #28]
   return(result);
 8007282:	69fb      	ldr	r3, [r7, #28]
 8007284:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007288:	f023 0301 	bic.w	r3, r3, #1
 800728c:	64bb      	str	r3, [r7, #72]	@ 0x48
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8007296:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8007298:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800729a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800729c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800729e:	e841 2300 	strex	r3, r2, [r1]
 80072a2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80072a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d1e3      	bne.n	8007272 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80072ae:	2b01      	cmp	r3, #1
 80072b0:	d118      	bne.n	80072e4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	e853 3f00 	ldrex	r3, [r3]
 80072be:	60bb      	str	r3, [r7, #8]
   return(result);
 80072c0:	68bb      	ldr	r3, [r7, #8]
 80072c2:	f023 0310 	bic.w	r3, r3, #16
 80072c6:	647b      	str	r3, [r7, #68]	@ 0x44
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	461a      	mov	r2, r3
 80072ce:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80072d0:	61bb      	str	r3, [r7, #24]
 80072d2:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072d4:	6979      	ldr	r1, [r7, #20]
 80072d6:	69ba      	ldr	r2, [r7, #24]
 80072d8:	e841 2300 	strex	r3, r2, [r1]
 80072dc:	613b      	str	r3, [r7, #16]
   return(result);
 80072de:	693b      	ldr	r3, [r7, #16]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d1e6      	bne.n	80072b2 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	2220      	movs	r2, #32
 80072e8:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072ec:	687b      	ldr	r3, [r7, #4]
 80072ee:	2200      	movs	r2, #0
 80072f0:	66da      	str	r2, [r3, #108]	@ 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80072f2:	687b      	ldr	r3, [r7, #4]
 80072f4:	2200      	movs	r2, #0
 80072f6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80072f8:	bf00      	nop
 80072fa:	3754      	adds	r7, #84	@ 0x54
 80072fc:	46bd      	mov	sp, r7
 80072fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007302:	4770      	bx	lr

08007304 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007304:	b580      	push	{r7, lr}
 8007306:	b084      	sub	sp, #16
 8007308:	af00      	add	r7, sp, #0
 800730a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8007310:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007312:	68fb      	ldr	r3, [r7, #12]
 8007314:	2200      	movs	r2, #0
 8007316:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
  huart->TxXferCount = 0U;
 800731a:	68fb      	ldr	r3, [r7, #12]
 800731c:	2200      	movs	r2, #0
 800731e:	f8a3 2056 	strh.w	r2, [r3, #86]	@ 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007322:	68f8      	ldr	r0, [r7, #12]
 8007324:	f7ff f832 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007328:	bf00      	nop
 800732a:	3710      	adds	r7, #16
 800732c:	46bd      	mov	sp, r7
 800732e:	bd80      	pop	{r7, pc}

08007330 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b088      	sub	sp, #32
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800733e:	68fb      	ldr	r3, [r7, #12]
 8007340:	e853 3f00 	ldrex	r3, [r3]
 8007344:	60bb      	str	r3, [r7, #8]
   return(result);
 8007346:	68bb      	ldr	r3, [r7, #8]
 8007348:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800734c:	61fb      	str	r3, [r7, #28]
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	681b      	ldr	r3, [r3, #0]
 8007352:	461a      	mov	r2, r3
 8007354:	69fb      	ldr	r3, [r7, #28]
 8007356:	61bb      	str	r3, [r7, #24]
 8007358:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800735a:	6979      	ldr	r1, [r7, #20]
 800735c:	69ba      	ldr	r2, [r7, #24]
 800735e:	e841 2300 	strex	r3, r2, [r1]
 8007362:	613b      	str	r3, [r7, #16]
   return(result);
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1e6      	bne.n	8007338 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	2220      	movs	r2, #32
 800736e:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	2200      	movs	r2, #0
 8007376:	679a      	str	r2, [r3, #120]	@ 0x78
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007378:	6878      	ldr	r0, [r7, #4]
 800737a:	f7fe fffd 	bl	8006378 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800737e:	bf00      	nop
 8007380:	3720      	adds	r7, #32
 8007382:	46bd      	mov	sp, r7
 8007384:	bd80      	pop	{r7, pc}
	...

08007388 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8007388:	b580      	push	{r7, lr}
 800738a:	b09c      	sub	sp, #112	@ 0x70
 800738c:	af00      	add	r7, sp, #0
 800738e:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007396:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 80073a0:	2b22      	cmp	r3, #34	@ 0x22
 80073a2:	f040 80be 	bne.w	8007522 <UART_RxISR_8BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	681b      	ldr	r3, [r3, #0]
 80073aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80073ac:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80073b0:	f8b7 306c 	ldrh.w	r3, [r7, #108]	@ 0x6c
 80073b4:	b2d9      	uxtb	r1, r3
 80073b6:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 80073ba:	b2da      	uxtb	r2, r3
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073c0:	400a      	ands	r2, r1
 80073c2:	b2d2      	uxtb	r2, r2
 80073c4:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80073ca:	1c5a      	adds	r2, r3, #1
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073d6:	b29b      	uxth	r3, r3
 80073d8:	3b01      	subs	r3, #1
 80073da:	b29a      	uxth	r2, r3
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80073e8:	b29b      	uxth	r3, r3
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	f040 80a1 	bne.w	8007532 <UART_RxISR_8BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80073fe:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007400:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8007404:	66bb      	str	r3, [r7, #104]	@ 0x68
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	461a      	mov	r2, r3
 800740c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800740e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007410:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007414:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800741c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e6      	bne.n	80073f0 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	3308      	adds	r3, #8
 8007428:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800742a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800742c:	e853 3f00 	ldrex	r3, [r3]
 8007430:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007432:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007434:	f023 0301 	bic.w	r3, r3, #1
 8007438:	667b      	str	r3, [r7, #100]	@ 0x64
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	3308      	adds	r3, #8
 8007440:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8007442:	647a      	str	r2, [r7, #68]	@ 0x44
 8007444:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007446:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007448:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800744a:	e841 2300 	strex	r3, r2, [r1]
 800744e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007450:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007452:	2b00      	cmp	r3, #0
 8007454:	d1e5      	bne.n	8007422 <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	2220      	movs	r2, #32
 800745a:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800745e:	687b      	ldr	r3, [r7, #4]
 8007460:	2200      	movs	r2, #0
 8007462:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007464:	687b      	ldr	r3, [r7, #4]
 8007466:	2200      	movs	r2, #0
 8007468:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	681b      	ldr	r3, [r3, #0]
 800746e:	4a33      	ldr	r2, [pc, #204]	@ (800753c <UART_RxISR_8BIT+0x1b4>)
 8007470:	4293      	cmp	r3, r2
 8007472:	d01f      	beq.n	80074b4 <UART_RxISR_8BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007474:	687b      	ldr	r3, [r7, #4]
 8007476:	681b      	ldr	r3, [r3, #0]
 8007478:	685b      	ldr	r3, [r3, #4]
 800747a:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 800747e:	2b00      	cmp	r3, #0
 8007480:	d018      	beq.n	80074b4 <UART_RxISR_8BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007488:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800748a:	e853 3f00 	ldrex	r3, [r3]
 800748e:	623b      	str	r3, [r7, #32]
   return(result);
 8007490:	6a3b      	ldr	r3, [r7, #32]
 8007492:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007496:	663b      	str	r3, [r7, #96]	@ 0x60
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	681b      	ldr	r3, [r3, #0]
 800749c:	461a      	mov	r2, r3
 800749e:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80074a0:	633b      	str	r3, [r7, #48]	@ 0x30
 80074a2:	62fa      	str	r2, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074a4:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80074a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80074a8:	e841 2300 	strex	r3, r2, [r1]
 80074ac:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80074ae:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d1e6      	bne.n	8007482 <UART_RxISR_8BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 80074b8:	2b01      	cmp	r3, #1
 80074ba:	d12e      	bne.n	800751a <UART_RxISR_8BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	2200      	movs	r2, #0
 80074c0:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	681b      	ldr	r3, [r3, #0]
 80074c6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80074c8:	693b      	ldr	r3, [r7, #16]
 80074ca:	e853 3f00 	ldrex	r3, [r3]
 80074ce:	60fb      	str	r3, [r7, #12]
   return(result);
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	f023 0310 	bic.w	r3, r3, #16
 80074d6:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	681b      	ldr	r3, [r3, #0]
 80074dc:	461a      	mov	r2, r3
 80074de:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80074e0:	61fb      	str	r3, [r7, #28]
 80074e2:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80074e4:	69b9      	ldr	r1, [r7, #24]
 80074e6:	69fa      	ldr	r2, [r7, #28]
 80074e8:	e841 2300 	strex	r3, r2, [r1]
 80074ec:	617b      	str	r3, [r7, #20]
   return(result);
 80074ee:	697b      	ldr	r3, [r7, #20]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d1e6      	bne.n	80074c2 <UART_RxISR_8BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	681b      	ldr	r3, [r3, #0]
 80074f8:	69db      	ldr	r3, [r3, #28]
 80074fa:	f003 0310 	and.w	r3, r3, #16
 80074fe:	2b10      	cmp	r3, #16
 8007500:	d103      	bne.n	800750a <UART_RxISR_8BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	2210      	movs	r2, #16
 8007508:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f7fe ff44 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007518:	e00b      	b.n	8007532 <UART_RxISR_8BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 800751a:	6878      	ldr	r0, [r7, #4]
 800751c:	f7f9 ff6a 	bl	80013f4 <HAL_UART_RxCpltCallback>
}
 8007520:	e007      	b.n	8007532 <UART_RxISR_8BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007522:	687b      	ldr	r3, [r7, #4]
 8007524:	681b      	ldr	r3, [r3, #0]
 8007526:	699a      	ldr	r2, [r3, #24]
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	f042 0208 	orr.w	r2, r2, #8
 8007530:	619a      	str	r2, [r3, #24]
}
 8007532:	bf00      	nop
 8007534:	3770      	adds	r7, #112	@ 0x70
 8007536:	46bd      	mov	sp, r7
 8007538:	bd80      	pop	{r7, pc}
 800753a:	bf00      	nop
 800753c:	40008000 	.word	0x40008000

08007540 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007540:	b580      	push	{r7, lr}
 8007542:	b09c      	sub	sp, #112	@ 0x70
 8007544:	af00      	add	r7, sp, #0
 8007546:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 800754e:	f8a7 306e 	strh.w	r3, [r7, #110]	@ 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007552:	687b      	ldr	r3, [r7, #4]
 8007554:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007558:	2b22      	cmp	r3, #34	@ 0x22
 800755a:	f040 80be 	bne.w	80076da <UART_RxISR_16BIT+0x19a>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	681b      	ldr	r3, [r3, #0]
 8007562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007564:	f8a7 306c 	strh.w	r3, [r7, #108]	@ 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007568:	687b      	ldr	r3, [r7, #4]
 800756a:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800756c:	66bb      	str	r3, [r7, #104]	@ 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800756e:	f8b7 206c 	ldrh.w	r2, [r7, #108]	@ 0x6c
 8007572:	f8b7 306e 	ldrh.w	r3, [r7, #110]	@ 0x6e
 8007576:	4013      	ands	r3, r2
 8007578:	b29a      	uxth	r2, r3
 800757a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 800757c:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800757e:	687b      	ldr	r3, [r7, #4]
 8007580:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007582:	1c9a      	adds	r2, r3, #2
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	659a      	str	r2, [r3, #88]	@ 0x58
    huart->RxXferCount--;
 8007588:	687b      	ldr	r3, [r7, #4]
 800758a:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 800758e:	b29b      	uxth	r3, r3
 8007590:	3b01      	subs	r3, #1
 8007592:	b29a      	uxth	r2, r3
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e

    if (huart->RxXferCount == 0U)
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80075a0:	b29b      	uxth	r3, r3
 80075a2:	2b00      	cmp	r3, #0
 80075a4:	f040 80a1 	bne.w	80076ea <UART_RxISR_16BIT+0x1aa>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075ae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80075b0:	e853 3f00 	ldrex	r3, [r3]
 80075b4:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80075b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80075b8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80075bc:	667b      	str	r3, [r7, #100]	@ 0x64
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	461a      	mov	r2, r3
 80075c4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80075c6:	657b      	str	r3, [r7, #84]	@ 0x54
 80075c8:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075ca:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 80075cc:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 80075ce:	e841 2300 	strex	r3, r2, [r1]
 80075d2:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 80075d4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d1e6      	bne.n	80075a8 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	681b      	ldr	r3, [r3, #0]
 80075de:	3308      	adds	r3, #8
 80075e0:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80075e2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80075e4:	e853 3f00 	ldrex	r3, [r3]
 80075e8:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80075ea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80075ec:	f023 0301 	bic.w	r3, r3, #1
 80075f0:	663b      	str	r3, [r7, #96]	@ 0x60
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	3308      	adds	r3, #8
 80075f8:	6e3a      	ldr	r2, [r7, #96]	@ 0x60
 80075fa:	643a      	str	r2, [r7, #64]	@ 0x40
 80075fc:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80075fe:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007600:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007602:	e841 2300 	strex	r3, r2, [r1]
 8007606:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8007608:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800760a:	2b00      	cmp	r3, #0
 800760c:	d1e5      	bne.n	80075da <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	2220      	movs	r2, #32
 8007612:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8007616:	687b      	ldr	r3, [r7, #4]
 8007618:	2200      	movs	r2, #0
 800761a:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	2200      	movs	r2, #0
 8007620:	671a      	str	r2, [r3, #112]	@ 0x70

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	4a33      	ldr	r2, [pc, #204]	@ (80076f4 <UART_RxISR_16BIT+0x1b4>)
 8007628:	4293      	cmp	r3, r2
 800762a:	d01f      	beq.n	800766c <UART_RxISR_16BIT+0x12c>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007636:	2b00      	cmp	r3, #0
 8007638:	d018      	beq.n	800766c <UART_RxISR_16BIT+0x12c>
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	681b      	ldr	r3, [r3, #0]
 800763e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007640:	6a3b      	ldr	r3, [r7, #32]
 8007642:	e853 3f00 	ldrex	r3, [r3]
 8007646:	61fb      	str	r3, [r7, #28]
   return(result);
 8007648:	69fb      	ldr	r3, [r7, #28]
 800764a:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 800764e:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8007650:	687b      	ldr	r3, [r7, #4]
 8007652:	681b      	ldr	r3, [r3, #0]
 8007654:	461a      	mov	r2, r3
 8007656:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007658:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800765a:	62ba      	str	r2, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800765c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800765e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007660:	e841 2300 	strex	r3, r2, [r1]
 8007664:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8007666:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007668:	2b00      	cmp	r3, #0
 800766a:	d1e6      	bne.n	800763a <UART_RxISR_16BIT+0xfa>
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007670:	2b01      	cmp	r3, #1
 8007672:	d12e      	bne.n	80076d2 <UART_RxISR_16BIT+0x192>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2200      	movs	r2, #0
 8007678:	66da      	str	r2, [r3, #108]	@ 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800767a:	687b      	ldr	r3, [r7, #4]
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	e853 3f00 	ldrex	r3, [r3]
 8007686:	60bb      	str	r3, [r7, #8]
   return(result);
 8007688:	68bb      	ldr	r3, [r7, #8]
 800768a:	f023 0310 	bic.w	r3, r3, #16
 800768e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	461a      	mov	r2, r3
 8007696:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007698:	61bb      	str	r3, [r7, #24]
 800769a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800769c:	6979      	ldr	r1, [r7, #20]
 800769e:	69ba      	ldr	r2, [r7, #24]
 80076a0:	e841 2300 	strex	r3, r2, [r1]
 80076a4:	613b      	str	r3, [r7, #16]
   return(result);
 80076a6:	693b      	ldr	r3, [r7, #16]
 80076a8:	2b00      	cmp	r3, #0
 80076aa:	d1e6      	bne.n	800767a <UART_RxISR_16BIT+0x13a>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076ac:	687b      	ldr	r3, [r7, #4]
 80076ae:	681b      	ldr	r3, [r3, #0]
 80076b0:	69db      	ldr	r3, [r3, #28]
 80076b2:	f003 0310 	and.w	r3, r3, #16
 80076b6:	2b10      	cmp	r3, #16
 80076b8:	d103      	bne.n	80076c2 <UART_RxISR_16BIT+0x182>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	2210      	movs	r2, #16
 80076c0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7fe fe68 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80076d0:	e00b      	b.n	80076ea <UART_RxISR_16BIT+0x1aa>
        HAL_UART_RxCpltCallback(huart);
 80076d2:	6878      	ldr	r0, [r7, #4]
 80076d4:	f7f9 fe8e 	bl	80013f4 <HAL_UART_RxCpltCallback>
}
 80076d8:	e007      	b.n	80076ea <UART_RxISR_16BIT+0x1aa>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	681b      	ldr	r3, [r3, #0]
 80076de:	699a      	ldr	r2, [r3, #24]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f042 0208 	orr.w	r2, r2, #8
 80076e8:	619a      	str	r2, [r3, #24]
}
 80076ea:	bf00      	nop
 80076ec:	3770      	adds	r7, #112	@ 0x70
 80076ee:	46bd      	mov	sp, r7
 80076f0:	bd80      	pop	{r7, pc}
 80076f2:	bf00      	nop
 80076f4:	40008000 	.word	0x40008000

080076f8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80076f8:	b580      	push	{r7, lr}
 80076fa:	b0ac      	sub	sp, #176	@ 0xb0
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007706:	f8a7 30aa 	strh.w	r3, [r7, #170]	@ 0xaa
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800770a:	687b      	ldr	r3, [r7, #4]
 800770c:	681b      	ldr	r3, [r3, #0]
 800770e:	69db      	ldr	r3, [r3, #28]
 8007710:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	681b      	ldr	r3, [r3, #0]
 800771a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	689b      	ldr	r3, [r3, #8]
 8007724:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007728:	687b      	ldr	r3, [r7, #4]
 800772a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 800772e:	2b22      	cmp	r3, #34	@ 0x22
 8007730:	f040 8182 	bne.w	8007a38 <UART_RxISR_8BIT_FIFOEN+0x340>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 800773a:	f8a7 309e 	strh.w	r3, [r7, #158]	@ 0x9e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800773e:	e125      	b.n	800798c <UART_RxISR_8BIT_FIFOEN+0x294>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007746:	f8a7 309c 	strh.w	r3, [r7, #156]	@ 0x9c
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800774a:	f8b7 309c 	ldrh.w	r3, [r7, #156]	@ 0x9c
 800774e:	b2d9      	uxtb	r1, r3
 8007750:	f8b7 30aa 	ldrh.w	r3, [r7, #170]	@ 0xaa
 8007754:	b2da      	uxtb	r2, r3
 8007756:	687b      	ldr	r3, [r7, #4]
 8007758:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800775a:	400a      	ands	r2, r1
 800775c:	b2d2      	uxtb	r2, r2
 800775e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007764:	1c5a      	adds	r2, r3, #1
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 800776a:	687b      	ldr	r3, [r7, #4]
 800776c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007770:	b29b      	uxth	r3, r3
 8007772:	3b01      	subs	r3, #1
 8007774:	b29a      	uxth	r2, r3
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	69db      	ldr	r3, [r3, #28]
 8007782:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007786:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 800778a:	f003 0307 	and.w	r3, r3, #7
 800778e:	2b00      	cmp	r3, #0
 8007790:	d053      	beq.n	800783a <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007792:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b00      	cmp	r3, #0
 800779c:	d011      	beq.n	80077c2 <UART_RxISR_8BIT_FIFOEN+0xca>
 800779e:	f8d7 30a4 	ldr.w	r3, [r7, #164]	@ 0xa4
 80077a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80077a6:	2b00      	cmp	r3, #0
 80077a8:	d00b      	beq.n	80077c2 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	2201      	movs	r2, #1
 80077b0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077b8:	f043 0201 	orr.w	r2, r3, #1
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077c2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077c6:	f003 0302 	and.w	r3, r3, #2
 80077ca:	2b00      	cmp	r3, #0
 80077cc:	d011      	beq.n	80077f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 80077ce:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80077d2:	f003 0301 	and.w	r3, r3, #1
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	d00b      	beq.n	80077f2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80077da:	687b      	ldr	r3, [r7, #4]
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	2202      	movs	r2, #2
 80077e0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 80077e8:	f043 0204 	orr.w	r2, r3, #4
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80077f2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 80077f6:	f003 0304 	and.w	r3, r3, #4
 80077fa:	2b00      	cmp	r3, #0
 80077fc:	d011      	beq.n	8007822 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80077fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007802:	f003 0301 	and.w	r3, r3, #1
 8007806:	2b00      	cmp	r3, #0
 8007808:	d00b      	beq.n	8007822 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800780a:	687b      	ldr	r3, [r7, #4]
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	2204      	movs	r2, #4
 8007810:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007818:	f043 0202 	orr.w	r2, r3, #2
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007828:	2b00      	cmp	r3, #0
 800782a:	d006      	beq.n	800783a <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800782c:	6878      	ldr	r0, [r7, #4]
 800782e:	f7fe fdad 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2200      	movs	r2, #0
 8007836:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007840:	b29b      	uxth	r3, r3
 8007842:	2b00      	cmp	r3, #0
 8007844:	f040 80a2 	bne.w	800798c <UART_RxISR_8BIT_FIFOEN+0x294>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007848:	687b      	ldr	r3, [r7, #4]
 800784a:	681b      	ldr	r3, [r3, #0]
 800784c:	673b      	str	r3, [r7, #112]	@ 0x70
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800784e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007850:	e853 3f00 	ldrex	r3, [r3]
 8007854:	66fb      	str	r3, [r7, #108]	@ 0x6c
   return(result);
 8007856:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8007858:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800785c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	461a      	mov	r2, r3
 8007866:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800786a:	67fb      	str	r3, [r7, #124]	@ 0x7c
 800786c:	67ba      	str	r2, [r7, #120]	@ 0x78
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800786e:	6fb9      	ldr	r1, [r7, #120]	@ 0x78
 8007870:	6ffa      	ldr	r2, [r7, #124]	@ 0x7c
 8007872:	e841 2300 	strex	r3, r2, [r1]
 8007876:	677b      	str	r3, [r7, #116]	@ 0x74
   return(result);
 8007878:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800787a:	2b00      	cmp	r3, #0
 800787c:	d1e4      	bne.n	8007848 <UART_RxISR_8BIT_FIFOEN+0x150>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	681b      	ldr	r3, [r3, #0]
 8007882:	3308      	adds	r3, #8
 8007884:	65fb      	str	r3, [r7, #92]	@ 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007886:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007888:	e853 3f00 	ldrex	r3, [r3]
 800788c:	65bb      	str	r3, [r7, #88]	@ 0x58
   return(result);
 800788e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8007890:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007894:	f023 0301 	bic.w	r3, r3, #1
 8007898:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3308      	adds	r3, #8
 80078a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80078a6:	66ba      	str	r2, [r7, #104]	@ 0x68
 80078a8:	667b      	str	r3, [r7, #100]	@ 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80078aa:	6e79      	ldr	r1, [r7, #100]	@ 0x64
 80078ac:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 80078ae:	e841 2300 	strex	r3, r2, [r1]
 80078b2:	663b      	str	r3, [r7, #96]	@ 0x60
   return(result);
 80078b4:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d1e1      	bne.n	800787e <UART_RxISR_8BIT_FIFOEN+0x186>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2220      	movs	r2, #32
 80078be:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80078c2:	687b      	ldr	r3, [r7, #4]
 80078c4:	2200      	movs	r2, #0
 80078c6:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2200      	movs	r2, #0
 80078cc:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	4a5f      	ldr	r2, [pc, #380]	@ (8007a50 <UART_RxISR_8BIT_FIFOEN+0x358>)
 80078d4:	4293      	cmp	r3, r2
 80078d6:	d021      	beq.n	800791c <UART_RxISR_8BIT_FIFOEN+0x224>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d01a      	beq.n	800791c <UART_RxISR_8BIT_FIFOEN+0x224>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	64bb      	str	r3, [r7, #72]	@ 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80078ec:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80078ee:	e853 3f00 	ldrex	r3, [r3]
 80078f2:	647b      	str	r3, [r7, #68]	@ 0x44
   return(result);
 80078f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80078f6:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 80078fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	461a      	mov	r2, r3
 8007904:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007908:	657b      	str	r3, [r7, #84]	@ 0x54
 800790a:	653a      	str	r2, [r7, #80]	@ 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800790c:	6d39      	ldr	r1, [r7, #80]	@ 0x50
 800790e:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8007910:	e841 2300 	strex	r3, r2, [r1]
 8007914:	64fb      	str	r3, [r7, #76]	@ 0x4c
   return(result);
 8007916:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007918:	2b00      	cmp	r3, #0
 800791a:	d1e4      	bne.n	80078e6 <UART_RxISR_8BIT_FIFOEN+0x1ee>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007920:	2b01      	cmp	r3, #1
 8007922:	d130      	bne.n	8007986 <UART_RxISR_8BIT_FIFOEN+0x28e>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2200      	movs	r2, #0
 8007928:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007930:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007932:	e853 3f00 	ldrex	r3, [r3]
 8007936:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8007938:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800793a:	f023 0310 	bic.w	r3, r3, #16
 800793e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
 8007942:	687b      	ldr	r3, [r7, #4]
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	461a      	mov	r2, r3
 8007948:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800794c:	643b      	str	r3, [r7, #64]	@ 0x40
 800794e:	63fa      	str	r2, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8007952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8007954:	e841 2300 	strex	r3, r2, [r1]
 8007958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800795a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800795c:	2b00      	cmp	r3, #0
 800795e:	d1e4      	bne.n	800792a <UART_RxISR_8BIT_FIFOEN+0x232>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	69db      	ldr	r3, [r3, #28]
 8007966:	f003 0310 	and.w	r3, r3, #16
 800796a:	2b10      	cmp	r3, #16
 800796c:	d103      	bne.n	8007976 <UART_RxISR_8BIT_FIFOEN+0x27e>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	2210      	movs	r2, #16
 8007974:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 800797c:	4619      	mov	r1, r3
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fe fd0e 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
 8007984:	e002      	b.n	800798c <UART_RxISR_8BIT_FIFOEN+0x294>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007986:	6878      	ldr	r0, [r7, #4]
 8007988:	f7f9 fd34 	bl	80013f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800798c:	f8b7 309e 	ldrh.w	r3, [r7, #158]	@ 0x9e
 8007990:	2b00      	cmp	r3, #0
 8007992:	d006      	beq.n	80079a2 <UART_RxISR_8BIT_FIFOEN+0x2aa>
 8007994:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	f47f aecf 	bne.w	8007740 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 80079a8:	f8a7 308a 	strh.w	r3, [r7, #138]	@ 0x8a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 80079ac:	f8b7 308a 	ldrh.w	r3, [r7, #138]	@ 0x8a
 80079b0:	2b00      	cmp	r3, #0
 80079b2:	d049      	beq.n	8007a48 <UART_RxISR_8BIT_FIFOEN+0x350>
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 80079ba:	f8b7 208a 	ldrh.w	r2, [r7, #138]	@ 0x8a
 80079be:	429a      	cmp	r2, r3
 80079c0:	d242      	bcs.n	8007a48 <UART_RxISR_8BIT_FIFOEN+0x350>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	3308      	adds	r3, #8
 80079c8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079ca:	6a3b      	ldr	r3, [r7, #32]
 80079cc:	e853 3f00 	ldrex	r3, [r3]
 80079d0:	61fb      	str	r3, [r7, #28]
   return(result);
 80079d2:	69fb      	ldr	r3, [r7, #28]
 80079d4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80079d8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	3308      	adds	r3, #8
 80079e2:	f8d7 2084 	ldr.w	r2, [r7, #132]	@ 0x84
 80079e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80079e8:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80079ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80079ee:	e841 2300 	strex	r3, r2, [r1]
 80079f2:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80079f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80079f6:	2b00      	cmp	r3, #0
 80079f8:	d1e3      	bne.n	80079c2 <UART_RxISR_8BIT_FIFOEN+0x2ca>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	4a15      	ldr	r2, [pc, #84]	@ (8007a54 <UART_RxISR_8BIT_FIFOEN+0x35c>)
 80079fe:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	e853 3f00 	ldrex	r3, [r3]
 8007a0c:	60bb      	str	r3, [r7, #8]
   return(result);
 8007a0e:	68bb      	ldr	r3, [r7, #8]
 8007a10:	f043 0320 	orr.w	r3, r3, #32
 8007a14:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	461a      	mov	r2, r3
 8007a1e:	f8d7 3080 	ldr.w	r3, [r7, #128]	@ 0x80
 8007a22:	61bb      	str	r3, [r7, #24]
 8007a24:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a26:	6979      	ldr	r1, [r7, #20]
 8007a28:	69ba      	ldr	r2, [r7, #24]
 8007a2a:	e841 2300 	strex	r3, r2, [r1]
 8007a2e:	613b      	str	r3, [r7, #16]
   return(result);
 8007a30:	693b      	ldr	r3, [r7, #16]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d1e4      	bne.n	8007a00 <UART_RxISR_8BIT_FIFOEN+0x308>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a36:	e007      	b.n	8007a48 <UART_RxISR_8BIT_FIFOEN+0x350>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a38:	687b      	ldr	r3, [r7, #4]
 8007a3a:	681b      	ldr	r3, [r3, #0]
 8007a3c:	699a      	ldr	r2, [r3, #24]
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	f042 0208 	orr.w	r2, r2, #8
 8007a46:	619a      	str	r2, [r3, #24]
}
 8007a48:	bf00      	nop
 8007a4a:	37b0      	adds	r7, #176	@ 0xb0
 8007a4c:	46bd      	mov	sp, r7
 8007a4e:	bd80      	pop	{r7, pc}
 8007a50:	40008000 	.word	0x40008000
 8007a54:	08007389 	.word	0x08007389

08007a58 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8007a58:	b580      	push	{r7, lr}
 8007a5a:	b0ae      	sub	sp, #184	@ 0xb8
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	@ 0x60
 8007a66:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69db      	ldr	r3, [r3, #28]
 8007a70:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	681b      	ldr	r3, [r3, #0]
 8007a82:	689b      	ldr	r3, [r3, #8]
 8007a84:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f8d3 308c 	ldr.w	r3, [r3, #140]	@ 0x8c
 8007a8e:	2b22      	cmp	r3, #34	@ 0x22
 8007a90:	f040 8186 	bne.w	8007da0 <UART_RxISR_16BIT_FIFOEN+0x348>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007a9a:	f8a7 30a6 	strh.w	r3, [r7, #166]	@ 0xa6
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007a9e:	e129      	b.n	8007cf4 <UART_RxISR_16BIT_FIFOEN+0x29c>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007aa0:	687b      	ldr	r3, [r7, #4]
 8007aa2:	681b      	ldr	r3, [r3, #0]
 8007aa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8007aa6:	f8a7 30a4 	strh.w	r3, [r7, #164]	@ 0xa4
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007aae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
      *tmp = (uint16_t)(uhdata & uhMask);
 8007ab2:	f8b7 20a4 	ldrh.w	r2, [r7, #164]	@ 0xa4
 8007ab6:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8007aba:	4013      	ands	r3, r2
 8007abc:	b29a      	uxth	r2, r3
 8007abe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8007ac2:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8007ac8:	1c9a      	adds	r2, r3, #2
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	659a      	str	r2, [r3, #88]	@ 0x58
      huart->RxXferCount--;
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ad4:	b29b      	uxth	r3, r3
 8007ad6:	3b01      	subs	r3, #1
 8007ad8:	b29a      	uxth	r2, r3
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	f8a3 205e 	strh.w	r2, [r3, #94]	@ 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	69db      	ldr	r3, [r3, #28]
 8007ae6:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007aea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007aee:	f003 0307 	and.w	r3, r3, #7
 8007af2:	2b00      	cmp	r3, #0
 8007af4:	d053      	beq.n	8007b9e <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007af6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007afa:	f003 0301 	and.w	r3, r3, #1
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d011      	beq.n	8007b26 <UART_RxISR_16BIT_FIFOEN+0xce>
 8007b02:	f8d7 30ac 	ldr.w	r3, [r7, #172]	@ 0xac
 8007b06:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d00b      	beq.n	8007b26 <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007b0e:	687b      	ldr	r3, [r7, #4]
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	2201      	movs	r2, #1
 8007b14:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b1c:	f043 0201 	orr.w	r2, r3, #1
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b26:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b2a:	f003 0302 	and.w	r3, r3, #2
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d011      	beq.n	8007b56 <UART_RxISR_16BIT_FIFOEN+0xfe>
 8007b32:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b36:	f003 0301 	and.w	r3, r3, #1
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d00b      	beq.n	8007b56 <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2202      	movs	r2, #2
 8007b44:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007b46:	687b      	ldr	r3, [r7, #4]
 8007b48:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b4c:	f043 0204 	orr.w	r2, r3, #4
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007b56:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007b5a:	f003 0304 	and.w	r3, r3, #4
 8007b5e:	2b00      	cmp	r3, #0
 8007b60:	d011      	beq.n	8007b86 <UART_RxISR_16BIT_FIFOEN+0x12e>
 8007b62:	f8d7 30a8 	ldr.w	r3, [r7, #168]	@ 0xa8
 8007b66:	f003 0301 	and.w	r3, r3, #1
 8007b6a:	2b00      	cmp	r3, #0
 8007b6c:	d00b      	beq.n	8007b86 <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	2204      	movs	r2, #4
 8007b74:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b7c:	f043 0202 	orr.w	r2, r3, #2
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	f8d3 3090 	ldr.w	r3, [r3, #144]	@ 0x90
 8007b8c:	2b00      	cmp	r3, #0
 8007b8e:	d006      	beq.n	8007b9e <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007b90:	6878      	ldr	r0, [r7, #4]
 8007b92:	f7fe fbfb 	bl	800638c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2200      	movs	r2, #0
 8007b9a:	f8c3 2090 	str.w	r2, [r3, #144]	@ 0x90
        }
      }

      if (huart->RxXferCount == 0U)
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007ba4:	b29b      	uxth	r3, r3
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	f040 80a4 	bne.w	8007cf4 <UART_RxISR_16BIT_FIFOEN+0x29c>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	681b      	ldr	r3, [r3, #0]
 8007bb0:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bb2:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8007bb4:	e853 3f00 	ldrex	r3, [r3]
 8007bb8:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8007bba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8007bbc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8007bc0:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	461a      	mov	r2, r3
 8007bca:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8007bce:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8007bd2:	67fa      	str	r2, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bd4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8007bd6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8007bda:	e841 2300 	strex	r3, r2, [r1]
 8007bde:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8007be0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8007be2:	2b00      	cmp	r3, #0
 8007be4:	d1e2      	bne.n	8007bac <UART_RxISR_16BIT_FIFOEN+0x154>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	3308      	adds	r3, #8
 8007bec:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bee:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8007bf0:	e853 3f00 	ldrex	r3, [r3]
 8007bf4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8007bf6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8007bf8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007bfc:	f023 0301 	bic.w	r3, r3, #1
 8007c00:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	3308      	adds	r3, #8
 8007c0a:	f8d7 2098 	ldr.w	r2, [r7, #152]	@ 0x98
 8007c0e:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8007c10:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c12:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8007c14:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8007c16:	e841 2300 	strex	r3, r2, [r1]
 8007c1a:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8007c1c:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d1e1      	bne.n	8007be6 <UART_RxISR_16BIT_FIFOEN+0x18e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	2220      	movs	r2, #32
 8007c26:	f8c3 208c 	str.w	r2, [r3, #140]	@ 0x8c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2200      	movs	r2, #0
 8007c2e:	675a      	str	r2, [r3, #116]	@ 0x74

        /* Initialize type of RxEvent to Transfer Complete */
        huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007c30:	687b      	ldr	r3, [r7, #4]
 8007c32:	2200      	movs	r2, #0
 8007c34:	671a      	str	r2, [r3, #112]	@ 0x70

        if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	681b      	ldr	r3, [r3, #0]
 8007c3a:	4a5f      	ldr	r2, [pc, #380]	@ (8007db8 <UART_RxISR_16BIT_FIFOEN+0x360>)
 8007c3c:	4293      	cmp	r3, r2
 8007c3e:	d021      	beq.n	8007c84 <UART_RxISR_16BIT_FIFOEN+0x22c>
        {
          /* Check that USART RTOEN bit is set */
          if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	681b      	ldr	r3, [r3, #0]
 8007c44:	685b      	ldr	r3, [r3, #4]
 8007c46:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	d01a      	beq.n	8007c84 <UART_RxISR_16BIT_FIFOEN+0x22c>
          {
            /* Enable the UART Receiver Timeout Interrupt */
            ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007c4e:	687b      	ldr	r3, [r7, #4]
 8007c50:	681b      	ldr	r3, [r3, #0]
 8007c52:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8007c56:	e853 3f00 	ldrex	r3, [r3]
 8007c5a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8007c5c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8007c5e:	f023 6380 	bic.w	r3, r3, #67108864	@ 0x4000000
 8007c62:	f8c7 3094 	str.w	r3, [r7, #148]	@ 0x94
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	461a      	mov	r2, r3
 8007c6c:	f8d7 3094 	ldr.w	r3, [r7, #148]	@ 0x94
 8007c70:	65bb      	str	r3, [r7, #88]	@ 0x58
 8007c72:	657a      	str	r2, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c74:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8007c76:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8007c78:	e841 2300 	strex	r3, r2, [r1]
 8007c7c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8007c7e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8007c80:	2b00      	cmp	r3, #0
 8007c82:	d1e4      	bne.n	8007c4e <UART_RxISR_16BIT_FIFOEN+0x1f6>
          }
        }

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8007c88:	2b01      	cmp	r3, #1
 8007c8a:	d130      	bne.n	8007cee <UART_RxISR_16BIT_FIFOEN+0x296>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	2200      	movs	r2, #0
 8007c90:	66da      	str	r2, [r3, #108]	@ 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c98:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8007c9a:	e853 3f00 	ldrex	r3, [r3]
 8007c9e:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8007ca0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8007ca2:	f023 0310 	bic.w	r3, r3, #16
 8007ca6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	461a      	mov	r2, r3
 8007cb0:	f8d7 3090 	ldr.w	r3, [r7, #144]	@ 0x90
 8007cb4:	647b      	str	r3, [r7, #68]	@ 0x44
 8007cb6:	643a      	str	r2, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007cb8:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8007cba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8007cbc:	e841 2300 	strex	r3, r2, [r1]
 8007cc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8007cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8007cc4:	2b00      	cmp	r3, #0
 8007cc6:	d1e4      	bne.n	8007c92 <UART_RxISR_16BIT_FIFOEN+0x23a>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	69db      	ldr	r3, [r3, #28]
 8007cce:	f003 0310 	and.w	r3, r3, #16
 8007cd2:	2b10      	cmp	r3, #16
 8007cd4:	d103      	bne.n	8007cde <UART_RxISR_16BIT_FIFOEN+0x286>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	2210      	movs	r2, #16
 8007cdc:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	f8b3 305c 	ldrh.w	r3, [r3, #92]	@ 0x5c
 8007ce4:	4619      	mov	r1, r3
 8007ce6:	6878      	ldr	r0, [r7, #4]
 8007ce8:	f7fe fb5a 	bl	80063a0 <HAL_UARTEx_RxEventCallback>
 8007cec:	e002      	b.n	8007cf4 <UART_RxISR_16BIT_FIFOEN+0x29c>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8007cee:	6878      	ldr	r0, [r7, #4]
 8007cf0:	f7f9 fb80 	bl	80013f4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8007cf4:	f8b7 30a6 	ldrh.w	r3, [r7, #166]	@ 0xa6
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d006      	beq.n	8007d0a <UART_RxISR_16BIT_FIFOEN+0x2b2>
 8007cfc:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8007d00:	f003 0320 	and.w	r3, r3, #32
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	f47f aecb 	bne.w	8007aa0 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	@ 0x5e
 8007d10:	f8a7 308e 	strh.w	r3, [r7, #142]	@ 0x8e
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007d14:	f8b7 308e 	ldrh.w	r3, [r7, #142]	@ 0x8e
 8007d18:	2b00      	cmp	r3, #0
 8007d1a:	d049      	beq.n	8007db0 <UART_RxISR_16BIT_FIFOEN+0x358>
 8007d1c:	687b      	ldr	r3, [r7, #4]
 8007d1e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	@ 0x68
 8007d22:	f8b7 208e 	ldrh.w	r2, [r7, #142]	@ 0x8e
 8007d26:	429a      	cmp	r2, r3
 8007d28:	d242      	bcs.n	8007db0 <UART_RxISR_16BIT_FIFOEN+0x358>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007d2a:	687b      	ldr	r3, [r7, #4]
 8007d2c:	681b      	ldr	r3, [r3, #0]
 8007d2e:	3308      	adds	r3, #8
 8007d30:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d34:	e853 3f00 	ldrex	r3, [r3]
 8007d38:	623b      	str	r3, [r7, #32]
   return(result);
 8007d3a:	6a3b      	ldr	r3, [r7, #32]
 8007d3c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8007d40:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	3308      	adds	r3, #8
 8007d4a:	f8d7 2088 	ldr.w	r2, [r7, #136]	@ 0x88
 8007d4e:	633a      	str	r2, [r7, #48]	@ 0x30
 8007d50:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d52:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8007d54:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007d56:	e841 2300 	strex	r3, r2, [r1]
 8007d5a:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8007d5c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007d5e:	2b00      	cmp	r3, #0
 8007d60:	d1e3      	bne.n	8007d2a <UART_RxISR_16BIT_FIFOEN+0x2d2>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007d62:	687b      	ldr	r3, [r7, #4]
 8007d64:	4a15      	ldr	r2, [pc, #84]	@ (8007dbc <UART_RxISR_16BIT_FIFOEN+0x364>)
 8007d66:	675a      	str	r2, [r3, #116]	@ 0x74

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	e853 3f00 	ldrex	r3, [r3]
 8007d74:	60fb      	str	r3, [r7, #12]
   return(result);
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f043 0320 	orr.w	r3, r3, #32
 8007d7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	461a      	mov	r2, r3
 8007d86:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8007d8a:	61fb      	str	r3, [r7, #28]
 8007d8c:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d8e:	69b9      	ldr	r1, [r7, #24]
 8007d90:	69fa      	ldr	r2, [r7, #28]
 8007d92:	e841 2300 	strex	r3, r2, [r1]
 8007d96:	617b      	str	r3, [r7, #20]
   return(result);
 8007d98:	697b      	ldr	r3, [r7, #20]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d1e4      	bne.n	8007d68 <UART_RxISR_16BIT_FIFOEN+0x310>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007d9e:	e007      	b.n	8007db0 <UART_RxISR_16BIT_FIFOEN+0x358>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	699a      	ldr	r2, [r3, #24]
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	f042 0208 	orr.w	r2, r2, #8
 8007dae:	619a      	str	r2, [r3, #24]
}
 8007db0:	bf00      	nop
 8007db2:	37b8      	adds	r7, #184	@ 0xb8
 8007db4:	46bd      	mov	sp, r7
 8007db6:	bd80      	pop	{r7, pc}
 8007db8:	40008000 	.word	0x40008000
 8007dbc:	08007541 	.word	0x08007541

08007dc0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007dc0:	b480      	push	{r7}
 8007dc2:	b083      	sub	sp, #12
 8007dc4:	af00      	add	r7, sp, #0
 8007dc6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007dd4:	b480      	push	{r7}
 8007dd6:	b083      	sub	sp, #12
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007ddc:	bf00      	nop
 8007dde:	370c      	adds	r7, #12
 8007de0:	46bd      	mov	sp, r7
 8007de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de6:	4770      	bx	lr

08007de8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007de8:	b480      	push	{r7}
 8007dea:	b083      	sub	sp, #12
 8007dec:	af00      	add	r7, sp, #0
 8007dee:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007df0:	bf00      	nop
 8007df2:	370c      	adds	r7, #12
 8007df4:	46bd      	mov	sp, r7
 8007df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dfa:	4770      	bx	lr

08007dfc <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007dfc:	b580      	push	{r7, lr}
 8007dfe:	b084      	sub	sp, #16
 8007e00:	af00      	add	r7, sp, #0
 8007e02:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	4a27      	ldr	r2, [pc, #156]	@ (8007ea8 <HAL_UARTEx_DisableFifoMode+0xac>)
 8007e0a:	4293      	cmp	r3, r2
 8007e0c:	d018      	beq.n	8007e40 <HAL_UARTEx_DisableFifoMode+0x44>
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	681b      	ldr	r3, [r3, #0]
 8007e12:	4a26      	ldr	r2, [pc, #152]	@ (8007eac <HAL_UARTEx_DisableFifoMode+0xb0>)
 8007e14:	4293      	cmp	r3, r2
 8007e16:	d013      	beq.n	8007e40 <HAL_UARTEx_DisableFifoMode+0x44>
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	4a24      	ldr	r2, [pc, #144]	@ (8007eb0 <HAL_UARTEx_DisableFifoMode+0xb4>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d00e      	beq.n	8007e40 <HAL_UARTEx_DisableFifoMode+0x44>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	4a23      	ldr	r2, [pc, #140]	@ (8007eb4 <HAL_UARTEx_DisableFifoMode+0xb8>)
 8007e28:	4293      	cmp	r3, r2
 8007e2a:	d009      	beq.n	8007e40 <HAL_UARTEx_DisableFifoMode+0x44>
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	4a21      	ldr	r2, [pc, #132]	@ (8007eb8 <HAL_UARTEx_DisableFifoMode+0xbc>)
 8007e32:	4293      	cmp	r3, r2
 8007e34:	d004      	beq.n	8007e40 <HAL_UARTEx_DisableFifoMode+0x44>
 8007e36:	f240 2136 	movw	r1, #566	@ 0x236
 8007e3a:	4820      	ldr	r0, [pc, #128]	@ (8007ebc <HAL_UARTEx_DisableFifoMode+0xc0>)
 8007e3c:	f7fa f85e 	bl	8001efc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007e46:	2b01      	cmp	r3, #1
 8007e48:	d101      	bne.n	8007e4e <HAL_UARTEx_DisableFifoMode+0x52>
 8007e4a:	2302      	movs	r3, #2
 8007e4c:	e027      	b.n	8007e9e <HAL_UARTEx_DisableFifoMode+0xa2>
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	2201      	movs	r2, #1
 8007e52:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	2224      	movs	r2, #36	@ 0x24
 8007e5a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	681b      	ldr	r3, [r3, #0]
 8007e64:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007e66:	687b      	ldr	r3, [r7, #4]
 8007e68:	681b      	ldr	r3, [r3, #0]
 8007e6a:	681a      	ldr	r2, [r3, #0]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	f022 0201 	bic.w	r2, r2, #1
 8007e74:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	f023 5300 	bic.w	r3, r3, #536870912	@ 0x20000000
 8007e7c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	2200      	movs	r2, #0
 8007e82:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	68fa      	ldr	r2, [r7, #12]
 8007e8a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2220      	movs	r2, #32
 8007e90:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007e9c:	2300      	movs	r3, #0
}
 8007e9e:	4618      	mov	r0, r3
 8007ea0:	3710      	adds	r7, #16
 8007ea2:	46bd      	mov	sp, r7
 8007ea4:	bd80      	pop	{r7, pc}
 8007ea6:	bf00      	nop
 8007ea8:	40013800 	.word	0x40013800
 8007eac:	40004400 	.word	0x40004400
 8007eb0:	40004800 	.word	0x40004800
 8007eb4:	40004c00 	.word	0x40004c00
 8007eb8:	40008000 	.word	0x40008000
 8007ebc:	0800ae7c 	.word	0x0800ae7c

08007ec0 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007ec0:	b580      	push	{r7, lr}
 8007ec2:	b084      	sub	sp, #16
 8007ec4:	af00      	add	r7, sp, #0
 8007ec6:	6078      	str	r0, [r7, #4]
 8007ec8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	4a38      	ldr	r2, [pc, #224]	@ (8007fb0 <HAL_UARTEx_SetTxFifoThreshold+0xf0>)
 8007ed0:	4293      	cmp	r3, r2
 8007ed2:	d018      	beq.n	8007f06 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007ed4:	687b      	ldr	r3, [r7, #4]
 8007ed6:	681b      	ldr	r3, [r3, #0]
 8007ed8:	4a36      	ldr	r2, [pc, #216]	@ (8007fb4 <HAL_UARTEx_SetTxFifoThreshold+0xf4>)
 8007eda:	4293      	cmp	r3, r2
 8007edc:	d013      	beq.n	8007f06 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007ede:	687b      	ldr	r3, [r7, #4]
 8007ee0:	681b      	ldr	r3, [r3, #0]
 8007ee2:	4a35      	ldr	r2, [pc, #212]	@ (8007fb8 <HAL_UARTEx_SetTxFifoThreshold+0xf8>)
 8007ee4:	4293      	cmp	r3, r2
 8007ee6:	d00e      	beq.n	8007f06 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007ee8:	687b      	ldr	r3, [r7, #4]
 8007eea:	681b      	ldr	r3, [r3, #0]
 8007eec:	4a33      	ldr	r2, [pc, #204]	@ (8007fbc <HAL_UARTEx_SetTxFifoThreshold+0xfc>)
 8007eee:	4293      	cmp	r3, r2
 8007ef0:	d009      	beq.n	8007f06 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	4a32      	ldr	r2, [pc, #200]	@ (8007fc0 <HAL_UARTEx_SetTxFifoThreshold+0x100>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d004      	beq.n	8007f06 <HAL_UARTEx_SetTxFifoThreshold+0x46>
 8007efc:	f44f 7119 	mov.w	r1, #612	@ 0x264
 8007f00:	4830      	ldr	r0, [pc, #192]	@ (8007fc4 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8007f02:	f7f9 fffb 	bl	8001efc <assert_failed>
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));
 8007f06:	683b      	ldr	r3, [r7, #0]
 8007f08:	2b00      	cmp	r3, #0
 8007f0a:	d018      	beq.n	8007f3e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8007f0c:	683b      	ldr	r3, [r7, #0]
 8007f0e:	f1b3 5f00 	cmp.w	r3, #536870912	@ 0x20000000
 8007f12:	d014      	beq.n	8007f3e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8007f14:	683b      	ldr	r3, [r7, #0]
 8007f16:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007f1a:	d010      	beq.n	8007f3e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	f1b3 4fc0 	cmp.w	r3, #1610612736	@ 0x60000000
 8007f22:	d00c      	beq.n	8007f3e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8007f2a:	d008      	beq.n	8007f3e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8007f2c:	683b      	ldr	r3, [r7, #0]
 8007f2e:	f1b3 4f20 	cmp.w	r3, #2684354560	@ 0xa0000000
 8007f32:	d004      	beq.n	8007f3e <HAL_UARTEx_SetTxFifoThreshold+0x7e>
 8007f34:	f240 2165 	movw	r1, #613	@ 0x265
 8007f38:	4822      	ldr	r0, [pc, #136]	@ (8007fc4 <HAL_UARTEx_SetTxFifoThreshold+0x104>)
 8007f3a:	f7f9 ffdf 	bl	8001efc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_UARTEx_SetTxFifoThreshold+0x8c>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e02d      	b.n	8007fa8 <HAL_UARTEx_SetTxFifoThreshold+0xe8>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2224      	movs	r2, #36	@ 0x24
 8007f58:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	681a      	ldr	r2, [r3, #0]
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	f022 0201 	bic.w	r2, r2, #1
 8007f72:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	f023 4160 	bic.w	r1, r3, #3758096384	@ 0xe0000000
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	683a      	ldr	r2, [r7, #0]
 8007f84:	430a      	orrs	r2, r1
 8007f86:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007f88:	6878      	ldr	r0, [r7, #4]
 8007f8a:	f000 f8a1 	bl	80080d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	681b      	ldr	r3, [r3, #0]
 8007f92:	68fa      	ldr	r2, [r7, #12]
 8007f94:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007f96:	687b      	ldr	r3, [r7, #4]
 8007f98:	2220      	movs	r2, #32
 8007f9a:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	2200      	movs	r2, #0
 8007fa2:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 8007fa6:	2300      	movs	r3, #0
}
 8007fa8:	4618      	mov	r0, r3
 8007faa:	3710      	adds	r7, #16
 8007fac:	46bd      	mov	sp, r7
 8007fae:	bd80      	pop	{r7, pc}
 8007fb0:	40013800 	.word	0x40013800
 8007fb4:	40004400 	.word	0x40004400
 8007fb8:	40004800 	.word	0x40004800
 8007fbc:	40004c00 	.word	0x40004c00
 8007fc0:	40008000 	.word	0x40008000
 8007fc4:	0800ae7c 	.word	0x0800ae7c

08007fc8 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007fc8:	b580      	push	{r7, lr}
 8007fca:	b084      	sub	sp, #16
 8007fcc:	af00      	add	r7, sp, #0
 8007fce:	6078      	str	r0, [r7, #4]
 8007fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;

  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	681b      	ldr	r3, [r3, #0]
 8007fd6:	4a38      	ldr	r2, [pc, #224]	@ (80080b8 <HAL_UARTEx_SetRxFifoThreshold+0xf0>)
 8007fd8:	4293      	cmp	r3, r2
 8007fda:	d018      	beq.n	800800e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	4a36      	ldr	r2, [pc, #216]	@ (80080bc <HAL_UARTEx_SetRxFifoThreshold+0xf4>)
 8007fe2:	4293      	cmp	r3, r2
 8007fe4:	d013      	beq.n	800800e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	4a35      	ldr	r2, [pc, #212]	@ (80080c0 <HAL_UARTEx_SetRxFifoThreshold+0xf8>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d00e      	beq.n	800800e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	4a33      	ldr	r2, [pc, #204]	@ (80080c4 <HAL_UARTEx_SetRxFifoThreshold+0xfc>)
 8007ff6:	4293      	cmp	r3, r2
 8007ff8:	d009      	beq.n	800800e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	4a32      	ldr	r2, [pc, #200]	@ (80080c8 <HAL_UARTEx_SetRxFifoThreshold+0x100>)
 8008000:	4293      	cmp	r3, r2
 8008002:	d004      	beq.n	800800e <HAL_UARTEx_SetRxFifoThreshold+0x46>
 8008004:	f240 2195 	movw	r1, #661	@ 0x295
 8008008:	4830      	ldr	r0, [pc, #192]	@ (80080cc <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 800800a:	f7f9 ff77 	bl	8001efc <assert_failed>
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));
 800800e:	683b      	ldr	r3, [r7, #0]
 8008010:	2b00      	cmp	r3, #0
 8008012:	d018      	beq.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8008014:	683b      	ldr	r3, [r7, #0]
 8008016:	f1b3 7f00 	cmp.w	r3, #33554432	@ 0x2000000
 800801a:	d014      	beq.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	f1b3 6f80 	cmp.w	r3, #67108864	@ 0x4000000
 8008022:	d010      	beq.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	f1b3 6fc0 	cmp.w	r3, #100663296	@ 0x6000000
 800802a:	d00c      	beq.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800802c:	683b      	ldr	r3, [r7, #0]
 800802e:	f1b3 6f00 	cmp.w	r3, #134217728	@ 0x8000000
 8008032:	d008      	beq.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 8008034:	683b      	ldr	r3, [r7, #0]
 8008036:	f1b3 6f20 	cmp.w	r3, #167772160	@ 0xa000000
 800803a:	d004      	beq.n	8008046 <HAL_UARTEx_SetRxFifoThreshold+0x7e>
 800803c:	f240 2196 	movw	r1, #662	@ 0x296
 8008040:	4822      	ldr	r0, [pc, #136]	@ (80080cc <HAL_UARTEx_SetRxFifoThreshold+0x104>)
 8008042:	f7f9 ff5b 	bl	8001efc <assert_failed>

  /* Process Locked */
  __HAL_LOCK(huart);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	f893 3084 	ldrb.w	r3, [r3, #132]	@ 0x84
 800804c:	2b01      	cmp	r3, #1
 800804e:	d101      	bne.n	8008054 <HAL_UARTEx_SetRxFifoThreshold+0x8c>
 8008050:	2302      	movs	r3, #2
 8008052:	e02d      	b.n	80080b0 <HAL_UARTEx_SetRxFifoThreshold+0xe8>
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2224      	movs	r2, #36	@ 0x24
 8008060:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	681b      	ldr	r3, [r3, #0]
 8008068:	681b      	ldr	r3, [r3, #0]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	681b      	ldr	r3, [r3, #0]
 8008070:	681a      	ldr	r2, [r3, #0]
 8008072:	687b      	ldr	r3, [r7, #4]
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	f022 0201 	bic.w	r2, r2, #1
 800807a:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	689b      	ldr	r3, [r3, #8]
 8008082:	f023 6160 	bic.w	r1, r3, #234881024	@ 0xe000000
 8008086:	687b      	ldr	r3, [r7, #4]
 8008088:	681b      	ldr	r3, [r3, #0]
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	430a      	orrs	r2, r1
 800808e:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8008090:	6878      	ldr	r0, [r7, #4]
 8008092:	f000 f81d 	bl	80080d0 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	681b      	ldr	r3, [r3, #0]
 800809a:	68fa      	ldr	r2, [r7, #12]
 800809c:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2220      	movs	r2, #32
 80080a2:	f8c3 2088 	str.w	r2, [r3, #136]	@ 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	2200      	movs	r2, #0
 80080aa:	f883 2084 	strb.w	r2, [r3, #132]	@ 0x84

  return HAL_OK;
 80080ae:	2300      	movs	r3, #0
}
 80080b0:	4618      	mov	r0, r3
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}
 80080b8:	40013800 	.word	0x40013800
 80080bc:	40004400 	.word	0x40004400
 80080c0:	40004800 	.word	0x40004800
 80080c4:	40004c00 	.word	0x40004c00
 80080c8:	40008000 	.word	0x40008000
 80080cc:	0800ae7c 	.word	0x0800ae7c

080080d0 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80080d0:	b480      	push	{r7}
 80080d2:	b085      	sub	sp, #20
 80080d4:	af00      	add	r7, sp, #0
 80080d6:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d108      	bne.n	80080f2 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2201      	movs	r2, #1
 80080e4:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = 1U;
 80080e8:	687b      	ldr	r3, [r7, #4]
 80080ea:	2201      	movs	r2, #1
 80080ec:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80080f0:	e031      	b.n	8008156 <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80080f2:	2308      	movs	r3, #8
 80080f4:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80080f6:	2308      	movs	r3, #8
 80080f8:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	689b      	ldr	r3, [r3, #8]
 8008100:	0e5b      	lsrs	r3, r3, #25
 8008102:	b2db      	uxtb	r3, r3
 8008104:	f003 0307 	and.w	r3, r3, #7
 8008108:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	689b      	ldr	r3, [r3, #8]
 8008110:	0f5b      	lsrs	r3, r3, #29
 8008112:	b2db      	uxtb	r3, r3
 8008114:	f003 0307 	and.w	r3, r3, #7
 8008118:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800811a:	7bbb      	ldrb	r3, [r7, #14]
 800811c:	7b3a      	ldrb	r2, [r7, #12]
 800811e:	4911      	ldr	r1, [pc, #68]	@ (8008164 <UARTEx_SetNbDataToProcess+0x94>)
 8008120:	5c8a      	ldrb	r2, [r1, r2]
 8008122:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8008126:	7b3a      	ldrb	r2, [r7, #12]
 8008128:	490f      	ldr	r1, [pc, #60]	@ (8008168 <UARTEx_SetNbDataToProcess+0x98>)
 800812a:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800812c:	fb93 f3f2 	sdiv	r3, r3, r2
 8008130:	b29a      	uxth	r2, r3
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	f8a3 206a 	strh.w	r2, [r3, #106]	@ 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8008138:	7bfb      	ldrb	r3, [r7, #15]
 800813a:	7b7a      	ldrb	r2, [r7, #13]
 800813c:	4909      	ldr	r1, [pc, #36]	@ (8008164 <UARTEx_SetNbDataToProcess+0x94>)
 800813e:	5c8a      	ldrb	r2, [r1, r2]
 8008140:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8008144:	7b7a      	ldrb	r2, [r7, #13]
 8008146:	4908      	ldr	r1, [pc, #32]	@ (8008168 <UARTEx_SetNbDataToProcess+0x98>)
 8008148:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800814a:	fb93 f3f2 	sdiv	r3, r3, r2
 800814e:	b29a      	uxth	r2, r3
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	f8a3 2068 	strh.w	r2, [r3, #104]	@ 0x68
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	0800b48c 	.word	0x0800b48c
 8008168:	0800b494 	.word	0x0800b494

0800816c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800816c:	b480      	push	{r7}
 800816e:	b085      	sub	sp, #20
 8008170:	af00      	add	r7, sp, #0
 8008172:	4603      	mov	r3, r0
 8008174:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 8008176:	2300      	movs	r3, #0
 8008178:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800817a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800817e:	2b84      	cmp	r3, #132	@ 0x84
 8008180:	d005      	beq.n	800818e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 8008182:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	4413      	add	r3, r2
 800818a:	3303      	adds	r3, #3
 800818c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800818e:	68fb      	ldr	r3, [r7, #12]
}
 8008190:	4618      	mov	r0, r3
 8008192:	3714      	adds	r7, #20
 8008194:	46bd      	mov	sp, r7
 8008196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800819a:	4770      	bx	lr

0800819c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800819c:	b580      	push	{r7, lr}
 800819e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 80081a0:	f000 fa5c 	bl	800865c <vTaskStartScheduler>
  
  return osOK;
 80081a4:	2300      	movs	r3, #0
}
 80081a6:	4618      	mov	r0, r3
 80081a8:	bd80      	pop	{r7, pc}

080081aa <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 80081aa:	b5f0      	push	{r4, r5, r6, r7, lr}
 80081ac:	b087      	sub	sp, #28
 80081ae:	af02      	add	r7, sp, #8
 80081b0:	6078      	str	r0, [r7, #4]
 80081b2:	6039      	str	r1, [r7, #0]

    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
              thread_def->buffer, thread_def->controlblock);
#else
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	685c      	ldr	r4, [r3, #4]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681d      	ldr	r5, [r3, #0]
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081bc:	687b      	ldr	r3, [r7, #4]
 80081be:	691b      	ldr	r3, [r3, #16]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081c0:	b29e      	uxth	r6, r3
                   thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
  if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 80081c8:	4618      	mov	r0, r3
 80081ca:	f7ff ffcf 	bl	800816c <makeFreeRtosPriority>
 80081ce:	4602      	mov	r2, r0
 80081d0:	f107 030c 	add.w	r3, r7, #12
 80081d4:	9301      	str	r3, [sp, #4]
 80081d6:	9200      	str	r2, [sp, #0]
 80081d8:	683b      	ldr	r3, [r7, #0]
 80081da:	4632      	mov	r2, r6
 80081dc:	4629      	mov	r1, r5
 80081de:	4620      	mov	r0, r4
 80081e0:	f000 f8d2 	bl	8008388 <xTaskCreate>
 80081e4:	4603      	mov	r3, r0
 80081e6:	2b01      	cmp	r3, #1
 80081e8:	d001      	beq.n	80081ee <osThreadCreate+0x44>
                   &handle) != pdPASS)  {
    return NULL;
 80081ea:	2300      	movs	r3, #0
 80081ec:	e000      	b.n	80081f0 <osThreadCreate+0x46>
  }     
#endif
  
  return handle;
 80081ee:	68fb      	ldr	r3, [r7, #12]
}
 80081f0:	4618      	mov	r0, r3
 80081f2:	3714      	adds	r7, #20
 80081f4:	46bd      	mov	sp, r7
 80081f6:	bdf0      	pop	{r4, r5, r6, r7, pc}

080081f8 <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 80081f8:	b580      	push	{r7, lr}
 80081fa:	b084      	sub	sp, #16
 80081fc:	af00      	add	r7, sp, #0
 80081fe:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	2b00      	cmp	r3, #0
 8008208:	d001      	beq.n	800820e <osDelay+0x16>
 800820a:	68fb      	ldr	r3, [r7, #12]
 800820c:	e000      	b.n	8008210 <osDelay+0x18>
 800820e:	2301      	movs	r3, #1
 8008210:	4618      	mov	r0, r3
 8008212:	f000 f9ed 	bl	80085f0 <vTaskDelay>
  
  return osOK;
 8008216:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 8008218:	4618      	mov	r0, r3
 800821a:	3710      	adds	r7, #16
 800821c:	46bd      	mov	sp, r7
 800821e:	bd80      	pop	{r7, pc}

08008220 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008220:	b480      	push	{r7}
 8008222:	b083      	sub	sp, #12
 8008224:	af00      	add	r7, sp, #0
 8008226:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	f103 0208 	add.w	r2, r3, #8
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	f04f 32ff 	mov.w	r2, #4294967295
 8008238:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	f103 0208 	add.w	r2, r3, #8
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	f103 0208 	add.w	r2, r3, #8
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	2200      	movs	r2, #0
 8008252:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008254:	bf00      	nop
 8008256:	370c      	adds	r7, #12
 8008258:	46bd      	mov	sp, r7
 800825a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825e:	4770      	bx	lr

08008260 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008260:	b480      	push	{r7}
 8008262:	b083      	sub	sp, #12
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	2200      	movs	r2, #0
 800826c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800826e:	bf00      	nop
 8008270:	370c      	adds	r7, #12
 8008272:	46bd      	mov	sp, r7
 8008274:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008278:	4770      	bx	lr

0800827a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800827a:	b480      	push	{r7}
 800827c:	b085      	sub	sp, #20
 800827e:	af00      	add	r7, sp, #0
 8008280:	6078      	str	r0, [r7, #4]
 8008282:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	685b      	ldr	r3, [r3, #4]
 8008288:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800828a:	683b      	ldr	r3, [r7, #0]
 800828c:	68fa      	ldr	r2, [r7, #12]
 800828e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	689a      	ldr	r2, [r3, #8]
 8008294:	683b      	ldr	r3, [r7, #0]
 8008296:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	689b      	ldr	r3, [r3, #8]
 800829c:	683a      	ldr	r2, [r7, #0]
 800829e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80082a0:	68fb      	ldr	r3, [r7, #12]
 80082a2:	683a      	ldr	r2, [r7, #0]
 80082a4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80082a6:	683b      	ldr	r3, [r7, #0]
 80082a8:	687a      	ldr	r2, [r7, #4]
 80082aa:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	1c5a      	adds	r2, r3, #1
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	601a      	str	r2, [r3, #0]
}
 80082b6:	bf00      	nop
 80082b8:	3714      	adds	r7, #20
 80082ba:	46bd      	mov	sp, r7
 80082bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c0:	4770      	bx	lr

080082c2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80082c2:	b480      	push	{r7}
 80082c4:	b085      	sub	sp, #20
 80082c6:	af00      	add	r7, sp, #0
 80082c8:	6078      	str	r0, [r7, #4]
 80082ca:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80082d2:	68bb      	ldr	r3, [r7, #8]
 80082d4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80082d8:	d103      	bne.n	80082e2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	691b      	ldr	r3, [r3, #16]
 80082de:	60fb      	str	r3, [r7, #12]
 80082e0:	e00c      	b.n	80082fc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	3308      	adds	r3, #8
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	e002      	b.n	80082f0 <vListInsert+0x2e>
 80082ea:	68fb      	ldr	r3, [r7, #12]
 80082ec:	685b      	ldr	r3, [r3, #4]
 80082ee:	60fb      	str	r3, [r7, #12]
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	685b      	ldr	r3, [r3, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68ba      	ldr	r2, [r7, #8]
 80082f8:	429a      	cmp	r2, r3
 80082fa:	d2f6      	bcs.n	80082ea <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80082fc:	68fb      	ldr	r3, [r7, #12]
 80082fe:	685a      	ldr	r2, [r3, #4]
 8008300:	683b      	ldr	r3, [r7, #0]
 8008302:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008304:	683b      	ldr	r3, [r7, #0]
 8008306:	685b      	ldr	r3, [r3, #4]
 8008308:	683a      	ldr	r2, [r7, #0]
 800830a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800830c:	683b      	ldr	r3, [r7, #0]
 800830e:	68fa      	ldr	r2, [r7, #12]
 8008310:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	683a      	ldr	r2, [r7, #0]
 8008316:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008318:	683b      	ldr	r3, [r7, #0]
 800831a:	687a      	ldr	r2, [r7, #4]
 800831c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	681b      	ldr	r3, [r3, #0]
 8008322:	1c5a      	adds	r2, r3, #1
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	601a      	str	r2, [r3, #0]
}
 8008328:	bf00      	nop
 800832a:	3714      	adds	r7, #20
 800832c:	46bd      	mov	sp, r7
 800832e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008332:	4770      	bx	lr

08008334 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008334:	b480      	push	{r7}
 8008336:	b085      	sub	sp, #20
 8008338:	af00      	add	r7, sp, #0
 800833a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	691b      	ldr	r3, [r3, #16]
 8008340:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	685b      	ldr	r3, [r3, #4]
 8008346:	687a      	ldr	r2, [r7, #4]
 8008348:	6892      	ldr	r2, [r2, #8]
 800834a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	689b      	ldr	r3, [r3, #8]
 8008350:	687a      	ldr	r2, [r7, #4]
 8008352:	6852      	ldr	r2, [r2, #4]
 8008354:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	685b      	ldr	r3, [r3, #4]
 800835a:	687a      	ldr	r2, [r7, #4]
 800835c:	429a      	cmp	r2, r3
 800835e:	d103      	bne.n	8008368 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	689a      	ldr	r2, [r3, #8]
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	2200      	movs	r2, #0
 800836c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	681b      	ldr	r3, [r3, #0]
 8008372:	1e5a      	subs	r2, r3, #1
 8008374:	68fb      	ldr	r3, [r7, #12]
 8008376:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	681b      	ldr	r3, [r3, #0]
}
 800837c:	4618      	mov	r0, r3
 800837e:	3714      	adds	r7, #20
 8008380:	46bd      	mov	sp, r7
 8008382:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008386:	4770      	bx	lr

08008388 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8008388:	b580      	push	{r7, lr}
 800838a:	b08c      	sub	sp, #48	@ 0x30
 800838c:	af04      	add	r7, sp, #16
 800838e:	60f8      	str	r0, [r7, #12]
 8008390:	60b9      	str	r1, [r7, #8]
 8008392:	603b      	str	r3, [r7, #0]
 8008394:	4613      	mov	r3, r2
 8008396:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8008398:	88fb      	ldrh	r3, [r7, #6]
 800839a:	009b      	lsls	r3, r3, #2
 800839c:	4618      	mov	r0, r3
 800839e:	f000 fe93 	bl	80090c8 <pvPortMalloc>
 80083a2:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80083a4:	697b      	ldr	r3, [r7, #20]
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d00e      	beq.n	80083c8 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80083aa:	2054      	movs	r0, #84	@ 0x54
 80083ac:	f000 fe8c 	bl	80090c8 <pvPortMalloc>
 80083b0:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80083b2:	69fb      	ldr	r3, [r7, #28]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d003      	beq.n	80083c0 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 80083b8:	69fb      	ldr	r3, [r7, #28]
 80083ba:	697a      	ldr	r2, [r7, #20]
 80083bc:	631a      	str	r2, [r3, #48]	@ 0x30
 80083be:	e005      	b.n	80083cc <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 80083c0:	6978      	ldr	r0, [r7, #20]
 80083c2:	f000 fe93 	bl	80090ec <vPortFree>
 80083c6:	e001      	b.n	80083cc <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80083c8:	2300      	movs	r3, #0
 80083ca:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80083cc:	69fb      	ldr	r3, [r7, #28]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d013      	beq.n	80083fa <xTaskCreate+0x72>
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80083d2:	88fa      	ldrh	r2, [r7, #6]
 80083d4:	2300      	movs	r3, #0
 80083d6:	9303      	str	r3, [sp, #12]
 80083d8:	69fb      	ldr	r3, [r7, #28]
 80083da:	9302      	str	r3, [sp, #8]
 80083dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80083de:	9301      	str	r3, [sp, #4]
 80083e0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80083e2:	9300      	str	r3, [sp, #0]
 80083e4:	683b      	ldr	r3, [r7, #0]
 80083e6:	68b9      	ldr	r1, [r7, #8]
 80083e8:	68f8      	ldr	r0, [r7, #12]
 80083ea:	f000 f80e 	bl	800840a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80083ee:	69f8      	ldr	r0, [r7, #28]
 80083f0:	f000 f894 	bl	800851c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80083f4:	2301      	movs	r3, #1
 80083f6:	61bb      	str	r3, [r7, #24]
 80083f8:	e002      	b.n	8008400 <xTaskCreate+0x78>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80083fa:	f04f 33ff 	mov.w	r3, #4294967295
 80083fe:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8008400:	69bb      	ldr	r3, [r7, #24]
	}
 8008402:	4618      	mov	r0, r3
 8008404:	3720      	adds	r7, #32
 8008406:	46bd      	mov	sp, r7
 8008408:	bd80      	pop	{r7, pc}

0800840a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800840a:	b580      	push	{r7, lr}
 800840c:	b088      	sub	sp, #32
 800840e:	af00      	add	r7, sp, #0
 8008410:	60f8      	str	r0, [r7, #12]
 8008412:	60b9      	str	r1, [r7, #8]
 8008414:	607a      	str	r2, [r7, #4]
 8008416:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8008418:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800841a:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8008422:	3b01      	subs	r3, #1
 8008424:	009b      	lsls	r3, r3, #2
 8008426:	4413      	add	r3, r2
 8008428:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800842a:	69bb      	ldr	r3, [r7, #24]
 800842c:	f023 0307 	bic.w	r3, r3, #7
 8008430:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	f003 0307 	and.w	r3, r3, #7
 8008438:	2b00      	cmp	r3, #0
 800843a:	d00b      	beq.n	8008454 <prvInitialiseNewTask+0x4a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800843c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008440:	f383 8811 	msr	BASEPRI, r3
 8008444:	f3bf 8f6f 	isb	sy
 8008448:	f3bf 8f4f 	dsb	sy
 800844c:	617b      	str	r3, [r7, #20]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800844e:	bf00      	nop
 8008450:	bf00      	nop
 8008452:	e7fd      	b.n	8008450 <prvInitialiseNewTask+0x46>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8008454:	68bb      	ldr	r3, [r7, #8]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d01f      	beq.n	800849a <prvInitialiseNewTask+0x90>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800845a:	2300      	movs	r3, #0
 800845c:	61fb      	str	r3, [r7, #28]
 800845e:	e012      	b.n	8008486 <prvInitialiseNewTask+0x7c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8008460:	68ba      	ldr	r2, [r7, #8]
 8008462:	69fb      	ldr	r3, [r7, #28]
 8008464:	4413      	add	r3, r2
 8008466:	7819      	ldrb	r1, [r3, #0]
 8008468:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800846a:	69fb      	ldr	r3, [r7, #28]
 800846c:	4413      	add	r3, r2
 800846e:	3334      	adds	r3, #52	@ 0x34
 8008470:	460a      	mov	r2, r1
 8008472:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8008474:	68ba      	ldr	r2, [r7, #8]
 8008476:	69fb      	ldr	r3, [r7, #28]
 8008478:	4413      	add	r3, r2
 800847a:	781b      	ldrb	r3, [r3, #0]
 800847c:	2b00      	cmp	r3, #0
 800847e:	d006      	beq.n	800848e <prvInitialiseNewTask+0x84>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8008480:	69fb      	ldr	r3, [r7, #28]
 8008482:	3301      	adds	r3, #1
 8008484:	61fb      	str	r3, [r7, #28]
 8008486:	69fb      	ldr	r3, [r7, #28]
 8008488:	2b0f      	cmp	r3, #15
 800848a:	d9e9      	bls.n	8008460 <prvInitialiseNewTask+0x56>
 800848c:	e000      	b.n	8008490 <prvInitialiseNewTask+0x86>
			{
				break;
 800848e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8008490:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008492:	2200      	movs	r2, #0
 8008494:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8008498:	e003      	b.n	80084a2 <prvInitialiseNewTask+0x98>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800849a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800849c:	2200      	movs	r2, #0
 800849e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 80084a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084a4:	2b06      	cmp	r3, #6
 80084a6:	d901      	bls.n	80084ac <prvInitialiseNewTask+0xa2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 80084a8:	2306      	movs	r3, #6
 80084aa:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80084ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ae:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084b0:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80084b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084b4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80084b6:	645a      	str	r2, [r3, #68]	@ 0x44
		pxNewTCB->uxMutexesHeld = 0;
 80084b8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ba:	2200      	movs	r2, #0
 80084bc:	649a      	str	r2, [r3, #72]	@ 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80084be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084c0:	3304      	adds	r3, #4
 80084c2:	4618      	mov	r0, r3
 80084c4:	f7ff fecc 	bl	8008260 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80084c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ca:	3318      	adds	r3, #24
 80084cc:	4618      	mov	r0, r3
 80084ce:	f7ff fec7 	bl	8008260 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80084d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084d4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084d6:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80084da:	f1c3 0207 	rsb	r2, r3, #7
 80084de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e0:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80084e2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084e4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80084e6:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80084e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084ea:	2200      	movs	r2, #0
 80084ec:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80084ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80084f0:	2200      	movs	r2, #0
 80084f2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80084f6:	683a      	ldr	r2, [r7, #0]
 80084f8:	68f9      	ldr	r1, [r7, #12]
 80084fa:	69b8      	ldr	r0, [r7, #24]
 80084fc:	f000 fbd6 	bl	8008cac <pxPortInitialiseStack>
 8008500:	4602      	mov	r2, r0
 8008502:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8008504:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8008506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8008508:	2b00      	cmp	r3, #0
 800850a:	d002      	beq.n	8008512 <prvInitialiseNewTask+0x108>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800850c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800850e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8008510:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008512:	bf00      	nop
 8008514:	3720      	adds	r7, #32
 8008516:	46bd      	mov	sp, r7
 8008518:	bd80      	pop	{r7, pc}
	...

0800851c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8008524:	f000 fcf0 	bl	8008f08 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8008528:	4b2a      	ldr	r3, [pc, #168]	@ (80085d4 <prvAddNewTaskToReadyList+0xb8>)
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	3301      	adds	r3, #1
 800852e:	4a29      	ldr	r2, [pc, #164]	@ (80085d4 <prvAddNewTaskToReadyList+0xb8>)
 8008530:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8008532:	4b29      	ldr	r3, [pc, #164]	@ (80085d8 <prvAddNewTaskToReadyList+0xbc>)
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	2b00      	cmp	r3, #0
 8008538:	d109      	bne.n	800854e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800853a:	4a27      	ldr	r2, [pc, #156]	@ (80085d8 <prvAddNewTaskToReadyList+0xbc>)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8008540:	4b24      	ldr	r3, [pc, #144]	@ (80085d4 <prvAddNewTaskToReadyList+0xb8>)
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	2b01      	cmp	r3, #1
 8008546:	d110      	bne.n	800856a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8008548:	f000 faac 	bl	8008aa4 <prvInitialiseTaskLists>
 800854c:	e00d      	b.n	800856a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800854e:	4b23      	ldr	r3, [pc, #140]	@ (80085dc <prvAddNewTaskToReadyList+0xc0>)
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	2b00      	cmp	r3, #0
 8008554:	d109      	bne.n	800856a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8008556:	4b20      	ldr	r3, [pc, #128]	@ (80085d8 <prvAddNewTaskToReadyList+0xbc>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800855c:	687b      	ldr	r3, [r7, #4]
 800855e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008560:	429a      	cmp	r2, r3
 8008562:	d802      	bhi.n	800856a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8008564:	4a1c      	ldr	r2, [pc, #112]	@ (80085d8 <prvAddNewTaskToReadyList+0xbc>)
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800856a:	4b1d      	ldr	r3, [pc, #116]	@ (80085e0 <prvAddNewTaskToReadyList+0xc4>)
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	3301      	adds	r3, #1
 8008570:	4a1b      	ldr	r2, [pc, #108]	@ (80085e0 <prvAddNewTaskToReadyList+0xc4>)
 8008572:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008578:	2201      	movs	r2, #1
 800857a:	409a      	lsls	r2, r3
 800857c:	4b19      	ldr	r3, [pc, #100]	@ (80085e4 <prvAddNewTaskToReadyList+0xc8>)
 800857e:	681b      	ldr	r3, [r3, #0]
 8008580:	4313      	orrs	r3, r2
 8008582:	4a18      	ldr	r2, [pc, #96]	@ (80085e4 <prvAddNewTaskToReadyList+0xc8>)
 8008584:	6013      	str	r3, [r2, #0]
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800858a:	4613      	mov	r3, r2
 800858c:	009b      	lsls	r3, r3, #2
 800858e:	4413      	add	r3, r2
 8008590:	009b      	lsls	r3, r3, #2
 8008592:	4a15      	ldr	r2, [pc, #84]	@ (80085e8 <prvAddNewTaskToReadyList+0xcc>)
 8008594:	441a      	add	r2, r3
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	3304      	adds	r3, #4
 800859a:	4619      	mov	r1, r3
 800859c:	4610      	mov	r0, r2
 800859e:	f7ff fe6c 	bl	800827a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80085a2:	f000 fce3 	bl	8008f6c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80085a6:	4b0d      	ldr	r3, [pc, #52]	@ (80085dc <prvAddNewTaskToReadyList+0xc0>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	2b00      	cmp	r3, #0
 80085ac:	d00e      	beq.n	80085cc <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80085ae:	4b0a      	ldr	r3, [pc, #40]	@ (80085d8 <prvAddNewTaskToReadyList+0xbc>)
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80085b8:	429a      	cmp	r2, r3
 80085ba:	d207      	bcs.n	80085cc <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80085bc:	4b0b      	ldr	r3, [pc, #44]	@ (80085ec <prvAddNewTaskToReadyList+0xd0>)
 80085be:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80085c2:	601a      	str	r2, [r3, #0]
 80085c4:	f3bf 8f4f 	dsb	sy
 80085c8:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80085cc:	bf00      	nop
 80085ce:	3708      	adds	r7, #8
 80085d0:	46bd      	mov	sp, r7
 80085d2:	bd80      	pop	{r7, pc}
 80085d4:	200008c4 	.word	0x200008c4
 80085d8:	200007c4 	.word	0x200007c4
 80085dc:	200008d0 	.word	0x200008d0
 80085e0:	200008e0 	.word	0x200008e0
 80085e4:	200008cc 	.word	0x200008cc
 80085e8:	200007c8 	.word	0x200007c8
 80085ec:	e000ed04 	.word	0xe000ed04

080085f0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80085f0:	b580      	push	{r7, lr}
 80085f2:	b084      	sub	sp, #16
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80085f8:	2300      	movs	r3, #0
 80085fa:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	d018      	beq.n	8008634 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8008602:	4b14      	ldr	r3, [pc, #80]	@ (8008654 <vTaskDelay+0x64>)
 8008604:	681b      	ldr	r3, [r3, #0]
 8008606:	2b00      	cmp	r3, #0
 8008608:	d00b      	beq.n	8008622 <vTaskDelay+0x32>
	__asm volatile
 800860a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800860e:	f383 8811 	msr	BASEPRI, r3
 8008612:	f3bf 8f6f 	isb	sy
 8008616:	f3bf 8f4f 	dsb	sy
 800861a:	60bb      	str	r3, [r7, #8]
}
 800861c:	bf00      	nop
 800861e:	bf00      	nop
 8008620:	e7fd      	b.n	800861e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8008622:	f000 f865 	bl	80086f0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8008626:	2100      	movs	r1, #0
 8008628:	6878      	ldr	r0, [r7, #4]
 800862a:	f000 fad9 	bl	8008be0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800862e:	f000 f86d 	bl	800870c <xTaskResumeAll>
 8008632:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8008634:	68fb      	ldr	r3, [r7, #12]
 8008636:	2b00      	cmp	r3, #0
 8008638:	d107      	bne.n	800864a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800863a:	4b07      	ldr	r3, [pc, #28]	@ (8008658 <vTaskDelay+0x68>)
 800863c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008640:	601a      	str	r2, [r3, #0]
 8008642:	f3bf 8f4f 	dsb	sy
 8008646:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800864a:	bf00      	nop
 800864c:	3710      	adds	r7, #16
 800864e:	46bd      	mov	sp, r7
 8008650:	bd80      	pop	{r7, pc}
 8008652:	bf00      	nop
 8008654:	200008ec 	.word	0x200008ec
 8008658:	e000ed04 	.word	0xe000ed04

0800865c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b086      	sub	sp, #24
 8008660:	af02      	add	r7, sp, #8
		}
	}
	#else
	{
		/* The Idle task is being created using dynamically allocated RAM. */
		xReturn = xTaskCreate(	prvIdleTask,
 8008662:	4b1d      	ldr	r3, [pc, #116]	@ (80086d8 <vTaskStartScheduler+0x7c>)
 8008664:	9301      	str	r3, [sp, #4]
 8008666:	2300      	movs	r3, #0
 8008668:	9300      	str	r3, [sp, #0]
 800866a:	2300      	movs	r3, #0
 800866c:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 8008670:	491a      	ldr	r1, [pc, #104]	@ (80086dc <vTaskStartScheduler+0x80>)
 8008672:	481b      	ldr	r0, [pc, #108]	@ (80086e0 <vTaskStartScheduler+0x84>)
 8008674:	f7ff fe88 	bl	8008388 <xTaskCreate>
 8008678:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800867a:	68fb      	ldr	r3, [r7, #12]
 800867c:	2b01      	cmp	r3, #1
 800867e:	d116      	bne.n	80086ae <vTaskStartScheduler+0x52>
	__asm volatile
 8008680:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008684:	f383 8811 	msr	BASEPRI, r3
 8008688:	f3bf 8f6f 	isb	sy
 800868c:	f3bf 8f4f 	dsb	sy
 8008690:	60bb      	str	r3, [r7, #8]
}
 8008692:	bf00      	nop
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8008694:	4b13      	ldr	r3, [pc, #76]	@ (80086e4 <vTaskStartScheduler+0x88>)
 8008696:	f04f 32ff 	mov.w	r2, #4294967295
 800869a:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800869c:	4b12      	ldr	r3, [pc, #72]	@ (80086e8 <vTaskStartScheduler+0x8c>)
 800869e:	2201      	movs	r2, #1
 80086a0:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80086a2:	4b12      	ldr	r3, [pc, #72]	@ (80086ec <vTaskStartScheduler+0x90>)
 80086a4:	2200      	movs	r2, #0
 80086a6:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80086a8:	f000 fb8a 	bl	8008dc0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80086ac:	e00f      	b.n	80086ce <vTaskStartScheduler+0x72>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80086ae:	68fb      	ldr	r3, [r7, #12]
 80086b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80086b4:	d10b      	bne.n	80086ce <vTaskStartScheduler+0x72>
	__asm volatile
 80086b6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80086ba:	f383 8811 	msr	BASEPRI, r3
 80086be:	f3bf 8f6f 	isb	sy
 80086c2:	f3bf 8f4f 	dsb	sy
 80086c6:	607b      	str	r3, [r7, #4]
}
 80086c8:	bf00      	nop
 80086ca:	bf00      	nop
 80086cc:	e7fd      	b.n	80086ca <vTaskStartScheduler+0x6e>
}
 80086ce:	bf00      	nop
 80086d0:	3710      	adds	r7, #16
 80086d2:	46bd      	mov	sp, r7
 80086d4:	bd80      	pop	{r7, pc}
 80086d6:	bf00      	nop
 80086d8:	200008e8 	.word	0x200008e8
 80086dc:	0800aeb8 	.word	0x0800aeb8
 80086e0:	08008a75 	.word	0x08008a75
 80086e4:	200008e4 	.word	0x200008e4
 80086e8:	200008d0 	.word	0x200008d0
 80086ec:	200008c8 	.word	0x200008c8

080086f0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80086f0:	b480      	push	{r7}
 80086f2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80086f4:	4b04      	ldr	r3, [pc, #16]	@ (8008708 <vTaskSuspendAll+0x18>)
 80086f6:	681b      	ldr	r3, [r3, #0]
 80086f8:	3301      	adds	r3, #1
 80086fa:	4a03      	ldr	r2, [pc, #12]	@ (8008708 <vTaskSuspendAll+0x18>)
 80086fc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80086fe:	bf00      	nop
 8008700:	46bd      	mov	sp, r7
 8008702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008706:	4770      	bx	lr
 8008708:	200008ec 	.word	0x200008ec

0800870c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800870c:	b580      	push	{r7, lr}
 800870e:	b084      	sub	sp, #16
 8008710:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8008716:	2300      	movs	r3, #0
 8008718:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800871a:	4b42      	ldr	r3, [pc, #264]	@ (8008824 <xTaskResumeAll+0x118>)
 800871c:	681b      	ldr	r3, [r3, #0]
 800871e:	2b00      	cmp	r3, #0
 8008720:	d10b      	bne.n	800873a <xTaskResumeAll+0x2e>
	__asm volatile
 8008722:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008726:	f383 8811 	msr	BASEPRI, r3
 800872a:	f3bf 8f6f 	isb	sy
 800872e:	f3bf 8f4f 	dsb	sy
 8008732:	603b      	str	r3, [r7, #0]
}
 8008734:	bf00      	nop
 8008736:	bf00      	nop
 8008738:	e7fd      	b.n	8008736 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800873a:	f000 fbe5 	bl	8008f08 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800873e:	4b39      	ldr	r3, [pc, #228]	@ (8008824 <xTaskResumeAll+0x118>)
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	3b01      	subs	r3, #1
 8008744:	4a37      	ldr	r2, [pc, #220]	@ (8008824 <xTaskResumeAll+0x118>)
 8008746:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008748:	4b36      	ldr	r3, [pc, #216]	@ (8008824 <xTaskResumeAll+0x118>)
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	2b00      	cmp	r3, #0
 800874e:	d161      	bne.n	8008814 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8008750:	4b35      	ldr	r3, [pc, #212]	@ (8008828 <xTaskResumeAll+0x11c>)
 8008752:	681b      	ldr	r3, [r3, #0]
 8008754:	2b00      	cmp	r3, #0
 8008756:	d05d      	beq.n	8008814 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8008758:	e02e      	b.n	80087b8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800875a:	4b34      	ldr	r3, [pc, #208]	@ (800882c <xTaskResumeAll+0x120>)
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	68db      	ldr	r3, [r3, #12]
 8008760:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008762:	68fb      	ldr	r3, [r7, #12]
 8008764:	3318      	adds	r3, #24
 8008766:	4618      	mov	r0, r3
 8008768:	f7ff fde4 	bl	8008334 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800876c:	68fb      	ldr	r3, [r7, #12]
 800876e:	3304      	adds	r3, #4
 8008770:	4618      	mov	r0, r3
 8008772:	f7ff fddf 	bl	8008334 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8008776:	68fb      	ldr	r3, [r7, #12]
 8008778:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800877a:	2201      	movs	r2, #1
 800877c:	409a      	lsls	r2, r3
 800877e:	4b2c      	ldr	r3, [pc, #176]	@ (8008830 <xTaskResumeAll+0x124>)
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	4313      	orrs	r3, r2
 8008784:	4a2a      	ldr	r2, [pc, #168]	@ (8008830 <xTaskResumeAll+0x124>)
 8008786:	6013      	str	r3, [r2, #0]
 8008788:	68fb      	ldr	r3, [r7, #12]
 800878a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800878c:	4613      	mov	r3, r2
 800878e:	009b      	lsls	r3, r3, #2
 8008790:	4413      	add	r3, r2
 8008792:	009b      	lsls	r3, r3, #2
 8008794:	4a27      	ldr	r2, [pc, #156]	@ (8008834 <xTaskResumeAll+0x128>)
 8008796:	441a      	add	r2, r3
 8008798:	68fb      	ldr	r3, [r7, #12]
 800879a:	3304      	adds	r3, #4
 800879c:	4619      	mov	r1, r3
 800879e:	4610      	mov	r0, r2
 80087a0:	f7ff fd6b 	bl	800827a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80087a4:	68fb      	ldr	r3, [r7, #12]
 80087a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80087a8:	4b23      	ldr	r3, [pc, #140]	@ (8008838 <xTaskResumeAll+0x12c>)
 80087aa:	681b      	ldr	r3, [r3, #0]
 80087ac:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80087ae:	429a      	cmp	r2, r3
 80087b0:	d302      	bcc.n	80087b8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80087b2:	4b22      	ldr	r3, [pc, #136]	@ (800883c <xTaskResumeAll+0x130>)
 80087b4:	2201      	movs	r2, #1
 80087b6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80087b8:	4b1c      	ldr	r3, [pc, #112]	@ (800882c <xTaskResumeAll+0x120>)
 80087ba:	681b      	ldr	r3, [r3, #0]
 80087bc:	2b00      	cmp	r3, #0
 80087be:	d1cc      	bne.n	800875a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80087c0:	68fb      	ldr	r3, [r7, #12]
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d001      	beq.n	80087ca <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80087c6:	f000 f9eb 	bl	8008ba0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80087ca:	4b1d      	ldr	r3, [pc, #116]	@ (8008840 <xTaskResumeAll+0x134>)
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d010      	beq.n	80087f8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80087d6:	f000 f837 	bl	8008848 <xTaskIncrementTick>
 80087da:	4603      	mov	r3, r0
 80087dc:	2b00      	cmp	r3, #0
 80087de:	d002      	beq.n	80087e6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80087e0:	4b16      	ldr	r3, [pc, #88]	@ (800883c <xTaskResumeAll+0x130>)
 80087e2:	2201      	movs	r2, #1
 80087e4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	3b01      	subs	r3, #1
 80087ea:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2b00      	cmp	r3, #0
 80087f0:	d1f1      	bne.n	80087d6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80087f2:	4b13      	ldr	r3, [pc, #76]	@ (8008840 <xTaskResumeAll+0x134>)
 80087f4:	2200      	movs	r2, #0
 80087f6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80087f8:	4b10      	ldr	r3, [pc, #64]	@ (800883c <xTaskResumeAll+0x130>)
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	d009      	beq.n	8008814 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8008800:	2301      	movs	r3, #1
 8008802:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8008804:	4b0f      	ldr	r3, [pc, #60]	@ (8008844 <xTaskResumeAll+0x138>)
 8008806:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800880a:	601a      	str	r2, [r3, #0]
 800880c:	f3bf 8f4f 	dsb	sy
 8008810:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008814:	f000 fbaa 	bl	8008f6c <vPortExitCritical>

	return xAlreadyYielded;
 8008818:	68bb      	ldr	r3, [r7, #8]
}
 800881a:	4618      	mov	r0, r3
 800881c:	3710      	adds	r7, #16
 800881e:	46bd      	mov	sp, r7
 8008820:	bd80      	pop	{r7, pc}
 8008822:	bf00      	nop
 8008824:	200008ec 	.word	0x200008ec
 8008828:	200008c4 	.word	0x200008c4
 800882c:	20000884 	.word	0x20000884
 8008830:	200008cc 	.word	0x200008cc
 8008834:	200007c8 	.word	0x200007c8
 8008838:	200007c4 	.word	0x200007c4
 800883c:	200008d8 	.word	0x200008d8
 8008840:	200008d4 	.word	0x200008d4
 8008844:	e000ed04 	.word	0xe000ed04

08008848 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8008848:	b580      	push	{r7, lr}
 800884a:	b086      	sub	sp, #24
 800884c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800884e:	2300      	movs	r3, #0
 8008850:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8008852:	4b4f      	ldr	r3, [pc, #316]	@ (8008990 <xTaskIncrementTick+0x148>)
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	2b00      	cmp	r3, #0
 8008858:	f040 808f 	bne.w	800897a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800885c:	4b4d      	ldr	r3, [pc, #308]	@ (8008994 <xTaskIncrementTick+0x14c>)
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	3301      	adds	r3, #1
 8008862:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8008864:	4a4b      	ldr	r2, [pc, #300]	@ (8008994 <xTaskIncrementTick+0x14c>)
 8008866:	693b      	ldr	r3, [r7, #16]
 8008868:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800886a:	693b      	ldr	r3, [r7, #16]
 800886c:	2b00      	cmp	r3, #0
 800886e:	d121      	bne.n	80088b4 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8008870:	4b49      	ldr	r3, [pc, #292]	@ (8008998 <xTaskIncrementTick+0x150>)
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	2b00      	cmp	r3, #0
 8008878:	d00b      	beq.n	8008892 <xTaskIncrementTick+0x4a>
	__asm volatile
 800887a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800887e:	f383 8811 	msr	BASEPRI, r3
 8008882:	f3bf 8f6f 	isb	sy
 8008886:	f3bf 8f4f 	dsb	sy
 800888a:	603b      	str	r3, [r7, #0]
}
 800888c:	bf00      	nop
 800888e:	bf00      	nop
 8008890:	e7fd      	b.n	800888e <xTaskIncrementTick+0x46>
 8008892:	4b41      	ldr	r3, [pc, #260]	@ (8008998 <xTaskIncrementTick+0x150>)
 8008894:	681b      	ldr	r3, [r3, #0]
 8008896:	60fb      	str	r3, [r7, #12]
 8008898:	4b40      	ldr	r3, [pc, #256]	@ (800899c <xTaskIncrementTick+0x154>)
 800889a:	681b      	ldr	r3, [r3, #0]
 800889c:	4a3e      	ldr	r2, [pc, #248]	@ (8008998 <xTaskIncrementTick+0x150>)
 800889e:	6013      	str	r3, [r2, #0]
 80088a0:	4a3e      	ldr	r2, [pc, #248]	@ (800899c <xTaskIncrementTick+0x154>)
 80088a2:	68fb      	ldr	r3, [r7, #12]
 80088a4:	6013      	str	r3, [r2, #0]
 80088a6:	4b3e      	ldr	r3, [pc, #248]	@ (80089a0 <xTaskIncrementTick+0x158>)
 80088a8:	681b      	ldr	r3, [r3, #0]
 80088aa:	3301      	adds	r3, #1
 80088ac:	4a3c      	ldr	r2, [pc, #240]	@ (80089a0 <xTaskIncrementTick+0x158>)
 80088ae:	6013      	str	r3, [r2, #0]
 80088b0:	f000 f976 	bl	8008ba0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80088b4:	4b3b      	ldr	r3, [pc, #236]	@ (80089a4 <xTaskIncrementTick+0x15c>)
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	693a      	ldr	r2, [r7, #16]
 80088ba:	429a      	cmp	r2, r3
 80088bc:	d348      	bcc.n	8008950 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80088be:	4b36      	ldr	r3, [pc, #216]	@ (8008998 <xTaskIncrementTick+0x150>)
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d104      	bne.n	80088d2 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80088c8:	4b36      	ldr	r3, [pc, #216]	@ (80089a4 <xTaskIncrementTick+0x15c>)
 80088ca:	f04f 32ff 	mov.w	r2, #4294967295
 80088ce:	601a      	str	r2, [r3, #0]
					break;
 80088d0:	e03e      	b.n	8008950 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80088d2:	4b31      	ldr	r3, [pc, #196]	@ (8008998 <xTaskIncrementTick+0x150>)
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	68db      	ldr	r3, [r3, #12]
 80088d8:	68db      	ldr	r3, [r3, #12]
 80088da:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	685b      	ldr	r3, [r3, #4]
 80088e0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80088e2:	693a      	ldr	r2, [r7, #16]
 80088e4:	687b      	ldr	r3, [r7, #4]
 80088e6:	429a      	cmp	r2, r3
 80088e8:	d203      	bcs.n	80088f2 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80088ea:	4a2e      	ldr	r2, [pc, #184]	@ (80089a4 <xTaskIncrementTick+0x15c>)
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80088f0:	e02e      	b.n	8008950 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80088f2:	68bb      	ldr	r3, [r7, #8]
 80088f4:	3304      	adds	r3, #4
 80088f6:	4618      	mov	r0, r3
 80088f8:	f7ff fd1c 	bl	8008334 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80088fc:	68bb      	ldr	r3, [r7, #8]
 80088fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8008900:	2b00      	cmp	r3, #0
 8008902:	d004      	beq.n	800890e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8008904:	68bb      	ldr	r3, [r7, #8]
 8008906:	3318      	adds	r3, #24
 8008908:	4618      	mov	r0, r3
 800890a:	f7ff fd13 	bl	8008334 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800890e:	68bb      	ldr	r3, [r7, #8]
 8008910:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008912:	2201      	movs	r2, #1
 8008914:	409a      	lsls	r2, r3
 8008916:	4b24      	ldr	r3, [pc, #144]	@ (80089a8 <xTaskIncrementTick+0x160>)
 8008918:	681b      	ldr	r3, [r3, #0]
 800891a:	4313      	orrs	r3, r2
 800891c:	4a22      	ldr	r2, [pc, #136]	@ (80089a8 <xTaskIncrementTick+0x160>)
 800891e:	6013      	str	r3, [r2, #0]
 8008920:	68bb      	ldr	r3, [r7, #8]
 8008922:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008924:	4613      	mov	r3, r2
 8008926:	009b      	lsls	r3, r3, #2
 8008928:	4413      	add	r3, r2
 800892a:	009b      	lsls	r3, r3, #2
 800892c:	4a1f      	ldr	r2, [pc, #124]	@ (80089ac <xTaskIncrementTick+0x164>)
 800892e:	441a      	add	r2, r3
 8008930:	68bb      	ldr	r3, [r7, #8]
 8008932:	3304      	adds	r3, #4
 8008934:	4619      	mov	r1, r3
 8008936:	4610      	mov	r0, r2
 8008938:	f7ff fc9f 	bl	800827a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800893c:	68bb      	ldr	r3, [r7, #8]
 800893e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008940:	4b1b      	ldr	r3, [pc, #108]	@ (80089b0 <xTaskIncrementTick+0x168>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008946:	429a      	cmp	r2, r3
 8008948:	d3b9      	bcc.n	80088be <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800894a:	2301      	movs	r3, #1
 800894c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800894e:	e7b6      	b.n	80088be <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8008950:	4b17      	ldr	r3, [pc, #92]	@ (80089b0 <xTaskIncrementTick+0x168>)
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8008956:	4915      	ldr	r1, [pc, #84]	@ (80089ac <xTaskIncrementTick+0x164>)
 8008958:	4613      	mov	r3, r2
 800895a:	009b      	lsls	r3, r3, #2
 800895c:	4413      	add	r3, r2
 800895e:	009b      	lsls	r3, r3, #2
 8008960:	440b      	add	r3, r1
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	2b01      	cmp	r3, #1
 8008966:	d901      	bls.n	800896c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8008968:	2301      	movs	r3, #1
 800896a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800896c:	4b11      	ldr	r3, [pc, #68]	@ (80089b4 <xTaskIncrementTick+0x16c>)
 800896e:	681b      	ldr	r3, [r3, #0]
 8008970:	2b00      	cmp	r3, #0
 8008972:	d007      	beq.n	8008984 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8008974:	2301      	movs	r3, #1
 8008976:	617b      	str	r3, [r7, #20]
 8008978:	e004      	b.n	8008984 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800897a:	4b0f      	ldr	r3, [pc, #60]	@ (80089b8 <xTaskIncrementTick+0x170>)
 800897c:	681b      	ldr	r3, [r3, #0]
 800897e:	3301      	adds	r3, #1
 8008980:	4a0d      	ldr	r2, [pc, #52]	@ (80089b8 <xTaskIncrementTick+0x170>)
 8008982:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8008984:	697b      	ldr	r3, [r7, #20]
}
 8008986:	4618      	mov	r0, r3
 8008988:	3718      	adds	r7, #24
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
 800898e:	bf00      	nop
 8008990:	200008ec 	.word	0x200008ec
 8008994:	200008c8 	.word	0x200008c8
 8008998:	2000087c 	.word	0x2000087c
 800899c:	20000880 	.word	0x20000880
 80089a0:	200008dc 	.word	0x200008dc
 80089a4:	200008e4 	.word	0x200008e4
 80089a8:	200008cc 	.word	0x200008cc
 80089ac:	200007c8 	.word	0x200007c8
 80089b0:	200007c4 	.word	0x200007c4
 80089b4:	200008d8 	.word	0x200008d8
 80089b8:	200008d4 	.word	0x200008d4

080089bc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80089bc:	b480      	push	{r7}
 80089be:	b087      	sub	sp, #28
 80089c0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80089c2:	4b27      	ldr	r3, [pc, #156]	@ (8008a60 <vTaskSwitchContext+0xa4>)
 80089c4:	681b      	ldr	r3, [r3, #0]
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d003      	beq.n	80089d2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80089ca:	4b26      	ldr	r3, [pc, #152]	@ (8008a64 <vTaskSwitchContext+0xa8>)
 80089cc:	2201      	movs	r2, #1
 80089ce:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80089d0:	e040      	b.n	8008a54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 80089d2:	4b24      	ldr	r3, [pc, #144]	@ (8008a64 <vTaskSwitchContext+0xa8>)
 80089d4:	2200      	movs	r2, #0
 80089d6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80089d8:	4b23      	ldr	r3, [pc, #140]	@ (8008a68 <vTaskSwitchContext+0xac>)
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 80089de:	68fb      	ldr	r3, [r7, #12]
 80089e0:	fab3 f383 	clz	r3, r3
 80089e4:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 80089e6:	7afb      	ldrb	r3, [r7, #11]
 80089e8:	f1c3 031f 	rsb	r3, r3, #31
 80089ec:	617b      	str	r3, [r7, #20]
 80089ee:	491f      	ldr	r1, [pc, #124]	@ (8008a6c <vTaskSwitchContext+0xb0>)
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	4613      	mov	r3, r2
 80089f4:	009b      	lsls	r3, r3, #2
 80089f6:	4413      	add	r3, r2
 80089f8:	009b      	lsls	r3, r3, #2
 80089fa:	440b      	add	r3, r1
 80089fc:	681b      	ldr	r3, [r3, #0]
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d10b      	bne.n	8008a1a <vTaskSwitchContext+0x5e>
	__asm volatile
 8008a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008a06:	f383 8811 	msr	BASEPRI, r3
 8008a0a:	f3bf 8f6f 	isb	sy
 8008a0e:	f3bf 8f4f 	dsb	sy
 8008a12:	607b      	str	r3, [r7, #4]
}
 8008a14:	bf00      	nop
 8008a16:	bf00      	nop
 8008a18:	e7fd      	b.n	8008a16 <vTaskSwitchContext+0x5a>
 8008a1a:	697a      	ldr	r2, [r7, #20]
 8008a1c:	4613      	mov	r3, r2
 8008a1e:	009b      	lsls	r3, r3, #2
 8008a20:	4413      	add	r3, r2
 8008a22:	009b      	lsls	r3, r3, #2
 8008a24:	4a11      	ldr	r2, [pc, #68]	@ (8008a6c <vTaskSwitchContext+0xb0>)
 8008a26:	4413      	add	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]
 8008a2a:	693b      	ldr	r3, [r7, #16]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	685a      	ldr	r2, [r3, #4]
 8008a30:	693b      	ldr	r3, [r7, #16]
 8008a32:	605a      	str	r2, [r3, #4]
 8008a34:	693b      	ldr	r3, [r7, #16]
 8008a36:	685a      	ldr	r2, [r3, #4]
 8008a38:	693b      	ldr	r3, [r7, #16]
 8008a3a:	3308      	adds	r3, #8
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d104      	bne.n	8008a4a <vTaskSwitchContext+0x8e>
 8008a40:	693b      	ldr	r3, [r7, #16]
 8008a42:	685b      	ldr	r3, [r3, #4]
 8008a44:	685a      	ldr	r2, [r3, #4]
 8008a46:	693b      	ldr	r3, [r7, #16]
 8008a48:	605a      	str	r2, [r3, #4]
 8008a4a:	693b      	ldr	r3, [r7, #16]
 8008a4c:	685b      	ldr	r3, [r3, #4]
 8008a4e:	68db      	ldr	r3, [r3, #12]
 8008a50:	4a07      	ldr	r2, [pc, #28]	@ (8008a70 <vTaskSwitchContext+0xb4>)
 8008a52:	6013      	str	r3, [r2, #0]
}
 8008a54:	bf00      	nop
 8008a56:	371c      	adds	r7, #28
 8008a58:	46bd      	mov	sp, r7
 8008a5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a5e:	4770      	bx	lr
 8008a60:	200008ec 	.word	0x200008ec
 8008a64:	200008d8 	.word	0x200008d8
 8008a68:	200008cc 	.word	0x200008cc
 8008a6c:	200007c8 	.word	0x200007c8
 8008a70:	200007c4 	.word	0x200007c4

08008a74 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008a74:	b580      	push	{r7, lr}
 8008a76:	b082      	sub	sp, #8
 8008a78:	af00      	add	r7, sp, #0
 8008a7a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8008a7c:	f000 f852 	bl	8008b24 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008a80:	4b06      	ldr	r3, [pc, #24]	@ (8008a9c <prvIdleTask+0x28>)
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	2b01      	cmp	r3, #1
 8008a86:	d9f9      	bls.n	8008a7c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008a88:	4b05      	ldr	r3, [pc, #20]	@ (8008aa0 <prvIdleTask+0x2c>)
 8008a8a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8008a8e:	601a      	str	r2, [r3, #0]
 8008a90:	f3bf 8f4f 	dsb	sy
 8008a94:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008a98:	e7f0      	b.n	8008a7c <prvIdleTask+0x8>
 8008a9a:	bf00      	nop
 8008a9c:	200007c8 	.word	0x200007c8
 8008aa0:	e000ed04 	.word	0xe000ed04

08008aa4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8008aa4:	b580      	push	{r7, lr}
 8008aa6:	b082      	sub	sp, #8
 8008aa8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008aaa:	2300      	movs	r3, #0
 8008aac:	607b      	str	r3, [r7, #4]
 8008aae:	e00c      	b.n	8008aca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8008ab0:	687a      	ldr	r2, [r7, #4]
 8008ab2:	4613      	mov	r3, r2
 8008ab4:	009b      	lsls	r3, r3, #2
 8008ab6:	4413      	add	r3, r2
 8008ab8:	009b      	lsls	r3, r3, #2
 8008aba:	4a12      	ldr	r2, [pc, #72]	@ (8008b04 <prvInitialiseTaskLists+0x60>)
 8008abc:	4413      	add	r3, r2
 8008abe:	4618      	mov	r0, r3
 8008ac0:	f7ff fbae 	bl	8008220 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8008ac4:	687b      	ldr	r3, [r7, #4]
 8008ac6:	3301      	adds	r3, #1
 8008ac8:	607b      	str	r3, [r7, #4]
 8008aca:	687b      	ldr	r3, [r7, #4]
 8008acc:	2b06      	cmp	r3, #6
 8008ace:	d9ef      	bls.n	8008ab0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8008ad0:	480d      	ldr	r0, [pc, #52]	@ (8008b08 <prvInitialiseTaskLists+0x64>)
 8008ad2:	f7ff fba5 	bl	8008220 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8008ad6:	480d      	ldr	r0, [pc, #52]	@ (8008b0c <prvInitialiseTaskLists+0x68>)
 8008ad8:	f7ff fba2 	bl	8008220 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8008adc:	480c      	ldr	r0, [pc, #48]	@ (8008b10 <prvInitialiseTaskLists+0x6c>)
 8008ade:	f7ff fb9f 	bl	8008220 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8008ae2:	480c      	ldr	r0, [pc, #48]	@ (8008b14 <prvInitialiseTaskLists+0x70>)
 8008ae4:	f7ff fb9c 	bl	8008220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8008ae8:	480b      	ldr	r0, [pc, #44]	@ (8008b18 <prvInitialiseTaskLists+0x74>)
 8008aea:	f7ff fb99 	bl	8008220 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8008aee:	4b0b      	ldr	r3, [pc, #44]	@ (8008b1c <prvInitialiseTaskLists+0x78>)
 8008af0:	4a05      	ldr	r2, [pc, #20]	@ (8008b08 <prvInitialiseTaskLists+0x64>)
 8008af2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8008af4:	4b0a      	ldr	r3, [pc, #40]	@ (8008b20 <prvInitialiseTaskLists+0x7c>)
 8008af6:	4a05      	ldr	r2, [pc, #20]	@ (8008b0c <prvInitialiseTaskLists+0x68>)
 8008af8:	601a      	str	r2, [r3, #0]
}
 8008afa:	bf00      	nop
 8008afc:	3708      	adds	r7, #8
 8008afe:	46bd      	mov	sp, r7
 8008b00:	bd80      	pop	{r7, pc}
 8008b02:	bf00      	nop
 8008b04:	200007c8 	.word	0x200007c8
 8008b08:	20000854 	.word	0x20000854
 8008b0c:	20000868 	.word	0x20000868
 8008b10:	20000884 	.word	0x20000884
 8008b14:	20000898 	.word	0x20000898
 8008b18:	200008b0 	.word	0x200008b0
 8008b1c:	2000087c 	.word	0x2000087c
 8008b20:	20000880 	.word	0x20000880

08008b24 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008b24:	b580      	push	{r7, lr}
 8008b26:	b082      	sub	sp, #8
 8008b28:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b2a:	e019      	b.n	8008b60 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8008b2c:	f000 f9ec 	bl	8008f08 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008b30:	4b10      	ldr	r3, [pc, #64]	@ (8008b74 <prvCheckTasksWaitingTermination+0x50>)
 8008b32:	68db      	ldr	r3, [r3, #12]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	3304      	adds	r3, #4
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	f7ff fbf9 	bl	8008334 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008b42:	4b0d      	ldr	r3, [pc, #52]	@ (8008b78 <prvCheckTasksWaitingTermination+0x54>)
 8008b44:	681b      	ldr	r3, [r3, #0]
 8008b46:	3b01      	subs	r3, #1
 8008b48:	4a0b      	ldr	r2, [pc, #44]	@ (8008b78 <prvCheckTasksWaitingTermination+0x54>)
 8008b4a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8008b4c:	4b0b      	ldr	r3, [pc, #44]	@ (8008b7c <prvCheckTasksWaitingTermination+0x58>)
 8008b4e:	681b      	ldr	r3, [r3, #0]
 8008b50:	3b01      	subs	r3, #1
 8008b52:	4a0a      	ldr	r2, [pc, #40]	@ (8008b7c <prvCheckTasksWaitingTermination+0x58>)
 8008b54:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008b56:	f000 fa09 	bl	8008f6c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8008b5a:	6878      	ldr	r0, [r7, #4]
 8008b5c:	f000 f810 	bl	8008b80 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008b60:	4b06      	ldr	r3, [pc, #24]	@ (8008b7c <prvCheckTasksWaitingTermination+0x58>)
 8008b62:	681b      	ldr	r3, [r3, #0]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d1e1      	bne.n	8008b2c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008b68:	bf00      	nop
 8008b6a:	bf00      	nop
 8008b6c:	3708      	adds	r7, #8
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	bd80      	pop	{r7, pc}
 8008b72:	bf00      	nop
 8008b74:	20000898 	.word	0x20000898
 8008b78:	200008c4 	.word	0x200008c4
 8008b7c:	200008ac 	.word	0x200008ac

08008b80 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008b80:	b580      	push	{r7, lr}
 8008b82:	b082      	sub	sp, #8
 8008b84:	af00      	add	r7, sp, #0
 8008b86:	6078      	str	r0, [r7, #4]

		#if( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 0 ) && ( portUSING_MPU_WRAPPERS == 0 ) )
		{
			/* The task can only have been allocated dynamically - free both
			the stack and TCB. */
			vPortFree( pxTCB->pxStack );
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008b8c:	4618      	mov	r0, r3
 8008b8e:	f000 faad 	bl	80090ec <vPortFree>
			vPortFree( pxTCB );
 8008b92:	6878      	ldr	r0, [r7, #4]
 8008b94:	f000 faaa 	bl	80090ec <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8008b98:	bf00      	nop
 8008b9a:	3708      	adds	r7, #8
 8008b9c:	46bd      	mov	sp, r7
 8008b9e:	bd80      	pop	{r7, pc}

08008ba0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8008ba0:	b480      	push	{r7}
 8008ba2:	b083      	sub	sp, #12
 8008ba4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8008ba6:	4b0c      	ldr	r3, [pc, #48]	@ (8008bd8 <prvResetNextTaskUnblockTime+0x38>)
 8008ba8:	681b      	ldr	r3, [r3, #0]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	2b00      	cmp	r3, #0
 8008bae:	d104      	bne.n	8008bba <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8008bb0:	4b0a      	ldr	r3, [pc, #40]	@ (8008bdc <prvResetNextTaskUnblockTime+0x3c>)
 8008bb2:	f04f 32ff 	mov.w	r2, #4294967295
 8008bb6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008bb8:	e008      	b.n	8008bcc <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008bba:	4b07      	ldr	r3, [pc, #28]	@ (8008bd8 <prvResetNextTaskUnblockTime+0x38>)
 8008bbc:	681b      	ldr	r3, [r3, #0]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	68db      	ldr	r3, [r3, #12]
 8008bc2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8008bc4:	687b      	ldr	r3, [r7, #4]
 8008bc6:	685b      	ldr	r3, [r3, #4]
 8008bc8:	4a04      	ldr	r2, [pc, #16]	@ (8008bdc <prvResetNextTaskUnblockTime+0x3c>)
 8008bca:	6013      	str	r3, [r2, #0]
}
 8008bcc:	bf00      	nop
 8008bce:	370c      	adds	r7, #12
 8008bd0:	46bd      	mov	sp, r7
 8008bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd6:	4770      	bx	lr
 8008bd8:	2000087c 	.word	0x2000087c
 8008bdc:	200008e4 	.word	0x200008e4

08008be0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8008be0:	b580      	push	{r7, lr}
 8008be2:	b084      	sub	sp, #16
 8008be4:	af00      	add	r7, sp, #0
 8008be6:	6078      	str	r0, [r7, #4]
 8008be8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008bea:	4b29      	ldr	r3, [pc, #164]	@ (8008c90 <prvAddCurrentTaskToDelayedList+0xb0>)
 8008bec:	681b      	ldr	r3, [r3, #0]
 8008bee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8008bf0:	4b28      	ldr	r3, [pc, #160]	@ (8008c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008bf2:	681b      	ldr	r3, [r3, #0]
 8008bf4:	3304      	adds	r3, #4
 8008bf6:	4618      	mov	r0, r3
 8008bf8:	f7ff fb9c 	bl	8008334 <uxListRemove>
 8008bfc:	4603      	mov	r3, r0
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d10b      	bne.n	8008c1a <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8008c02:	4b24      	ldr	r3, [pc, #144]	@ (8008c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8008c08:	2201      	movs	r2, #1
 8008c0a:	fa02 f303 	lsl.w	r3, r2, r3
 8008c0e:	43da      	mvns	r2, r3
 8008c10:	4b21      	ldr	r3, [pc, #132]	@ (8008c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	4013      	ands	r3, r2
 8008c16:	4a20      	ldr	r2, [pc, #128]	@ (8008c98 <prvAddCurrentTaskToDelayedList+0xb8>)
 8008c18:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008c20:	d10a      	bne.n	8008c38 <prvAddCurrentTaskToDelayedList+0x58>
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	2b00      	cmp	r3, #0
 8008c26:	d007      	beq.n	8008c38 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c28:	4b1a      	ldr	r3, [pc, #104]	@ (8008c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	3304      	adds	r3, #4
 8008c2e:	4619      	mov	r1, r3
 8008c30:	481a      	ldr	r0, [pc, #104]	@ (8008c9c <prvAddCurrentTaskToDelayedList+0xbc>)
 8008c32:	f7ff fb22 	bl	800827a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008c36:	e026      	b.n	8008c86 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008c38:	68fa      	ldr	r2, [r7, #12]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	4413      	add	r3, r2
 8008c3e:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8008c40:	4b14      	ldr	r3, [pc, #80]	@ (8008c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	68ba      	ldr	r2, [r7, #8]
 8008c46:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8008c48:	68ba      	ldr	r2, [r7, #8]
 8008c4a:	68fb      	ldr	r3, [r7, #12]
 8008c4c:	429a      	cmp	r2, r3
 8008c4e:	d209      	bcs.n	8008c64 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c50:	4b13      	ldr	r3, [pc, #76]	@ (8008ca0 <prvAddCurrentTaskToDelayedList+0xc0>)
 8008c52:	681a      	ldr	r2, [r3, #0]
 8008c54:	4b0f      	ldr	r3, [pc, #60]	@ (8008c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	3304      	adds	r3, #4
 8008c5a:	4619      	mov	r1, r3
 8008c5c:	4610      	mov	r0, r2
 8008c5e:	f7ff fb30 	bl	80082c2 <vListInsert>
}
 8008c62:	e010      	b.n	8008c86 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008c64:	4b0f      	ldr	r3, [pc, #60]	@ (8008ca4 <prvAddCurrentTaskToDelayedList+0xc4>)
 8008c66:	681a      	ldr	r2, [r3, #0]
 8008c68:	4b0a      	ldr	r3, [pc, #40]	@ (8008c94 <prvAddCurrentTaskToDelayedList+0xb4>)
 8008c6a:	681b      	ldr	r3, [r3, #0]
 8008c6c:	3304      	adds	r3, #4
 8008c6e:	4619      	mov	r1, r3
 8008c70:	4610      	mov	r0, r2
 8008c72:	f7ff fb26 	bl	80082c2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8008c76:	4b0c      	ldr	r3, [pc, #48]	@ (8008ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c78:	681b      	ldr	r3, [r3, #0]
 8008c7a:	68ba      	ldr	r2, [r7, #8]
 8008c7c:	429a      	cmp	r2, r3
 8008c7e:	d202      	bcs.n	8008c86 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8008c80:	4a09      	ldr	r2, [pc, #36]	@ (8008ca8 <prvAddCurrentTaskToDelayedList+0xc8>)
 8008c82:	68bb      	ldr	r3, [r7, #8]
 8008c84:	6013      	str	r3, [r2, #0]
}
 8008c86:	bf00      	nop
 8008c88:	3710      	adds	r7, #16
 8008c8a:	46bd      	mov	sp, r7
 8008c8c:	bd80      	pop	{r7, pc}
 8008c8e:	bf00      	nop
 8008c90:	200008c8 	.word	0x200008c8
 8008c94:	200007c4 	.word	0x200007c4
 8008c98:	200008cc 	.word	0x200008cc
 8008c9c:	200008b0 	.word	0x200008b0
 8008ca0:	20000880 	.word	0x20000880
 8008ca4:	2000087c 	.word	0x2000087c
 8008ca8:	200008e4 	.word	0x200008e4

08008cac <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008cac:	b480      	push	{r7}
 8008cae:	b085      	sub	sp, #20
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	60f8      	str	r0, [r7, #12]
 8008cb4:	60b9      	str	r1, [r7, #8]
 8008cb6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008cb8:	68fb      	ldr	r3, [r7, #12]
 8008cba:	3b04      	subs	r3, #4
 8008cbc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8008cc4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	3b04      	subs	r3, #4
 8008cca:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008ccc:	68bb      	ldr	r3, [r7, #8]
 8008cce:	f023 0201 	bic.w	r2, r3, #1
 8008cd2:	68fb      	ldr	r3, [r7, #12]
 8008cd4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008cd6:	68fb      	ldr	r3, [r7, #12]
 8008cd8:	3b04      	subs	r3, #4
 8008cda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008cdc:	4a0c      	ldr	r2, [pc, #48]	@ (8008d10 <pxPortInitialiseStack+0x64>)
 8008cde:	68fb      	ldr	r3, [r7, #12]
 8008ce0:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	3b14      	subs	r3, #20
 8008ce6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ce8:	687a      	ldr	r2, [r7, #4]
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	3b04      	subs	r3, #4
 8008cf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008cf4:	68fb      	ldr	r3, [r7, #12]
 8008cf6:	f06f 0202 	mvn.w	r2, #2
 8008cfa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008cfc:	68fb      	ldr	r3, [r7, #12]
 8008cfe:	3b20      	subs	r3, #32
 8008d00:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008d02:	68fb      	ldr	r3, [r7, #12]
}
 8008d04:	4618      	mov	r0, r3
 8008d06:	3714      	adds	r7, #20
 8008d08:	46bd      	mov	sp, r7
 8008d0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0e:	4770      	bx	lr
 8008d10:	08008d15 	.word	0x08008d15

08008d14 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008d14:	b480      	push	{r7}
 8008d16:	b085      	sub	sp, #20
 8008d18:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008d1a:	2300      	movs	r3, #0
 8008d1c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008d1e:	4b13      	ldr	r3, [pc, #76]	@ (8008d6c <prvTaskExitError+0x58>)
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d26:	d00b      	beq.n	8008d40 <prvTaskExitError+0x2c>
	__asm volatile
 8008d28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d2c:	f383 8811 	msr	BASEPRI, r3
 8008d30:	f3bf 8f6f 	isb	sy
 8008d34:	f3bf 8f4f 	dsb	sy
 8008d38:	60fb      	str	r3, [r7, #12]
}
 8008d3a:	bf00      	nop
 8008d3c:	bf00      	nop
 8008d3e:	e7fd      	b.n	8008d3c <prvTaskExitError+0x28>
	__asm volatile
 8008d40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008d44:	f383 8811 	msr	BASEPRI, r3
 8008d48:	f3bf 8f6f 	isb	sy
 8008d4c:	f3bf 8f4f 	dsb	sy
 8008d50:	60bb      	str	r3, [r7, #8]
}
 8008d52:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008d54:	bf00      	nop
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	2b00      	cmp	r3, #0
 8008d5a:	d0fc      	beq.n	8008d56 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008d5c:	bf00      	nop
 8008d5e:	bf00      	nop
 8008d60:	3714      	adds	r7, #20
 8008d62:	46bd      	mov	sp, r7
 8008d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d68:	4770      	bx	lr
 8008d6a:	bf00      	nop
 8008d6c:	2000002c 	.word	0x2000002c

08008d70 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008d70:	4b07      	ldr	r3, [pc, #28]	@ (8008d90 <pxCurrentTCBConst2>)
 8008d72:	6819      	ldr	r1, [r3, #0]
 8008d74:	6808      	ldr	r0, [r1, #0]
 8008d76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d7a:	f380 8809 	msr	PSP, r0
 8008d7e:	f3bf 8f6f 	isb	sy
 8008d82:	f04f 0000 	mov.w	r0, #0
 8008d86:	f380 8811 	msr	BASEPRI, r0
 8008d8a:	4770      	bx	lr
 8008d8c:	f3af 8000 	nop.w

08008d90 <pxCurrentTCBConst2>:
 8008d90:	200007c4 	.word	0x200007c4
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008d94:	bf00      	nop
 8008d96:	bf00      	nop

08008d98 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008d98:	4808      	ldr	r0, [pc, #32]	@ (8008dbc <prvPortStartFirstTask+0x24>)
 8008d9a:	6800      	ldr	r0, [r0, #0]
 8008d9c:	6800      	ldr	r0, [r0, #0]
 8008d9e:	f380 8808 	msr	MSP, r0
 8008da2:	f04f 0000 	mov.w	r0, #0
 8008da6:	f380 8814 	msr	CONTROL, r0
 8008daa:	b662      	cpsie	i
 8008dac:	b661      	cpsie	f
 8008dae:	f3bf 8f4f 	dsb	sy
 8008db2:	f3bf 8f6f 	isb	sy
 8008db6:	df00      	svc	0
 8008db8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008dba:	bf00      	nop
 8008dbc:	e000ed08 	.word	0xe000ed08

08008dc0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008dc0:	b580      	push	{r7, lr}
 8008dc2:	b086      	sub	sp, #24
 8008dc4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008dc6:	4b47      	ldr	r3, [pc, #284]	@ (8008ee4 <xPortStartScheduler+0x124>)
 8008dc8:	681b      	ldr	r3, [r3, #0]
 8008dca:	4a47      	ldr	r2, [pc, #284]	@ (8008ee8 <xPortStartScheduler+0x128>)
 8008dcc:	4293      	cmp	r3, r2
 8008dce:	d10b      	bne.n	8008de8 <xPortStartScheduler+0x28>
	__asm volatile
 8008dd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008dd4:	f383 8811 	msr	BASEPRI, r3
 8008dd8:	f3bf 8f6f 	isb	sy
 8008ddc:	f3bf 8f4f 	dsb	sy
 8008de0:	613b      	str	r3, [r7, #16]
}
 8008de2:	bf00      	nop
 8008de4:	bf00      	nop
 8008de6:	e7fd      	b.n	8008de4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008de8:	4b3e      	ldr	r3, [pc, #248]	@ (8008ee4 <xPortStartScheduler+0x124>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a3f      	ldr	r2, [pc, #252]	@ (8008eec <xPortStartScheduler+0x12c>)
 8008dee:	4293      	cmp	r3, r2
 8008df0:	d10b      	bne.n	8008e0a <xPortStartScheduler+0x4a>
	__asm volatile
 8008df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008df6:	f383 8811 	msr	BASEPRI, r3
 8008dfa:	f3bf 8f6f 	isb	sy
 8008dfe:	f3bf 8f4f 	dsb	sy
 8008e02:	60fb      	str	r3, [r7, #12]
}
 8008e04:	bf00      	nop
 8008e06:	bf00      	nop
 8008e08:	e7fd      	b.n	8008e06 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008e0a:	4b39      	ldr	r3, [pc, #228]	@ (8008ef0 <xPortStartScheduler+0x130>)
 8008e0c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008e0e:	697b      	ldr	r3, [r7, #20]
 8008e10:	781b      	ldrb	r3, [r3, #0]
 8008e12:	b2db      	uxtb	r3, r3
 8008e14:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008e16:	697b      	ldr	r3, [r7, #20]
 8008e18:	22ff      	movs	r2, #255	@ 0xff
 8008e1a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008e1c:	697b      	ldr	r3, [r7, #20]
 8008e1e:	781b      	ldrb	r3, [r3, #0]
 8008e20:	b2db      	uxtb	r3, r3
 8008e22:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008e24:	78fb      	ldrb	r3, [r7, #3]
 8008e26:	b2db      	uxtb	r3, r3
 8008e28:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8008e2c:	b2da      	uxtb	r2, r3
 8008e2e:	4b31      	ldr	r3, [pc, #196]	@ (8008ef4 <xPortStartScheduler+0x134>)
 8008e30:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008e32:	4b31      	ldr	r3, [pc, #196]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e34:	2207      	movs	r2, #7
 8008e36:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e38:	e009      	b.n	8008e4e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8008e3a:	4b2f      	ldr	r3, [pc, #188]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e3c:	681b      	ldr	r3, [r3, #0]
 8008e3e:	3b01      	subs	r3, #1
 8008e40:	4a2d      	ldr	r2, [pc, #180]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e42:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008e44:	78fb      	ldrb	r3, [r7, #3]
 8008e46:	b2db      	uxtb	r3, r3
 8008e48:	005b      	lsls	r3, r3, #1
 8008e4a:	b2db      	uxtb	r3, r3
 8008e4c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008e4e:	78fb      	ldrb	r3, [r7, #3]
 8008e50:	b2db      	uxtb	r3, r3
 8008e52:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8008e56:	2b80      	cmp	r3, #128	@ 0x80
 8008e58:	d0ef      	beq.n	8008e3a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008e5a:	4b27      	ldr	r3, [pc, #156]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f1c3 0307 	rsb	r3, r3, #7
 8008e62:	2b04      	cmp	r3, #4
 8008e64:	d00b      	beq.n	8008e7e <xPortStartScheduler+0xbe>
	__asm volatile
 8008e66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008e6a:	f383 8811 	msr	BASEPRI, r3
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f3bf 8f4f 	dsb	sy
 8008e76:	60bb      	str	r3, [r7, #8]
}
 8008e78:	bf00      	nop
 8008e7a:	bf00      	nop
 8008e7c:	e7fd      	b.n	8008e7a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008e7e:	4b1e      	ldr	r3, [pc, #120]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	021b      	lsls	r3, r3, #8
 8008e84:	4a1c      	ldr	r2, [pc, #112]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e86:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008e88:	4b1b      	ldr	r3, [pc, #108]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8008e90:	4a19      	ldr	r2, [pc, #100]	@ (8008ef8 <xPortStartScheduler+0x138>)
 8008e92:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	b2da      	uxtb	r2, r3
 8008e98:	697b      	ldr	r3, [r7, #20]
 8008e9a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008e9c:	4b17      	ldr	r3, [pc, #92]	@ (8008efc <xPortStartScheduler+0x13c>)
 8008e9e:	681b      	ldr	r3, [r3, #0]
 8008ea0:	4a16      	ldr	r2, [pc, #88]	@ (8008efc <xPortStartScheduler+0x13c>)
 8008ea2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8008ea6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008ea8:	4b14      	ldr	r3, [pc, #80]	@ (8008efc <xPortStartScheduler+0x13c>)
 8008eaa:	681b      	ldr	r3, [r3, #0]
 8008eac:	4a13      	ldr	r2, [pc, #76]	@ (8008efc <xPortStartScheduler+0x13c>)
 8008eae:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8008eb2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008eb4:	f000 f8da 	bl	800906c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008eb8:	4b11      	ldr	r3, [pc, #68]	@ (8008f00 <xPortStartScheduler+0x140>)
 8008eba:	2200      	movs	r2, #0
 8008ebc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008ebe:	f000 f8f9 	bl	80090b4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008ec2:	4b10      	ldr	r3, [pc, #64]	@ (8008f04 <xPortStartScheduler+0x144>)
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	4a0f      	ldr	r2, [pc, #60]	@ (8008f04 <xPortStartScheduler+0x144>)
 8008ec8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8008ecc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008ece:	f7ff ff63 	bl	8008d98 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008ed2:	f7ff fd73 	bl	80089bc <vTaskSwitchContext>
	prvTaskExitError();
 8008ed6:	f7ff ff1d 	bl	8008d14 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008eda:	2300      	movs	r3, #0
}
 8008edc:	4618      	mov	r0, r3
 8008ede:	3718      	adds	r7, #24
 8008ee0:	46bd      	mov	sp, r7
 8008ee2:	bd80      	pop	{r7, pc}
 8008ee4:	e000ed00 	.word	0xe000ed00
 8008ee8:	410fc271 	.word	0x410fc271
 8008eec:	410fc270 	.word	0x410fc270
 8008ef0:	e000e400 	.word	0xe000e400
 8008ef4:	200008f0 	.word	0x200008f0
 8008ef8:	200008f4 	.word	0x200008f4
 8008efc:	e000ed20 	.word	0xe000ed20
 8008f00:	2000002c 	.word	0x2000002c
 8008f04:	e000ef34 	.word	0xe000ef34

08008f08 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008f08:	b480      	push	{r7}
 8008f0a:	b083      	sub	sp, #12
 8008f0c:	af00      	add	r7, sp, #0
	__asm volatile
 8008f0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f12:	f383 8811 	msr	BASEPRI, r3
 8008f16:	f3bf 8f6f 	isb	sy
 8008f1a:	f3bf 8f4f 	dsb	sy
 8008f1e:	607b      	str	r3, [r7, #4]
}
 8008f20:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8008f22:	4b10      	ldr	r3, [pc, #64]	@ (8008f64 <vPortEnterCritical+0x5c>)
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	3301      	adds	r3, #1
 8008f28:	4a0e      	ldr	r2, [pc, #56]	@ (8008f64 <vPortEnterCritical+0x5c>)
 8008f2a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8008f2c:	4b0d      	ldr	r3, [pc, #52]	@ (8008f64 <vPortEnterCritical+0x5c>)
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	2b01      	cmp	r3, #1
 8008f32:	d110      	bne.n	8008f56 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8008f34:	4b0c      	ldr	r3, [pc, #48]	@ (8008f68 <vPortEnterCritical+0x60>)
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	b2db      	uxtb	r3, r3
 8008f3a:	2b00      	cmp	r3, #0
 8008f3c:	d00b      	beq.n	8008f56 <vPortEnterCritical+0x4e>
	__asm volatile
 8008f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f42:	f383 8811 	msr	BASEPRI, r3
 8008f46:	f3bf 8f6f 	isb	sy
 8008f4a:	f3bf 8f4f 	dsb	sy
 8008f4e:	603b      	str	r3, [r7, #0]
}
 8008f50:	bf00      	nop
 8008f52:	bf00      	nop
 8008f54:	e7fd      	b.n	8008f52 <vPortEnterCritical+0x4a>
	}
}
 8008f56:	bf00      	nop
 8008f58:	370c      	adds	r7, #12
 8008f5a:	46bd      	mov	sp, r7
 8008f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f60:	4770      	bx	lr
 8008f62:	bf00      	nop
 8008f64:	2000002c 	.word	0x2000002c
 8008f68:	e000ed04 	.word	0xe000ed04

08008f6c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8008f6c:	b480      	push	{r7}
 8008f6e:	b083      	sub	sp, #12
 8008f70:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8008f72:	4b12      	ldr	r3, [pc, #72]	@ (8008fbc <vPortExitCritical+0x50>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	2b00      	cmp	r3, #0
 8008f78:	d10b      	bne.n	8008f92 <vPortExitCritical+0x26>
	__asm volatile
 8008f7a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008f7e:	f383 8811 	msr	BASEPRI, r3
 8008f82:	f3bf 8f6f 	isb	sy
 8008f86:	f3bf 8f4f 	dsb	sy
 8008f8a:	607b      	str	r3, [r7, #4]
}
 8008f8c:	bf00      	nop
 8008f8e:	bf00      	nop
 8008f90:	e7fd      	b.n	8008f8e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8008f92:	4b0a      	ldr	r3, [pc, #40]	@ (8008fbc <vPortExitCritical+0x50>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	3b01      	subs	r3, #1
 8008f98:	4a08      	ldr	r2, [pc, #32]	@ (8008fbc <vPortExitCritical+0x50>)
 8008f9a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8008f9c:	4b07      	ldr	r3, [pc, #28]	@ (8008fbc <vPortExitCritical+0x50>)
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	2b00      	cmp	r3, #0
 8008fa2:	d105      	bne.n	8008fb0 <vPortExitCritical+0x44>
 8008fa4:	2300      	movs	r3, #0
 8008fa6:	603b      	str	r3, [r7, #0]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8008fa8:	683b      	ldr	r3, [r7, #0]
 8008faa:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8008fae:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8008fb0:	bf00      	nop
 8008fb2:	370c      	adds	r7, #12
 8008fb4:	46bd      	mov	sp, r7
 8008fb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fba:	4770      	bx	lr
 8008fbc:	2000002c 	.word	0x2000002c

08008fc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8008fc0:	f3ef 8009 	mrs	r0, PSP
 8008fc4:	f3bf 8f6f 	isb	sy
 8008fc8:	4b15      	ldr	r3, [pc, #84]	@ (8009020 <pxCurrentTCBConst>)
 8008fca:	681a      	ldr	r2, [r3, #0]
 8008fcc:	f01e 0f10 	tst.w	lr, #16
 8008fd0:	bf08      	it	eq
 8008fd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8008fd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fda:	6010      	str	r0, [r2, #0]
 8008fdc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8008fe0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8008fe4:	f380 8811 	msr	BASEPRI, r0
 8008fe8:	f3bf 8f4f 	dsb	sy
 8008fec:	f3bf 8f6f 	isb	sy
 8008ff0:	f7ff fce4 	bl	80089bc <vTaskSwitchContext>
 8008ff4:	f04f 0000 	mov.w	r0, #0
 8008ff8:	f380 8811 	msr	BASEPRI, r0
 8008ffc:	bc09      	pop	{r0, r3}
 8008ffe:	6819      	ldr	r1, [r3, #0]
 8009000:	6808      	ldr	r0, [r1, #0]
 8009002:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009006:	f01e 0f10 	tst.w	lr, #16
 800900a:	bf08      	it	eq
 800900c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009010:	f380 8809 	msr	PSP, r0
 8009014:	f3bf 8f6f 	isb	sy
 8009018:	4770      	bx	lr
 800901a:	bf00      	nop
 800901c:	f3af 8000 	nop.w

08009020 <pxCurrentTCBConst>:
 8009020:	200007c4 	.word	0x200007c4
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009024:	bf00      	nop
 8009026:	bf00      	nop

08009028 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009028:	b580      	push	{r7, lr}
 800902a:	b082      	sub	sp, #8
 800902c:	af00      	add	r7, sp, #0
	__asm volatile
 800902e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8009032:	f383 8811 	msr	BASEPRI, r3
 8009036:	f3bf 8f6f 	isb	sy
 800903a:	f3bf 8f4f 	dsb	sy
 800903e:	607b      	str	r3, [r7, #4]
}
 8009040:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009042:	f7ff fc01 	bl	8008848 <xTaskIncrementTick>
 8009046:	4603      	mov	r3, r0
 8009048:	2b00      	cmp	r3, #0
 800904a:	d003      	beq.n	8009054 <SysTick_Handler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800904c:	4b06      	ldr	r3, [pc, #24]	@ (8009068 <SysTick_Handler+0x40>)
 800904e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8009052:	601a      	str	r2, [r3, #0]
 8009054:	2300      	movs	r3, #0
 8009056:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009058:	683b      	ldr	r3, [r7, #0]
 800905a:	f383 8811 	msr	BASEPRI, r3
}
 800905e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009060:	bf00      	nop
 8009062:	3708      	adds	r7, #8
 8009064:	46bd      	mov	sp, r7
 8009066:	bd80      	pop	{r7, pc}
 8009068:	e000ed04 	.word	0xe000ed04

0800906c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800906c:	b480      	push	{r7}
 800906e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009070:	4b0b      	ldr	r3, [pc, #44]	@ (80090a0 <vPortSetupTimerInterrupt+0x34>)
 8009072:	2200      	movs	r2, #0
 8009074:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009076:	4b0b      	ldr	r3, [pc, #44]	@ (80090a4 <vPortSetupTimerInterrupt+0x38>)
 8009078:	2200      	movs	r2, #0
 800907a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800907c:	4b0a      	ldr	r3, [pc, #40]	@ (80090a8 <vPortSetupTimerInterrupt+0x3c>)
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	4a0a      	ldr	r2, [pc, #40]	@ (80090ac <vPortSetupTimerInterrupt+0x40>)
 8009082:	fba2 2303 	umull	r2, r3, r2, r3
 8009086:	099b      	lsrs	r3, r3, #6
 8009088:	4a09      	ldr	r2, [pc, #36]	@ (80090b0 <vPortSetupTimerInterrupt+0x44>)
 800908a:	3b01      	subs	r3, #1
 800908c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800908e:	4b04      	ldr	r3, [pc, #16]	@ (80090a0 <vPortSetupTimerInterrupt+0x34>)
 8009090:	2207      	movs	r2, #7
 8009092:	601a      	str	r2, [r3, #0]
}
 8009094:	bf00      	nop
 8009096:	46bd      	mov	sp, r7
 8009098:	f85d 7b04 	ldr.w	r7, [sp], #4
 800909c:	4770      	bx	lr
 800909e:	bf00      	nop
 80090a0:	e000e010 	.word	0xe000e010
 80090a4:	e000e018 	.word	0xe000e018
 80090a8:	20000000 	.word	0x20000000
 80090ac:	10624dd3 	.word	0x10624dd3
 80090b0:	e000e014 	.word	0xe000e014

080090b4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80090b4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80090c4 <vPortEnableVFP+0x10>
 80090b8:	6801      	ldr	r1, [r0, #0]
 80090ba:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80090be:	6001      	str	r1, [r0, #0]
 80090c0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80090c2:	bf00      	nop
 80090c4:	e000ed88 	.word	0xe000ed88

080090c8 <pvPortMalloc>:
#endif

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80090c8:	b580      	push	{r7, lr}
 80090ca:	b084      	sub	sp, #16
 80090cc:	af00      	add	r7, sp, #0
 80090ce:	6078      	str	r0, [r7, #4]
void *pvReturn;

	vTaskSuspendAll();
 80090d0:	f7ff fb0e 	bl	80086f0 <vTaskSuspendAll>
	{
		pvReturn = malloc( xWantedSize );
 80090d4:	6878      	ldr	r0, [r7, #4]
 80090d6:	f000 f81f 	bl	8009118 <malloc>
 80090da:	4603      	mov	r3, r0
 80090dc:	60fb      	str	r3, [r7, #12]
		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80090de:	f7ff fb15 	bl	800870c <xTaskResumeAll>
			vApplicationMallocFailedHook();
		}
	}
	#endif

	return pvReturn;
 80090e2:	68fb      	ldr	r3, [r7, #12]
}
 80090e4:	4618      	mov	r0, r3
 80090e6:	3710      	adds	r7, #16
 80090e8:	46bd      	mov	sp, r7
 80090ea:	bd80      	pop	{r7, pc}

080090ec <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80090ec:	b580      	push	{r7, lr}
 80090ee:	b082      	sub	sp, #8
 80090f0:	af00      	add	r7, sp, #0
 80090f2:	6078      	str	r0, [r7, #4]
	if( pv )
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d006      	beq.n	8009108 <vPortFree+0x1c>
	{
		vTaskSuspendAll();
 80090fa:	f7ff faf9 	bl	80086f0 <vTaskSuspendAll>
		{
			free( pv );
 80090fe:	6878      	ldr	r0, [r7, #4]
 8009100:	f000 f812 	bl	8009128 <free>
			traceFREE( pv, 0 );
		}
		( void ) xTaskResumeAll();
 8009104:	f7ff fb02 	bl	800870c <xTaskResumeAll>
	}
}
 8009108:	bf00      	nop
 800910a:	3708      	adds	r7, #8
 800910c:	46bd      	mov	sp, r7
 800910e:	bd80      	pop	{r7, pc}

08009110 <atoi>:
 8009110:	220a      	movs	r2, #10
 8009112:	2100      	movs	r1, #0
 8009114:	f000 b938 	b.w	8009388 <strtol>

08009118 <malloc>:
 8009118:	4b02      	ldr	r3, [pc, #8]	@ (8009124 <malloc+0xc>)
 800911a:	4601      	mov	r1, r0
 800911c:	6818      	ldr	r0, [r3, #0]
 800911e:	f000 b82d 	b.w	800917c <_malloc_r>
 8009122:	bf00      	nop
 8009124:	2000003c 	.word	0x2000003c

08009128 <free>:
 8009128:	4b02      	ldr	r3, [pc, #8]	@ (8009134 <free+0xc>)
 800912a:	4601      	mov	r1, r0
 800912c:	6818      	ldr	r0, [r3, #0]
 800912e:	f000 bd09 	b.w	8009b44 <_free_r>
 8009132:	bf00      	nop
 8009134:	2000003c 	.word	0x2000003c

08009138 <sbrk_aligned>:
 8009138:	b570      	push	{r4, r5, r6, lr}
 800913a:	4e0f      	ldr	r6, [pc, #60]	@ (8009178 <sbrk_aligned+0x40>)
 800913c:	460c      	mov	r4, r1
 800913e:	6831      	ldr	r1, [r6, #0]
 8009140:	4605      	mov	r5, r0
 8009142:	b911      	cbnz	r1, 800914a <sbrk_aligned+0x12>
 8009144:	f000 fc88 	bl	8009a58 <_sbrk_r>
 8009148:	6030      	str	r0, [r6, #0]
 800914a:	4621      	mov	r1, r4
 800914c:	4628      	mov	r0, r5
 800914e:	f000 fc83 	bl	8009a58 <_sbrk_r>
 8009152:	1c43      	adds	r3, r0, #1
 8009154:	d103      	bne.n	800915e <sbrk_aligned+0x26>
 8009156:	f04f 34ff 	mov.w	r4, #4294967295
 800915a:	4620      	mov	r0, r4
 800915c:	bd70      	pop	{r4, r5, r6, pc}
 800915e:	1cc4      	adds	r4, r0, #3
 8009160:	f024 0403 	bic.w	r4, r4, #3
 8009164:	42a0      	cmp	r0, r4
 8009166:	d0f8      	beq.n	800915a <sbrk_aligned+0x22>
 8009168:	1a21      	subs	r1, r4, r0
 800916a:	4628      	mov	r0, r5
 800916c:	f000 fc74 	bl	8009a58 <_sbrk_r>
 8009170:	3001      	adds	r0, #1
 8009172:	d1f2      	bne.n	800915a <sbrk_aligned+0x22>
 8009174:	e7ef      	b.n	8009156 <sbrk_aligned+0x1e>
 8009176:	bf00      	nop
 8009178:	200008f8 	.word	0x200008f8

0800917c <_malloc_r>:
 800917c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009180:	1ccd      	adds	r5, r1, #3
 8009182:	f025 0503 	bic.w	r5, r5, #3
 8009186:	3508      	adds	r5, #8
 8009188:	2d0c      	cmp	r5, #12
 800918a:	bf38      	it	cc
 800918c:	250c      	movcc	r5, #12
 800918e:	2d00      	cmp	r5, #0
 8009190:	4606      	mov	r6, r0
 8009192:	db01      	blt.n	8009198 <_malloc_r+0x1c>
 8009194:	42a9      	cmp	r1, r5
 8009196:	d904      	bls.n	80091a2 <_malloc_r+0x26>
 8009198:	230c      	movs	r3, #12
 800919a:	6033      	str	r3, [r6, #0]
 800919c:	2000      	movs	r0, #0
 800919e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80091a2:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8009278 <_malloc_r+0xfc>
 80091a6:	f000 f869 	bl	800927c <__malloc_lock>
 80091aa:	f8d8 3000 	ldr.w	r3, [r8]
 80091ae:	461c      	mov	r4, r3
 80091b0:	bb44      	cbnz	r4, 8009204 <_malloc_r+0x88>
 80091b2:	4629      	mov	r1, r5
 80091b4:	4630      	mov	r0, r6
 80091b6:	f7ff ffbf 	bl	8009138 <sbrk_aligned>
 80091ba:	1c43      	adds	r3, r0, #1
 80091bc:	4604      	mov	r4, r0
 80091be:	d158      	bne.n	8009272 <_malloc_r+0xf6>
 80091c0:	f8d8 4000 	ldr.w	r4, [r8]
 80091c4:	4627      	mov	r7, r4
 80091c6:	2f00      	cmp	r7, #0
 80091c8:	d143      	bne.n	8009252 <_malloc_r+0xd6>
 80091ca:	2c00      	cmp	r4, #0
 80091cc:	d04b      	beq.n	8009266 <_malloc_r+0xea>
 80091ce:	6823      	ldr	r3, [r4, #0]
 80091d0:	4639      	mov	r1, r7
 80091d2:	4630      	mov	r0, r6
 80091d4:	eb04 0903 	add.w	r9, r4, r3
 80091d8:	f000 fc3e 	bl	8009a58 <_sbrk_r>
 80091dc:	4581      	cmp	r9, r0
 80091de:	d142      	bne.n	8009266 <_malloc_r+0xea>
 80091e0:	6821      	ldr	r1, [r4, #0]
 80091e2:	1a6d      	subs	r5, r5, r1
 80091e4:	4629      	mov	r1, r5
 80091e6:	4630      	mov	r0, r6
 80091e8:	f7ff ffa6 	bl	8009138 <sbrk_aligned>
 80091ec:	3001      	adds	r0, #1
 80091ee:	d03a      	beq.n	8009266 <_malloc_r+0xea>
 80091f0:	6823      	ldr	r3, [r4, #0]
 80091f2:	442b      	add	r3, r5
 80091f4:	6023      	str	r3, [r4, #0]
 80091f6:	f8d8 3000 	ldr.w	r3, [r8]
 80091fa:	685a      	ldr	r2, [r3, #4]
 80091fc:	bb62      	cbnz	r2, 8009258 <_malloc_r+0xdc>
 80091fe:	f8c8 7000 	str.w	r7, [r8]
 8009202:	e00f      	b.n	8009224 <_malloc_r+0xa8>
 8009204:	6822      	ldr	r2, [r4, #0]
 8009206:	1b52      	subs	r2, r2, r5
 8009208:	d420      	bmi.n	800924c <_malloc_r+0xd0>
 800920a:	2a0b      	cmp	r2, #11
 800920c:	d917      	bls.n	800923e <_malloc_r+0xc2>
 800920e:	1961      	adds	r1, r4, r5
 8009210:	42a3      	cmp	r3, r4
 8009212:	6025      	str	r5, [r4, #0]
 8009214:	bf18      	it	ne
 8009216:	6059      	strne	r1, [r3, #4]
 8009218:	6863      	ldr	r3, [r4, #4]
 800921a:	bf08      	it	eq
 800921c:	f8c8 1000 	streq.w	r1, [r8]
 8009220:	5162      	str	r2, [r4, r5]
 8009222:	604b      	str	r3, [r1, #4]
 8009224:	4630      	mov	r0, r6
 8009226:	f000 f82f 	bl	8009288 <__malloc_unlock>
 800922a:	f104 000b 	add.w	r0, r4, #11
 800922e:	1d23      	adds	r3, r4, #4
 8009230:	f020 0007 	bic.w	r0, r0, #7
 8009234:	1ac2      	subs	r2, r0, r3
 8009236:	bf1c      	itt	ne
 8009238:	1a1b      	subne	r3, r3, r0
 800923a:	50a3      	strne	r3, [r4, r2]
 800923c:	e7af      	b.n	800919e <_malloc_r+0x22>
 800923e:	6862      	ldr	r2, [r4, #4]
 8009240:	42a3      	cmp	r3, r4
 8009242:	bf0c      	ite	eq
 8009244:	f8c8 2000 	streq.w	r2, [r8]
 8009248:	605a      	strne	r2, [r3, #4]
 800924a:	e7eb      	b.n	8009224 <_malloc_r+0xa8>
 800924c:	4623      	mov	r3, r4
 800924e:	6864      	ldr	r4, [r4, #4]
 8009250:	e7ae      	b.n	80091b0 <_malloc_r+0x34>
 8009252:	463c      	mov	r4, r7
 8009254:	687f      	ldr	r7, [r7, #4]
 8009256:	e7b6      	b.n	80091c6 <_malloc_r+0x4a>
 8009258:	461a      	mov	r2, r3
 800925a:	685b      	ldr	r3, [r3, #4]
 800925c:	42a3      	cmp	r3, r4
 800925e:	d1fb      	bne.n	8009258 <_malloc_r+0xdc>
 8009260:	2300      	movs	r3, #0
 8009262:	6053      	str	r3, [r2, #4]
 8009264:	e7de      	b.n	8009224 <_malloc_r+0xa8>
 8009266:	230c      	movs	r3, #12
 8009268:	6033      	str	r3, [r6, #0]
 800926a:	4630      	mov	r0, r6
 800926c:	f000 f80c 	bl	8009288 <__malloc_unlock>
 8009270:	e794      	b.n	800919c <_malloc_r+0x20>
 8009272:	6005      	str	r5, [r0, #0]
 8009274:	e7d6      	b.n	8009224 <_malloc_r+0xa8>
 8009276:	bf00      	nop
 8009278:	200008fc 	.word	0x200008fc

0800927c <__malloc_lock>:
 800927c:	4801      	ldr	r0, [pc, #4]	@ (8009284 <__malloc_lock+0x8>)
 800927e:	f000 bc38 	b.w	8009af2 <__retarget_lock_acquire_recursive>
 8009282:	bf00      	nop
 8009284:	20000a40 	.word	0x20000a40

08009288 <__malloc_unlock>:
 8009288:	4801      	ldr	r0, [pc, #4]	@ (8009290 <__malloc_unlock+0x8>)
 800928a:	f000 bc33 	b.w	8009af4 <__retarget_lock_release_recursive>
 800928e:	bf00      	nop
 8009290:	20000a40 	.word	0x20000a40

08009294 <_strtol_l.constprop.0>:
 8009294:	2b24      	cmp	r3, #36	@ 0x24
 8009296:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800929a:	4686      	mov	lr, r0
 800929c:	4690      	mov	r8, r2
 800929e:	d801      	bhi.n	80092a4 <_strtol_l.constprop.0+0x10>
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d106      	bne.n	80092b2 <_strtol_l.constprop.0+0x1e>
 80092a4:	f000 fbfa 	bl	8009a9c <__errno>
 80092a8:	2316      	movs	r3, #22
 80092aa:	6003      	str	r3, [r0, #0]
 80092ac:	2000      	movs	r0, #0
 80092ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80092b2:	4834      	ldr	r0, [pc, #208]	@ (8009384 <_strtol_l.constprop.0+0xf0>)
 80092b4:	460d      	mov	r5, r1
 80092b6:	462a      	mov	r2, r5
 80092b8:	f815 4b01 	ldrb.w	r4, [r5], #1
 80092bc:	5d06      	ldrb	r6, [r0, r4]
 80092be:	f016 0608 	ands.w	r6, r6, #8
 80092c2:	d1f8      	bne.n	80092b6 <_strtol_l.constprop.0+0x22>
 80092c4:	2c2d      	cmp	r4, #45	@ 0x2d
 80092c6:	d12d      	bne.n	8009324 <_strtol_l.constprop.0+0x90>
 80092c8:	782c      	ldrb	r4, [r5, #0]
 80092ca:	2601      	movs	r6, #1
 80092cc:	1c95      	adds	r5, r2, #2
 80092ce:	f033 0210 	bics.w	r2, r3, #16
 80092d2:	d109      	bne.n	80092e8 <_strtol_l.constprop.0+0x54>
 80092d4:	2c30      	cmp	r4, #48	@ 0x30
 80092d6:	d12a      	bne.n	800932e <_strtol_l.constprop.0+0x9a>
 80092d8:	782a      	ldrb	r2, [r5, #0]
 80092da:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 80092de:	2a58      	cmp	r2, #88	@ 0x58
 80092e0:	d125      	bne.n	800932e <_strtol_l.constprop.0+0x9a>
 80092e2:	786c      	ldrb	r4, [r5, #1]
 80092e4:	2310      	movs	r3, #16
 80092e6:	3502      	adds	r5, #2
 80092e8:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 80092ec:	f10c 3cff 	add.w	ip, ip, #4294967295
 80092f0:	2200      	movs	r2, #0
 80092f2:	fbbc f9f3 	udiv	r9, ip, r3
 80092f6:	4610      	mov	r0, r2
 80092f8:	fb03 ca19 	mls	sl, r3, r9, ip
 80092fc:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009300:	2f09      	cmp	r7, #9
 8009302:	d81b      	bhi.n	800933c <_strtol_l.constprop.0+0xa8>
 8009304:	463c      	mov	r4, r7
 8009306:	42a3      	cmp	r3, r4
 8009308:	dd27      	ble.n	800935a <_strtol_l.constprop.0+0xc6>
 800930a:	1c57      	adds	r7, r2, #1
 800930c:	d007      	beq.n	800931e <_strtol_l.constprop.0+0x8a>
 800930e:	4581      	cmp	r9, r0
 8009310:	d320      	bcc.n	8009354 <_strtol_l.constprop.0+0xc0>
 8009312:	d101      	bne.n	8009318 <_strtol_l.constprop.0+0x84>
 8009314:	45a2      	cmp	sl, r4
 8009316:	db1d      	blt.n	8009354 <_strtol_l.constprop.0+0xc0>
 8009318:	fb00 4003 	mla	r0, r0, r3, r4
 800931c:	2201      	movs	r2, #1
 800931e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009322:	e7eb      	b.n	80092fc <_strtol_l.constprop.0+0x68>
 8009324:	2c2b      	cmp	r4, #43	@ 0x2b
 8009326:	bf04      	itt	eq
 8009328:	782c      	ldrbeq	r4, [r5, #0]
 800932a:	1c95      	addeq	r5, r2, #2
 800932c:	e7cf      	b.n	80092ce <_strtol_l.constprop.0+0x3a>
 800932e:	2b00      	cmp	r3, #0
 8009330:	d1da      	bne.n	80092e8 <_strtol_l.constprop.0+0x54>
 8009332:	2c30      	cmp	r4, #48	@ 0x30
 8009334:	bf0c      	ite	eq
 8009336:	2308      	moveq	r3, #8
 8009338:	230a      	movne	r3, #10
 800933a:	e7d5      	b.n	80092e8 <_strtol_l.constprop.0+0x54>
 800933c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009340:	2f19      	cmp	r7, #25
 8009342:	d801      	bhi.n	8009348 <_strtol_l.constprop.0+0xb4>
 8009344:	3c37      	subs	r4, #55	@ 0x37
 8009346:	e7de      	b.n	8009306 <_strtol_l.constprop.0+0x72>
 8009348:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800934c:	2f19      	cmp	r7, #25
 800934e:	d804      	bhi.n	800935a <_strtol_l.constprop.0+0xc6>
 8009350:	3c57      	subs	r4, #87	@ 0x57
 8009352:	e7d8      	b.n	8009306 <_strtol_l.constprop.0+0x72>
 8009354:	f04f 32ff 	mov.w	r2, #4294967295
 8009358:	e7e1      	b.n	800931e <_strtol_l.constprop.0+0x8a>
 800935a:	1c53      	adds	r3, r2, #1
 800935c:	d108      	bne.n	8009370 <_strtol_l.constprop.0+0xdc>
 800935e:	2322      	movs	r3, #34	@ 0x22
 8009360:	f8ce 3000 	str.w	r3, [lr]
 8009364:	4660      	mov	r0, ip
 8009366:	f1b8 0f00 	cmp.w	r8, #0
 800936a:	d0a0      	beq.n	80092ae <_strtol_l.constprop.0+0x1a>
 800936c:	1e69      	subs	r1, r5, #1
 800936e:	e006      	b.n	800937e <_strtol_l.constprop.0+0xea>
 8009370:	b106      	cbz	r6, 8009374 <_strtol_l.constprop.0+0xe0>
 8009372:	4240      	negs	r0, r0
 8009374:	f1b8 0f00 	cmp.w	r8, #0
 8009378:	d099      	beq.n	80092ae <_strtol_l.constprop.0+0x1a>
 800937a:	2a00      	cmp	r2, #0
 800937c:	d1f6      	bne.n	800936c <_strtol_l.constprop.0+0xd8>
 800937e:	f8c8 1000 	str.w	r1, [r8]
 8009382:	e794      	b.n	80092ae <_strtol_l.constprop.0+0x1a>
 8009384:	0800b49d 	.word	0x0800b49d

08009388 <strtol>:
 8009388:	4613      	mov	r3, r2
 800938a:	460a      	mov	r2, r1
 800938c:	4601      	mov	r1, r0
 800938e:	4802      	ldr	r0, [pc, #8]	@ (8009398 <strtol+0x10>)
 8009390:	6800      	ldr	r0, [r0, #0]
 8009392:	f7ff bf7f 	b.w	8009294 <_strtol_l.constprop.0>
 8009396:	bf00      	nop
 8009398:	2000003c 	.word	0x2000003c

0800939c <std>:
 800939c:	2300      	movs	r3, #0
 800939e:	b510      	push	{r4, lr}
 80093a0:	4604      	mov	r4, r0
 80093a2:	e9c0 3300 	strd	r3, r3, [r0]
 80093a6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80093aa:	6083      	str	r3, [r0, #8]
 80093ac:	8181      	strh	r1, [r0, #12]
 80093ae:	6643      	str	r3, [r0, #100]	@ 0x64
 80093b0:	81c2      	strh	r2, [r0, #14]
 80093b2:	6183      	str	r3, [r0, #24]
 80093b4:	4619      	mov	r1, r3
 80093b6:	2208      	movs	r2, #8
 80093b8:	305c      	adds	r0, #92	@ 0x5c
 80093ba:	f000 fab5 	bl	8009928 <memset>
 80093be:	4b0d      	ldr	r3, [pc, #52]	@ (80093f4 <std+0x58>)
 80093c0:	6263      	str	r3, [r4, #36]	@ 0x24
 80093c2:	4b0d      	ldr	r3, [pc, #52]	@ (80093f8 <std+0x5c>)
 80093c4:	62a3      	str	r3, [r4, #40]	@ 0x28
 80093c6:	4b0d      	ldr	r3, [pc, #52]	@ (80093fc <std+0x60>)
 80093c8:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80093ca:	4b0d      	ldr	r3, [pc, #52]	@ (8009400 <std+0x64>)
 80093cc:	6323      	str	r3, [r4, #48]	@ 0x30
 80093ce:	4b0d      	ldr	r3, [pc, #52]	@ (8009404 <std+0x68>)
 80093d0:	6224      	str	r4, [r4, #32]
 80093d2:	429c      	cmp	r4, r3
 80093d4:	d006      	beq.n	80093e4 <std+0x48>
 80093d6:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80093da:	4294      	cmp	r4, r2
 80093dc:	d002      	beq.n	80093e4 <std+0x48>
 80093de:	33d0      	adds	r3, #208	@ 0xd0
 80093e0:	429c      	cmp	r4, r3
 80093e2:	d105      	bne.n	80093f0 <std+0x54>
 80093e4:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 80093e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80093ec:	f000 bb80 	b.w	8009af0 <__retarget_lock_init_recursive>
 80093f0:	bd10      	pop	{r4, pc}
 80093f2:	bf00      	nop
 80093f4:	08009779 	.word	0x08009779
 80093f8:	0800979b 	.word	0x0800979b
 80093fc:	080097d3 	.word	0x080097d3
 8009400:	080097f7 	.word	0x080097f7
 8009404:	20000900 	.word	0x20000900

08009408 <stdio_exit_handler>:
 8009408:	4a02      	ldr	r2, [pc, #8]	@ (8009414 <stdio_exit_handler+0xc>)
 800940a:	4903      	ldr	r1, [pc, #12]	@ (8009418 <stdio_exit_handler+0x10>)
 800940c:	4803      	ldr	r0, [pc, #12]	@ (800941c <stdio_exit_handler+0x14>)
 800940e:	f000 b869 	b.w	80094e4 <_fwalk_sglue>
 8009412:	bf00      	nop
 8009414:	20000030 	.word	0x20000030
 8009418:	0800a281 	.word	0x0800a281
 800941c:	20000040 	.word	0x20000040

08009420 <cleanup_stdio>:
 8009420:	6841      	ldr	r1, [r0, #4]
 8009422:	4b0c      	ldr	r3, [pc, #48]	@ (8009454 <cleanup_stdio+0x34>)
 8009424:	4299      	cmp	r1, r3
 8009426:	b510      	push	{r4, lr}
 8009428:	4604      	mov	r4, r0
 800942a:	d001      	beq.n	8009430 <cleanup_stdio+0x10>
 800942c:	f000 ff28 	bl	800a280 <_fflush_r>
 8009430:	68a1      	ldr	r1, [r4, #8]
 8009432:	4b09      	ldr	r3, [pc, #36]	@ (8009458 <cleanup_stdio+0x38>)
 8009434:	4299      	cmp	r1, r3
 8009436:	d002      	beq.n	800943e <cleanup_stdio+0x1e>
 8009438:	4620      	mov	r0, r4
 800943a:	f000 ff21 	bl	800a280 <_fflush_r>
 800943e:	68e1      	ldr	r1, [r4, #12]
 8009440:	4b06      	ldr	r3, [pc, #24]	@ (800945c <cleanup_stdio+0x3c>)
 8009442:	4299      	cmp	r1, r3
 8009444:	d004      	beq.n	8009450 <cleanup_stdio+0x30>
 8009446:	4620      	mov	r0, r4
 8009448:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800944c:	f000 bf18 	b.w	800a280 <_fflush_r>
 8009450:	bd10      	pop	{r4, pc}
 8009452:	bf00      	nop
 8009454:	20000900 	.word	0x20000900
 8009458:	20000968 	.word	0x20000968
 800945c:	200009d0 	.word	0x200009d0

08009460 <global_stdio_init.part.0>:
 8009460:	b510      	push	{r4, lr}
 8009462:	4b0b      	ldr	r3, [pc, #44]	@ (8009490 <global_stdio_init.part.0+0x30>)
 8009464:	4c0b      	ldr	r4, [pc, #44]	@ (8009494 <global_stdio_init.part.0+0x34>)
 8009466:	4a0c      	ldr	r2, [pc, #48]	@ (8009498 <global_stdio_init.part.0+0x38>)
 8009468:	601a      	str	r2, [r3, #0]
 800946a:	4620      	mov	r0, r4
 800946c:	2200      	movs	r2, #0
 800946e:	2104      	movs	r1, #4
 8009470:	f7ff ff94 	bl	800939c <std>
 8009474:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8009478:	2201      	movs	r2, #1
 800947a:	2109      	movs	r1, #9
 800947c:	f7ff ff8e 	bl	800939c <std>
 8009480:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8009484:	2202      	movs	r2, #2
 8009486:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800948a:	2112      	movs	r1, #18
 800948c:	f7ff bf86 	b.w	800939c <std>
 8009490:	20000a38 	.word	0x20000a38
 8009494:	20000900 	.word	0x20000900
 8009498:	08009409 	.word	0x08009409

0800949c <__sfp_lock_acquire>:
 800949c:	4801      	ldr	r0, [pc, #4]	@ (80094a4 <__sfp_lock_acquire+0x8>)
 800949e:	f000 bb28 	b.w	8009af2 <__retarget_lock_acquire_recursive>
 80094a2:	bf00      	nop
 80094a4:	20000a41 	.word	0x20000a41

080094a8 <__sfp_lock_release>:
 80094a8:	4801      	ldr	r0, [pc, #4]	@ (80094b0 <__sfp_lock_release+0x8>)
 80094aa:	f000 bb23 	b.w	8009af4 <__retarget_lock_release_recursive>
 80094ae:	bf00      	nop
 80094b0:	20000a41 	.word	0x20000a41

080094b4 <__sinit>:
 80094b4:	b510      	push	{r4, lr}
 80094b6:	4604      	mov	r4, r0
 80094b8:	f7ff fff0 	bl	800949c <__sfp_lock_acquire>
 80094bc:	6a23      	ldr	r3, [r4, #32]
 80094be:	b11b      	cbz	r3, 80094c8 <__sinit+0x14>
 80094c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80094c4:	f7ff bff0 	b.w	80094a8 <__sfp_lock_release>
 80094c8:	4b04      	ldr	r3, [pc, #16]	@ (80094dc <__sinit+0x28>)
 80094ca:	6223      	str	r3, [r4, #32]
 80094cc:	4b04      	ldr	r3, [pc, #16]	@ (80094e0 <__sinit+0x2c>)
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2b00      	cmp	r3, #0
 80094d2:	d1f5      	bne.n	80094c0 <__sinit+0xc>
 80094d4:	f7ff ffc4 	bl	8009460 <global_stdio_init.part.0>
 80094d8:	e7f2      	b.n	80094c0 <__sinit+0xc>
 80094da:	bf00      	nop
 80094dc:	08009421 	.word	0x08009421
 80094e0:	20000a38 	.word	0x20000a38

080094e4 <_fwalk_sglue>:
 80094e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80094e8:	4607      	mov	r7, r0
 80094ea:	4688      	mov	r8, r1
 80094ec:	4614      	mov	r4, r2
 80094ee:	2600      	movs	r6, #0
 80094f0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80094f4:	f1b9 0901 	subs.w	r9, r9, #1
 80094f8:	d505      	bpl.n	8009506 <_fwalk_sglue+0x22>
 80094fa:	6824      	ldr	r4, [r4, #0]
 80094fc:	2c00      	cmp	r4, #0
 80094fe:	d1f7      	bne.n	80094f0 <_fwalk_sglue+0xc>
 8009500:	4630      	mov	r0, r6
 8009502:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009506:	89ab      	ldrh	r3, [r5, #12]
 8009508:	2b01      	cmp	r3, #1
 800950a:	d907      	bls.n	800951c <_fwalk_sglue+0x38>
 800950c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8009510:	3301      	adds	r3, #1
 8009512:	d003      	beq.n	800951c <_fwalk_sglue+0x38>
 8009514:	4629      	mov	r1, r5
 8009516:	4638      	mov	r0, r7
 8009518:	47c0      	blx	r8
 800951a:	4306      	orrs	r6, r0
 800951c:	3568      	adds	r5, #104	@ 0x68
 800951e:	e7e9      	b.n	80094f4 <_fwalk_sglue+0x10>

08009520 <iprintf>:
 8009520:	b40f      	push	{r0, r1, r2, r3}
 8009522:	b507      	push	{r0, r1, r2, lr}
 8009524:	4906      	ldr	r1, [pc, #24]	@ (8009540 <iprintf+0x20>)
 8009526:	ab04      	add	r3, sp, #16
 8009528:	6808      	ldr	r0, [r1, #0]
 800952a:	f853 2b04 	ldr.w	r2, [r3], #4
 800952e:	6881      	ldr	r1, [r0, #8]
 8009530:	9301      	str	r3, [sp, #4]
 8009532:	f000 fb7b 	bl	8009c2c <_vfiprintf_r>
 8009536:	b003      	add	sp, #12
 8009538:	f85d eb04 	ldr.w	lr, [sp], #4
 800953c:	b004      	add	sp, #16
 800953e:	4770      	bx	lr
 8009540:	2000003c 	.word	0x2000003c

08009544 <_puts_r>:
 8009544:	6a03      	ldr	r3, [r0, #32]
 8009546:	b570      	push	{r4, r5, r6, lr}
 8009548:	6884      	ldr	r4, [r0, #8]
 800954a:	4605      	mov	r5, r0
 800954c:	460e      	mov	r6, r1
 800954e:	b90b      	cbnz	r3, 8009554 <_puts_r+0x10>
 8009550:	f7ff ffb0 	bl	80094b4 <__sinit>
 8009554:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009556:	07db      	lsls	r3, r3, #31
 8009558:	d405      	bmi.n	8009566 <_puts_r+0x22>
 800955a:	89a3      	ldrh	r3, [r4, #12]
 800955c:	0598      	lsls	r0, r3, #22
 800955e:	d402      	bmi.n	8009566 <_puts_r+0x22>
 8009560:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009562:	f000 fac6 	bl	8009af2 <__retarget_lock_acquire_recursive>
 8009566:	89a3      	ldrh	r3, [r4, #12]
 8009568:	0719      	lsls	r1, r3, #28
 800956a:	d502      	bpl.n	8009572 <_puts_r+0x2e>
 800956c:	6923      	ldr	r3, [r4, #16]
 800956e:	2b00      	cmp	r3, #0
 8009570:	d135      	bne.n	80095de <_puts_r+0x9a>
 8009572:	4621      	mov	r1, r4
 8009574:	4628      	mov	r0, r5
 8009576:	f000 f981 	bl	800987c <__swsetup_r>
 800957a:	b380      	cbz	r0, 80095de <_puts_r+0x9a>
 800957c:	f04f 35ff 	mov.w	r5, #4294967295
 8009580:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009582:	07da      	lsls	r2, r3, #31
 8009584:	d405      	bmi.n	8009592 <_puts_r+0x4e>
 8009586:	89a3      	ldrh	r3, [r4, #12]
 8009588:	059b      	lsls	r3, r3, #22
 800958a:	d402      	bmi.n	8009592 <_puts_r+0x4e>
 800958c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800958e:	f000 fab1 	bl	8009af4 <__retarget_lock_release_recursive>
 8009592:	4628      	mov	r0, r5
 8009594:	bd70      	pop	{r4, r5, r6, pc}
 8009596:	2b00      	cmp	r3, #0
 8009598:	da04      	bge.n	80095a4 <_puts_r+0x60>
 800959a:	69a2      	ldr	r2, [r4, #24]
 800959c:	429a      	cmp	r2, r3
 800959e:	dc17      	bgt.n	80095d0 <_puts_r+0x8c>
 80095a0:	290a      	cmp	r1, #10
 80095a2:	d015      	beq.n	80095d0 <_puts_r+0x8c>
 80095a4:	6823      	ldr	r3, [r4, #0]
 80095a6:	1c5a      	adds	r2, r3, #1
 80095a8:	6022      	str	r2, [r4, #0]
 80095aa:	7019      	strb	r1, [r3, #0]
 80095ac:	68a3      	ldr	r3, [r4, #8]
 80095ae:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80095b2:	3b01      	subs	r3, #1
 80095b4:	60a3      	str	r3, [r4, #8]
 80095b6:	2900      	cmp	r1, #0
 80095b8:	d1ed      	bne.n	8009596 <_puts_r+0x52>
 80095ba:	2b00      	cmp	r3, #0
 80095bc:	da11      	bge.n	80095e2 <_puts_r+0x9e>
 80095be:	4622      	mov	r2, r4
 80095c0:	210a      	movs	r1, #10
 80095c2:	4628      	mov	r0, r5
 80095c4:	f000 f91b 	bl	80097fe <__swbuf_r>
 80095c8:	3001      	adds	r0, #1
 80095ca:	d0d7      	beq.n	800957c <_puts_r+0x38>
 80095cc:	250a      	movs	r5, #10
 80095ce:	e7d7      	b.n	8009580 <_puts_r+0x3c>
 80095d0:	4622      	mov	r2, r4
 80095d2:	4628      	mov	r0, r5
 80095d4:	f000 f913 	bl	80097fe <__swbuf_r>
 80095d8:	3001      	adds	r0, #1
 80095da:	d1e7      	bne.n	80095ac <_puts_r+0x68>
 80095dc:	e7ce      	b.n	800957c <_puts_r+0x38>
 80095de:	3e01      	subs	r6, #1
 80095e0:	e7e4      	b.n	80095ac <_puts_r+0x68>
 80095e2:	6823      	ldr	r3, [r4, #0]
 80095e4:	1c5a      	adds	r2, r3, #1
 80095e6:	6022      	str	r2, [r4, #0]
 80095e8:	220a      	movs	r2, #10
 80095ea:	701a      	strb	r2, [r3, #0]
 80095ec:	e7ee      	b.n	80095cc <_puts_r+0x88>
	...

080095f0 <puts>:
 80095f0:	4b02      	ldr	r3, [pc, #8]	@ (80095fc <puts+0xc>)
 80095f2:	4601      	mov	r1, r0
 80095f4:	6818      	ldr	r0, [r3, #0]
 80095f6:	f7ff bfa5 	b.w	8009544 <_puts_r>
 80095fa:	bf00      	nop
 80095fc:	2000003c 	.word	0x2000003c

08009600 <setbuf>:
 8009600:	fab1 f281 	clz	r2, r1
 8009604:	0952      	lsrs	r2, r2, #5
 8009606:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800960a:	0052      	lsls	r2, r2, #1
 800960c:	f000 b800 	b.w	8009610 <setvbuf>

08009610 <setvbuf>:
 8009610:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009614:	461d      	mov	r5, r3
 8009616:	4b57      	ldr	r3, [pc, #348]	@ (8009774 <setvbuf+0x164>)
 8009618:	681f      	ldr	r7, [r3, #0]
 800961a:	4604      	mov	r4, r0
 800961c:	460e      	mov	r6, r1
 800961e:	4690      	mov	r8, r2
 8009620:	b127      	cbz	r7, 800962c <setvbuf+0x1c>
 8009622:	6a3b      	ldr	r3, [r7, #32]
 8009624:	b913      	cbnz	r3, 800962c <setvbuf+0x1c>
 8009626:	4638      	mov	r0, r7
 8009628:	f7ff ff44 	bl	80094b4 <__sinit>
 800962c:	f1b8 0f02 	cmp.w	r8, #2
 8009630:	d006      	beq.n	8009640 <setvbuf+0x30>
 8009632:	f1b8 0f01 	cmp.w	r8, #1
 8009636:	f200 809a 	bhi.w	800976e <setvbuf+0x15e>
 800963a:	2d00      	cmp	r5, #0
 800963c:	f2c0 8097 	blt.w	800976e <setvbuf+0x15e>
 8009640:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8009642:	07d9      	lsls	r1, r3, #31
 8009644:	d405      	bmi.n	8009652 <setvbuf+0x42>
 8009646:	89a3      	ldrh	r3, [r4, #12]
 8009648:	059a      	lsls	r2, r3, #22
 800964a:	d402      	bmi.n	8009652 <setvbuf+0x42>
 800964c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800964e:	f000 fa50 	bl	8009af2 <__retarget_lock_acquire_recursive>
 8009652:	4621      	mov	r1, r4
 8009654:	4638      	mov	r0, r7
 8009656:	f000 fe13 	bl	800a280 <_fflush_r>
 800965a:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800965c:	b141      	cbz	r1, 8009670 <setvbuf+0x60>
 800965e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8009662:	4299      	cmp	r1, r3
 8009664:	d002      	beq.n	800966c <setvbuf+0x5c>
 8009666:	4638      	mov	r0, r7
 8009668:	f000 fa6c 	bl	8009b44 <_free_r>
 800966c:	2300      	movs	r3, #0
 800966e:	6363      	str	r3, [r4, #52]	@ 0x34
 8009670:	2300      	movs	r3, #0
 8009672:	61a3      	str	r3, [r4, #24]
 8009674:	6063      	str	r3, [r4, #4]
 8009676:	89a3      	ldrh	r3, [r4, #12]
 8009678:	061b      	lsls	r3, r3, #24
 800967a:	d503      	bpl.n	8009684 <setvbuf+0x74>
 800967c:	6921      	ldr	r1, [r4, #16]
 800967e:	4638      	mov	r0, r7
 8009680:	f000 fa60 	bl	8009b44 <_free_r>
 8009684:	89a3      	ldrh	r3, [r4, #12]
 8009686:	f423 634a 	bic.w	r3, r3, #3232	@ 0xca0
 800968a:	f023 0303 	bic.w	r3, r3, #3
 800968e:	f1b8 0f02 	cmp.w	r8, #2
 8009692:	81a3      	strh	r3, [r4, #12]
 8009694:	d061      	beq.n	800975a <setvbuf+0x14a>
 8009696:	ab01      	add	r3, sp, #4
 8009698:	466a      	mov	r2, sp
 800969a:	4621      	mov	r1, r4
 800969c:	4638      	mov	r0, r7
 800969e:	f000 fe29 	bl	800a2f4 <__swhatbuf_r>
 80096a2:	89a3      	ldrh	r3, [r4, #12]
 80096a4:	4318      	orrs	r0, r3
 80096a6:	81a0      	strh	r0, [r4, #12]
 80096a8:	bb2d      	cbnz	r5, 80096f6 <setvbuf+0xe6>
 80096aa:	9d00      	ldr	r5, [sp, #0]
 80096ac:	4628      	mov	r0, r5
 80096ae:	f7ff fd33 	bl	8009118 <malloc>
 80096b2:	4606      	mov	r6, r0
 80096b4:	2800      	cmp	r0, #0
 80096b6:	d152      	bne.n	800975e <setvbuf+0x14e>
 80096b8:	f8dd 9000 	ldr.w	r9, [sp]
 80096bc:	45a9      	cmp	r9, r5
 80096be:	d140      	bne.n	8009742 <setvbuf+0x132>
 80096c0:	f04f 35ff 	mov.w	r5, #4294967295
 80096c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80096c8:	f043 0202 	orr.w	r2, r3, #2
 80096cc:	81a2      	strh	r2, [r4, #12]
 80096ce:	2200      	movs	r2, #0
 80096d0:	60a2      	str	r2, [r4, #8]
 80096d2:	f104 0247 	add.w	r2, r4, #71	@ 0x47
 80096d6:	6022      	str	r2, [r4, #0]
 80096d8:	6122      	str	r2, [r4, #16]
 80096da:	2201      	movs	r2, #1
 80096dc:	6162      	str	r2, [r4, #20]
 80096de:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80096e0:	07d6      	lsls	r6, r2, #31
 80096e2:	d404      	bmi.n	80096ee <setvbuf+0xde>
 80096e4:	0598      	lsls	r0, r3, #22
 80096e6:	d402      	bmi.n	80096ee <setvbuf+0xde>
 80096e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80096ea:	f000 fa03 	bl	8009af4 <__retarget_lock_release_recursive>
 80096ee:	4628      	mov	r0, r5
 80096f0:	b003      	add	sp, #12
 80096f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80096f6:	2e00      	cmp	r6, #0
 80096f8:	d0d8      	beq.n	80096ac <setvbuf+0x9c>
 80096fa:	6a3b      	ldr	r3, [r7, #32]
 80096fc:	b913      	cbnz	r3, 8009704 <setvbuf+0xf4>
 80096fe:	4638      	mov	r0, r7
 8009700:	f7ff fed8 	bl	80094b4 <__sinit>
 8009704:	f1b8 0f01 	cmp.w	r8, #1
 8009708:	bf08      	it	eq
 800970a:	89a3      	ldrheq	r3, [r4, #12]
 800970c:	6026      	str	r6, [r4, #0]
 800970e:	bf04      	itt	eq
 8009710:	f043 0301 	orreq.w	r3, r3, #1
 8009714:	81a3      	strheq	r3, [r4, #12]
 8009716:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800971a:	f013 0208 	ands.w	r2, r3, #8
 800971e:	e9c4 6504 	strd	r6, r5, [r4, #16]
 8009722:	d01e      	beq.n	8009762 <setvbuf+0x152>
 8009724:	07d9      	lsls	r1, r3, #31
 8009726:	bf41      	itttt	mi
 8009728:	2200      	movmi	r2, #0
 800972a:	426d      	negmi	r5, r5
 800972c:	60a2      	strmi	r2, [r4, #8]
 800972e:	61a5      	strmi	r5, [r4, #24]
 8009730:	bf58      	it	pl
 8009732:	60a5      	strpl	r5, [r4, #8]
 8009734:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009736:	07d2      	lsls	r2, r2, #31
 8009738:	d401      	bmi.n	800973e <setvbuf+0x12e>
 800973a:	059b      	lsls	r3, r3, #22
 800973c:	d513      	bpl.n	8009766 <setvbuf+0x156>
 800973e:	2500      	movs	r5, #0
 8009740:	e7d5      	b.n	80096ee <setvbuf+0xde>
 8009742:	4648      	mov	r0, r9
 8009744:	f7ff fce8 	bl	8009118 <malloc>
 8009748:	4606      	mov	r6, r0
 800974a:	2800      	cmp	r0, #0
 800974c:	d0b8      	beq.n	80096c0 <setvbuf+0xb0>
 800974e:	89a3      	ldrh	r3, [r4, #12]
 8009750:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009754:	81a3      	strh	r3, [r4, #12]
 8009756:	464d      	mov	r5, r9
 8009758:	e7cf      	b.n	80096fa <setvbuf+0xea>
 800975a:	2500      	movs	r5, #0
 800975c:	e7b2      	b.n	80096c4 <setvbuf+0xb4>
 800975e:	46a9      	mov	r9, r5
 8009760:	e7f5      	b.n	800974e <setvbuf+0x13e>
 8009762:	60a2      	str	r2, [r4, #8]
 8009764:	e7e6      	b.n	8009734 <setvbuf+0x124>
 8009766:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8009768:	f000 f9c4 	bl	8009af4 <__retarget_lock_release_recursive>
 800976c:	e7e7      	b.n	800973e <setvbuf+0x12e>
 800976e:	f04f 35ff 	mov.w	r5, #4294967295
 8009772:	e7bc      	b.n	80096ee <setvbuf+0xde>
 8009774:	2000003c 	.word	0x2000003c

08009778 <__sread>:
 8009778:	b510      	push	{r4, lr}
 800977a:	460c      	mov	r4, r1
 800977c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009780:	f000 f958 	bl	8009a34 <_read_r>
 8009784:	2800      	cmp	r0, #0
 8009786:	bfab      	itete	ge
 8009788:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800978a:	89a3      	ldrhlt	r3, [r4, #12]
 800978c:	181b      	addge	r3, r3, r0
 800978e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8009792:	bfac      	ite	ge
 8009794:	6563      	strge	r3, [r4, #84]	@ 0x54
 8009796:	81a3      	strhlt	r3, [r4, #12]
 8009798:	bd10      	pop	{r4, pc}

0800979a <__swrite>:
 800979a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800979e:	461f      	mov	r7, r3
 80097a0:	898b      	ldrh	r3, [r1, #12]
 80097a2:	05db      	lsls	r3, r3, #23
 80097a4:	4605      	mov	r5, r0
 80097a6:	460c      	mov	r4, r1
 80097a8:	4616      	mov	r6, r2
 80097aa:	d505      	bpl.n	80097b8 <__swrite+0x1e>
 80097ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097b0:	2302      	movs	r3, #2
 80097b2:	2200      	movs	r2, #0
 80097b4:	f000 f92c 	bl	8009a10 <_lseek_r>
 80097b8:	89a3      	ldrh	r3, [r4, #12]
 80097ba:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80097be:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80097c2:	81a3      	strh	r3, [r4, #12]
 80097c4:	4632      	mov	r2, r6
 80097c6:	463b      	mov	r3, r7
 80097c8:	4628      	mov	r0, r5
 80097ca:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80097ce:	f000 b953 	b.w	8009a78 <_write_r>

080097d2 <__sseek>:
 80097d2:	b510      	push	{r4, lr}
 80097d4:	460c      	mov	r4, r1
 80097d6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097da:	f000 f919 	bl	8009a10 <_lseek_r>
 80097de:	1c43      	adds	r3, r0, #1
 80097e0:	89a3      	ldrh	r3, [r4, #12]
 80097e2:	bf15      	itete	ne
 80097e4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80097e6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80097ea:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80097ee:	81a3      	strheq	r3, [r4, #12]
 80097f0:	bf18      	it	ne
 80097f2:	81a3      	strhne	r3, [r4, #12]
 80097f4:	bd10      	pop	{r4, pc}

080097f6 <__sclose>:
 80097f6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80097fa:	f000 b8f9 	b.w	80099f0 <_close_r>

080097fe <__swbuf_r>:
 80097fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009800:	460e      	mov	r6, r1
 8009802:	4614      	mov	r4, r2
 8009804:	4605      	mov	r5, r0
 8009806:	b118      	cbz	r0, 8009810 <__swbuf_r+0x12>
 8009808:	6a03      	ldr	r3, [r0, #32]
 800980a:	b90b      	cbnz	r3, 8009810 <__swbuf_r+0x12>
 800980c:	f7ff fe52 	bl	80094b4 <__sinit>
 8009810:	69a3      	ldr	r3, [r4, #24]
 8009812:	60a3      	str	r3, [r4, #8]
 8009814:	89a3      	ldrh	r3, [r4, #12]
 8009816:	071a      	lsls	r2, r3, #28
 8009818:	d501      	bpl.n	800981e <__swbuf_r+0x20>
 800981a:	6923      	ldr	r3, [r4, #16]
 800981c:	b943      	cbnz	r3, 8009830 <__swbuf_r+0x32>
 800981e:	4621      	mov	r1, r4
 8009820:	4628      	mov	r0, r5
 8009822:	f000 f82b 	bl	800987c <__swsetup_r>
 8009826:	b118      	cbz	r0, 8009830 <__swbuf_r+0x32>
 8009828:	f04f 37ff 	mov.w	r7, #4294967295
 800982c:	4638      	mov	r0, r7
 800982e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009830:	6823      	ldr	r3, [r4, #0]
 8009832:	6922      	ldr	r2, [r4, #16]
 8009834:	1a98      	subs	r0, r3, r2
 8009836:	6963      	ldr	r3, [r4, #20]
 8009838:	b2f6      	uxtb	r6, r6
 800983a:	4283      	cmp	r3, r0
 800983c:	4637      	mov	r7, r6
 800983e:	dc05      	bgt.n	800984c <__swbuf_r+0x4e>
 8009840:	4621      	mov	r1, r4
 8009842:	4628      	mov	r0, r5
 8009844:	f000 fd1c 	bl	800a280 <_fflush_r>
 8009848:	2800      	cmp	r0, #0
 800984a:	d1ed      	bne.n	8009828 <__swbuf_r+0x2a>
 800984c:	68a3      	ldr	r3, [r4, #8]
 800984e:	3b01      	subs	r3, #1
 8009850:	60a3      	str	r3, [r4, #8]
 8009852:	6823      	ldr	r3, [r4, #0]
 8009854:	1c5a      	adds	r2, r3, #1
 8009856:	6022      	str	r2, [r4, #0]
 8009858:	701e      	strb	r6, [r3, #0]
 800985a:	6962      	ldr	r2, [r4, #20]
 800985c:	1c43      	adds	r3, r0, #1
 800985e:	429a      	cmp	r2, r3
 8009860:	d004      	beq.n	800986c <__swbuf_r+0x6e>
 8009862:	89a3      	ldrh	r3, [r4, #12]
 8009864:	07db      	lsls	r3, r3, #31
 8009866:	d5e1      	bpl.n	800982c <__swbuf_r+0x2e>
 8009868:	2e0a      	cmp	r6, #10
 800986a:	d1df      	bne.n	800982c <__swbuf_r+0x2e>
 800986c:	4621      	mov	r1, r4
 800986e:	4628      	mov	r0, r5
 8009870:	f000 fd06 	bl	800a280 <_fflush_r>
 8009874:	2800      	cmp	r0, #0
 8009876:	d0d9      	beq.n	800982c <__swbuf_r+0x2e>
 8009878:	e7d6      	b.n	8009828 <__swbuf_r+0x2a>
	...

0800987c <__swsetup_r>:
 800987c:	b538      	push	{r3, r4, r5, lr}
 800987e:	4b29      	ldr	r3, [pc, #164]	@ (8009924 <__swsetup_r+0xa8>)
 8009880:	4605      	mov	r5, r0
 8009882:	6818      	ldr	r0, [r3, #0]
 8009884:	460c      	mov	r4, r1
 8009886:	b118      	cbz	r0, 8009890 <__swsetup_r+0x14>
 8009888:	6a03      	ldr	r3, [r0, #32]
 800988a:	b90b      	cbnz	r3, 8009890 <__swsetup_r+0x14>
 800988c:	f7ff fe12 	bl	80094b4 <__sinit>
 8009890:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009894:	0719      	lsls	r1, r3, #28
 8009896:	d422      	bmi.n	80098de <__swsetup_r+0x62>
 8009898:	06da      	lsls	r2, r3, #27
 800989a:	d407      	bmi.n	80098ac <__swsetup_r+0x30>
 800989c:	2209      	movs	r2, #9
 800989e:	602a      	str	r2, [r5, #0]
 80098a0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80098a4:	81a3      	strh	r3, [r4, #12]
 80098a6:	f04f 30ff 	mov.w	r0, #4294967295
 80098aa:	e033      	b.n	8009914 <__swsetup_r+0x98>
 80098ac:	0758      	lsls	r0, r3, #29
 80098ae:	d512      	bpl.n	80098d6 <__swsetup_r+0x5a>
 80098b0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80098b2:	b141      	cbz	r1, 80098c6 <__swsetup_r+0x4a>
 80098b4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80098b8:	4299      	cmp	r1, r3
 80098ba:	d002      	beq.n	80098c2 <__swsetup_r+0x46>
 80098bc:	4628      	mov	r0, r5
 80098be:	f000 f941 	bl	8009b44 <_free_r>
 80098c2:	2300      	movs	r3, #0
 80098c4:	6363      	str	r3, [r4, #52]	@ 0x34
 80098c6:	89a3      	ldrh	r3, [r4, #12]
 80098c8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80098cc:	81a3      	strh	r3, [r4, #12]
 80098ce:	2300      	movs	r3, #0
 80098d0:	6063      	str	r3, [r4, #4]
 80098d2:	6923      	ldr	r3, [r4, #16]
 80098d4:	6023      	str	r3, [r4, #0]
 80098d6:	89a3      	ldrh	r3, [r4, #12]
 80098d8:	f043 0308 	orr.w	r3, r3, #8
 80098dc:	81a3      	strh	r3, [r4, #12]
 80098de:	6923      	ldr	r3, [r4, #16]
 80098e0:	b94b      	cbnz	r3, 80098f6 <__swsetup_r+0x7a>
 80098e2:	89a3      	ldrh	r3, [r4, #12]
 80098e4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80098e8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80098ec:	d003      	beq.n	80098f6 <__swsetup_r+0x7a>
 80098ee:	4621      	mov	r1, r4
 80098f0:	4628      	mov	r0, r5
 80098f2:	f000 fd25 	bl	800a340 <__smakebuf_r>
 80098f6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80098fa:	f013 0201 	ands.w	r2, r3, #1
 80098fe:	d00a      	beq.n	8009916 <__swsetup_r+0x9a>
 8009900:	2200      	movs	r2, #0
 8009902:	60a2      	str	r2, [r4, #8]
 8009904:	6962      	ldr	r2, [r4, #20]
 8009906:	4252      	negs	r2, r2
 8009908:	61a2      	str	r2, [r4, #24]
 800990a:	6922      	ldr	r2, [r4, #16]
 800990c:	b942      	cbnz	r2, 8009920 <__swsetup_r+0xa4>
 800990e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8009912:	d1c5      	bne.n	80098a0 <__swsetup_r+0x24>
 8009914:	bd38      	pop	{r3, r4, r5, pc}
 8009916:	0799      	lsls	r1, r3, #30
 8009918:	bf58      	it	pl
 800991a:	6962      	ldrpl	r2, [r4, #20]
 800991c:	60a2      	str	r2, [r4, #8]
 800991e:	e7f4      	b.n	800990a <__swsetup_r+0x8e>
 8009920:	2000      	movs	r0, #0
 8009922:	e7f7      	b.n	8009914 <__swsetup_r+0x98>
 8009924:	2000003c 	.word	0x2000003c

08009928 <memset>:
 8009928:	4402      	add	r2, r0
 800992a:	4603      	mov	r3, r0
 800992c:	4293      	cmp	r3, r2
 800992e:	d100      	bne.n	8009932 <memset+0xa>
 8009930:	4770      	bx	lr
 8009932:	f803 1b01 	strb.w	r1, [r3], #1
 8009936:	e7f9      	b.n	800992c <memset+0x4>

08009938 <strtok>:
 8009938:	4b16      	ldr	r3, [pc, #88]	@ (8009994 <strtok+0x5c>)
 800993a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800993e:	681f      	ldr	r7, [r3, #0]
 8009940:	6c7c      	ldr	r4, [r7, #68]	@ 0x44
 8009942:	4605      	mov	r5, r0
 8009944:	460e      	mov	r6, r1
 8009946:	b9ec      	cbnz	r4, 8009984 <strtok+0x4c>
 8009948:	2050      	movs	r0, #80	@ 0x50
 800994a:	f7ff fbe5 	bl	8009118 <malloc>
 800994e:	4602      	mov	r2, r0
 8009950:	6478      	str	r0, [r7, #68]	@ 0x44
 8009952:	b920      	cbnz	r0, 800995e <strtok+0x26>
 8009954:	4b10      	ldr	r3, [pc, #64]	@ (8009998 <strtok+0x60>)
 8009956:	4811      	ldr	r0, [pc, #68]	@ (800999c <strtok+0x64>)
 8009958:	215b      	movs	r1, #91	@ 0x5b
 800995a:	f000 f8d5 	bl	8009b08 <__assert_func>
 800995e:	e9c0 4400 	strd	r4, r4, [r0]
 8009962:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009966:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800996a:	e9c0 440a 	strd	r4, r4, [r0, #40]	@ 0x28
 800996e:	e9c0 440c 	strd	r4, r4, [r0, #48]	@ 0x30
 8009972:	e9c0 440e 	strd	r4, r4, [r0, #56]	@ 0x38
 8009976:	e9c0 4410 	strd	r4, r4, [r0, #64]	@ 0x40
 800997a:	e9c0 4412 	strd	r4, r4, [r0, #72]	@ 0x48
 800997e:	6184      	str	r4, [r0, #24]
 8009980:	7704      	strb	r4, [r0, #28]
 8009982:	6244      	str	r4, [r0, #36]	@ 0x24
 8009984:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8009986:	4631      	mov	r1, r6
 8009988:	4628      	mov	r0, r5
 800998a:	2301      	movs	r3, #1
 800998c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8009990:	f000 b806 	b.w	80099a0 <__strtok_r>
 8009994:	2000003c 	.word	0x2000003c
 8009998:	0800b59d 	.word	0x0800b59d
 800999c:	0800b5b4 	.word	0x0800b5b4

080099a0 <__strtok_r>:
 80099a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80099a2:	4604      	mov	r4, r0
 80099a4:	b908      	cbnz	r0, 80099aa <__strtok_r+0xa>
 80099a6:	6814      	ldr	r4, [r2, #0]
 80099a8:	b144      	cbz	r4, 80099bc <__strtok_r+0x1c>
 80099aa:	4620      	mov	r0, r4
 80099ac:	f814 5b01 	ldrb.w	r5, [r4], #1
 80099b0:	460f      	mov	r7, r1
 80099b2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80099b6:	b91e      	cbnz	r6, 80099c0 <__strtok_r+0x20>
 80099b8:	b965      	cbnz	r5, 80099d4 <__strtok_r+0x34>
 80099ba:	6015      	str	r5, [r2, #0]
 80099bc:	2000      	movs	r0, #0
 80099be:	e005      	b.n	80099cc <__strtok_r+0x2c>
 80099c0:	42b5      	cmp	r5, r6
 80099c2:	d1f6      	bne.n	80099b2 <__strtok_r+0x12>
 80099c4:	2b00      	cmp	r3, #0
 80099c6:	d1f0      	bne.n	80099aa <__strtok_r+0xa>
 80099c8:	6014      	str	r4, [r2, #0]
 80099ca:	7003      	strb	r3, [r0, #0]
 80099cc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80099ce:	461c      	mov	r4, r3
 80099d0:	e00c      	b.n	80099ec <__strtok_r+0x4c>
 80099d2:	b915      	cbnz	r5, 80099da <__strtok_r+0x3a>
 80099d4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80099d8:	460e      	mov	r6, r1
 80099da:	f816 5b01 	ldrb.w	r5, [r6], #1
 80099de:	42ab      	cmp	r3, r5
 80099e0:	d1f7      	bne.n	80099d2 <__strtok_r+0x32>
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d0f3      	beq.n	80099ce <__strtok_r+0x2e>
 80099e6:	2300      	movs	r3, #0
 80099e8:	f804 3c01 	strb.w	r3, [r4, #-1]
 80099ec:	6014      	str	r4, [r2, #0]
 80099ee:	e7ed      	b.n	80099cc <__strtok_r+0x2c>

080099f0 <_close_r>:
 80099f0:	b538      	push	{r3, r4, r5, lr}
 80099f2:	4d06      	ldr	r5, [pc, #24]	@ (8009a0c <_close_r+0x1c>)
 80099f4:	2300      	movs	r3, #0
 80099f6:	4604      	mov	r4, r0
 80099f8:	4608      	mov	r0, r1
 80099fa:	602b      	str	r3, [r5, #0]
 80099fc:	f7f8 fba8 	bl	8002150 <_close>
 8009a00:	1c43      	adds	r3, r0, #1
 8009a02:	d102      	bne.n	8009a0a <_close_r+0x1a>
 8009a04:	682b      	ldr	r3, [r5, #0]
 8009a06:	b103      	cbz	r3, 8009a0a <_close_r+0x1a>
 8009a08:	6023      	str	r3, [r4, #0]
 8009a0a:	bd38      	pop	{r3, r4, r5, pc}
 8009a0c:	20000a3c 	.word	0x20000a3c

08009a10 <_lseek_r>:
 8009a10:	b538      	push	{r3, r4, r5, lr}
 8009a12:	4d07      	ldr	r5, [pc, #28]	@ (8009a30 <_lseek_r+0x20>)
 8009a14:	4604      	mov	r4, r0
 8009a16:	4608      	mov	r0, r1
 8009a18:	4611      	mov	r1, r2
 8009a1a:	2200      	movs	r2, #0
 8009a1c:	602a      	str	r2, [r5, #0]
 8009a1e:	461a      	mov	r2, r3
 8009a20:	f7f8 fbbd 	bl	800219e <_lseek>
 8009a24:	1c43      	adds	r3, r0, #1
 8009a26:	d102      	bne.n	8009a2e <_lseek_r+0x1e>
 8009a28:	682b      	ldr	r3, [r5, #0]
 8009a2a:	b103      	cbz	r3, 8009a2e <_lseek_r+0x1e>
 8009a2c:	6023      	str	r3, [r4, #0]
 8009a2e:	bd38      	pop	{r3, r4, r5, pc}
 8009a30:	20000a3c 	.word	0x20000a3c

08009a34 <_read_r>:
 8009a34:	b538      	push	{r3, r4, r5, lr}
 8009a36:	4d07      	ldr	r5, [pc, #28]	@ (8009a54 <_read_r+0x20>)
 8009a38:	4604      	mov	r4, r0
 8009a3a:	4608      	mov	r0, r1
 8009a3c:	4611      	mov	r1, r2
 8009a3e:	2200      	movs	r2, #0
 8009a40:	602a      	str	r2, [r5, #0]
 8009a42:	461a      	mov	r2, r3
 8009a44:	f7f8 fb67 	bl	8002116 <_read>
 8009a48:	1c43      	adds	r3, r0, #1
 8009a4a:	d102      	bne.n	8009a52 <_read_r+0x1e>
 8009a4c:	682b      	ldr	r3, [r5, #0]
 8009a4e:	b103      	cbz	r3, 8009a52 <_read_r+0x1e>
 8009a50:	6023      	str	r3, [r4, #0]
 8009a52:	bd38      	pop	{r3, r4, r5, pc}
 8009a54:	20000a3c 	.word	0x20000a3c

08009a58 <_sbrk_r>:
 8009a58:	b538      	push	{r3, r4, r5, lr}
 8009a5a:	4d06      	ldr	r5, [pc, #24]	@ (8009a74 <_sbrk_r+0x1c>)
 8009a5c:	2300      	movs	r3, #0
 8009a5e:	4604      	mov	r4, r0
 8009a60:	4608      	mov	r0, r1
 8009a62:	602b      	str	r3, [r5, #0]
 8009a64:	f7f8 fba8 	bl	80021b8 <_sbrk>
 8009a68:	1c43      	adds	r3, r0, #1
 8009a6a:	d102      	bne.n	8009a72 <_sbrk_r+0x1a>
 8009a6c:	682b      	ldr	r3, [r5, #0]
 8009a6e:	b103      	cbz	r3, 8009a72 <_sbrk_r+0x1a>
 8009a70:	6023      	str	r3, [r4, #0]
 8009a72:	bd38      	pop	{r3, r4, r5, pc}
 8009a74:	20000a3c 	.word	0x20000a3c

08009a78 <_write_r>:
 8009a78:	b538      	push	{r3, r4, r5, lr}
 8009a7a:	4d07      	ldr	r5, [pc, #28]	@ (8009a98 <_write_r+0x20>)
 8009a7c:	4604      	mov	r4, r0
 8009a7e:	4608      	mov	r0, r1
 8009a80:	4611      	mov	r1, r2
 8009a82:	2200      	movs	r2, #0
 8009a84:	602a      	str	r2, [r5, #0]
 8009a86:	461a      	mov	r2, r3
 8009a88:	f7f7 fc82 	bl	8001390 <_write>
 8009a8c:	1c43      	adds	r3, r0, #1
 8009a8e:	d102      	bne.n	8009a96 <_write_r+0x1e>
 8009a90:	682b      	ldr	r3, [r5, #0]
 8009a92:	b103      	cbz	r3, 8009a96 <_write_r+0x1e>
 8009a94:	6023      	str	r3, [r4, #0]
 8009a96:	bd38      	pop	{r3, r4, r5, pc}
 8009a98:	20000a3c 	.word	0x20000a3c

08009a9c <__errno>:
 8009a9c:	4b01      	ldr	r3, [pc, #4]	@ (8009aa4 <__errno+0x8>)
 8009a9e:	6818      	ldr	r0, [r3, #0]
 8009aa0:	4770      	bx	lr
 8009aa2:	bf00      	nop
 8009aa4:	2000003c 	.word	0x2000003c

08009aa8 <__libc_init_array>:
 8009aa8:	b570      	push	{r4, r5, r6, lr}
 8009aaa:	4d0d      	ldr	r5, [pc, #52]	@ (8009ae0 <__libc_init_array+0x38>)
 8009aac:	4c0d      	ldr	r4, [pc, #52]	@ (8009ae4 <__libc_init_array+0x3c>)
 8009aae:	1b64      	subs	r4, r4, r5
 8009ab0:	10a4      	asrs	r4, r4, #2
 8009ab2:	2600      	movs	r6, #0
 8009ab4:	42a6      	cmp	r6, r4
 8009ab6:	d109      	bne.n	8009acc <__libc_init_array+0x24>
 8009ab8:	4d0b      	ldr	r5, [pc, #44]	@ (8009ae8 <__libc_init_array+0x40>)
 8009aba:	4c0c      	ldr	r4, [pc, #48]	@ (8009aec <__libc_init_array+0x44>)
 8009abc:	f000 fcea 	bl	800a494 <_init>
 8009ac0:	1b64      	subs	r4, r4, r5
 8009ac2:	10a4      	asrs	r4, r4, #2
 8009ac4:	2600      	movs	r6, #0
 8009ac6:	42a6      	cmp	r6, r4
 8009ac8:	d105      	bne.n	8009ad6 <__libc_init_array+0x2e>
 8009aca:	bd70      	pop	{r4, r5, r6, pc}
 8009acc:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ad0:	4798      	blx	r3
 8009ad2:	3601      	adds	r6, #1
 8009ad4:	e7ee      	b.n	8009ab4 <__libc_init_array+0xc>
 8009ad6:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ada:	4798      	blx	r3
 8009adc:	3601      	adds	r6, #1
 8009ade:	e7f2      	b.n	8009ac6 <__libc_init_array+0x1e>
 8009ae0:	0800b688 	.word	0x0800b688
 8009ae4:	0800b688 	.word	0x0800b688
 8009ae8:	0800b688 	.word	0x0800b688
 8009aec:	0800b68c 	.word	0x0800b68c

08009af0 <__retarget_lock_init_recursive>:
 8009af0:	4770      	bx	lr

08009af2 <__retarget_lock_acquire_recursive>:
 8009af2:	4770      	bx	lr

08009af4 <__retarget_lock_release_recursive>:
 8009af4:	4770      	bx	lr

08009af6 <strcpy>:
 8009af6:	4603      	mov	r3, r0
 8009af8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8009afc:	f803 2b01 	strb.w	r2, [r3], #1
 8009b00:	2a00      	cmp	r2, #0
 8009b02:	d1f9      	bne.n	8009af8 <strcpy+0x2>
 8009b04:	4770      	bx	lr
	...

08009b08 <__assert_func>:
 8009b08:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8009b0a:	4614      	mov	r4, r2
 8009b0c:	461a      	mov	r2, r3
 8009b0e:	4b09      	ldr	r3, [pc, #36]	@ (8009b34 <__assert_func+0x2c>)
 8009b10:	681b      	ldr	r3, [r3, #0]
 8009b12:	4605      	mov	r5, r0
 8009b14:	68d8      	ldr	r0, [r3, #12]
 8009b16:	b954      	cbnz	r4, 8009b2e <__assert_func+0x26>
 8009b18:	4b07      	ldr	r3, [pc, #28]	@ (8009b38 <__assert_func+0x30>)
 8009b1a:	461c      	mov	r4, r3
 8009b1c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009b20:	9100      	str	r1, [sp, #0]
 8009b22:	462b      	mov	r3, r5
 8009b24:	4905      	ldr	r1, [pc, #20]	@ (8009b3c <__assert_func+0x34>)
 8009b26:	f000 fbd3 	bl	800a2d0 <fiprintf>
 8009b2a:	f000 fc67 	bl	800a3fc <abort>
 8009b2e:	4b04      	ldr	r3, [pc, #16]	@ (8009b40 <__assert_func+0x38>)
 8009b30:	e7f4      	b.n	8009b1c <__assert_func+0x14>
 8009b32:	bf00      	nop
 8009b34:	2000003c 	.word	0x2000003c
 8009b38:	0800b649 	.word	0x0800b649
 8009b3c:	0800b61b 	.word	0x0800b61b
 8009b40:	0800b60e 	.word	0x0800b60e

08009b44 <_free_r>:
 8009b44:	b538      	push	{r3, r4, r5, lr}
 8009b46:	4605      	mov	r5, r0
 8009b48:	2900      	cmp	r1, #0
 8009b4a:	d041      	beq.n	8009bd0 <_free_r+0x8c>
 8009b4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8009b50:	1f0c      	subs	r4, r1, #4
 8009b52:	2b00      	cmp	r3, #0
 8009b54:	bfb8      	it	lt
 8009b56:	18e4      	addlt	r4, r4, r3
 8009b58:	f7ff fb90 	bl	800927c <__malloc_lock>
 8009b5c:	4a1d      	ldr	r2, [pc, #116]	@ (8009bd4 <_free_r+0x90>)
 8009b5e:	6813      	ldr	r3, [r2, #0]
 8009b60:	b933      	cbnz	r3, 8009b70 <_free_r+0x2c>
 8009b62:	6063      	str	r3, [r4, #4]
 8009b64:	6014      	str	r4, [r2, #0]
 8009b66:	4628      	mov	r0, r5
 8009b68:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8009b6c:	f7ff bb8c 	b.w	8009288 <__malloc_unlock>
 8009b70:	42a3      	cmp	r3, r4
 8009b72:	d908      	bls.n	8009b86 <_free_r+0x42>
 8009b74:	6820      	ldr	r0, [r4, #0]
 8009b76:	1821      	adds	r1, r4, r0
 8009b78:	428b      	cmp	r3, r1
 8009b7a:	bf01      	itttt	eq
 8009b7c:	6819      	ldreq	r1, [r3, #0]
 8009b7e:	685b      	ldreq	r3, [r3, #4]
 8009b80:	1809      	addeq	r1, r1, r0
 8009b82:	6021      	streq	r1, [r4, #0]
 8009b84:	e7ed      	b.n	8009b62 <_free_r+0x1e>
 8009b86:	461a      	mov	r2, r3
 8009b88:	685b      	ldr	r3, [r3, #4]
 8009b8a:	b10b      	cbz	r3, 8009b90 <_free_r+0x4c>
 8009b8c:	42a3      	cmp	r3, r4
 8009b8e:	d9fa      	bls.n	8009b86 <_free_r+0x42>
 8009b90:	6811      	ldr	r1, [r2, #0]
 8009b92:	1850      	adds	r0, r2, r1
 8009b94:	42a0      	cmp	r0, r4
 8009b96:	d10b      	bne.n	8009bb0 <_free_r+0x6c>
 8009b98:	6820      	ldr	r0, [r4, #0]
 8009b9a:	4401      	add	r1, r0
 8009b9c:	1850      	adds	r0, r2, r1
 8009b9e:	4283      	cmp	r3, r0
 8009ba0:	6011      	str	r1, [r2, #0]
 8009ba2:	d1e0      	bne.n	8009b66 <_free_r+0x22>
 8009ba4:	6818      	ldr	r0, [r3, #0]
 8009ba6:	685b      	ldr	r3, [r3, #4]
 8009ba8:	6053      	str	r3, [r2, #4]
 8009baa:	4408      	add	r0, r1
 8009bac:	6010      	str	r0, [r2, #0]
 8009bae:	e7da      	b.n	8009b66 <_free_r+0x22>
 8009bb0:	d902      	bls.n	8009bb8 <_free_r+0x74>
 8009bb2:	230c      	movs	r3, #12
 8009bb4:	602b      	str	r3, [r5, #0]
 8009bb6:	e7d6      	b.n	8009b66 <_free_r+0x22>
 8009bb8:	6820      	ldr	r0, [r4, #0]
 8009bba:	1821      	adds	r1, r4, r0
 8009bbc:	428b      	cmp	r3, r1
 8009bbe:	bf04      	itt	eq
 8009bc0:	6819      	ldreq	r1, [r3, #0]
 8009bc2:	685b      	ldreq	r3, [r3, #4]
 8009bc4:	6063      	str	r3, [r4, #4]
 8009bc6:	bf04      	itt	eq
 8009bc8:	1809      	addeq	r1, r1, r0
 8009bca:	6021      	streq	r1, [r4, #0]
 8009bcc:	6054      	str	r4, [r2, #4]
 8009bce:	e7ca      	b.n	8009b66 <_free_r+0x22>
 8009bd0:	bd38      	pop	{r3, r4, r5, pc}
 8009bd2:	bf00      	nop
 8009bd4:	200008fc 	.word	0x200008fc

08009bd8 <__sfputc_r>:
 8009bd8:	6893      	ldr	r3, [r2, #8]
 8009bda:	3b01      	subs	r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	b410      	push	{r4}
 8009be0:	6093      	str	r3, [r2, #8]
 8009be2:	da08      	bge.n	8009bf6 <__sfputc_r+0x1e>
 8009be4:	6994      	ldr	r4, [r2, #24]
 8009be6:	42a3      	cmp	r3, r4
 8009be8:	db01      	blt.n	8009bee <__sfputc_r+0x16>
 8009bea:	290a      	cmp	r1, #10
 8009bec:	d103      	bne.n	8009bf6 <__sfputc_r+0x1e>
 8009bee:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009bf2:	f7ff be04 	b.w	80097fe <__swbuf_r>
 8009bf6:	6813      	ldr	r3, [r2, #0]
 8009bf8:	1c58      	adds	r0, r3, #1
 8009bfa:	6010      	str	r0, [r2, #0]
 8009bfc:	7019      	strb	r1, [r3, #0]
 8009bfe:	4608      	mov	r0, r1
 8009c00:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009c04:	4770      	bx	lr

08009c06 <__sfputs_r>:
 8009c06:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009c08:	4606      	mov	r6, r0
 8009c0a:	460f      	mov	r7, r1
 8009c0c:	4614      	mov	r4, r2
 8009c0e:	18d5      	adds	r5, r2, r3
 8009c10:	42ac      	cmp	r4, r5
 8009c12:	d101      	bne.n	8009c18 <__sfputs_r+0x12>
 8009c14:	2000      	movs	r0, #0
 8009c16:	e007      	b.n	8009c28 <__sfputs_r+0x22>
 8009c18:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009c1c:	463a      	mov	r2, r7
 8009c1e:	4630      	mov	r0, r6
 8009c20:	f7ff ffda 	bl	8009bd8 <__sfputc_r>
 8009c24:	1c43      	adds	r3, r0, #1
 8009c26:	d1f3      	bne.n	8009c10 <__sfputs_r+0xa>
 8009c28:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009c2c <_vfiprintf_r>:
 8009c2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009c30:	460d      	mov	r5, r1
 8009c32:	b09d      	sub	sp, #116	@ 0x74
 8009c34:	4614      	mov	r4, r2
 8009c36:	4698      	mov	r8, r3
 8009c38:	4606      	mov	r6, r0
 8009c3a:	b118      	cbz	r0, 8009c44 <_vfiprintf_r+0x18>
 8009c3c:	6a03      	ldr	r3, [r0, #32]
 8009c3e:	b90b      	cbnz	r3, 8009c44 <_vfiprintf_r+0x18>
 8009c40:	f7ff fc38 	bl	80094b4 <__sinit>
 8009c44:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c46:	07d9      	lsls	r1, r3, #31
 8009c48:	d405      	bmi.n	8009c56 <_vfiprintf_r+0x2a>
 8009c4a:	89ab      	ldrh	r3, [r5, #12]
 8009c4c:	059a      	lsls	r2, r3, #22
 8009c4e:	d402      	bmi.n	8009c56 <_vfiprintf_r+0x2a>
 8009c50:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c52:	f7ff ff4e 	bl	8009af2 <__retarget_lock_acquire_recursive>
 8009c56:	89ab      	ldrh	r3, [r5, #12]
 8009c58:	071b      	lsls	r3, r3, #28
 8009c5a:	d501      	bpl.n	8009c60 <_vfiprintf_r+0x34>
 8009c5c:	692b      	ldr	r3, [r5, #16]
 8009c5e:	b99b      	cbnz	r3, 8009c88 <_vfiprintf_r+0x5c>
 8009c60:	4629      	mov	r1, r5
 8009c62:	4630      	mov	r0, r6
 8009c64:	f7ff fe0a 	bl	800987c <__swsetup_r>
 8009c68:	b170      	cbz	r0, 8009c88 <_vfiprintf_r+0x5c>
 8009c6a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009c6c:	07dc      	lsls	r4, r3, #31
 8009c6e:	d504      	bpl.n	8009c7a <_vfiprintf_r+0x4e>
 8009c70:	f04f 30ff 	mov.w	r0, #4294967295
 8009c74:	b01d      	add	sp, #116	@ 0x74
 8009c76:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009c7a:	89ab      	ldrh	r3, [r5, #12]
 8009c7c:	0598      	lsls	r0, r3, #22
 8009c7e:	d4f7      	bmi.n	8009c70 <_vfiprintf_r+0x44>
 8009c80:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009c82:	f7ff ff37 	bl	8009af4 <__retarget_lock_release_recursive>
 8009c86:	e7f3      	b.n	8009c70 <_vfiprintf_r+0x44>
 8009c88:	2300      	movs	r3, #0
 8009c8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009c8c:	2320      	movs	r3, #32
 8009c8e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009c92:	f8cd 800c 	str.w	r8, [sp, #12]
 8009c96:	2330      	movs	r3, #48	@ 0x30
 8009c98:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8009e48 <_vfiprintf_r+0x21c>
 8009c9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009ca0:	f04f 0901 	mov.w	r9, #1
 8009ca4:	4623      	mov	r3, r4
 8009ca6:	469a      	mov	sl, r3
 8009ca8:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009cac:	b10a      	cbz	r2, 8009cb2 <_vfiprintf_r+0x86>
 8009cae:	2a25      	cmp	r2, #37	@ 0x25
 8009cb0:	d1f9      	bne.n	8009ca6 <_vfiprintf_r+0x7a>
 8009cb2:	ebba 0b04 	subs.w	fp, sl, r4
 8009cb6:	d00b      	beq.n	8009cd0 <_vfiprintf_r+0xa4>
 8009cb8:	465b      	mov	r3, fp
 8009cba:	4622      	mov	r2, r4
 8009cbc:	4629      	mov	r1, r5
 8009cbe:	4630      	mov	r0, r6
 8009cc0:	f7ff ffa1 	bl	8009c06 <__sfputs_r>
 8009cc4:	3001      	adds	r0, #1
 8009cc6:	f000 80a7 	beq.w	8009e18 <_vfiprintf_r+0x1ec>
 8009cca:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009ccc:	445a      	add	r2, fp
 8009cce:	9209      	str	r2, [sp, #36]	@ 0x24
 8009cd0:	f89a 3000 	ldrb.w	r3, [sl]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	f000 809f 	beq.w	8009e18 <_vfiprintf_r+0x1ec>
 8009cda:	2300      	movs	r3, #0
 8009cdc:	f04f 32ff 	mov.w	r2, #4294967295
 8009ce0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009ce4:	f10a 0a01 	add.w	sl, sl, #1
 8009ce8:	9304      	str	r3, [sp, #16]
 8009cea:	9307      	str	r3, [sp, #28]
 8009cec:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009cf0:	931a      	str	r3, [sp, #104]	@ 0x68
 8009cf2:	4654      	mov	r4, sl
 8009cf4:	2205      	movs	r2, #5
 8009cf6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009cfa:	4853      	ldr	r0, [pc, #332]	@ (8009e48 <_vfiprintf_r+0x21c>)
 8009cfc:	f7f6 faa8 	bl	8000250 <memchr>
 8009d00:	9a04      	ldr	r2, [sp, #16]
 8009d02:	b9d8      	cbnz	r0, 8009d3c <_vfiprintf_r+0x110>
 8009d04:	06d1      	lsls	r1, r2, #27
 8009d06:	bf44      	itt	mi
 8009d08:	2320      	movmi	r3, #32
 8009d0a:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d0e:	0713      	lsls	r3, r2, #28
 8009d10:	bf44      	itt	mi
 8009d12:	232b      	movmi	r3, #43	@ 0x2b
 8009d14:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009d18:	f89a 3000 	ldrb.w	r3, [sl]
 8009d1c:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d1e:	d015      	beq.n	8009d4c <_vfiprintf_r+0x120>
 8009d20:	9a07      	ldr	r2, [sp, #28]
 8009d22:	4654      	mov	r4, sl
 8009d24:	2000      	movs	r0, #0
 8009d26:	f04f 0c0a 	mov.w	ip, #10
 8009d2a:	4621      	mov	r1, r4
 8009d2c:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009d30:	3b30      	subs	r3, #48	@ 0x30
 8009d32:	2b09      	cmp	r3, #9
 8009d34:	d94b      	bls.n	8009dce <_vfiprintf_r+0x1a2>
 8009d36:	b1b0      	cbz	r0, 8009d66 <_vfiprintf_r+0x13a>
 8009d38:	9207      	str	r2, [sp, #28]
 8009d3a:	e014      	b.n	8009d66 <_vfiprintf_r+0x13a>
 8009d3c:	eba0 0308 	sub.w	r3, r0, r8
 8009d40:	fa09 f303 	lsl.w	r3, r9, r3
 8009d44:	4313      	orrs	r3, r2
 8009d46:	9304      	str	r3, [sp, #16]
 8009d48:	46a2      	mov	sl, r4
 8009d4a:	e7d2      	b.n	8009cf2 <_vfiprintf_r+0xc6>
 8009d4c:	9b03      	ldr	r3, [sp, #12]
 8009d4e:	1d19      	adds	r1, r3, #4
 8009d50:	681b      	ldr	r3, [r3, #0]
 8009d52:	9103      	str	r1, [sp, #12]
 8009d54:	2b00      	cmp	r3, #0
 8009d56:	bfbb      	ittet	lt
 8009d58:	425b      	neglt	r3, r3
 8009d5a:	f042 0202 	orrlt.w	r2, r2, #2
 8009d5e:	9307      	strge	r3, [sp, #28]
 8009d60:	9307      	strlt	r3, [sp, #28]
 8009d62:	bfb8      	it	lt
 8009d64:	9204      	strlt	r2, [sp, #16]
 8009d66:	7823      	ldrb	r3, [r4, #0]
 8009d68:	2b2e      	cmp	r3, #46	@ 0x2e
 8009d6a:	d10a      	bne.n	8009d82 <_vfiprintf_r+0x156>
 8009d6c:	7863      	ldrb	r3, [r4, #1]
 8009d6e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009d70:	d132      	bne.n	8009dd8 <_vfiprintf_r+0x1ac>
 8009d72:	9b03      	ldr	r3, [sp, #12]
 8009d74:	1d1a      	adds	r2, r3, #4
 8009d76:	681b      	ldr	r3, [r3, #0]
 8009d78:	9203      	str	r2, [sp, #12]
 8009d7a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009d7e:	3402      	adds	r4, #2
 8009d80:	9305      	str	r3, [sp, #20]
 8009d82:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8009e58 <_vfiprintf_r+0x22c>
 8009d86:	7821      	ldrb	r1, [r4, #0]
 8009d88:	2203      	movs	r2, #3
 8009d8a:	4650      	mov	r0, sl
 8009d8c:	f7f6 fa60 	bl	8000250 <memchr>
 8009d90:	b138      	cbz	r0, 8009da2 <_vfiprintf_r+0x176>
 8009d92:	9b04      	ldr	r3, [sp, #16]
 8009d94:	eba0 000a 	sub.w	r0, r0, sl
 8009d98:	2240      	movs	r2, #64	@ 0x40
 8009d9a:	4082      	lsls	r2, r0
 8009d9c:	4313      	orrs	r3, r2
 8009d9e:	3401      	adds	r4, #1
 8009da0:	9304      	str	r3, [sp, #16]
 8009da2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009da6:	4829      	ldr	r0, [pc, #164]	@ (8009e4c <_vfiprintf_r+0x220>)
 8009da8:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009dac:	2206      	movs	r2, #6
 8009dae:	f7f6 fa4f 	bl	8000250 <memchr>
 8009db2:	2800      	cmp	r0, #0
 8009db4:	d03f      	beq.n	8009e36 <_vfiprintf_r+0x20a>
 8009db6:	4b26      	ldr	r3, [pc, #152]	@ (8009e50 <_vfiprintf_r+0x224>)
 8009db8:	bb1b      	cbnz	r3, 8009e02 <_vfiprintf_r+0x1d6>
 8009dba:	9b03      	ldr	r3, [sp, #12]
 8009dbc:	3307      	adds	r3, #7
 8009dbe:	f023 0307 	bic.w	r3, r3, #7
 8009dc2:	3308      	adds	r3, #8
 8009dc4:	9303      	str	r3, [sp, #12]
 8009dc6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009dc8:	443b      	add	r3, r7
 8009dca:	9309      	str	r3, [sp, #36]	@ 0x24
 8009dcc:	e76a      	b.n	8009ca4 <_vfiprintf_r+0x78>
 8009dce:	fb0c 3202 	mla	r2, ip, r2, r3
 8009dd2:	460c      	mov	r4, r1
 8009dd4:	2001      	movs	r0, #1
 8009dd6:	e7a8      	b.n	8009d2a <_vfiprintf_r+0xfe>
 8009dd8:	2300      	movs	r3, #0
 8009dda:	3401      	adds	r4, #1
 8009ddc:	9305      	str	r3, [sp, #20]
 8009dde:	4619      	mov	r1, r3
 8009de0:	f04f 0c0a 	mov.w	ip, #10
 8009de4:	4620      	mov	r0, r4
 8009de6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009dea:	3a30      	subs	r2, #48	@ 0x30
 8009dec:	2a09      	cmp	r2, #9
 8009dee:	d903      	bls.n	8009df8 <_vfiprintf_r+0x1cc>
 8009df0:	2b00      	cmp	r3, #0
 8009df2:	d0c6      	beq.n	8009d82 <_vfiprintf_r+0x156>
 8009df4:	9105      	str	r1, [sp, #20]
 8009df6:	e7c4      	b.n	8009d82 <_vfiprintf_r+0x156>
 8009df8:	fb0c 2101 	mla	r1, ip, r1, r2
 8009dfc:	4604      	mov	r4, r0
 8009dfe:	2301      	movs	r3, #1
 8009e00:	e7f0      	b.n	8009de4 <_vfiprintf_r+0x1b8>
 8009e02:	ab03      	add	r3, sp, #12
 8009e04:	9300      	str	r3, [sp, #0]
 8009e06:	462a      	mov	r2, r5
 8009e08:	4b12      	ldr	r3, [pc, #72]	@ (8009e54 <_vfiprintf_r+0x228>)
 8009e0a:	a904      	add	r1, sp, #16
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	f3af 8000 	nop.w
 8009e12:	4607      	mov	r7, r0
 8009e14:	1c78      	adds	r0, r7, #1
 8009e16:	d1d6      	bne.n	8009dc6 <_vfiprintf_r+0x19a>
 8009e18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009e1a:	07d9      	lsls	r1, r3, #31
 8009e1c:	d405      	bmi.n	8009e2a <_vfiprintf_r+0x1fe>
 8009e1e:	89ab      	ldrh	r3, [r5, #12]
 8009e20:	059a      	lsls	r2, r3, #22
 8009e22:	d402      	bmi.n	8009e2a <_vfiprintf_r+0x1fe>
 8009e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009e26:	f7ff fe65 	bl	8009af4 <__retarget_lock_release_recursive>
 8009e2a:	89ab      	ldrh	r3, [r5, #12]
 8009e2c:	065b      	lsls	r3, r3, #25
 8009e2e:	f53f af1f 	bmi.w	8009c70 <_vfiprintf_r+0x44>
 8009e32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009e34:	e71e      	b.n	8009c74 <_vfiprintf_r+0x48>
 8009e36:	ab03      	add	r3, sp, #12
 8009e38:	9300      	str	r3, [sp, #0]
 8009e3a:	462a      	mov	r2, r5
 8009e3c:	4b05      	ldr	r3, [pc, #20]	@ (8009e54 <_vfiprintf_r+0x228>)
 8009e3e:	a904      	add	r1, sp, #16
 8009e40:	4630      	mov	r0, r6
 8009e42:	f000 f879 	bl	8009f38 <_printf_i>
 8009e46:	e7e4      	b.n	8009e12 <_vfiprintf_r+0x1e6>
 8009e48:	0800b64a 	.word	0x0800b64a
 8009e4c:	0800b654 	.word	0x0800b654
 8009e50:	00000000 	.word	0x00000000
 8009e54:	08009c07 	.word	0x08009c07
 8009e58:	0800b650 	.word	0x0800b650

08009e5c <_printf_common>:
 8009e5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009e60:	4616      	mov	r6, r2
 8009e62:	4698      	mov	r8, r3
 8009e64:	688a      	ldr	r2, [r1, #8]
 8009e66:	690b      	ldr	r3, [r1, #16]
 8009e68:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8009e6c:	4293      	cmp	r3, r2
 8009e6e:	bfb8      	it	lt
 8009e70:	4613      	movlt	r3, r2
 8009e72:	6033      	str	r3, [r6, #0]
 8009e74:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8009e78:	4607      	mov	r7, r0
 8009e7a:	460c      	mov	r4, r1
 8009e7c:	b10a      	cbz	r2, 8009e82 <_printf_common+0x26>
 8009e7e:	3301      	adds	r3, #1
 8009e80:	6033      	str	r3, [r6, #0]
 8009e82:	6823      	ldr	r3, [r4, #0]
 8009e84:	0699      	lsls	r1, r3, #26
 8009e86:	bf42      	ittt	mi
 8009e88:	6833      	ldrmi	r3, [r6, #0]
 8009e8a:	3302      	addmi	r3, #2
 8009e8c:	6033      	strmi	r3, [r6, #0]
 8009e8e:	6825      	ldr	r5, [r4, #0]
 8009e90:	f015 0506 	ands.w	r5, r5, #6
 8009e94:	d106      	bne.n	8009ea4 <_printf_common+0x48>
 8009e96:	f104 0a19 	add.w	sl, r4, #25
 8009e9a:	68e3      	ldr	r3, [r4, #12]
 8009e9c:	6832      	ldr	r2, [r6, #0]
 8009e9e:	1a9b      	subs	r3, r3, r2
 8009ea0:	42ab      	cmp	r3, r5
 8009ea2:	dc26      	bgt.n	8009ef2 <_printf_common+0x96>
 8009ea4:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8009ea8:	6822      	ldr	r2, [r4, #0]
 8009eaa:	3b00      	subs	r3, #0
 8009eac:	bf18      	it	ne
 8009eae:	2301      	movne	r3, #1
 8009eb0:	0692      	lsls	r2, r2, #26
 8009eb2:	d42b      	bmi.n	8009f0c <_printf_common+0xb0>
 8009eb4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8009eb8:	4641      	mov	r1, r8
 8009eba:	4638      	mov	r0, r7
 8009ebc:	47c8      	blx	r9
 8009ebe:	3001      	adds	r0, #1
 8009ec0:	d01e      	beq.n	8009f00 <_printf_common+0xa4>
 8009ec2:	6823      	ldr	r3, [r4, #0]
 8009ec4:	6922      	ldr	r2, [r4, #16]
 8009ec6:	f003 0306 	and.w	r3, r3, #6
 8009eca:	2b04      	cmp	r3, #4
 8009ecc:	bf02      	ittt	eq
 8009ece:	68e5      	ldreq	r5, [r4, #12]
 8009ed0:	6833      	ldreq	r3, [r6, #0]
 8009ed2:	1aed      	subeq	r5, r5, r3
 8009ed4:	68a3      	ldr	r3, [r4, #8]
 8009ed6:	bf0c      	ite	eq
 8009ed8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009edc:	2500      	movne	r5, #0
 8009ede:	4293      	cmp	r3, r2
 8009ee0:	bfc4      	itt	gt
 8009ee2:	1a9b      	subgt	r3, r3, r2
 8009ee4:	18ed      	addgt	r5, r5, r3
 8009ee6:	2600      	movs	r6, #0
 8009ee8:	341a      	adds	r4, #26
 8009eea:	42b5      	cmp	r5, r6
 8009eec:	d11a      	bne.n	8009f24 <_printf_common+0xc8>
 8009eee:	2000      	movs	r0, #0
 8009ef0:	e008      	b.n	8009f04 <_printf_common+0xa8>
 8009ef2:	2301      	movs	r3, #1
 8009ef4:	4652      	mov	r2, sl
 8009ef6:	4641      	mov	r1, r8
 8009ef8:	4638      	mov	r0, r7
 8009efa:	47c8      	blx	r9
 8009efc:	3001      	adds	r0, #1
 8009efe:	d103      	bne.n	8009f08 <_printf_common+0xac>
 8009f00:	f04f 30ff 	mov.w	r0, #4294967295
 8009f04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f08:	3501      	adds	r5, #1
 8009f0a:	e7c6      	b.n	8009e9a <_printf_common+0x3e>
 8009f0c:	18e1      	adds	r1, r4, r3
 8009f0e:	1c5a      	adds	r2, r3, #1
 8009f10:	2030      	movs	r0, #48	@ 0x30
 8009f12:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8009f16:	4422      	add	r2, r4
 8009f18:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8009f1c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8009f20:	3302      	adds	r3, #2
 8009f22:	e7c7      	b.n	8009eb4 <_printf_common+0x58>
 8009f24:	2301      	movs	r3, #1
 8009f26:	4622      	mov	r2, r4
 8009f28:	4641      	mov	r1, r8
 8009f2a:	4638      	mov	r0, r7
 8009f2c:	47c8      	blx	r9
 8009f2e:	3001      	adds	r0, #1
 8009f30:	d0e6      	beq.n	8009f00 <_printf_common+0xa4>
 8009f32:	3601      	adds	r6, #1
 8009f34:	e7d9      	b.n	8009eea <_printf_common+0x8e>
	...

08009f38 <_printf_i>:
 8009f38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f3c:	7e0f      	ldrb	r7, [r1, #24]
 8009f3e:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8009f40:	2f78      	cmp	r7, #120	@ 0x78
 8009f42:	4691      	mov	r9, r2
 8009f44:	4680      	mov	r8, r0
 8009f46:	460c      	mov	r4, r1
 8009f48:	469a      	mov	sl, r3
 8009f4a:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8009f4e:	d807      	bhi.n	8009f60 <_printf_i+0x28>
 8009f50:	2f62      	cmp	r7, #98	@ 0x62
 8009f52:	d80a      	bhi.n	8009f6a <_printf_i+0x32>
 8009f54:	2f00      	cmp	r7, #0
 8009f56:	f000 80d2 	beq.w	800a0fe <_printf_i+0x1c6>
 8009f5a:	2f58      	cmp	r7, #88	@ 0x58
 8009f5c:	f000 80b9 	beq.w	800a0d2 <_printf_i+0x19a>
 8009f60:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009f64:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8009f68:	e03a      	b.n	8009fe0 <_printf_i+0xa8>
 8009f6a:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8009f6e:	2b15      	cmp	r3, #21
 8009f70:	d8f6      	bhi.n	8009f60 <_printf_i+0x28>
 8009f72:	a101      	add	r1, pc, #4	@ (adr r1, 8009f78 <_printf_i+0x40>)
 8009f74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f78:	08009fd1 	.word	0x08009fd1
 8009f7c:	08009fe5 	.word	0x08009fe5
 8009f80:	08009f61 	.word	0x08009f61
 8009f84:	08009f61 	.word	0x08009f61
 8009f88:	08009f61 	.word	0x08009f61
 8009f8c:	08009f61 	.word	0x08009f61
 8009f90:	08009fe5 	.word	0x08009fe5
 8009f94:	08009f61 	.word	0x08009f61
 8009f98:	08009f61 	.word	0x08009f61
 8009f9c:	08009f61 	.word	0x08009f61
 8009fa0:	08009f61 	.word	0x08009f61
 8009fa4:	0800a0e5 	.word	0x0800a0e5
 8009fa8:	0800a00f 	.word	0x0800a00f
 8009fac:	0800a09f 	.word	0x0800a09f
 8009fb0:	08009f61 	.word	0x08009f61
 8009fb4:	08009f61 	.word	0x08009f61
 8009fb8:	0800a107 	.word	0x0800a107
 8009fbc:	08009f61 	.word	0x08009f61
 8009fc0:	0800a00f 	.word	0x0800a00f
 8009fc4:	08009f61 	.word	0x08009f61
 8009fc8:	08009f61 	.word	0x08009f61
 8009fcc:	0800a0a7 	.word	0x0800a0a7
 8009fd0:	6833      	ldr	r3, [r6, #0]
 8009fd2:	1d1a      	adds	r2, r3, #4
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	6032      	str	r2, [r6, #0]
 8009fd8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8009fdc:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8009fe0:	2301      	movs	r3, #1
 8009fe2:	e09d      	b.n	800a120 <_printf_i+0x1e8>
 8009fe4:	6833      	ldr	r3, [r6, #0]
 8009fe6:	6820      	ldr	r0, [r4, #0]
 8009fe8:	1d19      	adds	r1, r3, #4
 8009fea:	6031      	str	r1, [r6, #0]
 8009fec:	0606      	lsls	r6, r0, #24
 8009fee:	d501      	bpl.n	8009ff4 <_printf_i+0xbc>
 8009ff0:	681d      	ldr	r5, [r3, #0]
 8009ff2:	e003      	b.n	8009ffc <_printf_i+0xc4>
 8009ff4:	0645      	lsls	r5, r0, #25
 8009ff6:	d5fb      	bpl.n	8009ff0 <_printf_i+0xb8>
 8009ff8:	f9b3 5000 	ldrsh.w	r5, [r3]
 8009ffc:	2d00      	cmp	r5, #0
 8009ffe:	da03      	bge.n	800a008 <_printf_i+0xd0>
 800a000:	232d      	movs	r3, #45	@ 0x2d
 800a002:	426d      	negs	r5, r5
 800a004:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a008:	4859      	ldr	r0, [pc, #356]	@ (800a170 <_printf_i+0x238>)
 800a00a:	230a      	movs	r3, #10
 800a00c:	e011      	b.n	800a032 <_printf_i+0xfa>
 800a00e:	6821      	ldr	r1, [r4, #0]
 800a010:	6833      	ldr	r3, [r6, #0]
 800a012:	0608      	lsls	r0, r1, #24
 800a014:	f853 5b04 	ldr.w	r5, [r3], #4
 800a018:	d402      	bmi.n	800a020 <_printf_i+0xe8>
 800a01a:	0649      	lsls	r1, r1, #25
 800a01c:	bf48      	it	mi
 800a01e:	b2ad      	uxthmi	r5, r5
 800a020:	2f6f      	cmp	r7, #111	@ 0x6f
 800a022:	4853      	ldr	r0, [pc, #332]	@ (800a170 <_printf_i+0x238>)
 800a024:	6033      	str	r3, [r6, #0]
 800a026:	bf14      	ite	ne
 800a028:	230a      	movne	r3, #10
 800a02a:	2308      	moveq	r3, #8
 800a02c:	2100      	movs	r1, #0
 800a02e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800a032:	6866      	ldr	r6, [r4, #4]
 800a034:	60a6      	str	r6, [r4, #8]
 800a036:	2e00      	cmp	r6, #0
 800a038:	bfa2      	ittt	ge
 800a03a:	6821      	ldrge	r1, [r4, #0]
 800a03c:	f021 0104 	bicge.w	r1, r1, #4
 800a040:	6021      	strge	r1, [r4, #0]
 800a042:	b90d      	cbnz	r5, 800a048 <_printf_i+0x110>
 800a044:	2e00      	cmp	r6, #0
 800a046:	d04b      	beq.n	800a0e0 <_printf_i+0x1a8>
 800a048:	4616      	mov	r6, r2
 800a04a:	fbb5 f1f3 	udiv	r1, r5, r3
 800a04e:	fb03 5711 	mls	r7, r3, r1, r5
 800a052:	5dc7      	ldrb	r7, [r0, r7]
 800a054:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800a058:	462f      	mov	r7, r5
 800a05a:	42bb      	cmp	r3, r7
 800a05c:	460d      	mov	r5, r1
 800a05e:	d9f4      	bls.n	800a04a <_printf_i+0x112>
 800a060:	2b08      	cmp	r3, #8
 800a062:	d10b      	bne.n	800a07c <_printf_i+0x144>
 800a064:	6823      	ldr	r3, [r4, #0]
 800a066:	07df      	lsls	r7, r3, #31
 800a068:	d508      	bpl.n	800a07c <_printf_i+0x144>
 800a06a:	6923      	ldr	r3, [r4, #16]
 800a06c:	6861      	ldr	r1, [r4, #4]
 800a06e:	4299      	cmp	r1, r3
 800a070:	bfde      	ittt	le
 800a072:	2330      	movle	r3, #48	@ 0x30
 800a074:	f806 3c01 	strble.w	r3, [r6, #-1]
 800a078:	f106 36ff 	addle.w	r6, r6, #4294967295
 800a07c:	1b92      	subs	r2, r2, r6
 800a07e:	6122      	str	r2, [r4, #16]
 800a080:	f8cd a000 	str.w	sl, [sp]
 800a084:	464b      	mov	r3, r9
 800a086:	aa03      	add	r2, sp, #12
 800a088:	4621      	mov	r1, r4
 800a08a:	4640      	mov	r0, r8
 800a08c:	f7ff fee6 	bl	8009e5c <_printf_common>
 800a090:	3001      	adds	r0, #1
 800a092:	d14a      	bne.n	800a12a <_printf_i+0x1f2>
 800a094:	f04f 30ff 	mov.w	r0, #4294967295
 800a098:	b004      	add	sp, #16
 800a09a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a09e:	6823      	ldr	r3, [r4, #0]
 800a0a0:	f043 0320 	orr.w	r3, r3, #32
 800a0a4:	6023      	str	r3, [r4, #0]
 800a0a6:	4833      	ldr	r0, [pc, #204]	@ (800a174 <_printf_i+0x23c>)
 800a0a8:	2778      	movs	r7, #120	@ 0x78
 800a0aa:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 800a0ae:	6823      	ldr	r3, [r4, #0]
 800a0b0:	6831      	ldr	r1, [r6, #0]
 800a0b2:	061f      	lsls	r7, r3, #24
 800a0b4:	f851 5b04 	ldr.w	r5, [r1], #4
 800a0b8:	d402      	bmi.n	800a0c0 <_printf_i+0x188>
 800a0ba:	065f      	lsls	r7, r3, #25
 800a0bc:	bf48      	it	mi
 800a0be:	b2ad      	uxthmi	r5, r5
 800a0c0:	6031      	str	r1, [r6, #0]
 800a0c2:	07d9      	lsls	r1, r3, #31
 800a0c4:	bf44      	itt	mi
 800a0c6:	f043 0320 	orrmi.w	r3, r3, #32
 800a0ca:	6023      	strmi	r3, [r4, #0]
 800a0cc:	b11d      	cbz	r5, 800a0d6 <_printf_i+0x19e>
 800a0ce:	2310      	movs	r3, #16
 800a0d0:	e7ac      	b.n	800a02c <_printf_i+0xf4>
 800a0d2:	4827      	ldr	r0, [pc, #156]	@ (800a170 <_printf_i+0x238>)
 800a0d4:	e7e9      	b.n	800a0aa <_printf_i+0x172>
 800a0d6:	6823      	ldr	r3, [r4, #0]
 800a0d8:	f023 0320 	bic.w	r3, r3, #32
 800a0dc:	6023      	str	r3, [r4, #0]
 800a0de:	e7f6      	b.n	800a0ce <_printf_i+0x196>
 800a0e0:	4616      	mov	r6, r2
 800a0e2:	e7bd      	b.n	800a060 <_printf_i+0x128>
 800a0e4:	6833      	ldr	r3, [r6, #0]
 800a0e6:	6825      	ldr	r5, [r4, #0]
 800a0e8:	6961      	ldr	r1, [r4, #20]
 800a0ea:	1d18      	adds	r0, r3, #4
 800a0ec:	6030      	str	r0, [r6, #0]
 800a0ee:	062e      	lsls	r6, r5, #24
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	d501      	bpl.n	800a0f8 <_printf_i+0x1c0>
 800a0f4:	6019      	str	r1, [r3, #0]
 800a0f6:	e002      	b.n	800a0fe <_printf_i+0x1c6>
 800a0f8:	0668      	lsls	r0, r5, #25
 800a0fa:	d5fb      	bpl.n	800a0f4 <_printf_i+0x1bc>
 800a0fc:	8019      	strh	r1, [r3, #0]
 800a0fe:	2300      	movs	r3, #0
 800a100:	6123      	str	r3, [r4, #16]
 800a102:	4616      	mov	r6, r2
 800a104:	e7bc      	b.n	800a080 <_printf_i+0x148>
 800a106:	6833      	ldr	r3, [r6, #0]
 800a108:	1d1a      	adds	r2, r3, #4
 800a10a:	6032      	str	r2, [r6, #0]
 800a10c:	681e      	ldr	r6, [r3, #0]
 800a10e:	6862      	ldr	r2, [r4, #4]
 800a110:	2100      	movs	r1, #0
 800a112:	4630      	mov	r0, r6
 800a114:	f7f6 f89c 	bl	8000250 <memchr>
 800a118:	b108      	cbz	r0, 800a11e <_printf_i+0x1e6>
 800a11a:	1b80      	subs	r0, r0, r6
 800a11c:	6060      	str	r0, [r4, #4]
 800a11e:	6863      	ldr	r3, [r4, #4]
 800a120:	6123      	str	r3, [r4, #16]
 800a122:	2300      	movs	r3, #0
 800a124:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800a128:	e7aa      	b.n	800a080 <_printf_i+0x148>
 800a12a:	6923      	ldr	r3, [r4, #16]
 800a12c:	4632      	mov	r2, r6
 800a12e:	4649      	mov	r1, r9
 800a130:	4640      	mov	r0, r8
 800a132:	47d0      	blx	sl
 800a134:	3001      	adds	r0, #1
 800a136:	d0ad      	beq.n	800a094 <_printf_i+0x15c>
 800a138:	6823      	ldr	r3, [r4, #0]
 800a13a:	079b      	lsls	r3, r3, #30
 800a13c:	d413      	bmi.n	800a166 <_printf_i+0x22e>
 800a13e:	68e0      	ldr	r0, [r4, #12]
 800a140:	9b03      	ldr	r3, [sp, #12]
 800a142:	4298      	cmp	r0, r3
 800a144:	bfb8      	it	lt
 800a146:	4618      	movlt	r0, r3
 800a148:	e7a6      	b.n	800a098 <_printf_i+0x160>
 800a14a:	2301      	movs	r3, #1
 800a14c:	4632      	mov	r2, r6
 800a14e:	4649      	mov	r1, r9
 800a150:	4640      	mov	r0, r8
 800a152:	47d0      	blx	sl
 800a154:	3001      	adds	r0, #1
 800a156:	d09d      	beq.n	800a094 <_printf_i+0x15c>
 800a158:	3501      	adds	r5, #1
 800a15a:	68e3      	ldr	r3, [r4, #12]
 800a15c:	9903      	ldr	r1, [sp, #12]
 800a15e:	1a5b      	subs	r3, r3, r1
 800a160:	42ab      	cmp	r3, r5
 800a162:	dcf2      	bgt.n	800a14a <_printf_i+0x212>
 800a164:	e7eb      	b.n	800a13e <_printf_i+0x206>
 800a166:	2500      	movs	r5, #0
 800a168:	f104 0619 	add.w	r6, r4, #25
 800a16c:	e7f5      	b.n	800a15a <_printf_i+0x222>
 800a16e:	bf00      	nop
 800a170:	0800b65b 	.word	0x0800b65b
 800a174:	0800b66c 	.word	0x0800b66c

0800a178 <__sflush_r>:
 800a178:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a17c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a180:	0716      	lsls	r6, r2, #28
 800a182:	4605      	mov	r5, r0
 800a184:	460c      	mov	r4, r1
 800a186:	d454      	bmi.n	800a232 <__sflush_r+0xba>
 800a188:	684b      	ldr	r3, [r1, #4]
 800a18a:	2b00      	cmp	r3, #0
 800a18c:	dc02      	bgt.n	800a194 <__sflush_r+0x1c>
 800a18e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a190:	2b00      	cmp	r3, #0
 800a192:	dd48      	ble.n	800a226 <__sflush_r+0xae>
 800a194:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a196:	2e00      	cmp	r6, #0
 800a198:	d045      	beq.n	800a226 <__sflush_r+0xae>
 800a19a:	2300      	movs	r3, #0
 800a19c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1a0:	682f      	ldr	r7, [r5, #0]
 800a1a2:	6a21      	ldr	r1, [r4, #32]
 800a1a4:	602b      	str	r3, [r5, #0]
 800a1a6:	d030      	beq.n	800a20a <__sflush_r+0x92>
 800a1a8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a1aa:	89a3      	ldrh	r3, [r4, #12]
 800a1ac:	0759      	lsls	r1, r3, #29
 800a1ae:	d505      	bpl.n	800a1bc <__sflush_r+0x44>
 800a1b0:	6863      	ldr	r3, [r4, #4]
 800a1b2:	1ad2      	subs	r2, r2, r3
 800a1b4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a1b6:	b10b      	cbz	r3, 800a1bc <__sflush_r+0x44>
 800a1b8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a1ba:	1ad2      	subs	r2, r2, r3
 800a1bc:	2300      	movs	r3, #0
 800a1be:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1c0:	6a21      	ldr	r1, [r4, #32]
 800a1c2:	4628      	mov	r0, r5
 800a1c4:	47b0      	blx	r6
 800a1c6:	1c43      	adds	r3, r0, #1
 800a1c8:	89a3      	ldrh	r3, [r4, #12]
 800a1ca:	d106      	bne.n	800a1da <__sflush_r+0x62>
 800a1cc:	6829      	ldr	r1, [r5, #0]
 800a1ce:	291d      	cmp	r1, #29
 800a1d0:	d82b      	bhi.n	800a22a <__sflush_r+0xb2>
 800a1d2:	4a2a      	ldr	r2, [pc, #168]	@ (800a27c <__sflush_r+0x104>)
 800a1d4:	410a      	asrs	r2, r1
 800a1d6:	07d6      	lsls	r6, r2, #31
 800a1d8:	d427      	bmi.n	800a22a <__sflush_r+0xb2>
 800a1da:	2200      	movs	r2, #0
 800a1dc:	6062      	str	r2, [r4, #4]
 800a1de:	04d9      	lsls	r1, r3, #19
 800a1e0:	6922      	ldr	r2, [r4, #16]
 800a1e2:	6022      	str	r2, [r4, #0]
 800a1e4:	d504      	bpl.n	800a1f0 <__sflush_r+0x78>
 800a1e6:	1c42      	adds	r2, r0, #1
 800a1e8:	d101      	bne.n	800a1ee <__sflush_r+0x76>
 800a1ea:	682b      	ldr	r3, [r5, #0]
 800a1ec:	b903      	cbnz	r3, 800a1f0 <__sflush_r+0x78>
 800a1ee:	6560      	str	r0, [r4, #84]	@ 0x54
 800a1f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a1f2:	602f      	str	r7, [r5, #0]
 800a1f4:	b1b9      	cbz	r1, 800a226 <__sflush_r+0xae>
 800a1f6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a1fa:	4299      	cmp	r1, r3
 800a1fc:	d002      	beq.n	800a204 <__sflush_r+0x8c>
 800a1fe:	4628      	mov	r0, r5
 800a200:	f7ff fca0 	bl	8009b44 <_free_r>
 800a204:	2300      	movs	r3, #0
 800a206:	6363      	str	r3, [r4, #52]	@ 0x34
 800a208:	e00d      	b.n	800a226 <__sflush_r+0xae>
 800a20a:	2301      	movs	r3, #1
 800a20c:	4628      	mov	r0, r5
 800a20e:	47b0      	blx	r6
 800a210:	4602      	mov	r2, r0
 800a212:	1c50      	adds	r0, r2, #1
 800a214:	d1c9      	bne.n	800a1aa <__sflush_r+0x32>
 800a216:	682b      	ldr	r3, [r5, #0]
 800a218:	2b00      	cmp	r3, #0
 800a21a:	d0c6      	beq.n	800a1aa <__sflush_r+0x32>
 800a21c:	2b1d      	cmp	r3, #29
 800a21e:	d001      	beq.n	800a224 <__sflush_r+0xac>
 800a220:	2b16      	cmp	r3, #22
 800a222:	d11e      	bne.n	800a262 <__sflush_r+0xea>
 800a224:	602f      	str	r7, [r5, #0]
 800a226:	2000      	movs	r0, #0
 800a228:	e022      	b.n	800a270 <__sflush_r+0xf8>
 800a22a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a22e:	b21b      	sxth	r3, r3
 800a230:	e01b      	b.n	800a26a <__sflush_r+0xf2>
 800a232:	690f      	ldr	r7, [r1, #16]
 800a234:	2f00      	cmp	r7, #0
 800a236:	d0f6      	beq.n	800a226 <__sflush_r+0xae>
 800a238:	0793      	lsls	r3, r2, #30
 800a23a:	680e      	ldr	r6, [r1, #0]
 800a23c:	bf08      	it	eq
 800a23e:	694b      	ldreq	r3, [r1, #20]
 800a240:	600f      	str	r7, [r1, #0]
 800a242:	bf18      	it	ne
 800a244:	2300      	movne	r3, #0
 800a246:	eba6 0807 	sub.w	r8, r6, r7
 800a24a:	608b      	str	r3, [r1, #8]
 800a24c:	f1b8 0f00 	cmp.w	r8, #0
 800a250:	dde9      	ble.n	800a226 <__sflush_r+0xae>
 800a252:	6a21      	ldr	r1, [r4, #32]
 800a254:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a256:	4643      	mov	r3, r8
 800a258:	463a      	mov	r2, r7
 800a25a:	4628      	mov	r0, r5
 800a25c:	47b0      	blx	r6
 800a25e:	2800      	cmp	r0, #0
 800a260:	dc08      	bgt.n	800a274 <__sflush_r+0xfc>
 800a262:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a266:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a26a:	81a3      	strh	r3, [r4, #12]
 800a26c:	f04f 30ff 	mov.w	r0, #4294967295
 800a270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a274:	4407      	add	r7, r0
 800a276:	eba8 0800 	sub.w	r8, r8, r0
 800a27a:	e7e7      	b.n	800a24c <__sflush_r+0xd4>
 800a27c:	dfbffffe 	.word	0xdfbffffe

0800a280 <_fflush_r>:
 800a280:	b538      	push	{r3, r4, r5, lr}
 800a282:	690b      	ldr	r3, [r1, #16]
 800a284:	4605      	mov	r5, r0
 800a286:	460c      	mov	r4, r1
 800a288:	b913      	cbnz	r3, 800a290 <_fflush_r+0x10>
 800a28a:	2500      	movs	r5, #0
 800a28c:	4628      	mov	r0, r5
 800a28e:	bd38      	pop	{r3, r4, r5, pc}
 800a290:	b118      	cbz	r0, 800a29a <_fflush_r+0x1a>
 800a292:	6a03      	ldr	r3, [r0, #32]
 800a294:	b90b      	cbnz	r3, 800a29a <_fflush_r+0x1a>
 800a296:	f7ff f90d 	bl	80094b4 <__sinit>
 800a29a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a29e:	2b00      	cmp	r3, #0
 800a2a0:	d0f3      	beq.n	800a28a <_fflush_r+0xa>
 800a2a2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2a4:	07d0      	lsls	r0, r2, #31
 800a2a6:	d404      	bmi.n	800a2b2 <_fflush_r+0x32>
 800a2a8:	0599      	lsls	r1, r3, #22
 800a2aa:	d402      	bmi.n	800a2b2 <_fflush_r+0x32>
 800a2ac:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2ae:	f7ff fc20 	bl	8009af2 <__retarget_lock_acquire_recursive>
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	4621      	mov	r1, r4
 800a2b6:	f7ff ff5f 	bl	800a178 <__sflush_r>
 800a2ba:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a2bc:	07da      	lsls	r2, r3, #31
 800a2be:	4605      	mov	r5, r0
 800a2c0:	d4e4      	bmi.n	800a28c <_fflush_r+0xc>
 800a2c2:	89a3      	ldrh	r3, [r4, #12]
 800a2c4:	059b      	lsls	r3, r3, #22
 800a2c6:	d4e1      	bmi.n	800a28c <_fflush_r+0xc>
 800a2c8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a2ca:	f7ff fc13 	bl	8009af4 <__retarget_lock_release_recursive>
 800a2ce:	e7dd      	b.n	800a28c <_fflush_r+0xc>

0800a2d0 <fiprintf>:
 800a2d0:	b40e      	push	{r1, r2, r3}
 800a2d2:	b503      	push	{r0, r1, lr}
 800a2d4:	4601      	mov	r1, r0
 800a2d6:	ab03      	add	r3, sp, #12
 800a2d8:	4805      	ldr	r0, [pc, #20]	@ (800a2f0 <fiprintf+0x20>)
 800a2da:	f853 2b04 	ldr.w	r2, [r3], #4
 800a2de:	6800      	ldr	r0, [r0, #0]
 800a2e0:	9301      	str	r3, [sp, #4]
 800a2e2:	f7ff fca3 	bl	8009c2c <_vfiprintf_r>
 800a2e6:	b002      	add	sp, #8
 800a2e8:	f85d eb04 	ldr.w	lr, [sp], #4
 800a2ec:	b003      	add	sp, #12
 800a2ee:	4770      	bx	lr
 800a2f0:	2000003c 	.word	0x2000003c

0800a2f4 <__swhatbuf_r>:
 800a2f4:	b570      	push	{r4, r5, r6, lr}
 800a2f6:	460c      	mov	r4, r1
 800a2f8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a2fc:	2900      	cmp	r1, #0
 800a2fe:	b096      	sub	sp, #88	@ 0x58
 800a300:	4615      	mov	r5, r2
 800a302:	461e      	mov	r6, r3
 800a304:	da0d      	bge.n	800a322 <__swhatbuf_r+0x2e>
 800a306:	89a3      	ldrh	r3, [r4, #12]
 800a308:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a30c:	f04f 0100 	mov.w	r1, #0
 800a310:	bf14      	ite	ne
 800a312:	2340      	movne	r3, #64	@ 0x40
 800a314:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a318:	2000      	movs	r0, #0
 800a31a:	6031      	str	r1, [r6, #0]
 800a31c:	602b      	str	r3, [r5, #0]
 800a31e:	b016      	add	sp, #88	@ 0x58
 800a320:	bd70      	pop	{r4, r5, r6, pc}
 800a322:	466a      	mov	r2, sp
 800a324:	f000 f848 	bl	800a3b8 <_fstat_r>
 800a328:	2800      	cmp	r0, #0
 800a32a:	dbec      	blt.n	800a306 <__swhatbuf_r+0x12>
 800a32c:	9901      	ldr	r1, [sp, #4]
 800a32e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a332:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a336:	4259      	negs	r1, r3
 800a338:	4159      	adcs	r1, r3
 800a33a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a33e:	e7eb      	b.n	800a318 <__swhatbuf_r+0x24>

0800a340 <__smakebuf_r>:
 800a340:	898b      	ldrh	r3, [r1, #12]
 800a342:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a344:	079d      	lsls	r5, r3, #30
 800a346:	4606      	mov	r6, r0
 800a348:	460c      	mov	r4, r1
 800a34a:	d507      	bpl.n	800a35c <__smakebuf_r+0x1c>
 800a34c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a350:	6023      	str	r3, [r4, #0]
 800a352:	6123      	str	r3, [r4, #16]
 800a354:	2301      	movs	r3, #1
 800a356:	6163      	str	r3, [r4, #20]
 800a358:	b003      	add	sp, #12
 800a35a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a35c:	ab01      	add	r3, sp, #4
 800a35e:	466a      	mov	r2, sp
 800a360:	f7ff ffc8 	bl	800a2f4 <__swhatbuf_r>
 800a364:	9f00      	ldr	r7, [sp, #0]
 800a366:	4605      	mov	r5, r0
 800a368:	4639      	mov	r1, r7
 800a36a:	4630      	mov	r0, r6
 800a36c:	f7fe ff06 	bl	800917c <_malloc_r>
 800a370:	b948      	cbnz	r0, 800a386 <__smakebuf_r+0x46>
 800a372:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a376:	059a      	lsls	r2, r3, #22
 800a378:	d4ee      	bmi.n	800a358 <__smakebuf_r+0x18>
 800a37a:	f023 0303 	bic.w	r3, r3, #3
 800a37e:	f043 0302 	orr.w	r3, r3, #2
 800a382:	81a3      	strh	r3, [r4, #12]
 800a384:	e7e2      	b.n	800a34c <__smakebuf_r+0xc>
 800a386:	89a3      	ldrh	r3, [r4, #12]
 800a388:	6020      	str	r0, [r4, #0]
 800a38a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a38e:	81a3      	strh	r3, [r4, #12]
 800a390:	9b01      	ldr	r3, [sp, #4]
 800a392:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a396:	b15b      	cbz	r3, 800a3b0 <__smakebuf_r+0x70>
 800a398:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a39c:	4630      	mov	r0, r6
 800a39e:	f000 f81d 	bl	800a3dc <_isatty_r>
 800a3a2:	b128      	cbz	r0, 800a3b0 <__smakebuf_r+0x70>
 800a3a4:	89a3      	ldrh	r3, [r4, #12]
 800a3a6:	f023 0303 	bic.w	r3, r3, #3
 800a3aa:	f043 0301 	orr.w	r3, r3, #1
 800a3ae:	81a3      	strh	r3, [r4, #12]
 800a3b0:	89a3      	ldrh	r3, [r4, #12]
 800a3b2:	431d      	orrs	r5, r3
 800a3b4:	81a5      	strh	r5, [r4, #12]
 800a3b6:	e7cf      	b.n	800a358 <__smakebuf_r+0x18>

0800a3b8 <_fstat_r>:
 800a3b8:	b538      	push	{r3, r4, r5, lr}
 800a3ba:	4d07      	ldr	r5, [pc, #28]	@ (800a3d8 <_fstat_r+0x20>)
 800a3bc:	2300      	movs	r3, #0
 800a3be:	4604      	mov	r4, r0
 800a3c0:	4608      	mov	r0, r1
 800a3c2:	4611      	mov	r1, r2
 800a3c4:	602b      	str	r3, [r5, #0]
 800a3c6:	f7f7 fecf 	bl	8002168 <_fstat>
 800a3ca:	1c43      	adds	r3, r0, #1
 800a3cc:	d102      	bne.n	800a3d4 <_fstat_r+0x1c>
 800a3ce:	682b      	ldr	r3, [r5, #0]
 800a3d0:	b103      	cbz	r3, 800a3d4 <_fstat_r+0x1c>
 800a3d2:	6023      	str	r3, [r4, #0]
 800a3d4:	bd38      	pop	{r3, r4, r5, pc}
 800a3d6:	bf00      	nop
 800a3d8:	20000a3c 	.word	0x20000a3c

0800a3dc <_isatty_r>:
 800a3dc:	b538      	push	{r3, r4, r5, lr}
 800a3de:	4d06      	ldr	r5, [pc, #24]	@ (800a3f8 <_isatty_r+0x1c>)
 800a3e0:	2300      	movs	r3, #0
 800a3e2:	4604      	mov	r4, r0
 800a3e4:	4608      	mov	r0, r1
 800a3e6:	602b      	str	r3, [r5, #0]
 800a3e8:	f7f7 fece 	bl	8002188 <_isatty>
 800a3ec:	1c43      	adds	r3, r0, #1
 800a3ee:	d102      	bne.n	800a3f6 <_isatty_r+0x1a>
 800a3f0:	682b      	ldr	r3, [r5, #0]
 800a3f2:	b103      	cbz	r3, 800a3f6 <_isatty_r+0x1a>
 800a3f4:	6023      	str	r3, [r4, #0]
 800a3f6:	bd38      	pop	{r3, r4, r5, pc}
 800a3f8:	20000a3c 	.word	0x20000a3c

0800a3fc <abort>:
 800a3fc:	b508      	push	{r3, lr}
 800a3fe:	2006      	movs	r0, #6
 800a400:	f000 f82c 	bl	800a45c <raise>
 800a404:	2001      	movs	r0, #1
 800a406:	f7f7 fe7b 	bl	8002100 <_exit>

0800a40a <_raise_r>:
 800a40a:	291f      	cmp	r1, #31
 800a40c:	b538      	push	{r3, r4, r5, lr}
 800a40e:	4605      	mov	r5, r0
 800a410:	460c      	mov	r4, r1
 800a412:	d904      	bls.n	800a41e <_raise_r+0x14>
 800a414:	2316      	movs	r3, #22
 800a416:	6003      	str	r3, [r0, #0]
 800a418:	f04f 30ff 	mov.w	r0, #4294967295
 800a41c:	bd38      	pop	{r3, r4, r5, pc}
 800a41e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800a420:	b112      	cbz	r2, 800a428 <_raise_r+0x1e>
 800a422:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800a426:	b94b      	cbnz	r3, 800a43c <_raise_r+0x32>
 800a428:	4628      	mov	r0, r5
 800a42a:	f000 f831 	bl	800a490 <_getpid_r>
 800a42e:	4622      	mov	r2, r4
 800a430:	4601      	mov	r1, r0
 800a432:	4628      	mov	r0, r5
 800a434:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800a438:	f000 b818 	b.w	800a46c <_kill_r>
 800a43c:	2b01      	cmp	r3, #1
 800a43e:	d00a      	beq.n	800a456 <_raise_r+0x4c>
 800a440:	1c59      	adds	r1, r3, #1
 800a442:	d103      	bne.n	800a44c <_raise_r+0x42>
 800a444:	2316      	movs	r3, #22
 800a446:	6003      	str	r3, [r0, #0]
 800a448:	2001      	movs	r0, #1
 800a44a:	e7e7      	b.n	800a41c <_raise_r+0x12>
 800a44c:	2100      	movs	r1, #0
 800a44e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800a452:	4620      	mov	r0, r4
 800a454:	4798      	blx	r3
 800a456:	2000      	movs	r0, #0
 800a458:	e7e0      	b.n	800a41c <_raise_r+0x12>
	...

0800a45c <raise>:
 800a45c:	4b02      	ldr	r3, [pc, #8]	@ (800a468 <raise+0xc>)
 800a45e:	4601      	mov	r1, r0
 800a460:	6818      	ldr	r0, [r3, #0]
 800a462:	f7ff bfd2 	b.w	800a40a <_raise_r>
 800a466:	bf00      	nop
 800a468:	2000003c 	.word	0x2000003c

0800a46c <_kill_r>:
 800a46c:	b538      	push	{r3, r4, r5, lr}
 800a46e:	4d07      	ldr	r5, [pc, #28]	@ (800a48c <_kill_r+0x20>)
 800a470:	2300      	movs	r3, #0
 800a472:	4604      	mov	r4, r0
 800a474:	4608      	mov	r0, r1
 800a476:	4611      	mov	r1, r2
 800a478:	602b      	str	r3, [r5, #0]
 800a47a:	f7f7 fe31 	bl	80020e0 <_kill>
 800a47e:	1c43      	adds	r3, r0, #1
 800a480:	d102      	bne.n	800a488 <_kill_r+0x1c>
 800a482:	682b      	ldr	r3, [r5, #0]
 800a484:	b103      	cbz	r3, 800a488 <_kill_r+0x1c>
 800a486:	6023      	str	r3, [r4, #0]
 800a488:	bd38      	pop	{r3, r4, r5, pc}
 800a48a:	bf00      	nop
 800a48c:	20000a3c 	.word	0x20000a3c

0800a490 <_getpid_r>:
 800a490:	f7f7 be1e 	b.w	80020d0 <_getpid>

0800a494 <_init>:
 800a494:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a496:	bf00      	nop
 800a498:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a49a:	bc08      	pop	{r3}
 800a49c:	469e      	mov	lr, r3
 800a49e:	4770      	bx	lr

0800a4a0 <_fini>:
 800a4a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a4a2:	bf00      	nop
 800a4a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a4a6:	bc08      	pop	{r3}
 800a4a8:	469e      	mov	lr, r3
 800a4aa:	4770      	bx	lr
